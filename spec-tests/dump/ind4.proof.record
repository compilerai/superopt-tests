==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x14 $x12)))
 (let (($x19 (and $x9 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x14 $x12)))
 (let (($x19 (and $x9 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x130 (= true false)))
 (let (($x131 (= $x130 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x123 (concat ?x120 (concat ?x117 ?x115)))))
 (let (($x125 (= ?x124 input.dst.llvm-%l)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x106)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x102 $x104)))
 (let (($x108 (and $x105 $x107)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x100 $x108)))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x89 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x93 (=> $x89 true)))
 (let (($x91 (= $x89 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x80 (= false false)))
 (let (($x75 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x81 (=> $x75 $x80)))
 (let (($x79 (= $x75 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x82 (and $x79 $x81)))
 (let (($x92 (and $x82 $x91)))
 (let (($x94 (and $x92 $x93)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let (($x97 (= $x96 true)))
 (let (($x113 (and $x97 $x112)))
 (let (($x128 (and $x113 $x127)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x129 (and $x19 $x128)))
 (let (($x132 (=> $x129 $x131)))
 (not $x132))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x130 (= true false)))
 (let (($x131 (= $x130 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x123 (concat ?x120 (concat ?x117 ?x115)))))
 (let (($x125 (= ?x124 input.dst.llvm-%l)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x106)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x102 $x104)))
 (let (($x108 (and $x105 $x107)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x100 $x108)))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let (($x89 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x93 (=> $x89 true)))
 (let (($x91 (= $x89 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x80 (= false false)))
 (let (($x75 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x81 (=> $x75 $x80)))
 (let (($x79 (= $x75 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x82 (and $x79 $x81)))
 (let (($x92 (and $x82 $x91)))
 (let (($x94 (and $x92 $x93)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let (($x97 (= $x96 true)))
 (let (($x113 (and $x97 $x112)))
 (let (($x128 (and $x113 $x127)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x129 (and $x19 $x128)))
 (let (($x132 (=> $x129 $x131)))
 (not $x132))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv134217728 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv134217728 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv134217731 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (= true false)))
 (let (($x86 (= $x85 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x23 (concat ?x55 (concat ?x51 ?x54)))))
 (let (($x71 (= ?x70 input.dst.llvm-%l)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x61)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x67 $x64)))
 (let (($x60 (and $x65 $x62)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x48 $x60)))
 (let (($x66 (= $x63 true)))
 (let (($x69 (= $x66 true)))
 (let (($x56 (= $x69 true)))
 (let (($x36 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x14 (=> $x36 false)))
 (let (($x10 (= $x36 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x24 (= false false)))
 (let (($x42 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x20 (=> $x42 $x24)))
 (let (($x40 (= $x42 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x46 (and $x40 $x20)))
 (let (($x15 (and $x46 $x10)))
 (let (($x38 (and $x15 $x14)))
 (let (($x6 (= $x38 true)))
 (let (($x5 (= $x6 true)))
 (let (($x44 (= $x5 true)))
 (let (($x57 (and $x44 $x56)))
 (let (($x83 (and $x57 $x73)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x84 (and $x19 $x83)))
 (let (($x87 (=> $x84 $x86)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (= true false)))
 (let (($x86 (= $x85 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x23 (concat ?x55 (concat ?x51 ?x54)))))
 (let (($x71 (= ?x70 input.dst.llvm-%l)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x61)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x67 $x64)))
 (let (($x60 (and $x65 $x62)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x48 $x60)))
 (let (($x66 (= $x63 true)))
 (let (($x69 (= $x66 true)))
 (let (($x56 (= $x69 true)))
 (let (($x36 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x14 (=> $x36 false)))
 (let (($x10 (= $x36 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x24 (= false false)))
 (let (($x42 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x20 (=> $x42 $x24)))
 (let (($x40 (= $x42 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x46 (and $x40 $x20)))
 (let (($x15 (and $x46 $x10)))
 (let (($x38 (and $x15 $x14)))
 (let (($x6 (= $x38 true)))
 (let (($x5 (= $x6 true)))
 (let (($x44 (= $x5 true)))
 (let (($x57 (and $x44 $x56)))
 (let (($x83 (and $x57 $x73)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x84 (and $x19 $x83)))
 (let (($x87 (=> $x84 $x86)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x129)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x27 $x132)))
 (let (($x128 (and $x133 $x130)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x29 $x128)))
 (let (($x22 (= $x18 true)))
 (let (($x17 (= $x22 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x119 (concat ?x118 (concat ?x124 ?x32)))))
 (let (($x121 (= input.dst.llvm-%l ?x117)))
 (let (($x45 (and (and (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l) $x29) $x128)))
 (let (($x76 (and $x45 $x121)))
 (let (($x113 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x107 (=> $x113 true)))
 (let (($x110 (= $x113 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x96 (= false false)))
 (let (($x81 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x97 (=> $x81 $x96)))
 (let (($x101 (= $x81 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x92 (and $x101 $x97)))
 (let (($x106 (and $x92 $x110)))
 (let (($x105 (and $x106 $x107)))
 (let (($x13 (and $x105 $x76)))
 (let (($x43 (= $x13 true)))
 (let (($x39 (= $x43 true)))
 (let (($x47 (= $x39 true)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x9 (and $x33 $x47)))
 (let (($x26 (=> $x9 $x17)))
 (not $x26))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x129)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x27 $x132)))
 (let (($x128 (and $x133 $x130)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x29 $x128)))
 (let (($x22 (= $x18 true)))
 (let (($x17 (= $x22 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x119 (concat ?x118 (concat ?x124 ?x32)))))
 (let (($x121 (= input.dst.llvm-%l ?x117)))
 (let (($x45 (and (and (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l) $x29) $x128)))
 (let (($x76 (and $x45 $x121)))
 (let (($x113 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x107 (=> $x113 true)))
 (let (($x110 (= $x113 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x96 (= false false)))
 (let (($x81 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x97 (=> $x81 $x96)))
 (let (($x101 (= $x81 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x92 (and $x101 $x97)))
 (let (($x106 (and $x92 $x110)))
 (let (($x105 (and $x106 $x107)))
 (let (($x13 (and $x105 $x76)))
 (let (($x43 (= $x13 true)))
 (let (($x39 (= $x43 true)))
 (let (($x47 (= $x39 true)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x9 (and $x33 $x47)))
 (let (($x26 (=> $x9 $x17)))
 (not $x26))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x90 (= $x56 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x11 (concat ?x71 (concat ?x49 (concat ?x5 ?x74)))))
 (let (($x62 (= input.dst.llvm-%l ?x11)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x38)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x75 $x60)))
 (let (($x12 (and $x79 $x58)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x6 (and (and (and $x54 $x20) $x12) $x62)))
 (let (($x25 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x24 (=> $x25 true)))
 (let (($x91 (= $x25 (bvuge (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x31 (= false false)))
 (let (($x70 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x55 (=> $x70 $x31)))
 (let (($x57 (= $x70 (= (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x65 (and $x57 $x55)))
 (let (($x95 (and $x65 $x91)))
 (let (($x67 (and $x95 $x24)))
 (let (($x78 (and $x67 $x6)))
 (let (($x82 (= $x78 true)))
 (let (($x89 (= $x82 true)))
 (let (($x80 (= $x89 true)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x93 (and $x33 $x80)))
 (let (($x94 (=> $x93 $x90)))
 (not $x94)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x90 (= $x56 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x11 (concat ?x71 (concat ?x49 (concat ?x5 ?x74)))))
 (let (($x62 (= input.dst.llvm-%l ?x11)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x38)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x75 $x60)))
 (let (($x12 (and $x79 $x58)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x6 (and (and (and $x54 $x20) $x12) $x62)))
 (let (($x25 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x24 (=> $x25 true)))
 (let (($x91 (= $x25 (bvuge (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x31 (= false false)))
 (let (($x70 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x55 (=> $x70 $x31)))
 (let (($x57 (= $x70 (= (ite $x56 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x65 (and $x57 $x55)))
 (let (($x95 (and $x65 $x91)))
 (let (($x67 (and $x95 $x24)))
 (let (($x78 (and $x67 $x6)))
 (let (($x82 (= $x78 true)))
 (let (($x89 (= $x82 true)))
 (let (($x80 (= $x89 true)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x93 (and $x33 $x80)))
 (let (($x94 (=> $x93 $x90)))
 (not $x94)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv134217728 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv67108867 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv67108867 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv131072 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x00000001
                     #x00)
              #x00000002
              #x00)
       #x00000003
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x46 (= $x29 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x76 (concat ?x125 (concat ?x117 ?x13)))))
 (let (($x40 (= input.dst.llvm-%l ?x39)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x9)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x26 $x18)))
 (let (($x19 (and $x22 $x17)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x85 (and (and (and $x118 $x114) $x19) $x40)))
 (let (($x45 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x130 (=> $x45 false)))
 (let (($x129 (= $x45 (bvuge (ite $x29 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x106 (= false false)))
 (let (($x35 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x107 (=> $x35 $x106)))
 (let (($x37 (= $x35 (= (ite $x29 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x109 (and $x37 $x107)))
 (let (($x132 (and $x109 $x129)))
 (let (($x61 (and $x132 $x130)))
 (let (($x7 (and $x61 $x85)))
 (let (($x52 (= $x7 true)))
 (let (($x99 (= $x52 true)))
 (let (($x86 (= $x99 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x63 (and $x21 $x86)))
 (let (($x72 (=> $x63 $x46)))
 (not $x72)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x46 (= $x29 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x76 (concat ?x125 (concat ?x117 ?x13)))))
 (let (($x40 (= input.dst.llvm-%l ?x39)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x9)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x26 $x18)))
 (let (($x19 (and $x22 $x17)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x85 (and (and (and $x118 $x114) $x19) $x40)))
 (let (($x45 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x130 (=> $x45 false)))
 (let (($x129 (= $x45 (bvuge (ite $x29 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x106 (= false false)))
 (let (($x35 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x107 (=> $x35 $x106)))
 (let (($x37 (= $x35 (= (ite $x29 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x109 (and $x37 $x107)))
 (let (($x132 (and $x109 $x129)))
 (let (($x61 (and $x132 $x130)))
 (let (($x7 (and $x61 $x85)))
 (let (($x52 (= $x7 true)))
 (let (($x99 (= $x52 true)))
 (let (($x86 (= $x99 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x63 (and $x21 $x86)))
 (let (($x72 (=> $x63 $x46)))
 (not $x72)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x119 ((_ extract 30 0) input.dst.llvm-%l)))
 (let (($x128 (= (_ bv0 31) ?x119)))
 (let (($x102 (= $x128 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x77 (concat ?x58 (concat ?x31 ?x78)))))
 (let (($x70 (= input.dst.llvm-%l ?x89)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x93)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x53 $x90)))
 (let (($x27 (and $x94 $x98)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x96 (and (and (and $x79 $x104) $x27) $x70)))
 (let (($x38 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x71 (=> $x38 true)))
 (let (($x74 (= $x38 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x6 (= false false)))
 (let (($x123 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x65 (=> $x123 $x6)))
 (let (($x83 (= $x123 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x62 (and $x83 $x65)))
 (let (($x73 (and $x62 $x74)))
 (let (($x20 (and $x73 $x71)))
 (let (($x48 (and $x20 $x96)))
 (let (($x97 (= $x48 true)))
 (let (($x105 (= $x97 true)))
 (let (($x122 (= $x105 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x127 (and $x51 $x122)))
 (let (($x112 (=> $x127 $x102)))
 (not $x112))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x119 ((_ extract 30 0) input.dst.llvm-%l)))
 (let (($x128 (= (_ bv0 31) ?x119)))
 (let (($x102 (= $x128 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x77 (concat ?x58 (concat ?x31 ?x78)))))
 (let (($x70 (= input.dst.llvm-%l ?x89)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x93)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x53 $x90)))
 (let (($x27 (and $x94 $x98)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x96 (and (and (and $x79 $x104) $x27) $x70)))
 (let (($x38 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x71 (=> $x38 true)))
 (let (($x74 (= $x38 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x6 (= false false)))
 (let (($x123 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x65 (=> $x123 $x6)))
 (let (($x83 (= $x123 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x62 (and $x83 $x65)))
 (let (($x73 (and $x62 $x74)))
 (let (($x20 (and $x73 $x71)))
 (let (($x48 (and $x20 $x96)))
 (let (($x97 (= $x48 true)))
 (let (($x105 (= $x97 true)))
 (let (($x122 (= $x105 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x127 (and $x51 $x122)))
 (let (($x112 (=> $x127 $x102)))
 (not $x112))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b01000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000003 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv134217728 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv268435464 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv268435467 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv268435464 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv268435467 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 ((_ extract 30 0) input.dst.llvm-%l)))
 (let (($x66 (= (_ bv0 31) ?x95)))
 (let (($x60 (= $x66 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x121 (concat ?x39 (concat ?x101 ?x10)))))
 (let (($x124 (= input.dst.llvm-%l ?x117)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x131)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x86 $x91)))
 (let (($x72 (and $x33 $x46)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x56 (and (and (and $x84 $x125) $x72) $x124)))
 (let (($x120 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x22 (=> $x120 false)))
 (let (($x19 (= $x120 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x103 (= false false)))
 (let (($x92 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x115 (=> $x92 $x103)))
 (let (($x114 (= $x92 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x118 (and $x114 $x115)))
 (let (($x50 (and $x118 $x19)))
 (let (($x9 (and $x50 $x22)))
 (let (($x29 (and $x9 $x56)))
 (let (($x24 (= $x29 true)))
 (let (($x49 (= $x24 true)))
 (let (($x30 (= $x49 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x69 (and $x51 $x30)))
 (let (($x16 (=> $x69 $x60)))
 (not $x16))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 ((_ extract 30 0) input.dst.llvm-%l)))
 (let (($x66 (= (_ bv0 31) ?x95)))
 (let (($x60 (= $x66 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x121 (concat ?x39 (concat ?x101 ?x10)))))
 (let (($x124 (= input.dst.llvm-%l ?x117)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x131)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x86 $x91)))
 (let (($x72 (and $x33 $x46)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x56 (and (and (and $x84 $x125) $x72) $x124)))
 (let (($x120 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x22 (=> $x120 false)))
 (let (($x19 (= $x120 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x103 (= false false)))
 (let (($x92 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x115 (=> $x92 $x103)))
 (let (($x114 (= $x92 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x118 (and $x114 $x115)))
 (let (($x50 (and $x118 $x19)))
 (let (($x9 (and $x50 $x22)))
 (let (($x29 (and $x9 $x56)))
 (let (($x24 (= $x29 true)))
 (let (($x49 (= $x24 true)))
 (let (($x30 (= $x49 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x69 (and $x51 $x30)))
 (let (($x16 (=> $x69 $x60)))
 (not $x16))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 ((_ extract 29 0) input.dst.llvm-%l)))
 (let (($x133 (= (_ bv0 30) ?x130)))
 (let (($x61 (= $x133 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x55 (concat ?x89 (concat ?x26 ?x128)))))
 (let (($x15 (= input.dst.llvm-%l ?x31)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x112)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x122 $x35)))
 (let (($x119 (and $x102 $x116)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x23 (and (and (and $x37 $x58) $x119) $x15)))
 (let (($x12 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x94 (=> $x12 true)))
 (let (($x27 (= $x12 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x42 (= false false)))
 (let (($x63 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x67 (=> $x63 $x42)))
 (let (($x104 (= $x63 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x79 (and $x104 $x67)))
 (let (($x113 (and $x79 $x27)))
 (let (($x93 (and $x113 $x94)))
 (let (($x36 (and $x93 $x23)))
 (let (($x126 (= $x36 true)))
 (let (($x111 (= $x126 true)))
 (let (($x109 (= $x111 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x45 (and $x54 $x109)))
 (let (($x28 (=> $x45 $x61)))
 (not $x28))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 ((_ extract 29 0) input.dst.llvm-%l)))
 (let (($x133 (= (_ bv0 30) ?x130)))
 (let (($x61 (= $x133 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x55 (concat ?x89 (concat ?x26 ?x128)))))
 (let (($x15 (= input.dst.llvm-%l ?x31)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x112)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x122 $x35)))
 (let (($x119 (and $x102 $x116)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x23 (and (and (and $x37 $x58) $x119) $x15)))
 (let (($x12 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x94 (=> $x12 true)))
 (let (($x27 (= $x12 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x42 (= false false)))
 (let (($x63 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x67 (=> $x63 $x42)))
 (let (($x104 (= $x63 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x79 (and $x104 $x67)))
 (let (($x113 (and $x79 $x27)))
 (let (($x93 (and $x113 $x94)))
 (let (($x36 (and $x93 $x23)))
 (let (($x126 (= $x36 true)))
 (let (($x111 (= $x126 true)))
 (let (($x109 (= $x111 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x45 (and $x54 $x109)))
 (let (($x28 (=> $x45 $x61)))
 (not $x28))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00100000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b00100000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000003 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv134217728 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741827 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x71 ((_ extract 29 0) input.dst.llvm-%l)))
 (let (($x108 (= (_ bv0 30) ?x71)))
 (let (($x20 (= $x108 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x7 (concat ?x117 (concat ?x53 ?x66)))))
 (let (($x40 (= input.dst.llvm-%l ?x101)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x16)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x30 $x123)))
 (let (($x95 (and $x60 $x25)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x129 (and (and (and $x83 $x39) $x95) $x40)))
 (let (($x13 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x33 (=> $x13 false)))
 (let (($x72 (= $x13 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x85 (= false false)))
 (let (($x127 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x17 (=> $x127 $x85)))
 (let (($x125 (= $x127 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x84 (and $x125 $x17)))
 (let (($x99 (and $x84 $x72)))
 (let (($x131 (and $x99 $x33)))
 (let (($x107 (and $x131 $x129)))
 (let (($x75 (= $x107 true)))
 (let (($x59 (= $x75 true)))
 (let (($x62 (= $x59 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x38 (and $x54 $x62)))
 (let (($x41 (=> $x38 $x20)))
 (not $x41))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x71 ((_ extract 29 0) input.dst.llvm-%l)))
 (let (($x108 (= (_ bv0 30) ?x71)))
 (let (($x20 (= $x108 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x7 (concat ?x117 (concat ?x53 ?x66)))))
 (let (($x40 (= input.dst.llvm-%l ?x101)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x16)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x30 $x123)))
 (let (($x95 (and $x60 $x25)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x129 (and (and (and $x83 $x39) $x95) $x40)))
 (let (($x13 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x33 (=> $x13 false)))
 (let (($x72 (= $x13 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x85 (= false false)))
 (let (($x127 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x17 (=> $x127 $x85)))
 (let (($x125 (= $x127 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x84 (and $x125 $x17)))
 (let (($x99 (and $x84 $x72)))
 (let (($x131 (and $x99 $x33)))
 (let (($x107 (and $x131 $x129)))
 (let (($x75 (= $x107 true)))
 (let (($x59 (= $x75 true)))
 (let (($x62 (= $x59 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x38 (and $x54 $x62)))
 (let (($x41 (=> $x38 $x20)))
 (not $x41))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x22 ((_ extract 28 0) input.dst.llvm-%l)))
 (let (($x76 (= (_ bv0 29) ?x22)))
 (let (($x9 (= $x76 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x48 (concat ?x31 (concat ?x86 ?x133)))))
 (let (($x70 (= input.dst.llvm-%l ?x26)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x28)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x109 $x92)))
 (let (($x130 (and $x61 $x132)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x74 (and (and (and $x114 $x89) $x130) $x70)))
 (let (($x78 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x102 (=> $x78 true)))
 (let (($x119 (= $x78 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x96 (= false false)))
 (let (($x69 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x98 (=> $x69 $x96)))
 (let (($x58 (= $x69 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x37 (and $x58 $x98)))
 (let (($x105 (and $x37 $x119)))
 (let (($x112 (and $x105 $x102)))
 (let (($x65 (and $x112 $x74)))
 (let (($x11 (= $x65 true)))
 (let (($x34 (= $x11 true)))
 (let (($x118 (= $x34 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x120 (and $x21 $x118)))
 (let (($x14 (=> $x120 $x9)))
 (not $x14))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x22 ((_ extract 28 0) input.dst.llvm-%l)))
 (let (($x76 (= (_ bv0 29) ?x22)))
 (let (($x9 (= $x76 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x48 (concat ?x31 (concat ?x86 ?x133)))))
 (let (($x70 (= input.dst.llvm-%l ?x26)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x28)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x109 $x92)))
 (let (($x130 (and $x61 $x132)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x74 (and (and (and $x114 $x89) $x130) $x70)))
 (let (($x78 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x102 (=> $x78 true)))
 (let (($x119 (= $x78 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x96 (= false false)))
 (let (($x69 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x98 (=> $x69 $x96)))
 (let (($x58 (= $x69 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x37 (and $x58 $x98)))
 (let (($x105 (and $x37 $x119)))
 (let (($x112 (and $x105 $x102)))
 (let (($x65 (and $x112 $x74)))
 (let (($x11 (= $x65 true)))
 (let (($x34 (= $x11 true)))
 (let (($x118 (= $x34 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x120 (and $x21 $x118)))
 (let (($x14 (=> $x120 $x9)))
 (not $x14))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00010000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b00010000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000003 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv134217728 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741827 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv128 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 ((_ extract 28 0) input.dst.llvm-%l)))
 (let (($x77 (= (_ bv0 29) ?x94)))
 (let (($x93 (= $x77 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x29 (concat ?x101 (concat ?x122 ?x108)))))
 (let (($x124 (= input.dst.llvm-%l ?x53)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x41)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x62 $x63)))
 (let (($x71 (and $x20 $x73)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x19 (and (and (and $x104 $x117) $x71) $x124)))
 (let (($x10 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x60 (=> $x10 false)))
 (let (($x95 (= $x10 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x56 (= false false)))
 (let (($x45 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x46 (=> $x45 $x56)))
 (let (($x39 (= $x45 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x83 (and $x39 $x46)))
 (let (($x49 (and $x83 $x95)))
 (let (($x16 (and $x49 $x60)))
 (let (($x115 (and $x16 $x19)))
 (let (($x47 (= $x115 true)))
 (let (($x81 (= $x47 true)))
 (let (($x79 (= $x81 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x12 (and $x21 $x79)))
 (let (($x87 (=> $x12 $x93)))
 (not $x87))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 ((_ extract 28 0) input.dst.llvm-%l)))
 (let (($x77 (= (_ bv0 29) ?x94)))
 (let (($x93 (= $x77 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x29 (concat ?x101 (concat ?x122 ?x108)))))
 (let (($x124 (= input.dst.llvm-%l ?x53)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x41)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x62 $x63)))
 (let (($x71 (and $x20 $x73)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x19 (and (and (and $x104 $x117) $x71) $x124)))
 (let (($x10 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x60 (=> $x10 false)))
 (let (($x95 (= $x10 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x56 (= false false)))
 (let (($x45 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x46 (=> $x45 $x56)))
 (let (($x39 (= $x45 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x83 (and $x39 $x46)))
 (let (($x49 (and $x83 $x95)))
 (let (($x16 (and $x49 $x60)))
 (let (($x115 (and $x16 $x19)))
 (let (($x47 (= $x115 true)))
 (let (($x81 (= $x47 true)))
 (let (($x79 (= $x81 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x12 (and $x21 $x79)))
 (let (($x87 (=> $x12 $x93)))
 (not $x87))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x33 ((_ extract 27 0) input.dst.llvm-%l)))
 (let (($x121 (= (_ bv0 28) ?x33)))
 (let (($x131 (= $x121 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x36 (concat ?x26 (concat ?x30 ?x76)))))
 (let (($x15 (= input.dst.llvm-%l ?x86)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x14)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x118 $x127)))
 (let (($x22 (and $x9 $x50)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x27 (and (and (and $x125 $x31) $x22) $x15)))
 (let (($x128 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x61 (=> $x128 true)))
 (let (($x130 (= $x128 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x23 (= false false)))
 (let (($x38 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x116 (=> $x38 $x23)))
 (let (($x89 (= $x38 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x114 (and $x89 $x116)))
 (let (($x111 (and $x114 $x130)))
 (let (($x28 (and $x111 $x61)))
 (let (($x67 (and $x28 $x27)))
 (let (($x80 (= $x67 true)))
 (let (($x110 (= $x80 true)))
 (let (($x84 (= $x110 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x13 (and $x51 $x84)))
 (let (($x8 (=> $x13 $x131)))
 (not $x8))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x33 ((_ extract 27 0) input.dst.llvm-%l)))
 (let (($x121 (= (_ bv0 28) ?x33)))
 (let (($x131 (= $x121 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x36 (concat ?x26 (concat ?x30 ?x76)))))
 (let (($x15 (= input.dst.llvm-%l ?x86)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x14)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x118 $x127)))
 (let (($x22 (and $x9 $x50)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x27 (and (and (and $x125 $x31) $x22) $x15)))
 (let (($x128 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x61 (=> $x128 true)))
 (let (($x130 (= $x128 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x23 (= false false)))
 (let (($x38 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x116 (=> $x38 $x23)))
 (let (($x89 (= $x38 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x114 (and $x89 $x116)))
 (let (($x111 (and $x114 $x130)))
 (let (($x28 (and $x111 $x61)))
 (let (($x67 (and $x28 $x27)))
 (let (($x80 (= $x67 true)))
 (let (($x110 (= $x80 true)))
 (let (($x84 (= $x110 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x13 (and $x51 $x84)))
 (let (($x8 (=> $x13 $x131)))
 (not $x8))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00001000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b00001000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000003 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv134217728 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2315255808 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2315255811 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2315255808 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2315255811 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv131072 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 ((_ extract 27 0) input.dst.llvm-%l)))
 (let (($x55 (= (_ bv0 28) ?x102)))
 (let (($x112 (= $x55 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x107 (concat ?x53 (concat ?x109 ?x77)))))
 (let (($x40 (= input.dst.llvm-%l ?x122)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x87)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x79 $x69)))
 (let (($x94 (and $x93 $x113)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x72 (and (and (and $x58 $x101) $x94) $x40)))
 (let (($x66 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x20 (=> $x66 false)))
 (let (($x71 (= $x66 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x129 (= false false)))
 (let (($x120 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x25 (=> $x120 $x129)))
 (let (($x117 (= $x120 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x104 (and $x117 $x25)))
 (let (($x59 (and $x104 $x71)))
 (let (($x41 (and $x59 $x20)))
 (let (($x17 (and $x41 $x72)))
 (let (($x32 (= $x17 true)))
 (let (($x88 (= $x32 true)))
 (let (($x37 (= $x88 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x78 (and $x51 $x37)))
 (let (($x18 (=> $x78 $x112)))
 (not $x18))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 ((_ extract 27 0) input.dst.llvm-%l)))
 (let (($x55 (= (_ bv0 28) ?x102)))
 (let (($x112 (= $x55 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x107 (concat ?x53 (concat ?x109 ?x77)))))
 (let (($x40 (= input.dst.llvm-%l ?x122)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x87)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x79 $x69)))
 (let (($x94 (and $x93 $x113)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x72 (and (and (and $x58 $x101) $x94) $x40)))
 (let (($x66 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x20 (=> $x66 false)))
 (let (($x71 (= $x66 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x129 (= false false)))
 (let (($x120 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x25 (=> $x120 $x129)))
 (let (($x117 (= $x120 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x104 (and $x117 $x25)))
 (let (($x59 (and $x104 $x71)))
 (let (($x41 (and $x59 $x20)))
 (let (($x17 (and $x41 $x72)))
 (let (($x32 (= $x17 true)))
 (let (($x88 (= $x32 true)))
 (let (($x37 (= $x88 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x78 (and $x51 $x37)))
 (let (($x18 (=> $x78 $x112)))
 (not $x18))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x60 ((_ extract 26 0) input.dst.llvm-%l)))
 (let (($x7 (= (_ bv0 27) ?x60)))
 (let (($x16 (= $x7 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x65 (concat ?x86 (concat ?x62 ?x121)))))
 (let (($x70 (= input.dst.llvm-%l ?x30)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x8)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x84 $x45)))
 (let (($x33 (and $x131 $x99)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x119 (and (and (and $x39 $x26) $x33) $x70)))
 (let (($x133 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x9 (=> $x133 true)))
 (let (($x22 (= $x133 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x74 (= false false)))
 (let (($x12 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x132 (=> $x12 $x74)))
 (let (($x31 (= $x12 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x125 (and $x31 $x132)))
 (let (($x34 (and $x125 $x22)))
 (let (($x14 (and $x34 $x9)))
 (let (($x98 (and $x14 $x119)))
 (let (($x57 (= $x98 true)))
 (let (($x44 (= $x57 true)))
 (let (($x83 (= $x44 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x10 (and $x54 $x83)))
 (let (($x90 (=> $x10 $x16)))
 (not $x90))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x60 ((_ extract 26 0) input.dst.llvm-%l)))
 (let (($x7 (= (_ bv0 27) ?x60)))
 (let (($x16 (= $x7 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x65 (concat ?x86 (concat ?x62 ?x121)))))
 (let (($x70 (= input.dst.llvm-%l ?x30)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x8)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x84 $x45)))
 (let (($x33 (and $x131 $x99)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x119 (and (and (and $x39 $x26) $x33) $x70)))
 (let (($x133 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x9 (=> $x133 true)))
 (let (($x22 (= $x133 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x74 (= false false)))
 (let (($x12 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x132 (=> $x12 $x74)))
 (let (($x31 (= $x12 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x125 (and $x31 $x132)))
 (let (($x34 (and $x125 $x22)))
 (let (($x14 (and $x34 $x9)))
 (let (($x98 (and $x14 $x119)))
 (let (($x57 (= $x98 true)))
 (let (($x44 (= $x57 true)))
 (let (($x83 (= $x44 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x10 (and $x54 $x83)))
 (let (($x90 (=> $x10 $x16)))
 (not $x90))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000100000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b00000100)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000003 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv301989888 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv301989891 32) (_ bv4 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv301989888 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv301989891 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv32 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x61 ((_ extract 26 0) input.dst.llvm-%l)))
 (let (($x48 (= (_ bv0 27) ?x61)))
 (let (($x28 (= $x48 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x115 (concat ?x122 (concat ?x118 ?x55)))))
 (let (($x124 (= input.dst.llvm-%l ?x109)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x18)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x37 $x38)))
 (let (($x102 (and $x112 $x105)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x95 (and (and (and $x89 $x53) $x102) $x124)))
 (let (($x108 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x93 (=> $x108 false)))
 (let (($x94 (= $x108 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x19 (= false false)))
 (let (($x13 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x73 (=> $x13 $x19)))
 (let (($x101 (= $x13 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x58 (and $x101 $x73)))
 (let (($x81 (and $x58 $x94)))
 (let (($x87 (and $x81 $x93)))
 (let (($x46 (and $x87 $x95)))
 (let (($x52 (= $x46 true)))
 (let (($x106 (= $x52 true)))
 (let (($x114 (= $x106 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x128 (and $x54 $x114)))
 (let (($x91 (=> $x128 $x28)))
 (not $x91))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x61 ((_ extract 26 0) input.dst.llvm-%l)))
 (let (($x48 (= (_ bv0 27) ?x61)))
 (let (($x28 (= $x48 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x115 (concat ?x122 (concat ?x118 ?x55)))))
 (let (($x124 (= input.dst.llvm-%l ?x109)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x18)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x37 $x38)))
 (let (($x102 (and $x112 $x105)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x95 (and (and (and $x89 $x53) $x102) $x124)))
 (let (($x108 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x93 (=> $x108 false)))
 (let (($x94 (= $x108 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x19 (= false false)))
 (let (($x13 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x73 (=> $x13 $x19)))
 (let (($x101 (= $x13 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x58 (and $x101 $x73)))
 (let (($x81 (and $x58 $x94)))
 (let (($x87 (and $x81 $x93)))
 (let (($x46 (and $x87 $x95)))
 (let (($x52 (= $x46 true)))
 (let (($x106 (= $x52 true)))
 (let (($x114 (= $x106 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x128 (and $x54 $x114)))
 (let (($x91 (=> $x128 $x28)))
 (not $x91))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x20 ((_ extract 25 0) input.dst.llvm-%l)))
 (let (($x29 (= (_ bv0 26) ?x20)))
 (let (($x41 (= $x29 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x67 (concat ?x30 (concat ?x79 ?x7)))))
 (let (($x15 (= input.dst.llvm-%l ?x62)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x90)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x83 $x120)))
 (let (($x60 (and $x16 $x49)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x130 (and (and (and $x117 $x86) $x60) $x15)))
 (let (($x76 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x131 (=> $x76 true)))
 (let (($x33 (= $x76 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x27 (= false false)))
 (let (($x78 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x50 (=> $x78 $x27)))
 (let (($x26 (= $x78 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x39 (and $x26 $x50)))
 (let (($x110 (and $x39 $x33)))
 (let (($x8 (and $x110 $x131)))
 (let (($x116 (and $x8 $x130)))
 (let (($x97 (= $x116 true)))
 (let (($x6 (= $x97 true)))
 (let (($x104 (= $x6 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x66 (and $x21 $x104)))
 (let (($x35 (=> $x66 $x41)))
 (not $x35))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x20 ((_ extract 25 0) input.dst.llvm-%l)))
 (let (($x29 (= (_ bv0 26) ?x20)))
 (let (($x41 (= $x29 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x67 (concat ?x30 (concat ?x79 ?x7)))))
 (let (($x15 (= input.dst.llvm-%l ?x62)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x90)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x83 $x120)))
 (let (($x60 (and $x16 $x49)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x130 (and (and (and $x117 $x86) $x60) $x15)))
 (let (($x76 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x131 (=> $x76 true)))
 (let (($x33 (= $x76 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x27 (= false false)))
 (let (($x78 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x50 (=> $x78 $x27)))
 (let (($x26 (= $x78 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x39 (and $x26 $x50)))
 (let (($x110 (and $x39 $x33)))
 (let (($x8 (and $x110 $x131)))
 (let (($x116 (and $x8 $x130)))
 (let (($x97 (= $x116 true)))
 (let (($x6 (= $x97 true)))
 (let (($x104 (= $x6 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x66 (and $x21 $x104)))
 (let (($x35 (=> $x66 $x41)))
 (not $x35))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000010000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b00000010)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000003 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv33554432 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483651 32) (_ bv2 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv32768 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 ((_ extract 25 0) input.dst.llvm-%l)))
 (let (($x36 (= (_ bv0 26) ?x9)))
 (let (($x14 (= $x36 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x17 (concat ?x109 (concat ?x84 ?x48)))))
 (let (($x40 (= input.dst.llvm-%l ?x118)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x91)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x114 $x12)))
 (let (($x61 (and $x28 $x111)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x71 (and (and (and $x31 $x122) $x61) $x40)))
 (let (($x77 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x112 (=> $x77 false)))
 (let (($x102 (= $x77 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x72 (= false false)))
 (let (($x10 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x113 (=> $x10 $x72)))
 (let (($x53 (= $x10 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x89 (and $x53 $x113)))
 (let (($x88 (and $x89 $x102)))
 (let (($x18 (and $x88 $x112)))
 (let (($x25 (and $x18 $x71)))
 (let (($x24 (= $x25 true)))
 (let (($x103 (= $x24 true)))
 (let (($x125 (= $x103 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x133 (and $x21 $x125)))
 (let (($x123 (=> $x133 $x14)))
 (not $x123))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 ((_ extract 25 0) input.dst.llvm-%l)))
 (let (($x36 (= (_ bv0 26) ?x9)))
 (let (($x14 (= $x36 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x17 (concat ?x109 (concat ?x84 ?x48)))))
 (let (($x40 (= input.dst.llvm-%l ?x118)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x91)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x114 $x12)))
 (let (($x61 (and $x28 $x111)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x71 (and (and (and $x31 $x122) $x61) $x40)))
 (let (($x77 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x112 (=> $x77 false)))
 (let (($x102 (= $x77 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x72 (= false false)))
 (let (($x10 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x113 (=> $x10 $x72)))
 (let (($x53 (= $x10 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x89 (and $x53 $x113)))
 (let (($x88 (and $x89 $x102)))
 (let (($x18 (and $x88 $x112)))
 (let (($x25 (and $x18 $x71)))
 (let (($x24 (= $x25 true)))
 (let (($x103 (= $x24 true)))
 (let (($x125 (= $x103 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x133 (and $x21 $x125)))
 (let (($x123 (=> $x133 $x14)))
 (not $x123))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 ((_ extract 24 0) input.dst.llvm-%l)))
 (let (($x107 (= (_ bv0 25) ?x93)))
 (let (($x87 (= $x107 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x98 (concat ?x62 (concat ?x37 ?x29)))))
 (let (($x70 (= input.dst.llvm-%l ?x79)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x35)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x104 $x13)))
 (let (($x20 (and $x41 $x59)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x22 (and (and (and $x101 $x30) $x20) $x70)))
 (let (($x121 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x16 (=> $x121 true)))
 (let (($x60 (= $x121 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x119 (= false false)))
 (let (($x128 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x99 (=> $x128 $x119)))
 (let (($x86 (= $x128 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x117 (and $x86 $x99)))
 (let (($x44 (and $x117 $x60)))
 (let (($x90 (and $x44 $x16)))
 (let (($x132 (and $x90 $x22)))
 (let (($x126 (= $x132 true)))
 (let (($x42 (= $x126 true)))
 (let (($x58 (= $x42 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x108 (and $x51 $x58)))
 (let (($x92 (=> $x108 $x87)))
 (not $x92))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x93 ((_ extract 24 0) input.dst.llvm-%l)))
 (let (($x107 (= (_ bv0 25) ?x93)))
 (let (($x87 (= $x107 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x98 (concat ?x62 (concat ?x37 ?x29)))))
 (let (($x70 (= input.dst.llvm-%l ?x79)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x35)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x104 $x13)))
 (let (($x20 (and $x41 $x59)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x22 (and (and (and $x101 $x30) $x20) $x70)))
 (let (($x121 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x16 (=> $x121 true)))
 (let (($x60 (= $x121 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x119 (= false false)))
 (let (($x128 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x99 (=> $x128 $x119)))
 (let (($x86 (= $x128 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x117 (and $x86 $x99)))
 (let (($x44 (and $x117 $x60)))
 (let (($x90 (and $x44 $x16)))
 (let (($x132 (and $x90 $x22)))
 (let (($x126 (= $x132 true)))
 (let (($x42 (= $x126 true)))
 (let (($x58 (= $x42 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x108 (and $x51 $x58)))
 (let (($x92 (=> $x108 $x87)))
 (not $x92))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000001000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000003 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv16777216 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1207959552 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1207959555 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1207959552 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1207959555 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 ((_ extract 24 0) input.dst.llvm-%l)))
 (let (($x65 (= (_ bv0 25) ?x131)))
 (let (($x8 (= $x65 true)))
 (let ((?x36 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x46 (concat ?x118 (concat ?x83 ?x36)))))
 (let (($x124 (= input.dst.llvm-%l ?x84)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x123)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x125 $x78)))
 (let (($x9 (and $x14 $x34)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x94 (and (and (and $x26 $x109) $x9) $x124)))
 (let (($x55 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x28 (=> $x55 false)))
 (let (($x61 (= $x55 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x95 (= false false)))
 (let (($x66 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x105 (=> $x66 $x95)))
 (let (($x122 (= $x66 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x31 (and $x122 $x105)))
 (let (($x106 (and $x31 $x61)))
 (let (($x91 (and $x106 $x28)))
 (let (($x73 (and $x91 $x94)))
 (let (($x75 (= $x73 true)))
 (let (($x85 (= $x75 true)))
 (let (($x39 (= $x85 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x76 (and $x51 $x39)))
 (let (($x63 (=> $x76 $x8)))
 (not $x63))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 ((_ extract 24 0) input.dst.llvm-%l)))
 (let (($x65 (= (_ bv0 25) ?x131)))
 (let (($x8 (= $x65 true)))
 (let ((?x36 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x46 (concat ?x118 (concat ?x83 ?x36)))))
 (let (($x124 (= input.dst.llvm-%l ?x84)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x123)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x125 $x78)))
 (let (($x9 (and $x14 $x34)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x94 (and (and (and $x26 $x109) $x9) $x124)))
 (let (($x55 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x28 (=> $x55 false)))
 (let (($x61 (= $x55 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x95 (= false false)))
 (let (($x66 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x105 (=> $x66 $x95)))
 (let (($x122 (= $x66 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x31 (and $x122 $x105)))
 (let (($x106 (and $x31 $x61)))
 (let (($x91 (and $x106 $x28)))
 (let (($x73 (and $x91 $x94)))
 (let (($x75 (= $x73 true)))
 (let (($x85 (= $x75 true)))
 (let (($x39 (= $x85 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x76 (and $x51 $x39)))
 (let (($x63 (=> $x76 $x8)))
 (not $x63))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x112 ((_ extract 23 0) input.dst.llvm-%l)))
 (let (($x115 (= (_ bv0 24) ?x112)))
 (let (($x18 (= $x115 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x116 (concat ?x79 (concat ?x114 ?x107)))))
 (let (($x15 (= input.dst.llvm-%l ?x37)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x92)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x58 $x10)))
 (let (($x93 (and $x87 $x81)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x33 (and (and (and $x53 $x62) $x93) $x15)))
 (let (($x7 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x41 (=> $x7 true)))
 (let (($x20 (= $x7 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x130 (= false false)))
 (let (($x133 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x49 (=> $x133 $x130)))
 (let (($x30 (= $x133 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x101 (and $x30 $x49)))
 (let (($x6 (and $x101 $x20)))
 (let (($x35 (and $x6 $x41)))
 (let (($x50 (and $x35 $x33)))
 (let (($x11 (= $x50 true)))
 (let (($x96 (= $x11 true)))
 (let (($x89 (= $x96 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x77 (and $x54 $x89)))
 (let (($x127 (=> $x77 $x18)))
 (not $x127))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x112 ((_ extract 23 0) input.dst.llvm-%l)))
 (let (($x115 (= (_ bv0 24) ?x112)))
 (let (($x18 (= $x115 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x116 (concat ?x79 (concat ?x114 ?x107)))))
 (let (($x15 (= input.dst.llvm-%l ?x37)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x92)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x58 $x10)))
 (let (($x93 (and $x87 $x81)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x33 (and (and (and $x53 $x62) $x93) $x15)))
 (let (($x7 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x41 (=> $x7 true)))
 (let (($x20 (= $x7 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x130 (= false false)))
 (let (($x133 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x49 (=> $x133 $x130)))
 (let (($x30 (= $x133 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x101 (and $x30 $x49)))
 (let (($x6 (and $x101 $x20)))
 (let (($x35 (and $x6 $x41)))
 (let (($x50 (and $x35 $x33)))
 (let (($x11 (= $x50 true)))
 (let (($x96 (= $x11 true)))
 (let (($x89 (= $x96 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x77 (and $x54 $x89)))
 (let (($x127 (=> $x77 $x18)))
 (not $x127))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000010) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x00000003
                     #x00)
              #x00000002
              #x00)
       #x00000001
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8388608 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv67108866 32) (_ bv128 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv67108867 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv16 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x16 ((_ extract 23 0) input.dst.llvm-%l)))
 (let (($x67 (= (_ bv0 24) ?x16)))
 (let (($x90 (= $x67 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x25 (concat ?x84 (concat ?x104 ?x65)))))
 (let (($x40 (= input.dst.llvm-%l ?x83)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x63)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x39 $x128)))
 (let (($x131 (and $x8 $x110)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x102 (and (and (and $x86 $x118) $x131) $x40)))
 (let (($x48 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x14 (=> $x48 false)))
 (let (($x9 (= $x48 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x71 (= false false)))
 (let (($x108 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x111 (=> $x108 $x71)))
 (let (($x109 (= $x108 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x26 (and $x109 $x111)))
 (let (($x103 (and $x26 $x9)))
 (let (($x123 (and $x103 $x14)))
 (let (($x113 (and $x123 $x102)))
 (let (($x47 (= $x113 true)))
 (let (($x56 (= $x47 true)))
 (let (($x117 (= $x56 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x121 (and $x54 $x117)))
 (let (($x69 (=> $x121 $x90)))
 (not $x69))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x16 ((_ extract 23 0) input.dst.llvm-%l)))
 (let (($x67 (= (_ bv0 24) ?x16)))
 (let (($x90 (= $x67 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x25 (concat ?x84 (concat ?x104 ?x65)))))
 (let (($x40 (= input.dst.llvm-%l ?x83)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x63)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x39 $x128)))
 (let (($x131 (and $x8 $x110)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x102 (and (and (and $x86 $x118) $x131) $x40)))
 (let (($x48 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x14 (=> $x48 false)))
 (let (($x9 (= $x48 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x71 (= false false)))
 (let (($x108 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x111 (=> $x108 $x71)))
 (let (($x109 (= $x108 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x26 (and $x109 $x111)))
 (let (($x103 (and $x26 $x9)))
 (let (($x123 (and $x103 $x14)))
 (let (($x113 (and $x123 $x102)))
 (let (($x47 (= $x113 true)))
 (let (($x56 (= $x47 true)))
 (let (($x117 (= $x56 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x121 (and $x54 $x117)))
 (let (($x69 (=> $x121 $x90)))
 (not $x69))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 ((_ extract 22 0) input.dst.llvm-%l)))
 (let (($x17 (= (_ bv0 23) ?x28)))
 (let (($x91 (= $x17 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x132 (concat ?x37 (concat ?x125 ?x115)))))
 (let (($x70 (= input.dst.llvm-%l ?x114)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x127)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x89 $x66)))
 (let (($x112 (and $x18 $x88)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x60 (and (and (and $x122 $x79) $x112) $x70)))
 (let (($x29 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x87 (=> $x29 true)))
 (let (($x93 (= $x29 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x22 (= false false)))
 (let (($x76 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x59 (=> $x76 $x22)))
 (let (($x62 (= $x76 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x53 (and $x62 $x59)))
 (let (($x42 (and $x53 $x93)))
 (let (($x92 (and $x42 $x87)))
 (let (($x99 (and $x92 $x60)))
 (let (($x80 (= $x99 true)))
 (let (($x23 (= $x80 true)))
 (let (($x31 (= $x23 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x55 (and $x21 $x31)))
 (let (($x45 (=> $x55 $x91)))
 (not $x45))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 ((_ extract 22 0) input.dst.llvm-%l)))
 (let (($x17 (= (_ bv0 23) ?x28)))
 (let (($x91 (= $x17 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x132 (concat ?x37 (concat ?x125 ?x115)))))
 (let (($x70 (= input.dst.llvm-%l ?x114)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x127)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x89 $x66)))
 (let (($x112 (and $x18 $x88)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x60 (and (and (and $x122 $x79) $x112) $x70)))
 (let (($x29 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x87 (=> $x29 true)))
 (let (($x93 (= $x29 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x22 (= false false)))
 (let (($x76 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x59 (=> $x76 $x22)))
 (let (($x62 (= $x76 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x53 (and $x62 $x59)))
 (let (($x42 (and $x53 $x93)))
 (let (($x92 (and $x42 $x87)))
 (let (($x99 (and $x92 $x60)))
 (let (($x80 (= $x99 true)))
 (let (($x23 (= $x80 true)))
 (let (($x31 (= $x23 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x55 (and $x21 $x31)))
 (let (($x45 (=> $x55 $x91)))
 (not $x45))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000010000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000010) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08)
                     #x00000002
                     #x00)
              #x00000003
              #x00)
       #x00000001
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv67108866 32) (_ bv64 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv67108867 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv32 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 ((_ extract 22 0) input.dst.llvm-%l)))
 (let (($x98 (= (_ bv0 23) ?x41)))
 (let (($x35 (= $x98 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x73 (concat ?x83 (concat ?x58 ?x67)))))
 (let (($x124 (= input.dst.llvm-%l ?x104)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x69)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x117 $x133)))
 (let (($x16 (and $x90 $x44)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x61 (and (and (and $x30 $x84) $x16) $x124)))
 (let (($x36 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x8 (=> $x36 false)))
 (let (($x131 (= $x36 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x94 (= false false)))
 (let (($x77 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x34 (=> $x77 $x94)))
 (let (($x118 (= $x77 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x86 (and $x118 $x34)))
 (let (($x85 (and $x86 $x131)))
 (let (($x63 (and $x85 $x8)))
 (let (($x105 (and $x63 $x61)))
 (let (($x32 (= $x105 true)))
 (let (($x129 (= $x32 true)))
 (let (($x101 (= $x129 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x7 (and $x21 $x101)))
 (let (($x38 (=> $x7 $x35)))
 (not $x38))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 ((_ extract 22 0) input.dst.llvm-%l)))
 (let (($x98 (= (_ bv0 23) ?x41)))
 (let (($x35 (= $x98 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x73 (concat ?x83 (concat ?x58 ?x67)))))
 (let (($x124 (= input.dst.llvm-%l ?x104)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x69)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x117 $x133)))
 (let (($x16 (and $x90 $x44)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x61 (and (and (and $x30 $x84) $x16) $x124)))
 (let (($x36 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x8 (=> $x36 false)))
 (let (($x131 (= $x36 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x94 (= false false)))
 (let (($x77 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x34 (=> $x77 $x94)))
 (let (($x118 (= $x77 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x86 (and $x118 $x34)))
 (let (($x85 (and $x86 $x131)))
 (let (($x63 (and $x85 $x8)))
 (let (($x105 (and $x63 $x61)))
 (let (($x32 (= $x105 true)))
 (let (($x129 (= $x32 true)))
 (let (($x101 (= $x129 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x7 (and $x21 $x101)))
 (let (($x38 (=> $x7 $x35)))
 (not $x38))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x14 ((_ extract 21 0) input.dst.llvm-%l)))
 (let (($x46 (= (_ bv0 22) ?x14)))
 (let (($x123 (= $x46 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x50 (concat ?x114 (concat ?x39 ?x17)))))
 (let (($x15 (= input.dst.llvm-%l ?x125)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x45)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x31 $x108)))
 (let (($x28 (and $x91 $x106)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x20 (and (and (and $x109 $x37) $x28) $x15)))
 (let (($x107 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (=> $x107 true)))
 (let (($x112 (= $x107 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x33 (= false false)))
 (let (($x121 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x81 (=> $x121 $x33)))
 (let (($x79 (= $x121 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x122 (and $x79 $x81)))
 (let (($x96 (and $x122 $x112)))
 (let (($x127 (and $x96 $x18)))
 (let (($x49 (and $x127 $x20)))
 (let (($x57 (= $x49 true)))
 (let (($x74 (= $x57 true)))
 (let (($x26 (= $x74 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x48 (and $x51 $x26)))
 (let (($x120 (=> $x48 $x123)))
 (not $x120))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x14 ((_ extract 21 0) input.dst.llvm-%l)))
 (let (($x46 (= (_ bv0 22) ?x14)))
 (let (($x123 (= $x46 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x50 (concat ?x114 (concat ?x39 ?x17)))))
 (let (($x15 (= input.dst.llvm-%l ?x125)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x45)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x31 $x108)))
 (let (($x28 (and $x91 $x106)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x20 (and (and (and $x109 $x37) $x28) $x15)))
 (let (($x107 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (=> $x107 true)))
 (let (($x112 (= $x107 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x33 (= false false)))
 (let (($x121 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x81 (=> $x121 $x33)))
 (let (($x79 (= $x121 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x122 (and $x79 $x81)))
 (let (($x96 (and $x122 $x112)))
 (let (($x127 (and $x96 $x18)))
 (let (($x49 (and $x127 $x20)))
 (let (($x57 (= $x49 true)))
 (let (($x74 (= $x57 true)))
 (let (($x26 (= $x74 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x48 (and $x51 $x26)))
 (let (($x120 (=> $x48 $x123)))
 (not $x120))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000001000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000010) #b00100000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x00000002
                     #x00)
              #x00000003
              #x00)
       #x00000001
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv2097152 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv67108866 32) (_ bv32 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv67108867 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv64 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x87 ((_ extract 21 0) input.dst.llvm-%l)))
 (let (($x116 (= (_ bv0 22) ?x87)))
 (let (($x92 (= $x116 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x113 (concat ?x104 (concat ?x89 ?x98)))))
 (let (($x40 (= input.dst.llvm-%l ?x58)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x38)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x101 $x76)))
 (let (($x41 (and $x35 $x6)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x9 (and (and (and $x62 $x83) $x41) $x40)))
 (let (($x65 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x90 (=> $x65 false)))
 (let (($x16 (= $x65 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x102 (= false false)))
 (let (($x55 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x110 (=> $x55 $x102)))
 (let (($x84 (= $x55 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x30 (and $x84 $x110)))
 (let (($x56 (and $x30 $x16)))
 (let (($x69 (and $x56 $x90)))
 (let (($x111 (and $x69 $x9)))
 (let (($x52 (= $x111 true)))
 (let (($x19 (= $x52 true)))
 (let (($x53 (= $x19 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x29 (and $x51 $x53)))
 (let (($x12 (=> $x29 $x92)))
 (not $x12))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x87 ((_ extract 21 0) input.dst.llvm-%l)))
 (let (($x116 (= (_ bv0 22) ?x87)))
 (let (($x92 (= $x116 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x113 (concat ?x104 (concat ?x89 ?x98)))))
 (let (($x40 (= input.dst.llvm-%l ?x58)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x38)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x101 $x76)))
 (let (($x41 (and $x35 $x6)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x9 (and (and (and $x62 $x83) $x41) $x40)))
 (let (($x65 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x90 (=> $x65 false)))
 (let (($x16 (= $x65 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x102 (= false false)))
 (let (($x55 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x110 (=> $x55 $x102)))
 (let (($x84 (= $x55 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x30 (and $x84 $x110)))
 (let (($x56 (and $x30 $x16)))
 (let (($x69 (and $x56 $x90)))
 (let (($x111 (and $x69 $x9)))
 (let (($x52 (= $x111 true)))
 (let (($x19 (= $x52 true)))
 (let (($x53 (= $x19 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x29 (and $x51 $x53)))
 (let (($x12 (=> $x29 $x92)))
 (not $x12))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x8 ((_ extract 20 0) input.dst.llvm-%l)))
 (let (($x25 (= (_ bv0 21) ?x8)))
 (let (($x63 (= $x25 true)))
 (let ((?x46 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x99 (concat ?x125 (concat ?x117 ?x46)))))
 (let (($x70 (= input.dst.llvm-%l ?x39)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x120)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x26 $x77)))
 (let (($x14 (and $x123 $x103)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x93 (and (and (and $x118 $x114) $x14) $x70)))
 (let (($x115 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x91 (=> $x115 true)))
 (let (($x28 (= $x115 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x60 (= false false)))
 (let (($x7 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x88 (=> $x7 $x60)))
 (let (($x37 (= $x7 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x109 (and $x37 $x88)))
 (let (($x23 (and $x109 $x28)))
 (let (($x45 (and $x23 $x91)))
 (let (($x59 (and $x45 $x93)))
 (let (($x97 (= $x59 true)))
 (let (($x27 (= $x97 true)))
 (let (($x86 (= $x27 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x36 (and $x54 $x86)))
 (let (($x13 (=> $x36 $x63)))
 (not $x13))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x8 ((_ extract 20 0) input.dst.llvm-%l)))
 (let (($x25 (= (_ bv0 21) ?x8)))
 (let (($x63 (= $x25 true)))
 (let ((?x46 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x99 (concat ?x125 (concat ?x117 ?x46)))))
 (let (($x70 (= input.dst.llvm-%l ?x39)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x120)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x26 $x77)))
 (let (($x14 (and $x123 $x103)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x93 (and (and (and $x118 $x114) $x14) $x70)))
 (let (($x115 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x91 (=> $x115 true)))
 (let (($x28 (= $x115 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x60 (= false false)))
 (let (($x7 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x88 (=> $x7 $x60)))
 (let (($x37 (= $x7 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x109 (and $x37 $x88)))
 (let (($x23 (and $x109 $x28)))
 (let (($x45 (and $x23 $x91)))
 (let (($x59 (and $x45 $x93)))
 (let (($x97 (= $x59 true)))
 (let (($x27 (= $x97 true)))
 (let (($x86 (= $x27 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x36 (and $x54 $x86)))
 (let (($x13 (=> $x36 $x63)))
 (not $x13))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000100000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000010) #b00010000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x00000002
                     #x00)
              #x00000003
              #x00)
       #x00000001
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1048576 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv67108866 32) (_ bv16 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv67108867 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv262144 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x18 ((_ extract 20 0) input.dst.llvm-%l)))
 (let (($x132 (= (_ bv0 21) ?x18)))
 (let (($x127 (= $x132 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x105 (concat ?x58 (concat ?x31 ?x116)))))
 (let (($x124 (= input.dst.llvm-%l ?x89)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x12)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x53 $x121)))
 (let (($x87 (and $x92 $x42)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x131 (and (and (and $x79 $x104) $x87) $x124)))
 (let (($x67 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x35 (=> $x67 false)))
 (let (($x41 (= $x67 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x61 (= false false)))
 (let (($x48 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x44 (=> $x48 $x61)))
 (let (($x83 (= $x48 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x62 (and $x83 $x44)))
 (let (($x129 (and $x62 $x41)))
 (let (($x38 (and $x129 $x35)))
 (let (($x34 (and $x38 $x131)))
 (let (($x24 (= $x34 true)))
 (let (($x72 (= $x24 true)))
 (let (($x122 (= $x72 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x107 (and $x54 $x122)))
 (let (($x78 (=> $x107 $x127)))
 (not $x78))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x18 ((_ extract 20 0) input.dst.llvm-%l)))
 (let (($x132 (= (_ bv0 21) ?x18)))
 (let (($x127 (= $x132 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x105 (concat ?x58 (concat ?x31 ?x116)))))
 (let (($x124 (= input.dst.llvm-%l ?x89)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x12)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x53 $x121)))
 (let (($x87 (and $x92 $x42)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x131 (and (and (and $x79 $x104) $x87) $x124)))
 (let (($x67 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x35 (=> $x67 false)))
 (let (($x41 (= $x67 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x61 (= false false)))
 (let (($x48 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x44 (=> $x48 $x61)))
 (let (($x83 (= $x48 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x62 (and $x83 $x44)))
 (let (($x129 (and $x62 $x41)))
 (let (($x38 (and $x129 $x35)))
 (let (($x34 (and $x38 $x131)))
 (let (($x24 (= $x34 true)))
 (let (($x72 (= $x24 true)))
 (let (($x122 (= $x72 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x107 (and $x54 $x122)))
 (let (($x78 (=> $x107 $x127)))
 (not $x78))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 ((_ extract 19 0) input.dst.llvm-%l)))
 (let (($x73 (= (_ bv0 20) ?x90)))
 (let (($x69 (= $x73 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x49 (concat ?x39 (concat ?x101 ?x25)))))
 (let (($x15 (= input.dst.llvm-%l ?x117)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x13)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x86 $x55)))
 (let (($x8 (and $x63 $x85)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x112 (and (and (and $x84 $x125) $x8) $x15)))
 (let (($x17 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x123 (=> $x17 true)))
 (let (($x14 (= $x17 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x20 (= false false)))
 (let (($x29 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x106 (=> $x29 $x20)))
 (let (($x114 (= $x29 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x118 (and $x114 $x106)))
 (let (($x74 (and $x118 $x14)))
 (let (($x120 (and $x74 $x123)))
 (let (($x81 (and $x120 $x112)))
 (let (($x126 (= $x81 true)))
 (let (($x119 (= $x126 true)))
 (let (($x30 (= $x119 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x65 (and $x21 $x30)))
 (let (($x10 (=> $x65 $x69)))
 (not $x10))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 ((_ extract 19 0) input.dst.llvm-%l)))
 (let (($x73 (= (_ bv0 20) ?x90)))
 (let (($x69 (= $x73 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x49 (concat ?x39 (concat ?x101 ?x25)))))
 (let (($x15 (= input.dst.llvm-%l ?x117)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x13)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x86 $x55)))
 (let (($x8 (and $x63 $x85)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x112 (and (and (and $x84 $x125) $x8) $x15)))
 (let (($x17 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x123 (=> $x17 true)))
 (let (($x14 (= $x17 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x20 (= false false)))
 (let (($x29 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x106 (=> $x29 $x20)))
 (let (($x114 (= $x29 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x118 (and $x114 $x106)))
 (let (($x74 (and $x118 $x14)))
 (let (($x120 (and $x74 $x123)))
 (let (($x81 (and $x120 $x112)))
 (let (($x126 (= $x81 true)))
 (let (($x119 (= $x126 true)))
 (let (($x30 (= $x119 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x65 (and $x21 $x30)))
 (let (($x10 (=> $x65 $x69)))
 (not $x10))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000010000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000010) #b00001000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x00000002
                     #x00)
              #x00000003
              #x00)
       #x00000001
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv524288 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv67108866 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv67108867 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1048576 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 ((_ extract 19 0) input.dst.llvm-%l)))
 (let (($x50 (= (_ bv0 20) ?x91)))
 (let (($x45 (= $x50 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x111 (concat ?x89 (concat ?x26 ?x132)))))
 (let (($x40 (= input.dst.llvm-%l ?x31)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x78)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x122 $x7)))
 (let (($x18 (and $x127 $x96)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x16 (and (and (and $x37 $x58) $x18) $x40)))
 (let (($x98 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x92 (=> $x98 false)))
 (let (($x87 (= $x98 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x9 (= false false)))
 (let (($x36 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x6 (=> $x36 $x9)))
 (let (($x104 (= $x36 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x79 (and $x104 $x6)))
 (let (($x19 (and $x79 $x87)))
 (let (($x12 (and $x19 $x92)))
 (let (($x110 (and $x12 $x16)))
 (let (($x75 (= $x110 true)))
 (let (($x95 (= $x75 true)))
 (let (($x109 (= $x95 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x115 (and $x21 $x109)))
 (let (($x128 (=> $x115 $x45)))
 (not $x128))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 ((_ extract 19 0) input.dst.llvm-%l)))
 (let (($x50 (= (_ bv0 20) ?x91)))
 (let (($x45 (= $x50 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x111 (concat ?x89 (concat ?x26 ?x132)))))
 (let (($x40 (= input.dst.llvm-%l ?x31)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x78)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x122 $x7)))
 (let (($x18 (and $x127 $x96)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x16 (and (and (and $x37 $x58) $x18) $x40)))
 (let (($x98 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x92 (=> $x98 false)))
 (let (($x87 (= $x98 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x9 (= false false)))
 (let (($x36 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x6 (=> $x36 $x9)))
 (let (($x104 (= $x36 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x79 (and $x104 $x6)))
 (let (($x19 (and $x79 $x87)))
 (let (($x12 (and $x19 $x92)))
 (let (($x110 (and $x12 $x16)))
 (let (($x75 (= $x110 true)))
 (let (($x95 (= $x75 true)))
 (let (($x109 (= $x95 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x115 (and $x21 $x109)))
 (let (($x128 (=> $x115 $x45)))
 (not $x128))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x35 ((_ extract 18 0) input.dst.llvm-%l)))
 (let (($x113 (= (_ bv0 19) ?x35)))
 (let (($x38 (= $x113 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x59 (concat ?x117 (concat ?x53 ?x73)))))
 (let (($x70 (= input.dst.llvm-%l ?x101)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x10)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x30 $x48)))
 (let (($x90 (and $x69 $x56)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x28 (and (and (and $x83 $x39) $x90) $x70)))
 (let (($x46 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x63 (=> $x46 true)))
 (let (($x8 (= $x46 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x93 (= false false)))
 (let (($x107 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x103 (=> $x107 $x93)))
 (let (($x125 (= $x107 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x84 (and $x125 $x103)))
 (let (($x27 (and $x84 $x8)))
 (let (($x13 (and $x27 $x63)))
 (let (($x88 (and $x13 $x28)))
 (let (($x11 (= $x88 true)))
 (let (($x130 (= $x11 true)))
 (let (($x62 (= $x130 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x67 (and $x51 $x62)))
 (let (($x66 (=> $x67 $x38)))
 (not $x66))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x35 ((_ extract 18 0) input.dst.llvm-%l)))
 (let (($x113 (= (_ bv0 19) ?x35)))
 (let (($x38 (= $x113 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x59 (concat ?x117 (concat ?x53 ?x73)))))
 (let (($x70 (= input.dst.llvm-%l ?x101)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x10)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x30 $x48)))
 (let (($x90 (and $x69 $x56)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x28 (and (and (and $x83 $x39) $x90) $x70)))
 (let (($x46 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x63 (=> $x46 true)))
 (let (($x8 (= $x46 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x93 (= false false)))
 (let (($x107 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x103 (=> $x107 $x93)))
 (let (($x125 (= $x107 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x84 (and $x125 $x103)))
 (let (($x27 (and $x84 $x8)))
 (let (($x13 (and $x27 $x63)))
 (let (($x88 (and $x13 $x28)))
 (let (($x11 (= $x88 true)))
 (let (($x130 (= $x11 true)))
 (let (($x62 (= $x130 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x67 (and $x51 $x62)))
 (let (($x66 (=> $x67 $x38)))
 (not $x66))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000001000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000010) #b00000100)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x00000002
                     #x00)
              #x00000003
              #x00)
       #x00000001
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv262144 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483650 32) (_ bv4 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 ((_ extract 18 0) input.dst.llvm-%l)))
 (let (($x99 (= (_ bv0 19) ?x123)))
 (let (($x120 (= $x99 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x34 (concat ?x31 (concat ?x86 ?x50)))))
 (let (($x124 (= input.dst.llvm-%l ?x26)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x128)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x109 $x29)))
 (let (($x91 (and $x45 $x23)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x41 (and (and (and $x114 $x89) $x91) $x124)))
 (let (($x116 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x127 (=> $x116 false)))
 (let (($x18 (= $x116 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x131 (= false false)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x42 (=> $x65 $x131)))
 (let (($x58 (= $x65 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x37 (and $x58 $x42)))
 (let (($x72 (and $x37 $x18)))
 (let (($x78 (and $x72 $x127)))
 (let (($x44 (and $x78 $x41)))
 (let (($x47 (= $x44 true)))
 (let (($x71 (= $x47 true)))
 (let (($x118 (= $x71 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x17 (and $x51 $x118)))
 (let (($x133 (=> $x17 $x120)))
 (not $x133))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 ((_ extract 18 0) input.dst.llvm-%l)))
 (let (($x99 (= (_ bv0 19) ?x123)))
 (let (($x120 (= $x99 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x34 (concat ?x31 (concat ?x86 ?x50)))))
 (let (($x124 (= input.dst.llvm-%l ?x26)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x128)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x109 $x29)))
 (let (($x91 (and $x45 $x23)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x41 (and (and (and $x114 $x89) $x91) $x124)))
 (let (($x116 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x127 (=> $x116 false)))
 (let (($x18 (= $x116 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x131 (= false false)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x42 (=> $x65 $x131)))
 (let (($x58 (= $x65 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x37 (and $x58 $x42)))
 (let (($x72 (and $x37 $x18)))
 (let (($x78 (and $x72 $x127)))
 (let (($x44 (and $x78 $x41)))
 (let (($x47 (= $x44 true)))
 (let (($x71 (= $x47 true)))
 (let (($x118 (= $x71 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x17 (and $x51 $x118)))
 (let (($x133 (=> $x17 $x120)))
 (not $x133))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 ((_ extract 17 0) input.dst.llvm-%l)))
 (let (($x105 (= (_ bv0 18) ?x92)))
 (let (($x12 (= $x105 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x81 (concat ?x101 (concat ?x122 ?x113)))))
 (let (($x15 (= input.dst.llvm-%l ?x53)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x66)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x62 $x36)))
 (let (($x35 (and $x38 $x129)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x14 (and (and (and $x104 $x117) $x35) $x15)))
 (let (($x25 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x69 (=> $x25 true)))
 (let (($x90 (= $x25 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x112 (= false false)))
 (let (($x115 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x85 (=> $x115 $x112)))
 (let (($x39 (= $x115 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x83 (and $x39 $x85)))
 (let (($x119 (and $x83 $x90)))
 (let (($x10 (and $x119 $x69)))
 (let (($x106 (and $x10 $x14)))
 (let (($x80 (= $x106 true)))
 (let (($x22 (= $x80 true)))
 (let (($x79 (= $x22 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x98 (and $x54 $x79)))
 (let (($x108 (=> $x98 $x12)))
 (not $x108))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 ((_ extract 17 0) input.dst.llvm-%l)))
 (let (($x105 (= (_ bv0 18) ?x92)))
 (let (($x12 (= $x105 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x81 (concat ?x101 (concat ?x122 ?x113)))))
 (let (($x15 (= input.dst.llvm-%l ?x53)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x66)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x62 $x36)))
 (let (($x35 (and $x38 $x129)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x14 (and (and (and $x104 $x117) $x35) $x15)))
 (let (($x25 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x69 (=> $x25 true)))
 (let (($x90 (= $x25 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x112 (= false false)))
 (let (($x115 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x85 (=> $x115 $x112)))
 (let (($x39 (= $x115 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x83 (and $x39 $x85)))
 (let (($x119 (and $x83 $x90)))
 (let (($x10 (and $x119 $x69)))
 (let (($x106 (and $x10 $x14)))
 (let (($x80 (= $x106 true)))
 (let (($x22 (= $x80 true)))
 (let (($x79 (= $x22 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x98 (and $x54 $x79)))
 (let (($x108 (=> $x98 $x12)))
 (not $x108))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000100000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000010) #b00000010)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x00000002
                     #x00)
              #x00000003
              #x00)
       #x00000001
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv131072 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv67108866 32) (_ bv2 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv67108867 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv256 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 ((_ extract 17 0) input.dst.llvm-%l)))
 (let (($x49 (= (_ bv0 18) ?x63)))
 (let (($x13 (= $x49 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x110 (concat ?x26 (concat ?x30 ?x99)))))
 (let (($x40 (= input.dst.llvm-%l ?x86)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x133)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x118 $x107)))
 (let (($x123 (and $x120 $x74)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x87 (and (and (and $x125 $x31) $x123) $x40)))
 (let (($x132 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x45 (=> $x132 false)))
 (let (($x91 (= $x132 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x16 (= false false)))
 (let (($x67 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x96 (=> $x67 $x16)))
 (let (($x89 (= $x67 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x114 (and $x89 $x96)))
 (let (($x95 (and $x114 $x91)))
 (let (($x128 (and $x95 $x45)))
 (let (($x6 (and $x128 $x87)))
 (let (($x32 (= $x6 true)))
 (let (($x94 (= $x32 true)))
 (let (($x84 (= $x94 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x46 (and $x54 $x84)))
 (let (($x76 (=> $x46 $x13)))
 (not $x76))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 ((_ extract 17 0) input.dst.llvm-%l)))
 (let (($x49 (= (_ bv0 18) ?x63)))
 (let (($x13 (= $x49 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x110 (concat ?x26 (concat ?x30 ?x99)))))
 (let (($x40 (= input.dst.llvm-%l ?x86)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x133)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x118 $x107)))
 (let (($x123 (and $x120 $x74)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x87 (and (and (and $x125 $x31) $x123) $x40)))
 (let (($x132 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x45 (=> $x132 false)))
 (let (($x91 (= $x132 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x16 (= false false)))
 (let (($x67 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x96 (=> $x67 $x16)))
 (let (($x89 (= $x67 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x114 (and $x89 $x96)))
 (let (($x95 (and $x114 $x91)))
 (let (($x128 (and $x95 $x45)))
 (let (($x6 (and $x128 $x87)))
 (let (($x32 (= $x6 true)))
 (let (($x94 (= $x32 true)))
 (let (($x84 (= $x94 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x46 (and $x54 $x84)))
 (let (($x76 (=> $x46 $x13)))
 (not $x76))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x127 ((_ extract 16 0) input.dst.llvm-%l)))
 (let (($x111 (= (_ bv0 17) ?x127)))
 (let (($x78 (= $x111 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x88 (concat ?x53 (concat ?x109 ?x105)))))
 (let (($x70 (= input.dst.llvm-%l ?x122)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x108)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x79 $x65)))
 (let (($x92 (and $x12 $x19)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x8 (and (and (and $x58 $x101) $x92) $x70)))
 (let (($x73 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x38 (=> $x73 true)))
 (let (($x35 (= $x73 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x28 (= false false)))
 (let (($x17 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x56 (=> $x17 $x28)))
 (let (($x117 (= $x17 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x104 (and $x117 $x56)))
 (let (($x130 (and $x104 $x35)))
 (let (($x66 (and $x130 $x38)))
 (let (($x103 (and $x66 $x8)))
 (let (($x57 (= $x103 true)))
 (let (($x33 (= $x57 true)))
 (let (($x37 (= $x33 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x116 (and $x21 $x37)))
 (let (($x77 (=> $x116 $x78)))
 (not $x77))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x127 ((_ extract 16 0) input.dst.llvm-%l)))
 (let (($x111 (= (_ bv0 17) ?x127)))
 (let (($x78 (= $x111 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x88 (concat ?x53 (concat ?x109 ?x105)))))
 (let (($x70 (= input.dst.llvm-%l ?x122)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x108)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x79 $x65)))
 (let (($x92 (and $x12 $x19)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x8 (and (and (and $x58 $x101) $x92) $x70)))
 (let (($x73 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x38 (=> $x73 true)))
 (let (($x35 (= $x73 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x28 (= false false)))
 (let (($x17 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x56 (=> $x17 $x28)))
 (let (($x117 (= $x17 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x104 (and $x117 $x56)))
 (let (($x130 (and $x104 $x35)))
 (let (($x66 (and $x130 $x38)))
 (let (($x103 (and $x66 $x8)))
 (let (($x57 (= $x103 true)))
 (let (($x33 (= $x57 true)))
 (let (($x37 (= $x33 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x116 (and $x21 $x37)))
 (let (($x77 (=> $x116 $x78)))
 (not $x77))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000010000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000010) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x00000002
                     #x00)
              #x00000003
              #x00)
       #x00000001
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv65536 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv67108866 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv67108867 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 ((_ extract 16 0) input.dst.llvm-%l)))
 (let (($x59 (= (_ bv0 17) ?x69)))
 (let (($x10 (= $x59 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x44 (concat ?x86 (concat ?x62 ?x49)))))
 (let (($x124 (= input.dst.llvm-%l ?x30)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x76)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x84 $x115)))
 (let (($x63 (and $x13 $x27)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x18 (and (and (and $x39 $x26) $x63) $x124)))
 (let (($x50 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x120 (=> $x50 false)))
 (let (($x123 (= $x50 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x41 (= false false)))
 (let (($x98 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x23 (=> $x98 $x41)))
 (let (($x31 (= $x98 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x125 (and $x31 $x23)))
 (let (($x71 (and $x125 $x123)))
 (let (($x133 (and $x71 $x120)))
 (let (($x42 (and $x133 $x18)))
 (let (($x52 (= $x42 true)))
 (let (($x102 (= $x52 true)))
 (let (($x83 (= $x102 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x25 (and $x21 $x83)))
 (let (($x121 (=> $x25 $x10)))
 (not $x121))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 ((_ extract 16 0) input.dst.llvm-%l)))
 (let (($x59 (= (_ bv0 17) ?x69)))
 (let (($x10 (= $x59 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x44 (concat ?x86 (concat ?x62 ?x49)))))
 (let (($x124 (= input.dst.llvm-%l ?x30)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x76)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x84 $x115)))
 (let (($x63 (and $x13 $x27)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x18 (and (and (and $x39 $x26) $x63) $x124)))
 (let (($x50 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x120 (=> $x50 false)))
 (let (($x123 (= $x50 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x41 (= false false)))
 (let (($x98 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x23 (=> $x98 $x41)))
 (let (($x31 (= $x98 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x125 (and $x31 $x23)))
 (let (($x71 (and $x125 $x123)))
 (let (($x133 (and $x71 $x120)))
 (let (($x42 (and $x133 $x18)))
 (let (($x52 (= $x42 true)))
 (let (($x102 (= $x52 true)))
 (let (($x83 (= $x102 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x25 (and $x21 $x83)))
 (let (($x121 (=> $x25 $x10)))
 (not $x121))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x45 ((_ extract 15 0) input.dst.llvm-%l)))
 (let (($x34 (= (_ bv0 16) ?x45)))
 (let (($x128 (= $x34 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x106 (concat ?x122 (concat ?x118 ?x111)))))
 (let (($x15 (= input.dst.llvm-%l ?x109)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x77)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x37 $x67)))
 (let (($x127 (and $x78 $x72)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x90 (and (and (and $x89 $x53) $x127) $x15)))
 (let (($x113 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x12 (=> $x113 true)))
 (let (($x92 (= $x113 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x14 (= false false)))
 (let (($x46 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x129 (=> $x46 $x14)))
 (let (($x101 (= $x46 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x58 (and $x101 $x129)))
 (let (($x22 (and $x58 $x92)))
 (let (($x108 (and $x22 $x12)))
 (let (($x85 (and $x108 $x90)))
 (let (($x97 (= $x85 true)))
 (let (($x60 (= $x97 true)))
 (let (($x114 (= $x60 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x132 (and $x51 $x114)))
 (let (($x55 (=> $x132 $x128)))
 (not $x55))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x45 ((_ extract 15 0) input.dst.llvm-%l)))
 (let (($x34 (= (_ bv0 16) ?x45)))
 (let (($x128 (= $x34 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x106 (concat ?x122 (concat ?x118 ?x111)))))
 (let (($x15 (= input.dst.llvm-%l ?x109)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x77)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x37 $x67)))
 (let (($x127 (and $x78 $x72)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x90 (and (and (and $x89 $x53) $x127) $x15)))
 (let (($x113 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x12 (=> $x113 true)))
 (let (($x92 (= $x113 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x14 (= false false)))
 (let (($x46 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x129 (=> $x46 $x14)))
 (let (($x101 (= $x46 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x58 (and $x101 $x129)))
 (let (($x22 (and $x58 $x92)))
 (let (($x108 (and $x22 $x12)))
 (let (($x85 (and $x108 $x90)))
 (let (($x97 (= $x85 true)))
 (let (($x60 (= $x97 true)))
 (let (($x114 (= $x60 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x132 (and $x51 $x114)))
 (let (($x55 (=> $x132 $x128)))
 (not $x55))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000001000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x00000002
                     #x00)
              #x00000003
              #x00)
       #x00000001
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv128 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv8192 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x38 ((_ extract 15 0) input.dst.llvm-%l)))
 (let (($x81 (= (_ bv0 16) ?x38)))
 (let (($x66 (= $x81 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x6 (concat ?x30 (concat ?x79 ?x59)))))
 (let (($x40 (= input.dst.llvm-%l ?x62)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x121)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x83 $x17)))
 (let (($x69 (and $x10 $x119)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x91 (and (and (and $x117 $x86) $x69) $x40)))
 (let (($x99 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x13 (=> $x99 false)))
 (let (($x63 (= $x99 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x87 (= false false)))
 (let (($x116 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x74 (=> $x116 $x87)))
 (let (($x26 (= $x116 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x39 (and $x26 $x74)))
 (let (($x94 (and $x39 $x63)))
 (let (($x76 (and $x94 $x13)))
 (let (($x96 (and $x76 $x91)))
 (let (($x24 (= $x96 true)))
 (let (($x61 (= $x24 true)))
 (let (($x104 (= $x61 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x73 (and $x51 $x104)))
 (let (($x7 (=> $x73 $x66)))
 (not $x7))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x38 ((_ extract 15 0) input.dst.llvm-%l)))
 (let (($x81 (= (_ bv0 16) ?x38)))
 (let (($x66 (= $x81 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x6 (concat ?x30 (concat ?x79 ?x59)))))
 (let (($x40 (= input.dst.llvm-%l ?x62)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x121)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x83 $x17)))
 (let (($x69 (and $x10 $x119)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x91 (and (and (and $x117 $x86) $x69) $x40)))
 (let (($x99 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x13 (=> $x99 false)))
 (let (($x63 (= $x99 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x87 (= false false)))
 (let (($x116 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x74 (=> $x116 $x87)))
 (let (($x26 (= $x116 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x39 (and $x26 $x74)))
 (let (($x94 (and $x39 $x63)))
 (let (($x76 (and $x94 $x13)))
 (let (($x96 (and $x76 $x91)))
 (let (($x24 (= $x96 true)))
 (let (($x61 (= $x24 true)))
 (let (($x104 (= $x61 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x73 (and $x51 $x104)))
 (let (($x7 (=> $x73 $x66)))
 (not $x7))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 ((_ extract 14 0) input.dst.llvm-%l)))
 (let (($x110 (= (_ bv0 15) ?x120)))
 (let (($x133 (= $x110 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x103 (concat ?x109 (concat ?x84 ?x34)))))
 (let (($x70 (= input.dst.llvm-%l ?x118)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x55)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x114 $x98)))
 (let (($x45 (and $x128 $x95)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x35 (and (and (and $x31 $x122) $x45) $x70)))
 (let (($x105 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x78 (=> $x105 true)))
 (let (($x127 (= $x105 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x8 (= false false)))
 (let (($x25 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x19 (=> $x25 $x8)))
 (let (($x53 (= $x25 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x89 (and $x53 $x19)))
 (let (($x33 (and $x89 $x127)))
 (let (($x77 (and $x33 $x78)))
 (let (($x56 (and $x77 $x35)))
 (let (($x126 (= $x56 true)))
 (let (($x20 (= $x126 true)))
 (let (($x125 (= $x20 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x50 (and $x54 $x125)))
 (let (($x48 (=> $x50 $x133)))
 (not $x48))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 ((_ extract 14 0) input.dst.llvm-%l)))
 (let (($x110 (= (_ bv0 15) ?x120)))
 (let (($x133 (= $x110 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x103 (concat ?x109 (concat ?x84 ?x34)))))
 (let (($x70 (= input.dst.llvm-%l ?x118)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x55)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x114 $x98)))
 (let (($x45 (and $x128 $x95)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x35 (and (and (and $x31 $x122) $x45) $x70)))
 (let (($x105 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x78 (=> $x105 true)))
 (let (($x127 (= $x105 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x8 (= false false)))
 (let (($x25 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x19 (=> $x25 $x8)))
 (let (($x53 (= $x25 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x89 (and $x53 $x19)))
 (let (($x33 (and $x89 $x127)))
 (let (($x77 (and $x33 $x78)))
 (let (($x56 (and $x77 $x35)))
 (let (($x126 (= $x56 true)))
 (let (($x20 (= $x126 true)))
 (let (($x125 (= $x20 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x50 (and $x54 $x125)))
 (let (($x48 (=> $x50 $x133)))
 (not $x48))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000100000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000001 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv16384 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2684354568 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2684354569 32) (_ bv64 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2684354568 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2684354571 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x12 ((_ extract 14 0) input.dst.llvm-%l)))
 (let (($x88 (= (_ bv0 15) ?x12)))
 (let (($x108 (= $x88 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x42 (concat ?x62 (concat ?x37 ?x81)))))
 (let (($x124 (= input.dst.llvm-%l ?x79)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x7)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x104 $x46)))
 (let (($x38 (and $x66 $x130)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x123 (and (and (and $x101 $x30) $x38) $x124)))
 (let (($x49 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x10 (=> $x49 false)))
 (let (($x69 (= $x49 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x18 (= false false)))
 (let (($x132 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x27 (=> $x132 $x18)))
 (let (($x86 (= $x132 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x117 (and $x86 $x27)))
 (let (($x102 (and $x117 $x69)))
 (let (($x121 (and $x102 $x10)))
 (let (($x23 (and $x121 $x123)))
 (let (($x75 (= $x23 true)))
 (let (($x9 (= $x75 true)))
 (let (($x58 (= $x9 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x113 (and $x54 $x58)))
 (let (($x29 (=> $x113 $x108)))
 (not $x29))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x12 ((_ extract 14 0) input.dst.llvm-%l)))
 (let (($x88 (= (_ bv0 15) ?x12)))
 (let (($x108 (= $x88 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x42 (concat ?x62 (concat ?x37 ?x81)))))
 (let (($x124 (= input.dst.llvm-%l ?x79)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x7)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x104 $x46)))
 (let (($x38 (and $x66 $x130)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x123 (and (and (and $x101 $x30) $x38) $x124)))
 (let (($x49 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x10 (=> $x49 false)))
 (let (($x69 (= $x49 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x18 (= false false)))
 (let (($x132 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x27 (=> $x132 $x18)))
 (let (($x86 (= $x132 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x117 (and $x86 $x27)))
 (let (($x102 (and $x117 $x69)))
 (let (($x121 (and $x102 $x10)))
 (let (($x23 (and $x121 $x123)))
 (let (($x75 (= $x23 true)))
 (let (($x9 (= $x75 true)))
 (let (($x58 (= $x9 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x113 (and $x54 $x58)))
 (let (($x29 (=> $x113 $x108)))
 (not $x29))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x13 ((_ extract 13 0) input.dst.llvm-%l)))
 (let (($x44 (= (_ bv0 14) ?x13)))
 (let (($x76 (= $x44 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x85 (concat ?x118 (concat ?x83 ?x110)))))
 (let (($x15 (= input.dst.llvm-%l ?x84)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x48)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x125 $x116)))
 (let (($x120 (and $x133 $x71)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x92 (and (and (and $x26 $x109) $x120) $x15)))
 (let (($x111 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x128 (=> $x111 true)))
 (let (($x45 (= $x111 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x90 (= false false)))
 (let (($x73 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x72 (=> $x73 $x90)))
 (let (($x122 (= $x73 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x31 (and $x122 $x72)))
 (let (($x60 (and $x31 $x45)))
 (let (($x55 (and $x60 $x128)))
 (let (($x129 (and $x55 $x92)))
 (let (($x11 (= $x129 true)))
 (let (($x93 (= $x11 true)))
 (let (($x39 (= $x93 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x99 (and $x21 $x39)))
 (let (($x36 (=> $x99 $x76)))
 (not $x36))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x13 ((_ extract 13 0) input.dst.llvm-%l)))
 (let (($x44 (= (_ bv0 14) ?x13)))
 (let (($x76 (= $x44 true)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x85 (concat ?x118 (concat ?x83 ?x110)))))
 (let (($x15 (= input.dst.llvm-%l ?x84)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x48)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x125 $x116)))
 (let (($x120 (and $x133 $x71)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x92 (and (and (and $x26 $x109) $x120) $x15)))
 (let (($x111 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x128 (=> $x111 true)))
 (let (($x45 (= $x111 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x90 (= false false)))
 (let (($x73 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x72 (=> $x73 $x90)))
 (let (($x122 (= $x73 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x31 (and $x122 $x72)))
 (let (($x60 (and $x31 $x45)))
 (let (($x55 (and $x60 $x128)))
 (let (($x129 (and $x55 $x92)))
 (let (($x11 (= $x129 true)))
 (let (($x93 (= $x11 true)))
 (let (($x39 (= $x93 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x99 (and $x21 $x39)))
 (let (($x36 (=> $x99 $x76)))
 (not $x36))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000010000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b00100000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000001 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8192 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv67108865 32) (_ bv32 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv67108867 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1048576 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x78 ((_ extract 13 0) input.dst.llvm-%l)))
 (let (($x106 (= (_ bv0 14) ?x78)))
 (let (($x77 (= $x106 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x96 (concat ?x79 (concat ?x114 ?x88)))))
 (let (($x40 (= input.dst.llvm-%l ?x37)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x29)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x58 $x25)))
 (let (($x12 (and $x108 $x22)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x63 (and (and (and $x53 $x62) $x12) $x40)))
 (let (($x59 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x66 (=> $x59 false)))
 (let (($x38 (= $x59 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x91 (= false false)))
 (let (($x50 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x119 (=> $x50 $x91)))
 (let (($x30 (= $x50 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x101 (and $x30 $x119)))
 (let (($x61 (and $x101 $x38)))
 (let (($x7 (and $x61 $x66)))
 (let (($x74 (and $x7 $x63)))
 (let (($x47 (= $x74 true)))
 (let (($x131 (= $x47 true)))
 (let (($x89 (= $x131 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x105 (and $x21 $x89)))
 (let (($x107 (=> $x105 $x77)))
 (not $x107))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x78 ((_ extract 13 0) input.dst.llvm-%l)))
 (let (($x106 (= (_ bv0 14) ?x78)))
 (let (($x77 (= $x106 true)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x96 (concat ?x79 (concat ?x114 ?x88)))))
 (let (($x40 (= input.dst.llvm-%l ?x37)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x29)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x58 $x25)))
 (let (($x12 (and $x108 $x22)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x63 (and (and (and $x53 $x62) $x12) $x40)))
 (let (($x59 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x66 (=> $x59 false)))
 (let (($x38 (= $x59 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x91 (= false false)))
 (let (($x50 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x119 (=> $x50 $x91)))
 (let (($x30 (= $x50 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x101 (and $x30 $x119)))
 (let (($x61 (and $x101 $x38)))
 (let (($x7 (and $x61 $x66)))
 (let (($x74 (and $x7 $x63)))
 (let (($x47 (= $x74 true)))
 (let (($x131 (= $x47 true)))
 (let (($x89 (= $x131 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x105 (and $x21 $x89)))
 (let (($x107 (=> $x105 $x77)))
 (not $x107))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 ((_ extract 12 0) input.dst.llvm-%l)))
 (let (($x6 (= (_ bv0 13) ?x10)))
 (let (($x121 (= $x6 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x56 (concat ?x84 (concat ?x104 ?x44)))))
 (let (($x70 (= input.dst.llvm-%l ?x83)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x36)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x39 $x132)))
 (let (($x13 (and $x76 $x94)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x127 (and (and (and $x86 $x118) $x13) $x70)))
 (let (($x34 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x133 (=> $x34 true)))
 (let (($x120 (= $x34 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x35 (= false false)))
 (let (($x113 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x95 (=> $x113 $x35)))
 (let (($x109 (= $x113 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x26 (and $x109 $x95)))
 (let (($x20 (and $x26 $x120)))
 (let (($x48 (and $x20 $x133)))
 (let (($x19 (and $x48 $x127)))
 (let (($x80 (= $x19 true)))
 (let (($x112 (= $x80 true)))
 (let (($x117 (= $x112 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x49 (and $x51 $x117)))
 (let (($x65 (=> $x49 $x121)))
 (not $x65))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x10 ((_ extract 12 0) input.dst.llvm-%l)))
 (let (($x6 (= (_ bv0 13) ?x10)))
 (let (($x121 (= $x6 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x56 (concat ?x84 (concat ?x104 ?x44)))))
 (let (($x70 (= input.dst.llvm-%l ?x83)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x36)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x39 $x132)))
 (let (($x13 (and $x76 $x94)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x127 (and (and (and $x86 $x118) $x13) $x70)))
 (let (($x34 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x133 (=> $x34 true)))
 (let (($x120 (= $x34 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x35 (= false false)))
 (let (($x113 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x95 (=> $x113 $x35)))
 (let (($x109 (= $x113 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x26 (and $x109 $x95)))
 (let (($x20 (and $x26 $x120)))
 (let (($x48 (and $x20 $x133)))
 (let (($x19 (and $x48 $x127)))
 (let (($x80 (= $x19 true)))
 (let (($x112 (= $x80 true)))
 (let (($x117 (= $x112 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x49 (and $x51 $x117)))
 (let (($x65 (=> $x49 $x121)))
 (not $x65))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000001000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b00010000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000001 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4096 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741825 32) (_ bv16 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv32 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 ((_ extract 12 0) input.dst.llvm-%l)))
 (let (($x103 (= (_ bv0 13) ?x128)))
 (let (($x55 (= $x103 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x23 (concat ?x37 (concat ?x125 ?x106)))))
 (let (($x124 (= input.dst.llvm-%l ?x114)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x107)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x89 $x73)))
 (let (($x78 (and $x77 $x33)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x69 (and (and (and $x122 $x79) $x78) $x124)))
 (let (($x81 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x108 (=> $x81 false)))
 (let (($x12 (= $x81 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x123 (= false false)))
 (let (($x99 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x130 (=> $x99 $x123)))
 (let (($x62 (= $x99 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x53 (and $x62 $x130)))
 (let (($x9 (and $x53 $x12)))
 (let (($x29 (and $x9 $x108)))
 (let (($x27 (and $x29 $x69)))
 (let (($x32 (= $x27 true)))
 (let (($x16 (= $x32 true)))
 (let (($x31 (= $x16 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x111 (and $x51 $x31)))
 (let (($x115 (=> $x111 $x55)))
 (not $x115))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 ((_ extract 12 0) input.dst.llvm-%l)))
 (let (($x103 (= (_ bv0 13) ?x128)))
 (let (($x55 (= $x103 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x23 (concat ?x37 (concat ?x125 ?x106)))))
 (let (($x124 (= input.dst.llvm-%l ?x114)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x107)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x89 $x73)))
 (let (($x78 (and $x77 $x33)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x69 (and (and (and $x122 $x79) $x78) $x124)))
 (let (($x81 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x108 (=> $x81 false)))
 (let (($x12 (= $x81 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x123 (= false false)))
 (let (($x99 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x130 (=> $x99 $x123)))
 (let (($x62 (= $x99 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x53 (and $x62 $x130)))
 (let (($x9 (and $x53 $x12)))
 (let (($x29 (and $x9 $x108)))
 (let (($x27 (and $x29 $x69)))
 (let (($x32 (= $x27 true)))
 (let (($x16 (= $x32 true)))
 (let (($x31 (= $x16 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x111 (and $x51 $x31)))
 (let (($x115 (=> $x111 $x55)))
 (not $x115))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 ((_ extract 11 0) input.dst.llvm-%l)))
 (let (($x42 (= (_ bv0 12) ?x66)))
 (let (($x7 (= $x42 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x129 (concat ?x83 (concat ?x58 ?x6)))))
 (let (($x15 (= input.dst.llvm-%l ?x104)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x65)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x117 $x50)))
 (let (($x10 (and $x121 $x102)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x45 (and (and (and $x30 $x84) $x10) $x15)))
 (let (($x110 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x76 (=> $x110 true)))
 (let (($x13 (= $x110 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x92 (= false false)))
 (let (($x105 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x71 (=> $x105 $x92)))
 (let (($x118 (= $x105 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x86 (and $x118 $x71)))
 (let (($x93 (and $x86 $x13)))
 (let (($x36 (and $x93 $x76)))
 (let (($x72 (and $x36 $x45)))
 (let (($x57 (= $x72 true)))
 (let (($x28 (= $x57 true)))
 (let (($x101 (= $x28 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x59 (and $x54 $x101)))
 (let (($x67 (=> $x59 $x7)))
 (not $x67))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 ((_ extract 11 0) input.dst.llvm-%l)))
 (let (($x42 (= (_ bv0 12) ?x66)))
 (let (($x7 (= $x42 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x129 (concat ?x83 (concat ?x58 ?x6)))))
 (let (($x15 (= input.dst.llvm-%l ?x104)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x65)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x117 $x50)))
 (let (($x10 (and $x121 $x102)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x45 (and (and (and $x30 $x84) $x10) $x15)))
 (let (($x110 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x76 (=> $x110 true)))
 (let (($x13 (= $x110 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x92 (= false false)))
 (let (($x105 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x71 (=> $x105 $x92)))
 (let (($x118 (= $x105 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x86 (and $x118 $x71)))
 (let (($x93 (and $x86 $x13)))
 (let (($x36 (and $x93 $x76)))
 (let (($x72 (and $x36 $x45)))
 (let (($x57 (= $x72 true)))
 (let (($x28 (= $x57 true)))
 (let (($x101 (= $x28 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x59 (and $x54 $x101)))
 (let (($x67 (=> $x59 $x7)))
 (not $x67))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000100000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b00001000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000001 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv2048 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv67108872 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv67108873 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv67108872 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv67108875 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv128 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x133 ((_ extract 11 0) input.dst.llvm-%l)))
 (let (($x85 (= (_ bv0 12) ?x133)))
 (let (($x48 (= $x85 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x74 (concat ?x114 (concat ?x39 ?x103)))))
 (let (($x40 (= input.dst.llvm-%l ?x125)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x115)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x31 $x113)))
 (let (($x128 (and $x55 $x60)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x38 (and (and (and $x109 $x37) $x128) $x40)))
 (let (($x88 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x77 (=> $x88 false)))
 (let (($x78 (= $x88 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x63 (= false false)))
 (let (($x49 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (=> $x49 $x63)))
 (let (($x79 (= $x49 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x122 (and $x79 $x22)))
 (let (($x131 (and $x122 $x78)))
 (let (($x107 (and $x131 $x77)))
 (let (($x119 (and $x107 $x38)))
 (let (($x52 (= $x119 true)))
 (let (($x41 (= $x52 true)))
 (let (($x26 (= $x41 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x34 (and $x54 $x26)))
 (let (($x17 (=> $x34 $x48)))
 (not $x17))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x133 ((_ extract 11 0) input.dst.llvm-%l)))
 (let (($x85 (= (_ bv0 12) ?x133)))
 (let (($x48 (= $x85 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x74 (concat ?x114 (concat ?x39 ?x103)))))
 (let (($x40 (= input.dst.llvm-%l ?x125)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x115)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x31 $x113)))
 (let (($x128 (and $x55 $x60)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x38 (and (and (and $x109 $x37) $x128) $x40)))
 (let (($x88 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x77 (=> $x88 false)))
 (let (($x78 (= $x88 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x63 (= false false)))
 (let (($x49 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (=> $x49 $x63)))
 (let (($x79 (= $x49 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x122 (and $x79 $x22)))
 (let (($x131 (and $x122 $x78)))
 (let (($x107 (and $x131 $x77)))
 (let (($x119 (and $x107 $x38)))
 (let (($x52 (= $x119 true)))
 (let (($x41 (= $x52 true)))
 (let (($x26 (= $x41 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x34 (and $x54 $x26)))
 (let (($x17 (=> $x34 $x48)))
 (not $x17))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x108 ((_ extract 10 0) input.dst.llvm-%l)))
 (let (($x96 (= (_ bv0 11) ?x108)))
 (let (($x29 (= $x96 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x19 (concat ?x104 (concat ?x89 ?x42)))))
 (let (($x70 (= input.dst.llvm-%l ?x58)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x67)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x101 $x99)))
 (let (($x66 (and $x7 $x61)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x120 (and (and (and $x62 $x83) $x66) $x70)))
 (let (($x44 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x121 (=> $x44 true)))
 (let (($x10 (= $x44 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x127 (= false false)))
 (let (($x111 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x94 (=> $x111 $x127)))
 (let (($x84 (= $x111 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x30 (and $x84 $x94)))
 (let (($x112 (and $x30 $x10)))
 (let (($x65 (and $x112 $x121)))
 (let (($x95 (and $x65 $x120)))
 (let (($x97 (= $x95 true)))
 (let (($x14 (= $x97 true)))
 (let (($x53 (= $x14 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x81 (and $x21 $x53)))
 (let (($x98 (=> $x81 $x29)))
 (not $x98))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x108 ((_ extract 10 0) input.dst.llvm-%l)))
 (let (($x96 (= (_ bv0 11) ?x108)))
 (let (($x29 (= $x96 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x19 (concat ?x104 (concat ?x89 ?x42)))))
 (let (($x70 (= input.dst.llvm-%l ?x58)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x67)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x101 $x99)))
 (let (($x66 (and $x7 $x61)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x120 (and (and (and $x62 $x83) $x66) $x70)))
 (let (($x44 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x121 (=> $x44 true)))
 (let (($x10 (= $x44 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x127 (= false false)))
 (let (($x111 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x94 (=> $x111 $x127)))
 (let (($x84 (= $x111 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x30 (and $x84 $x94)))
 (let (($x112 (and $x30 $x10)))
 (let (($x65 (and $x112 $x121)))
 (let (($x95 (and $x65 $x120)))
 (let (($x97 (= $x95 true)))
 (let (($x14 (= $x97 true)))
 (let (($x53 (= $x14 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x81 (and $x21 $x53)))
 (let (($x98 (=> $x81 $x29)))
 (not $x98))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000010000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b00000100)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000001 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1024 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483649 32) (_ bv4 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv262144 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x76 ((_ extract 10 0) input.dst.llvm-%l)))
 (let (($x56 (= (_ bv0 11) ?x76)))
 (let (($x36 (= $x56 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x27 (concat ?x125 (concat ?x117 ?x85)))))
 (let (($x124 (= input.dst.llvm-%l ?x39)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x17)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x26 $x105)))
 (let (($x133 (and $x48 $x20)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x12 (and (and (and $x118 $x114) $x133) $x124)))
 (let (($x106 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x55 (=> $x106 false)))
 (let (($x128 (= $x106 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x69 (= false false)))
 (let (($x59 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x33 (=> $x59 $x69)))
 (let (($x37 (= $x59 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x109 (and $x37 $x33)))
 (let (($x16 (and $x109 $x128)))
 (let (($x115 (and $x16 $x55)))
 (let (($x130 (and $x115 $x12)))
 (let (($x24 (= $x130 true)))
 (let (($x87 (= $x24 true)))
 (let (($x86 (= $x87 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x110 (and $x21 $x86)))
 (let (($x46 (=> $x110 $x36)))
 (not $x46))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x76 ((_ extract 10 0) input.dst.llvm-%l)))
 (let (($x56 (= (_ bv0 11) ?x76)))
 (let (($x36 (= $x56 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x27 (concat ?x125 (concat ?x117 ?x85)))))
 (let (($x124 (= input.dst.llvm-%l ?x39)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x17)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x26 $x105)))
 (let (($x133 (and $x48 $x20)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x12 (and (and (and $x118 $x114) $x133) $x124)))
 (let (($x106 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x55 (=> $x106 false)))
 (let (($x128 (= $x106 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x69 (= false false)))
 (let (($x59 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x33 (=> $x59 $x69)))
 (let (($x37 (= $x59 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x109 (and $x37 $x33)))
 (let (($x16 (and $x109 $x128)))
 (let (($x115 (and $x16 $x55)))
 (let (($x130 (and $x115 $x12)))
 (let (($x24 (= $x130 true)))
 (let (($x87 (= $x24 true)))
 (let (($x86 (= $x87 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x110 (and $x21 $x86)))
 (let (($x46 (=> $x110 $x36)))
 (not $x46))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x77 ((_ extract 9 0) input.dst.llvm-%l)))
 (let (($x23 (= (_ bv0 10) ?x77)))
 (let (($x107 (= $x23 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x72 (concat ?x58 (concat ?x31 ?x96)))))
 (let (($x15 (= input.dst.llvm-%l ?x89)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x98)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x53 $x49)))
 (let (($x108 (and $x29 $x9)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x13 (and (and (and $x79 $x104) $x108) $x15)))
 (let (($x6 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (=> $x6 true)))
 (let (($x66 (= $x6 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x45 (= false false)))
 (let (($x34 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x102 (=> $x34 $x45)))
 (let (($x83 (= $x34 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x62 (and $x83 $x102)))
 (let (($x28 (and $x62 $x66)))
 (let (($x67 (and $x28 $x7)))
 (let (($x71 (and $x67 $x13)))
 (let (($x126 (= $x71 true)))
 (let (($x8 (= $x126 true)))
 (let (($x122 (= $x8 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x88 (and $x51 $x122)))
 (let (($x116 (=> $x88 $x107)))
 (not $x116))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x77 ((_ extract 9 0) input.dst.llvm-%l)))
 (let (($x23 (= (_ bv0 10) ?x77)))
 (let (($x107 (= $x23 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x72 (concat ?x58 (concat ?x31 ?x96)))))
 (let (($x15 (= input.dst.llvm-%l ?x89)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x98)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x53 $x49)))
 (let (($x108 (and $x29 $x9)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x13 (and (and (and $x79 $x104) $x108) $x15)))
 (let (($x6 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (=> $x6 true)))
 (let (($x66 (= $x6 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x45 (= false false)))
 (let (($x34 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x102 (=> $x34 $x45)))
 (let (($x83 (= $x34 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x62 (and $x83 $x102)))
 (let (($x28 (and $x62 $x66)))
 (let (($x67 (and $x28 $x7)))
 (let (($x71 (and $x67 $x13)))
 (let (($x126 (= $x71 true)))
 (let (($x8 (= $x126 true)))
 (let (($x122 (= $x8 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x88 (and $x51 $x122)))
 (let (($x116 (=> $x88 $x107)))
 (not $x116))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000001000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b00000010)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000001 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv512 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv2 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv262144 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 ((_ extract 9 0) input.dst.llvm-%l)))
 (let (($x129 (= (_ bv0 10) ?x121)))
 (let (($x65 (= $x129 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x119 (concat ?x39 (concat ?x101 ?x56)))))
 (let (($x40 (= input.dst.llvm-%l ?x117)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x46)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x86 $x111)))
 (let (($x76 (and $x36 $x93)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x78 (and (and (and $x84 $x125) $x76) $x40)))
 (let (($x103 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x48 (=> $x103 false)))
 (let (($x133 (= $x103 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x38 (= false false)))
 (let (($x81 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x60 (=> $x81 $x38)))
 (let (($x114 (= $x81 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x118 (and $x114 $x60)))
 (let (($x41 (and $x118 $x133)))
 (let (($x17 (and $x41 $x48)))
 (let (($x22 (and $x17 $x78)))
 (let (($x75 (= $x22 true)))
 (let (($x18 (= $x75 true)))
 (let (($x30 (= $x18 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x44 (and $x51 $x30)))
 (let (($x25 (=> $x44 $x65)))
 (not $x25))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 ((_ extract 9 0) input.dst.llvm-%l)))
 (let (($x129 (= (_ bv0 10) ?x121)))
 (let (($x65 (= $x129 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x119 (concat ?x39 (concat ?x101 ?x56)))))
 (let (($x40 (= input.dst.llvm-%l ?x117)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x46)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x86 $x111)))
 (let (($x76 (and $x36 $x93)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x78 (and (and (and $x84 $x125) $x76) $x40)))
 (let (($x103 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x48 (=> $x103 false)))
 (let (($x133 (= $x103 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x38 (= false false)))
 (let (($x81 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x60 (=> $x81 $x38)))
 (let (($x114 (= $x81 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x118 (and $x114 $x60)))
 (let (($x41 (and $x118 $x133)))
 (let (($x17 (and $x41 $x48)))
 (let (($x22 (and $x17 $x78)))
 (let (($x75 (= $x22 true)))
 (let (($x18 (= $x75 true)))
 (let (($x30 (= $x18 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x44 (and $x51 $x30)))
 (let (($x25 (=> $x44 $x65)))
 (not $x25))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x55 ((_ extract 8 0) input.dst.llvm-%l)))
 (let (($x74 (= (_ bv0 9) ?x55)))
 (let (($x115 (= $x74 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x95 (concat ?x89 (concat ?x26 ?x23)))))
 (let (($x70 (= input.dst.llvm-%l ?x31)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x116)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x122 $x59)))
 (let (($x77 (and $x107 $x131)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x10 (and (and (and $x37 $x58) $x77) $x70)))
 (let (($x42 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x29 (=> $x42 true)))
 (let (($x108 (= $x42 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x120 (= false false)))
 (let (($x110 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x61 (=> $x110 $x120)))
 (let (($x104 (= $x110 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x79 (and $x104 $x61)))
 (let (($x14 (and $x79 $x108)))
 (let (($x98 (and $x14 $x29)))
 (let (($x94 (and $x98 $x10)))
 (let (($x11 (= $x94 true)))
 (let (($x90 (= $x11 true)))
 (let (($x109 (= $x90 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x106 (and $x54 $x109)))
 (let (($x132 (=> $x106 $x115)))
 (not $x132))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x55 ((_ extract 8 0) input.dst.llvm-%l)))
 (let (($x74 (= (_ bv0 9) ?x55)))
 (let (($x115 (= $x74 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x95 (concat ?x89 (concat ?x26 ?x23)))))
 (let (($x70 (= input.dst.llvm-%l ?x31)))
 (let ((?x116 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x116)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x122 $x59)))
 (let (($x77 (and $x107 $x131)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x10 (and (and (and $x37 $x58) $x77) $x70)))
 (let (($x42 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x29 (=> $x42 true)))
 (let (($x108 (= $x42 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x120 (= false false)))
 (let (($x110 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x61 (=> $x110 $x120)))
 (let (($x104 (= $x110 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x79 (and $x104 $x61)))
 (let (($x14 (and $x79 $x108)))
 (let (($x98 (and $x14 $x29)))
 (let (($x94 (and $x98 $x10)))
 (let (($x11 (= $x94 true)))
 (let (($x90 (= $x11 true)))
 (let (($x109 (= $x90 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x106 (and $x54 $x109)))
 (let (($x132 (=> $x106 $x115)))
 (not $x132))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000100000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000001 #x01))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv9 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x7 ((_ extract 8 0) input.dst.llvm-%l)))
 (let (($x19 (= (_ bv0 9) ?x7)))
 (let (($x67 (= $x19 true)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x130 (concat ?x117 (concat ?x53 ?x129)))))
 (let (($x124 (= input.dst.llvm-%l ?x101)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x25)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x30 $x34)))
 (let (($x121 (and $x65 $x112)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x128 (and (and (and $x83 $x39) $x121) $x124)))
 (let (($x85 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x36 (=> $x85 false)))
 (let (($x76 (= $x85 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x12 (= false false)))
 (let (($x88 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x20 (=> $x88 $x12)))
 (let (($x125 (= $x88 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x84 (and $x125 $x20)))
 (let (($x87 (and $x84 $x76)))
 (let (($x46 (and $x87 $x36)))
 (let (($x33 (and $x46 $x128)))
 (let (($x47 (= $x33 true)))
 (let (($x91 (= $x47 true)))
 (let (($x62 (= $x91 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x6 (and $x54 $x62)))
 (let (($x73 (=> $x6 $x67)))
 (not $x73))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x7 ((_ extract 8 0) input.dst.llvm-%l)))
 (let (($x19 (= (_ bv0 9) ?x7)))
 (let (($x67 (= $x19 true)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x130 (concat ?x117 (concat ?x53 ?x129)))))
 (let (($x124 (= input.dst.llvm-%l ?x101)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x25)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x30 $x34)))
 (let (($x121 (and $x65 $x112)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x128 (and (and (and $x83 $x39) $x121) $x124)))
 (let (($x85 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x36 (=> $x85 false)))
 (let (($x76 (= $x85 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x12 (= false false)))
 (let (($x88 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x20 (=> $x88 $x12)))
 (let (($x125 (= $x88 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x84 (and $x125 $x20)))
 (let (($x87 (and $x84 $x76)))
 (let (($x46 (and $x87 $x36)))
 (let (($x33 (and $x46 $x128)))
 (let (($x47 (= $x33 true)))
 (let (($x91 (= $x47 true)))
 (let (($x62 (= $x91 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x6 (and $x54 $x62)))
 (let (($x73 (=> $x6 $x67)))
 (not $x73))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 ((_ extract 7 0) input.dst.llvm-%l)))
 (let (($x48 (= (_ bv0 8) ?x41)))
 (let (($x27 (= $x48 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x71 (concat ?x31 (concat ?x86 ?x74)))))
 (let (($x15 (= input.dst.llvm-%l ?x26)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x132)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x109 $x81)))
 (let (($x55 (and $x115 $x16)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x66 (and (and (and $x114 $x89) $x55) $x15)))
 (let (($x96 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x107 (=> $x96 true)))
 (let (($x77 (= $x96 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x13 (= false false)))
 (let (($x44 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x9 (=> $x44 $x13)))
 (let (($x58 (= $x44 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x37 (and $x58 $x9)))
 (let (($x8 (and $x37 $x77)))
 (let (($x116 (and $x8 $x107)))
 (let (($x102 (and $x116 $x66)))
 (let (($x80 (= $x102 true)))
 (let (($x35 (= $x80 true)))
 (let (($x118 (= $x35 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x103 (and $x21 $x118)))
 (let (($x17 (=> $x103 $x27)))
 (not $x17))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 ((_ extract 7 0) input.dst.llvm-%l)))
 (let (($x48 (= (_ bv0 8) ?x41)))
 (let (($x27 (= $x48 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x71 (concat ?x31 (concat ?x86 ?x74)))))
 (let (($x15 (= input.dst.llvm-%l ?x26)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x132)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x109 $x81)))
 (let (($x55 (and $x115 $x16)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x66 (and (and (and $x114 $x89) $x55) $x15)))
 (let (($x96 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x107 (=> $x96 true)))
 (let (($x77 (= $x96 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x13 (= false false)))
 (let (($x44 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x9 (=> $x44 $x13)))
 (let (($x58 (= $x44 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x37 (and $x58 $x9)))
 (let (($x8 (and $x37 $x77)))
 (let (($x116 (and $x8 $x107)))
 (let (($x102 (and $x116 $x66)))
 (let (($x80 (= $x102 true)))
 (let (($x35 (= $x80 true)))
 (let (($x118 (= $x35 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x103 (and $x21 $x118)))
 (let (($x17 (=> $x103 $x27)))
 (not $x17))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000010000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_11 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_11 #b00000000000000000000000000000011) #b00000000)
 (default #b10000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv128 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv268435456 32) (_ bv128 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv268435459 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv128 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x29 ((_ extract 7 0) input.dst.llvm-%l)))
 (let (($x72 (= (_ bv0 8) ?x29)))
 (let (($x98 (= $x72 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x53 (concat ?x124 (concat ?x33 ?x100)))))
 (let (($x128 (= input.dst.llvm-%l ?x40)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x28)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x45 $x67)))
 (let (($x6 (and $x73 $x7)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x60 (and (and (and $x49 $x5) $x6) $x128)))
 (let (($x130 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x25 (=> $x130 false)))
 (let (($x18 (= $x130 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x93 (= false false)))
 (let (($x106 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x83 (=> $x106 $x93)))
 (let (($x78 (= $x106 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x87 (and $x78 $x83)))
 (let (($x65 (and $x87 $x18)))
 (let (($x34 (and $x65 $x25)))
 (let (($x32 (and $x34 $x60)))
 (let (($x123 (= $x32 true)))
 (let (($x79 (= $x123 true)))
 (let (($x42 (= $x79 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x14 (and $x21 $x42)))
 (let (($x113 (=> $x14 $x98)))
 (not $x113))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x29 ((_ extract 7 0) input.dst.llvm-%l)))
 (let (($x72 (= (_ bv0 8) ?x29)))
 (let (($x98 (= $x72 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x53 (concat ?x124 (concat ?x33 ?x100)))))
 (let (($x128 (= input.dst.llvm-%l ?x40)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x28)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x45 $x67)))
 (let (($x6 (and $x73 $x7)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x60 (and (and (and $x49 $x5) $x6) $x128)))
 (let (($x130 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x25 (=> $x130 false)))
 (let (($x18 (= $x130 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x93 (= false false)))
 (let (($x106 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x83 (=> $x106 $x93)))
 (let (($x78 (= $x106 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x87 (and $x78 $x83)))
 (let (($x65 (and $x87 $x18)))
 (let (($x34 (and $x65 $x25)))
 (let (($x32 (and $x34 $x60)))
 (let (($x123 (= $x32 true)))
 (let (($x79 (= $x123 true)))
 (let (($x42 (= $x79 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x14 (and $x21 $x42)))
 (let (($x113 (=> $x14 $x98)))
 (not $x113))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 ((_ extract 6 0) input.dst.llvm-%l)))
 (let (($x99 (= (_ bv0 7) ?x46)))
 (let (($x68 (= $x99 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x86 (concat ?x15 (concat ?x102 ?x50)))))
 (let (($x66 (= input.dst.llvm-%l ?x70)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x20)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x38 $x27)))
 (let (($x103 (and $x17 $x41)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x61 (and (and (and $x111 $x64) $x103) $x66)))
 (let (($x71 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x132 (=> $x71 true)))
 (let (($x90 (= $x71 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x131 (= false false)))
 (let (($x19 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x114 (=> $x19 $x131)))
 (let (($x10 (= $x19 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x8 (and $x10 $x114)))
 (let (($x115 (and $x8 $x90)))
 (let (($x81 (and $x115 $x132)))
 (let (($x57 (and $x81 $x61)))
 (let (($x92 (= $x57 true)))
 (let (($x84 (= $x92 true)))
 (let (($x85 (= $x84 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x36 (and $x51 $x85)))
 (let (($x56 (=> $x36 $x68)))
 (not $x56))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 ((_ extract 6 0) input.dst.llvm-%l)))
 (let (($x99 (= (_ bv0 7) ?x46)))
 (let (($x68 (= $x99 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x86 (concat ?x15 (concat ?x102 ?x50)))))
 (let (($x66 (= input.dst.llvm-%l ?x70)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x20)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x38 $x27)))
 (let (($x103 (and $x17 $x41)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x61 (and (and (and $x111 $x64) $x103) $x66)))
 (let (($x71 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x132 (=> $x71 true)))
 (let (($x90 (= $x71 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x131 (= false false)))
 (let (($x19 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x114 (=> $x19 $x131)))
 (let (($x10 (= $x19 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x8 (and $x10 $x114)))
 (let (($x115 (and $x8 $x90)))
 (let (($x81 (and $x115 $x132)))
 (let (($x57 (and $x81 $x61)))
 (let (($x92 (= $x57 true)))
 (let (($x84 (= $x92 true)))
 (let (($x85 (= $x84 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x36 (and $x51 $x85)))
 (let (($x56 (=> $x36 $x68)))
 (not $x56))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000001000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_11 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_11 #b00000000000000000000000000000011) #b00000000)
 (default #b01000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x40)
                     #x00000001
                     #x00)
              #x00000003
              #x00)
       #x00000002
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv64 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483656 32) (_ bv64 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv32768 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 ((_ extract 6 0) input.dst.llvm-%l)))
 (let (($x116 (= (_ bv0 7) ?x95)))
 (let (($x105 (= $x116 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x47 (concat ?x40 (concat ?x109 ?x72)))))
 (let (($x129 (= input.dst.llvm-%l ?x33)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x113)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x42 $x44)))
 (let (($x29 (and $x98 $x9)))
 (let (($x124 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x76 (and (and (and $x58 $x124) $x29) $x129)))
 (let (($x22 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x73 (=> $x22 false)))
 (let (($x6 (= $x22 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x91 (= false false)))
 (let (($x48 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x104 (=> $x48 $x91)))
 (let (($x5 (= $x48 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x49 (and $x5 $x104)))
 (let (($x133 (and $x49 $x6)))
 (let (($x28 (and $x133 $x73)))
 (let (($x97 (and $x28 $x76)))
 (let (($x52 (= $x97 true)))
 (let (($x63 (= $x52 true)))
 (let (($x37 (= $x63 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x96 (and $x51 $x37)))
 (let (($x134 (=> $x96 $x105)))
 (not $x134))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 ((_ extract 6 0) input.dst.llvm-%l)))
 (let (($x116 (= (_ bv0 7) ?x95)))
 (let (($x105 (= $x116 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x47 (concat ?x40 (concat ?x109 ?x72)))))
 (let (($x129 (= input.dst.llvm-%l ?x33)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x113)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x42 $x44)))
 (let (($x29 (and $x98 $x9)))
 (let (($x124 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x76 (and (and (and $x58 $x124) $x29) $x129)))
 (let (($x22 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x73 (=> $x22 false)))
 (let (($x6 (= $x22 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x91 (= false false)))
 (let (($x48 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x104 (=> $x48 $x91)))
 (let (($x5 (= $x48 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x49 (and $x5 $x104)))
 (let (($x133 (and $x49 $x6)))
 (let (($x28 (and $x133 $x73)))
 (let (($x97 (and $x28 $x76)))
 (let (($x52 (= $x97 true)))
 (let (($x63 (= $x52 true)))
 (let (($x37 (= $x63 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x96 (and $x51 $x37)))
 (let (($x134 (=> $x96 $x105)))
 (not $x134))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 ((_ extract 5 0) input.dst.llvm-%l)))
 (let (($x121 (= (_ bv0 6) ?x25)))
 (let (($x34 (= $x121 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x80 (concat ?x70 (concat ?x45 ?x99)))))
 (let (($x74 (= input.dst.llvm-%l ?x102)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x56)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x85 $x106)))
 (let (($x46 (and $x68 $x119)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x77 (and (and (and $x78 $x15) $x46) $x74)))
 (let (($x94 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x17 (=> $x94 true)))
 (let (($x103 (= $x94 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x35 (= false false)))
 (let (($x14 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x125 (=> $x14 $x35)))
 (let (($x64 (= $x14 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x111 (and $x64 $x125)))
 (let (($x108 (and $x111 $x103)))
 (let (($x20 (and $x108 $x17)))
 (let (($x24 (and $x20 $x77)))
 (let (($x127 (= $x24 true)))
 (let (($x39 (= $x127 true)))
 (let (($x87 (= $x39 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x130 (and $x54 $x87)))
 (let (($x75 (=> $x130 $x34)))
 (not $x75))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 ((_ extract 5 0) input.dst.llvm-%l)))
 (let (($x121 (= (_ bv0 6) ?x25)))
 (let (($x34 (= $x121 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x80 (concat ?x70 (concat ?x45 ?x99)))))
 (let (($x74 (= input.dst.llvm-%l ?x102)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x56)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x85 $x106)))
 (let (($x46 (and $x68 $x119)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x77 (and (and (and $x78 $x15) $x46) $x74)))
 (let (($x94 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x17 (=> $x94 true)))
 (let (($x103 (= $x94 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x35 (= false false)))
 (let (($x14 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x125 (=> $x14 $x35)))
 (let (($x64 (= $x14 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x111 (and $x64 $x125)))
 (let (($x108 (and $x111 $x103)))
 (let (($x20 (and $x108 $x17)))
 (let (($x24 (and $x20 $x77)))
 (let (($x127 (= $x24 true)))
 (let (($x39 (= $x127 true)))
 (let (($x87 (= $x39 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x130 (and $x54 $x87)))
 (let (($x75 (=> $x130 $x34)))
 (not $x75))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000100000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_11 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_11 #b00000000000000000000000000000011) #b00000000)
 (default #b00100000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x20)
                     #x00000001
                     #x00)
              #x00000003
              #x00)
       #x00000002
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv32 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2684354560 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2684354560 32) (_ bv32 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2684354560 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2684354563 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 ((_ extract 5 0) input.dst.llvm-%l)))
 (let (($x55 (= (_ bv0 6) ?x132)))
 (let (($x81 (= $x55 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x32 (concat ?x33 (concat ?x38 ?x116)))))
 (let (($x128 (= input.dst.llvm-%l ?x109)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x134)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x37 $x19)))
 (let (($x95 (and $x105 $x107)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x18 (and (and (and $x10 $x40) $x95) $x128)))
 (let (($x100 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x98 (=> $x100 false)))
 (let (($x29 (= $x100 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x60 (= false false)))
 (let (($x36 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x7 (=> $x36 $x60)))
 (let (($x124 (= $x36 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x58 (and $x124 $x7)))
 (let (($x79 (and $x58 $x29)))
 (let (($x113 (and $x79 $x98)))
 (let (($x83 (and $x113 $x18)))
 (let (($x69 (= $x83 true)))
 (let (($x89 (= $x69 true)))
 (let (($x8 (= $x89 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x71 (and $x54 $x8)))
 (let (($x11 (=> $x71 $x81)))
 (not $x11))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 ((_ extract 5 0) input.dst.llvm-%l)))
 (let (($x55 (= (_ bv0 6) ?x132)))
 (let (($x81 (= $x55 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x32 (concat ?x33 (concat ?x38 ?x116)))))
 (let (($x128 (= input.dst.llvm-%l ?x109)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x134)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x37 $x19)))
 (let (($x95 (and $x105 $x107)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x18 (and (and (and $x10 $x40) $x95) $x128)))
 (let (($x100 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x98 (=> $x100 false)))
 (let (($x29 (= $x100 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x60 (= false false)))
 (let (($x36 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x7 (=> $x36 $x60)))
 (let (($x124 (= $x36 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x58 (and $x124 $x7)))
 (let (($x79 (and $x58 $x29)))
 (let (($x113 (and $x79 $x98)))
 (let (($x83 (and $x113 $x18)))
 (let (($x69 (= $x83 true)))
 (let (($x89 (= $x69 true)))
 (let (($x8 (= $x89 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x71 (and $x54 $x8)))
 (let (($x11 (=> $x71 $x81)))
 (not $x11))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 ((_ extract 4 0) input.dst.llvm-%l)))
 (let (($x53 (= (_ bv0 5) ?x73)))
 (let (($x28 (= $x53 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x57 (concat ?x102 (concat ?x42 ?x121)))))
 (let (($x66 (= input.dst.llvm-%l ?x45)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x75)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x87 $x48)))
 (let (($x25 (and $x34 $x65)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x90 (and (and (and $x5 $x70) $x25) $x66)))
 (let (($x50 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x68 (=> $x50 true)))
 (let (($x46 (= $x50 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x61 (= false false)))
 (let (($x96 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x41 (=> $x96 $x61)))
 (let (($x15 (= $x96 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x78 (and $x15 $x41)))
 (let (($x84 (and $x78 $x46)))
 (let (($x56 (and $x84 $x68)))
 (let (($x114 (and $x56 $x90)))
 (let (($x126 (= $x114 true)))
 (let (($x110 (= $x126 true)))
 (let (($x49 (= $x110 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x22 (and $x21 $x49)))
 (let (($x59 (=> $x22 $x28)))
 (not $x59))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 ((_ extract 4 0) input.dst.llvm-%l)))
 (let (($x53 (= (_ bv0 5) ?x73)))
 (let (($x28 (= $x53 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x57 (concat ?x102 (concat ?x42 ?x121)))))
 (let (($x66 (= input.dst.llvm-%l ?x45)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x75)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x87 $x48)))
 (let (($x25 (and $x34 $x65)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x90 (and (and (and $x5 $x70) $x25) $x66)))
 (let (($x50 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x68 (=> $x50 true)))
 (let (($x46 (= $x50 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x61 (= false false)))
 (let (($x96 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x41 (=> $x96 $x61)))
 (let (($x15 (= $x96 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x78 (and $x15 $x41)))
 (let (($x84 (and $x78 $x46)))
 (let (($x56 (and $x84 $x68)))
 (let (($x114 (and $x56 $x90)))
 (let (($x126 (= $x114 true)))
 (let (($x110 (= $x126 true)))
 (let (($x49 (= $x110 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x22 (and $x21 $x49)))
 (let (($x59 (=> $x22 $x28)))
 (not $x59))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000010000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_11 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_11 #b00000000000000000000000000000011) #b00000000)
 (default #b00010000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x10)
                     #x00000001
                     #x00)
              #x00000003
              #x00)
       #x00000002
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv536870912 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv536870915 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv16 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 ((_ extract 4 0) input.dst.llvm-%l)))
 (let (($x86 (= (_ bv0 5) ?x17)))
 (let (($x20 (= $x86 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x97 (concat ?x109 (concat ?x85 ?x55)))))
 (let (($x129 (= input.dst.llvm-%l ?x38)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x11)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x8 $x14)))
 (let (($x132 (and $x81 $x115)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x6 (and (and (and $x64 $x33) $x132) $x129)))
 (let (($x72 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x105 (=> $x72 false)))
 (let (($x95 (= $x72 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x76 (= false false)))
 (let (($x130 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x9 (=> $x130 $x76)))
 (let (($x40 (= $x130 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x10 (and $x40 $x9)))
 (let (($x63 (and $x10 $x95)))
 (let (($x134 (and $x63 $x105)))
 (let (($x104 (and $x134 $x6)))
 (let (($x117 (= $x104 true)))
 (let (($x88 (= $x117 true)))
 (let (($x111 (= $x88 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x94 (and $x21 $x111)))
 (let (($x112 (=> $x94 $x20)))
 (not $x112))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 ((_ extract 4 0) input.dst.llvm-%l)))
 (let (($x86 (= (_ bv0 5) ?x17)))
 (let (($x20 (= $x86 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x97 (concat ?x109 (concat ?x85 ?x55)))))
 (let (($x129 (= input.dst.llvm-%l ?x38)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x11)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x8 $x14)))
 (let (($x132 (and $x81 $x115)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x6 (and (and (and $x64 $x33) $x132) $x129)))
 (let (($x72 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x105 (=> $x72 false)))
 (let (($x95 (= $x72 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x76 (= false false)))
 (let (($x130 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x9 (=> $x130 $x76)))
 (let (($x40 (= $x130 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x10 (and $x40 $x9)))
 (let (($x63 (and $x10 $x95)))
 (let (($x134 (and $x63 $x105)))
 (let (($x104 (and $x134 $x6)))
 (let (($x117 (= $x104 true)))
 (let (($x88 (= $x117 true)))
 (let (($x111 (= $x88 true)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x94 (and $x21 $x111)))
 (let (($x112 (=> $x94 $x20)))
 (not $x112))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x47 (= (_ bv0 4) ?x98)))
 (let (($x113 (= $x47 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x24 (concat ?x45 (concat ?x37 ?x53)))))
 (let (($x74 (= input.dst.llvm-%l ?x42)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x59)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x49 $x36)))
 (let (($x73 (and $x28 $x133)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x103 (and (and (and $x124 $x102) $x73) $x74)))
 (let (($x99 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x34 (=> $x99 true)))
 (let (($x25 (= $x99 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x77 (= false false)))
 (let (($x71 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x119 (=> $x71 $x77)))
 (let (($x70 (= $x71 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x5 (and $x70 $x119)))
 (let (($x39 (and $x5 $x25)))
 (let (($x75 (and $x39 $x34)))
 (let (($x125 (and $x75 $x103)))
 (let (($x31 (= $x125 true)))
 (let (($x120 (= $x31 true)))
 (let (($x58 (= $x120 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x100 (and $x51 $x58)))
 (let (($x16 (=> $x100 $x113)))
 (not $x16))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x47 (= (_ bv0 4) ?x98)))
 (let (($x113 (= $x47 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x24 (concat ?x45 (concat ?x37 ?x53)))))
 (let (($x74 (= input.dst.llvm-%l ?x42)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x59)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x49 $x36)))
 (let (($x73 (and $x28 $x133)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x103 (and (and (and $x124 $x102) $x73) $x74)))
 (let (($x99 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x34 (=> $x99 true)))
 (let (($x25 (= $x99 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x77 (= false false)))
 (let (($x71 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x119 (=> $x71 $x77)))
 (let (($x70 (= $x71 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x5 (and $x70 $x119)))
 (let (($x39 (and $x5 $x25)))
 (let (($x75 (and $x39 $x34)))
 (let (($x125 (and $x75 $x103)))
 (let (($x31 (= $x125 true)))
 (let (($x120 (= $x31 true)))
 (let (($x58 (= $x120 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x100 (and $x51 $x58)))
 (let (($x16 (=> $x100 $x113)))
 (not $x16))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000001000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_11 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_11 #b00000000000000000000000000000011) #b00000000)
 (default #b00001000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv67108864 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv67108867 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv131072 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08)
                     #x00000001
                     #x00)
              #x00000003
              #x00)
       #x00000002
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x68 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x80 (= (_ bv0 4) ?x68)))
 (let (($x56 (= $x80 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x83 (concat ?x38 (concat ?x87 ?x86)))))
 (let (($x128 (= input.dst.llvm-%l ?x85)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x112)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x111 $x96)))
 (let (($x17 (and $x20 $x108)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x29 (and (and (and $x15 $x109) $x17) $x128)))
 (let (($x116 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x81 (=> $x116 false)))
 (let (($x132 (= $x116 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x18 (= false false)))
 (let (($x22 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x107 (=> $x22 $x18)))
 (let (($x33 (= $x22 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x64 (and $x33 $x107)))
 (let (($x89 (and $x64 $x132)))
 (let (($x11 (and $x89 $x81)))
 (let (($x7 (and $x11 $x29)))
 (let (($x101 (= $x7 true)))
 (let (($x12 (= $x101 true)))
 (let (($x78 (= $x12 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x50 (and $x51 $x78)))
 (let (($x67 (=> $x50 $x56)))
 (not $x67))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x68 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x80 (= (_ bv0 4) ?x68)))
 (let (($x56 (= $x80 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x83 (concat ?x38 (concat ?x87 ?x86)))))
 (let (($x128 (= input.dst.llvm-%l ?x85)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x112)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x111 $x96)))
 (let (($x17 (and $x20 $x108)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x29 (and (and (and $x15 $x109) $x17) $x128)))
 (let (($x116 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x81 (=> $x116 false)))
 (let (($x132 (= $x116 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x18 (= false false)))
 (let (($x22 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x107 (=> $x22 $x18)))
 (let (($x33 (= $x22 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x64 (and $x33 $x107)))
 (let (($x89 (and $x64 $x132)))
 (let (($x11 (and $x89 $x81)))
 (let (($x7 (and $x11 $x29)))
 (let (($x101 (= $x7 true)))
 (let (($x12 (= $x101 true)))
 (let (($x78 (= $x12 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x50 (and $x51 $x78)))
 (let (($x67 (=> $x50 $x56)))
 (not $x67))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x105 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x32 (= (_ bv0 3) ?x105)))
 (let (($x134 (= $x32 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x114 (concat ?x42 (concat ?x8 ?x47)))))
 (let (($x66 (= input.dst.llvm-%l ?x37)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x16)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x58 $x130)))
 (let (($x98 (and $x113 $x79)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x46 (and (and (and $x40 $x45) $x98) $x66)))
 (let (($x121 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x28 (=> $x121 true)))
 (let (($x73 (= $x121 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x90 (= false false)))
 (let (($x94 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x65 (=> $x94 $x90)))
 (let (($x102 (= $x94 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x124 (and $x102 $x65)))
 (let (($x110 (and $x124 $x73)))
 (let (($x59 (and $x110 $x28)))
 (let (($x41 (and $x59 $x46)))
 (let (($x26 (= $x41 true)))
 (let (($x13 (= $x26 true)))
 (let (($x10 (= $x13 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x72 (and $x54 $x10)))
 (let (($x27 (=> $x72 $x134)))
 (not $x27))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x105 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x32 (= (_ bv0 3) ?x105)))
 (let (($x134 (= $x32 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x114 (concat ?x42 (concat ?x8 ?x47)))))
 (let (($x66 (= input.dst.llvm-%l ?x37)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x16)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x58 $x130)))
 (let (($x98 (and $x113 $x79)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x46 (and (and (and $x40 $x45) $x98) $x66)))
 (let (($x121 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x28 (=> $x121 true)))
 (let (($x73 (= $x121 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x90 (= false false)))
 (let (($x94 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x65 (=> $x94 $x90)))
 (let (($x102 (= $x94 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x124 (and $x102 $x65)))
 (let (($x110 (and $x124 $x73)))
 (let (($x59 (and $x110 $x28)))
 (let (($x41 (and $x59 $x46)))
 (let (($x26 (= $x41 true)))
 (let (($x13 (= $x26 true)))
 (let (($x10 (= $x13 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x72 (and $x54 $x10)))
 (let (($x27 (=> $x72 $x134)))
 (not $x27))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x39 (bvule input.dst.llvm-%l (_ bv0 32))))
 (let (($x34 (= $x39 true)))
 (let (($x57 (= $x34 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x104 (concat ?x85 (concat ?x49 ?x80)))))
 (let (($x129 (= input.dst.llvm-%l ?x87)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x67)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x78 $x71)))
 (let (($x68 (and $x56 $x84)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x95 (and (and (and $x70 $x38) $x68) $x129)))
 (let (($x55 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x20 (=> $x55 true)))
 (let (($x17 (= $x55 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x6 (= false false)))
 (let (($x100 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x115 (=> $x100 $x6)))
 (let (($x109 (= $x100 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x15 (and $x109 $x115)))
 (let (($x88 (and $x15 $x17)))
 (let (($x112 (and $x88 $x20)))
 (let (($x9 (and $x112 $x95)))
 (let (($x123 (= $x9 true)))
 (let (($x93 (= $x123 true)))
 (let (($x5 (= $x93 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x99 (and $x54 $x5)))
 (let (($x75 (=> $x99 $x57)))
 (not $x75))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x39 (bvule input.dst.llvm-%l (_ bv0 32))))
 (let (($x34 (= $x39 true)))
 (let (($x57 (= $x34 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x104 (concat ?x85 (concat ?x49 ?x80)))))
 (let (($x129 (= input.dst.llvm-%l ?x87)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x67)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x78 $x71)))
 (let (($x68 (and $x56 $x84)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x95 (and (and (and $x70 $x38) $x68) $x129)))
 (let (($x55 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x20 (=> $x55 true)))
 (let (($x17 (= $x55 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x6 (= false false)))
 (let (($x100 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x115 (=> $x100 $x6)))
 (let (($x109 (= $x100 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x15 (and $x109 $x115)))
 (let (($x88 (and $x15 $x17)))
 (let (($x112 (and $x88 $x20)))
 (let (($x9 (and $x112 $x95)))
 (let (($x123 (= $x9 true)))
 (let (($x93 (= $x123 true)))
 (let (($x5 (= $x93 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x99 (and $x54 $x5)))
 (let (($x75 (=> $x99 $x57)))
 (not $x75))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x00000001
                     #x00)
              #x00000002
              #x00)
       #x00000003
       #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv134217728 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv67108867 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv67108867 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv131072 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x81 (bvule input.dst.llvm-%l (_ bv0 32))))
 (let (($x97 (= $x81 true)))
 (let (($x11 (= $x97 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x8 (concat ?x66 (concat ?x41 ?x23)))))
 (let (($x46 (= input.dst.llvm-%l ?x74)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x63)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x76 $x134)))
 (let (($x72 (and $x27 $x105)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x119 (and (and (and $x14 $x82) $x72) $x46)))
 (let (($x114 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x16 (=> $x114 false)))
 (let (($x120 (= $x114 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x133 (= false false)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x40 (=> $x65 $x133)))
 (let (($x103 (= $x65 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x110 (and $x103 $x40)))
 (let (($x113 (and $x110 $x120)))
 (let (($x130 (and $x113 $x16)))
 (let (($x92 (and $x130 $x119)))
 (let (($x131 (= $x92 true)))
 (let (($x64 (= $x131 true)))
 (let (($x116 (= $x64 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x89 (and $x54 $x116)))
 (let (($x106 (=> $x89 $x11)))
 (not $x106))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x81 (bvule input.dst.llvm-%l (_ bv0 32))))
 (let (($x97 (= $x81 true)))
 (let (($x11 (= $x97 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x8 (concat ?x66 (concat ?x41 ?x23)))))
 (let (($x46 (= input.dst.llvm-%l ?x74)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x63)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x76 $x134)))
 (let (($x72 (and $x27 $x105)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x119 (and (and (and $x14 $x82) $x72) $x46)))
 (let (($x114 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x16 (=> $x114 false)))
 (let (($x120 (= $x114 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x133 (= false false)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x40 (=> $x65 $x133)))
 (let (($x103 (= $x65 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x110 (and $x103 $x40)))
 (let (($x113 (and $x110 $x120)))
 (let (($x130 (and $x113 $x16)))
 (let (($x92 (and $x130 $x119)))
 (let (($x131 (= $x92 true)))
 (let (($x64 (= $x131 true)))
 (let (($x116 (= $x64 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x89 (and $x54 $x116)))
 (let (($x106 (=> $x89 $x11)))
 (not $x106))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x197 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x201))))
 (let ((?x187 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x186 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x208 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) ?x186 false (concat ?x195 (concat ?x192 (concat ?x189 ?x187))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x207)))
 (let (($x153 (= $x208 true)))
 (let (($x154 (= $x153 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x49 (concat ?x129 (concat ?x9 ?x77)))))
 (let (($x95 (= input.dst.llvm-%l ?x128)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x39)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x94 $x75)))
 (let (($x99 (and $x44 $x34)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x107 (and (and (and $x36 $x43) $x99) $x95)))
 (let (($x104 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x67 (=> $x104 true)))
 (let (($x12 (= $x104 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x108 (= false false)))
 (let (($x115 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x115 $x108)))
 (let (($x29 (= $x115 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x88 (and $x29 $x70)))
 (let (($x56 (and $x88 $x12)))
 (let (($x71 (and $x56 $x67)))
 (let (($x91 (and $x71 $x107)))
 (let (($x124 (= $x91 true)))
 (let (($x121 (= $x124 true)))
 (let (($x90 (= $x121 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x28 (and $x54 $x90)))
 (let (($x155 (=> $x28 $x154)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x197 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x201))))
 (let ((?x187 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x186 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x208 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) ?x186 false (concat ?x195 (concat ?x192 (concat ?x189 ?x187))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x207)))
 (let (($x153 (= $x208 true)))
 (let (($x154 (= $x153 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x49 (concat ?x129 (concat ?x9 ?x77)))))
 (let (($x95 (= input.dst.llvm-%l ?x128)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x39)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x94 $x75)))
 (let (($x99 (and $x44 $x34)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x107 (and (and (and $x36 $x43) $x99) $x95)))
 (let (($x104 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x67 (=> $x104 true)))
 (let (($x12 (= $x104 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x108 (= false false)))
 (let (($x115 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x115 $x108)))
 (let (($x29 (= $x115 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x88 (and $x29 $x70)))
 (let (($x56 (and $x88 $x12)))
 (let (($x71 (and $x56 $x67)))
 (let (($x91 (and $x71 $x107)))
 (let (($x124 (= $x91 true)))
 (let (($x121 (= $x124 true)))
 (let (($x90 (= $x121 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x28 (and $x54 $x90)))
 (let (($x155 (=> $x28 $x154)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_29)
(= input.dst.llvm-mem @fun_26)
(function @fun_29
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_29 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_5730 (_ BitVec 32)) (BOUND_VARIABLE_5731 (_ BitVec 32)) (BOUND_VARIABLE_5732 (_ BitVec 32)) (BOUND_VARIABLE_5733 Bool) (BOUND_VARIABLE_5734 (_ BitVec 32)) (BOUND_VARIABLE_5735 (_ BitVec 32)) (BOUND_VARIABLE_5736 (_ BitVec 32)) (BOUND_VARIABLE_5737 (_ BitVec 32)) (BOUND_VARIABLE_5738 (_ BitVec 32)) (BOUND_VARIABLE_5739 (_ BitVec 32)) (BOUND_VARIABLE_5740 Bool) (BOUND_VARIABLE_5741 (_ BitVec 32)) (BOUND_VARIABLE_5742 (_ BitVec 32)) (BOUND_VARIABLE_5743 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x44200007)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x44200007)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x44200007)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x30 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x19))))
 (let ((?x23 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x48 (concat ?x112 (concat ?x6 (concat ?x35 ?x23)))))
 (let (($x276 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv0 32) ?x48 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x144 ?x143 false)))
 (let (($x204 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x249 (=> $x204 $x276)))
 (let (($x223 (= $x204 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x197 (= false false)))
 (let (($x187 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x205 (=> $x187 $x197)))
 (let (($x216 (= $x187 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x217 (and $x216 $x205)))
 (let (($x224 (and $x217 $x223)))
 (let (($x250 (and $x224 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x264 (= $x251 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x106 (concat ?x66 (concat ?x105 ?x37)))))
 (let (($x152 (= input.dst.llvm-%l ?x149)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x46)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x89 $x11)))
 (let (($x116 (and $x92 $x111)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x136 (and (and (and $x131 $x127) $x116) $x152)))
 (let (($x146 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l ?x48 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x144 ?x143 false)))
 (let (($x72 (=> $x204 $x146)))
 (let (($x208 (= $x204 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x110 (= $x187 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x206 (and $x110 $x205)))
 (let (($x153 (and $x206 $x208)))
 (let (($x25 (and $x153 $x72)))
 (let (($x137 (and $x25 $x136)))
 (let (($x53 (= $x137 true)))
 (let (($x62 (= $x53 true)))
 (let (($x122 (= $x62 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x135 (and $x51 $x122)))
 (let (($x272 (=> $x135 $x264)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x30 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x19))))
 (let ((?x23 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x48 (concat ?x112 (concat ?x6 (concat ?x35 ?x23)))))
 (let (($x276 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv0 32) ?x48 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x144 ?x143 false)))
 (let (($x204 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x249 (=> $x204 $x276)))
 (let (($x223 (= $x204 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x197 (= false false)))
 (let (($x187 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x205 (=> $x187 $x197)))
 (let (($x216 (= $x187 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x217 (and $x216 $x205)))
 (let (($x224 (and $x217 $x223)))
 (let (($x250 (and $x224 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x264 (= $x251 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x106 (concat ?x66 (concat ?x105 ?x37)))))
 (let (($x152 (= input.dst.llvm-%l ?x149)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x46)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x89 $x11)))
 (let (($x116 (and $x92 $x111)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x136 (and (and (and $x131 $x127) $x116) $x152)))
 (let (($x146 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l ?x48 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x144 ?x143 false)))
 (let (($x72 (=> $x204 $x146)))
 (let (($x208 (= $x204 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x110 (= $x187 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x206 (and $x110 $x205)))
 (let (($x153 (and $x206 $x208)))
 (let (($x25 (and $x153 $x72)))
 (let (($x137 (and $x25 $x136)))
 (let (($x53 (= $x137 true)))
 (let (($x62 (= $x53 true)))
 (let (($x122 (= $x62 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x135 (and $x51 $x122)))
 (let (($x272 (=> $x135 $x264)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_31)
(= input.dst.llvm-mem @fun_27)
(function @fun_31
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (default true))
(function @fun_27
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_27 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_1 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_2 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_3 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_4 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_5 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_6 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_7 Bool) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_8 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_9 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_10 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_11 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_12 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_13 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_14 Bool)) Bool (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_1 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_2 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_3 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_4 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_5 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_6 (_ bv0 32)) (ite (not _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_7) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_8 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_9 (_ bv2147483648 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_10 (_ bv2147483648 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_11 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_12 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_13 (_ bv0 32)) (not _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_14) false) false) false) false) false) false) false) false) false) false) false) false) false))
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv3 32) (_ bv128 8)))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000001f8)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x000001ff)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000001fb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000001f8)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x000001ff)
              (= x!8 #x80808080)
              (= x!9 #x80808080)
              (= x!10 #x000001ff)
              (= x!11 #x80808080)
              (= x!12 #x00000001)
              (= x!13 false))
      true
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x300 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem ?x300))))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv2 32))) ?x304))))
 (let ((?x290 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x292 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x289 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x280)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x283)))
 (let (($x311 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x286 ?x289 false (concat ?x298 (concat ?x295 (concat ?x292 ?x290))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x310)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x163))))
 (let (($x176 (= input.spec-%var-l-1.2.0 ?x170)))
 (let (($x234 (and $x176 $x311)))
 (let (($x62 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x230 (=> $x62 $x234)))
 (let (($x191 (= $x62 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x105 (= false false)))
 (let (($x78 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x37 (=> $x78 $x105)))
 (let (($x124 (= $x78 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x101 (and $x124 $x37)))
 (let (($x192 (and $x101 $x191)))
 (let (($x231 (and $x192 $x230)))
 (let (($x227 (= $x231 true)))
 (let (($x228 (= $x227 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x75 (concat ?x154 (concat ?x85 ?x5)))))
 (let (($x180 (= input.dst.llvm-%l ?x39)))
 (let ((?x273 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x273)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (and $x250 $x264)))
 (let (($x32 (and $x272 $x54)))
 (let (($x276 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x84 (and (and (and $x222 $x276) $x32) $x180)))
 (let (($x214 (=> $x62 true)))
 (let (($x135 (= $x62 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x134 (= $x78 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x63 (and $x134 $x37)))
 (let (($x213 (and $x63 $x135)))
 (let (($x215 (and $x213 $x214)))
 (let (($x103 (and $x215 $x84)))
 (let (($x94 (= $x103 true)))
 (let (($x184 (= $x94 true)))
 (let (($x115 (= $x184 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x102 (and $x51 $x115)))
 (let (($x265 (=> $x102 $x228)))
 (not $x265)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x300 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem ?x300))))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv2 32))) ?x304))))
 (let ((?x290 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x292 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x289 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x280)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x283)))
 (let (($x311 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x286 ?x289 false (concat ?x298 (concat ?x295 (concat ?x292 ?x290))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x310)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x163))))
 (let (($x176 (= input.spec-%var-l-1.2.0 ?x170)))
 (let (($x234 (and $x176 $x311)))
 (let (($x62 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x230 (=> $x62 $x234)))
 (let (($x191 (= $x62 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x105 (= false false)))
 (let (($x78 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x37 (=> $x78 $x105)))
 (let (($x124 (= $x78 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x101 (and $x124 $x37)))
 (let (($x192 (and $x101 $x191)))
 (let (($x231 (and $x192 $x230)))
 (let (($x227 (= $x231 true)))
 (let (($x228 (= $x227 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x39 (concat ?x75 (concat ?x154 (concat ?x85 ?x5)))))
 (let (($x180 (= input.dst.llvm-%l ?x39)))
 (let ((?x273 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x273)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (and $x250 $x264)))
 (let (($x32 (and $x272 $x54)))
 (let (($x276 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x84 (and (and (and $x222 $x276) $x32) $x180)))
 (let (($x214 (=> $x62 true)))
 (let (($x135 (= $x62 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x134 (= $x78 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x63 (and $x134 $x37)))
 (let (($x213 (and $x63 $x135)))
 (let (($x215 (and $x213 $x214)))
 (let (($x103 (and $x215 $x84)))
 (let (($x94 (= $x103 true)))
 (let (($x184 (= $x94 true)))
 (let (($x115 (= $x184 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x102 (and $x51 $x115)))
 (let (($x265 (=> $x102 $x228)))
 (not $x265)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_46)
(= input.dst.llvm-mem @fun_43)
(function @fun_46
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (default true))
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x10)
                     #x00000003
                     #x00)
              #x00000002
              #x00)
       #x00000001
       #x00))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000010)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_3373 (_ BitVec 32)) (BOUND_VARIABLE_3374 (_ BitVec 32)) (BOUND_VARIABLE_3375 (_ BitVec 32)) (BOUND_VARIABLE_3376 Bool) (BOUND_VARIABLE_3377 (_ BitVec 32)) (BOUND_VARIABLE_3378 (_ BitVec 32)) (BOUND_VARIABLE_3379 (_ BitVec 32)) (BOUND_VARIABLE_3380 (_ BitVec 32)) (BOUND_VARIABLE_3381 (_ BitVec 32)) (BOUND_VARIABLE_3382 (_ BitVec 32)) (BOUND_VARIABLE_3383 Bool) (BOUND_VARIABLE_3384 (_ BitVec 32)) (BOUND_VARIABLE_3385 (_ BitVec 32)) (BOUND_VARIABLE_3386 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv255 8)) (_ bv3 32) (_ bv255 8)) (_ bv2 32) (_ bv255 8)) (_ bv0 32) (_ bv255 8)) (_ bv10 32) (_ bv1 8)))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv16777216 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv65536 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem ?x139))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv2 32))) ?x18))))
 (let ((?x15 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x69 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x86 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x69 false (concat ?x81 (concat ?x24 (concat ?x148 ?x15))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x145)))
 (let (($x253 (= $x86 true)))
 (let (($x189 (= $x253 true)))
 (let ((?x299 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x306 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x304 (concat ?x301 (concat ?x306 (concat ?x308 ?x299)))))
 (let (($x307 (= input.dst.llvm-%l ?x304)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x290 (= (_ bv0 32) ?x292)))
 (let ((?x294 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x295 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x294)))
 (let (($x298 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (and $x298 $x295)))
 (let (($x293 (and $x291 $x290)))
 (let (($x289 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x234 (and (and (and $x286 $x289) $x293) $x307)))
 (let (($x285 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x279 (=> $x285 true)))
 (let (($x282 (= $x285 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x176 (= false false)))
 (let (($x165 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x261 (=> $x165 $x176)))
 (let (($x170 (= $x165 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x263 (and $x170 $x261)))
 (let (($x278 (and $x263 $x282)))
 (let (($x255 (and $x278 $x279)))
 (let (($x230 (and $x255 $x234)))
 (let (($x231 (= $x230 true)))
 (let (($x227 (= $x231 true)))
 (let (($x228 (= $x227 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x265 (and $x51 $x228)))
 (let (($x187 (=> $x265 $x189)))
 (not $x187))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x139 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem ?x139))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv2 32))) ?x18))))
 (let ((?x15 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x69 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x86 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x69 false (concat ?x81 (concat ?x24 (concat ?x148 ?x15))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x145)))
 (let (($x253 (= $x86 true)))
 (let (($x189 (= $x253 true)))
 (let ((?x299 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x306 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x304 (concat ?x301 (concat ?x306 (concat ?x308 ?x299)))))
 (let (($x307 (= input.dst.llvm-%l ?x304)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x290 (= (_ bv0 32) ?x292)))
 (let ((?x294 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x295 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x294)))
 (let (($x298 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (and $x298 $x295)))
 (let (($x293 (and $x291 $x290)))
 (let (($x289 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x234 (and (and (and $x286 $x289) $x293) $x307)))
 (let (($x285 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x279 (=> $x285 true)))
 (let (($x282 (= $x285 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x176 (= false false)))
 (let (($x165 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x261 (=> $x165 $x176)))
 (let (($x170 (= $x165 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x263 (and $x170 $x261)))
 (let (($x278 (and $x263 $x282)))
 (let (($x255 (and $x278 $x279)))
 (let (($x230 (and $x255 $x234)))
 (let (($x231 (= $x230 true)))
 (let (($x227 (= $x231 true)))
 (let (($x228 (= $x227 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x265 (and $x51 $x228)))
 (let (($x187 (=> $x265 $x189)))
 (not $x187))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_29)
(= input.dst.llvm-mem @fun_26)
(function @fun_29
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_29 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_5764 (_ BitVec 32)) (BOUND_VARIABLE_5765 (_ BitVec 32)) (BOUND_VARIABLE_5766 (_ BitVec 32)) (BOUND_VARIABLE_5767 Bool) (BOUND_VARIABLE_5768 (_ BitVec 32)) (BOUND_VARIABLE_5769 (_ BitVec 32)) (BOUND_VARIABLE_5770 (_ BitVec 32)) (BOUND_VARIABLE_5771 (_ BitVec 32)) (BOUND_VARIABLE_5772 (_ BitVec 32)) (BOUND_VARIABLE_5773 (_ BitVec 32)) (BOUND_VARIABLE_5774 Bool) (BOUND_VARIABLE_5775 (_ BitVec 32)) (BOUND_VARIABLE_5776 (_ BitVec 32)) (BOUND_VARIABLE_5777 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x44200007)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x44200007)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x44200007)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x26 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x258 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x207))))
 (let ((?x5 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x172 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x52 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x277 (concat ?x167 (concat ?x172 ?x5))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x6 ?x26 false)))
 (let (($x146 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x32 (=> $x146 $x52)))
 (let (($x86 (= $x146 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x139 (= false false)))
 (let (($x15 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x72 (=> $x15 $x139)))
 (let (($x63 (= $x15 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x144 (and $x63 $x72)))
 (let (($x253 (and $x144 $x86)))
 (let (($x29 (and $x253 $x32)))
 (let (($x19 (= $x29 true)))
 (let (($x59 (= $x19 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x177 (concat ?x124 (concat ?x154 (concat ?x54 ?x96)))))
 (let (($x168 (= input.dst.llvm-%l ?x177)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x180)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x102 $x77)))
 (let (($x115 (and $x103 $x88)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x204 (and (and (and $x94 $x160) $x115) $x168)))
 (let (($x197 (and $x29 $x204)))
 (let (($x196 (= $x197 true)))
 (let (($x58 (= $x196 true)))
 (let (($x203 (= $x58 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x205 (and $x51 $x203)))
 (let (($x151 (=> $x205 $x59)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x26 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x258 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x207))))
 (let ((?x5 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x172 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x52 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x277 (concat ?x167 (concat ?x172 ?x5))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x6 ?x26 false)))
 (let (($x146 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x32 (=> $x146 $x52)))
 (let (($x86 (= $x146 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x139 (= false false)))
 (let (($x15 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x72 (=> $x15 $x139)))
 (let (($x63 (= $x15 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x144 (and $x63 $x72)))
 (let (($x253 (and $x144 $x86)))
 (let (($x29 (and $x253 $x32)))
 (let (($x19 (= $x29 true)))
 (let (($x59 (= $x19 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x177 (concat ?x124 (concat ?x154 (concat ?x54 ?x96)))))
 (let (($x168 (= input.dst.llvm-%l ?x177)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x180)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x77 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x102 $x77)))
 (let (($x115 (and $x103 $x88)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x204 (and (and (and $x94 $x160) $x115) $x168)))
 (let (($x197 (and $x29 $x204)))
 (let (($x196 (= $x197 true)))
 (let (($x58 (= $x196 true)))
 (let (($x203 (= $x58 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x205 (and $x51 $x203)))
 (let (($x151 (=> $x205 $x59)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x305 (= false true)))
 (let (($x306 (= $x305 true)))
 (let ((?x310 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x297 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x303 (concat ?x297 (concat ?x281 (concat ?x286 ?x310)))))
 (let (($x301 (= input.dst.llvm-%l ?x303)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x261)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x176 $x189)))
 (let (($x294 (and $x187 $x224)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x291 (and (and (and $x165 $x169) $x294) $x301)))
 (let (($x58 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x59 (=> $x58 true)))
 (let (($x205 (= $x58 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x54 (= false false)))
 (let (($x192 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x96 (=> $x192 $x54)))
 (let (($x264 (= $x192 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x273 (and $x264 $x96)))
 (let (($x19 (and $x273 $x205)))
 (let (($x151 (and $x19 $x59)))
 (let (($x292 (and $x151 $x291)))
 (let (($x295 (= $x292 true)))
 (let (($x290 (= $x295 true)))
 (let (($x134 (= $x290 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x216 (and $x51 $x134)))
 (let (($x300 (=> $x216 $x306)))
 (not $x300)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x305 (= false true)))
 (let (($x306 (= $x305 true)))
 (let ((?x310 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x297 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x303 (concat ?x297 (concat ?x281 (concat ?x286 ?x310)))))
 (let (($x301 (= input.dst.llvm-%l ?x303)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x261)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x176 $x189)))
 (let (($x294 (and $x187 $x224)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x291 (and (and (and $x165 $x169) $x294) $x301)))
 (let (($x58 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x59 (=> $x58 true)))
 (let (($x205 (= $x58 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x54 (= false false)))
 (let (($x192 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x96 (=> $x192 $x54)))
 (let (($x264 (= $x192 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x273 (and $x264 $x96)))
 (let (($x19 (and $x273 $x205)))
 (let (($x151 (and $x19 $x59)))
 (let (($x292 (and $x151 $x291)))
 (let (($x295 (= $x292 true)))
 (let (($x290 (= $x295 true)))
 (let (($x134 (= $x290 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x216 (and $x51 $x134)))
 (let (($x300 (=> $x216 $x306)))
 (not $x300)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x168 (= false true)))
 (let (($x204 (= $x168 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x284 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x153 (concat ?x284 (concat ?x32 ?x77)))))
 (let (($x29 (= input.dst.llvm-%l ?x26)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x39)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x95 $x188)))
 (let (($x195 (and $x94 $x101)))
 (let (($x272 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x103 (and (and (and $x119 $x272) $x195) $x29)))
 (let (($x275 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x106 (=> $x275 false)))
 (let (($x172 (= $x275 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x17 (= false false)))
 (let (($x158 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x253 (=> $x158 $x17)))
 (let (($x184 (= $x158 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x71 (and $x184 $x253)))
 (let (($x5 (and $x71 $x172)))
 (let (($x174 (and $x5 $x106)))
 (let (($x180 (and $x174 $x103)))
 (let (($x88 (= $x180 true)))
 (let (($x115 (= $x88 true)))
 (let (($x191 (= $x115 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x177 (and $x51 $x191)))
 (let (($x197 (=> $x177 $x204)))
 (not $x197)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x168 (= false true)))
 (let (($x204 (= $x168 true)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x284 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x153 (concat ?x284 (concat ?x32 ?x77)))))
 (let (($x29 (= input.dst.llvm-%l ?x26)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x39)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x95 $x188)))
 (let (($x195 (and $x94 $x101)))
 (let (($x272 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x103 (and (and (and $x119 $x272) $x195) $x29)))
 (let (($x275 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x106 (=> $x275 false)))
 (let (($x172 (= $x275 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x17 (= false false)))
 (let (($x158 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x253 (=> $x158 $x17)))
 (let (($x184 (= $x158 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x71 (and $x184 $x253)))
 (let (($x5 (and $x71 $x172)))
 (let (($x174 (and $x5 $x106)))
 (let (($x180 (and $x174 $x103)))
 (let (($x88 (= $x180 true)))
 (let (($x115 (= $x88 true)))
 (let (($x191 (= $x115 true)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x177 (and $x51 $x191)))
 (let (($x197 (=> $x177 $x204)))
 (not $x197)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x304 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x307 (not $x304)))
 (let (($x67 (= $x307 false)))
 (let (($x126 (= $x67 true)))
 (let ((?x90 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x194 (= (_ bv0 3) ?x90)))
 (let (($x56 (= $x194 true)))
 (let (($x129 (= $x56 true)))
 (let (($x294 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x189 (=> $x294 true)))
 (let (($x36 (= $x294 (bvuge (ite $x304 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x165 (= false false)))
 (let (($x85 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x19 (=> $x85 $x165)))
 (let (($x179 (= $x85 (= (ite $x304 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x186 (and $x179 $x19)))
 (let (($x7 (and $x186 $x36)))
 (let (($x61 (and $x7 $x189)))
 (let (($x12 (= $x61 true)))
 (let (($x99 (= $x12 true)))
 (let (($x132 (= $x99 true)))
 (let (($x215 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x223 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x75 (=> $x223 (or false (or false (and true (or $x122 $x215)))))))
 (let (($x18 (=> (and $x307 $x223) (or false (or false (and true (or $x122 $x215)))))))
 (let (($x182 (= $x18 true)))
 (let (($x296 (= $x182 true)))
 (let (($x37 (= $x296 true)))
 (let ((?x299 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x166 (bvugt ?x299 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x299 (_ bv3 32)))))
 (let (($x11 (=> (bvule ?x299 (bvsub (bvadd ?x299 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x166)))))))
 (let (($x309 (=> (and $x307 (bvule ?x299 (bvsub (bvadd ?x299 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x208 $x166)))))))
 (let (($x308 (= $x309 true)))
 (let (($x74 (= $x308 true)))
 (let (($x118 (= $x74 true)))
 (let (($x35 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x147 (= $x35 true)))
 (let (($x89 (= $x147 true)))
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x23 (= $x20 true)))
 (let (($x30 (= $x23 true)))
 (let ((?x289 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x289)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x124 $x146)))
 (let (($x84 (and $x139 $x145)))
 (let (($x290 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x290 $x84)))
 (let (($x277 (= $x170 true)))
 (let (($x258 (= $x277 true)))
 (let (($x185 (= $x258 true)))
 (let (($x15 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x295 (=> $x15 true)))
 (let ((?x169 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x311 (bvuge ?x169 (_ bv1 32))))
 (let (($x127 (= $x15 $x311)))
 (let (($x228 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x305 (=> $x228 $x165)))
 (let (($x293 (= ?x169 (_ bv0 32))))
 (let (($x148 (= $x228 $x293)))
 (let (($x306 (and $x148 $x305)))
 (let (($x292 (and $x306 $x127)))
 (let (($x303 (and $x292 $x295)))
 (let (($x301 (= $x303 true)))
 (let (($x310 (= $x301 true)))
 (let (($x278 (= $x310 true)))
 (let (($x187 (= $x294 $x311)))
 (let (($x162 (= $x85 $x293)))
 (let (($x59 (and $x162 $x19)))
 (let (($x261 (and $x59 $x187)))
 (let (($x224 (and $x261 $x189)))
 (let (($x63 (= $x224 true)))
 (let (($x155 (= $x63 true)))
 (let (($x279 (= $x155 true)))
 (let (($x286 (and $x279 $x278)))
 (let (($x112 (and $x286 $x185)))
 (let (($x48 (and $x112 $x30)))
 (let (($x230 (and $x48 $x89)))
 (let (($x131 (and $x230 $x118)))
 (let (($x66 (and $x131 $x37)))
 (let (($x108 (and $x66 $x132)))
 (let (($x9 (and $x108 $x129)))
 (let (($x205 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x79 (and $x205 $x9)))
 (let (($x120 (=> $x79 $x126)))
 (not $x120)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x304 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x307 (not $x304)))
 (let (($x67 (= $x307 false)))
 (let (($x126 (= $x67 true)))
 (let ((?x90 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x194 (= (_ bv0 3) ?x90)))
 (let (($x56 (= $x194 true)))
 (let (($x129 (= $x56 true)))
 (let (($x294 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x189 (=> $x294 true)))
 (let (($x36 (= $x294 (bvuge (ite $x304 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x165 (= false false)))
 (let (($x85 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x19 (=> $x85 $x165)))
 (let (($x179 (= $x85 (= (ite $x304 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x186 (and $x179 $x19)))
 (let (($x7 (and $x186 $x36)))
 (let (($x61 (and $x7 $x189)))
 (let (($x12 (= $x61 true)))
 (let (($x99 (= $x12 true)))
 (let (($x132 (= $x99 true)))
 (let (($x215 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x223 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x75 (=> $x223 (or false (or false (and true (or $x122 $x215)))))))
 (let (($x18 (=> (and $x307 $x223) (or false (or false (and true (or $x122 $x215)))))))
 (let (($x182 (= $x18 true)))
 (let (($x296 (= $x182 true)))
 (let (($x37 (= $x296 true)))
 (let ((?x299 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x166 (bvugt ?x299 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x299 (_ bv3 32)))))
 (let (($x11 (=> (bvule ?x299 (bvsub (bvadd ?x299 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x166)))))))
 (let (($x309 (=> (and $x307 (bvule ?x299 (bvsub (bvadd ?x299 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x208 $x166)))))))
 (let (($x308 (= $x309 true)))
 (let (($x74 (= $x308 true)))
 (let (($x118 (= $x74 true)))
 (let (($x35 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x147 (= $x35 true)))
 (let (($x89 (= $x147 true)))
 (let (($x20 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x23 (= $x20 true)))
 (let (($x30 (= $x23 true)))
 (let ((?x289 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x289)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x144)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x124 $x146)))
 (let (($x84 (and $x139 $x145)))
 (let (($x290 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x290 $x84)))
 (let (($x277 (= $x170 true)))
 (let (($x258 (= $x277 true)))
 (let (($x185 (= $x258 true)))
 (let (($x15 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x295 (=> $x15 true)))
 (let ((?x169 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x311 (bvuge ?x169 (_ bv1 32))))
 (let (($x127 (= $x15 $x311)))
 (let (($x228 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x305 (=> $x228 $x165)))
 (let (($x293 (= ?x169 (_ bv0 32))))
 (let (($x148 (= $x228 $x293)))
 (let (($x306 (and $x148 $x305)))
 (let (($x292 (and $x306 $x127)))
 (let (($x303 (and $x292 $x295)))
 (let (($x301 (= $x303 true)))
 (let (($x310 (= $x301 true)))
 (let (($x278 (= $x310 true)))
 (let (($x187 (= $x294 $x311)))
 (let (($x162 (= $x85 $x293)))
 (let (($x59 (and $x162 $x19)))
 (let (($x261 (and $x59 $x187)))
 (let (($x224 (and $x261 $x189)))
 (let (($x63 (= $x224 true)))
 (let (($x155 (= $x63 true)))
 (let (($x279 (= $x155 true)))
 (let (($x286 (and $x279 $x278)))
 (let (($x112 (and $x286 $x185)))
 (let (($x48 (and $x112 $x30)))
 (let (($x230 (and $x48 $x89)))
 (let (($x131 (and $x230 $x118)))
 (let (($x66 (and $x131 $x37)))
 (let (($x108 (and $x66 $x132)))
 (let (($x9 (and $x108 $x129)))
 (let (($x205 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x79 (and $x205 $x9)))
 (let (($x120 (=> $x79 $x126)))
 (not $x120)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b11010000000000011111100000001000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000001111111010000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000001111111010000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000001111111010000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv6391248 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv12072427 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv12072424 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv12072424 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08d49378)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08d4937b)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x0b67d4b0)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08d49378)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x160 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x272 (not $x160)))
 (let (($x28 (= $x272 false)))
 (let (($x42 (= $x28 true)))
 (let ((?x25 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x92 (= (_ bv0 3) ?x25)))
 (let (($x43 (= $x92 true)))
 (let (($x87 (= $x43 true)))
 (let (($x131 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x91 (=> $x131 false)))
 (let (($x38 (= $x131 (bvuge (ite $x160 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x81 (= false false)))
 (let (($x234 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x150 (=> $x234 $x81)))
 (let (($x136 (= $x234 (= (ite $x160 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x116 (and $x136 $x150)))
 (let (($x190 (and $x116 $x38)))
 (let (($x251 (and $x190 $x91)))
 (let (($x276 (= $x251 true)))
 (let (($x109 (= $x276 true)))
 (let (($x105 (= $x109 true)))
 (let (($x191 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x168 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x204 (=> $x168 (or false (or false (and true (or $x52 $x191)))))))
 (let (($x101 (=> (and $x272 $x168) (or false (or false (and true (or $x52 $x191)))))))
 (let (($x264 (= $x101 true)))
 (let (($x177 (= $x264 true)))
 (let (($x197 (= $x177 true)))
 (let ((?x135 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x174 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x135 (_ bv3 32)))))
 (let (($x142 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x206 $x174)))))))
 (let (($x263 (=> (and $x272 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x206 $x174)))))))
 (let (($x83 (= $x263 true)))
 (let (($x94 (= $x83 true)))
 (let (($x39 (= $x94 true)))
 (let (($x151 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x21 (= $x151 true)))
 (let (($x167 (= $x21 true)))
 (let (($x184 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x275 (= $x184 true)))
 (let (($x158 (= $x275 true)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x126)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x129 $x79)))
 (let (($x199 (and $x67 $x120)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x194 $x199)))
 (let (($x283 (= $x281 true)))
 (let (($x86 (= $x283 true)))
 (let (($x71 (= $x86 true)))
 (let (($x186 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (=> $x186 false)))
 (let ((?x227 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x93 (bvuge ?x227 (_ bv1 32))))
 (let (($x128 (= $x186 $x93)))
 (let (($x296 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x66 (=> $x296 $x81)))
 (let (($x208 (= ?x227 (_ bv0 32))))
 (let (($x37 (= $x296 $x208)))
 (let (($x34 (and $x37 $x66)))
 (let (($x36 (and $x34 $x128)))
 (let (($x61 (and $x36 $x7)))
 (let (($x12 (= $x61 true)))
 (let (($x99 (= $x12 true)))
 (let (($x132 (= $x99 true)))
 (let (($x249 (= $x131 $x93)))
 (let (($x166 (= $x234 $x208)))
 (let (($x24 (and $x166 $x150)))
 (let (($x223 (and $x24 $x249)))
 (let (($x122 (and $x223 $x91)))
 (let (($x215 (= $x122 true)))
 (let (($x222 (= $x215 true)))
 (let (($x213 (= $x222 true)))
 (let (($x108 (and $x213 $x132)))
 (let (($x95 (and $x108 $x71)))
 (let (($x17 (and $x95 $x158)))
 (let (($x72 (and $x17 $x167)))
 (let (($x188 (and $x72 $x39)))
 (let (($x192 (and $x188 $x197)))
 (let (($x140 (and $x192 $x105)))
 (let (($x104 (and $x140 $x87)))
 (let (($x205 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x68 (and $x205 $x104)))
 (let (($x107 (=> $x68 $x42)))
 (not $x107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x160 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x272 (not $x160)))
 (let (($x28 (= $x272 false)))
 (let (($x42 (= $x28 true)))
 (let ((?x25 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x92 (= (_ bv0 3) ?x25)))
 (let (($x43 (= $x92 true)))
 (let (($x87 (= $x43 true)))
 (let (($x131 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x91 (=> $x131 false)))
 (let (($x38 (= $x131 (bvuge (ite $x160 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x81 (= false false)))
 (let (($x234 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x150 (=> $x234 $x81)))
 (let (($x136 (= $x234 (= (ite $x160 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x116 (and $x136 $x150)))
 (let (($x190 (and $x116 $x38)))
 (let (($x251 (and $x190 $x91)))
 (let (($x276 (= $x251 true)))
 (let (($x109 (= $x276 true)))
 (let (($x105 (= $x109 true)))
 (let (($x191 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x168 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x204 (=> $x168 (or false (or false (and true (or $x52 $x191)))))))
 (let (($x101 (=> (and $x272 $x168) (or false (or false (and true (or $x52 $x191)))))))
 (let (($x264 (= $x101 true)))
 (let (($x177 (= $x264 true)))
 (let (($x197 (= $x177 true)))
 (let ((?x135 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x174 (bvugt ?x135 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x135 (_ bv3 32)))))
 (let (($x142 (=> (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x206 $x174)))))))
 (let (($x263 (=> (and $x272 (bvule ?x135 (bvsub (bvadd ?x135 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x206 $x174)))))))
 (let (($x83 (= $x263 true)))
 (let (($x94 (= $x83 true)))
 (let (($x39 (= $x94 true)))
 (let (($x151 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x21 (= $x151 true)))
 (let (($x167 (= $x21 true)))
 (let (($x184 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x275 (= $x184 true)))
 (let (($x158 (= $x275 true)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x126)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x129 $x79)))
 (let (($x199 (and $x67 $x120)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x194 $x199)))
 (let (($x283 (= $x281 true)))
 (let (($x86 (= $x283 true)))
 (let (($x71 (= $x86 true)))
 (let (($x186 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (=> $x186 false)))
 (let ((?x227 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x93 (bvuge ?x227 (_ bv1 32))))
 (let (($x128 (= $x186 $x93)))
 (let (($x296 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x66 (=> $x296 $x81)))
 (let (($x208 (= ?x227 (_ bv0 32))))
 (let (($x37 (= $x296 $x208)))
 (let (($x34 (and $x37 $x66)))
 (let (($x36 (and $x34 $x128)))
 (let (($x61 (and $x36 $x7)))
 (let (($x12 (= $x61 true)))
 (let (($x99 (= $x12 true)))
 (let (($x132 (= $x99 true)))
 (let (($x249 (= $x131 $x93)))
 (let (($x166 (= $x234 $x208)))
 (let (($x24 (and $x166 $x150)))
 (let (($x223 (and $x24 $x249)))
 (let (($x122 (and $x223 $x91)))
 (let (($x215 (= $x122 true)))
 (let (($x222 (= $x215 true)))
 (let (($x213 (= $x222 true)))
 (let (($x108 (and $x213 $x132)))
 (let (($x95 (and $x108 $x71)))
 (let (($x17 (and $x95 $x158)))
 (let (($x72 (and $x17 $x167)))
 (let (($x188 (and $x72 $x39)))
 (let (($x192 (and $x188 $x197)))
 (let (($x140 (and $x192 $x105)))
 (let (($x104 (and $x140 $x87)))
 (let (($x205 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x68 (and $x205 $x104)))
 (let (($x107 (=> $x68 $x42)))
 (not $x107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x205 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x92 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x103 (or $x92 $x205)))
 (let (($x280 (= $x103 true)))
 (let (($x78 (= $x280 true)))
 (let ((?x134 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x32 (= (_ bv0 3) ?x134)))
 (let (($x207 (= $x32 true)))
 (let (($x29 (= $x207 true)))
 (let (($x68 (=> $x92 true)))
 (let (($x298 (= $x92 (bvuge (ite $x205 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x38 (= false false)))
 (let (($x121 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x190 (=> $x121 $x38)))
 (let (($x154 (= $x121 (= (ite $x205 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x180 (and $x154 $x190)))
 (let (($x54 (and $x180 $x298)))
 (let (($x49 (and $x54 $x68)))
 (let (($x58 (= $x49 true)))
 (let (($x216 (= $x58 true)))
 (let (($x285 (= $x216 true)))
 (let (($x144 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x69 (= $x144 true)))
 (let (($x89 (= $x69 true)))
 (let (($x310 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x255 (= $x310 true)))
 (let (($x282 (= $x255 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x306 (= (_ bv0 32) ?x27)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x261 $x311)))
 (let (($x291 (and $x224 $x306)))
 (let (($x279 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (and $x279 $x291)))
 (let (($x278 (= $x290 true)))
 (let (($x286 (= $x278 true)))
 (let (($x303 (= $x286 true)))
 (let (($x11 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x19 (=> $x11 true)))
 (let ((?x136 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x136 (_ bv1 32))))
 (let (($x262 (= $x11 $x43)))
 (let (($x169 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x294 (=> $x169 $x38)))
 (let (($x116 (= ?x136 (_ bv0 32))))
 (let (($x293 (= $x169 $x116)))
 (let (($x162 (and $x293 $x294)))
 (let (($x47 (and $x162 $x262)))
 (let (($x127 (and $x47 $x19)))
 (let (($x292 (= $x127 true)))
 (let (($x148 (= $x292 true)))
 (let (($x305 (= $x148 true)))
 (let (($x87 (= $x92 $x43)))
 (let (($x70 (= $x121 $x116)))
 (let (($x251 (and $x70 $x190)))
 (let (($x104 (and $x251 $x87)))
 (let (($x28 (and $x104 $x68)))
 (let (($x42 (= $x28 true)))
 (let (($x107 (= $x42 true)))
 (let (($x181 (= $x107 true)))
 (let (($x63 (and $x181 $x305)))
 (let (($x301 (and $x63 $x303)))
 (let (($x124 (and $x301 $x282)))
 (let (($x230 (and $x124 $x89)))
 (let (($x62 (and $x230 $x285)))
 (let (($x77 (and $x62 $x29)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x26 (and $x90 $x77)))
 (let ((?x227 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x36 (bvugt ?x227 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x227 (_ bv3 32)))))
 (let (($x108 (=> (bvule ?x227 (bvsub (bvadd ?x227 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x36)))))))
 (let (($x172 (not $x205)))
 (let (($x296 (=> (and $x172 (bvule ?x227 (bvsub (bvadd ?x227 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x128 $x36)))))))
 (let (($x223 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x213 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x182 (=> $x213 (or false (or false (and true (or $x249 $x223)))))))
 (let (($x187 (=> (and $x172 $x213) (or false (or false (and true (or $x249 $x223)))))))
 (let (($x37 (and $x187 $x296)))
 (let (($x6 (and $x37 $x26)))
 (let (($x250 (=> $x6 $x78)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x205 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x92 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x103 (or $x92 $x205)))
 (let (($x280 (= $x103 true)))
 (let (($x78 (= $x280 true)))
 (let ((?x134 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x32 (= (_ bv0 3) ?x134)))
 (let (($x207 (= $x32 true)))
 (let (($x29 (= $x207 true)))
 (let (($x68 (=> $x92 true)))
 (let (($x298 (= $x92 (bvuge (ite $x205 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x38 (= false false)))
 (let (($x121 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x190 (=> $x121 $x38)))
 (let (($x154 (= $x121 (= (ite $x205 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x180 (and $x154 $x190)))
 (let (($x54 (and $x180 $x298)))
 (let (($x49 (and $x54 $x68)))
 (let (($x58 (= $x49 true)))
 (let (($x216 (= $x58 true)))
 (let (($x285 (= $x216 true)))
 (let (($x144 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x69 (= $x144 true)))
 (let (($x89 (= $x69 true)))
 (let (($x310 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x255 (= $x310 true)))
 (let (($x282 (= $x255 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x306 (= (_ bv0 32) ?x27)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x261 $x311)))
 (let (($x291 (and $x224 $x306)))
 (let (($x279 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (and $x279 $x291)))
 (let (($x278 (= $x290 true)))
 (let (($x286 (= $x278 true)))
 (let (($x303 (= $x286 true)))
 (let (($x11 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x19 (=> $x11 true)))
 (let ((?x136 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x136 (_ bv1 32))))
 (let (($x262 (= $x11 $x43)))
 (let (($x169 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x294 (=> $x169 $x38)))
 (let (($x116 (= ?x136 (_ bv0 32))))
 (let (($x293 (= $x169 $x116)))
 (let (($x162 (and $x293 $x294)))
 (let (($x47 (and $x162 $x262)))
 (let (($x127 (and $x47 $x19)))
 (let (($x292 (= $x127 true)))
 (let (($x148 (= $x292 true)))
 (let (($x305 (= $x148 true)))
 (let (($x87 (= $x92 $x43)))
 (let (($x70 (= $x121 $x116)))
 (let (($x251 (and $x70 $x190)))
 (let (($x104 (and $x251 $x87)))
 (let (($x28 (and $x104 $x68)))
 (let (($x42 (= $x28 true)))
 (let (($x107 (= $x42 true)))
 (let (($x181 (= $x107 true)))
 (let (($x63 (and $x181 $x305)))
 (let (($x301 (and $x63 $x303)))
 (let (($x124 (and $x301 $x282)))
 (let (($x230 (and $x124 $x89)))
 (let (($x62 (and $x230 $x285)))
 (let (($x77 (and $x62 $x29)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x26 (and $x90 $x77)))
 (let ((?x227 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x36 (bvugt ?x227 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x227 (_ bv3 32)))))
 (let (($x108 (=> (bvule ?x227 (bvsub (bvadd ?x227 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x36)))))))
 (let (($x172 (not $x205)))
 (let (($x296 (=> (and $x172 (bvule ?x227 (bvsub (bvadd ?x227 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x128 $x36)))))))
 (let (($x223 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x213 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x182 (=> $x213 (or false (or false (and true (or $x249 $x223)))))))
 (let (($x187 (=> (and $x172 $x213) (or false (or false (and true (or $x249 $x223)))))))
 (let (($x37 (and $x187 $x296)))
 (let (($x6 (and $x37 $x26)))
 (let (($x250 (=> $x6 $x78)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x208 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x357 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x352))))
 (let ((?x549 ((_ extract 2 0) ?x357)))
 (let (($x550 (= (_ bv0 3) ?x549)))
 (let (($x551 (= $x550 true)))
 (let ((?x541 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x542 (= (_ bv0 3) ?x541)))
 (let (($x543 (= $x542 true)))
 (let (($x544 (= $x543 true)))
 (let (($x14 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x113 (=> $x14 true)))
 (let ((?x150 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x505 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x511 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x505))))
 (let ((?x513 (ite (= (_ bv0 32) ?x511) (_ bv0 32) (_ bv1 32))))
 (let (($x529 (= $x14 (bvuge ?x513 (_ bv1 32)))))
 (let (($x32 (= false false)))
 (let (($x185 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x30 (=> $x185 $x32)))
 (let (($x499 (= $x185 (= ?x513 (_ bv0 32)))))
 (let (($x500 (and $x499 $x30)))
 (let (($x530 (and $x500 $x529)))
 (let (($x531 (and $x530 $x113)))
 (let ((?x450 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x452 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x455 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x213 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x458 (concat (select input.dst.llvm-mem ?x213) (concat ?x455 (concat ?x452 ?x450)))))
 (let (($x459 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x458)))
 (let (($x533 (and $x459 $x531)))
 (let (($x280 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x534 (=> $x280 $x533)))
 (let (($x205 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x404 (ite $x205 (_ bv0 32) (_ bv1 32))))
 (let (($x413 (= $x280 (bvuge ?x404 (_ bv1 32)))))
 (let (($x216 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x207 (=> $x216 $x32)))
 (let (($x406 (= $x216 (= ?x404 (_ bv0 32)))))
 (let (($x407 (and $x406 $x207)))
 (let (($x414 (and $x407 $x413)))
 (let (($x535 (and $x414 $x534)))
 (let (($x536 (= $x535 true)))
 (let (($x537 (= $x536 true)))
 (let (($x538 (= $x537 true)))
 (let (($x364 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x335 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x339 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x335) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x335))))
 (let (($x340 (and true $x339)))
 (let (($x362 (and $x339 $x340)))
 (let (($x360 (= (bvand ?x357 (_ bv4294967288 32)) ?x357)))
 (let (($x348 (= (bvand ?x208 (_ bv4294967292 32)) ?x208)))
 (let (($x361 (and $x348 $x360)))
 (let (($x345 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x208 (bvsub ?x208 (_ bv4 32))) (bvult ?x208 (bvsub ?x208 (_ bv4 32))))))
 (let (($x369 (and (and (and (and (and $x340 $x345) $x348) $x361) $x362) $x364)))
 (let (($x370 (= true $x369)))
 (let (($x80 (not $x205)))
 (let (($x371 (=> $x80 $x370)))
 (let (($x372 (= $x371 true)))
 (let (($x373 (= $x372 true)))
 (let (($x374 (= $x373 true)))
 (let (($x331 (= $x80 true)))
 (let (($x332 (= $x331 true)))
 (let (($x333 (= $x332 true)))
 (let (($x327 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x328 (= $x327 true)))
 (let (($x329 (= $x328 true)))
 (let (($x322 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x323 (= $x322 true)))
 (let (($x324 (= $x323 true)))
 (let ((?x313 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x314 (= (_ bv0 32) ?x313)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x269)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x235 $x267)))
 (let (($x315 (and $x312 $x314)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (and $x226 $x315)))
 (let (($x317 (= $x316 true)))
 (let (($x318 (= $x317 true)))
 (let (($x319 (= $x318 true)))
 (let (($x274 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x268 (=> $x274 true)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x88 (concat ?x308 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x287 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x137 (ite (= (_ bv0 32) (concat ?x100 (concat ?x287 ?x88))) (_ bv0 32) (_ bv1 32))))
 (let (($x33 (bvuge ?x137 (_ bv1 32))))
 (let (($x256 (= $x274 $x33)))
 (let (($x220 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x209 (=> $x220 $x32)))
 (let (($x16 (= ?x137 (_ bv0 32))))
 (let (($x211 (= $x220 $x16)))
 (let (($x238 (and $x211 $x209)))
 (let (($x271 (and $x238 $x256)))
 (let (($x259 (and $x271 $x268)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x196)))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x176)))
 (let (($x221 (= input.spec-%var-l-1.2.0 ?x64)))
 (let (($x257 (and $x221 $x259)))
 (let (($x239 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x252 (=> $x239 $x257)))
 (let ((?x62 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x62 (_ bv1 32))))
 (let (($x243 (= $x239 $x78)))
 (let (($x171 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x246 (=> $x171 $x32)))
 (let (($x115 (= ?x62 (_ bv0 32))))
 (let (($x175 (= $x171 $x115)))
 (let (($x245 (and $x175 $x246)))
 (let (($x244 (and $x245 $x243)))
 (let (($x270 (and $x244 $x252)))
 (let (($x266 (= $x270 true)))
 (let (($x236 (= $x266 true)))
 (let (($x237 (= $x236 true)))
 (let (($x156 (= $x14 $x33)))
 (let (($x48 (= $x185 $x16)))
 (let (($x139 (and $x48 $x30)))
 (let (($x125 (and $x139 $x156)))
 (let (($x133 (and $x125 $x113)))
 (let (($x52 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x64)))
 (let (($x161 (and $x52 $x133)))
 (let (($x164 (=> $x280 $x161)))
 (let (($x250 (= $x280 $x78)))
 (let (($x134 (= $x216 $x115)))
 (let (($x29 (and $x134 $x207)))
 (let (($x46 (and $x29 $x250)))
 (let (($x141 (and $x46 $x164)))
 (let (($x157 (= $x141 true)))
 (let (($x22 (= $x157 true)))
 (let (($x82 (= $x22 true)))
 (let (($x229 (and $x82 $x237)))
 (let (($x320 (and $x229 $x319)))
 (let (($x325 (and $x320 $x324)))
 (let (($x330 (and $x325 $x329)))
 (let (($x334 (and $x330 $x333)))
 (let (($x375 (and $x334 $x374)))
 (let (($x539 (and $x375 $x538)))
 (let (($x545 (and $x539 $x544)))
 (let (($x546 (and $x280 $x545)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x547 (and $x121 $x546)))
 (let (($x12 (bvugt ?x208 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x208 (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x90 (=> (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x12)))))))
 (let (($x132 (=> (and $x80 (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x61 $x12)))))))
 (let (($x215 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x213)))
 (let (($x34 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x150 (_ bv1 32))) (or false (or false (and true (or $x122 $x215)))))))
 (let (($x166 (=> (and $x80 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x150 (_ bv1 32)))) (or false (or false (and true (or $x122 $x215)))))))
 (let (($x186 (and $x166 $x132)))
 (let (($x548 (and $x186 $x547)))
 (let (($x552 (=> $x548 $x551)))
 (not $x552)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x208 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x357 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x352))))
 (let ((?x549 ((_ extract 2 0) ?x357)))
 (let (($x550 (= (_ bv0 3) ?x549)))
 (let (($x551 (= $x550 true)))
 (let ((?x541 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x542 (= (_ bv0 3) ?x541)))
 (let (($x543 (= $x542 true)))
 (let (($x544 (= $x543 true)))
 (let (($x14 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x113 (=> $x14 true)))
 (let ((?x150 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x505 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x511 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x505))))
 (let ((?x513 (ite (= (_ bv0 32) ?x511) (_ bv0 32) (_ bv1 32))))
 (let (($x529 (= $x14 (bvuge ?x513 (_ bv1 32)))))
 (let (($x32 (= false false)))
 (let (($x185 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x30 (=> $x185 $x32)))
 (let (($x499 (= $x185 (= ?x513 (_ bv0 32)))))
 (let (($x500 (and $x499 $x30)))
 (let (($x530 (and $x500 $x529)))
 (let (($x531 (and $x530 $x113)))
 (let ((?x450 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x452 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x455 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x213 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x458 (concat (select input.dst.llvm-mem ?x213) (concat ?x455 (concat ?x452 ?x450)))))
 (let (($x459 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x458)))
 (let (($x533 (and $x459 $x531)))
 (let (($x280 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x534 (=> $x280 $x533)))
 (let (($x205 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x404 (ite $x205 (_ bv0 32) (_ bv1 32))))
 (let (($x413 (= $x280 (bvuge ?x404 (_ bv1 32)))))
 (let (($x216 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x207 (=> $x216 $x32)))
 (let (($x406 (= $x216 (= ?x404 (_ bv0 32)))))
 (let (($x407 (and $x406 $x207)))
 (let (($x414 (and $x407 $x413)))
 (let (($x535 (and $x414 $x534)))
 (let (($x536 (= $x535 true)))
 (let (($x537 (= $x536 true)))
 (let (($x538 (= $x537 true)))
 (let (($x364 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x335 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x339 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x335) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x335))))
 (let (($x340 (and true $x339)))
 (let (($x362 (and $x339 $x340)))
 (let (($x360 (= (bvand ?x357 (_ bv4294967288 32)) ?x357)))
 (let (($x348 (= (bvand ?x208 (_ bv4294967292 32)) ?x208)))
 (let (($x361 (and $x348 $x360)))
 (let (($x345 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x208 (bvsub ?x208 (_ bv4 32))) (bvult ?x208 (bvsub ?x208 (_ bv4 32))))))
 (let (($x369 (and (and (and (and (and $x340 $x345) $x348) $x361) $x362) $x364)))
 (let (($x370 (= true $x369)))
 (let (($x80 (not $x205)))
 (let (($x371 (=> $x80 $x370)))
 (let (($x372 (= $x371 true)))
 (let (($x373 (= $x372 true)))
 (let (($x374 (= $x373 true)))
 (let (($x331 (= $x80 true)))
 (let (($x332 (= $x331 true)))
 (let (($x333 (= $x332 true)))
 (let (($x327 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x328 (= $x327 true)))
 (let (($x329 (= $x328 true)))
 (let (($x322 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x323 (= $x322 true)))
 (let (($x324 (= $x323 true)))
 (let ((?x313 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x314 (= (_ bv0 32) ?x313)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x269)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x235 $x267)))
 (let (($x315 (and $x312 $x314)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (and $x226 $x315)))
 (let (($x317 (= $x316 true)))
 (let (($x318 (= $x317 true)))
 (let (($x319 (= $x318 true)))
 (let (($x274 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x268 (=> $x274 true)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x88 (concat ?x308 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x287 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x137 (ite (= (_ bv0 32) (concat ?x100 (concat ?x287 ?x88))) (_ bv0 32) (_ bv1 32))))
 (let (($x33 (bvuge ?x137 (_ bv1 32))))
 (let (($x256 (= $x274 $x33)))
 (let (($x220 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x209 (=> $x220 $x32)))
 (let (($x16 (= ?x137 (_ bv0 32))))
 (let (($x211 (= $x220 $x16)))
 (let (($x238 (and $x211 $x209)))
 (let (($x271 (and $x238 $x256)))
 (let (($x259 (and $x271 $x268)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x196)))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x176)))
 (let (($x221 (= input.spec-%var-l-1.2.0 ?x64)))
 (let (($x257 (and $x221 $x259)))
 (let (($x239 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x252 (=> $x239 $x257)))
 (let ((?x62 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x62 (_ bv1 32))))
 (let (($x243 (= $x239 $x78)))
 (let (($x171 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x246 (=> $x171 $x32)))
 (let (($x115 (= ?x62 (_ bv0 32))))
 (let (($x175 (= $x171 $x115)))
 (let (($x245 (and $x175 $x246)))
 (let (($x244 (and $x245 $x243)))
 (let (($x270 (and $x244 $x252)))
 (let (($x266 (= $x270 true)))
 (let (($x236 (= $x266 true)))
 (let (($x237 (= $x236 true)))
 (let (($x156 (= $x14 $x33)))
 (let (($x48 (= $x185 $x16)))
 (let (($x139 (and $x48 $x30)))
 (let (($x125 (and $x139 $x156)))
 (let (($x133 (and $x125 $x113)))
 (let (($x52 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x64)))
 (let (($x161 (and $x52 $x133)))
 (let (($x164 (=> $x280 $x161)))
 (let (($x250 (= $x280 $x78)))
 (let (($x134 (= $x216 $x115)))
 (let (($x29 (and $x134 $x207)))
 (let (($x46 (and $x29 $x250)))
 (let (($x141 (and $x46 $x164)))
 (let (($x157 (= $x141 true)))
 (let (($x22 (= $x157 true)))
 (let (($x82 (= $x22 true)))
 (let (($x229 (and $x82 $x237)))
 (let (($x320 (and $x229 $x319)))
 (let (($x325 (and $x320 $x324)))
 (let (($x330 (and $x325 $x329)))
 (let (($x334 (and $x330 $x333)))
 (let (($x375 (and $x334 $x374)))
 (let (($x539 (and $x375 $x538)))
 (let (($x545 (and $x539 $x544)))
 (let (($x546 (and $x280 $x545)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x547 (and $x121 $x546)))
 (let (($x12 (bvugt ?x208 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x208 (_ bv3 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x90 (=> (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x12)))))))
 (let (($x132 (=> (and $x80 (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x61 $x12)))))))
 (let (($x215 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x213)))
 (let (($x34 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x150 (_ bv1 32))) (or false (or false (and true (or $x122 $x215)))))))
 (let (($x166 (=> (and $x80 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x150 (_ bv1 32)))) (or false (or false (and true (or $x122 $x215)))))))
 (let (($x186 (and $x166 $x132)))
 (let (($x548 (and $x186 $x547)))
 (let (($x552 (=> $x548 $x551)))
 (not $x552)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x420 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x417 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x419 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x222 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x426 (concat (select input.dst.llvm-mem ?x222) (concat ?x419 (concat ?x417 ?x420)))))
 (let ((?x520 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x426)))
 (let (($x518 (= (_ bv0 32) ?x520)))
 (let (($x521 (= $x518 true)))
 (let ((?x516 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x528 (= (_ bv0 3) ?x516)))
 (let (($x517 (= $x528 true)))
 (let (($x525 (= $x517 true)))
 (let (($x491 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x494 (= $x491 true)))
 (let (($x497 (= $x494 true)))
 (let (($x138 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x9 (=> $x138 true)))
 (let ((?x81 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x299))))
 (let ((?x50 (ite (= (_ bv0 32) ?x258) (_ bv0 32) (_ bv1 32))))
 (let (($x484 (= $x138 (bvuge ?x50 (_ bv1 32)))))
 (let (($x211 (= false false)))
 (let (($x502 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x503 (=> $x502 $x211)))
 (let (($x75 (= $x502 (= ?x50 (_ bv0 32)))))
 (let (($x20 (and $x75 $x503)))
 (let (($x485 (and $x20 $x484)))
 (let (($x486 (and $x485 $x9)))
 (let (($x427 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x426)))
 (let (($x487 (and $x427 $x486)))
 (let (($x259 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x495 (=> $x259 $x487)))
 (let (($x205 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x397 (ite $x205 (_ bv0 32) (_ bv1 32))))
 (let (($x399 (= $x259 (bvuge ?x397 (_ bv1 32)))))
 (let (($x244 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x209 (=> $x244 $x211)))
 (let (($x394 (= $x244 (= ?x397 (_ bv0 32)))))
 (let (($x395 (and $x394 $x209)))
 (let (($x386 (and $x395 $x399)))
 (let (($x496 (and $x386 $x495)))
 (let (($x492 (= $x496 true)))
 (let (($x493 (= $x492 true)))
 (let (($x489 (= $x493 true)))
 (let (($x151 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x248 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x248) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x248))))
 (let (($x103 (and true $x6)))
 (let (($x228 (and $x6 $x103)))
 (let ((?x66 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem ?x66))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv2 32))) ?x184))))
 (let (($x120 (= (bvand ?x79 (_ bv4294967288 32)) ?x79)))
 (let (($x71 (= (bvand ?x66 (_ bv4294967292 32)) ?x66)))
 (let (($x276 (and $x71 $x120)))
 (let (($x288 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x66 (bvsub ?x66 (_ bv4 32))) (bvult ?x66 (bvsub ?x66 (_ bv4 32))))))
 (let (($x163 (and (and (and (and (and $x103 $x288) $x71) $x276) $x228) $x151)))
 (let (($x5 (= true $x163)))
 (let (($x80 (not $x205)))
 (let (($x272 (=> $x80 $x5)))
 (let (($x119 (= $x272 true)))
 (let (($x59 (= $x119 true)))
 (let (($x167 (= $x59 true)))
 (let (($x300 (= $x80 true)))
 (let (($x298 (= $x300 true)))
 (let (($x54 (= $x298 true)))
 (let (($x301 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x255 (= $x301 true)))
 (let (($x178 (= $x255 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x180)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x144 $x69)))
 (let (($x310 (and $x74 $x295)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x193 $x310)))
 (let (($x303 (= $x286 true)))
 (let (($x291 (= $x303 true)))
 (let (($x290 (= $x291 true)))
 (let (($x148 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x155 (=> $x148 true)))
 (let ((?x513 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x514 (concat ?x513 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x500 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x530 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x534 (ite (= (_ bv0 32) (concat ?x530 (concat ?x500 ?x514))) (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x534 (_ bv1 32))))
 (let (($x292 (= $x148 $x152)))
 (let (($x261 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x162 (=> $x261 $x211)))
 (let (($x535 (= ?x534 (_ bv0 32))))
 (let (($x169 (= $x261 $x535)))
 (let (($x305 (and $x169 $x162)))
 (let (($x19 (and $x305 $x292)))
 (let (($x189 (and $x19 $x155)))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x345)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x347)))
 (let (($x15 (= input.spec-%var-l-1.2.0 ?x356)))
 (let (($x311 (and $x15 $x189)))
 (let (($x218 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x224 (=> $x218 $x311)))
 (let ((?x221 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x257 (bvuge ?x221 (_ bv1 32))))
 (let (($x91 (= $x218 $x257)))
 (let (($x110 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x247 (=> $x110 $x211)))
 (let (($x212 (= ?x221 (_ bv0 32))))
 (let (($x204 (= $x110 $x212)))
 (let (($x240 (and $x204 $x247)))
 (let (($x262 (and $x240 $x91)))
 (let (($x27 (and $x262 $x224)))
 (let (($x282 (= $x27 true)))
 (let (($x118 (= $x282 true)))
 (let (($x154 (= $x118 true)))
 (let (($x553 (= $x138 $x152)))
 (let (($x507 (= $x502 $x535)))
 (let (($x505 (and $x507 $x503)))
 (let (($x117 (and $x505 $x553)))
 (let (($x11 (and $x117 $x9)))
 (let (($x353 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x356)))
 (let (($x251 (and $x353 $x11)))
 (let (($x92 (=> $x259 $x251)))
 (let (($x252 (= $x259 $x257)))
 (let (($x220 (= $x244 $x212)))
 (let (($x238 (and $x220 $x209)))
 (let (($x270 (and $x238 $x252)))
 (let (($x87 (and $x270 $x92)))
 (let (($x223 (= $x87 true)))
 (let (($x136 (= $x223 true)))
 (let (($x116 (= $x136 true)))
 (let (($x89 (and $x116 $x154)))
 (let (($x306 (and $x89 $x290)))
 (let (($x159 (and $x306 $x178)))
 (let (($x49 (and $x159 $x54)))
 (let (($x195 (and $x49 $x167)))
 (let (($x490 (and $x195 $x489)))
 (let (($x501 (and $x490 $x497)))
 (let (($x526 (and $x501 $x525)))
 (let (($x522 (and $x259 $x526)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x523 (and $x216 $x522)))
 (let (($x296 (bvugt ?x66 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x66 (_ bv3 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x121 (=> (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x296)))))))
 (let (($x44 (=> (and $x80 (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x108 $x296)))))))
 (let (($x187 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x36 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x81 (_ bv1 32))) (or false (or false (and true (or $x182 $x187)))))))
 (let (($x93 (=> (and $x80 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x81 (_ bv1 32)))) (or false (or false (and true (or $x182 $x187)))))))
 (let (($x7 (and $x93 $x44)))
 (let (($x519 (and $x7 $x523)))
 (let (($x524 (=> $x519 $x521)))
 (not $x524)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x420 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x417 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x419 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x222 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x426 (concat (select input.dst.llvm-mem ?x222) (concat ?x419 (concat ?x417 ?x420)))))
 (let ((?x520 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x426)))
 (let (($x518 (= (_ bv0 32) ?x520)))
 (let (($x521 (= $x518 true)))
 (let ((?x516 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x528 (= (_ bv0 3) ?x516)))
 (let (($x517 (= $x528 true)))
 (let (($x525 (= $x517 true)))
 (let (($x491 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x494 (= $x491 true)))
 (let (($x497 (= $x494 true)))
 (let (($x138 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x9 (=> $x138 true)))
 (let ((?x81 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x299))))
 (let ((?x50 (ite (= (_ bv0 32) ?x258) (_ bv0 32) (_ bv1 32))))
 (let (($x484 (= $x138 (bvuge ?x50 (_ bv1 32)))))
 (let (($x211 (= false false)))
 (let (($x502 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x503 (=> $x502 $x211)))
 (let (($x75 (= $x502 (= ?x50 (_ bv0 32)))))
 (let (($x20 (and $x75 $x503)))
 (let (($x485 (and $x20 $x484)))
 (let (($x486 (and $x485 $x9)))
 (let (($x427 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x426)))
 (let (($x487 (and $x427 $x486)))
 (let (($x259 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x495 (=> $x259 $x487)))
 (let (($x205 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x397 (ite $x205 (_ bv0 32) (_ bv1 32))))
 (let (($x399 (= $x259 (bvuge ?x397 (_ bv1 32)))))
 (let (($x244 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x209 (=> $x244 $x211)))
 (let (($x394 (= $x244 (= ?x397 (_ bv0 32)))))
 (let (($x395 (and $x394 $x209)))
 (let (($x386 (and $x395 $x399)))
 (let (($x496 (and $x386 $x495)))
 (let (($x492 (= $x496 true)))
 (let (($x493 (= $x492 true)))
 (let (($x489 (= $x493 true)))
 (let (($x151 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x248 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x248) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x248))))
 (let (($x103 (and true $x6)))
 (let (($x228 (and $x6 $x103)))
 (let ((?x66 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem ?x66))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv2 32))) ?x184))))
 (let (($x120 (= (bvand ?x79 (_ bv4294967288 32)) ?x79)))
 (let (($x71 (= (bvand ?x66 (_ bv4294967292 32)) ?x66)))
 (let (($x276 (and $x71 $x120)))
 (let (($x288 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x66 (bvsub ?x66 (_ bv4 32))) (bvult ?x66 (bvsub ?x66 (_ bv4 32))))))
 (let (($x163 (and (and (and (and (and $x103 $x288) $x71) $x276) $x228) $x151)))
 (let (($x5 (= true $x163)))
 (let (($x80 (not $x205)))
 (let (($x272 (=> $x80 $x5)))
 (let (($x119 (= $x272 true)))
 (let (($x59 (= $x119 true)))
 (let (($x167 (= $x59 true)))
 (let (($x300 (= $x80 true)))
 (let (($x298 (= $x300 true)))
 (let (($x54 (= $x298 true)))
 (let (($x301 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x255 (= $x301 true)))
 (let (($x178 (= $x255 true)))
 (let ((?x180 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x180)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x144 $x69)))
 (let (($x310 (and $x74 $x295)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x193 $x310)))
 (let (($x303 (= $x286 true)))
 (let (($x291 (= $x303 true)))
 (let (($x290 (= $x291 true)))
 (let (($x148 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x155 (=> $x148 true)))
 (let ((?x513 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x514 (concat ?x513 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x500 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x530 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x534 (ite (= (_ bv0 32) (concat ?x530 (concat ?x500 ?x514))) (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x534 (_ bv1 32))))
 (let (($x292 (= $x148 $x152)))
 (let (($x261 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x162 (=> $x261 $x211)))
 (let (($x535 (= ?x534 (_ bv0 32))))
 (let (($x169 (= $x261 $x535)))
 (let (($x305 (and $x169 $x162)))
 (let (($x19 (and $x305 $x292)))
 (let (($x189 (and $x19 $x155)))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x345)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x347)))
 (let (($x15 (= input.spec-%var-l-1.2.0 ?x356)))
 (let (($x311 (and $x15 $x189)))
 (let (($x218 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x224 (=> $x218 $x311)))
 (let ((?x221 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x257 (bvuge ?x221 (_ bv1 32))))
 (let (($x91 (= $x218 $x257)))
 (let (($x110 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x247 (=> $x110 $x211)))
 (let (($x212 (= ?x221 (_ bv0 32))))
 (let (($x204 (= $x110 $x212)))
 (let (($x240 (and $x204 $x247)))
 (let (($x262 (and $x240 $x91)))
 (let (($x27 (and $x262 $x224)))
 (let (($x282 (= $x27 true)))
 (let (($x118 (= $x282 true)))
 (let (($x154 (= $x118 true)))
 (let (($x553 (= $x138 $x152)))
 (let (($x507 (= $x502 $x535)))
 (let (($x505 (and $x507 $x503)))
 (let (($x117 (and $x505 $x553)))
 (let (($x11 (and $x117 $x9)))
 (let (($x353 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x356)))
 (let (($x251 (and $x353 $x11)))
 (let (($x92 (=> $x259 $x251)))
 (let (($x252 (= $x259 $x257)))
 (let (($x220 (= $x244 $x212)))
 (let (($x238 (and $x220 $x209)))
 (let (($x270 (and $x238 $x252)))
 (let (($x87 (and $x270 $x92)))
 (let (($x223 (= $x87 true)))
 (let (($x136 (= $x223 true)))
 (let (($x116 (= $x136 true)))
 (let (($x89 (and $x116 $x154)))
 (let (($x306 (and $x89 $x290)))
 (let (($x159 (and $x306 $x178)))
 (let (($x49 (and $x159 $x54)))
 (let (($x195 (and $x49 $x167)))
 (let (($x490 (and $x195 $x489)))
 (let (($x501 (and $x490 $x497)))
 (let (($x526 (and $x501 $x525)))
 (let (($x522 (and $x259 $x526)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x523 (and $x216 $x522)))
 (let (($x296 (bvugt ?x66 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x66 (_ bv3 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x121 (=> (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x296)))))))
 (let (($x44 (=> (and $x80 (bvule ?x66 (bvsub (bvadd ?x66 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x108 $x296)))))))
 (let (($x187 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x36 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x81 (_ bv1 32))) (or false (or false (and true (or $x182 $x187)))))))
 (let (($x93 (=> (and $x80 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x81 (_ bv1 32)))) (or false (or false (and true (or $x182 $x187)))))))
 (let (($x7 (and $x93 $x44)))
 (let (($x519 (and $x7 $x523)))
 (let (($x524 (=> $x519 $x521)))
 (not $x524)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv67163472 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv1 8)) (_ bv67163472 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv188491112 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv188491112 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv188491115 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x7ffffffd)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x04b5f298)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x28))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x28282828)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x28282828)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x379 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x384 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x227 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x254 (concat (select input.dst.llvm-mem ?x227) (concat ?x381 (concat ?x384 ?x379)))))
 (let ((?x198 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x254)))
 (let (($x57 (= (_ bv0 32) ?x198)))
 (let (($x98 (= $x57 true)))
 (let ((?x8 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x201 (= (_ bv0 3) ?x8)))
 (let (($x200 (= $x201 true)))
 (let (($x31 (= $x200 true)))
 (let (($x463 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x472 (= $x463 true)))
 (let (($x307 (= $x472 true)))
 (let (($x38 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x190 (=> $x38 false)))
 (let ((?x182 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x456 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem ?x182))))
 (let ((?x510 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv2 32))) ?x456))))
 (let ((?x537 (ite (= (_ bv0 32) ?x510) (_ bv0 32) (_ bv1 32))))
 (let (($x483 (= $x38 (bvuge ?x537 (_ bv1 32)))))
 (let (($x169 (= false false)))
 (let (($x50 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x258 (=> $x50 $x169)))
 (let (($x457 (= $x50 (= ?x537 (_ bv0 32)))))
 (let (($x506 (and $x457 $x258)))
 (let (($x470 (and $x506 $x483)))
 (let (($x471 (and $x470 $x190)))
 (let (($x260 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x254)))
 (let (($x467 (and $x260 $x471)))
 (let (($x189 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x94 (=> $x189 $x467)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x83 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (= $x189 (bvuge ?x83 (_ bv1 32)))))
 (let (($x262 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x162 (=> $x262 $x169)))
 (let (($x73 (= $x262 (= ?x83 (_ bv0 32)))))
 (let (($x153 (and $x73 $x162)))
 (let (($x165 (and $x153 $x177)))
 (let (($x39 (and $x165 $x94)))
 (let (($x466 (= $x39 true)))
 (let (($x469 (= $x466 true)))
 (let (($x464 (= $x469 true)))
 (let (($x318 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x242 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x271 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x242) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x242))))
 (let (($x268 (and true $x271)))
 (let (($x316 (and $x271 $x268)))
 (let ((?x302 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv1 32))) (select input.dst.llvm-mem ?x302))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv2 32))) ?x329))))
 (let (($x269 (= (bvand ?x226 (_ bv4294967288 32)) ?x226)))
 (let (($x322 (= (bvand ?x302 (_ bv4294967292 32)) ?x302)))
 (let (($x313 (and $x322 $x269)))
 (let (($x324 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x302 (bvsub ?x302 (_ bv4 32))) (bvult ?x302 (bvsub ?x302 (_ bv4 32))))))
 (let (($x335 (and (and (and (and (and $x268 $x324) $x322) $x313) $x316) $x318)))
 (let (($x332 (= true $x335)))
 (let (($x205 (not $x51)))
 (let (($x333 (=> $x205 $x332)))
 (let (($x331 (= $x333 true)))
 (let (($x334 (= $x331 true)))
 (let (($x337 (= $x334 true)))
 (let (($x175 (= $x205 true)))
 (let (($x246 (= $x175 true)))
 (let (($x245 (= $x246 true)))
 (let (($x139 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x156 (= $x139 true)))
 (let (($x217 (= $x156 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x171)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x161 $x164)))
 (let (($x33 (and $x22 $x14)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x133 $x33)))
 (let (($x30 (= $x48 true)))
 (let (($x149 (= $x30 true)))
 (let (($x137 (= $x149 true)))
 (let (($x123 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x273 (=> $x123 false)))
 (let ((?x484 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x485 (concat ?x484 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x487 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x492 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x490 (ite (= (_ bv0 32) (concat ?x492 (concat ?x487 ?x485))) (_ bv0 32) (_ bv1 32))))
 (let (($x285 (bvuge ?x490 (_ bv1 32))))
 (let (($x185 (= $x123 $x285)))
 (let (($x309 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x206 (=> $x309 $x169)))
 (let (($x488 (= ?x490 (_ bv0 32))))
 (let (($x191 (= $x309 $x488)))
 (let (($x53 (and $x191 $x206)))
 (let (($x52 (and $x53 $x185)))
 (let (($x308 (and $x52 $x273)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x160)))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x129)))
 (let (($x202 (= input.spec-%var-l-1.2.0 ?x275)))
 (let (($x179 (and $x202 $x308)))
 (let (($x28 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x88 (=> $x28 $x179)))
 (let ((?x15 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x311 (bvuge ?x15 (_ bv1 32))))
 (let (($x249 (= $x28 $x311)))
 (let (($x354 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x47 (=> $x354 $x169)))
 (let (($x279 (= ?x15 (_ bv0 32))))
 (let (($x350 (= $x354 $x279)))
 (let (($x293 (and $x350 $x47)))
 (let (($x176 (and $x293 $x249)))
 (let (($x297 (and $x176 $x88)))
 (let (($x125 (= $x297 true)))
 (let (($x82 (= $x125 true)))
 (let (($x173 (= $x82 true)))
 (let (($x527 (= $x38 $x285)))
 (let (($x145 (= $x50 $x488)))
 (let (($x45 (and $x145 $x258)))
 (let (($x70 (and $x45 $x527)))
 (let (($x196 (and $x70 $x190)))
 (let (($x184 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x275)))
 (let (($x29 (and $x184 $x196)))
 (let (($x280 (=> $x189 $x29)))
 (let (($x224 (= $x189 $x311)))
 (let (($x261 (= $x262 $x279)))
 (let (($x305 (and $x261 $x162)))
 (let (($x27 (and $x305 $x224)))
 (let (($x250 (and $x27 $x280)))
 (let (($x24 (= $x250 true)))
 (let (($x62 (= $x24 true)))
 (let (($x115 (= $x62 true)))
 (let (($x141 (and $x115 $x173)))
 (let (($x111 (and $x141 $x137)))
 (let (($x214 (and $x111 $x217)))
 (let (($x239 (and $x214 $x245)))
 (let (($x340 (and $x239 $x337)))
 (let (($x465 (and $x340 $x464)))
 (let (($x18 (and $x465 $x307)))
 (let (($x60 (and $x18 $x31)))
 (let (($x130 (and $x189 $x60)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x40 (and $x244 $x130)))
 (let (($x132 (bvugt ?x302 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x302 (_ bv3 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x216 (=> (bvule ?x302 (bvsub (bvadd ?x302 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x132)))))))
 (let (($x192 (=> (and $x205 (bvule ?x302 (bvsub (bvadd ?x302 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x90 $x132)))))))
 (let (($x166 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x12 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x182 (_ bv1 32))) (or false (or false (and true (or $x34 $x166)))))))
 (let (($x81 (=> (and $x205 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x182 (_ bv1 32)))) (or false (or false (and true (or $x34 $x166)))))))
 (let (($x99 (and $x81 $x192)))
 (let (($x10 (and $x99 $x40)))
 (let (($x65 (=> $x10 $x98)))
 (not $x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x379 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x384 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x227 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x254 (concat (select input.dst.llvm-mem ?x227) (concat ?x381 (concat ?x384 ?x379)))))
 (let ((?x198 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x254)))
 (let (($x57 (= (_ bv0 32) ?x198)))
 (let (($x98 (= $x57 true)))
 (let ((?x8 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x201 (= (_ bv0 3) ?x8)))
 (let (($x200 (= $x201 true)))
 (let (($x31 (= $x200 true)))
 (let (($x463 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x472 (= $x463 true)))
 (let (($x307 (= $x472 true)))
 (let (($x38 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x190 (=> $x38 false)))
 (let ((?x182 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x456 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem ?x182))))
 (let ((?x510 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv2 32))) ?x456))))
 (let ((?x537 (ite (= (_ bv0 32) ?x510) (_ bv0 32) (_ bv1 32))))
 (let (($x483 (= $x38 (bvuge ?x537 (_ bv1 32)))))
 (let (($x169 (= false false)))
 (let (($x50 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x258 (=> $x50 $x169)))
 (let (($x457 (= $x50 (= ?x537 (_ bv0 32)))))
 (let (($x506 (and $x457 $x258)))
 (let (($x470 (and $x506 $x483)))
 (let (($x471 (and $x470 $x190)))
 (let (($x260 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x254)))
 (let (($x467 (and $x260 $x471)))
 (let (($x189 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x94 (=> $x189 $x467)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x83 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (= $x189 (bvuge ?x83 (_ bv1 32)))))
 (let (($x262 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x162 (=> $x262 $x169)))
 (let (($x73 (= $x262 (= ?x83 (_ bv0 32)))))
 (let (($x153 (and $x73 $x162)))
 (let (($x165 (and $x153 $x177)))
 (let (($x39 (and $x165 $x94)))
 (let (($x466 (= $x39 true)))
 (let (($x469 (= $x466 true)))
 (let (($x464 (= $x469 true)))
 (let (($x318 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x242 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x271 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x242) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x242))))
 (let (($x268 (and true $x271)))
 (let (($x316 (and $x271 $x268)))
 (let ((?x302 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv1 32))) (select input.dst.llvm-mem ?x302))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv2 32))) ?x329))))
 (let (($x269 (= (bvand ?x226 (_ bv4294967288 32)) ?x226)))
 (let (($x322 (= (bvand ?x302 (_ bv4294967292 32)) ?x302)))
 (let (($x313 (and $x322 $x269)))
 (let (($x324 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x302 (bvsub ?x302 (_ bv4 32))) (bvult ?x302 (bvsub ?x302 (_ bv4 32))))))
 (let (($x335 (and (and (and (and (and $x268 $x324) $x322) $x313) $x316) $x318)))
 (let (($x332 (= true $x335)))
 (let (($x205 (not $x51)))
 (let (($x333 (=> $x205 $x332)))
 (let (($x331 (= $x333 true)))
 (let (($x334 (= $x331 true)))
 (let (($x337 (= $x334 true)))
 (let (($x175 (= $x205 true)))
 (let (($x246 (= $x175 true)))
 (let (($x245 (= $x246 true)))
 (let (($x139 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x156 (= $x139 true)))
 (let (($x217 (= $x156 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x171)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x161 $x164)))
 (let (($x33 (and $x22 $x14)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x133 $x33)))
 (let (($x30 (= $x48 true)))
 (let (($x149 (= $x30 true)))
 (let (($x137 (= $x149 true)))
 (let (($x123 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x273 (=> $x123 false)))
 (let ((?x484 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x485 (concat ?x484 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x487 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x492 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x490 (ite (= (_ bv0 32) (concat ?x492 (concat ?x487 ?x485))) (_ bv0 32) (_ bv1 32))))
 (let (($x285 (bvuge ?x490 (_ bv1 32))))
 (let (($x185 (= $x123 $x285)))
 (let (($x309 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x206 (=> $x309 $x169)))
 (let (($x488 (= ?x490 (_ bv0 32))))
 (let (($x191 (= $x309 $x488)))
 (let (($x53 (and $x191 $x206)))
 (let (($x52 (and $x53 $x185)))
 (let (($x308 (and $x52 $x273)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x160)))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x129)))
 (let (($x202 (= input.spec-%var-l-1.2.0 ?x275)))
 (let (($x179 (and $x202 $x308)))
 (let (($x28 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x88 (=> $x28 $x179)))
 (let ((?x15 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x311 (bvuge ?x15 (_ bv1 32))))
 (let (($x249 (= $x28 $x311)))
 (let (($x354 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x47 (=> $x354 $x169)))
 (let (($x279 (= ?x15 (_ bv0 32))))
 (let (($x350 (= $x354 $x279)))
 (let (($x293 (and $x350 $x47)))
 (let (($x176 (and $x293 $x249)))
 (let (($x297 (and $x176 $x88)))
 (let (($x125 (= $x297 true)))
 (let (($x82 (= $x125 true)))
 (let (($x173 (= $x82 true)))
 (let (($x527 (= $x38 $x285)))
 (let (($x145 (= $x50 $x488)))
 (let (($x45 (and $x145 $x258)))
 (let (($x70 (and $x45 $x527)))
 (let (($x196 (and $x70 $x190)))
 (let (($x184 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x275)))
 (let (($x29 (and $x184 $x196)))
 (let (($x280 (=> $x189 $x29)))
 (let (($x224 (= $x189 $x311)))
 (let (($x261 (= $x262 $x279)))
 (let (($x305 (and $x261 $x162)))
 (let (($x27 (and $x305 $x224)))
 (let (($x250 (and $x27 $x280)))
 (let (($x24 (= $x250 true)))
 (let (($x62 (= $x24 true)))
 (let (($x115 (= $x62 true)))
 (let (($x141 (and $x115 $x173)))
 (let (($x111 (and $x141 $x137)))
 (let (($x214 (and $x111 $x217)))
 (let (($x239 (and $x214 $x245)))
 (let (($x340 (and $x239 $x337)))
 (let (($x465 (and $x340 $x464)))
 (let (($x18 (and $x465 $x307)))
 (let (($x60 (and $x18 $x31)))
 (let (($x130 (and $x189 $x60)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x40 (and $x244 $x130)))
 (let (($x132 (bvugt ?x302 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x302 (_ bv3 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x216 (=> (bvule ?x302 (bvsub (bvadd ?x302 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x132)))))))
 (let (($x192 (=> (and $x205 (bvule ?x302 (bvsub (bvadd ?x302 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x90 $x132)))))))
 (let (($x166 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x12 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x182 (_ bv1 32))) (or false (or false (and true (or $x34 $x166)))))))
 (let (($x81 (=> (and $x205 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x182 (_ bv1 32)))) (or false (or false (and true (or $x34 $x166)))))))
 (let (($x99 (and $x81 $x192)))
 (let (($x10 (and $x99 $x40)))
 (let (($x65 (=> $x10 $x98)))
 (not $x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv163408 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv1 8)) (_ bv163408 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv270088 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv270088 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv270091 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0dfffffc)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x000003fa)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000400)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x26)
                                #x000003fa
                                #x00)
                         #x00000401
                         #x00)
                  #x00000400
                  #x00)))
(let ((a!2 (store (store (store (store a!1 #x000003fb #x00) #x000003ff #x00)
                         #x000003fe
                         #x00)
                  #x00000400
                  #x00)))
(let ((a!3 (store (store (store (store a!2 #x00000407 #x00) #x00000406 #x00)
                         #x00000405
                         #x00)
                  #x00000401
                  #x00)))
  (store a!3 #x00000404 #x00)))))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x26260000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x26260000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0dffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0dfffffc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x391 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x415 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x208 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x35 (concat (select input.dst.llvm-mem ?x208) (concat ?x197 (concat ?x415 ?x391)))))
 (let ((?x546 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x35)))
 (let ((?x549 (bvadd input.spec-%var-sum-0.L2%6%bbentry input.spec-%var-l-0.L2%6%bbentry.2.0)))
 (let ((?x550 (bvmul (_ bv4294967295 32) ?x549)))
 (let ((?x541 (bvneg ?x550)))
 (let (($x544 (= ?x541 ?x546)))
 (let (($x548 (= $x544 true)))
 (let ((?x413 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x454 (bvneg ?x413)))
 (let (($x540 (= ?x454 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x551 (= $x540 true)))
 (let (($x552 (= $x551 true)))
 (let ((?x442 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x446 (= (_ bv0 3) ?x442)))
 (let (($x445 (= $x446 true)))
 (let (($x441 (= $x445 true)))
 (let (($x32 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x207 (=> $x32 true)))
 (let ((?x187 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x299))))
 (let ((?x422 (ite (= (_ bv0 32) ?x426) (_ bv0 32) (_ bv1 32))))
 (let (($x525 (= $x32 (bvuge ?x422 (_ bv1 32)))))
 (let (($x191 (= false false)))
 (let (($x537 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x510 (=> $x537 $x191)))
 (let (($x447 (= $x537 (= ?x422 (_ bv0 32)))))
 (let (($x67 (and $x447 $x510)))
 (let (($x528 (and $x67 $x525)))
 (let (($x526 (and $x528 $x207)))
 (let (($x25 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x35)))
 (let (($x521 (and $x25 $x526)))
 (let (($x308 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x480 (=> $x308 $x521)))
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x167 (ite $x122 (_ bv0 32) (_ bv1 32))))
 (let (($x364 (= $x308 (bvuge ?x167 (_ bv1 32)))))
 (let (($x176 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x206 (=> $x176 $x191)))
 (let (($x355 (= $x176 (= ?x167 (_ bv0 32)))))
 (let (($x357 (and $x355 $x206)))
 (let (($x367 (and $x357 $x364)))
 (let (($x449 (and $x367 $x480)))
 (let (($x460 (= $x449 true)))
 (let (($x414 (= $x460 true)))
 (let (($x440 (= $x414 true)))
 (let (($x230 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x236 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x236) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x236))))
 (let (($x294 (and true $x218)))
 (let (($x193 (and $x218 $x294)))
 (let ((?x205 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x278))))
 (let (($x69 (= (bvand ?x49 (_ bv4294967288 32)) ?x49)))
 (let (($x298 (= (bvand ?x205 (_ bv4294967292 32)) ?x205)))
 (let (($x74 (and $x298 $x69)))
 (let (($x155 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x205 (bvsub ?x205 (_ bv4 32))) (bvult ?x205 (bvsub ?x205 (_ bv4 32))))))
 (let (($x291 (and (and (and (and (and $x294 $x155) $x298) $x74) $x193) $x230)))
 (let (($x241 (= true $x291)))
 (let (($x61 (not $x122)))
 (let (($x199 (=> $x61 $x241)))
 (let (($x86 (= $x199 true)))
 (let (($x103 (= $x86 true)))
 (let (($x21 (= $x103 true)))
 (let (($x535 (= $x61 true)))
 (let (($x505 (= $x535 true)))
 (let (($x553 (= $x505 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x110)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x251 $x92)))
 (let (($x152 (and $x136 $x138)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x507 (and $x11 $x152)))
 (let (($x503 (= $x507 true)))
 (let (($x533 (= $x503 true)))
 (let (($x534 (= $x533 true)))
 (let (($x508 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x499 (=> $x508 true)))
 (let ((?x483 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x470 (concat ?x483 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x467 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x466 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x465 (ite (= (_ bv0 32) (concat ?x466 (concat ?x467 ?x470))) (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x465 (_ bv1 32))))
 (let (($x502 (= $x508 $x233)))
 (let (($x512 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x341 (=> $x512 $x191)))
 (let (($x468 (= ?x465 (_ bv0 32))))
 (let (($x346 (= $x512 $x468)))
 (let (($x529 (and $x346 $x341)))
 (let (($x353 (and $x529 $x502)))
 (let (($x513 (and $x353 $x499)))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x338)))
 (let ((?x320 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x315)))
 (let (($x365 (= input.spec-%var-l-1.2.0 ?x320)))
 (let (($x511 (and $x365 $x513)))
 (let (($x43 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x514 (=> $x43 $x511)))
 (let ((?x202 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x179 (bvuge ?x202 (_ bv1 32))))
 (let (($x150 (= $x43 $x179)))
 (let (($x126 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x64 (=> $x126 $x191)))
 (let (($x287 (= ?x202 (_ bv0 32))))
 (let (($x79 (= $x126 $x287)))
 (let (($x174 (and $x79 $x64)))
 (let (($x347 (and $x174 $x150)))
 (let (($x532 (and $x347 $x514)))
 (let (($x117 (= $x532 true)))
 (let (($x116 (= $x117 true)))
 (let (($x194 (= $x116 true)))
 (let (($x13 (= $x32 $x233)))
 (let (($x455 (= $x537 $x468)))
 (let (($x538 (and $x455 $x510)))
 (let (($x134 (and $x538 $x13)))
 (let (($x345 (and $x134 $x207)))
 (let (($x329 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x320)))
 (let (($x238 (and $x329 $x345)))
 (let (($x259 (=> $x308 $x238)))
 (let (($x88 (= $x308 $x179)))
 (let (($x309 (= $x176 $x287)))
 (let (($x53 (and $x309 $x206)))
 (let (($x297 (and $x53 $x88)))
 (let (($x252 (and $x297 $x259)))
 (let (($x80 (= $x252 true)))
 (let (($x221 (= $x80 true)))
 (let (($x212 (= $x221 true)))
 (let (($x87 (and $x212 $x194)))
 (let (($x531 (and $x87 $x534)))
 (let (($x266 (and $x531 $x553)))
 (let (($x77 (and $x266 $x21)))
 (let (($x351 (and $x77 $x440)))
 (let (($x443 (and $x351 $x441)))
 (let (($x542 (and $x443 $x552)))
 (let (($x545 (and $x308 $x542)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x547 (and $x262 $x545)))
 (let (($x44 (bvugt ?x205 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x205 (_ bv3 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x244 (=> (bvule ?x205 (bvsub (bvadd ?x205 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x44)))))))
 (let (($x58 (=> (and $x61 (bvule ?x205 (bvsub (bvadd ?x205 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x121 $x44)))))))
 (let (($x93 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x296 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x187 (_ bv1 32))) (or false (or false (and true (or $x36 $x93)))))))
 (let (($x222 (=> (and $x61 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x187 (_ bv1 32)))) (or false (or false (and true (or $x36 $x93)))))))
 (let (($x37 (and $x222 $x58)))
 (let (($x543 (and $x37 $x547)))
 (let (($x554 (=> $x543 $x548)))
 (not $x554))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x391 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x415 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x208 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x35 (concat (select input.dst.llvm-mem ?x208) (concat ?x197 (concat ?x415 ?x391)))))
 (let ((?x546 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x35)))
 (let ((?x549 (bvadd input.spec-%var-sum-0.L2%6%bbentry input.spec-%var-l-0.L2%6%bbentry.2.0)))
 (let ((?x550 (bvmul (_ bv4294967295 32) ?x549)))
 (let ((?x541 (bvneg ?x550)))
 (let (($x544 (= ?x541 ?x546)))
 (let (($x548 (= $x544 true)))
 (let ((?x413 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x454 (bvneg ?x413)))
 (let (($x540 (= ?x454 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x551 (= $x540 true)))
 (let (($x552 (= $x551 true)))
 (let ((?x442 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x446 (= (_ bv0 3) ?x442)))
 (let (($x445 (= $x446 true)))
 (let (($x441 (= $x445 true)))
 (let (($x32 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x207 (=> $x32 true)))
 (let ((?x187 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x299))))
 (let ((?x422 (ite (= (_ bv0 32) ?x426) (_ bv0 32) (_ bv1 32))))
 (let (($x525 (= $x32 (bvuge ?x422 (_ bv1 32)))))
 (let (($x191 (= false false)))
 (let (($x537 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x510 (=> $x537 $x191)))
 (let (($x447 (= $x537 (= ?x422 (_ bv0 32)))))
 (let (($x67 (and $x447 $x510)))
 (let (($x528 (and $x67 $x525)))
 (let (($x526 (and $x528 $x207)))
 (let (($x25 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x35)))
 (let (($x521 (and $x25 $x526)))
 (let (($x308 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x480 (=> $x308 $x521)))
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x167 (ite $x122 (_ bv0 32) (_ bv1 32))))
 (let (($x364 (= $x308 (bvuge ?x167 (_ bv1 32)))))
 (let (($x176 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x206 (=> $x176 $x191)))
 (let (($x355 (= $x176 (= ?x167 (_ bv0 32)))))
 (let (($x357 (and $x355 $x206)))
 (let (($x367 (and $x357 $x364)))
 (let (($x449 (and $x367 $x480)))
 (let (($x460 (= $x449 true)))
 (let (($x414 (= $x460 true)))
 (let (($x440 (= $x414 true)))
 (let (($x230 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x236 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x236) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x236))))
 (let (($x294 (and true $x218)))
 (let (($x193 (and $x218 $x294)))
 (let ((?x205 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x278))))
 (let (($x69 (= (bvand ?x49 (_ bv4294967288 32)) ?x49)))
 (let (($x298 (= (bvand ?x205 (_ bv4294967292 32)) ?x205)))
 (let (($x74 (and $x298 $x69)))
 (let (($x155 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x205 (bvsub ?x205 (_ bv4 32))) (bvult ?x205 (bvsub ?x205 (_ bv4 32))))))
 (let (($x291 (and (and (and (and (and $x294 $x155) $x298) $x74) $x193) $x230)))
 (let (($x241 (= true $x291)))
 (let (($x61 (not $x122)))
 (let (($x199 (=> $x61 $x241)))
 (let (($x86 (= $x199 true)))
 (let (($x103 (= $x86 true)))
 (let (($x21 (= $x103 true)))
 (let (($x535 (= $x61 true)))
 (let (($x505 (= $x535 true)))
 (let (($x553 (= $x505 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x110)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x251 $x92)))
 (let (($x152 (and $x136 $x138)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x507 (and $x11 $x152)))
 (let (($x503 (= $x507 true)))
 (let (($x533 (= $x503 true)))
 (let (($x534 (= $x533 true)))
 (let (($x508 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x499 (=> $x508 true)))
 (let ((?x483 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x470 (concat ?x483 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x467 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x466 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x465 (ite (= (_ bv0 32) (concat ?x466 (concat ?x467 ?x470))) (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x465 (_ bv1 32))))
 (let (($x502 (= $x508 $x233)))
 (let (($x512 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x341 (=> $x512 $x191)))
 (let (($x468 (= ?x465 (_ bv0 32))))
 (let (($x346 (= $x512 $x468)))
 (let (($x529 (and $x346 $x341)))
 (let (($x353 (and $x529 $x502)))
 (let (($x513 (and $x353 $x499)))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x338)))
 (let ((?x320 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x315)))
 (let (($x365 (= input.spec-%var-l-1.2.0 ?x320)))
 (let (($x511 (and $x365 $x513)))
 (let (($x43 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x514 (=> $x43 $x511)))
 (let ((?x202 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x179 (bvuge ?x202 (_ bv1 32))))
 (let (($x150 (= $x43 $x179)))
 (let (($x126 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x64 (=> $x126 $x191)))
 (let (($x287 (= ?x202 (_ bv0 32))))
 (let (($x79 (= $x126 $x287)))
 (let (($x174 (and $x79 $x64)))
 (let (($x347 (and $x174 $x150)))
 (let (($x532 (and $x347 $x514)))
 (let (($x117 (= $x532 true)))
 (let (($x116 (= $x117 true)))
 (let (($x194 (= $x116 true)))
 (let (($x13 (= $x32 $x233)))
 (let (($x455 (= $x537 $x468)))
 (let (($x538 (and $x455 $x510)))
 (let (($x134 (and $x538 $x13)))
 (let (($x345 (and $x134 $x207)))
 (let (($x329 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x320)))
 (let (($x238 (and $x329 $x345)))
 (let (($x259 (=> $x308 $x238)))
 (let (($x88 (= $x308 $x179)))
 (let (($x309 (= $x176 $x287)))
 (let (($x53 (and $x309 $x206)))
 (let (($x297 (and $x53 $x88)))
 (let (($x252 (and $x297 $x259)))
 (let (($x80 (= $x252 true)))
 (let (($x221 (= $x80 true)))
 (let (($x212 (= $x221 true)))
 (let (($x87 (and $x212 $x194)))
 (let (($x531 (and $x87 $x534)))
 (let (($x266 (and $x531 $x553)))
 (let (($x77 (and $x266 $x21)))
 (let (($x351 (and $x77 $x440)))
 (let (($x443 (and $x351 $x441)))
 (let (($x542 (and $x443 $x552)))
 (let (($x545 (and $x308 $x542)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x547 (and $x262 $x545)))
 (let (($x44 (bvugt ?x205 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x205 (_ bv3 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x244 (=> (bvule ?x205 (bvsub (bvadd ?x205 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x44)))))))
 (let (($x58 (=> (and $x61 (bvule ?x205 (bvsub (bvadd ?x205 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x121 $x44)))))))
 (let (($x93 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x296 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x187 (_ bv1 32))) (or false (or false (and true (or $x36 $x93)))))))
 (let (($x222 (=> (and $x61 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x187 (_ bv1 32)))) (or false (or false (and true (or $x36 $x93)))))))
 (let (($x37 (and $x222 $x58)))
 (let (($x543 (and $x37 $x547)))
 (let (($x554 (=> $x543 $x548)))
 (not $x554))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x616 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x620 (concat (select input.dst.llvm-mem (bvadd ?x616 (_ bv1 32))) (select input.dst.llvm-mem ?x616))))
 (let ((?x626 (concat (select input.dst.llvm-mem (bvadd ?x616 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x616 (_ bv2 32))) ?x620))))
 (let ((?x606 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x608 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x611 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x614 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x605 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x108 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv1 32))) (select input.dst.llvm-mem ?x108))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv2 32))) ?x134))))
 (let (($x627 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x80 ?x605 false (concat ?x614 (concat ?x611 (concat ?x608 ?x606))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x626)))
 (let (($x572 (= $x627 true)))
 (let (($x573 (= $x572 true)))
 (let ((?x430 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x203 (= (_ bv0 3) ?x430)))
 (let (($x146 (= $x203 true)))
 (let (($x170 (= $x146 true)))
 (let (($x435 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x479 (=> $x435 true)))
 (let ((?x392 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x140 (concat ?x392 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x42 (ite (= (_ bv0 32) (concat ?x377 (concat ?x96 ?x140))) (_ bv0 32) (_ bv1 32))))
 (let (($x436 (bvuge ?x42 (_ bv1 32))))
 (let (($x477 (= $x435 $x436)))
 (let (($x144 (= false false)))
 (let (($x60 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x31 (=> $x60 $x144)))
 (let (($x403 (= ?x42 (_ bv0 32))))
 (let (($x200 (= $x60 $x403)))
 (let (($x10 (and $x200 $x31)))
 (let (($x462 (and $x10 $x477)))
 (let (($x434 (and $x462 $x479)))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x416 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x386)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x416)))
 (let (($x8 (= input.spec-%var-l-1.2.0 ?x195)))
 (let (($x429 (and $x8 $x434)))
 (let (($x459 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x433 (=> $x459 $x429)))
 (let ((?x48 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x274 (bvuge ?x48 (_ bv1 32))))
 (let (($x463 (= $x459 $x274)))
 (let (($x451 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x260 (=> $x451 $x144)))
 (let (($x30 (= ?x48 (_ bv0 32))))
 (let (($x254 (= $x451 $x30)))
 (let (($x385 (and $x254 $x260)))
 (let (($x472 (and $x385 $x463)))
 (let (($x431 (and $x472 $x433)))
 (let (($x476 (= $x431 true)))
 (let (($x424 (= $x476 true)))
 (let (($x482 (= $x424 true)))
 (let (($x145 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x258 (=> $x145 true)))
 (let (($x127 (= $x145 $x436)))
 (let (($x366 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x158 (=> $x366 $x144)))
 (let (($x375 (= $x366 $x403)))
 (let (($x373 (and $x375 $x158)))
 (let (($x428 (and $x373 $x127)))
 (let (($x63 (and $x428 $x258)))
 (let (($x288 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x195)))
 (let (($x408 (and $x288 $x63)))
 (let (($x21 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x409 (=> $x21 $x408)))
 (let (($x256 (= $x21 $x274)))
 (let (($x74 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x230 (=> $x74 $x144)))
 (let (($x149 (= $x74 $x30)))
 (let (($x225 (and $x149 $x230)))
 (let (($x242 (and $x225 $x256)))
 (let (($x235 (and $x242 $x409)))
 (let (($x232 (= $x235 true)))
 (let (($x382 (= $x232 true)))
 (let (($x384 (= $x382 true)))
 (let ((?x215 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv1 32))) (select input.dst.llvm-mem ?x215))))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv2 32))) ?x95))))
 (let ((?x50 (ite (= (_ bv0 32) ?x492) (_ bv0 32) (_ bv1 32))))
 (let (($x38 (= $x145 (bvuge ?x50 (_ bv1 32)))))
 (let (($x275 (= $x366 (= ?x50 (_ bv0 32)))))
 (let (($x97 (and $x275 $x158)))
 (let (($x285 (and $x97 $x38)))
 (let (($x490 (and $x285 $x258)))
 (let ((?x440 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x349 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x445 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x66 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x444 (concat (select input.dst.llvm-mem ?x66) (concat ?x445 (concat ?x349 ?x440)))))
 (let (($x461 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x444)))
 (let (($x493 (and $x461 $x490)))
 (let (($x488 (=> $x21 $x493)))
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x286 (ite $x122 (_ bv0 32) (_ bv1 32))))
 (let (($x167 (= $x21 (bvuge ?x286 (_ bv1 32)))))
 (let (($x303 (= $x74 (= ?x286 (_ bv0 32)))))
 (let (($x291 (and $x303 $x230)))
 (let (($x352 (and $x291 $x167)))
 (let (($x45 (and $x352 $x488)))
 (let (($x527 (= $x45 true)))
 (let (($x282 (= $x527 true)))
 (let (($x118 (= $x282 true)))
 (let (($x174 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x466 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x483 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x466) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x466))))
 (let (($x506 (and true $x483)))
 (let (($x79 (and $x483 $x506)))
 (let (($x154 (= (bvand ?x80 (_ bv4294967288 32)) ?x80)))
 (let (($x510 (= (bvand ?x108 (_ bv4294967292 32)) ?x108)))
 (let (($x126 (and $x510 $x154)))
 (let (($x465 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x108 (bvsub ?x108 (_ bv4 32))) (bvult ?x108 (bvsub ?x108 (_ bv4 32))))))
 (let (($x365 (and (and (and (and (and $x506 $x465) $x510) $x126) $x79) $x174)))
 (let (($x500 (= true $x365)))
 (let (($x61 (not $x122)))
 (let (($x512 (=> $x61 $x500)))
 (let (($x346 (= $x512 true)))
 (let (($x341 (= $x346 true)))
 (let (($x529 (= $x341 true)))
 (let (($x536 (= $x61 true)))
 (let (($x537 (= $x536 true)))
 (let (($x457 (= $x537 true)))
 (let ((?x314 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x321 (= (_ bv0 32) ?x314)))
 (let ((?x326 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x283 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x326)))
 (let (($x323 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x323 $x283)))
 (let (($x322 (and $x312 $x321)))
 (let (($x311 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x325 (and $x311 $x322)))
 (let (($x338 (= $x325 true)))
 (let (($x315 (= $x338 true)))
 (let (($x320 (= $x315 true)))
 (let ((?x206 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x53 (bvneg ?x206)))
 (let (($x179 (= ?x53 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x88 (= $x179 true)))
 (let (($x297 (= $x88 true)))
 (let (($x329 (and $x297 $x320)))
 (let (($x39 (and $x329 $x457)))
 (let (($x508 (and $x39 $x529)))
 (let (($x350 (and $x508 $x118)))
 (let (($x379 (and $x350 $x384)))
 (let (($x439 (and $x379 $x482)))
 (let (($x517 (and $x439 $x170)))
 (let (($x491 (and $x21 $x517)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x518 (and $x176 $x491)))
 (let (($x192 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x108 (_ bv3 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x262 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x216 $x192)))))))
 (let (($x243 (=> (and $x61 (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x216 $x192)))))))
 (let (($x81 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x132 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x215 (_ bv1 32))) (or false (or false (and true (or $x12 $x81)))))))
 (let (($x34 (=> (and $x61 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x215 (_ bv1 32)))) (or false (or false (and true (or $x12 $x81)))))))
 (let (($x186 (and $x34 $x243)))
 (let (($x522 (and $x186 $x518)))
 (let (($x574 (=> $x522 $x573)))
 (not $x574)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x616 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x620 (concat (select input.dst.llvm-mem (bvadd ?x616 (_ bv1 32))) (select input.dst.llvm-mem ?x616))))
 (let ((?x626 (concat (select input.dst.llvm-mem (bvadd ?x616 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x616 (_ bv2 32))) ?x620))))
 (let ((?x606 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x608 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x611 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x614 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x605 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x108 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv1 32))) (select input.dst.llvm-mem ?x108))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv2 32))) ?x134))))
 (let (($x627 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x80 ?x605 false (concat ?x614 (concat ?x611 (concat ?x608 ?x606))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x626)))
 (let (($x572 (= $x627 true)))
 (let (($x573 (= $x572 true)))
 (let ((?x430 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x203 (= (_ bv0 3) ?x430)))
 (let (($x146 (= $x203 true)))
 (let (($x170 (= $x146 true)))
 (let (($x435 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x479 (=> $x435 true)))
 (let ((?x392 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x140 (concat ?x392 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x42 (ite (= (_ bv0 32) (concat ?x377 (concat ?x96 ?x140))) (_ bv0 32) (_ bv1 32))))
 (let (($x436 (bvuge ?x42 (_ bv1 32))))
 (let (($x477 (= $x435 $x436)))
 (let (($x144 (= false false)))
 (let (($x60 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x31 (=> $x60 $x144)))
 (let (($x403 (= ?x42 (_ bv0 32))))
 (let (($x200 (= $x60 $x403)))
 (let (($x10 (and $x200 $x31)))
 (let (($x462 (and $x10 $x477)))
 (let (($x434 (and $x462 $x479)))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x416 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x386)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x416)))
 (let (($x8 (= input.spec-%var-l-1.2.0 ?x195)))
 (let (($x429 (and $x8 $x434)))
 (let (($x459 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x433 (=> $x459 $x429)))
 (let ((?x48 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x274 (bvuge ?x48 (_ bv1 32))))
 (let (($x463 (= $x459 $x274)))
 (let (($x451 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x260 (=> $x451 $x144)))
 (let (($x30 (= ?x48 (_ bv0 32))))
 (let (($x254 (= $x451 $x30)))
 (let (($x385 (and $x254 $x260)))
 (let (($x472 (and $x385 $x463)))
 (let (($x431 (and $x472 $x433)))
 (let (($x476 (= $x431 true)))
 (let (($x424 (= $x476 true)))
 (let (($x482 (= $x424 true)))
 (let (($x145 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x258 (=> $x145 true)))
 (let (($x127 (= $x145 $x436)))
 (let (($x366 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x158 (=> $x366 $x144)))
 (let (($x375 (= $x366 $x403)))
 (let (($x373 (and $x375 $x158)))
 (let (($x428 (and $x373 $x127)))
 (let (($x63 (and $x428 $x258)))
 (let (($x288 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x195)))
 (let (($x408 (and $x288 $x63)))
 (let (($x21 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x409 (=> $x21 $x408)))
 (let (($x256 (= $x21 $x274)))
 (let (($x74 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x230 (=> $x74 $x144)))
 (let (($x149 (= $x74 $x30)))
 (let (($x225 (and $x149 $x230)))
 (let (($x242 (and $x225 $x256)))
 (let (($x235 (and $x242 $x409)))
 (let (($x232 (= $x235 true)))
 (let (($x382 (= $x232 true)))
 (let (($x384 (= $x382 true)))
 (let ((?x215 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv1 32))) (select input.dst.llvm-mem ?x215))))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv2 32))) ?x95))))
 (let ((?x50 (ite (= (_ bv0 32) ?x492) (_ bv0 32) (_ bv1 32))))
 (let (($x38 (= $x145 (bvuge ?x50 (_ bv1 32)))))
 (let (($x275 (= $x366 (= ?x50 (_ bv0 32)))))
 (let (($x97 (and $x275 $x158)))
 (let (($x285 (and $x97 $x38)))
 (let (($x490 (and $x285 $x258)))
 (let ((?x440 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x349 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x445 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x66 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x444 (concat (select input.dst.llvm-mem ?x66) (concat ?x445 (concat ?x349 ?x440)))))
 (let (($x461 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x444)))
 (let (($x493 (and $x461 $x490)))
 (let (($x488 (=> $x21 $x493)))
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x286 (ite $x122 (_ bv0 32) (_ bv1 32))))
 (let (($x167 (= $x21 (bvuge ?x286 (_ bv1 32)))))
 (let (($x303 (= $x74 (= ?x286 (_ bv0 32)))))
 (let (($x291 (and $x303 $x230)))
 (let (($x352 (and $x291 $x167)))
 (let (($x45 (and $x352 $x488)))
 (let (($x527 (= $x45 true)))
 (let (($x282 (= $x527 true)))
 (let (($x118 (= $x282 true)))
 (let (($x174 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x466 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x483 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x466) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x466))))
 (let (($x506 (and true $x483)))
 (let (($x79 (and $x483 $x506)))
 (let (($x154 (= (bvand ?x80 (_ bv4294967288 32)) ?x80)))
 (let (($x510 (= (bvand ?x108 (_ bv4294967292 32)) ?x108)))
 (let (($x126 (and $x510 $x154)))
 (let (($x465 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x108 (bvsub ?x108 (_ bv4 32))) (bvult ?x108 (bvsub ?x108 (_ bv4 32))))))
 (let (($x365 (and (and (and (and (and $x506 $x465) $x510) $x126) $x79) $x174)))
 (let (($x500 (= true $x365)))
 (let (($x61 (not $x122)))
 (let (($x512 (=> $x61 $x500)))
 (let (($x346 (= $x512 true)))
 (let (($x341 (= $x346 true)))
 (let (($x529 (= $x341 true)))
 (let (($x536 (= $x61 true)))
 (let (($x537 (= $x536 true)))
 (let (($x457 (= $x537 true)))
 (let ((?x314 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x321 (= (_ bv0 32) ?x314)))
 (let ((?x326 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x283 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x326)))
 (let (($x323 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x323 $x283)))
 (let (($x322 (and $x312 $x321)))
 (let (($x311 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x325 (and $x311 $x322)))
 (let (($x338 (= $x325 true)))
 (let (($x315 (= $x338 true)))
 (let (($x320 (= $x315 true)))
 (let ((?x206 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x53 (bvneg ?x206)))
 (let (($x179 (= ?x53 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x88 (= $x179 true)))
 (let (($x297 (= $x88 true)))
 (let (($x329 (and $x297 $x320)))
 (let (($x39 (and $x329 $x457)))
 (let (($x508 (and $x39 $x529)))
 (let (($x350 (and $x508 $x118)))
 (let (($x379 (and $x350 $x384)))
 (let (($x439 (and $x379 $x482)))
 (let (($x517 (and $x439 $x170)))
 (let (($x491 (and $x21 $x517)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x518 (and $x176 $x491)))
 (let (($x192 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x108 (_ bv3 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x262 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x216 $x192)))))))
 (let (($x243 (=> (and $x61 (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x216 $x192)))))))
 (let (($x81 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x66)))
 (let (($x132 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x215 (_ bv1 32))) (or false (or false (and true (or $x12 $x81)))))))
 (let (($x34 (=> (and $x61 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x215 (_ bv1 32)))) (or false (or false (and true (or $x12 $x81)))))))
 (let (($x186 (and $x34 $x243)))
 (let (($x522 (and $x186 $x518)))
 (let (($x574 (=> $x522 $x573)))
 (not $x574)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_14)
(= input.dst.llvm-mem @fun_23)
(function @fun_14
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_14 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_23
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_10640 (_ BitVec 32)) (BOUND_VARIABLE_10641 (_ BitVec 32)) (BOUND_VARIABLE_10642 (_ BitVec 32)) (BOUND_VARIABLE_10643 Bool) (BOUND_VARIABLE_10644 (_ BitVec 32)) (BOUND_VARIABLE_10645 (_ BitVec 32)) (BOUND_VARIABLE_10646 (_ BitVec 32)) (BOUND_VARIABLE_10647 (_ BitVec 32)) (BOUND_VARIABLE_10648 (_ BitVec 32)) (BOUND_VARIABLE_10649 (_ BitVec 32)) (BOUND_VARIABLE_10650 Bool) (BOUND_VARIABLE_10651 (_ BitVec 32)) (BOUND_VARIABLE_10652 (_ BitVec 32)) (BOUND_VARIABLE_10653 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv55134848 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv461028184 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv461028184 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv461028187 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000001c)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00002022)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00002020)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00002020)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000001c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000001f)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00002022)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00002022)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x56 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x318 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x398 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x398))))
 (let ((?x153 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x324 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x73 (concat ?x85 (concat ?x313 (concat ?x324 ?x153)))))
 (let ((?x90 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x134))))
 (let (($x725 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x126 ?x73 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x119 ?x56 false)))
 (let (($x535 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x698 (=> $x535 $x725)))
 (let (($x672 (= $x535 (bvuge (ite (= (_ bv0 32) ?x126) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x395 (= false false)))
 (let (($x162 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x456 (=> $x162 $x395)))
 (let (($x665 (= $x162 (= (ite (= (_ bv0 32) ?x126) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x666 (and $x665 $x456)))
 (let (($x673 (and $x666 $x672)))
 (let (($x699 (and $x673 $x698)))
 (let (($x700 (= $x699 true)))
 (let (($x713 (= $x700 true)))
 (let ((?x630 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x633 (= (_ bv0 3) ?x630)))
 (let (($x636 (= $x633 true)))
 (let (($x639 (= $x636 true)))
 (let ((?x554 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x539 (concat ?x554 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x370 (concat ?x100 ?x539))))
 (let (($x641 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x102 ?x73 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x119 ?x56 false)))
 (let (($x593 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x588 (=> $x593 $x641)))
 (let ((?x371 (ite (= (_ bv0 32) ?x102) (_ bv0 32) (_ bv1 32))))
 (let (($x473 (bvuge ?x371 (_ bv1 32))))
 (let (($x596 (= $x593 $x473)))
 (let (($x560 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x520 (=> $x560 $x395)))
 (let (($x404 (= ?x371 (_ bv0 32))))
 (let (($x501 (= $x560 $x404)))
 (let (($x576 (and $x501 $x520)))
 (let (($x592 (and $x576 $x596)))
 (let (($x591 (and $x592 $x588)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x299)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x418)))
 (let (($x559 (= input.spec-%var-l-1.2.0 ?x422)))
 (let (($x594 (and $x559 $x591)))
 (let (($x190 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x629 (=> $x190 $x594)))
 (let ((?x530 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x266 (bvuge ?x530 (_ bv1 32))))
 (let (($x196 (= $x190 $x266)))
 (let (($x250 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x115 (=> $x250 $x395)))
 (let (($x504 (= ?x530 (_ bv0 32))))
 (let (($x29 (= $x250 $x504)))
 (let (($x237 (and $x29 $x115)))
 (let (($x70 (and $x237 $x196)))
 (let (($x637 (and $x70 $x629)))
 (let (($x638 (= $x637 true)))
 (let (($x634 (= $x638 true)))
 (let (($x635 (= $x634 true)))
 (let (($x558 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x102 ?x73 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x119 ?x56 false)))
 (let (($x485 (=> $x535 $x558)))
 (let (($x410 (= $x535 $x473)))
 (let (($x541 (= $x162 $x404)))
 (let (($x547 (and $x541 $x456)))
 (let (($x402 (and $x547 $x410)))
 (let (($x354 (and $x402 $x485)))
 (let (($x265 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x422)))
 (let (($x495 (and $x265 $x354)))
 (let (($x378 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x497 (=> $x378 $x495)))
 (let (($x204 (= $x378 $x266)))
 (let (($x396 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x394 (=> $x396 $x395)))
 (let (($x399 (= $x396 $x504)))
 (let (($x270 (and $x399 $x394)))
 (let (($x236 (and $x270 $x204)))
 (let (($x562 (and $x236 $x497)))
 (let (($x565 (= $x562 true)))
 (let (($x567 (= $x565 true)))
 (let (($x563 (= $x567 true)))
 (let ((?x208 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x511 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x511))))
 (let (($x276 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x355 ?x73 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x119 ?x56 false)))
 (let (($x123 (=> $x535 $x276)))
 (let (($x223 (= $x535 (bvuge (ite (= (_ bv0 32) ?x355) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x575 (= $x162 (= (ite (= (_ bv0 32) ?x355) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x107 (and $x575 $x456)))
 (let (($x9 (and $x107 $x223)))
 (let (($x185 (and $x9 $x123)))
 (let ((?x477 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x479 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x433 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x12 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x424 (concat (select input.dst.llvm-mem ?x12) (concat ?x433 (concat ?x479 ?x477)))))
 (let (($x482 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x424)))
 (let (($x106 (and $x482 $x185)))
 (let (($x328 (=> $x378 $x106)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x135 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x377 (= $x378 (bvuge ?x135 (_ bv1 32)))))
 (let (($x72 (= $x396 (= ?x135 (_ bv0 32)))))
 (let (($x397 (and $x72 $x394)))
 (let (($x376 (and $x397 $x377)))
 (let (($x335 (and $x376 $x328)))
 (let (($x165 (= $x335 true)))
 (let (($x336 (= $x165 true)))
 (let (($x317 (= $x336 true)))
 (let (($x500 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x94 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x465 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x94) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x94))))
 (let (($x43 (and true $x465)))
 (let (($x174 (and $x465 $x43)))
 (let (($x284 (= (bvand ?x126 (_ bv4294967288 32)) ?x126)))
 (let (($x345 (= (bvand ?x90 (_ bv4294967292 32)) ?x90)))
 (let (($x64 (and $x345 $x284)))
 (let (($x538 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x90 (bvsub ?x90 (_ bv4 32))) (bvult ?x90 (bvsub ?x90 (_ bv4 32))))))
 (let (($x508 (and (and (and (and (and $x43 $x538) $x345) $x64) $x174) $x500)))
 (let (($x69 (= true $x508)))
 (let (($x122 (not $x172)))
 (let (($x74 (=> $x122 $x69)))
 (let (($x286 (= $x74 true)))
 (let (($x193 (= $x286 true)))
 (let (($x303 (= $x193 true)))
 (let (($x467 (= $x122 true)))
 (let (($x253 (= $x467 true)))
 (let (($x483 (= $x253 true)))
 (let ((?x320 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x329 (= (_ bv0 32) ?x320)))
 (let ((?x325 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x338 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x325)))
 (let (($x322 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x315 (and $x322 $x338)))
 (let (($x536 (and $x315 $x329)))
 (let (($x321 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x537 (and $x321 $x536)))
 (let (($x457 (= $x537 true)))
 (let (($x39 (= $x457 true)))
 (let (($x471 (= $x39 true)))
 (let ((?x330 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x311 (bvneg ?x330)))
 (let (($x326 (= ?x311 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x283 (= $x326 true)))
 (let (($x312 (= $x283 true)))
 (let (($x466 (and $x312 $x471)))
 (let (($x506 (and $x466 $x483)))
 (let (($x144 (and $x506 $x303)))
 (let (($x319 (and $x144 $x317)))
 (let (($x569 (and $x319 $x563)))
 (let (($x631 (and $x569 $x635)))
 (let (($x577 (and $x631 $x639)))
 (let (($x580 (and $x378 $x577)))
 (let (($x191 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x582 (and $x191 $x580)))
 (let (($x58 (bvugt ?x90 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x90 (_ bv3 32))))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x176 (=> (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x244 $x58)))))))
 (let (($x91 (=> (and $x122 (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x244 $x58)))))))
 (let (($x222 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x44 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x208 (_ bv1 32))) (or false (or false (and true (or $x296 $x222)))))))
 (let (($x93 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x208 (_ bv1 32)))) (or false (or false (and true (or $x296 $x222)))))))
 (let (($x7 (and $x93 $x91)))
 (let (($x578 (and $x7 $x582)))
 (let (($x721 (=> $x578 $x713)))
 (not $x721))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x56 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x318 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x398 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x398))))
 (let ((?x153 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x324 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x73 (concat ?x85 (concat ?x313 (concat ?x324 ?x153)))))
 (let ((?x90 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x134))))
 (let (($x725 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x126 ?x73 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x119 ?x56 false)))
 (let (($x535 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x698 (=> $x535 $x725)))
 (let (($x672 (= $x535 (bvuge (ite (= (_ bv0 32) ?x126) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x395 (= false false)))
 (let (($x162 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x456 (=> $x162 $x395)))
 (let (($x665 (= $x162 (= (ite (= (_ bv0 32) ?x126) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x666 (and $x665 $x456)))
 (let (($x673 (and $x666 $x672)))
 (let (($x699 (and $x673 $x698)))
 (let (($x700 (= $x699 true)))
 (let (($x713 (= $x700 true)))
 (let ((?x630 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x633 (= (_ bv0 3) ?x630)))
 (let (($x636 (= $x633 true)))
 (let (($x639 (= $x636 true)))
 (let ((?x554 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x539 (concat ?x554 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x370 (concat ?x100 ?x539))))
 (let (($x641 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x102 ?x73 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x119 ?x56 false)))
 (let (($x593 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x588 (=> $x593 $x641)))
 (let ((?x371 (ite (= (_ bv0 32) ?x102) (_ bv0 32) (_ bv1 32))))
 (let (($x473 (bvuge ?x371 (_ bv1 32))))
 (let (($x596 (= $x593 $x473)))
 (let (($x560 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x520 (=> $x560 $x395)))
 (let (($x404 (= ?x371 (_ bv0 32))))
 (let (($x501 (= $x560 $x404)))
 (let (($x576 (and $x501 $x520)))
 (let (($x592 (and $x576 $x596)))
 (let (($x591 (and $x592 $x588)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x299)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x418)))
 (let (($x559 (= input.spec-%var-l-1.2.0 ?x422)))
 (let (($x594 (and $x559 $x591)))
 (let (($x190 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x629 (=> $x190 $x594)))
 (let ((?x530 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x266 (bvuge ?x530 (_ bv1 32))))
 (let (($x196 (= $x190 $x266)))
 (let (($x250 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x115 (=> $x250 $x395)))
 (let (($x504 (= ?x530 (_ bv0 32))))
 (let (($x29 (= $x250 $x504)))
 (let (($x237 (and $x29 $x115)))
 (let (($x70 (and $x237 $x196)))
 (let (($x637 (and $x70 $x629)))
 (let (($x638 (= $x637 true)))
 (let (($x634 (= $x638 true)))
 (let (($x635 (= $x634 true)))
 (let (($x558 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x102 ?x73 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x119 ?x56 false)))
 (let (($x485 (=> $x535 $x558)))
 (let (($x410 (= $x535 $x473)))
 (let (($x541 (= $x162 $x404)))
 (let (($x547 (and $x541 $x456)))
 (let (($x402 (and $x547 $x410)))
 (let (($x354 (and $x402 $x485)))
 (let (($x265 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x422)))
 (let (($x495 (and $x265 $x354)))
 (let (($x378 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x497 (=> $x378 $x495)))
 (let (($x204 (= $x378 $x266)))
 (let (($x396 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x394 (=> $x396 $x395)))
 (let (($x399 (= $x396 $x504)))
 (let (($x270 (and $x399 $x394)))
 (let (($x236 (and $x270 $x204)))
 (let (($x562 (and $x236 $x497)))
 (let (($x565 (= $x562 true)))
 (let (($x567 (= $x565 true)))
 (let (($x563 (= $x567 true)))
 (let ((?x208 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x511 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x511))))
 (let (($x276 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x355 ?x73 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x119 ?x56 false)))
 (let (($x123 (=> $x535 $x276)))
 (let (($x223 (= $x535 (bvuge (ite (= (_ bv0 32) ?x355) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x575 (= $x162 (= (ite (= (_ bv0 32) ?x355) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x107 (and $x575 $x456)))
 (let (($x9 (and $x107 $x223)))
 (let (($x185 (and $x9 $x123)))
 (let ((?x477 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x479 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x433 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x12 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x424 (concat (select input.dst.llvm-mem ?x12) (concat ?x433 (concat ?x479 ?x477)))))
 (let (($x482 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x424)))
 (let (($x106 (and $x482 $x185)))
 (let (($x328 (=> $x378 $x106)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x135 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x377 (= $x378 (bvuge ?x135 (_ bv1 32)))))
 (let (($x72 (= $x396 (= ?x135 (_ bv0 32)))))
 (let (($x397 (and $x72 $x394)))
 (let (($x376 (and $x397 $x377)))
 (let (($x335 (and $x376 $x328)))
 (let (($x165 (= $x335 true)))
 (let (($x336 (= $x165 true)))
 (let (($x317 (= $x336 true)))
 (let (($x500 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x94 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x465 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x94) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x94))))
 (let (($x43 (and true $x465)))
 (let (($x174 (and $x465 $x43)))
 (let (($x284 (= (bvand ?x126 (_ bv4294967288 32)) ?x126)))
 (let (($x345 (= (bvand ?x90 (_ bv4294967292 32)) ?x90)))
 (let (($x64 (and $x345 $x284)))
 (let (($x538 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x90 (bvsub ?x90 (_ bv4 32))) (bvult ?x90 (bvsub ?x90 (_ bv4 32))))))
 (let (($x508 (and (and (and (and (and $x43 $x538) $x345) $x64) $x174) $x500)))
 (let (($x69 (= true $x508)))
 (let (($x122 (not $x172)))
 (let (($x74 (=> $x122 $x69)))
 (let (($x286 (= $x74 true)))
 (let (($x193 (= $x286 true)))
 (let (($x303 (= $x193 true)))
 (let (($x467 (= $x122 true)))
 (let (($x253 (= $x467 true)))
 (let (($x483 (= $x253 true)))
 (let ((?x320 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x329 (= (_ bv0 32) ?x320)))
 (let ((?x325 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x338 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x325)))
 (let (($x322 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x315 (and $x322 $x338)))
 (let (($x536 (and $x315 $x329)))
 (let (($x321 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x537 (and $x321 $x536)))
 (let (($x457 (= $x537 true)))
 (let (($x39 (= $x457 true)))
 (let (($x471 (= $x39 true)))
 (let ((?x330 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x311 (bvneg ?x330)))
 (let (($x326 (= ?x311 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x283 (= $x326 true)))
 (let (($x312 (= $x283 true)))
 (let (($x466 (and $x312 $x471)))
 (let (($x506 (and $x466 $x483)))
 (let (($x144 (and $x506 $x303)))
 (let (($x319 (and $x144 $x317)))
 (let (($x569 (and $x319 $x563)))
 (let (($x631 (and $x569 $x635)))
 (let (($x577 (and $x631 $x639)))
 (let (($x580 (and $x378 $x577)))
 (let (($x191 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x582 (and $x191 $x580)))
 (let (($x58 (bvugt ?x90 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x90 (_ bv3 32))))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x176 (=> (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x244 $x58)))))))
 (let (($x91 (=> (and $x122 (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x244 $x58)))))))
 (let (($x222 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x44 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x208 (_ bv1 32))) (or false (or false (and true (or $x296 $x222)))))))
 (let (($x93 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x208 (_ bv1 32)))) (or false (or false (and true (or $x296 $x222)))))))
 (let (($x7 (and $x93 $x91)))
 (let (($x578 (and $x7 $x582)))
 (let (($x721 (=> $x578 $x713)))
 (not $x721))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x129 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x624 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x620 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x624))))
 (let ((?x20 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x437 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x411 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x344 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x623 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x344 false (concat ?x411 (concat ?x437 (concat ?x169 ?x20))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x620)))
 (let (($x160 (= $x623 true)))
 (let (($x209 (= $x160 true)))
 (let (($x430 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x203 (=> $x430 true)))
 (let ((?x590 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x149 (concat ?x590 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x416 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x389 (ite (= (_ bv0 32) (concat ?x416 (concat ?x274 ?x149))) (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x389 (_ bv1 32))))
 (let (($x601 (= $x430 $x105)))
 (let (($x56 (= false false)))
 (let (($x518 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x602 (=> $x518 $x56)))
 (let (($x408 (= ?x389 (_ bv0 32))))
 (let (($x599 (= $x518 $x408)))
 (let (($x522 (and $x599 $x602)))
 (let (($x598 (and $x522 $x601)))
 (let (($x542 (and $x598 $x203)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x449 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x41)))
 (let ((?x447 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x449)))
 (let (($x613 (= input.spec-%var-l-1.2.0 ?x447)))
 (let (($x555 (and $x613 $x542)))
 (let (($x605 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x224 (=> $x605 $x555)))
 (let ((?x217 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x217 (_ bv1 32))))
 (let (($x609 (= $x605 $x280)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x10 (=> $x65 $x56)))
 (let (($x161 (= ?x217 (_ bv0 32))))
 (let (($x60 (= $x65 $x161)))
 (let (($x146 (and $x60 $x10)))
 (let (($x612 (and $x146 $x609)))
 (let (($x550 (and $x612 $x224)))
 (let (($x182 (= $x550 true)))
 (let (($x15 (= $x182 true)))
 (let (($x544 (= $x15 true)))
 (let (($x442 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x445 (=> $x442 true)))
 (let (($x387 (= $x442 $x105)))
 (let (($x725 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x672 (=> $x725 $x56)))
 (let (($x490 (= $x725 $x408)))
 (let (($x494 (and $x490 $x672)))
 (let (($x23 (and $x494 $x387)))
 (let (($x140 (and $x23 $x445)))
 (let (($x525 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x447)))
 (let (($x375 (and $x525 $x140)))
 (let (($x165 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x127 (=> $x165 $x375)))
 (let (($x24 (= $x165 $x280)))
 (let (($x398 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x276 (=> $x398 $x56)))
 (let (($x566 (= $x398 $x161)))
 (let (($x564 (and $x566 $x276)))
 (let (($x425 (and $x564 $x24)))
 (let (($x428 (and $x425 $x127)))
 (let (($x63 (= $x428 true)))
 (let (($x385 (= $x63 true)))
 (let (($x200 (= $x385 true)))
 (let ((?x302 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x721 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv1 32))) (select input.dst.llvm-mem ?x302))))
 (let ((?x444 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv2 32))) ?x721))))
 (let ((?x77 (ite (= (_ bv0 32) ?x444) (_ bv0 32) (_ bv1 32))))
 (let (($x71 (= $x442 (bvuge ?x77 (_ bv1 32)))))
 (let (($x671 (= $x725 (= ?x77 (_ bv0 32)))))
 (let (($x698 (and $x671 $x672)))
 (let (($x440 (and $x698 $x71)))
 (let (($x414 (and $x440 $x445)))
 (let ((?x558 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x354 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x562 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x205 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x563 (concat (select input.dst.llvm-mem ?x205) (concat ?x562 (concat ?x354 ?x558)))))
 (let (($x569 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x563)))
 (let (($x443 (and $x569 $x414)))
 (let (($x352 (=> $x165 $x443)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x333 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x317 (= $x165 (bvuge ?x333 (_ bv1 32)))))
 (let (($x120 (= $x398 (= ?x333 (_ bv0 32)))))
 (let (($x123 (and $x120 $x276)))
 (let (($x319 (and $x123 $x317)))
 (let (($x446 (and $x319 $x352)))
 (let (($x349 (= $x446 true)))
 (let (($x441 (= $x349 true)))
 (let (($x17 (= $x441 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x395 (= (_ bv0 32) ?x72)))
 (let ((?x396 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x396)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x242 $x135)))
 (let (($x394 (and $x59 $x395)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x397 (and $x144 $x394)))
 (let (($x378 (= $x397 true)))
 (let (($x390 (= $x378 true)))
 (let (($x377 (= $x390 true)))
 (let ((?x508 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x69 (= (_ bv0 3) ?x508)))
 (let (($x74 (= $x69 true)))
 (let (($x286 (= $x74 true)))
 (let (($x233 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x457 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x467 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x457) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x457))))
 (let (($x253 (and true $x467)))
 (let (($x13 (and $x467 $x253)))
 (let ((?x121 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem ?x121))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv2 32))) ?x538))))
 (let (($x80 (= (bvand ?x238 (_ bv4294967288 32)) ?x238)))
 (let (($x43 (= (bvand ?x121 (_ bv4294967292 32)) ?x121)))
 (let (($x221 (and $x43 $x80)))
 (let (($x469 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x121 (bvsub ?x121 (_ bv4 32))) (bvult ?x121 (bvsub ?x121 (_ bv4 32))))))
 (let (($x79 (and (and (and (and (and $x253 $x469) $x43) $x221) $x13) $x233)))
 (let (($x284 (= true $x79)))
 (let (($x122 (not $x172)))
 (let (($x64 (=> $x122 $x284)))
 (let (($x341 (= $x64 true)))
 (let (($x174 (= $x341 true)))
 (let (($x529 (= $x174 true)))
 (let ((?x325 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x338 (bvneg ?x325)))
 (let (($x320 (= ?x338 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x329 (= $x320 true)))
 (let (($x536 (= $x329 true)))
 (let (($x283 (= $x122 true)))
 (let (($x312 (= $x283 true)))
 (let (($x314 (= $x312 true)))
 (let (($x537 (and $x314 $x536)))
 (let (($x365 (and $x537 $x529)))
 (let (($x193 (and $x365 $x286)))
 (let (($x376 (and $x193 $x377)))
 (let (($x95 (and $x376 $x17)))
 (let (($x31 (and $x95 $x200)))
 (let (($x220 (and $x31 $x544)))
 (let (($x181 (and $x165 $x220)))
 (let (($x297 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x305 (and $x297 $x181)))
 (let (($x243 (bvugt ?x121 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x121 (_ bv3 32))))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x191 (=> (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x262 $x243)))))))
 (let (($x249 (=> (and $x122 (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x262 $x243)))))))
 (let (($x34 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x205)))
 (let (($x192 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x302 (_ bv1 32))) (or false (or false (and true (or $x132 $x34)))))))
 (let (($x128 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x302 (_ bv1 32)))) (or false (or false (and true (or $x132 $x34)))))))
 (let (($x99 (and $x128 $x249)))
 (let (($x211 (and $x99 $x305)))
 (let (($x189 (=> $x211 $x209)))
 (not $x189)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x129 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x624 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x620 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x624))))
 (let ((?x20 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x437 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x411 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x344 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x623 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x344 false (concat ?x411 (concat ?x437 (concat ?x169 ?x20))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x620)))
 (let (($x160 (= $x623 true)))
 (let (($x209 (= $x160 true)))
 (let (($x430 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x203 (=> $x430 true)))
 (let ((?x590 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x149 (concat ?x590 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x416 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x389 (ite (= (_ bv0 32) (concat ?x416 (concat ?x274 ?x149))) (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x389 (_ bv1 32))))
 (let (($x601 (= $x430 $x105)))
 (let (($x56 (= false false)))
 (let (($x518 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x602 (=> $x518 $x56)))
 (let (($x408 (= ?x389 (_ bv0 32))))
 (let (($x599 (= $x518 $x408)))
 (let (($x522 (and $x599 $x602)))
 (let (($x598 (and $x522 $x601)))
 (let (($x542 (and $x598 $x203)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x449 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x41)))
 (let ((?x447 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x449)))
 (let (($x613 (= input.spec-%var-l-1.2.0 ?x447)))
 (let (($x555 (and $x613 $x542)))
 (let (($x605 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x224 (=> $x605 $x555)))
 (let ((?x217 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x217 (_ bv1 32))))
 (let (($x609 (= $x605 $x280)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x10 (=> $x65 $x56)))
 (let (($x161 (= ?x217 (_ bv0 32))))
 (let (($x60 (= $x65 $x161)))
 (let (($x146 (and $x60 $x10)))
 (let (($x612 (and $x146 $x609)))
 (let (($x550 (and $x612 $x224)))
 (let (($x182 (= $x550 true)))
 (let (($x15 (= $x182 true)))
 (let (($x544 (= $x15 true)))
 (let (($x442 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x445 (=> $x442 true)))
 (let (($x387 (= $x442 $x105)))
 (let (($x725 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x672 (=> $x725 $x56)))
 (let (($x490 (= $x725 $x408)))
 (let (($x494 (and $x490 $x672)))
 (let (($x23 (and $x494 $x387)))
 (let (($x140 (and $x23 $x445)))
 (let (($x525 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x447)))
 (let (($x375 (and $x525 $x140)))
 (let (($x165 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x127 (=> $x165 $x375)))
 (let (($x24 (= $x165 $x280)))
 (let (($x398 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x276 (=> $x398 $x56)))
 (let (($x566 (= $x398 $x161)))
 (let (($x564 (and $x566 $x276)))
 (let (($x425 (and $x564 $x24)))
 (let (($x428 (and $x425 $x127)))
 (let (($x63 (= $x428 true)))
 (let (($x385 (= $x63 true)))
 (let (($x200 (= $x385 true)))
 (let ((?x302 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x721 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv1 32))) (select input.dst.llvm-mem ?x302))))
 (let ((?x444 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv2 32))) ?x721))))
 (let ((?x77 (ite (= (_ bv0 32) ?x444) (_ bv0 32) (_ bv1 32))))
 (let (($x71 (= $x442 (bvuge ?x77 (_ bv1 32)))))
 (let (($x671 (= $x725 (= ?x77 (_ bv0 32)))))
 (let (($x698 (and $x671 $x672)))
 (let (($x440 (and $x698 $x71)))
 (let (($x414 (and $x440 $x445)))
 (let ((?x558 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x354 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x562 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x205 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x563 (concat (select input.dst.llvm-mem ?x205) (concat ?x562 (concat ?x354 ?x558)))))
 (let (($x569 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x563)))
 (let (($x443 (and $x569 $x414)))
 (let (($x352 (=> $x165 $x443)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x333 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x317 (= $x165 (bvuge ?x333 (_ bv1 32)))))
 (let (($x120 (= $x398 (= ?x333 (_ bv0 32)))))
 (let (($x123 (and $x120 $x276)))
 (let (($x319 (and $x123 $x317)))
 (let (($x446 (and $x319 $x352)))
 (let (($x349 (= $x446 true)))
 (let (($x441 (= $x349 true)))
 (let (($x17 (= $x441 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x395 (= (_ bv0 32) ?x72)))
 (let ((?x396 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x396)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x242 $x135)))
 (let (($x394 (and $x59 $x395)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x397 (and $x144 $x394)))
 (let (($x378 (= $x397 true)))
 (let (($x390 (= $x378 true)))
 (let (($x377 (= $x390 true)))
 (let ((?x508 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x69 (= (_ bv0 3) ?x508)))
 (let (($x74 (= $x69 true)))
 (let (($x286 (= $x74 true)))
 (let (($x233 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x457 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x467 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x457) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x457))))
 (let (($x253 (and true $x467)))
 (let (($x13 (and $x467 $x253)))
 (let ((?x121 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem ?x121))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv2 32))) ?x538))))
 (let (($x80 (= (bvand ?x238 (_ bv4294967288 32)) ?x238)))
 (let (($x43 (= (bvand ?x121 (_ bv4294967292 32)) ?x121)))
 (let (($x221 (and $x43 $x80)))
 (let (($x469 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x121 (bvsub ?x121 (_ bv4 32))) (bvult ?x121 (bvsub ?x121 (_ bv4 32))))))
 (let (($x79 (and (and (and (and (and $x253 $x469) $x43) $x221) $x13) $x233)))
 (let (($x284 (= true $x79)))
 (let (($x122 (not $x172)))
 (let (($x64 (=> $x122 $x284)))
 (let (($x341 (= $x64 true)))
 (let (($x174 (= $x341 true)))
 (let (($x529 (= $x174 true)))
 (let ((?x325 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x338 (bvneg ?x325)))
 (let (($x320 (= ?x338 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x329 (= $x320 true)))
 (let (($x536 (= $x329 true)))
 (let (($x283 (= $x122 true)))
 (let (($x312 (= $x283 true)))
 (let (($x314 (= $x312 true)))
 (let (($x537 (and $x314 $x536)))
 (let (($x365 (and $x537 $x529)))
 (let (($x193 (and $x365 $x286)))
 (let (($x376 (and $x193 $x377)))
 (let (($x95 (and $x376 $x17)))
 (let (($x31 (and $x95 $x200)))
 (let (($x220 (and $x31 $x544)))
 (let (($x181 (and $x165 $x220)))
 (let (($x297 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x305 (and $x297 $x181)))
 (let (($x243 (bvugt ?x121 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x121 (_ bv3 32))))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x191 (=> (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x262 $x243)))))))
 (let (($x249 (=> (and $x122 (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x262 $x243)))))))
 (let (($x34 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x205)))
 (let (($x192 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x302 (_ bv1 32))) (or false (or false (and true (or $x132 $x34)))))))
 (let (($x128 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x302 (_ bv1 32)))) (or false (or false (and true (or $x132 $x34)))))))
 (let (($x99 (and $x128 $x249)))
 (let (($x211 (and $x99 $x305)))
 (let (($x189 (=> $x211 $x209)))
 (not $x189)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_14)
(= input.dst.llvm-mem @fun_23)
(function @fun_14
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_14 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b10000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_23
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_10607 (_ BitVec 32)) (BOUND_VARIABLE_10608 (_ BitVec 32)) (BOUND_VARIABLE_10609 (_ BitVec 32)) (BOUND_VARIABLE_10610 Bool) (BOUND_VARIABLE_10611 (_ BitVec 32)) (BOUND_VARIABLE_10612 (_ BitVec 32)) (BOUND_VARIABLE_10613 (_ BitVec 32)) (BOUND_VARIABLE_10614 (_ BitVec 32)) (BOUND_VARIABLE_10615 (_ BitVec 32)) (BOUND_VARIABLE_10616 (_ BitVec 32)) (BOUND_VARIABLE_10617 Bool) (BOUND_VARIABLE_10618 (_ BitVec 32)) (BOUND_VARIABLE_10619 (_ BitVec 32)) (BOUND_VARIABLE_10620 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv55134848 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv461028184 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv461028184 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv461028187 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000001c)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00002022)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00002020)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00002020)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000001f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000001c)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00002022)
              (= x!8 #x00002020)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00002022)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 82
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x493 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x474 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x474 (_ bv1 32))) (select input.dst.llvm-mem ?x474))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x474 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x474 (_ bv2 32))) ?x255))))
 (let ((?x130 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x155 (concat ?x241 (concat ?x49 (concat ?x68 ?x130)))))
 (let (($x628 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l ?x155 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x118 ?x493 false)))
 (let (($x513 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x245 (=> $x513 $x628)))
 (let ((?x35 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x269 (bvuge ?x35 (_ bv1 32))))
 (let (($x22 (= $x513 $x269)))
 (let (($x86 (= false false)))
 (let (($x81 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x433 (=> $x81 $x86)))
 (let (($x183 (= ?x35 (_ bv0 32))))
 (let (($x503 (= $x81 $x183)))
 (let (($x28 (and $x503 $x433)))
 (let (($x111 (and $x28 $x22)))
 (let (($x273 (and $x111 $x245)))
 (let (($x514 (= $x273 true)))
 (let (($x655 (= $x514 true)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x282 (concat ?x38 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x285 (concat ?x30 (concat ?x184 ?x282))))
 (let (($x164 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x285 ?x155 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x118 ?x493 false)))
 (let (($x251 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x110 (=> $x251 $x164)))
 (let ((?x258 (ite (= (_ bv0 32) ?x285) (_ bv0 32) (_ bv1 32))))
 (let (($x42 (bvuge ?x258 (_ bv1 32))))
 (let (($x532 (= $x251 $x42)))
 (let (($x114 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x573 (=> $x114 $x86)))
 (let (($x275 (= ?x258 (_ bv0 32))))
 (let (($x626 (= $x114 $x275)))
 (let (($x198 (and $x626 $x573)))
 (let (($x117 (and $x198 $x532)))
 (let (($x227 (and $x117 $x110)))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x554)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x236)))
 (let (($x486 (= input.spec-%var-l-1.2.0 ?x266)))
 (let (($x11 (and $x486 $x227)))
 (let (($x400 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x246 (=> $x400 $x11)))
 (let (($x36 (= $x400 $x269)))
 (let (($x78 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x454 (=> $x78 $x86)))
 (let (($x401 (= $x78 $x183)))
 (let (($x374 (and $x401 $x454)))
 (let (($x438 (and $x374 $x36)))
 (let (($x507 (and $x438 $x246)))
 (let (($x531 (= $x507 true)))
 (let (($x293 (= $x531 true)))
 (let (($x138 (= $x293 true)))
 (let (($x478 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x285 ?x155 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x118 ?x493 false)))
 (let (($x524 (=> $x513 $x478)))
 (let (($x379 (= $x513 $x42)))
 (let (($x596 (= $x81 $x275)))
 (let (($x29 (and $x596 $x433)))
 (let (($x409 (and $x29 $x379)))
 (let (($x392 (and $x409 $x524)))
 (let (($x399 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x266)))
 (let (($x439 (and $x399 $x392)))
 (let (($x587 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x369 (=> $x587 $x439)))
 (let (($x210 (= $x587 $x269)))
 (let (($x460 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x277 (=> $x460 $x86)))
 (let (($x107 (= $x460 $x183)))
 (let (($x535 (and $x107 $x277)))
 (let (($x340 (and $x535 $x210)))
 (let (($x543 (and $x340 $x369)))
 (let (($x358 (= $x543 true)))
 (let (($x75 (= $x358 true)))
 (let (($x423 (= $x75 true)))
 (let ((?x296 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x608 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x271))))
 (let (($x480 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x608 ?x155 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x118 ?x493 false)))
 (let (($x463 (=> $x513 $x480)))
 (let (($x92 (= $x513 (bvuge (ite (= (_ bv0 32) ?x608) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x429 (= $x81 (= (ite (= (_ bv0 32) ?x608) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x323 (and $x429 $x433)))
 (let (($x511 (and $x323 $x92)))
 (let (($x472 (and $x511 $x463)))
 (let ((?x601 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x108 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x15 (concat (select input.dst.llvm-mem ?x108) (concat ?x224 (concat ?x203 ?x601)))))
 (let (($x544 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x15)))
 (let (($x137 (and $x544 $x472)))
 (let (($x306 (=> $x587 $x137)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x551 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x416 (= $x587 (bvuge ?x551 (_ bv1 32)))))
 (let (($x415 (= $x460 (= ?x551 (_ bv0 32)))))
 (let (($x310 (and $x415 $x277)))
 (let (($x225 (and $x310 $x416)))
 (let (($x290 (and $x225 $x306)))
 (let (($x292 (= $x290 true)))
 (let (($x98 (= $x292 true)))
 (let (($x298 (= $x98 true)))
 (let ((?x377 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x376 (= (_ bv0 32) ?x377)))
 (let ((?x397 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x378 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x397)))
 (let (($x394 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x390 (and $x394 $x378)))
 (let (($x5 (and $x390 $x376)))
 (let (($x395 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x398 (and $x395 $x5)))
 (let (($x333 (= $x398 true)))
 (let (($x119 (= $x333 true)))
 (let (($x120 (= $x119 true)))
 (let ((?x144 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x242 (= (_ bv0 3) ?x144)))
 (let (($x396 (= $x242 true)))
 (let (($x135 (= $x396 true)))
 (let (($x284 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x506 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x469 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x506) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x506))))
 (let (($x134 (and true $x469)))
 (let (($x233 (and $x469 $x134)))
 (let ((?x216 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x538))))
 (let (($x347 (= (bvand ?x221 (_ bv4294967288 32)) ?x221)))
 (let (($x252 (= (bvand ?x216 (_ bv4294967292 32)) ?x216)))
 (let (($x32 (and $x252 $x347)))
 (let (($x455 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x216 (bvsub ?x216 (_ bv4 32))) (bvult ?x216 (bvsub ?x216 (_ bv4 32))))))
 (let (($x365 (and (and (and (and (and $x134 $x455) $x252) $x32) $x233) $x284)))
 (let (($x500 (= true $x365)))
 (let (($x122 (not $x172)))
 (let (($x508 (=> $x122 $x500)))
 (let (($x69 (= $x508 true)))
 (let (($x74 (= $x69 true)))
 (let (($x286 (= $x74 true)))
 (let ((?x537 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x39 (bvneg ?x537)))
 (let (($x471 (= ?x39 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x466 (= $x471 true)))
 (let (($x467 (= $x466 true)))
 (let (($x338 (= $x122 true)))
 (let (($x315 (= $x338 true)))
 (let (($x320 (= $x315 true)))
 (let (($x253 (and $x320 $x467)))
 (let (($x193 (and $x253 $x286)))
 (let (($x59 (and $x193 $x135)))
 (let (($x56 (and $x59 $x120)))
 (let (($x54 (and $x56 $x298)))
 (let (($x534 (and $x54 $x423)))
 (let (($x143 (and $x534 $x138)))
 (let (($x214 (and $x587 $x143)))
 (let (($x312 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x141 (and $x312 $x214)))
 (let (($x91 (bvugt ?x216 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x216 (_ bv3 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x297 (=> (bvule ?x216 (bvsub (bvadd ?x216 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x176 $x91)))))))
 (let (($x309 (=> (and $x122 (bvule ?x216 (bvsub (bvadd ?x216 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x176 $x91)))))))
 (let (($x93 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x58 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x296 (_ bv1 32))) (or false (or false (and true (or $x44 $x93)))))))
 (let (($x12 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x296 (_ bv1 32)))) (or false (or false (and true (or $x44 $x93)))))))
 (let (($x37 (and $x12 $x309)))
 (let (($x553 (and $x37 $x141)))
 (let (($x654 (=> $x553 $x655)))
 (not $x654))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x493 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x474 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x474 (_ bv1 32))) (select input.dst.llvm-mem ?x474))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x474 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x474 (_ bv2 32))) ?x255))))
 (let ((?x130 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x155 (concat ?x241 (concat ?x49 (concat ?x68 ?x130)))))
 (let (($x628 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l ?x155 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x118 ?x493 false)))
 (let (($x513 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x245 (=> $x513 $x628)))
 (let ((?x35 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x269 (bvuge ?x35 (_ bv1 32))))
 (let (($x22 (= $x513 $x269)))
 (let (($x86 (= false false)))
 (let (($x81 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x433 (=> $x81 $x86)))
 (let (($x183 (= ?x35 (_ bv0 32))))
 (let (($x503 (= $x81 $x183)))
 (let (($x28 (and $x503 $x433)))
 (let (($x111 (and $x28 $x22)))
 (let (($x273 (and $x111 $x245)))
 (let (($x514 (= $x273 true)))
 (let (($x655 (= $x514 true)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x282 (concat ?x38 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x285 (concat ?x30 (concat ?x184 ?x282))))
 (let (($x164 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x285 ?x155 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x118 ?x493 false)))
 (let (($x251 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x110 (=> $x251 $x164)))
 (let ((?x258 (ite (= (_ bv0 32) ?x285) (_ bv0 32) (_ bv1 32))))
 (let (($x42 (bvuge ?x258 (_ bv1 32))))
 (let (($x532 (= $x251 $x42)))
 (let (($x114 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x573 (=> $x114 $x86)))
 (let (($x275 (= ?x258 (_ bv0 32))))
 (let (($x626 (= $x114 $x275)))
 (let (($x198 (and $x626 $x573)))
 (let (($x117 (and $x198 $x532)))
 (let (($x227 (and $x117 $x110)))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x554)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x236)))
 (let (($x486 (= input.spec-%var-l-1.2.0 ?x266)))
 (let (($x11 (and $x486 $x227)))
 (let (($x400 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x246 (=> $x400 $x11)))
 (let (($x36 (= $x400 $x269)))
 (let (($x78 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x454 (=> $x78 $x86)))
 (let (($x401 (= $x78 $x183)))
 (let (($x374 (and $x401 $x454)))
 (let (($x438 (and $x374 $x36)))
 (let (($x507 (and $x438 $x246)))
 (let (($x531 (= $x507 true)))
 (let (($x293 (= $x531 true)))
 (let (($x138 (= $x293 true)))
 (let (($x478 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x285 ?x155 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x118 ?x493 false)))
 (let (($x524 (=> $x513 $x478)))
 (let (($x379 (= $x513 $x42)))
 (let (($x596 (= $x81 $x275)))
 (let (($x29 (and $x596 $x433)))
 (let (($x409 (and $x29 $x379)))
 (let (($x392 (and $x409 $x524)))
 (let (($x399 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x266)))
 (let (($x439 (and $x399 $x392)))
 (let (($x587 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x369 (=> $x587 $x439)))
 (let (($x210 (= $x587 $x269)))
 (let (($x460 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x277 (=> $x460 $x86)))
 (let (($x107 (= $x460 $x183)))
 (let (($x535 (and $x107 $x277)))
 (let (($x340 (and $x535 $x210)))
 (let (($x543 (and $x340 $x369)))
 (let (($x358 (= $x543 true)))
 (let (($x75 (= $x358 true)))
 (let (($x423 (= $x75 true)))
 (let ((?x296 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x608 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x271))))
 (let (($x480 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x608 ?x155 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x118 ?x493 false)))
 (let (($x463 (=> $x513 $x480)))
 (let (($x92 (= $x513 (bvuge (ite (= (_ bv0 32) ?x608) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x429 (= $x81 (= (ite (= (_ bv0 32) ?x608) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x323 (and $x429 $x433)))
 (let (($x511 (and $x323 $x92)))
 (let (($x472 (and $x511 $x463)))
 (let ((?x601 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x108 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x15 (concat (select input.dst.llvm-mem ?x108) (concat ?x224 (concat ?x203 ?x601)))))
 (let (($x544 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x15)))
 (let (($x137 (and $x544 $x472)))
 (let (($x306 (=> $x587 $x137)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x551 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x416 (= $x587 (bvuge ?x551 (_ bv1 32)))))
 (let (($x415 (= $x460 (= ?x551 (_ bv0 32)))))
 (let (($x310 (and $x415 $x277)))
 (let (($x225 (and $x310 $x416)))
 (let (($x290 (and $x225 $x306)))
 (let (($x292 (= $x290 true)))
 (let (($x98 (= $x292 true)))
 (let (($x298 (= $x98 true)))
 (let ((?x377 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x376 (= (_ bv0 32) ?x377)))
 (let ((?x397 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x378 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x397)))
 (let (($x394 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x390 (and $x394 $x378)))
 (let (($x5 (and $x390 $x376)))
 (let (($x395 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x398 (and $x395 $x5)))
 (let (($x333 (= $x398 true)))
 (let (($x119 (= $x333 true)))
 (let (($x120 (= $x119 true)))
 (let ((?x144 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x242 (= (_ bv0 3) ?x144)))
 (let (($x396 (= $x242 true)))
 (let (($x135 (= $x396 true)))
 (let (($x284 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x506 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x469 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x506) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x506))))
 (let (($x134 (and true $x469)))
 (let (($x233 (and $x469 $x134)))
 (let ((?x216 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x538))))
 (let (($x347 (= (bvand ?x221 (_ bv4294967288 32)) ?x221)))
 (let (($x252 (= (bvand ?x216 (_ bv4294967292 32)) ?x216)))
 (let (($x32 (and $x252 $x347)))
 (let (($x455 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x216 (bvsub ?x216 (_ bv4 32))) (bvult ?x216 (bvsub ?x216 (_ bv4 32))))))
 (let (($x365 (and (and (and (and (and $x134 $x455) $x252) $x32) $x233) $x284)))
 (let (($x500 (= true $x365)))
 (let (($x122 (not $x172)))
 (let (($x508 (=> $x122 $x500)))
 (let (($x69 (= $x508 true)))
 (let (($x74 (= $x69 true)))
 (let (($x286 (= $x74 true)))
 (let ((?x537 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x39 (bvneg ?x537)))
 (let (($x471 (= ?x39 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x466 (= $x471 true)))
 (let (($x467 (= $x466 true)))
 (let (($x338 (= $x122 true)))
 (let (($x315 (= $x338 true)))
 (let (($x320 (= $x315 true)))
 (let (($x253 (and $x320 $x467)))
 (let (($x193 (and $x253 $x286)))
 (let (($x59 (and $x193 $x135)))
 (let (($x56 (and $x59 $x120)))
 (let (($x54 (and $x56 $x298)))
 (let (($x534 (and $x54 $x423)))
 (let (($x143 (and $x534 $x138)))
 (let (($x214 (and $x587 $x143)))
 (let (($x312 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x141 (and $x312 $x214)))
 (let (($x91 (bvugt ?x216 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x216 (_ bv3 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x297 (=> (bvule ?x216 (bvsub (bvadd ?x216 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x176 $x91)))))))
 (let (($x309 (=> (and $x122 (bvule ?x216 (bvsub (bvadd ?x216 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x176 $x91)))))))
 (let (($x93 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x58 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x296 (_ bv1 32))) (or false (or false (and true (or $x44 $x93)))))))
 (let (($x12 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x296 (_ bv1 32)))) (or false (or false (and true (or $x44 $x93)))))))
 (let (($x37 (and $x12 $x309)))
 (let (($x553 (and $x37 $x141)))
 (let (($x654 (=> $x553 $x655)))
 (not $x654))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_15)
(= input.dst.llvm-mem @fun_24)
(function @fun_15
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_15 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (=
  (@fun_15 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b10000000000000000000000000000000 #b10000000000000000000000000000000
   #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_24
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_8010 (_ BitVec 32)) (BOUND_VARIABLE_8011 (_ BitVec 32)) (BOUND_VARIABLE_8012 (_ BitVec 32)) (BOUND_VARIABLE_8013 (_ BitVec 32)) (BOUND_VARIABLE_8014 (_ BitVec 32)) (BOUND_VARIABLE_8015 (_ BitVec 32)) (BOUND_VARIABLE_8016 Bool) (BOUND_VARIABLE_8017 (_ BitVec 32)) (BOUND_VARIABLE_8018 (_ BitVec 32)) (BOUND_VARIABLE_8019 (_ BitVec 32)) (BOUND_VARIABLE_8020 (_ BitVec 32)) (BOUND_VARIABLE_8021 (_ BitVec 32)) (BOUND_VARIABLE_8022 (_ BitVec 32)) (BOUND_VARIABLE_8023 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1210452064 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2165454152 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2165454152 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2165454155 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x00000046)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x40))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000046)
              (= x!8 #x40404040)
              (= x!9 #x40404040)
              (= x!10 #x00000046)
              (= x!11 #x40404040)
              (= x!12 #x00000001)
              (= x!13 false))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000046)
              (= x!8 #x00000040)
              (= x!9 #x40404040)
              (= x!10 #x00000046)
              (= x!11 #x40404040)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 83
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x209 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem ?x209))))
 (let ((?x431 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv2 32))) ?x162))))
 (let ((?x624 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x621 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x125 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x41 (concat ?x24 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x447 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x375 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x65 (concat ?x375 (concat ?x447 ?x41))))
 (let (($x380 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x65 ?x125 false (concat ?x160 (concat ?x189 (concat ?x621 ?x624))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x431)))
 (let ((?x634 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x592 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x634)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x592)))
 (let (($x382 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x541)))
 (let (($x451 (and $x382 $x380)))
 (let (($x567 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x254 (=> $x567 $x451)))
 (let ((?x391 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x391 (_ bv1 32))))
 (let (($x115 (= $x567 $x318)))
 (let (($x199 (= false false)))
 (let (($x655 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x273 (=> $x655 $x199)))
 (let (($x521 (= ?x391 (_ bv0 32))))
 (let (($x166 (= $x655 $x521)))
 (let (($x202 (and $x166 $x273)))
 (let (($x97 (and $x202 $x115)))
 (let (($x515 (and $x97 $x254)))
 (let (($x403 (= $x515 true)))
 (let (($x436 (= $x403 true)))
 (let (($x642 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x520 (=> $x642 true)))
 (let ((?x200 (ite (= (_ bv0 32) ?x65) (_ bv0 32) (_ bv1 32))))
 (let (($x140 (bvuge ?x200 (_ bv1 32))))
 (let (($x641 (= $x642 $x140)))
 (let (($x411 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x343 (=> $x411 $x199)))
 (let (($x31 (= ?x200 (_ bv0 32))))
 (let (($x82 (= $x411 $x31)))
 (let (($x261 (and $x82 $x343)))
 (let (($x588 (and $x261 $x641)))
 (let (($x591 (and $x588 $x520)))
 (let (($x388 (= input.spec-%var-l-1.2.0 ?x541)))
 (let (($x559 (and $x388 $x591)))
 (let (($x627 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x70 (=> $x627 $x559)))
 (let (($x481 (= $x627 $x318)))
 (let (($x173 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x169 (=> $x173 $x199)))
 (let (($x356 (= $x173 $x521)))
 (let (($x625 (and $x356 $x169)))
 (let (($x448 (and $x625 $x481)))
 (let (($x560 (and $x448 $x70)))
 (let (($x501 (= $x560 true)))
 (let (($x635 (= $x501 true)))
 (let (($x576 (= $x635 true)))
 (let (($x319 (=> $x567 true)))
 (let (($x490 (= $x567 $x140)))
 (let (($x57 (= $x655 $x31)))
 (let (($x194 (and $x57 $x273)))
 (let (($x387 (and $x194 $x490)))
 (let (($x23 (and $x387 $x319)))
 (let (($x190 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x541)))
 (let (($x146 (and $x190 $x23)))
 (let (($x480 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x599 (=> $x480 $x146)))
 (let (($x248 (= $x480 $x318)))
 (let (($x48 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x19 (=> $x48 $x199)))
 (let (($x552 (= $x48 $x521)))
 (let (($x519 (and $x552 $x19)))
 (let (($x324 (and $x519 $x248)))
 (let (($x602 (and $x324 $x599)))
 (let (($x613 (= $x602 true)))
 (let (($x603 (= $x613 true)))
 (let (($x609 (= $x603 true)))
 (let ((?x132 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem ?x132))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv2 32))) ?x314))))
 (let ((?x325 (ite (= (_ bv0 32) ?x208) (_ bv0 32) (_ bv1 32))))
 (let (($x485 (= $x567 (bvuge ?x325 (_ bv1 32)))))
 (let (($x245 (= $x655 (= ?x325 (_ bv0 32)))))
 (let (($x654 (and $x245 $x273)))
 (let (($x402 (and $x654 $x485)))
 (let (($x354 (and $x402 $x319)))
 (let ((?x275 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x409 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x90 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x392 (concat (select input.dst.llvm-mem ?x90) (concat ?x409 (concat ?x29 ?x275)))))
 (let (($x439 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x392)))
 (let (($x565 (and $x439 $x354)))
 (let (($x699 (=> $x480 $x565)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x526 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x472 (= $x480 (bvuge ?x526 (_ bv1 32)))))
 (let (($x103 (= $x48 (= ?x526 (_ bv0 32)))))
 (let (($x255 (and $x103 $x19)))
 (let (($x137 (and $x255 $x472)))
 (let (($x721 (and $x137 $x699)))
 (let (($x570 (= $x721 true)))
 (let (($x700 (= $x570 true)))
 (let (($x206 (= $x700 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x120)))
 (let ((?x398 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x333 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x398)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x5 $x333)))
 (let (($x425 (and $x119 $x56)))
 (let (($x376 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x460 (and $x376 $x425)))
 (let (($x551 (= $x460 true)))
 (let (($x393 (= $x551 true)))
 (let (($x415 (= $x393 true)))
 (let ((?x395 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x394 (= (_ bv0 3) ?x395)))
 (let (($x397 (= $x394 true)))
 (let (($x378 (= $x397 true)))
 (let (($x500 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x465 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x455 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x465) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x465))))
 (let (($x64 (and true $x455)))
 (let (($x284 (and $x455 $x64)))
 (let ((?x244 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x538))))
 (let (($x529 (= (bvand ?x32 (_ bv4294967288 32)) ?x32)))
 (let (($x238 (= (bvand ?x244 (_ bv4294967292 32)) ?x244)))
 (let (($x79 (and $x238 $x529)))
 (let (($x207 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x244 (bvsub ?x244 (_ bv4 32))) (bvult ?x244 (bvsub ?x244 (_ bv4 32))))))
 (let (($x193 (and (and (and (and (and $x64 $x207) $x238) $x79) $x284) $x500)))
 (let (($x303 (= true $x193)))
 (let (($x122 (not $x172)))
 (let (($x144 (=> $x122 $x303)))
 (let (($x242 (= $x144 true)))
 (let (($x396 (= $x242 true)))
 (let (($x135 (= $x396 true)))
 (let ((?x253 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x483 (bvneg ?x253)))
 (let (($x470 (= ?x483 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x94 (= $x470 true)))
 (let (($x469 (= $x94 true)))
 (let (($x39 (= $x122 true)))
 (let (($x457 (= $x39 true)))
 (let (($x471 (= $x457 true)))
 (let (($x134 (and $x471 $x469)))
 (let (($x59 (and $x134 $x135)))
 (let (($x390 (and $x59 $x378)))
 (let (($x86 (and $x390 $x415)))
 (let (($x53 (and $x86 $x206)))
 (let (($x612 (and $x53 $x609)))
 (let (($x637 (and $x612 $x576)))
 (let (($x593 (and $x480 $x637)))
 (let (($x315 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x571 (and $x315 $x593)))
 (let (($x249 (bvugt ?x244 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x244 (_ bv3 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x312 (=> (bvule ?x244 (bvsub (bvadd ?x244 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x191 $x249)))))))
 (let (($x88 (=> (and $x122 (bvule ?x244 (bvsub (bvadd ?x244 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x191 $x249)))))))
 (let (($x128 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x243 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x132 (_ bv1 32))) (or false (or false (and true (or $x192 $x128)))))))
 (let (($x205 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x132 (_ bv1 32)))) (or false (or false (and true (or $x192 $x128)))))))
 (let (($x186 (and $x205 $x88)))
 (let (($x557 (and $x186 $x571)))
 (let (($x179 (=> $x557 $x436)))
 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x209 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem ?x209))))
 (let ((?x431 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv2 32))) ?x162))))
 (let ((?x624 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x621 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x125 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x41 (concat ?x24 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x447 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x375 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x65 (concat ?x375 (concat ?x447 ?x41))))
 (let (($x380 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x65 ?x125 false (concat ?x160 (concat ?x189 (concat ?x621 ?x624))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x431)))
 (let ((?x634 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x592 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x634)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x592)))
 (let (($x382 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x541)))
 (let (($x451 (and $x382 $x380)))
 (let (($x567 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x254 (=> $x567 $x451)))
 (let ((?x391 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x391 (_ bv1 32))))
 (let (($x115 (= $x567 $x318)))
 (let (($x199 (= false false)))
 (let (($x655 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x273 (=> $x655 $x199)))
 (let (($x521 (= ?x391 (_ bv0 32))))
 (let (($x166 (= $x655 $x521)))
 (let (($x202 (and $x166 $x273)))
 (let (($x97 (and $x202 $x115)))
 (let (($x515 (and $x97 $x254)))
 (let (($x403 (= $x515 true)))
 (let (($x436 (= $x403 true)))
 (let (($x642 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x520 (=> $x642 true)))
 (let ((?x200 (ite (= (_ bv0 32) ?x65) (_ bv0 32) (_ bv1 32))))
 (let (($x140 (bvuge ?x200 (_ bv1 32))))
 (let (($x641 (= $x642 $x140)))
 (let (($x411 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x343 (=> $x411 $x199)))
 (let (($x31 (= ?x200 (_ bv0 32))))
 (let (($x82 (= $x411 $x31)))
 (let (($x261 (and $x82 $x343)))
 (let (($x588 (and $x261 $x641)))
 (let (($x591 (and $x588 $x520)))
 (let (($x388 (= input.spec-%var-l-1.2.0 ?x541)))
 (let (($x559 (and $x388 $x591)))
 (let (($x627 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x70 (=> $x627 $x559)))
 (let (($x481 (= $x627 $x318)))
 (let (($x173 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x169 (=> $x173 $x199)))
 (let (($x356 (= $x173 $x521)))
 (let (($x625 (and $x356 $x169)))
 (let (($x448 (and $x625 $x481)))
 (let (($x560 (and $x448 $x70)))
 (let (($x501 (= $x560 true)))
 (let (($x635 (= $x501 true)))
 (let (($x576 (= $x635 true)))
 (let (($x319 (=> $x567 true)))
 (let (($x490 (= $x567 $x140)))
 (let (($x57 (= $x655 $x31)))
 (let (($x194 (and $x57 $x273)))
 (let (($x387 (and $x194 $x490)))
 (let (($x23 (and $x387 $x319)))
 (let (($x190 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x541)))
 (let (($x146 (and $x190 $x23)))
 (let (($x480 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x599 (=> $x480 $x146)))
 (let (($x248 (= $x480 $x318)))
 (let (($x48 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x19 (=> $x48 $x199)))
 (let (($x552 (= $x48 $x521)))
 (let (($x519 (and $x552 $x19)))
 (let (($x324 (and $x519 $x248)))
 (let (($x602 (and $x324 $x599)))
 (let (($x613 (= $x602 true)))
 (let (($x603 (= $x613 true)))
 (let (($x609 (= $x603 true)))
 (let ((?x132 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem ?x132))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv2 32))) ?x314))))
 (let ((?x325 (ite (= (_ bv0 32) ?x208) (_ bv0 32) (_ bv1 32))))
 (let (($x485 (= $x567 (bvuge ?x325 (_ bv1 32)))))
 (let (($x245 (= $x655 (= ?x325 (_ bv0 32)))))
 (let (($x654 (and $x245 $x273)))
 (let (($x402 (and $x654 $x485)))
 (let (($x354 (and $x402 $x319)))
 (let ((?x275 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x409 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x90 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x392 (concat (select input.dst.llvm-mem ?x90) (concat ?x409 (concat ?x29 ?x275)))))
 (let (($x439 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x392)))
 (let (($x565 (and $x439 $x354)))
 (let (($x699 (=> $x480 $x565)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x526 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x472 (= $x480 (bvuge ?x526 (_ bv1 32)))))
 (let (($x103 (= $x48 (= ?x526 (_ bv0 32)))))
 (let (($x255 (and $x103 $x19)))
 (let (($x137 (and $x255 $x472)))
 (let (($x721 (and $x137 $x699)))
 (let (($x570 (= $x721 true)))
 (let (($x700 (= $x570 true)))
 (let (($x206 (= $x700 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x120)))
 (let ((?x398 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x333 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x398)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x5 $x333)))
 (let (($x425 (and $x119 $x56)))
 (let (($x376 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x460 (and $x376 $x425)))
 (let (($x551 (= $x460 true)))
 (let (($x393 (= $x551 true)))
 (let (($x415 (= $x393 true)))
 (let ((?x395 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x394 (= (_ bv0 3) ?x395)))
 (let (($x397 (= $x394 true)))
 (let (($x378 (= $x397 true)))
 (let (($x500 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x465 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x455 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x465) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x465))))
 (let (($x64 (and true $x455)))
 (let (($x284 (and $x455 $x64)))
 (let ((?x244 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x538))))
 (let (($x529 (= (bvand ?x32 (_ bv4294967288 32)) ?x32)))
 (let (($x238 (= (bvand ?x244 (_ bv4294967292 32)) ?x244)))
 (let (($x79 (and $x238 $x529)))
 (let (($x207 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x244 (bvsub ?x244 (_ bv4 32))) (bvult ?x244 (bvsub ?x244 (_ bv4 32))))))
 (let (($x193 (and (and (and (and (and $x64 $x207) $x238) $x79) $x284) $x500)))
 (let (($x303 (= true $x193)))
 (let (($x122 (not $x172)))
 (let (($x144 (=> $x122 $x303)))
 (let (($x242 (= $x144 true)))
 (let (($x396 (= $x242 true)))
 (let (($x135 (= $x396 true)))
 (let ((?x253 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x483 (bvneg ?x253)))
 (let (($x470 (= ?x483 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x94 (= $x470 true)))
 (let (($x469 (= $x94 true)))
 (let (($x39 (= $x122 true)))
 (let (($x457 (= $x39 true)))
 (let (($x471 (= $x457 true)))
 (let (($x134 (and $x471 $x469)))
 (let (($x59 (and $x134 $x135)))
 (let (($x390 (and $x59 $x378)))
 (let (($x86 (and $x390 $x415)))
 (let (($x53 (and $x86 $x206)))
 (let (($x612 (and $x53 $x609)))
 (let (($x637 (and $x612 $x576)))
 (let (($x593 (and $x480 $x637)))
 (let (($x315 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x571 (and $x315 $x593)))
 (let (($x249 (bvugt ?x244 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x244 (_ bv3 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x312 (=> (bvule ?x244 (bvsub (bvadd ?x244 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x191 $x249)))))))
 (let (($x88 (=> (and $x122 (bvule ?x244 (bvsub (bvadd ?x244 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x191 $x249)))))))
 (let (($x128 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x243 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x132 (_ bv1 32))) (or false (or false (and true (or $x192 $x128)))))))
 (let (($x205 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x132 (_ bv1 32)))) (or false (or false (and true (or $x192 $x128)))))))
 (let (($x186 (and $x205 $x88)))
 (let (($x557 (and $x186 $x571)))
 (let (($x179 (=> $x557 $x436)))
 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_14)
(= input.dst.llvm-mem @fun_23)
(function @fun_14
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_14 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_23
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_8124 (_ BitVec 32)) (BOUND_VARIABLE_8125 (_ BitVec 32)) (BOUND_VARIABLE_8126 (_ BitVec 32)) (BOUND_VARIABLE_8127 Bool) (BOUND_VARIABLE_8128 (_ BitVec 32)) (BOUND_VARIABLE_8129 (_ BitVec 32)) (BOUND_VARIABLE_8130 (_ BitVec 32)) (BOUND_VARIABLE_8131 (_ BitVec 32)) (BOUND_VARIABLE_8132 (_ BitVec 32)) (BOUND_VARIABLE_8133 (_ BitVec 32)) (BOUND_VARIABLE_8134 Bool) (BOUND_VARIABLE_8135 (_ BitVec 32)) (BOUND_VARIABLE_8136 (_ BitVec 32)) (BOUND_VARIABLE_8137 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4 32) (_ bv255 8)) (_ bv1 32) (_ bv255 8)) (_ bv3 32) (_ bv255 8)) (_ bv2 32) (_ bv255 8)) (_ bv1353910816 32) (_ bv255 8)) (_ bv1353910817 32) (_ bv255 8)) (_ bv1353910818 32) (_ bv255 8)) (_ bv1353910819 32) (_ bv255 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1353910816 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2294617544 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2294617544 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2294617547 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffe0004)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #xc126b967)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00020000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x9c09b404)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x40))
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #xbfbfbfbf)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffe0007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffe0004)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000001)
              (= x!8 #x40404040)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x40404040)
              (= x!12 #x00000001)
              (= x!13 #x40404040))
      true
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 84
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x299 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x185 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x147))))
 (let ((?x316 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x85 (concat ?x337 (concat ?x6 (concat ?x26 ?x316)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x374 (concat ?x78 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x161 (concat ?x281 (concat ?x18 ?x374))))
 (let (($x692 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x161 ?x85 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x422 ?x299 false)))
 (let (($x644 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x152 (=> $x644 $x692)))
 (let ((?x116 (ite (= (_ bv0 32) ?x161) (_ bv0 32) (_ bv1 32))))
 (let (($x63 (bvuge ?x116 (_ bv1 32))))
 (let (($x584 (= $x644 $x63)))
 (let (($x427 (= false false)))
 (let (($x327 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x649 (=> $x327 $x427)))
 (let (($x445 (= ?x116 (_ bv0 32))))
 (let (($x412 (= $x327 $x445)))
 (let (($x651 (and $x412 $x649)))
 (let (($x16 (and $x651 $x584)))
 (let (($x646 (and $x16 $x152)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x266)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x554)))
 (let (($x268 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x231)))
 (let (($x87 (and $x268 $x646)))
 (let (($x555 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x239 (=> $x555 $x87)))
 (let ((?x441 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x426 (bvuge ?x441 (_ bv1 32))))
 (let (($x83 (= $x555 $x426)))
 (let (($x663 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x436 (=> $x663 $x427)))
 (let (($x404 (= ?x441 (_ bv0 32))))
 (let (($x405 (= $x663 $x404)))
 (let (($x650 (and $x405 $x436)))
 (let (($x366 (and $x650 $x83)))
 (let (($x670 (and $x366 $x239)))
 (let (($x674 (= $x670 true)))
 (let (($x667 (= $x674 true)))
 (let (($x652 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x161 ?x85 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x422 ?x299 false)))
 (let (($x482 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x355 (=> $x482 $x652)))
 (let (($x477 (= $x482 $x63)))
 (let (($x235 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x287 (=> $x235 $x427)))
 (let (($x523 (= $x235 $x445)))
 (let (($x260 (and $x523 $x287)))
 (let (($x434 (and $x260 $x477)))
 (let (($x257 (and $x434 $x355)))
 (let (($x633 (= input.spec-%var-l-1.2.0 ?x231)))
 (let (($x133 (and $x633 $x257)))
 (let (($x214 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x509 (=> $x214 $x133)))
 (let (($x589 (= $x214 $x426)))
 (let (($x181 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x590 (=> $x181 $x427)))
 (let (($x673 (= $x181 $x404)))
 (let (($x220 (and $x673 $x590)))
 (let (($x562 (and $x220 $x589)))
 (let (($x452 (and $x562 $x509)))
 (let (($x361 (= $x452 true)))
 (let (($x52 (= $x361 true)))
 (let (($x289 (= $x52 true)))
 (let (($x62 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x161 ?x85 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x422 ?x299 false)))
 (let (($x138 (=> $x555 $x62)))
 (let (($x274 (= $x555 $x63)))
 (let (($x406 (= $x663 $x445)))
 (let (($x486 (and $x406 $x436)))
 (let (($x136 (and $x486 $x274)))
 (let (($x143 (and $x136 $x138)))
 (let (($x540 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x231)))
 (let (($x293 (and $x540 $x143)))
 (let (($x566 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x188 (=> $x566 $x293)))
 (let (($x547 (= $x566 $x426)))
 (let (($x410 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x362 (=> $x410 $x427)))
 (let (($x539 (= $x410 $x404)))
 (let (($x549 (and $x539 $x362)))
 (let (($x444 (and $x549 $x547)))
 (let (($x578 (and $x444 $x188)))
 (let (($x230 (= $x578 true)))
 (let (($x495 (= $x230 true)))
 (let (($x632 (= $x495 true)))
 (let ((?x44 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x537 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x15))))
 (let (($x204 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x537 ?x85 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x422 ?x299 false)))
 (let (($x159 (=> $x555 $x204)))
 (let (($x182 (= $x555 (bvuge (ite (= (_ bv0 32) ?x537) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x403 (= $x663 (= (ite (= (_ bv0 32) ?x537) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x605 (and $x403 $x436)))
 (let (($x225 (and $x605 $x182)))
 (let (($x104 (and $x225 $x159)))
 (let ((?x641 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x520 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x121 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x635 (concat (select input.dst.llvm-mem ?x121) (concat ?x70 (concat ?x520 ?x641)))))
 (let (($x576 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x635)))
 (let (($x367 (and $x576 $x104)))
 (let (($x574 (=> $x566 $x367)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x237 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x375 (= $x566 (bvuge ?x237 (_ bv1 32)))))
 (let (($x196 (= $x410 (= ?x237 (_ bv0 32)))))
 (let (($x304 (and $x196 $x362)))
 (let (($x449 (and $x304 $x375)))
 (let (($x223 (and $x449 $x574)))
 (let (($x383 (= $x223 true)))
 (let (($x229 (= $x383 true)))
 (let (($x339 (= $x229 true)))
 (let ((?x415 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x415)))
 (let ((?x460 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x551 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x460)))
 (let (($x425 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x393 (and $x425 $x551)))
 (let (($x197 (and $x393 $x86)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x56 $x197)))
 (let (($x526 (= $x48 true)))
 (let (($x67 (= $x526 true)))
 (let (($x103 (= $x67 true)))
 (let ((?x376 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x5 (= (_ bv0 3) ?x376)))
 (let (($x398 (= $x5 true)))
 (let (($x333 (= $x398 true)))
 (let (($x303 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x512 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x512) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x512))))
 (let (($x508 (and true $x207)))
 (let (($x500 (and $x207 $x508)))
 (let ((?x262 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem ?x262))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv2 32))) ?x538))))
 (let (($x286 (= (bvand ?x79 (_ bv4294967288 32)) ?x79)))
 (let (($x221 (= (bvand ?x262 (_ bv4294967292 32)) ?x262)))
 (let (($x365 (and $x221 $x286)))
 (let (($x154 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x262 (bvsub ?x262 (_ bv4 32))) (bvult ?x262 (bvsub ?x262 (_ bv4 32))))))
 (let (($x59 (and (and (and (and (and $x508 $x154) $x221) $x365) $x500) $x303)))
 (let (($x72 (= true $x59)))
 (let (($x122 (not $x172)))
 (let (($x395 (=> $x122 $x72)))
 (let (($x394 (= $x395 true)))
 (let (($x397 (= $x394 true)))
 (let (($x378 (= $x397 true)))
 (let ((?x134 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x464 (bvneg ?x134)))
 (let (($x43 (= ?x464 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x212 (= $x43 true)))
 (let (($x455 (= $x212 true)))
 (let (($x483 (= $x122 true)))
 (let (($x506 (= $x483 true)))
 (let (($x470 (= $x506 true)))
 (let (($x64 (and $x470 $x455)))
 (let (($x390 (and $x64 $x378)))
 (let (($x119 (and $x390 $x333)))
 (let (($x199 (and $x119 $x103)))
 (let (($x432 (and $x199 $x339)))
 (let (($x505 (and $x432 $x632)))
 (let (($x496 (and $x505 $x289)))
 (let (($x263 (and $x566 $x496)))
 (let (($x457 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x142 (and $x457 $x263)))
 (let (($x309 (bvugt ?x262 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x262 (_ bv3 32))))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x315 (=> (bvule ?x262 (bvsub (bvadd ?x262 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x297 $x309)))))))
 (let (($x283 (=> (and $x122 (bvule ?x262 (bvsub (bvadd ?x262 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x297 $x309)))))))
 (let (($x12 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x91 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x44 (_ bv1 32))) (or false (or false (and true (or $x58 $x12)))))))
 (let (($x108 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x44 (_ bv1 32)))) (or false (or false (and true (or $x58 $x12)))))))
 (let (($x7 (and $x108 $x283)))
 (let (($x498 (and $x7 $x142)))
 (let (($x668 (=> $x498 $x667)))
 (not $x668)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x299 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x185 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x147))))
 (let ((?x316 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x85 (concat ?x337 (concat ?x6 (concat ?x26 ?x316)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x374 (concat ?x78 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x161 (concat ?x281 (concat ?x18 ?x374))))
 (let (($x692 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x161 ?x85 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x422 ?x299 false)))
 (let (($x644 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x152 (=> $x644 $x692)))
 (let ((?x116 (ite (= (_ bv0 32) ?x161) (_ bv0 32) (_ bv1 32))))
 (let (($x63 (bvuge ?x116 (_ bv1 32))))
 (let (($x584 (= $x644 $x63)))
 (let (($x427 (= false false)))
 (let (($x327 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x649 (=> $x327 $x427)))
 (let (($x445 (= ?x116 (_ bv0 32))))
 (let (($x412 (= $x327 $x445)))
 (let (($x651 (and $x412 $x649)))
 (let (($x16 (and $x651 $x584)))
 (let (($x646 (and $x16 $x152)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x266)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x554)))
 (let (($x268 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x231)))
 (let (($x87 (and $x268 $x646)))
 (let (($x555 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x239 (=> $x555 $x87)))
 (let ((?x441 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x426 (bvuge ?x441 (_ bv1 32))))
 (let (($x83 (= $x555 $x426)))
 (let (($x663 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x436 (=> $x663 $x427)))
 (let (($x404 (= ?x441 (_ bv0 32))))
 (let (($x405 (= $x663 $x404)))
 (let (($x650 (and $x405 $x436)))
 (let (($x366 (and $x650 $x83)))
 (let (($x670 (and $x366 $x239)))
 (let (($x674 (= $x670 true)))
 (let (($x667 (= $x674 true)))
 (let (($x652 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x161 ?x85 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x422 ?x299 false)))
 (let (($x482 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x355 (=> $x482 $x652)))
 (let (($x477 (= $x482 $x63)))
 (let (($x235 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x287 (=> $x235 $x427)))
 (let (($x523 (= $x235 $x445)))
 (let (($x260 (and $x523 $x287)))
 (let (($x434 (and $x260 $x477)))
 (let (($x257 (and $x434 $x355)))
 (let (($x633 (= input.spec-%var-l-1.2.0 ?x231)))
 (let (($x133 (and $x633 $x257)))
 (let (($x214 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x509 (=> $x214 $x133)))
 (let (($x589 (= $x214 $x426)))
 (let (($x181 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x590 (=> $x181 $x427)))
 (let (($x673 (= $x181 $x404)))
 (let (($x220 (and $x673 $x590)))
 (let (($x562 (and $x220 $x589)))
 (let (($x452 (and $x562 $x509)))
 (let (($x361 (= $x452 true)))
 (let (($x52 (= $x361 true)))
 (let (($x289 (= $x52 true)))
 (let (($x62 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x161 ?x85 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x422 ?x299 false)))
 (let (($x138 (=> $x555 $x62)))
 (let (($x274 (= $x555 $x63)))
 (let (($x406 (= $x663 $x445)))
 (let (($x486 (and $x406 $x436)))
 (let (($x136 (and $x486 $x274)))
 (let (($x143 (and $x136 $x138)))
 (let (($x540 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x231)))
 (let (($x293 (and $x540 $x143)))
 (let (($x566 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x188 (=> $x566 $x293)))
 (let (($x547 (= $x566 $x426)))
 (let (($x410 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x362 (=> $x410 $x427)))
 (let (($x539 (= $x410 $x404)))
 (let (($x549 (and $x539 $x362)))
 (let (($x444 (and $x549 $x547)))
 (let (($x578 (and $x444 $x188)))
 (let (($x230 (= $x578 true)))
 (let (($x495 (= $x230 true)))
 (let (($x632 (= $x495 true)))
 (let ((?x44 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x537 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x15))))
 (let (($x204 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x537 ?x85 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x422 ?x299 false)))
 (let (($x159 (=> $x555 $x204)))
 (let (($x182 (= $x555 (bvuge (ite (= (_ bv0 32) ?x537) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x403 (= $x663 (= (ite (= (_ bv0 32) ?x537) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x605 (and $x403 $x436)))
 (let (($x225 (and $x605 $x182)))
 (let (($x104 (and $x225 $x159)))
 (let ((?x641 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x520 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x121 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x635 (concat (select input.dst.llvm-mem ?x121) (concat ?x70 (concat ?x520 ?x641)))))
 (let (($x576 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x635)))
 (let (($x367 (and $x576 $x104)))
 (let (($x574 (=> $x566 $x367)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x237 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x375 (= $x566 (bvuge ?x237 (_ bv1 32)))))
 (let (($x196 (= $x410 (= ?x237 (_ bv0 32)))))
 (let (($x304 (and $x196 $x362)))
 (let (($x449 (and $x304 $x375)))
 (let (($x223 (and $x449 $x574)))
 (let (($x383 (= $x223 true)))
 (let (($x229 (= $x383 true)))
 (let (($x339 (= $x229 true)))
 (let ((?x415 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x415)))
 (let ((?x460 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x551 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x460)))
 (let (($x425 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x393 (and $x425 $x551)))
 (let (($x197 (and $x393 $x86)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x56 $x197)))
 (let (($x526 (= $x48 true)))
 (let (($x67 (= $x526 true)))
 (let (($x103 (= $x67 true)))
 (let ((?x376 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x5 (= (_ bv0 3) ?x376)))
 (let (($x398 (= $x5 true)))
 (let (($x333 (= $x398 true)))
 (let (($x303 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x512 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x512) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x512))))
 (let (($x508 (and true $x207)))
 (let (($x500 (and $x207 $x508)))
 (let ((?x262 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem ?x262))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv2 32))) ?x538))))
 (let (($x286 (= (bvand ?x79 (_ bv4294967288 32)) ?x79)))
 (let (($x221 (= (bvand ?x262 (_ bv4294967292 32)) ?x262)))
 (let (($x365 (and $x221 $x286)))
 (let (($x154 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x262 (bvsub ?x262 (_ bv4 32))) (bvult ?x262 (bvsub ?x262 (_ bv4 32))))))
 (let (($x59 (and (and (and (and (and $x508 $x154) $x221) $x365) $x500) $x303)))
 (let (($x72 (= true $x59)))
 (let (($x122 (not $x172)))
 (let (($x395 (=> $x122 $x72)))
 (let (($x394 (= $x395 true)))
 (let (($x397 (= $x394 true)))
 (let (($x378 (= $x397 true)))
 (let ((?x134 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x464 (bvneg ?x134)))
 (let (($x43 (= ?x464 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x212 (= $x43 true)))
 (let (($x455 (= $x212 true)))
 (let (($x483 (= $x122 true)))
 (let (($x506 (= $x483 true)))
 (let (($x470 (= $x506 true)))
 (let (($x64 (and $x470 $x455)))
 (let (($x390 (and $x64 $x378)))
 (let (($x119 (and $x390 $x333)))
 (let (($x199 (and $x119 $x103)))
 (let (($x432 (and $x199 $x339)))
 (let (($x505 (and $x432 $x632)))
 (let (($x496 (and $x505 $x289)))
 (let (($x263 (and $x566 $x496)))
 (let (($x457 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x142 (and $x457 $x263)))
 (let (($x309 (bvugt ?x262 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x262 (_ bv3 32))))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x315 (=> (bvule ?x262 (bvsub (bvadd ?x262 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x297 $x309)))))))
 (let (($x283 (=> (and $x122 (bvule ?x262 (bvsub (bvadd ?x262 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x297 $x309)))))))
 (let (($x12 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x91 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x44 (_ bv1 32))) (or false (or false (and true (or $x58 $x12)))))))
 (let (($x108 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x44 (_ bv1 32)))) (or false (or false (and true (or $x58 $x12)))))))
 (let (($x7 (and $x108 $x283)))
 (let (($x498 (and $x7 $x142)))
 (let (($x668 (=> $x498 $x667)))
 (not $x668)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_23)
(= input.dst.llvm-mem @fun_20)
(function @fun_23
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_23 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_20
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_8542 (_ BitVec 32)) (BOUND_VARIABLE_8543 (_ BitVec 32)) (BOUND_VARIABLE_8544 (_ BitVec 32)) (BOUND_VARIABLE_8545 (_ BitVec 32)) (BOUND_VARIABLE_8546 (_ BitVec 32)) (BOUND_VARIABLE_8547 (_ BitVec 32)) (BOUND_VARIABLE_8548 Bool) (BOUND_VARIABLE_8549 (_ BitVec 32)) (BOUND_VARIABLE_8550 (_ BitVec 32)) (BOUND_VARIABLE_8551 (_ BitVec 32)) (BOUND_VARIABLE_8552 (_ BitVec 32)) (BOUND_VARIABLE_8553 (_ BitVec 32)) (BOUND_VARIABLE_8554 (_ BitVec 32)) (BOUND_VARIABLE_8555 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv255 8)) (_ bv4 32) (_ bv255 8)) (_ bv3 32) (_ bv255 8)) (_ bv2 32) (_ bv255 8)) (_ bv251020048 32) (_ bv255 8)) (_ bv251020049 32) (_ bv255 8)) (_ bv251020050 32) (_ bv255 8)) (_ bv251020051 32) (_ bv255 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv524288 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv251020048 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2434634080 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2434634080 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2434634083 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x80000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 #x00000000)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 false))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 #x00000000)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 false))
      false
      false)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 85
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x708 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x702 (concat (select input.dst.llvm-mem (bvadd ?x708 (_ bv1 32))) (select input.dst.llvm-mem ?x708))))
 (let ((?x711 (concat (select input.dst.llvm-mem (bvadd ?x708 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x708 (_ bv2 32))) ?x702))))
 (let ((?x683 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x694 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x682 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x720 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x677 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x276 (concat ?x273 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x485 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x580 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x556 (concat ?x580 (concat ?x485 ?x276))))
 (let ((?x678 (bvadd ?x556 (_ bv4 32))))
 (let ((?x686 (concat (select input.dst.llvm-mem (bvadd ?x678 (_ bv1 32))) (select input.dst.llvm-mem ?x678))))
 (let ((?x717 (concat (select input.dst.llvm-mem (bvadd ?x678 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x678 (_ bv2 32))) ?x686))))
 (let (($x712 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x717 ?x677 false (concat ?x720 (concat ?x682 (concat ?x694 ?x683))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x711)))
 (let ((?x572 (concat (select input.dst.llvm-mem (bvadd ?x556 (_ bv1 32))) (select input.dst.llvm-mem ?x556))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x556 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x556 (_ bv2 32))) ?x572))))
 (let (($x542 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x113)))
 (let (($x476 (and $x542 $x712)))
 (let (($x414 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x124 (=> $x414 $x476)))
 (let ((?x479 (ite (= (_ bv0 32) ?x556) (_ bv0 32) (_ bv1 32))))
 (let (($x603 (bvuge ?x479 (_ bv1 32))))
 (let (($x123 (= $x414 $x603)))
 (let (($x370 (= false false)))
 (let (($x368 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x292 (=> $x368 $x370)))
 (let (($x353 (= ?x479 (_ bv0 32))))
 (let (($x109 (= $x368 $x353)))
 (let (($x400 (and $x109 $x292)))
 (let (($x167 (and $x400 $x123)))
 (let (($x27 (and $x167 $x124)))
 (let ((?x528 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x528)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x155)))
 (let (($x573 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x267)))
 (let (($x713 (and $x573 $x27)))
 (let (($x593 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x561 (=> $x593 $x713)))
 (let ((?x349 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x349 (_ bv1 32))))
 (let (($x227 (= $x593 $x163)))
 (let (($x412 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x359 (=> $x412 $x370)))
 (let (($x95 (= ?x349 (_ bv0 32))))
 (let (($x423 (= $x412 $x95)))
 (let (($x534 (and $x423 $x359)))
 (let (($x307 (and $x534 $x227)))
 (let (($x579 (and $x307 $x561)))
 (let (($x640 (= $x579 true)))
 (let (($x581 (= $x640 true)))
 (let (($x616 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x664 (=> $x616 true)))
 (let (($x624 (= $x616 $x603)))
 (let (($x160 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x51 (=> $x160 $x370)))
 (let (($x548 (= $x160 $x353)))
 (let (($x330 (and $x548 $x51)))
 (let (($x620 (and $x330 $x624)))
 (let (($x577 (and $x620 $x664)))
 (let (($x166 (= input.spec-%var-l-1.2.0 ?x267)))
 (let (($x636 (and $x166 $x577)))
 (let (($x484 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x458 (=> $x484 $x636)))
 (let (($x481 (= $x484 $x163)))
 (let (($x387 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x625 (=> $x387 $x370)))
 (let (($x23 (= $x387 $x95)))
 (let (($x82 (and $x23 $x625)))
 (let (($x448 (and $x82 $x481)))
 (let (($x382 (and $x448 $x458)))
 (let (($x97 (= $x382 true)))
 (let (($x666 (= $x97 true)))
 (let (($x639 (= $x666 true)))
 (let (($x558 (=> $x593 true)))
 (let (($x602 (= $x593 $x603)))
 (let (($x521 (= $x412 $x353)))
 (let (($x402 (and $x521 $x359)))
 (let (($x613 (and $x402 $x602)))
 (let (($x599 (and $x613 $x558)))
 (let (($x247 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x267)))
 (let (($x226 (and $x247 $x599)))
 (let (($x204 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x169 (=> $x204 $x226)))
 (let (($x76 (= $x204 $x163)))
 (let (($x546 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x55 (=> $x546 $x370)))
 (let (($x178 (= $x546 $x95)))
 (let (($x348 (and $x178 $x55)))
 (let (($x180 (and $x348 $x76)))
 (let (($x194 (and $x180 $x169)))
 (let (($x140 (= $x194 true)))
 (let (($x200 (= $x140 true)))
 (let (($x31 (= $x200 true)))
 (let ((?x192 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x16))))
 (let ((?x674 (ite (= (_ bv0 32) ?x239) (_ bv0 32) (_ bv1 32))))
 (let (($x24 (= $x593 (bvuge ?x674 (_ bv1 32)))))
 (let (($x268 (= $x412 (= ?x674 (_ bv0 32)))))
 (let (($x649 (and $x268 $x359)))
 (let (($x637 (and $x649 $x24)))
 (let (($x187 (and $x637 $x558)))
 (let ((?x445 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x486 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x216 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x143 (concat (select input.dst.llvm-mem ?x216) (concat ?x136 (concat ?x486 ?x445)))))
 (let (($x293 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x143)))
 (let (($x630 (and $x293 $x187)))
 (let (($x291 (=> $x204 $x630)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x104 (= $x204 (bvuge ?x265 (_ bv1 32)))))
 (let (($x9 (= $x546 (= ?x265 (_ bv0 32)))))
 (let (($x147 (and $x9 $x55)))
 (let (($x367 (and $x147 $x104)))
 (let (($x34 (and $x367 $x291)))
 (let (($x439 (= $x34 true)))
 (let (($x514 (= $x439 true)))
 (let (($x275 (= $x514 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x103)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x526 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x197 $x526)))
 (let (($x324 (and $x67 $x199)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x410 (and $x86 $x324)))
 (let (($x237 (= $x410 true)))
 (let (($x594 (= $x237 true)))
 (let (($x196 (= $x594 true)))
 (let ((?x56 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x425 (= (_ bv0 3) ?x56)))
 (let (($x460 (= $x425 true)))
 (let (($x551 (= $x460 true)))
 (let (($x72 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x345 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x154 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x345) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x345))))
 (let (($x144 (and true $x154)))
 (let (($x303 (and $x154 $x144)))
 (let ((?x176 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x538))))
 (let (($x135 (= (bvand ?x365 (_ bv4294967288 32)) ?x365)))
 (let (($x32 (= (bvand ?x176 (_ bv4294967292 32)) ?x176)))
 (let (($x193 (and $x32 $x135)))
 (let (($x126 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x176 (bvsub ?x176 (_ bv4 32))) (bvult ?x176 (bvsub ?x176 (_ bv4 32))))))
 (let (($x390 (and (and (and (and (and $x144 $x126) $x32) $x193) $x303) $x72)))
 (let (($x377 (= true $x390)))
 (let (($x122 (not $x172)))
 (let (($x376 (=> $x122 $x377)))
 (let (($x5 (= $x376 true)))
 (let (($x398 (= $x5 true)))
 (let (($x333 (= $x398 true)))
 (let ((?x64 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x346 (bvneg ?x64)))
 (let (($x252 (= ?x346 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x341 (= $x252 true)))
 (let (($x207 (= $x341 true)))
 (let (($x464 (= $x122 true)))
 (let (($x465 (= $x464 true)))
 (let (($x43 (= $x465 true)))
 (let (($x508 (and $x43 $x207)))
 (let (($x119 (and $x508 $x333)))
 (let (($x393 (and $x119 $x551)))
 (let (($x427 (and $x393 $x196)))
 (let (($x42 (and $x427 $x275)))
 (let (($x525 (and $x42 $x31)))
 (let (($x631 (and $x525 $x639)))
 (let (($x571 (and $x204 $x631)))
 (let (($x506 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x557 (and $x506 $x571)))
 (let (($x88 (bvugt ?x176 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x176 (_ bv3 32))))
 (let (($x312 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x457 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x312 $x88)))))))
 (let (($x338 (=> (and $x122 (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x312 $x88)))))))
 (let (($x205 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x216)))
 (let (($x249 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x192 (_ bv1 32))) (or false (or false (and true (or $x243 $x205)))))))
 (let (($x90 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x192 (_ bv1 32)))) (or false (or false (and true (or $x243 $x205)))))))
 (let (($x99 (and $x90 $x338)))
 (let (($x47 (and $x99 $x557)))
 (let (($x585 (=> $x47 $x581)))
 (not $x585))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x708 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x702 (concat (select input.dst.llvm-mem (bvadd ?x708 (_ bv1 32))) (select input.dst.llvm-mem ?x708))))
 (let ((?x711 (concat (select input.dst.llvm-mem (bvadd ?x708 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x708 (_ bv2 32))) ?x702))))
 (let ((?x683 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x694 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x682 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x720 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x677 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x276 (concat ?x273 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x485 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x580 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x556 (concat ?x580 (concat ?x485 ?x276))))
 (let ((?x678 (bvadd ?x556 (_ bv4 32))))
 (let ((?x686 (concat (select input.dst.llvm-mem (bvadd ?x678 (_ bv1 32))) (select input.dst.llvm-mem ?x678))))
 (let ((?x717 (concat (select input.dst.llvm-mem (bvadd ?x678 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x678 (_ bv2 32))) ?x686))))
 (let (($x712 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x717 ?x677 false (concat ?x720 (concat ?x682 (concat ?x694 ?x683))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x711)))
 (let ((?x572 (concat (select input.dst.llvm-mem (bvadd ?x556 (_ bv1 32))) (select input.dst.llvm-mem ?x556))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x556 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x556 (_ bv2 32))) ?x572))))
 (let (($x542 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x113)))
 (let (($x476 (and $x542 $x712)))
 (let (($x414 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x124 (=> $x414 $x476)))
 (let ((?x479 (ite (= (_ bv0 32) ?x556) (_ bv0 32) (_ bv1 32))))
 (let (($x603 (bvuge ?x479 (_ bv1 32))))
 (let (($x123 (= $x414 $x603)))
 (let (($x370 (= false false)))
 (let (($x368 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x292 (=> $x368 $x370)))
 (let (($x353 (= ?x479 (_ bv0 32))))
 (let (($x109 (= $x368 $x353)))
 (let (($x400 (and $x109 $x292)))
 (let (($x167 (and $x400 $x123)))
 (let (($x27 (and $x167 $x124)))
 (let ((?x528 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x528)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x155)))
 (let (($x573 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x267)))
 (let (($x713 (and $x573 $x27)))
 (let (($x593 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x561 (=> $x593 $x713)))
 (let ((?x349 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x349 (_ bv1 32))))
 (let (($x227 (= $x593 $x163)))
 (let (($x412 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x359 (=> $x412 $x370)))
 (let (($x95 (= ?x349 (_ bv0 32))))
 (let (($x423 (= $x412 $x95)))
 (let (($x534 (and $x423 $x359)))
 (let (($x307 (and $x534 $x227)))
 (let (($x579 (and $x307 $x561)))
 (let (($x640 (= $x579 true)))
 (let (($x581 (= $x640 true)))
 (let (($x616 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x664 (=> $x616 true)))
 (let (($x624 (= $x616 $x603)))
 (let (($x160 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x51 (=> $x160 $x370)))
 (let (($x548 (= $x160 $x353)))
 (let (($x330 (and $x548 $x51)))
 (let (($x620 (and $x330 $x624)))
 (let (($x577 (and $x620 $x664)))
 (let (($x166 (= input.spec-%var-l-1.2.0 ?x267)))
 (let (($x636 (and $x166 $x577)))
 (let (($x484 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x458 (=> $x484 $x636)))
 (let (($x481 (= $x484 $x163)))
 (let (($x387 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x625 (=> $x387 $x370)))
 (let (($x23 (= $x387 $x95)))
 (let (($x82 (and $x23 $x625)))
 (let (($x448 (and $x82 $x481)))
 (let (($x382 (and $x448 $x458)))
 (let (($x97 (= $x382 true)))
 (let (($x666 (= $x97 true)))
 (let (($x639 (= $x666 true)))
 (let (($x558 (=> $x593 true)))
 (let (($x602 (= $x593 $x603)))
 (let (($x521 (= $x412 $x353)))
 (let (($x402 (and $x521 $x359)))
 (let (($x613 (and $x402 $x602)))
 (let (($x599 (and $x613 $x558)))
 (let (($x247 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x267)))
 (let (($x226 (and $x247 $x599)))
 (let (($x204 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x169 (=> $x204 $x226)))
 (let (($x76 (= $x204 $x163)))
 (let (($x546 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x55 (=> $x546 $x370)))
 (let (($x178 (= $x546 $x95)))
 (let (($x348 (and $x178 $x55)))
 (let (($x180 (and $x348 $x76)))
 (let (($x194 (and $x180 $x169)))
 (let (($x140 (= $x194 true)))
 (let (($x200 (= $x140 true)))
 (let (($x31 (= $x200 true)))
 (let ((?x192 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x16))))
 (let ((?x674 (ite (= (_ bv0 32) ?x239) (_ bv0 32) (_ bv1 32))))
 (let (($x24 (= $x593 (bvuge ?x674 (_ bv1 32)))))
 (let (($x268 (= $x412 (= ?x674 (_ bv0 32)))))
 (let (($x649 (and $x268 $x359)))
 (let (($x637 (and $x649 $x24)))
 (let (($x187 (and $x637 $x558)))
 (let ((?x445 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x486 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x216 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x143 (concat (select input.dst.llvm-mem ?x216) (concat ?x136 (concat ?x486 ?x445)))))
 (let (($x293 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x143)))
 (let (($x630 (and $x293 $x187)))
 (let (($x291 (=> $x204 $x630)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x104 (= $x204 (bvuge ?x265 (_ bv1 32)))))
 (let (($x9 (= $x546 (= ?x265 (_ bv0 32)))))
 (let (($x147 (and $x9 $x55)))
 (let (($x367 (and $x147 $x104)))
 (let (($x34 (and $x367 $x291)))
 (let (($x439 (= $x34 true)))
 (let (($x514 (= $x439 true)))
 (let (($x275 (= $x514 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x103)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x526 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x197 $x526)))
 (let (($x324 (and $x67 $x199)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x410 (and $x86 $x324)))
 (let (($x237 (= $x410 true)))
 (let (($x594 (= $x237 true)))
 (let (($x196 (= $x594 true)))
 (let ((?x56 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x425 (= (_ bv0 3) ?x56)))
 (let (($x460 (= $x425 true)))
 (let (($x551 (= $x460 true)))
 (let (($x72 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x345 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x154 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x345) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x345))))
 (let (($x144 (and true $x154)))
 (let (($x303 (and $x154 $x144)))
 (let ((?x176 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x538))))
 (let (($x135 (= (bvand ?x365 (_ bv4294967288 32)) ?x365)))
 (let (($x32 (= (bvand ?x176 (_ bv4294967292 32)) ?x176)))
 (let (($x193 (and $x32 $x135)))
 (let (($x126 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x176 (bvsub ?x176 (_ bv4 32))) (bvult ?x176 (bvsub ?x176 (_ bv4 32))))))
 (let (($x390 (and (and (and (and (and $x144 $x126) $x32) $x193) $x303) $x72)))
 (let (($x377 (= true $x390)))
 (let (($x122 (not $x172)))
 (let (($x376 (=> $x122 $x377)))
 (let (($x5 (= $x376 true)))
 (let (($x398 (= $x5 true)))
 (let (($x333 (= $x398 true)))
 (let ((?x64 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x346 (bvneg ?x64)))
 (let (($x252 (= ?x346 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x341 (= $x252 true)))
 (let (($x207 (= $x341 true)))
 (let (($x464 (= $x122 true)))
 (let (($x465 (= $x464 true)))
 (let (($x43 (= $x465 true)))
 (let (($x508 (and $x43 $x207)))
 (let (($x119 (and $x508 $x333)))
 (let (($x393 (and $x119 $x551)))
 (let (($x427 (and $x393 $x196)))
 (let (($x42 (and $x427 $x275)))
 (let (($x525 (and $x42 $x31)))
 (let (($x631 (and $x525 $x639)))
 (let (($x571 (and $x204 $x631)))
 (let (($x506 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x557 (and $x506 $x571)))
 (let (($x88 (bvugt ?x176 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x176 (_ bv3 32))))
 (let (($x312 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x457 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x312 $x88)))))))
 (let (($x338 (=> (and $x122 (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x312 $x88)))))))
 (let (($x205 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x216)))
 (let (($x249 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x192 (_ bv1 32))) (or false (or false (and true (or $x243 $x205)))))))
 (let (($x90 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x192 (_ bv1 32)))) (or false (or false (and true (or $x243 $x205)))))))
 (let (($x99 (and $x90 $x338)))
 (let (($x47 (and $x99 $x557)))
 (let (($x585 (=> $x47 $x581)))
 (not $x585))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_37)
(= input.dst.llvm-mem @fun_34)
(function @fun_37
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_37 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_8764 (_ BitVec 32)) (BOUND_VARIABLE_8765 (_ BitVec 32)) (BOUND_VARIABLE_8766 (_ BitVec 32)) (BOUND_VARIABLE_8767 Bool) (BOUND_VARIABLE_8768 (_ BitVec 32)) (BOUND_VARIABLE_8769 (_ BitVec 32)) (BOUND_VARIABLE_8770 (_ BitVec 32)) (BOUND_VARIABLE_8771 (_ BitVec 32)) (BOUND_VARIABLE_8772 (_ BitVec 32)) (BOUND_VARIABLE_8773 (_ BitVec 32)) (BOUND_VARIABLE_8774 Bool) (BOUND_VARIABLE_8775 (_ BitVec 32)) (BOUND_VARIABLE_8776 (_ BitVec 32)) (BOUND_VARIABLE_8777 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4 32) (_ bv255 8)) (_ bv1 32) (_ bv255 8)) (_ bv3 32) (_ bv255 8)) (_ bv2 32) (_ bv255 8)) (_ bv4713312 32) (_ bv255 8)) (_ bv4713313 32) (_ bv255 8)) (_ bv4713314 32) (_ bv255 8)) (_ bv4713315 32) (_ bv255 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4713312 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2595227040 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2595227040 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2595227043 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00003ffc)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x6808400b)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x6808400f)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x68086000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08)
                     #x68084016
                     #x68)
              #x68084014
              #x40)
       #x6808400b
       #x28))
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #xd7f7f7f7)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00003fff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00003ffc)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x6808400b)
              (= x!8 #x08080808)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x08080828)
              (= x!12 #x6808400b)
              (= x!13 #x08080808))
      true
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 86
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x517 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x317 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd ?x317 (_ bv1 32))) (select input.dst.llvm-mem ?x317))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x317 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x317 (_ bv2 32))) ?x475))))
 (let ((?x331 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x336 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x379 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x478 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x563 (concat ?x478 (concat ?x379 (concat ?x336 ?x331)))))
 (let ((?x547 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x444 (concat ?x547 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x401 (concat ?x78 (concat ?x75 ?x444))))
 (let ((?x735 (bvadd ?x401 (_ bv4 32))))
 (let ((?x755 (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv1 32))) (select input.dst.llvm-mem ?x735))))
 (let ((?x761 (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv2 32))) ?x755))))
 (let (($x828 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x761 ?x563 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x301 ?x517 false)))
 (let (($x773 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x801 (=> $x773 $x828)))
 (let (($x775 (= $x773 (bvuge (ite (= (_ bv0 32) ?x761) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x49 (= false false)))
 (let (($x738 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x748 (=> $x738 $x49)))
 (let (($x740 (= $x738 (= (ite (= (_ bv0 32) ?x761) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x749 (and $x740 $x748)))
 (let (($x783 (and $x749 $x775)))
 (let (($x802 (and $x783 $x801)))
 (let ((?x480 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x532 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x480))))
 (let (($x280 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x532)))
 (let (($x803 (and $x280 $x802)))
 (let (($x81 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x825 (=> $x81 $x803)))
 (let ((?x18 (ite (= (_ bv0 32) ?x401) (_ bv0 32) (_ bv1 32))))
 (let (($x662 (bvuge ?x18 (_ bv1 32))))
 (let (($x171 (= $x81 $x662)))
 (let (($x385 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x250 (=> $x385 $x49)))
 (let (($x281 (= ?x18 (_ bv0 32))))
 (let (($x203 (= $x385 $x281)))
 (let (($x530 (and $x203 $x250)))
 (let (($x568 (and $x530 $x171)))
 (let (($x821 (and $x568 $x825)))
 (let ((?x491 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x491)))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x604)))
 (let (($x531 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x332)))
 (let (($x816 (and $x531 $x821)))
 (let (($x14 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x824 (=> $x14 $x816)))
 (let ((?x77 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x371 (bvuge ?x77 (_ bv1 32))))
 (let (($x628 (= $x14 $x371)))
 (let (($x695 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x715 (=> $x695 $x49)))
 (let (($x217 (= ?x77 (_ bv0 32))))
 (let (($x373 (= $x695 $x217)))
 (let (($x22 (and $x373 $x715)))
 (let (($x246 (and $x22 $x628)))
 (let (($x822 (and $x246 $x824)))
 (let (($x818 (= $x822 true)))
 (let (($x819 (= $x818 true)))
 (let (($x254 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x401 ?x563 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x301 ?x517 false)))
 (let (($x541 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x626 (=> $x541 $x254)))
 (let (($x592 (= $x541 $x662)))
 (let (($x356 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x318 (=> $x356 $x49)))
 (let (($x612 (= $x356 $x281)))
 (let (($x190 (and $x612 $x318)))
 (let (($x248 (and $x190 $x592)))
 (let (($x251 (and $x248 $x626)))
 (let (($x668 (= input.spec-%var-l-1.2.0 ?x332)))
 (let (($x672 (and $x668 $x251)))
 (let (($x117 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x326 (=> $x117 $x672)))
 (let (($x149 (= $x117 $x371)))
 (let (($x256 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x195 (=> $x256 $x49)))
 (let (($x389 (= $x256 $x217)))
 (let (($x459 (and $x389 $x195)))
 (let (($x127 (and $x459 $x149)))
 (let (($x428 (and $x127 $x326)))
 (let (($x61 (= $x428 true)))
 (let (($x71 (= $x61 true)))
 (let (($x698 (= $x71 true)))
 (let (($x114 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x401 ?x563 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x301 ?x517 false)))
 (let (($x391 (=> $x14 $x114)))
 (let (($x482 (= $x14 $x662)))
 (let (($x404 (= $x695 $x281)))
 (let (($x432 (and $x404 $x715)))
 (let (($x653 (and $x432 $x482)))
 (let (($x721 (and $x653 $x391)))
 (let (($x419 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x332)))
 (let (($x700 (and $x419 $x721)))
 (let (($x567 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x413 (=> $x567 $x700)))
 (let (($x102 (= $x567 $x371)))
 (let (($x305 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x219 (=> $x305 $x49)))
 (let (($x582 (= $x305 $x217)))
 (let (($x443 (and $x582 $x219)))
 (let (($x234 (and $x443 $x102)))
 (let (($x380 (and $x234 $x413)))
 (let (($x424 (= $x380 true)))
 (let (($x515 (= $x424 true)))
 (let (($x502 (= $x515 true)))
 (let ((?x58 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x643 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem ?x58))))
 (let ((?x680 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv2 32))) ?x643))))
 (let (($x518 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x680 ?x563 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x301 ?x517 false)))
 (let (($x591 (=> $x14 $x518)))
 (let (($x581 (= $x14 (bvuge (ite (= (_ bv0 32) ?x680) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x686 (= $x695 (= (ite (= (_ bv0 32) ?x680) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x676 (and $x686 $x715)))
 (let (($x585 (and $x676 $x581)))
 (let (($x70 (and $x585 $x591)))
 (let ((?x624 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x664 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x458 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x244 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x666 (concat (select input.dst.llvm-mem ?x244) (concat ?x458 (concat ?x664 ?x624)))))
 (let (($x639 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x666)))
 (let (($x588 (and $x639 $x70)))
 (let (($x663 (=> $x567 $x588)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x211 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x580 (= $x567 (bvuge ?x211 (_ bv1 32)))))
 (let (($x295 (= $x305 (= ?x211 (_ bv0 32)))))
 (let (($x364 (and $x295 $x219)))
 (let (($x654 (and $x364 $x580)))
 (let (($x352 (and $x654 $x663)))
 (let (($x17 (= $x352 true)))
 (let (($x258 (= $x17 true)))
 (let (($x524 (= $x258 true)))
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x427 (= (_ bv0 32) ?x196)))
 (let ((?x410 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x237 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x410)))
 (let (($x324 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x594 (and $x324 $x237)))
 (let (($x100 (and $x594 $x427)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x546 (and $x199 $x100)))
 (let (($x265 (= $x546 true)))
 (let (($x504 (= $x265 true)))
 (let (($x9 (= $x504 true)))
 (let ((?x86 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x197 (= (_ bv0 3) ?x86)))
 (let (($x48 (= $x197 true)))
 (let (($x526 (= $x48 true)))
 (let (($x377 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x259 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x126 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x259) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x259))))
 (let (($x395 (and true $x126)))
 (let (($x72 (and $x126 $x395)))
 (let ((?x191 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x538))))
 (let (($x378 (= (bvand ?x193 (_ bv4294967288 32)) ?x193)))
 (let (($x79 (= (bvand ?x191 (_ bv4294967292 32)) ?x191)))
 (let (($x59 (and $x79 $x378)))
 (let (($x174 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x191 (bvsub ?x191 (_ bv4 32))) (bvult ?x191 (bvsub ?x191 (_ bv4 32))))))
 (let (($x119 (and (and (and (and (and $x395 $x174) $x79) $x59) $x72) $x377)))
 (let (($x120 (= true $x119)))
 (let (($x122 (not $x172)))
 (let (($x56 (=> $x122 $x120)))
 (let (($x425 (= $x56 true)))
 (let (($x460 (= $x425 true)))
 (let (($x551 (= $x460 true)))
 (let ((?x508 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x80 (bvneg ?x508)))
 (let (($x238 (= ?x80 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x69 (= $x238 true)))
 (let (($x154 (= $x69 true)))
 (let (($x346 (= $x122 true)))
 (let (($x512 (= $x346 true)))
 (let (($x252 (= $x512 true)))
 (let (($x144 (and $x252 $x154)))
 (let (($x393 (and $x144 $x551)))
 (let (($x67 (and $x393 $x526)))
 (let (($x370 (and $x67 $x9)))
 (let (($x329 (and $x370 $x524)))
 (let (($x499 (and $x329 $x502)))
 (let (($x617 (and $x499 $x698)))
 (let (($x351 (and $x567 $x617)))
 (let (($x465 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x442 (and $x465 $x351)))
 (let (($x283 (bvugt ?x191 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x191 (_ bv3 32))))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x506 (=> (bvule ?x191 (bvsub (bvadd ?x191 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x315 $x283)))))))
 (let (($x39 (=> (and $x122 (bvule ?x191 (bvsub (bvadd ?x191 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x315 $x283)))))))
 (let (($x108 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x244)))
 (let (($x309 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x58 (_ bv1 32))) (or false (or false (and true (or $x91 $x108)))))))
 (let (($x121 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x58 (_ bv1 32)))) (or false (or false (and true (or $x91 $x108)))))))
 (let (($x37 (and $x121 $x39)))
 (let (($x671 (and $x37 $x442)))
 (let (($x817 (=> $x671 $x819)))
 (not $x817)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x517 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x317 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd ?x317 (_ bv1 32))) (select input.dst.llvm-mem ?x317))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x317 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x317 (_ bv2 32))) ?x475))))
 (let ((?x331 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x336 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x379 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x478 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x563 (concat ?x478 (concat ?x379 (concat ?x336 ?x331)))))
 (let ((?x547 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x444 (concat ?x547 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x401 (concat ?x78 (concat ?x75 ?x444))))
 (let ((?x735 (bvadd ?x401 (_ bv4 32))))
 (let ((?x755 (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv1 32))) (select input.dst.llvm-mem ?x735))))
 (let ((?x761 (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv2 32))) ?x755))))
 (let (($x828 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x761 ?x563 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x301 ?x517 false)))
 (let (($x773 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x801 (=> $x773 $x828)))
 (let (($x775 (= $x773 (bvuge (ite (= (_ bv0 32) ?x761) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x49 (= false false)))
 (let (($x738 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x748 (=> $x738 $x49)))
 (let (($x740 (= $x738 (= (ite (= (_ bv0 32) ?x761) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x749 (and $x740 $x748)))
 (let (($x783 (and $x749 $x775)))
 (let (($x802 (and $x783 $x801)))
 (let ((?x480 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x532 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x480))))
 (let (($x280 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x532)))
 (let (($x803 (and $x280 $x802)))
 (let (($x81 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x825 (=> $x81 $x803)))
 (let ((?x18 (ite (= (_ bv0 32) ?x401) (_ bv0 32) (_ bv1 32))))
 (let (($x662 (bvuge ?x18 (_ bv1 32))))
 (let (($x171 (= $x81 $x662)))
 (let (($x385 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x250 (=> $x385 $x49)))
 (let (($x281 (= ?x18 (_ bv0 32))))
 (let (($x203 (= $x385 $x281)))
 (let (($x530 (and $x203 $x250)))
 (let (($x568 (and $x530 $x171)))
 (let (($x821 (and $x568 $x825)))
 (let ((?x491 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x491)))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x604)))
 (let (($x531 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x332)))
 (let (($x816 (and $x531 $x821)))
 (let (($x14 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x824 (=> $x14 $x816)))
 (let ((?x77 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x371 (bvuge ?x77 (_ bv1 32))))
 (let (($x628 (= $x14 $x371)))
 (let (($x695 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x715 (=> $x695 $x49)))
 (let (($x217 (= ?x77 (_ bv0 32))))
 (let (($x373 (= $x695 $x217)))
 (let (($x22 (and $x373 $x715)))
 (let (($x246 (and $x22 $x628)))
 (let (($x822 (and $x246 $x824)))
 (let (($x818 (= $x822 true)))
 (let (($x819 (= $x818 true)))
 (let (($x254 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x401 ?x563 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x301 ?x517 false)))
 (let (($x541 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x626 (=> $x541 $x254)))
 (let (($x592 (= $x541 $x662)))
 (let (($x356 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x318 (=> $x356 $x49)))
 (let (($x612 (= $x356 $x281)))
 (let (($x190 (and $x612 $x318)))
 (let (($x248 (and $x190 $x592)))
 (let (($x251 (and $x248 $x626)))
 (let (($x668 (= input.spec-%var-l-1.2.0 ?x332)))
 (let (($x672 (and $x668 $x251)))
 (let (($x117 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x326 (=> $x117 $x672)))
 (let (($x149 (= $x117 $x371)))
 (let (($x256 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x195 (=> $x256 $x49)))
 (let (($x389 (= $x256 $x217)))
 (let (($x459 (and $x389 $x195)))
 (let (($x127 (and $x459 $x149)))
 (let (($x428 (and $x127 $x326)))
 (let (($x61 (= $x428 true)))
 (let (($x71 (= $x61 true)))
 (let (($x698 (= $x71 true)))
 (let (($x114 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x401 ?x563 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x301 ?x517 false)))
 (let (($x391 (=> $x14 $x114)))
 (let (($x482 (= $x14 $x662)))
 (let (($x404 (= $x695 $x281)))
 (let (($x432 (and $x404 $x715)))
 (let (($x653 (and $x432 $x482)))
 (let (($x721 (and $x653 $x391)))
 (let (($x419 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x332)))
 (let (($x700 (and $x419 $x721)))
 (let (($x567 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x413 (=> $x567 $x700)))
 (let (($x102 (= $x567 $x371)))
 (let (($x305 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x219 (=> $x305 $x49)))
 (let (($x582 (= $x305 $x217)))
 (let (($x443 (and $x582 $x219)))
 (let (($x234 (and $x443 $x102)))
 (let (($x380 (and $x234 $x413)))
 (let (($x424 (= $x380 true)))
 (let (($x515 (= $x424 true)))
 (let (($x502 (= $x515 true)))
 (let ((?x58 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x643 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem ?x58))))
 (let ((?x680 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv2 32))) ?x643))))
 (let (($x518 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x680 ?x563 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x301 ?x517 false)))
 (let (($x591 (=> $x14 $x518)))
 (let (($x581 (= $x14 (bvuge (ite (= (_ bv0 32) ?x680) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x686 (= $x695 (= (ite (= (_ bv0 32) ?x680) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x676 (and $x686 $x715)))
 (let (($x585 (and $x676 $x581)))
 (let (($x70 (and $x585 $x591)))
 (let ((?x624 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x664 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x458 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x244 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x666 (concat (select input.dst.llvm-mem ?x244) (concat ?x458 (concat ?x664 ?x624)))))
 (let (($x639 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x666)))
 (let (($x588 (and $x639 $x70)))
 (let (($x663 (=> $x567 $x588)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x211 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x580 (= $x567 (bvuge ?x211 (_ bv1 32)))))
 (let (($x295 (= $x305 (= ?x211 (_ bv0 32)))))
 (let (($x364 (and $x295 $x219)))
 (let (($x654 (and $x364 $x580)))
 (let (($x352 (and $x654 $x663)))
 (let (($x17 (= $x352 true)))
 (let (($x258 (= $x17 true)))
 (let (($x524 (= $x258 true)))
 (let ((?x196 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x427 (= (_ bv0 32) ?x196)))
 (let ((?x410 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x237 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x410)))
 (let (($x324 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x594 (and $x324 $x237)))
 (let (($x100 (and $x594 $x427)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x546 (and $x199 $x100)))
 (let (($x265 (= $x546 true)))
 (let (($x504 (= $x265 true)))
 (let (($x9 (= $x504 true)))
 (let ((?x86 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x197 (= (_ bv0 3) ?x86)))
 (let (($x48 (= $x197 true)))
 (let (($x526 (= $x48 true)))
 (let (($x377 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x259 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x126 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x259) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x259))))
 (let (($x395 (and true $x126)))
 (let (($x72 (and $x126 $x395)))
 (let ((?x191 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x538))))
 (let (($x378 (= (bvand ?x193 (_ bv4294967288 32)) ?x193)))
 (let (($x79 (= (bvand ?x191 (_ bv4294967292 32)) ?x191)))
 (let (($x59 (and $x79 $x378)))
 (let (($x174 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x191 (bvsub ?x191 (_ bv4 32))) (bvult ?x191 (bvsub ?x191 (_ bv4 32))))))
 (let (($x119 (and (and (and (and (and $x395 $x174) $x79) $x59) $x72) $x377)))
 (let (($x120 (= true $x119)))
 (let (($x122 (not $x172)))
 (let (($x56 (=> $x122 $x120)))
 (let (($x425 (= $x56 true)))
 (let (($x460 (= $x425 true)))
 (let (($x551 (= $x460 true)))
 (let ((?x508 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x80 (bvneg ?x508)))
 (let (($x238 (= ?x80 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x69 (= $x238 true)))
 (let (($x154 (= $x69 true)))
 (let (($x346 (= $x122 true)))
 (let (($x512 (= $x346 true)))
 (let (($x252 (= $x512 true)))
 (let (($x144 (and $x252 $x154)))
 (let (($x393 (and $x144 $x551)))
 (let (($x67 (and $x393 $x526)))
 (let (($x370 (and $x67 $x9)))
 (let (($x329 (and $x370 $x524)))
 (let (($x499 (and $x329 $x502)))
 (let (($x617 (and $x499 $x698)))
 (let (($x351 (and $x567 $x617)))
 (let (($x465 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x442 (and $x465 $x351)))
 (let (($x283 (bvugt ?x191 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x191 (_ bv3 32))))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x506 (=> (bvule ?x191 (bvsub (bvadd ?x191 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x315 $x283)))))))
 (let (($x39 (=> (and $x122 (bvule ?x191 (bvsub (bvadd ?x191 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x315 $x283)))))))
 (let (($x108 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x244)))
 (let (($x309 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x58 (_ bv1 32))) (or false (or false (and true (or $x91 $x108)))))))
 (let (($x121 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x58 (_ bv1 32)))) (or false (or false (and true (or $x91 $x108)))))))
 (let (($x37 (and $x121 $x39)))
 (let (($x671 (and $x37 $x442)))
 (let (($x817 (=> $x671 $x819)))
 (not $x817)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_37)
(= input.dst.llvm-mem @fun_34)
(function @fun_37
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_37 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_9329 (_ BitVec 32)) (BOUND_VARIABLE_9330 (_ BitVec 32)) (BOUND_VARIABLE_9331 (_ BitVec 32)) (BOUND_VARIABLE_9332 (_ BitVec 32)) (BOUND_VARIABLE_9333 (_ BitVec 32)) (BOUND_VARIABLE_9334 (_ BitVec 32)) (BOUND_VARIABLE_9335 Bool) (BOUND_VARIABLE_9336 (_ BitVec 32)) (BOUND_VARIABLE_9337 (_ BitVec 32)) (BOUND_VARIABLE_9338 (_ BitVec 32)) (BOUND_VARIABLE_9339 (_ BitVec 32)) (BOUND_VARIABLE_9340 (_ BitVec 32)) (BOUND_VARIABLE_9341 (_ BitVec 32)) (BOUND_VARIABLE_9342 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv255 8)) (_ bv4 32) (_ bv255 8)) (_ bv3 32) (_ bv255 8)) (_ bv2 32) (_ bv255 8)) (_ bv79657344 32) (_ bv255 8)) (_ bv79657345 32) (_ bv255 8)) (_ bv79657346 32) (_ bv255 8)) (_ bv79657347 32) (_ bv255 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv79657344 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv467567416 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv467567416 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv467567419 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0000000a)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x6f040048)
  (define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x80000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000004)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 #x00000004)
              (= x!11 #x00000000)
              (= x!12 #x00000001)
              (= x!13 false))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000004)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 #x00000004)
              (= x!11 #x00000000)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 87
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x853 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x847 (concat (select input.dst.llvm-mem (bvadd ?x853 (_ bv1 32))) (select input.dst.llvm-mem ?x853))))
 (let ((?x867 (concat (select input.dst.llvm-mem (bvadd ?x853 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x853 (_ bv2 32))) ?x847))))
 (let ((?x838 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x827 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x835 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x844 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x842 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x85 (concat ?x335 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x600 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x328 (concat ?x600 (concat ?x189 ?x85))))
 (let ((?x661 (bvadd ?x328 (_ bv4 32))))
 (let ((?x681 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv1 32))) (select input.dst.llvm-mem ?x661))))
 (let ((?x689 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv2 32))) ?x681))))
 (let ((?x855 (bvadd ?x689 (_ bv4 32))))
 (let ((?x859 (concat (select input.dst.llvm-mem (bvadd ?x855 (_ bv1 32))) (select input.dst.llvm-mem ?x855))))
 (let ((?x865 (concat (select input.dst.llvm-mem (bvadd ?x855 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x855 (_ bv2 32))) ?x859))))
 (let (($x868 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x865 ?x842 false (concat ?x844 (concat ?x835 (concat ?x827 ?x838))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x867)))
 (let ((?x730 (concat (select input.dst.llvm-mem (bvadd ?x689 (_ bv1 32))) (select input.dst.llvm-mem ?x689))))
 (let ((?x742 (concat (select input.dst.llvm-mem (bvadd ?x689 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x689 (_ bv2 32))) ?x730))))
 (let (($x743 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 ?x742)))
 (let (($x800 (and $x743 $x868)))
 (let (($x561 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x787 (=> $x561 $x800)))
 (let (($x124 (= $x561 (bvuge (ite (= (_ bv0 32) ?x689) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x21 (= false false)))
 (let (($x645 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x471 (=> $x645 $x21)))
 (let (($x669 (= $x645 (= (ite (= (_ bv0 32) ?x689) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x487 (and $x669 $x471)))
 (let (($x188 (and $x487 $x124)))
 (let (($x788 (and $x188 $x787)))
 (let ((?x652 (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv1 32))) (select input.dst.llvm-mem ?x328))))
 (let ((?x477 (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv2 32))) ?x652))))
 (let (($x454 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x477)))
 (let (($x782 (and $x454 $x788)))
 (let (($x168 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x810 (=> $x168 $x782)))
 (let ((?x182 (ite (= (_ bv0 32) ?x328) (_ bv0 32) (_ bv1 32))))
 (let (($x439 (bvuge ?x182 (_ bv1 32))))
 (let (($x222 (= $x168 $x439)))
 (let (($x167 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x437 (=> $x167 $x21)))
 (let (($x313 (= ?x182 (_ bv0 32))))
 (let (($x462 (= $x167 $x313)))
 (let (($x271 (and $x462 $x437)))
 (let (($x344 (and $x271 $x222)))
 (let (($x813 (and $x344 $x810)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x610)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x429)))
 (let (($x484 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x111)))
 (let (($x785 (and $x484 $x813)))
 (let (($x740 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x811 (=> $x740 $x785)))
 (let ((?x209 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x136 (bvuge ?x209 (_ bv1 32))))
 (let (($x51 (= $x740 $x136)))
 (let (($x203 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x28 (=> $x203 $x21)))
 (let (($x659 (= ?x209 (_ bv0 32))))
 (let (($x82 (= $x203 $x659)))
 (let (($x548 (and $x82 $x28)))
 (let (($x166 (and $x548 $x51)))
 (let (($x806 (and $x166 $x811)))
 (let (($x804 (= $x806 true)))
 (let (($x808 (= $x804 true)))
 (let (($x625 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x402 (=> $x625 true)))
 (let (($x200 (= $x625 $x439)))
 (let (($x525 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x23 (=> $x525 $x21)))
 (let (($x387 (= $x525 $x313)))
 (let (($x194 (and $x387 $x23)))
 (let (($x490 (and $x194 $x200)))
 (let (($x603 (and $x490 $x402)))
 (let (($x155 (= input.spec-%var-l-1.2.0 ?x111)))
 (let (($x479 (and $x155 $x603)))
 (let (($x146 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x353 (=> $x146 $x479)))
 (let (($x609 (= $x146 $x136)))
 (let (($x24 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x552 (=> $x24 $x21)))
 (let (($x187 (= $x24 $x659)))
 (let (($x519 (and $x187 $x552)))
 (let (($x178 (and $x519 $x609)))
 (let (($x354 (and $x178 $x353)))
 (let (($x556 (= $x354 true)))
 (let (($x276 (= $x556 true)))
 (let (($x665 (= $x276 true)))
 (let (($x748 (=> $x740 true)))
 (let (($x275 (= $x740 $x439)))
 (let (($x537 (= $x203 $x313)))
 (let (($x6 (and $x537 $x28)))
 (let (($x42 (and $x6 $x275)))
 (let (($x34 (and $x42 $x748)))
 (let (($x105 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x111)))
 (let (($x291 (and $x105 $x34)))
 (let (($x518 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x514 (=> $x518 $x291)))
 (let (($x406 (= $x518 $x136)))
 (let (($x492 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x60 (=> $x492 $x21)))
 (let (($x319 (= $x492 $x659)))
 (let (($x128 (and $x319 $x60)))
 (let (($x116 (and $x128 $x406)))
 (let (($x409 (and $x116 $x514)))
 (let (($x95 (= $x409 true)))
 (let (($x637 (= $x95 true)))
 (let (($x558 (= $x637 true)))
 (let ((?x243 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x568 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x568))))
 (let ((?x255 (ite (= (_ bv0 32) ?x296) (_ bv0 32) (_ bv1 32))))
 (let (($x763 (= $x740 (bvuge ?x255 (_ bv1 32)))))
 (let (($x531 (= $x203 (= ?x255 (_ bv0 32)))))
 (let (($x250 (and $x531 $x28)))
 (let (($x764 (and $x250 $x763)))
 (let (($x773 (and $x764 $x748)))
 (let ((?x281 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x432 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x653 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x262 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x721 (concat (select input.dst.llvm-mem ?x262) (concat ?x653 (concat ?x432 ?x281)))))
 (let (($x700 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x721)))
 (let (($x771 (and $x700 $x773)))
 (let (($x775 (=> $x518 $x771)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x638 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (= $x518 (bvuge ?x638 (_ bv1 32)))))
 (let (($x57 (= $x492 (= ?x638 (_ bv0 32)))))
 (let (($x475 (and $x57 $x60)))
 (let (($x588 (and $x475 $x70)))
 (let (($x783 (and $x588 $x775)))
 (let (($x829 (= $x783 true)))
 (let (($x828 (= $x829 true)))
 (let (($x801 (= $x828 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x370 (= (_ bv0 32) ?x9)))
 (let ((?x546 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x546)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x504 (and $x100 $x265)))
 (let (($x180 (and $x504 $x370)))
 (let (($x427 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (and $x427 $x180)))
 (let (($x211 (= $x305 true)))
 (let (($x118 (= $x211 true)))
 (let (($x295 (= $x118 true)))
 (let ((?x199 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x324 (= (_ bv0 3) ?x199)))
 (let (($x410 (= $x324 true)))
 (let (($x237 (= $x410 true)))
 (let (($x120 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x13 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x174 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x13) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x13))))
 (let (($x376 (and true $x174)))
 (let (($x377 (and $x174 $x376)))
 (let ((?x297 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv1 32))) (select input.dst.llvm-mem ?x297))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv2 32))) ?x538))))
 (let (($x333 (= (bvand ?x59 (_ bv4294967288 32)) ?x59)))
 (let (($x365 (= (bvand ?x297 (_ bv4294967292 32)) ?x297)))
 (let (($x390 (and $x365 $x333)))
 (let (($x74 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x297 (bvsub ?x297 (_ bv4 32))) (bvult ?x297 (bvsub ?x297 (_ bv4 32))))))
 (let (($x393 (and (and (and (and (and $x376 $x74) $x365) $x390) $x377) $x120)))
 (let (($x415 (= true $x393)))
 (let (($x122 (not $x172)))
 (let (($x86 (=> $x122 $x415)))
 (let (($x197 (= $x86 true)))
 (let (($x48 (= $x197 true)))
 (let (($x526 (= $x48 true)))
 (let ((?x144 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x347 (bvneg ?x144)))
 (let (($x221 (= ?x347 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x242 (= $x221 true)))
 (let (($x126 (= $x242 true)))
 (let (($x80 (= $x122 true)))
 (let (($x345 (= $x80 true)))
 (let (($x238 (= $x345 true)))
 (let (($x395 (and $x238 $x126)))
 (let (($x67 (and $x395 $x526)))
 (let (($x594 (and $x67 $x237)))
 (let (($x49 (and $x594 $x295)))
 (let (($x802 (and $x49 $x801)))
 (let (($x593 (and $x802 $x558)))
 (let (($x521 (and $x593 $x665)))
 (let (($x602 (and $x518 $x521)))
 (let (($x512 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x613 (and $x512 $x602)))
 (let (($x338 (bvugt ?x297 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x297 (_ bv3 32))))
 (let (($x457 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x465 (=> (bvule ?x297 (bvsub (bvadd ?x297 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x457 $x338)))))))
 (let (($x483 (=> (and $x122 (bvule ?x297 (bvsub (bvadd ?x297 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x457 $x338)))))))
 (let (($x90 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x88 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x243 (_ bv1 32))) (or false (or false (and true (or $x249 $x90)))))))
 (let (($x216 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x243 (_ bv1 32)))) (or false (or false (and true (or $x249 $x90)))))))
 (let (($x186 (and $x216 $x483)))
 (let (($x599 (and $x186 $x613)))
 (let (($x809 (=> $x599 $x808)))
 (not $x809))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x853 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x847 (concat (select input.dst.llvm-mem (bvadd ?x853 (_ bv1 32))) (select input.dst.llvm-mem ?x853))))
 (let ((?x867 (concat (select input.dst.llvm-mem (bvadd ?x853 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x853 (_ bv2 32))) ?x847))))
 (let ((?x838 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x827 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x835 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x844 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x842 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x85 (concat ?x335 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x600 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x328 (concat ?x600 (concat ?x189 ?x85))))
 (let ((?x661 (bvadd ?x328 (_ bv4 32))))
 (let ((?x681 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv1 32))) (select input.dst.llvm-mem ?x661))))
 (let ((?x689 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv2 32))) ?x681))))
 (let ((?x855 (bvadd ?x689 (_ bv4 32))))
 (let ((?x859 (concat (select input.dst.llvm-mem (bvadd ?x855 (_ bv1 32))) (select input.dst.llvm-mem ?x855))))
 (let ((?x865 (concat (select input.dst.llvm-mem (bvadd ?x855 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x855 (_ bv2 32))) ?x859))))
 (let (($x868 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x865 ?x842 false (concat ?x844 (concat ?x835 (concat ?x827 ?x838))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x867)))
 (let ((?x730 (concat (select input.dst.llvm-mem (bvadd ?x689 (_ bv1 32))) (select input.dst.llvm-mem ?x689))))
 (let ((?x742 (concat (select input.dst.llvm-mem (bvadd ?x689 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x689 (_ bv2 32))) ?x730))))
 (let (($x743 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 ?x742)))
 (let (($x800 (and $x743 $x868)))
 (let (($x561 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x787 (=> $x561 $x800)))
 (let (($x124 (= $x561 (bvuge (ite (= (_ bv0 32) ?x689) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x21 (= false false)))
 (let (($x645 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x471 (=> $x645 $x21)))
 (let (($x669 (= $x645 (= (ite (= (_ bv0 32) ?x689) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x487 (and $x669 $x471)))
 (let (($x188 (and $x487 $x124)))
 (let (($x788 (and $x188 $x787)))
 (let ((?x652 (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv1 32))) (select input.dst.llvm-mem ?x328))))
 (let ((?x477 (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv2 32))) ?x652))))
 (let (($x454 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x477)))
 (let (($x782 (and $x454 $x788)))
 (let (($x168 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x810 (=> $x168 $x782)))
 (let ((?x182 (ite (= (_ bv0 32) ?x328) (_ bv0 32) (_ bv1 32))))
 (let (($x439 (bvuge ?x182 (_ bv1 32))))
 (let (($x222 (= $x168 $x439)))
 (let (($x167 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x437 (=> $x167 $x21)))
 (let (($x313 (= ?x182 (_ bv0 32))))
 (let (($x462 (= $x167 $x313)))
 (let (($x271 (and $x462 $x437)))
 (let (($x344 (and $x271 $x222)))
 (let (($x813 (and $x344 $x810)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x610)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x429)))
 (let (($x484 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x111)))
 (let (($x785 (and $x484 $x813)))
 (let (($x740 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x811 (=> $x740 $x785)))
 (let ((?x209 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x136 (bvuge ?x209 (_ bv1 32))))
 (let (($x51 (= $x740 $x136)))
 (let (($x203 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x28 (=> $x203 $x21)))
 (let (($x659 (= ?x209 (_ bv0 32))))
 (let (($x82 (= $x203 $x659)))
 (let (($x548 (and $x82 $x28)))
 (let (($x166 (and $x548 $x51)))
 (let (($x806 (and $x166 $x811)))
 (let (($x804 (= $x806 true)))
 (let (($x808 (= $x804 true)))
 (let (($x625 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x402 (=> $x625 true)))
 (let (($x200 (= $x625 $x439)))
 (let (($x525 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x23 (=> $x525 $x21)))
 (let (($x387 (= $x525 $x313)))
 (let (($x194 (and $x387 $x23)))
 (let (($x490 (and $x194 $x200)))
 (let (($x603 (and $x490 $x402)))
 (let (($x155 (= input.spec-%var-l-1.2.0 ?x111)))
 (let (($x479 (and $x155 $x603)))
 (let (($x146 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x353 (=> $x146 $x479)))
 (let (($x609 (= $x146 $x136)))
 (let (($x24 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x552 (=> $x24 $x21)))
 (let (($x187 (= $x24 $x659)))
 (let (($x519 (and $x187 $x552)))
 (let (($x178 (and $x519 $x609)))
 (let (($x354 (and $x178 $x353)))
 (let (($x556 (= $x354 true)))
 (let (($x276 (= $x556 true)))
 (let (($x665 (= $x276 true)))
 (let (($x748 (=> $x740 true)))
 (let (($x275 (= $x740 $x439)))
 (let (($x537 (= $x203 $x313)))
 (let (($x6 (and $x537 $x28)))
 (let (($x42 (and $x6 $x275)))
 (let (($x34 (and $x42 $x748)))
 (let (($x105 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x111)))
 (let (($x291 (and $x105 $x34)))
 (let (($x518 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x514 (=> $x518 $x291)))
 (let (($x406 (= $x518 $x136)))
 (let (($x492 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x60 (=> $x492 $x21)))
 (let (($x319 (= $x492 $x659)))
 (let (($x128 (and $x319 $x60)))
 (let (($x116 (and $x128 $x406)))
 (let (($x409 (and $x116 $x514)))
 (let (($x95 (= $x409 true)))
 (let (($x637 (= $x95 true)))
 (let (($x558 (= $x637 true)))
 (let ((?x243 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x568 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x568))))
 (let ((?x255 (ite (= (_ bv0 32) ?x296) (_ bv0 32) (_ bv1 32))))
 (let (($x763 (= $x740 (bvuge ?x255 (_ bv1 32)))))
 (let (($x531 (= $x203 (= ?x255 (_ bv0 32)))))
 (let (($x250 (and $x531 $x28)))
 (let (($x764 (and $x250 $x763)))
 (let (($x773 (and $x764 $x748)))
 (let ((?x281 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x432 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x653 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x262 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x721 (concat (select input.dst.llvm-mem ?x262) (concat ?x653 (concat ?x432 ?x281)))))
 (let (($x700 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x721)))
 (let (($x771 (and $x700 $x773)))
 (let (($x775 (=> $x518 $x771)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x638 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (= $x518 (bvuge ?x638 (_ bv1 32)))))
 (let (($x57 (= $x492 (= ?x638 (_ bv0 32)))))
 (let (($x475 (and $x57 $x60)))
 (let (($x588 (and $x475 $x70)))
 (let (($x783 (and $x588 $x775)))
 (let (($x829 (= $x783 true)))
 (let (($x828 (= $x829 true)))
 (let (($x801 (= $x828 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x370 (= (_ bv0 32) ?x9)))
 (let ((?x546 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x546)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x504 (and $x100 $x265)))
 (let (($x180 (and $x504 $x370)))
 (let (($x427 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (and $x427 $x180)))
 (let (($x211 (= $x305 true)))
 (let (($x118 (= $x211 true)))
 (let (($x295 (= $x118 true)))
 (let ((?x199 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x324 (= (_ bv0 3) ?x199)))
 (let (($x410 (= $x324 true)))
 (let (($x237 (= $x410 true)))
 (let (($x120 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x13 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x174 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x13) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x13))))
 (let (($x376 (and true $x174)))
 (let (($x377 (and $x174 $x376)))
 (let ((?x297 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv1 32))) (select input.dst.llvm-mem ?x297))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv2 32))) ?x538))))
 (let (($x333 (= (bvand ?x59 (_ bv4294967288 32)) ?x59)))
 (let (($x365 (= (bvand ?x297 (_ bv4294967292 32)) ?x297)))
 (let (($x390 (and $x365 $x333)))
 (let (($x74 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x297 (bvsub ?x297 (_ bv4 32))) (bvult ?x297 (bvsub ?x297 (_ bv4 32))))))
 (let (($x393 (and (and (and (and (and $x376 $x74) $x365) $x390) $x377) $x120)))
 (let (($x415 (= true $x393)))
 (let (($x122 (not $x172)))
 (let (($x86 (=> $x122 $x415)))
 (let (($x197 (= $x86 true)))
 (let (($x48 (= $x197 true)))
 (let (($x526 (= $x48 true)))
 (let ((?x144 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x347 (bvneg ?x144)))
 (let (($x221 (= ?x347 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x242 (= $x221 true)))
 (let (($x126 (= $x242 true)))
 (let (($x80 (= $x122 true)))
 (let (($x345 (= $x80 true)))
 (let (($x238 (= $x345 true)))
 (let (($x395 (and $x238 $x126)))
 (let (($x67 (and $x395 $x526)))
 (let (($x594 (and $x67 $x237)))
 (let (($x49 (and $x594 $x295)))
 (let (($x802 (and $x49 $x801)))
 (let (($x593 (and $x802 $x558)))
 (let (($x521 (and $x593 $x665)))
 (let (($x602 (and $x518 $x521)))
 (let (($x512 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x613 (and $x512 $x602)))
 (let (($x338 (bvugt ?x297 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x297 (_ bv3 32))))
 (let (($x457 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x465 (=> (bvule ?x297 (bvsub (bvadd ?x297 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x457 $x338)))))))
 (let (($x483 (=> (and $x122 (bvule ?x297 (bvsub (bvadd ?x297 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x457 $x338)))))))
 (let (($x90 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x88 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x243 (_ bv1 32))) (or false (or false (and true (or $x249 $x90)))))))
 (let (($x216 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x243 (_ bv1 32)))) (or false (or false (and true (or $x249 $x90)))))))
 (let (($x186 (and $x216 $x483)))
 (let (($x599 (and $x186 $x613)))
 (let (($x809 (=> $x599 $x808)))
 (not $x809))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_37)
(= input.dst.llvm-mem @fun_34)
(function @fun_37
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_37 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_9545 (_ BitVec 32)) (BOUND_VARIABLE_9546 (_ BitVec 32)) (BOUND_VARIABLE_9547 (_ BitVec 32)) (BOUND_VARIABLE_9548 Bool) (BOUND_VARIABLE_9549 (_ BitVec 32)) (BOUND_VARIABLE_9550 (_ BitVec 32)) (BOUND_VARIABLE_9551 (_ BitVec 32)) (BOUND_VARIABLE_9552 (_ BitVec 32)) (BOUND_VARIABLE_9553 (_ BitVec 32)) (BOUND_VARIABLE_9554 (_ BitVec 32)) (BOUND_VARIABLE_9555 Bool) (BOUND_VARIABLE_9556 (_ BitVec 32)) (BOUND_VARIABLE_9557 (_ BitVec 32)) (BOUND_VARIABLE_9558 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4 32) (_ bv255 8)) (_ bv1 32) (_ bv255 8)) (_ bv3 32) (_ bv255 8)) (_ bv2 32) (_ bv255 8)) (_ bv1321474624 32) (_ bv255 8)) (_ bv1321474625 32) (_ bv255 8)) (_ bv1321474626 32) (_ bv255 8)) (_ bv1321474627 32) (_ bv255 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1321474624 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3730326800 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3730326800 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3730326803 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 88
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x312 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x831 (concat (select input.dst.llvm-mem (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem ?x312))))
 (let ((?x861 (concat (select input.dst.llvm-mem (bvadd ?x312 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x312 (_ bv2 32))) ?x831))))
 (let ((?x169 ((_ extract 2 0) ?x861)))
 (let (($x657 (= (_ bv0 3) ?x169)))
 (let (($x29 (= $x657 true)))
 (let ((?x715 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x707 (= (_ bv0 3) ?x715)))
 (let (($x676 (= $x707 true)))
 (let (($x581 (= $x676 true)))
 (let (($x314 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x46 (=> $x314 true)))
 (let ((?x91 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x453 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem ?x91))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv2 32))) ?x453))))
 (let ((?x298 (ite (= (_ bv0 32) ?x184) (_ bv0 32) (_ bv1 32))))
 (let (($x336 (= $x314 (bvuge ?x298 (_ bv1 32)))))
 (let (($x60 (= false false)))
 (let (($x130 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x272 (=> $x130 $x60)))
 (let (($x511 (= $x130 (= ?x298 (_ bv0 32)))))
 (let (($x560 (and $x511 $x272)))
 (let (($x478 (and $x560 $x336)))
 (let (($x381 (and $x478 $x46)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x311 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x820 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x176 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x824 (concat (select input.dst.llvm-mem ?x176) (concat ?x820 (concat ?x311 ?x55)))))
 (let (($x819 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x824)))
 (let (($x137 (and $x819 $x381)))
 (let (($x17 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x379 (=> $x17 $x137)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x461 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x380 (= $x17 (bvuge ?x461 (_ bv1 32)))))
 (let (($x567 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x207 (=> $x567 $x60)))
 (let (($x192 (= $x567 (= ?x461 (_ bv0 32)))))
 (let (($x508 (and $x192 $x207)))
 (let (($x348 (and $x508 $x380)))
 (let (($x331 (and $x348 $x379)))
 (let (($x585 (= $x331 true)))
 (let (($x165 (= $x585 true)))
 (let (($x14 (= $x165 true)))
 (let (($x837 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x188 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x724 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x188) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x188))))
 (let (($x726 (and true $x724)))
 (let (($x862 (and $x724 $x726)))
 (let (($x856 (= (bvand ?x861 (_ bv4294967288 32)) ?x861)))
 (let (($x836 (= (bvand ?x312 (_ bv4294967292 32)) ?x312)))
 (let (($x859 (and $x836 $x856)))
 (let (($x728 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x312 (bvsub ?x312 (_ bv4 32))) (bvult ?x312 (bvsub ?x312 (_ bv4 32))))))
 (let (($x815 (and (and (and (and (and $x726 $x728) $x836) $x859) $x862) $x837)))
 (let (($x835 (= true $x815)))
 (let (($x122 (not $x172)))
 (let (($x839 (=> $x122 $x835)))
 (let (($x827 (= $x839 true)))
 (let (($x838 (= $x827 true)))
 (let (($x832 (= $x838 true)))
 (let (($x487 (= $x122 true)))
 (let (($x561 (= $x487 true)))
 (let (($x709 (= $x561 true)))
 (let ((?x681 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x684 (= (_ bv0 32) ?x681)))
 (let ((?x597 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x693 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x597)))
 (let (($x719 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x583 (and $x719 $x693)))
 (let (($x689 (and $x583 $x684)))
 (let (($x690 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x691 (and $x690 $x689)))
 (let (($x688 (= $x691 true)))
 (let (($x678 (= $x688 true)))
 (let (($x669 (= $x678 true)))
 (let (($x434 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x287 (=> $x434 true)))
 (let ((?x603 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x479 (concat ?x603 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x354 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x665 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x613 (ite (= (_ bv0 32) (concat ?x665 (concat ?x354 ?x479))) (_ bv0 32) (_ bv1 32))))
 (let (($x355 (= $x434 (bvuge ?x613 (_ bv1 32)))))
 (let (($x194 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x387 (=> $x194 $x60)))
 (let (($x525 (= $x194 (= ?x613 (_ bv0 32)))))
 (let (($x625 (and $x525 $x387)))
 (let (($x505 (and $x625 $x355)))
 (let (($x652 (and $x505 $x287)))
 (let ((?x406 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x606 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x406)))
 (let ((?x520 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x606)))
 (let (($x449 (= input.spec-%var-l-1.2.0 ?x520)))
 (let (($x96 (and $x449 $x652)))
 (let (($x653 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x477 (=> $x653 $x96)))
 (let (($x432 (= $x653 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x492 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x475 (=> $x492 $x60)))
 (let (($x21 (= $x492 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x518 (and $x21 $x475)))
 (let (($x281 (and $x518 $x432)))
 (let (($x454 (and $x281 $x477)))
 (let (($x156 (= $x454 true)))
 (let (($x645 (= $x156 true)))
 (let (($x661 (= $x645 true)))
 (let ((?x221 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x242 (bvneg ?x221)))
 (let (($x395 (= ?x242 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x529 (= $x395 true)))
 (let (($x13 (= $x529 true)))
 (let (($x716 (and $x13 $x661)))
 (let (($x471 (and $x716 $x669)))
 (let (($x124 (and $x471 $x709)))
 (let (($x840 (and $x124 $x832)))
 (let (($x41 (and $x840 $x14)))
 (let (($x129 (and $x41 $x581)))
 (let (($x497 (and $x17 $x129)))
 (let (($x345 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x226 (and $x345 $x497)))
 (let (($x39 (bvugt ?x312 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x312 (_ bv3 32))))
 (let (($x506 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x512 (=> (bvule ?x312 (bvsub (bvadd ?x312 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x506 $x39)))))))
 (let (($x464 (=> (and $x122 (bvule ?x312 (bvsub (bvadd ?x312 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x506 $x39)))))))
 (let (($x121 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x283 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x91 (_ bv1 32))) (or false (or false (and true (or $x309 $x121)))))))
 (let (($x244 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x91 (_ bv1 32)))) (or false (or false (and true (or $x309 $x121)))))))
 (let (($x7 (and $x244 $x464)))
 (let (($x140 (and $x7 $x226)))
 (let (($x563 (=> $x140 $x29)))
 (not $x563)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x312 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x831 (concat (select input.dst.llvm-mem (bvadd ?x312 (_ bv1 32))) (select input.dst.llvm-mem ?x312))))
 (let ((?x861 (concat (select input.dst.llvm-mem (bvadd ?x312 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x312 (_ bv2 32))) ?x831))))
 (let ((?x169 ((_ extract 2 0) ?x861)))
 (let (($x657 (= (_ bv0 3) ?x169)))
 (let (($x29 (= $x657 true)))
 (let ((?x715 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x707 (= (_ bv0 3) ?x715)))
 (let (($x676 (= $x707 true)))
 (let (($x581 (= $x676 true)))
 (let (($x314 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x46 (=> $x314 true)))
 (let ((?x91 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x453 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem ?x91))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv2 32))) ?x453))))
 (let ((?x298 (ite (= (_ bv0 32) ?x184) (_ bv0 32) (_ bv1 32))))
 (let (($x336 (= $x314 (bvuge ?x298 (_ bv1 32)))))
 (let (($x60 (= false false)))
 (let (($x130 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x272 (=> $x130 $x60)))
 (let (($x511 (= $x130 (= ?x298 (_ bv0 32)))))
 (let (($x560 (and $x511 $x272)))
 (let (($x478 (and $x560 $x336)))
 (let (($x381 (and $x478 $x46)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x311 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x820 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x176 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x824 (concat (select input.dst.llvm-mem ?x176) (concat ?x820 (concat ?x311 ?x55)))))
 (let (($x819 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x824)))
 (let (($x137 (and $x819 $x381)))
 (let (($x17 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x379 (=> $x17 $x137)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x461 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x380 (= $x17 (bvuge ?x461 (_ bv1 32)))))
 (let (($x567 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x207 (=> $x567 $x60)))
 (let (($x192 (= $x567 (= ?x461 (_ bv0 32)))))
 (let (($x508 (and $x192 $x207)))
 (let (($x348 (and $x508 $x380)))
 (let (($x331 (and $x348 $x379)))
 (let (($x585 (= $x331 true)))
 (let (($x165 (= $x585 true)))
 (let (($x14 (= $x165 true)))
 (let (($x837 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x188 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x724 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x188) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x188))))
 (let (($x726 (and true $x724)))
 (let (($x862 (and $x724 $x726)))
 (let (($x856 (= (bvand ?x861 (_ bv4294967288 32)) ?x861)))
 (let (($x836 (= (bvand ?x312 (_ bv4294967292 32)) ?x312)))
 (let (($x859 (and $x836 $x856)))
 (let (($x728 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x312 (bvsub ?x312 (_ bv4 32))) (bvult ?x312 (bvsub ?x312 (_ bv4 32))))))
 (let (($x815 (and (and (and (and (and $x726 $x728) $x836) $x859) $x862) $x837)))
 (let (($x835 (= true $x815)))
 (let (($x122 (not $x172)))
 (let (($x839 (=> $x122 $x835)))
 (let (($x827 (= $x839 true)))
 (let (($x838 (= $x827 true)))
 (let (($x832 (= $x838 true)))
 (let (($x487 (= $x122 true)))
 (let (($x561 (= $x487 true)))
 (let (($x709 (= $x561 true)))
 (let ((?x681 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x684 (= (_ bv0 32) ?x681)))
 (let ((?x597 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x693 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x597)))
 (let (($x719 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x583 (and $x719 $x693)))
 (let (($x689 (and $x583 $x684)))
 (let (($x690 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x691 (and $x690 $x689)))
 (let (($x688 (= $x691 true)))
 (let (($x678 (= $x688 true)))
 (let (($x669 (= $x678 true)))
 (let (($x434 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x287 (=> $x434 true)))
 (let ((?x603 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x479 (concat ?x603 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x354 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x665 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x613 (ite (= (_ bv0 32) (concat ?x665 (concat ?x354 ?x479))) (_ bv0 32) (_ bv1 32))))
 (let (($x355 (= $x434 (bvuge ?x613 (_ bv1 32)))))
 (let (($x194 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x387 (=> $x194 $x60)))
 (let (($x525 (= $x194 (= ?x613 (_ bv0 32)))))
 (let (($x625 (and $x525 $x387)))
 (let (($x505 (and $x625 $x355)))
 (let (($x652 (and $x505 $x287)))
 (let ((?x406 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x606 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x406)))
 (let ((?x520 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x606)))
 (let (($x449 (= input.spec-%var-l-1.2.0 ?x520)))
 (let (($x96 (and $x449 $x652)))
 (let (($x653 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x477 (=> $x653 $x96)))
 (let (($x432 (= $x653 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x492 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x475 (=> $x492 $x60)))
 (let (($x21 (= $x492 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x518 (and $x21 $x475)))
 (let (($x281 (and $x518 $x432)))
 (let (($x454 (and $x281 $x477)))
 (let (($x156 (= $x454 true)))
 (let (($x645 (= $x156 true)))
 (let (($x661 (= $x645 true)))
 (let ((?x221 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x242 (bvneg ?x221)))
 (let (($x395 (= ?x242 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x529 (= $x395 true)))
 (let (($x13 (= $x529 true)))
 (let (($x716 (and $x13 $x661)))
 (let (($x471 (and $x716 $x669)))
 (let (($x124 (and $x471 $x709)))
 (let (($x840 (and $x124 $x832)))
 (let (($x41 (and $x840 $x14)))
 (let (($x129 (and $x41 $x581)))
 (let (($x497 (and $x17 $x129)))
 (let (($x345 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x226 (and $x345 $x497)))
 (let (($x39 (bvugt ?x312 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x312 (_ bv3 32))))
 (let (($x506 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x512 (=> (bvule ?x312 (bvsub (bvadd ?x312 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x506 $x39)))))))
 (let (($x464 (=> (and $x122 (bvule ?x312 (bvsub (bvadd ?x312 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x506 $x39)))))))
 (let (($x121 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x283 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x91 (_ bv1 32))) (or false (or false (and true (or $x309 $x121)))))))
 (let (($x244 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x91 (_ bv1 32)))) (or false (or false (and true (or $x309 $x121)))))))
 (let (($x7 (and $x244 $x464)))
 (let (($x140 (and $x7 $x226)))
 (let (($x563 (=> $x140 $x29)))
 (not $x563)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 89
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x352 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x382 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x683 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x191 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x679 (concat (select input.dst.llvm-mem ?x191) (concat ?x683 (concat ?x382 ?x352)))))
 (let ((?x680 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x679)))
 (let ((?x503 (bvadd input.spec-%var-sum-0.L2%6%bbentry input.spec-%var-l-0.L2%6%bbentry.2.0)))
 (let ((?x473 (bvmul (_ bv4294967295 32) ?x503)))
 (let ((?x38 (bvneg ?x473)))
 (let (($x321 (= ?x38 ?x680)))
 (let (($x343 (= $x321 true)))
 (let ((?x107 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x269 (bvneg ?x107)))
 (let (($x131 (= ?x269 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x35 (= $x131 true)))
 (let (($x723 (= $x35 true)))
 (let ((?x696 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x62 (= (_ bv0 3) ?x696)))
 (let (($x692 (= $x62 true)))
 (let (($x367 (= $x692 true)))
 (let (($x227 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x437 (=> $x227 true)))
 (let ((?x249 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x667 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x667))))
 (let ((?x519 (ite (= (_ bv0 32) ?x178) (_ bv0 32) (_ bv1 32))))
 (let (($x167 (= $x227 (bvuge ?x519 (_ bv1 32)))))
 (let (($x583 (= false false)))
 (let (($x288 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x564 (=> $x288 $x583)))
 (let (($x445 (= $x288 (= ?x519 (_ bv0 32)))))
 (let (($x293 (and $x445 $x564)))
 (let (($x462 (and $x293 $x167)))
 (let (($x632 (and $x462 $x437)))
 (let (($x677 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x679)))
 (let (($x651 (and $x677 $x632)))
 (let (($x335 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x16 (=> $x335 $x651)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x42 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (= $x335 (bvuge ?x42 (_ bv1 32)))))
 (let (($x275 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x313 (=> $x275 $x583)))
 (let (($x6 (= $x275 (= ?x42 (_ bv0 32)))))
 (let (($x439 (and $x6 $x313)))
 (let (($x189 (and $x439 $x185)))
 (let (($x274 (and $x189 $x16)))
 (let (($x559 (= $x274 true)))
 (let (($x486 (= $x559 true)))
 (let (($x501 (= $x486 true)))
 (let (($x391 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x180 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x180) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x180))))
 (let (($x196 (and true $x100)))
 (let (($x588 (and $x100 $x196)))
 (let ((?x315 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem ?x315))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv2 32))) ?x199))))
 (let (($x591 (= (bvand ?x118 (_ bv4294967288 32)) ?x118)))
 (let (($x197 (= (bvand ?x315 (_ bv4294967292 32)) ?x315)))
 (let (($x70 (and $x197 $x591)))
 (let (($x410 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x315 (bvsub ?x315 (_ bv4 32))) (bvult ?x315 (bvsub ?x315 (_ bv4 32))))))
 (let (($x764 (and (and (and (and (and $x196 $x410) $x197) $x70) $x588) $x391)))
 (let (($x250 (= true $x764)))
 (let (($x122 (not $x172)))
 (let (($x740 (=> $x122 $x250)))
 (let (($x480 (= $x740 true)))
 (let (($x531 (= $x480 true)))
 (let (($x255 (= $x531 true)))
 (let (($x393 (= $x122 true)))
 (let (($x415 (= $x393 true)))
 (let (($x594 (= $x415 true)))
 (let ((?x390 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x390)))
 (let ((?x377 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x551 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x377)))
 (let (($x510 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x510 $x551)))
 (let (($x398 (and $x333 $x59)))
 (let (($x500 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (and $x500 $x398)))
 (let (($x72 (= $x303 true)))
 (let (($x460 (= $x72 true)))
 (let (($x119 (= $x460 true)))
 (let (($x205 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x468 (=> $x205 true)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x140 (concat ?x226 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x657 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x238 (ite (= (_ bv0 32) (concat ?x317 (concat ?x657 ?x140))) (_ bv0 32) (_ bv1 32))))
 (let (($x533 (= $x205 (bvuge ?x238 (_ bv1 32)))))
 (let (($x707 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x686 (=> $x707 $x583)))
 (let (($x41 (= $x707 (= ?x238 (_ bv0 32)))))
 (let (($x676 (and $x41 $x686)))
 (let (($x610 (and $x676 $x533)))
 (let (($x193 (and $x610 $x468)))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x567)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x192)))
 (let (($x413 (= input.spec-%var-l-1.2.0 ?x17)))
 (let (($x397 (and $x413 $x193)))
 (let (($x487 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x396 (=> $x487 $x397)))
 (let (($x709 (= $x487 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x714 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x681 (=> $x714 $x583)))
 (let (($x693 (= $x714 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x684 (and $x693 $x681)))
 (let (($x124 (and $x684 $x709)))
 (let (($x378 (and $x124 $x396)))
 (let (($x135 (= $x378 true)))
 (let (($x284 (= $x135 true)))
 (let (($x56 (= $x284 true)))
 (let (($x120 (and $x56 $x119)))
 (let (($x370 (and $x120 $x594)))
 (let (($x28 (and $x370 $x255)))
 (let (($x15 (and $x28 $x501)))
 (let (($x87 (and $x15 $x367)))
 (let (($x708 (and $x87 $x723)))
 (let (($x282 (and $x335 $x708)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x300 (and $x259 $x282)))
 (let (($x483 (bvugt ?x315 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x315 (_ bv3 32))))
 (let (($x465 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x345 (=> (bvule ?x315 (bvsub (bvadd ?x315 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x465 $x483)))))))
 (let (($x346 (=> (and $x122 (bvule ?x315 (bvsub (bvadd ?x315 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x465 $x483)))))))
 (let (($x216 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x338 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x249 (_ bv1 32))) (or false (or false (and true (or $x88 $x216)))))))
 (let (($x262 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x249 (_ bv1 32)))) (or false (or false (and true (or $x88 $x216)))))))
 (let (($x99 (and $x262 $x346)))
 (let (($x218 (and $x99 $x300)))
 (let (($x301 (=> $x218 $x343)))
 (not $x301))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x352 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x382 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x683 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x191 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x679 (concat (select input.dst.llvm-mem ?x191) (concat ?x683 (concat ?x382 ?x352)))))
 (let ((?x680 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x679)))
 (let ((?x503 (bvadd input.spec-%var-sum-0.L2%6%bbentry input.spec-%var-l-0.L2%6%bbentry.2.0)))
 (let ((?x473 (bvmul (_ bv4294967295 32) ?x503)))
 (let ((?x38 (bvneg ?x473)))
 (let (($x321 (= ?x38 ?x680)))
 (let (($x343 (= $x321 true)))
 (let ((?x107 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x269 (bvneg ?x107)))
 (let (($x131 (= ?x269 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x35 (= $x131 true)))
 (let (($x723 (= $x35 true)))
 (let ((?x696 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x62 (= (_ bv0 3) ?x696)))
 (let (($x692 (= $x62 true)))
 (let (($x367 (= $x692 true)))
 (let (($x227 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x437 (=> $x227 true)))
 (let ((?x249 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x667 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x667))))
 (let ((?x519 (ite (= (_ bv0 32) ?x178) (_ bv0 32) (_ bv1 32))))
 (let (($x167 (= $x227 (bvuge ?x519 (_ bv1 32)))))
 (let (($x583 (= false false)))
 (let (($x288 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x564 (=> $x288 $x583)))
 (let (($x445 (= $x288 (= ?x519 (_ bv0 32)))))
 (let (($x293 (and $x445 $x564)))
 (let (($x462 (and $x293 $x167)))
 (let (($x632 (and $x462 $x437)))
 (let (($x677 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x679)))
 (let (($x651 (and $x677 $x632)))
 (let (($x335 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x16 (=> $x335 $x651)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x42 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (= $x335 (bvuge ?x42 (_ bv1 32)))))
 (let (($x275 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x313 (=> $x275 $x583)))
 (let (($x6 (= $x275 (= ?x42 (_ bv0 32)))))
 (let (($x439 (and $x6 $x313)))
 (let (($x189 (and $x439 $x185)))
 (let (($x274 (and $x189 $x16)))
 (let (($x559 (= $x274 true)))
 (let (($x486 (= $x559 true)))
 (let (($x501 (= $x486 true)))
 (let (($x391 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x180 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x180) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x180))))
 (let (($x196 (and true $x100)))
 (let (($x588 (and $x100 $x196)))
 (let ((?x315 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem ?x315))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv2 32))) ?x199))))
 (let (($x591 (= (bvand ?x118 (_ bv4294967288 32)) ?x118)))
 (let (($x197 (= (bvand ?x315 (_ bv4294967292 32)) ?x315)))
 (let (($x70 (and $x197 $x591)))
 (let (($x410 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x315 (bvsub ?x315 (_ bv4 32))) (bvult ?x315 (bvsub ?x315 (_ bv4 32))))))
 (let (($x764 (and (and (and (and (and $x196 $x410) $x197) $x70) $x588) $x391)))
 (let (($x250 (= true $x764)))
 (let (($x122 (not $x172)))
 (let (($x740 (=> $x122 $x250)))
 (let (($x480 (= $x740 true)))
 (let (($x531 (= $x480 true)))
 (let (($x255 (= $x531 true)))
 (let (($x393 (= $x122 true)))
 (let (($x415 (= $x393 true)))
 (let (($x594 (= $x415 true)))
 (let ((?x390 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x390)))
 (let ((?x377 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x551 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x377)))
 (let (($x510 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x510 $x551)))
 (let (($x398 (and $x333 $x59)))
 (let (($x500 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (and $x500 $x398)))
 (let (($x72 (= $x303 true)))
 (let (($x460 (= $x72 true)))
 (let (($x119 (= $x460 true)))
 (let (($x205 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x468 (=> $x205 true)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x140 (concat ?x226 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x657 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x238 (ite (= (_ bv0 32) (concat ?x317 (concat ?x657 ?x140))) (_ bv0 32) (_ bv1 32))))
 (let (($x533 (= $x205 (bvuge ?x238 (_ bv1 32)))))
 (let (($x707 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x686 (=> $x707 $x583)))
 (let (($x41 (= $x707 (= ?x238 (_ bv0 32)))))
 (let (($x676 (and $x41 $x686)))
 (let (($x610 (and $x676 $x533)))
 (let (($x193 (and $x610 $x468)))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x567)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x192)))
 (let (($x413 (= input.spec-%var-l-1.2.0 ?x17)))
 (let (($x397 (and $x413 $x193)))
 (let (($x487 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x396 (=> $x487 $x397)))
 (let (($x709 (= $x487 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x714 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x681 (=> $x714 $x583)))
 (let (($x693 (= $x714 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x684 (and $x693 $x681)))
 (let (($x124 (and $x684 $x709)))
 (let (($x378 (and $x124 $x396)))
 (let (($x135 (= $x378 true)))
 (let (($x284 (= $x135 true)))
 (let (($x56 (= $x284 true)))
 (let (($x120 (and $x56 $x119)))
 (let (($x370 (and $x120 $x594)))
 (let (($x28 (and $x370 $x255)))
 (let (($x15 (and $x28 $x501)))
 (let (($x87 (and $x15 $x367)))
 (let (($x708 (and $x87 $x723)))
 (let (($x282 (and $x335 $x708)))
 (let (($x259 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x300 (and $x259 $x282)))
 (let (($x483 (bvugt ?x315 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x315 (_ bv3 32))))
 (let (($x465 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x345 (=> (bvule ?x315 (bvsub (bvadd ?x315 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x465 $x483)))))))
 (let (($x346 (=> (and $x122 (bvule ?x315 (bvsub (bvadd ?x315 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x465 $x483)))))))
 (let (($x216 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x338 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x249 (_ bv1 32))) (or false (or false (and true (or $x88 $x216)))))))
 (let (($x262 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x249 (_ bv1 32)))) (or false (or false (and true (or $x88 $x216)))))))
 (let (($x99 (and $x262 $x346)))
 (let (($x218 (and $x99 $x300)))
 (let (($x301 (=> $x218 $x343)))
 (not $x301))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 90
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x424 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x474 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem ?x424))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv2 32))) ?x474))))
 (let ((?x110 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x251 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x457 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd ?x457 (_ bv1 32))) (select input.dst.llvm-mem ?x457))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x457 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x457 (_ bv2 32))) ?x610))))
 (let (($x145 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x135 ?x251 false (concat ?x127 (concat ?x195 (concat ?x117 ?x110))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x45)))
 (let (($x217 (= $x145 true)))
 (let (($x329 (= $x217 true)))
 (let ((?x584 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x649 (= (_ bv0 3) ?x584)))
 (let (($x552 (= $x649 true)))
 (let (($x609 (= $x552 true)))
 (let (($x536 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x327 (=> $x536 true)))
 (let ((?x314 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x331 (concat ?x314 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x478 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x379 (ite (= (_ bv0 32) (concat ?x478 (concat ?x381 ?x331))) (_ bv0 32) (_ bv1 32))))
 (let (($x571 (= $x536 (bvuge ?x379 (_ bv1 32)))))
 (let (($x682 (= false false)))
 (let (($x616 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x159 (=> $x616 $x682)))
 (let (($x636 (= $x616 (= ?x379 (_ bv0 32)))))
 (let (($x511 (and $x636 $x159)))
 (let (($x433 (and $x511 $x571)))
 (let (($x646 (and $x433 $x327)))
 (let ((?x868 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x847 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x868)))
 (let ((?x806 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x847)))
 (let (($x810 (= input.spec-%var-l-1.2.0 ?x806)))
 (let (($x138 (and $x810 $x646)))
 (let (($x311 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x320 (=> $x311 $x138)))
 (let (($x302 (= $x311 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x89 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x184 (=> $x89 $x682)))
 (let (($x386 (= $x89 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x614 (and $x386 $x184)))
 (let (($x68 (and $x614 $x302)))
 (let (($x596 (and $x68 $x320)))
 (let (($x655 (= $x596 true)))
 (let (($x323 (= $x655 true)))
 (let (($x152 (= $x323 true)))
 (let (($x678 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x669 (=> $x678 true)))
 (let ((?x309 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x652 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x387 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x652))))
 (let ((?x287 (ite (= (_ bv0 32) ?x387) (_ bv0 32) (_ bv1 32))))
 (let (($x691 (= $x678 (bvuge ?x287 (_ bv1 32)))))
 (let (($x200 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x406 (=> $x200 $x682)))
 (let (($x128 (= $x200 (= ?x287 (_ bv0 32)))))
 (let (($x276 (and $x128 $x406)))
 (let (($x688 (and $x276 $x691)))
 (let (($x733 (and $x688 $x669)))
 (let ((?x282 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x297 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x343 (concat (select input.dst.llvm-mem ?x297) (concat ?x38 (concat ?x218 ?x282)))))
 (let (($x301 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x343)))
 (let (($x860 (and $x301 $x733)))
 (let (($x593 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x861 (=> $x593 $x860)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x247 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x637 (= $x593 (bvuge ?x247 (_ bv1 32)))))
 (let (($x683 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x697 (=> $x683 $x682)))
 (let (($x352 (= $x683 (= ?x247 (_ bv0 32)))))
 (let (($x679 (and $x352 $x697)))
 (let (($x360 (and $x679 $x637)))
 (let (($x857 (and $x360 $x861)))
 (let (($x834 (= $x857 true)))
 (let (($x831 (= $x834 true)))
 (let (($x863 (= $x831 true)))
 (let (($x551 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x317 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x317) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x317))))
 (let (($x129 (and true $x226)))
 (let (($x510 (and $x226 $x129)))
 (let (($x365 (= (bvand ?x135 (_ bv4294967288 32)) ?x135)))
 (let (($x686 (= (bvand ?x457 (_ bv4294967292 32)) ?x457)))
 (let (($x500 (and $x686 $x365)))
 (let (($x238 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x457 (bvsub ?x457 (_ bv4 32))) (bvult ?x457 (bvsub ?x457 (_ bv4 32))))))
 (let (($x303 (and (and (and (and (and $x129 $x238) $x686) $x500) $x510) $x551)))
 (let (($x72 (= true $x303)))
 (let (($x122 (not $x172)))
 (let (($x460 (=> $x122 $x72)))
 (let (($x119 (= $x460 true)))
 (let (($x120 (= $x119 true)))
 (let (($x393 (= $x120 true)))
 (let (($x715 (= $x122 true)))
 (let (($x707 (= $x715 true)))
 (let (($x581 (= $x707 true)))
 (let ((?x580 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x840 (= (_ bv0 32) ?x580)))
 (let ((?x508 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x404 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x508)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x461 (and $x207 $x404)))
 (let (($x666 (and $x461 $x840)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x832 (and $x57 $x666)))
 (let (($x567 (= $x832 true)))
 (let (($x192 (= $x567 true)))
 (let (($x17 (= $x192 true)))
 (let ((?x681 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x684 (bvneg ?x681)))
 (let (($x561 (= ?x684 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x709 (= $x561 true)))
 (let (($x124 (= $x709 true)))
 (let (($x413 (and $x124 $x17)))
 (let (($x563 (and $x413 $x581)))
 (let (($x415 (and $x563 $x393)))
 (let (($x830 (and $x415 $x863)))
 (let (($x587 (and $x830 $x152)))
 (let (($x168 (and $x587 $x609)))
 (let (($x155 (and $x593 $x168)))
 (let (($x714 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x344 (and $x714 $x155)))
 (let (($x464 (bvugt ?x457 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x457 (_ bv3 32))))
 (let (($x512 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x259 (=> (bvule ?x457 (bvsub (bvadd ?x457 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x512 $x464)))))))
 (let (($x80 (=> (and $x122 (bvule ?x457 (bvsub (bvadd ?x457 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x512 $x464)))))))
 (let (($x244 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x283 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x297)))
 (let (($x39 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x309 (_ bv1 32))) (or false (or false (and true (or $x283 $x244)))))))
 (let (($x176 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x309 (_ bv1 32)))) (or false (or false (and true (or $x283 $x244)))))))
 (let (($x37 (and $x176 $x80)))
 (let (($x334 (and $x37 $x344)))
 (let (($x416 (=> $x334 $x329)))
 (not $x416)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x424 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x474 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem ?x424))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv2 32))) ?x474))))
 (let ((?x110 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x251 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x457 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd ?x457 (_ bv1 32))) (select input.dst.llvm-mem ?x457))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x457 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x457 (_ bv2 32))) ?x610))))
 (let (($x145 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x135 ?x251 false (concat ?x127 (concat ?x195 (concat ?x117 ?x110))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x45)))
 (let (($x217 (= $x145 true)))
 (let (($x329 (= $x217 true)))
 (let ((?x584 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x649 (= (_ bv0 3) ?x584)))
 (let (($x552 (= $x649 true)))
 (let (($x609 (= $x552 true)))
 (let (($x536 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x327 (=> $x536 true)))
 (let ((?x314 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x331 (concat ?x314 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x478 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x379 (ite (= (_ bv0 32) (concat ?x478 (concat ?x381 ?x331))) (_ bv0 32) (_ bv1 32))))
 (let (($x571 (= $x536 (bvuge ?x379 (_ bv1 32)))))
 (let (($x682 (= false false)))
 (let (($x616 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x159 (=> $x616 $x682)))
 (let (($x636 (= $x616 (= ?x379 (_ bv0 32)))))
 (let (($x511 (and $x636 $x159)))
 (let (($x433 (and $x511 $x571)))
 (let (($x646 (and $x433 $x327)))
 (let ((?x868 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x847 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x868)))
 (let ((?x806 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x847)))
 (let (($x810 (= input.spec-%var-l-1.2.0 ?x806)))
 (let (($x138 (and $x810 $x646)))
 (let (($x311 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x320 (=> $x311 $x138)))
 (let (($x302 (= $x311 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x89 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x184 (=> $x89 $x682)))
 (let (($x386 (= $x89 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x614 (and $x386 $x184)))
 (let (($x68 (and $x614 $x302)))
 (let (($x596 (and $x68 $x320)))
 (let (($x655 (= $x596 true)))
 (let (($x323 (= $x655 true)))
 (let (($x152 (= $x323 true)))
 (let (($x678 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x669 (=> $x678 true)))
 (let ((?x309 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x652 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x387 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x652))))
 (let ((?x287 (ite (= (_ bv0 32) ?x387) (_ bv0 32) (_ bv1 32))))
 (let (($x691 (= $x678 (bvuge ?x287 (_ bv1 32)))))
 (let (($x200 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x406 (=> $x200 $x682)))
 (let (($x128 (= $x200 (= ?x287 (_ bv0 32)))))
 (let (($x276 (and $x128 $x406)))
 (let (($x688 (and $x276 $x691)))
 (let (($x733 (and $x688 $x669)))
 (let ((?x282 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x297 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x343 (concat (select input.dst.llvm-mem ?x297) (concat ?x38 (concat ?x218 ?x282)))))
 (let (($x301 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x343)))
 (let (($x860 (and $x301 $x733)))
 (let (($x593 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x861 (=> $x593 $x860)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x247 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x637 (= $x593 (bvuge ?x247 (_ bv1 32)))))
 (let (($x683 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x697 (=> $x683 $x682)))
 (let (($x352 (= $x683 (= ?x247 (_ bv0 32)))))
 (let (($x679 (and $x352 $x697)))
 (let (($x360 (and $x679 $x637)))
 (let (($x857 (and $x360 $x861)))
 (let (($x834 (= $x857 true)))
 (let (($x831 (= $x834 true)))
 (let (($x863 (= $x831 true)))
 (let (($x551 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x317 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x226 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x317) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x317))))
 (let (($x129 (and true $x226)))
 (let (($x510 (and $x226 $x129)))
 (let (($x365 (= (bvand ?x135 (_ bv4294967288 32)) ?x135)))
 (let (($x686 (= (bvand ?x457 (_ bv4294967292 32)) ?x457)))
 (let (($x500 (and $x686 $x365)))
 (let (($x238 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x457 (bvsub ?x457 (_ bv4 32))) (bvult ?x457 (bvsub ?x457 (_ bv4 32))))))
 (let (($x303 (and (and (and (and (and $x129 $x238) $x686) $x500) $x510) $x551)))
 (let (($x72 (= true $x303)))
 (let (($x122 (not $x172)))
 (let (($x460 (=> $x122 $x72)))
 (let (($x119 (= $x460 true)))
 (let (($x120 (= $x119 true)))
 (let (($x393 (= $x120 true)))
 (let (($x715 (= $x122 true)))
 (let (($x707 (= $x715 true)))
 (let (($x581 (= $x707 true)))
 (let ((?x580 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x840 (= (_ bv0 32) ?x580)))
 (let ((?x508 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x404 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x508)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x461 (and $x207 $x404)))
 (let (($x666 (and $x461 $x840)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x832 (and $x57 $x666)))
 (let (($x567 (= $x832 true)))
 (let (($x192 (= $x567 true)))
 (let (($x17 (= $x192 true)))
 (let ((?x681 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x684 (bvneg ?x681)))
 (let (($x561 (= ?x684 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x709 (= $x561 true)))
 (let (($x124 (= $x709 true)))
 (let (($x413 (and $x124 $x17)))
 (let (($x563 (and $x413 $x581)))
 (let (($x415 (and $x563 $x393)))
 (let (($x830 (and $x415 $x863)))
 (let (($x587 (and $x830 $x152)))
 (let (($x168 (and $x587 $x609)))
 (let (($x155 (and $x593 $x168)))
 (let (($x714 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x344 (and $x714 $x155)))
 (let (($x464 (bvugt ?x457 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x457 (_ bv3 32))))
 (let (($x512 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x259 (=> (bvule ?x457 (bvsub (bvadd ?x457 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x512 $x464)))))))
 (let (($x80 (=> (and $x122 (bvule ?x457 (bvsub (bvadd ?x457 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x512 $x464)))))))
 (let (($x244 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x283 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x297)))
 (let (($x39 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x309 (_ bv1 32))) (or false (or false (and true (or $x283 $x244)))))))
 (let (($x176 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x309 (_ bv1 32)))) (or false (or false (and true (or $x283 $x244)))))))
 (let (($x37 (and $x176 $x80)))
 (let (($x334 (and $x37 $x344)))
 (let (($x416 (=> $x334 $x329)))
 (not $x416)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_20)
(= input.dst.llvm-mem @fun_37)
(function @fun_20
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_20 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_37
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_10182 (_ BitVec 32)) (BOUND_VARIABLE_10183 (_ BitVec 32)) (BOUND_VARIABLE_10184 (_ BitVec 32)) (BOUND_VARIABLE_10185 Bool) (BOUND_VARIABLE_10186 (_ BitVec 32)) (BOUND_VARIABLE_10187 (_ BitVec 32)) (BOUND_VARIABLE_10188 (_ BitVec 32)) (BOUND_VARIABLE_10189 (_ BitVec 32)) (BOUND_VARIABLE_10190 (_ BitVec 32)) (BOUND_VARIABLE_10191 (_ BitVec 32)) (BOUND_VARIABLE_10192 Bool) (BOUND_VARIABLE_10193 (_ BitVec 32)) (BOUND_VARIABLE_10194 (_ BitVec 32)) (BOUND_VARIABLE_10195 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv29725504 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1608994648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1608994648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1608994651 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffe8)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff9)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xca7d4498)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00800000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x2c585939)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffffe8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffeb)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x2c585939)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x2c585939)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 91
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x782 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x577 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x548 (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv1 32))) (select input.dst.llvm-mem ?x577))))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv2 32))) ?x548))))
 (let ((?x328 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x615 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x788 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x273 (concat ?x204 (concat ?x788 (concat ?x615 ?x328)))))
 (let ((?x506 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd ?x506 (_ bv1 32))) (select input.dst.llvm-mem ?x506))))
 (let ((?x500 (concat (select input.dst.llvm-mem (bvadd ?x506 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x506 (_ bv2 32))) ?x610))))
 (let (($x340 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x500 ?x273 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x341 ?x782 false)))
 (let (($x844 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x573 (=> $x844 $x340)))
 (let (($x403 (= $x844 (bvuge (ite (= (_ bv0 32) ?x500) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x848 (= false false)))
 (let (($x530 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x529 (=> $x530 $x848)))
 (let (($x349 (= $x530 (= (ite (= (_ bv0 32) ?x500) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x555 (and $x349 $x529)))
 (let (($x550 (and $x555 $x403)))
 (let (($x292 (and $x550 $x573)))
 (let (($x47 (= $x292 true)))
 (let (($x725 (= $x47 true)))
 (let ((?x158 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x488 (= (_ bv0 3) ?x158)))
 (let (($x554 (= $x488 true)))
 (let (($x544 (= $x554 true)))
 (let ((?x281 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x319 (concat ?x281 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x606 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x60 (concat ?x23 (concat ?x606 ?x319))))
 (let (($x507 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x60 ?x273 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x341 ?x782 false)))
 (let (($x278 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x539 (=> $x278 $x507)))
 (let (($x261 (= $x278 (bvuge (ite (= (_ bv0 32) ?x60) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x76 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x662 (=> $x76 $x848)))
 (let (($x212 (= $x76 (= (ite (= (_ bv0 32) ?x60) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x853 (and $x212 $x662)))
 (let (($x235 (and $x853 $x261)))
 (let (($x444 (and $x235 $x539)))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x425)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x116)))
 (let (($x729 (= input.spec-%var-l-1.2.0 ?x348)))
 (let (($x78 (and $x729 $x444)))
 (let (($x24 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x417 (=> $x24 $x78)))
 (let (($x185 (= $x24 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x201 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x588 (=> $x201 $x848)))
 (let (($x764 (= $x201 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x763 (and $x764 $x588)))
 (let (($x189 (and $x763 $x185)))
 (let (($x170 (and $x189 $x417)))
 (let (($x363 (= $x170 true)))
 (let (($x535 (= $x363 true)))
 (let (($x448 (= $x535 true)))
 (let ((?x88 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv1 32))) (select input.dst.llvm-mem ?x88))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv2 32))) ?x197))))
 (let (($x785 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x100 ?x273 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x341 ?x782 false)))
 (let (($x43 (=> $x844 $x785)))
 (let (($x817 (= $x844 (bvuge (ite (= (_ bv0 32) ?x100) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x522 (= $x530 (= (ite (= (_ bv0 32) ?x100) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x496 (and $x522 $x529)))
 (let (($x859 (and $x496 $x817)))
 (let (($x803 (and $x859 $x43)))
 (let ((?x155 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x541 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x312 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x248 (concat (select input.dst.llvm-mem ?x312) (concat ?x541 (concat ?x334 ?x155)))))
 (let (($x592 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x248)))
 (let (($x392 (and $x592 $x803)))
 (let (($x849 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x828 (=> $x849 $x392)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x822 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x847 (= $x849 (bvuge ?x822 (_ bv1 32)))))
 (let (($x311 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x846 (=> $x311 $x848)))
 (let (($x68 (= $x311 (= ?x822 (_ bv0 32)))))
 (let (($x867 (and $x68 $x846)))
 (let (($x806 (and $x867 $x847)))
 (let (($x447 (and $x806 $x828)))
 (let (($x296 (= $x447 true)))
 (let (($x771 (= $x296 true)))
 (let (($x494 (= $x771 true)))
 (let (($x72 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x29 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x238 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x29) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x29))))
 (let (($x333 (and true $x238)))
 (let (($x551 (and $x238 $x333)))
 (let (($x398 (= (bvand ?x500 (_ bv4294967288 32)) ?x500)))
 (let (($x193 (= (bvand ?x506 (_ bv4294967292 32)) ?x506)))
 (let (($x377 (and $x193 $x398)))
 (let (($x676 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x506 (bvsub ?x506 (_ bv4 32))) (bvult ?x506 (bvsub ?x506 (_ bv4 32))))))
 (let (($x415 (and (and (and (and (and $x333 $x676) $x193) $x377) $x551) $x72)))
 (let (($x720 (= true $x415)))
 (let (($x122 (not $x172)))
 (let (($x683 (=> $x122 $x720)))
 (let (($x247 (= $x683 true)))
 (let (($x382 (= $x247 true)))
 (let (($x352 (= $x382 true)))
 (let (($x657 (= $x122 true)))
 (let (($x497 (= $x657 true)))
 (let (($x226 (= $x497 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x413 (= (_ bv0 32) ?x17)))
 (let ((?x832 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x567 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x832)))
 (let (($x666 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x666 $x567)))
 (let (($x715 (and $x192 $x413)))
 (let (($x840 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x707 (and $x840 $x715)))
 (let (($x581 (= $x707 true)))
 (let (($x563 (= $x581 true)))
 (let (($x169 (= $x563 true)))
 (let ((?x838 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x57 (bvneg ?x838)))
 (let (($x508 (= ?x57 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x404 (= $x508 true)))
 (let (($x461 (= $x404 true)))
 (let (($x317 (and $x461 $x169)))
 (let (($x129 (and $x317 $x226)))
 (let (($x682 (and $x129 $x352)))
 (let (($x209 (and $x682 $x494)))
 (let (($x236 (and $x209 $x448)))
 (let (($x102 (and $x236 $x544)))
 (let (($x234 (and $x849 $x102)))
 (let (($x583 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x446 (and $x583 $x234)))
 (let (($x346 (bvugt ?x506 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x506 (_ bv3 32))))
 (let (($x345 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x714 (=> (bvule ?x506 (bvsub (bvadd ?x506 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x345 $x346)))))))
 (let (($x347 (=> (and $x122 (bvule ?x506 (bvsub (bvadd ?x506 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x345 $x346)))))))
 (let (($x262 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x338 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x312)))
 (let (($x483 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x88 (_ bv1 32))) (or false (or false (and true (or $x338 $x262)))))))
 (let (($x191 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x88 (_ bv1 32)))) (or false (or false (and true (or $x338 $x262)))))))
 (let (($x186 (and $x191 $x347)))
 (let (($x161 (and $x186 $x446)))
 (let (($x523 (=> $x161 $x725)))
 (not $x523)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x782 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x577 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x548 (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv1 32))) (select input.dst.llvm-mem ?x577))))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x577 (_ bv2 32))) ?x548))))
 (let ((?x328 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x615 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x788 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x273 (concat ?x204 (concat ?x788 (concat ?x615 ?x328)))))
 (let ((?x506 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd ?x506 (_ bv1 32))) (select input.dst.llvm-mem ?x506))))
 (let ((?x500 (concat (select input.dst.llvm-mem (bvadd ?x506 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x506 (_ bv2 32))) ?x610))))
 (let (($x340 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x500 ?x273 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x341 ?x782 false)))
 (let (($x844 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x573 (=> $x844 $x340)))
 (let (($x403 (= $x844 (bvuge (ite (= (_ bv0 32) ?x500) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x848 (= false false)))
 (let (($x530 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x529 (=> $x530 $x848)))
 (let (($x349 (= $x530 (= (ite (= (_ bv0 32) ?x500) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x555 (and $x349 $x529)))
 (let (($x550 (and $x555 $x403)))
 (let (($x292 (and $x550 $x573)))
 (let (($x47 (= $x292 true)))
 (let (($x725 (= $x47 true)))
 (let ((?x158 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x488 (= (_ bv0 3) ?x158)))
 (let (($x554 (= $x488 true)))
 (let (($x544 (= $x554 true)))
 (let ((?x281 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x319 (concat ?x281 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x606 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x60 (concat ?x23 (concat ?x606 ?x319))))
 (let (($x507 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x60 ?x273 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x341 ?x782 false)))
 (let (($x278 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x539 (=> $x278 $x507)))
 (let (($x261 (= $x278 (bvuge (ite (= (_ bv0 32) ?x60) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x76 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x662 (=> $x76 $x848)))
 (let (($x212 (= $x76 (= (ite (= (_ bv0 32) ?x60) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x853 (and $x212 $x662)))
 (let (($x235 (and $x853 $x261)))
 (let (($x444 (and $x235 $x539)))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x425)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x116)))
 (let (($x729 (= input.spec-%var-l-1.2.0 ?x348)))
 (let (($x78 (and $x729 $x444)))
 (let (($x24 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x417 (=> $x24 $x78)))
 (let (($x185 (= $x24 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x201 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x588 (=> $x201 $x848)))
 (let (($x764 (= $x201 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x763 (and $x764 $x588)))
 (let (($x189 (and $x763 $x185)))
 (let (($x170 (and $x189 $x417)))
 (let (($x363 (= $x170 true)))
 (let (($x535 (= $x363 true)))
 (let (($x448 (= $x535 true)))
 (let ((?x88 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv1 32))) (select input.dst.llvm-mem ?x88))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv2 32))) ?x197))))
 (let (($x785 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x100 ?x273 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x341 ?x782 false)))
 (let (($x43 (=> $x844 $x785)))
 (let (($x817 (= $x844 (bvuge (ite (= (_ bv0 32) ?x100) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x522 (= $x530 (= (ite (= (_ bv0 32) ?x100) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x496 (and $x522 $x529)))
 (let (($x859 (and $x496 $x817)))
 (let (($x803 (and $x859 $x43)))
 (let ((?x155 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x541 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x312 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x248 (concat (select input.dst.llvm-mem ?x312) (concat ?x541 (concat ?x334 ?x155)))))
 (let (($x592 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x248)))
 (let (($x392 (and $x592 $x803)))
 (let (($x849 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x828 (=> $x849 $x392)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x822 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x847 (= $x849 (bvuge ?x822 (_ bv1 32)))))
 (let (($x311 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x846 (=> $x311 $x848)))
 (let (($x68 (= $x311 (= ?x822 (_ bv0 32)))))
 (let (($x867 (and $x68 $x846)))
 (let (($x806 (and $x867 $x847)))
 (let (($x447 (and $x806 $x828)))
 (let (($x296 (= $x447 true)))
 (let (($x771 (= $x296 true)))
 (let (($x494 (= $x771 true)))
 (let (($x72 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x29 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x238 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x29) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x29))))
 (let (($x333 (and true $x238)))
 (let (($x551 (and $x238 $x333)))
 (let (($x398 (= (bvand ?x500 (_ bv4294967288 32)) ?x500)))
 (let (($x193 (= (bvand ?x506 (_ bv4294967292 32)) ?x506)))
 (let (($x377 (and $x193 $x398)))
 (let (($x676 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x506 (bvsub ?x506 (_ bv4 32))) (bvult ?x506 (bvsub ?x506 (_ bv4 32))))))
 (let (($x415 (and (and (and (and (and $x333 $x676) $x193) $x377) $x551) $x72)))
 (let (($x720 (= true $x415)))
 (let (($x122 (not $x172)))
 (let (($x683 (=> $x122 $x720)))
 (let (($x247 (= $x683 true)))
 (let (($x382 (= $x247 true)))
 (let (($x352 (= $x382 true)))
 (let (($x657 (= $x122 true)))
 (let (($x497 (= $x657 true)))
 (let (($x226 (= $x497 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x413 (= (_ bv0 32) ?x17)))
 (let ((?x832 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x567 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x832)))
 (let (($x666 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x666 $x567)))
 (let (($x715 (and $x192 $x413)))
 (let (($x840 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x707 (and $x840 $x715)))
 (let (($x581 (= $x707 true)))
 (let (($x563 (= $x581 true)))
 (let (($x169 (= $x563 true)))
 (let ((?x838 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x57 (bvneg ?x838)))
 (let (($x508 (= ?x57 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x404 (= $x508 true)))
 (let (($x461 (= $x404 true)))
 (let (($x317 (and $x461 $x169)))
 (let (($x129 (and $x317 $x226)))
 (let (($x682 (and $x129 $x352)))
 (let (($x209 (and $x682 $x494)))
 (let (($x236 (and $x209 $x448)))
 (let (($x102 (and $x236 $x544)))
 (let (($x234 (and $x849 $x102)))
 (let (($x583 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x446 (and $x583 $x234)))
 (let (($x346 (bvugt ?x506 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x506 (_ bv3 32))))
 (let (($x345 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x714 (=> (bvule ?x506 (bvsub (bvadd ?x506 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x345 $x346)))))))
 (let (($x347 (=> (and $x122 (bvule ?x506 (bvsub (bvadd ?x506 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x345 $x346)))))))
 (let (($x262 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x338 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x312)))
 (let (($x483 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x88 (_ bv1 32))) (or false (or false (and true (or $x338 $x262)))))))
 (let (($x191 (=> (and $x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x88 (_ bv1 32)))) (or false (or false (and true (or $x338 $x262)))))))
 (let (($x186 (and $x191 $x347)))
 (let (($x161 (and $x186 $x446)))
 (let (($x523 (=> $x161 $x725)))
 (not $x523)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 92
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x286 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x210 (or $x286 $x172)))
 (let (($x425 (= $x210 true)))
 (let (($x116 (= $x425 true)))
 (let ((?x642 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x513 (= (_ bv0 3) ?x642)))
 (let (($x380 (= $x513 true)))
 (let (($x638 (= $x380 true)))
 (let (($x764 (=> $x286 true)))
 (let (($x480 (= $x286 (bvuge (ite $x172 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x849 (= false false)))
 (let (($x785 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x828 (=> $x785 $x849)))
 (let (($x392 (= $x785 (= (ite $x172 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x447 (and $x392 $x828)))
 (let (($x391 (and $x447 $x480)))
 (let (($x588 (and $x391 $x764)))
 (let (($x763 (= $x588 true)))
 (let (($x24 (= $x763 true)))
 (let (($x187 (= $x24 true)))
 (let ((?x482 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x482)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x808 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x809 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (and $x809 $x808)))
 (let (($x196 (and $x197 $x100)))
 (let (($x410 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x427 (and $x410 $x196)))
 (let (($x9 (= $x427 true)))
 (let (($x522 (= $x9 true)))
 (let (($x529 (= $x522 true)))
 (let (($x334 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x248 (=> $x334 true)))
 (let (($x318 (= $x334 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x302 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x868 (=> $x302 $x849)))
 (let (($x867 (= $x302 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x847 (and $x867 $x868)))
 (let (($x190 (and $x847 $x318)))
 (let (($x592 (and $x190 $x248)))
 (let (($x171 (= $x592 true)))
 (let (($x530 (= $x171 true)))
 (let (($x546 (= $x530 true)))
 (let ((?x207 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x508 (bvneg ?x207)))
 (let (($x461 (= ?x508 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x580 (= $x461 true)))
 (let (($x840 (= $x580 true)))
 (let (($x305 (and $x840 $x546)))
 (let (($x496 (and $x305 $x529)))
 (let (($x185 (and $x496 $x187)))
 (let (($x675 (and $x185 $x638)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x723 (and $x124 $x675)))
 (let ((?x465 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x80 (bvugt ?x465 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x465 (_ bv3 32)))))
 (let (($x583 (=> (bvule ?x465 (bvsub (bvadd ?x465 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x259 $x80)))))))
 (let (($x122 (not $x172)))
 (let (($x716 (=> (and $x122 (bvule ?x465 (bvsub (bvadd ?x465 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x259 $x80)))))))
 (let (($x176 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x512 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x464 (=> $x512 (or false (or false (and true (or $x39 $x176)))))))
 (let (($x297 (=> (and $x122 $x512) (or false (or false (and true (or $x39 $x176)))))))
 (let (($x7 (and $x297 $x716)))
 (let (($x242 (and $x7 $x723)))
 (let (($x348 (=> $x242 $x116)))
 (not $x348))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x286 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x210 (or $x286 $x172)))
 (let (($x425 (= $x210 true)))
 (let (($x116 (= $x425 true)))
 (let ((?x642 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x513 (= (_ bv0 3) ?x642)))
 (let (($x380 (= $x513 true)))
 (let (($x638 (= $x380 true)))
 (let (($x764 (=> $x286 true)))
 (let (($x480 (= $x286 (bvuge (ite $x172 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x849 (= false false)))
 (let (($x785 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x828 (=> $x785 $x849)))
 (let (($x392 (= $x785 (= (ite $x172 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x447 (and $x392 $x828)))
 (let (($x391 (and $x447 $x480)))
 (let (($x588 (and $x391 $x764)))
 (let (($x763 (= $x588 true)))
 (let (($x24 (= $x763 true)))
 (let (($x187 (= $x24 true)))
 (let ((?x482 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x482)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x808 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x809 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (and $x809 $x808)))
 (let (($x196 (and $x197 $x100)))
 (let (($x410 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x427 (and $x410 $x196)))
 (let (($x9 (= $x427 true)))
 (let (($x522 (= $x9 true)))
 (let (($x529 (= $x522 true)))
 (let (($x334 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x248 (=> $x334 true)))
 (let (($x318 (= $x334 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x302 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x868 (=> $x302 $x849)))
 (let (($x867 (= $x302 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x847 (and $x867 $x868)))
 (let (($x190 (and $x847 $x318)))
 (let (($x592 (and $x190 $x248)))
 (let (($x171 (= $x592 true)))
 (let (($x530 (= $x171 true)))
 (let (($x546 (= $x530 true)))
 (let ((?x207 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x508 (bvneg ?x207)))
 (let (($x461 (= ?x508 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x580 (= $x461 true)))
 (let (($x840 (= $x580 true)))
 (let (($x305 (and $x840 $x546)))
 (let (($x496 (and $x305 $x529)))
 (let (($x185 (and $x496 $x187)))
 (let (($x675 (and $x185 $x638)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x723 (and $x124 $x675)))
 (let ((?x465 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x80 (bvugt ?x465 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x465 (_ bv3 32)))))
 (let (($x583 (=> (bvule ?x465 (bvsub (bvadd ?x465 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x259 $x80)))))))
 (let (($x122 (not $x172)))
 (let (($x716 (=> (and $x122 (bvule ?x465 (bvsub (bvadd ?x465 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x259 $x80)))))))
 (let (($x176 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x512 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x464 (=> $x512 (or false (or false (and true (or $x39 $x176)))))))
 (let (($x297 (=> (and $x122 $x512) (or false (or false (and true (or $x39 $x176)))))))
 (let (($x7 (and $x297 $x716)))
 (let (($x242 (and $x7 $x723)))
 (let (($x348 (=> $x242 $x116)))
 (not $x348))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 93
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x512 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x512 (_ bv1 32))) (select input.dst.llvm-mem ?x512))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x512 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x512 (_ bv2 32))) ?x111))))
 (let ((?x550 ((_ extract 2 0) ?x268)))
 (let (($x340 (= (_ bv0 3) ?x550)))
 (let (($x573 (= $x340 true)))
 (let ((?x316 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x436 (= (_ bv0 3) ?x316)))
 (let (($x306 (= $x436 true)))
 (let (($x349 (= $x306 true)))
 (let (($x715 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x296 (=> $x715 true)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x444 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x158 (= $x715 (bvuge ?x444 (_ bv1 32)))))
 (let (($x116 (= false false)))
 (let (($x675 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x348 (=> $x675 $x116)))
 (let (($x417 (= $x675 (= ?x444 (_ bv0 32)))))
 (let (($x170 (and $x417 $x348)))
 (let (($x488 (and $x170 $x158)))
 (let (($x554 (and $x488 $x296)))
 (let (($x544 (= $x554 true)))
 (let (($x102 (= $x544 true)))
 (let (($x234 (= $x102 true)))
 (let (($x225 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x192 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x311 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x192) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x192))))
 (let (($x806 (and true $x311)))
 (let (($x204 (and $x311 $x806)))
 (let (($x291 (= (bvand ?x268 (_ bv4294967288 32)) ?x268)))
 (let (($x409 (= (bvand ?x512 (_ bv4294967292 32)) ?x512)))
 (let (($x615 (and $x409 $x291)))
 (let (($x344 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x512 (bvsub ?x512 (_ bv4 32))) (bvult ?x512 (bvsub ?x512 (_ bv4 32))))))
 (let (($x328 (and (and (and (and (and $x806 $x344) $x409) $x615) $x204) $x225)))
 (let (($x548 (= true $x328)))
 (let (($x122 (not $x172)))
 (let (($x821 (=> $x122 $x548)))
 (let (($x341 (= $x821 true)))
 (let (($x219 (= $x341 true)))
 (let (($x494 (= $x219 true)))
 (let (($x538 (= $x122 true)))
 (let (($x500 (= $x538 true)))
 (let (($x398 (= $x500 true)))
 (let (($x56 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x533 (= $x56 true)))
 (let (($x205 (= $x533 true)))
 (let (($x720 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x382 (= $x720 true)))
 (let (($x59 (= $x382 true)))
 (let ((?x377 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x683 (= (_ bv0 32) ?x377)))
 (let ((?x365 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x396 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x365)))
 (let (($x397 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x397 $x396)))
 (let (($x247 (and $x135 $x683)))
 (let (($x468 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x468 $x247)))
 (let (($x415 (= $x72 true)))
 (let (($x551 (= $x415 true)))
 (let (($x393 (= $x551 true)))
 (let (($x140 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x119 (=> $x140 true)))
 (let ((?x242 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x581 (bvuge ?x242 (_ bv1 32))))
 (let (($x394 (= $x140 $x581)))
 (let (($x226 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x169 (=> $x226 $x116)))
 (let (($x210 (= ?x242 (_ bv0 32))))
 (let (($x129 (= $x226 $x210)))
 (let (($x317 (and $x129 $x169)))
 (let (($x193 (and $x317 $x394)))
 (let (($x460 (and $x193 $x119)))
 (let (($x378 (= $x460 true)))
 (let (($x686 (= $x378 true)))
 (let (($x390 (= $x686 true)))
 (let (($x707 (= $x715 $x581)))
 (let (($x425 (= $x675 $x210)))
 (let (($x729 (and $x425 $x348)))
 (let (($x309 (and $x729 $x707)))
 (let (($x771 (and $x309 $x296)))
 (let (($x817 (= $x771 true)))
 (let (($x859 (= $x817 true)))
 (let (($x216 (= $x859 true)))
 (let (($x69 (and $x216 $x390)))
 (let (($x120 (and $x69 $x393)))
 (let (($x510 (and $x120 $x59)))
 (let (($x284 (and $x510 $x205)))
 (let (($x567 (and $x284 $x398)))
 (let (($x209 (and $x567 $x494)))
 (let (($x446 (and $x209 $x234)))
 (let (($x555 (and $x446 $x349)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x73 (and $x57 $x555)))
 (let (($x347 (bvugt ?x512 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x512 (_ bv3 32))))
 (let (($x714 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x124 (=> (bvule ?x512 (bvsub (bvadd ?x512 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x714 $x347)))))))
 (let (($x693 (=> (and $x122 (bvule ?x512 (bvsub (bvadd ?x512 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x714 $x347)))))))
 (let (($x191 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x483 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x345 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x346 (=> $x345 (or false (or false (and true (or $x483 $x191)))))))
 (let (($x312 (=> (and $x122 $x345) (or false (or false (and true (or $x483 $x191)))))))
 (let (($x99 (and $x312 $x693)))
 (let (($x403 (and $x99 $x73)))
 (let (($x292 (=> $x403 $x573)))
 (not $x292))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x512 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x512 (_ bv1 32))) (select input.dst.llvm-mem ?x512))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x512 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x512 (_ bv2 32))) ?x111))))
 (let ((?x550 ((_ extract 2 0) ?x268)))
 (let (($x340 (= (_ bv0 3) ?x550)))
 (let (($x573 (= $x340 true)))
 (let ((?x316 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x436 (= (_ bv0 3) ?x316)))
 (let (($x306 (= $x436 true)))
 (let (($x349 (= $x306 true)))
 (let (($x715 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x296 (=> $x715 true)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x444 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x158 (= $x715 (bvuge ?x444 (_ bv1 32)))))
 (let (($x116 (= false false)))
 (let (($x675 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x348 (=> $x675 $x116)))
 (let (($x417 (= $x675 (= ?x444 (_ bv0 32)))))
 (let (($x170 (and $x417 $x348)))
 (let (($x488 (and $x170 $x158)))
 (let (($x554 (and $x488 $x296)))
 (let (($x544 (= $x554 true)))
 (let (($x102 (= $x544 true)))
 (let (($x234 (= $x102 true)))
 (let (($x225 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x192 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x311 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x192) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x192))))
 (let (($x806 (and true $x311)))
 (let (($x204 (and $x311 $x806)))
 (let (($x291 (= (bvand ?x268 (_ bv4294967288 32)) ?x268)))
 (let (($x409 (= (bvand ?x512 (_ bv4294967292 32)) ?x512)))
 (let (($x615 (and $x409 $x291)))
 (let (($x344 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x512 (bvsub ?x512 (_ bv4 32))) (bvult ?x512 (bvsub ?x512 (_ bv4 32))))))
 (let (($x328 (and (and (and (and (and $x806 $x344) $x409) $x615) $x204) $x225)))
 (let (($x548 (= true $x328)))
 (let (($x122 (not $x172)))
 (let (($x821 (=> $x122 $x548)))
 (let (($x341 (= $x821 true)))
 (let (($x219 (= $x341 true)))
 (let (($x494 (= $x219 true)))
 (let (($x538 (= $x122 true)))
 (let (($x500 (= $x538 true)))
 (let (($x398 (= $x500 true)))
 (let (($x56 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x533 (= $x56 true)))
 (let (($x205 (= $x533 true)))
 (let (($x720 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x382 (= $x720 true)))
 (let (($x59 (= $x382 true)))
 (let ((?x377 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x683 (= (_ bv0 32) ?x377)))
 (let ((?x365 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x396 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x365)))
 (let (($x397 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x397 $x396)))
 (let (($x247 (and $x135 $x683)))
 (let (($x468 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x468 $x247)))
 (let (($x415 (= $x72 true)))
 (let (($x551 (= $x415 true)))
 (let (($x393 (= $x551 true)))
 (let (($x140 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x119 (=> $x140 true)))
 (let ((?x242 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x581 (bvuge ?x242 (_ bv1 32))))
 (let (($x394 (= $x140 $x581)))
 (let (($x226 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x169 (=> $x226 $x116)))
 (let (($x210 (= ?x242 (_ bv0 32))))
 (let (($x129 (= $x226 $x210)))
 (let (($x317 (and $x129 $x169)))
 (let (($x193 (and $x317 $x394)))
 (let (($x460 (and $x193 $x119)))
 (let (($x378 (= $x460 true)))
 (let (($x686 (= $x378 true)))
 (let (($x390 (= $x686 true)))
 (let (($x707 (= $x715 $x581)))
 (let (($x425 (= $x675 $x210)))
 (let (($x729 (and $x425 $x348)))
 (let (($x309 (and $x729 $x707)))
 (let (($x771 (and $x309 $x296)))
 (let (($x817 (= $x771 true)))
 (let (($x859 (= $x817 true)))
 (let (($x216 (= $x859 true)))
 (let (($x69 (and $x216 $x390)))
 (let (($x120 (and $x69 $x393)))
 (let (($x510 (and $x120 $x59)))
 (let (($x284 (and $x510 $x205)))
 (let (($x567 (and $x284 $x398)))
 (let (($x209 (and $x567 $x494)))
 (let (($x446 (and $x209 $x234)))
 (let (($x555 (and $x446 $x349)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x73 (and $x57 $x555)))
 (let (($x347 (bvugt ?x512 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x512 (_ bv3 32))))
 (let (($x714 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x124 (=> (bvule ?x512 (bvsub (bvadd ?x512 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x714 $x347)))))))
 (let (($x693 (=> (and $x122 (bvule ?x512 (bvsub (bvadd ?x512 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x714 $x347)))))))
 (let (($x191 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x483 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x345 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x346 (=> $x345 (or false (or false (and true (or $x483 $x191)))))))
 (let (($x312 (=> (and $x122 $x345) (or false (or false (and true (or $x483 $x191)))))))
 (let (($x99 (and $x312 $x693)))
 (let (($x403 (and $x99 $x73)))
 (let (($x292 (=> $x403 $x573)))
 (not $x292))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 94
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x539 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x535 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x725 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x506 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x783 (concat (select input.dst.llvm-mem ?x506) (concat ?x725 (concat ?x535 ?x539)))))
 (let ((?x801 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x783)))
 (let (($x681 (= (_ bv0 32) ?x801)))
 (let (($x684 (= $x681 true)))
 (let ((?x76 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x23 (= (_ bv0 3) ?x76)))
 (let (($x432 (= $x23 true)))
 (let (($x319 (= $x432 true)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x475 (= $x162 true)))
 (let (($x606 (= $x475 true)))
 (let (($x811 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x252 (=> $x811 true)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x662 (= $x811 (bvuge ?x238 (_ bv1 32)))))
 (let (($x612 (= false false)))
 (let (($x614 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x541 (=> $x614 $x612)))
 (let (($x313 (= $x614 (= ?x238 (_ bv0 32)))))
 (let (($x201 (and $x313 $x541)))
 (let (($x653 (and $x201 $x662)))
 (let (($x518 (and $x653 $x252)))
 (let (($x60 (= $x518 true)))
 (let (($x659 (= $x60 true)))
 (let (($x853 (= $x659 true)))
 (let (($x546 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x840 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41))))
 (let (($x822 (and true $x840)))
 (let (($x410 (and $x840 $x822)))
 (let ((?x345 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x868 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x867 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x868))))
 (let (($x808 (= (bvand ?x867 (_ bv4294967288 32)) ?x867)))
 (let (($x592 (= (bvand ?x345 (_ bv4294967292 32)) ?x345)))
 (let (($x197 (and $x592 $x808)))
 (let (($x404 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x345 (bvsub ?x345 (_ bv4 32))) (bvult ?x345 (bvsub ?x345 (_ bv4 32))))))
 (let (($x482 (and (and (and (and (and $x822 $x404) $x592) $x197) $x410) $x546)))
 (let (($x100 (= true $x482)))
 (let (($x122 (not $x172)))
 (let (($x196 (=> $x122 $x100)))
 (let (($x427 (= $x196 true)))
 (let (($x447 (= $x427 true)))
 (let (($x24 (= $x447 true)))
 (let (($x573 (= $x122 true)))
 (let (($x292 (= $x573 true)))
 (let (($x47 (= $x292 true)))
 (let (($x73 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x403 (= $x73 true)))
 (let (($x550 (= $x403 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x102)))
 (let ((?x488 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x554 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x488)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x544 (and $x158 $x554)))
 (let (($x446 (and $x544 $x234)))
 (let (($x489 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x489 $x446)))
 (let (($x316 (= $x161 true)))
 (let (($x436 (= $x316 true)))
 (let (($x306 (= $x436 true)))
 (let (($x548 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x219 (=> $x548 true)))
 (let ((?x806 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x849 (bvuge ?x806 (_ bv1 32))))
 (let (($x821 (= $x548 $x849)))
 (let (($x429 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x788 (=> $x429 $x612)))
 (let (($x369 (= ?x806 (_ bv0 32))))
 (let (($x204 (= $x429 $x369)))
 (let (($x854 (and $x204 $x788)))
 (let (($x341 (and $x854 $x821)))
 (let (($x494 (and $x341 $x219)))
 (let (($x209 (= $x494 true)))
 (let (($x444 (= $x209 true)))
 (let (($x78 (= $x444 true)))
 (let (($x97 (= $x811 $x849)))
 (let (($x168 (= $x614 $x369)))
 (let (($x344 (and $x168 $x541)))
 (let (($x273 (and $x344 $x97)))
 (let (($x364 (and $x273 $x252)))
 (let (($x804 (= $x364 true)))
 (let (($x111 (= $x804 true)))
 (let (($x577 (= $x111 true)))
 (let (($x417 (and $x577 $x78)))
 (let (($x349 (and $x417 $x306)))
 (let (($x340 (and $x349 $x550)))
 (let (($x333 (and $x340 $x47)))
 (let (($x187 (and $x333 $x24)))
 (let (($x261 (and $x187 $x853)))
 (let (($x451 (and $x261 $x606)))
 (let (($x235 (and $x451 $x319)))
 (let (($x675 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x435 (and $x675 $x235)))
 (let (($x716 (bvugt ?x345 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x345 (_ bv3 32))))
 (let (($x583 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x57 (=> (bvule ?x345 (bvsub (bvadd ?x345 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x583 $x716)))))))
 (let (($x709 (=> (and $x122 (bvule ?x345 (bvsub (bvadd ?x345 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x583 $x716)))))))
 (let (($x297 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x464 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x506)))
 (let (($x259 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x259 (or false (or false (and true (or $x464 $x297)))))))
 (let (($x315 (=> (and $x122 $x259) (or false (or false (and true (or $x464 $x297)))))))
 (let (($x37 (and $x315 $x709)))
 (let (($x507 (and $x37 $x435)))
 (let (($x343 (=> $x507 $x684)))
 (not $x343)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x539 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x535 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x725 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x506 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x783 (concat (select input.dst.llvm-mem ?x506) (concat ?x725 (concat ?x535 ?x539)))))
 (let ((?x801 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x783)))
 (let (($x681 (= (_ bv0 32) ?x801)))
 (let (($x684 (= $x681 true)))
 (let ((?x76 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x23 (= (_ bv0 3) ?x76)))
 (let (($x432 (= $x23 true)))
 (let (($x319 (= $x432 true)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x475 (= $x162 true)))
 (let (($x606 (= $x475 true)))
 (let (($x811 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x252 (=> $x811 true)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x662 (= $x811 (bvuge ?x238 (_ bv1 32)))))
 (let (($x612 (= false false)))
 (let (($x614 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x541 (=> $x614 $x612)))
 (let (($x313 (= $x614 (= ?x238 (_ bv0 32)))))
 (let (($x201 (and $x313 $x541)))
 (let (($x653 (and $x201 $x662)))
 (let (($x518 (and $x653 $x252)))
 (let (($x60 (= $x518 true)))
 (let (($x659 (= $x60 true)))
 (let (($x853 (= $x659 true)))
 (let (($x546 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x840 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41))))
 (let (($x822 (and true $x840)))
 (let (($x410 (and $x840 $x822)))
 (let ((?x345 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x868 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x867 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x868))))
 (let (($x808 (= (bvand ?x867 (_ bv4294967288 32)) ?x867)))
 (let (($x592 (= (bvand ?x345 (_ bv4294967292 32)) ?x345)))
 (let (($x197 (and $x592 $x808)))
 (let (($x404 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x345 (bvsub ?x345 (_ bv4 32))) (bvult ?x345 (bvsub ?x345 (_ bv4 32))))))
 (let (($x482 (and (and (and (and (and $x822 $x404) $x592) $x197) $x410) $x546)))
 (let (($x100 (= true $x482)))
 (let (($x122 (not $x172)))
 (let (($x196 (=> $x122 $x100)))
 (let (($x427 (= $x196 true)))
 (let (($x447 (= $x427 true)))
 (let (($x24 (= $x447 true)))
 (let (($x573 (= $x122 true)))
 (let (($x292 (= $x573 true)))
 (let (($x47 (= $x292 true)))
 (let (($x73 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x403 (= $x73 true)))
 (let (($x550 (= $x403 true)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x102)))
 (let ((?x488 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x554 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x488)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x544 (and $x158 $x554)))
 (let (($x446 (and $x544 $x234)))
 (let (($x489 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x489 $x446)))
 (let (($x316 (= $x161 true)))
 (let (($x436 (= $x316 true)))
 (let (($x306 (= $x436 true)))
 (let (($x548 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x219 (=> $x548 true)))
 (let ((?x806 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x849 (bvuge ?x806 (_ bv1 32))))
 (let (($x821 (= $x548 $x849)))
 (let (($x429 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x788 (=> $x429 $x612)))
 (let (($x369 (= ?x806 (_ bv0 32))))
 (let (($x204 (= $x429 $x369)))
 (let (($x854 (and $x204 $x788)))
 (let (($x341 (and $x854 $x821)))
 (let (($x494 (and $x341 $x219)))
 (let (($x209 (= $x494 true)))
 (let (($x444 (= $x209 true)))
 (let (($x78 (= $x444 true)))
 (let (($x97 (= $x811 $x849)))
 (let (($x168 (= $x614 $x369)))
 (let (($x344 (and $x168 $x541)))
 (let (($x273 (and $x344 $x97)))
 (let (($x364 (and $x273 $x252)))
 (let (($x804 (= $x364 true)))
 (let (($x111 (= $x804 true)))
 (let (($x577 (= $x111 true)))
 (let (($x417 (and $x577 $x78)))
 (let (($x349 (and $x417 $x306)))
 (let (($x340 (and $x349 $x550)))
 (let (($x333 (and $x340 $x47)))
 (let (($x187 (and $x333 $x24)))
 (let (($x261 (and $x187 $x853)))
 (let (($x451 (and $x261 $x606)))
 (let (($x235 (and $x451 $x319)))
 (let (($x675 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x435 (and $x675 $x235)))
 (let (($x716 (bvugt ?x345 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x345 (_ bv3 32))))
 (let (($x583 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x57 (=> (bvule ?x345 (bvsub (bvadd ?x345 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x583 $x716)))))))
 (let (($x709 (=> (and $x122 (bvule ?x345 (bvsub (bvadd ?x345 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x583 $x716)))))))
 (let (($x297 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x464 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x506)))
 (let (($x259 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x259 (or false (or false (and true (or $x464 $x297)))))))
 (let (($x315 (=> (and $x122 $x259) (or false (or false (and true (or $x464 $x297)))))))
 (let (($x37 (and $x315 $x709)))
 (let (($x507 (and $x37 $x435)))
 (let (($x343 (=> $x507 $x684)))
 (not $x343)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv192592 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv192592 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv318728 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv318728 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv318731 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 95
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x286 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x480 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x465 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x844 (concat (select input.dst.llvm-mem ?x465) (concat ?x522 (concat ?x480 ?x286)))))
 (let ((?x843 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x844)))
 (let (($x154 (= (_ bv0 32) ?x843)))
 (let (($x520 (= $x154 true)))
 (let ((?x828 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x189 (= (_ bv0 3) ?x828)))
 (let (($x380 (= $x189 true)))
 (let (($x782 (= $x380 true)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x32 (= $x29 true)))
 (let (($x496 (= $x32 true)))
 (let (($x318 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x867 (=> $x318 false)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x291 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (= $x318 (bvuge ?x291 (_ bv1 32)))))
 (let (($x244 (= false false)))
 (let (($x666 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x592 (=> $x666 $x244)))
 (let (($x567 (= $x666 (= ?x291 (_ bv0 32)))))
 (let (($x352 (and $x567 $x592)))
 (let (($x302 (and $x352 $x182)))
 (let (($x764 (and $x302 $x867)))
 (let (($x588 (= $x764 true)))
 (let (($x740 (= $x588 true)))
 (let (($x529 (= $x740 true)))
 (let (($x309 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x448 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x681 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x448) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x448))))
 (let (($x684 (and true $x681)))
 (let (($x859 (and $x681 $x684)))
 (let ((?x259 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x299))))
 (let (($x226 (= (bvand ?x317 (_ bv4294967288 32)) ?x317)))
 (let (($x116 (= (bvand ?x259 (_ bv4294967292 32)) ?x259)))
 (let (($x817 (and $x116 $x226)))
 (let (($x580 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x259 (bvsub ?x259 (_ bv4 32))) (bvult ?x259 (bvsub ?x259 (_ bv4 32))))))
 (let (($x69 (and (and (and (and (and $x684 $x580) $x116) $x817) $x859) $x309)))
 (let (($x676 (= true $x69)))
 (let (($x122 (not $x172)))
 (let (($x378 (=> $x122 $x676)))
 (let (($x686 (= $x378 true)))
 (let (($x193 (= $x686 true)))
 (let (($x119 (= $x193 true)))
 (let (($x725 (= $x122 true)))
 (let (($x363 (= $x725 true)))
 (let (($x535 (= $x363 true)))
 (let (($x435 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x507 (= $x435 true)))
 (let (($x260 (= $x507 true)))
 (let ((?x475 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x606 (= (_ bv0 32) ?x475)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x261)))
 (let (($x853 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (and $x853 $x281)))
 (let (($x451 (and $x162 $x606)))
 (let (($x659 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x575 (and $x659 $x451)))
 (let (($x76 (= $x575 true)))
 (let (($x23 (= $x76 true)))
 (let (($x432 (= $x23 true)))
 (let (($x187 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x313 (=> $x187 false)))
 (let ((?x404 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge ?x404 (_ bv1 32))))
 (let (($x238 (= $x187 $x171)))
 (let (($x482 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x196 (=> $x482 $x244)))
 (let (($x305 (= ?x404 (_ bv0 32))))
 (let (($x100 (= $x482 $x305)))
 (let (($x427 (and $x100 $x196)))
 (let (($x413 (and $x427 $x238)))
 (let (($x201 (and $x413 $x313)))
 (let (($x212 (= $x201 true)))
 (let (($x662 (= $x212 true)))
 (let (($x653 (= $x662 true)))
 (let (($x868 (= $x318 $x171)))
 (let (($x461 (= $x666 $x305)))
 (let (($x530 (and $x461 $x592)))
 (let (($x846 (and $x530 $x868)))
 (let (($x334 (and $x846 $x867)))
 (let (($x190 (= $x334 true)))
 (let (($x808 (= $x190 true)))
 (let (($x197 (= $x808 true)))
 (let (($x518 (and $x197 $x653)))
 (let (($x319 (and $x518 $x432)))
 (let (($x236 (and $x319 $x260)))
 (let (($x539 (and $x236 $x535)))
 (let (($x394 (and $x539 $x119)))
 (let (($x642 (and $x394 $x529)))
 (let (($x43 (and $x642 $x496)))
 (let (($x785 (and $x43 $x782)))
 (let (($x614 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x185 (and $x614 $x785)))
 (let (($x693 (bvugt ?x259 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x259 (_ bv3 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x675 (=> (bvule ?x259 (bvsub (bvadd ?x259 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x693)))))))
 (let (($x838 (=> (and $x122 (bvule ?x259 (bvsub (bvadd ?x259 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x124 $x693)))))))
 (let (($x312 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x346 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x465)))
 (let (($x714 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x347 (=> $x714 (or false (or false (and true (or $x346 $x312)))))))
 (let (($x457 (=> (and $x122 $x714) (or false (or false (and true (or $x346 $x312)))))))
 (let (($x186 (and $x457 $x838)))
 (let (($x803 (and $x186 $x185)))
 (let (($x278 (=> $x803 $x520)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x286 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x480 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x465 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x844 (concat (select input.dst.llvm-mem ?x465) (concat ?x522 (concat ?x480 ?x286)))))
 (let ((?x843 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x844)))
 (let (($x154 (= (_ bv0 32) ?x843)))
 (let (($x520 (= $x154 true)))
 (let ((?x828 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x189 (= (_ bv0 3) ?x828)))
 (let (($x380 (= $x189 true)))
 (let (($x782 (= $x380 true)))
 (let (($x29 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x32 (= $x29 true)))
 (let (($x496 (= $x32 true)))
 (let (($x318 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x867 (=> $x318 false)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x291 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (= $x318 (bvuge ?x291 (_ bv1 32)))))
 (let (($x244 (= false false)))
 (let (($x666 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x592 (=> $x666 $x244)))
 (let (($x567 (= $x666 (= ?x291 (_ bv0 32)))))
 (let (($x352 (and $x567 $x592)))
 (let (($x302 (and $x352 $x182)))
 (let (($x764 (and $x302 $x867)))
 (let (($x588 (= $x764 true)))
 (let (($x740 (= $x588 true)))
 (let (($x529 (= $x740 true)))
 (let (($x309 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x448 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x681 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x448) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x448))))
 (let (($x684 (and true $x681)))
 (let (($x859 (and $x681 $x684)))
 (let ((?x259 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x299))))
 (let (($x226 (= (bvand ?x317 (_ bv4294967288 32)) ?x317)))
 (let (($x116 (= (bvand ?x259 (_ bv4294967292 32)) ?x259)))
 (let (($x817 (and $x116 $x226)))
 (let (($x580 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x259 (bvsub ?x259 (_ bv4 32))) (bvult ?x259 (bvsub ?x259 (_ bv4 32))))))
 (let (($x69 (and (and (and (and (and $x684 $x580) $x116) $x817) $x859) $x309)))
 (let (($x676 (= true $x69)))
 (let (($x122 (not $x172)))
 (let (($x378 (=> $x122 $x676)))
 (let (($x686 (= $x378 true)))
 (let (($x193 (= $x686 true)))
 (let (($x119 (= $x193 true)))
 (let (($x725 (= $x122 true)))
 (let (($x363 (= $x725 true)))
 (let (($x535 (= $x363 true)))
 (let (($x435 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x507 (= $x435 true)))
 (let (($x260 (= $x507 true)))
 (let ((?x475 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x606 (= (_ bv0 32) ?x475)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x261)))
 (let (($x853 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (and $x853 $x281)))
 (let (($x451 (and $x162 $x606)))
 (let (($x659 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x575 (and $x659 $x451)))
 (let (($x76 (= $x575 true)))
 (let (($x23 (= $x76 true)))
 (let (($x432 (= $x23 true)))
 (let (($x187 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x313 (=> $x187 false)))
 (let ((?x404 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge ?x404 (_ bv1 32))))
 (let (($x238 (= $x187 $x171)))
 (let (($x482 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x196 (=> $x482 $x244)))
 (let (($x305 (= ?x404 (_ bv0 32))))
 (let (($x100 (= $x482 $x305)))
 (let (($x427 (and $x100 $x196)))
 (let (($x413 (and $x427 $x238)))
 (let (($x201 (and $x413 $x313)))
 (let (($x212 (= $x201 true)))
 (let (($x662 (= $x212 true)))
 (let (($x653 (= $x662 true)))
 (let (($x868 (= $x318 $x171)))
 (let (($x461 (= $x666 $x305)))
 (let (($x530 (and $x461 $x592)))
 (let (($x846 (and $x530 $x868)))
 (let (($x334 (and $x846 $x867)))
 (let (($x190 (= $x334 true)))
 (let (($x808 (= $x190 true)))
 (let (($x197 (= $x808 true)))
 (let (($x518 (and $x197 $x653)))
 (let (($x319 (and $x518 $x432)))
 (let (($x236 (and $x319 $x260)))
 (let (($x539 (and $x236 $x535)))
 (let (($x394 (and $x539 $x119)))
 (let (($x642 (and $x394 $x529)))
 (let (($x43 (and $x642 $x496)))
 (let (($x785 (and $x43 $x782)))
 (let (($x614 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x185 (and $x614 $x785)))
 (let (($x693 (bvugt ?x259 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x259 (_ bv3 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x675 (=> (bvule ?x259 (bvsub (bvadd ?x259 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x693)))))))
 (let (($x838 (=> (and $x122 (bvule ?x259 (bvsub (bvadd ?x259 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x124 $x693)))))))
 (let (($x312 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x346 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x465)))
 (let (($x714 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x347 (=> $x714 (or false (or false (and true (or $x346 $x312)))))))
 (let (($x457 (=> (and $x122 $x714) (or false (or false (and true (or $x346 $x312)))))))
 (let (($x186 (and $x457 $x838)))
 (let (($x803 (and $x186 $x185)))
 (let (($x278 (=> $x803 $x520)))
 (not $x278)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 96
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0 () (_ BitVec 31))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x396 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x720 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x512 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x458 (concat (select input.dst.llvm-mem ?x512) (concat ?x247 (concat ?x720 ?x396)))))
 (let ((?x192 ((_ extract 30 0) ?x458)))
 (let ((?x225 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0 ?x192)))
 (let (($x328 (= (_ bv0 31) ?x225)))
 (let (($x623 (= $x328 true)))
 (let (($x135 (= (_ bv0 31) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0)))
 (let (($x533 (= $x135 true)))
 (let (($x59 (= $x533 true)))
 (let ((?x120 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (= (_ bv0 3) ?x120)))
 (let (($x205 (= $x72 true)))
 (let (($x500 (= $x205 true)))
 (let (($x283 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x317 (=> $x283 true)))
 (let (($x213 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x809 (ite $x213 (_ bv0 32) (_ bv1 32))))
 (let (($x848 (= $x283 (bvuge ?x809 (_ bv1 32)))))
 (let (($x169 (= false false)))
 (let (($x268 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x116 (=> $x268 $x169)))
 (let (($x840 (= $x268 (= ?x809 (_ bv0 32)))))
 (let (($x822 (and $x840 $x116)))
 (let (($x155 (and $x822 $x848)))
 (let (($x460 (and $x155 $x317)))
 (let (($x390 (= $x460 true)))
 (let (($x468 (= $x390 true)))
 (let (($x382 (= $x468 true)))
 (let (($x273 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x763 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x154 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763))))
 (let (($x520 (and true $x154)))
 (let (($x111 (and $x154 $x520)))
 (let ((?x714 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x729 (concat (select input.dst.llvm-mem (bvadd ?x714 (_ bv1 32))) (select input.dst.llvm-mem ?x714))))
 (let ((?x854 (concat (select input.dst.llvm-mem (bvadd ?x714 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x714 (_ bv2 32))) ?x729))))
 (let (($x429 (= (bvand ?x854 (_ bv4294967288 32)) ?x854)))
 (let (($x612 (= (bvand ?x714 (_ bv4294967292 32)) ?x714)))
 (let (($x804 (and $x612 $x429)))
 (let (($x425 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x714 (bvsub ?x714 (_ bv4 32))) (bvult ?x714 (bvsub ?x714 (_ bv4 32))))))
 (let (($x417 (and (and (and (and (and $x520 $x425) $x612) $x804) $x111) $x273)))
 (let (($x170 (= true $x417)))
 (let (($x172 (not $x213)))
 (let (($x209 (=> $x172 $x170)))
 (let (($x444 (= $x209 true)))
 (let (($x341 (= $x444 true)))
 (let (($x219 (= $x341 true)))
 (let (($x522 (= $x172 true)))
 (let (($x391 (= $x522 true)))
 (let (($x480 (= $x391 true)))
 (let (($x185 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x803 (= $x185 true)))
 (let (($x657 (= $x803 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x496 (= (_ bv0 32) ?x32)))
 (let ((?x642 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x513 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x642)))
 (let (($x529 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x529 $x513)))
 (let (($x43 (and $x29 $x496)))
 (let (($x740 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x740 $x43)))
 (let (($x828 (= $x9 true)))
 (let (($x189 (= $x828 true)))
 (let (($x380 (= $x189 true)))
 (let (($x394 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x567 (=> $x394 true)))
 (let ((?x580 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x348 (bvuge ?x580 (_ bv1 32))))
 (let (($x291 (= $x394 $x348)))
 (let (($x69 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x378 (=> $x69 $x169)))
 (let (($x581 (= ?x580 (_ bv0 32))))
 (let (($x676 (= $x69 $x581)))
 (let (($x686 (and $x676 $x378)))
 (let (($x398 (and $x686 $x291)))
 (let (($x352 (and $x398 $x567)))
 (let (($x409 (= $x352 true)))
 (let (($x182 (= $x409 true)))
 (let (($x302 (= $x182 true)))
 (let (($x299 (= $x283 $x348)))
 (let (($x723 (= $x268 $x581)))
 (let (($x296 (and $x723 $x116)))
 (let (($x210 (and $x296 $x299)))
 (let (($x140 (and $x210 $x317)))
 (let (($x497 (= $x140 true)))
 (let (($x226 (= $x497 true)))
 (let (($x817 (= $x226 true)))
 (let (($x764 (and $x817 $x302)))
 (let (($x782 (and $x764 $x380)))
 (let (($x392 (and $x782 $x657)))
 (let (($x286 (and $x392 $x480)))
 (let (($x821 (and $x286 $x219)))
 (let (($x377 (and $x821 $x382)))
 (let (($x610 (and $x377 $x500)))
 (let (($x284 (and $x610 $x59)))
 (let (($x666 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x538 (and $x666 $x284)))
 (let (($x709 (bvugt ?x714 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x714 (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x614 (=> (bvule ?x714 (bvsub (bvadd ?x714 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x709)))))))
 (let (($x638 (=> (and $x172 (bvule ?x714 (bvsub (bvadd ?x714 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x57 $x709)))))))
 (let (($x315 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x512)))
 (let (($x583 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x716 (=> $x583 (or false (or false (and true (or $x80 $x315)))))))
 (let (($x506 (=> (and $x172 $x583) (or false (or false (and true (or $x80 $x315)))))))
 (let (($x7 (and $x506 $x638)))
 (let (($x365 (and $x7 $x538)))
 (let (($x95 (=> $x365 $x623)))
 (not $x95))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0 () (_ BitVec 31))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x396 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x720 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x512 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x458 (concat (select input.dst.llvm-mem ?x512) (concat ?x247 (concat ?x720 ?x396)))))
 (let ((?x192 ((_ extract 30 0) ?x458)))
 (let ((?x225 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0 ?x192)))
 (let (($x328 (= (_ bv0 31) ?x225)))
 (let (($x623 (= $x328 true)))
 (let (($x135 (= (_ bv0 31) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0)))
 (let (($x533 (= $x135 true)))
 (let (($x59 (= $x533 true)))
 (let ((?x120 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (= (_ bv0 3) ?x120)))
 (let (($x205 (= $x72 true)))
 (let (($x500 (= $x205 true)))
 (let (($x283 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x317 (=> $x283 true)))
 (let (($x213 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x809 (ite $x213 (_ bv0 32) (_ bv1 32))))
 (let (($x848 (= $x283 (bvuge ?x809 (_ bv1 32)))))
 (let (($x169 (= false false)))
 (let (($x268 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x116 (=> $x268 $x169)))
 (let (($x840 (= $x268 (= ?x809 (_ bv0 32)))))
 (let (($x822 (and $x840 $x116)))
 (let (($x155 (and $x822 $x848)))
 (let (($x460 (and $x155 $x317)))
 (let (($x390 (= $x460 true)))
 (let (($x468 (= $x390 true)))
 (let (($x382 (= $x468 true)))
 (let (($x273 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x763 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x154 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763))))
 (let (($x520 (and true $x154)))
 (let (($x111 (and $x154 $x520)))
 (let ((?x714 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x729 (concat (select input.dst.llvm-mem (bvadd ?x714 (_ bv1 32))) (select input.dst.llvm-mem ?x714))))
 (let ((?x854 (concat (select input.dst.llvm-mem (bvadd ?x714 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x714 (_ bv2 32))) ?x729))))
 (let (($x429 (= (bvand ?x854 (_ bv4294967288 32)) ?x854)))
 (let (($x612 (= (bvand ?x714 (_ bv4294967292 32)) ?x714)))
 (let (($x804 (and $x612 $x429)))
 (let (($x425 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x714 (bvsub ?x714 (_ bv4 32))) (bvult ?x714 (bvsub ?x714 (_ bv4 32))))))
 (let (($x417 (and (and (and (and (and $x520 $x425) $x612) $x804) $x111) $x273)))
 (let (($x170 (= true $x417)))
 (let (($x172 (not $x213)))
 (let (($x209 (=> $x172 $x170)))
 (let (($x444 (= $x209 true)))
 (let (($x341 (= $x444 true)))
 (let (($x219 (= $x341 true)))
 (let (($x522 (= $x172 true)))
 (let (($x391 (= $x522 true)))
 (let (($x480 (= $x391 true)))
 (let (($x185 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x803 (= $x185 true)))
 (let (($x657 (= $x803 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x496 (= (_ bv0 32) ?x32)))
 (let ((?x642 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x513 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x642)))
 (let (($x529 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x529 $x513)))
 (let (($x43 (and $x29 $x496)))
 (let (($x740 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x740 $x43)))
 (let (($x828 (= $x9 true)))
 (let (($x189 (= $x828 true)))
 (let (($x380 (= $x189 true)))
 (let (($x394 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x567 (=> $x394 true)))
 (let ((?x580 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x348 (bvuge ?x580 (_ bv1 32))))
 (let (($x291 (= $x394 $x348)))
 (let (($x69 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x378 (=> $x69 $x169)))
 (let (($x581 (= ?x580 (_ bv0 32))))
 (let (($x676 (= $x69 $x581)))
 (let (($x686 (and $x676 $x378)))
 (let (($x398 (and $x686 $x291)))
 (let (($x352 (and $x398 $x567)))
 (let (($x409 (= $x352 true)))
 (let (($x182 (= $x409 true)))
 (let (($x302 (= $x182 true)))
 (let (($x299 (= $x283 $x348)))
 (let (($x723 (= $x268 $x581)))
 (let (($x296 (and $x723 $x116)))
 (let (($x210 (and $x296 $x299)))
 (let (($x140 (and $x210 $x317)))
 (let (($x497 (= $x140 true)))
 (let (($x226 (= $x497 true)))
 (let (($x817 (= $x226 true)))
 (let (($x764 (and $x817 $x302)))
 (let (($x782 (and $x764 $x380)))
 (let (($x392 (and $x782 $x657)))
 (let (($x286 (and $x392 $x480)))
 (let (($x821 (and $x286 $x219)))
 (let (($x377 (and $x821 $x382)))
 (let (($x610 (and $x377 $x500)))
 (let (($x284 (and $x610 $x59)))
 (let (($x666 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x538 (and $x666 $x284)))
 (let (($x709 (bvugt ?x714 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x714 (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x614 (=> (bvule ?x714 (bvsub (bvadd ?x714 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x709)))))))
 (let (($x638 (=> (and $x172 (bvule ?x714 (bvsub (bvadd ?x714 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x57 $x709)))))))
 (let (($x315 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x512)))
 (let (($x583 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x716 (=> $x583 (or false (or false (and true (or $x80 $x315)))))))
 (let (($x506 (=> (and $x172 $x583) (or false (or false (and true (or $x80 $x315)))))))
 (let (($x7 (and $x506 $x638)))
 (let (($x365 (and $x7 $x538)))
 (let (($x95 (=> $x365 $x623)))
 (not $x95))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0 #b0000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ffb #x7f))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0 () (_ BitVec 31)
    #b0000000000000000000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv204624 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv204624 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0 () (_ BitVec 31) (_ bv0 31))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv307016 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv307016 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv307019 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 97
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0 () (_ BitVec 31))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x554 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x345 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x436 (concat (select input.dst.llvm-mem ?x345) (concat ?x292 (concat ?x554 ?x41)))))
 (let ((?x555 ((_ extract 30 0) ?x436)))
 (let ((?x90 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0 ?x555)))
 (let (($x88 (= (_ bv0 31) ?x90)))
 (let (($x447 (= $x88 true)))
 (let (($x306 (= (_ bv0 31) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0)))
 (let (($x316 (= $x306 true)))
 (let (($x544 (= $x316 true)))
 (let ((?x102 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x234 (= (_ bv0 3) ?x102)))
 (let (($x349 (= $x234 true)))
 (let (($x161 (= $x349 true)))
 (let (($x338 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x854 (=> $x338 false)))
 (let (($x213 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x235 (ite $x213 (_ bv0 32) (_ bv1 32))))
 (let (($x364 (= $x338 (bvuge ?x235 (_ bv1 32)))))
 (let (($x788 (= false false)))
 (let (($x700 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x612 (=> $x700 $x788)))
 (let (($x707 (= $x700 (= ?x235 (_ bv0 32)))))
 (let (($x801 (and $x707 $x612)))
 (let (($x34 (and $x801 $x364)))
 (let (($x242 (and $x34 $x854)))
 (let (($x715 (= $x242 true)))
 (let (($x494 (= $x715 true)))
 (let (($x78 (= $x494 true)))
 (let (($x808 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x396 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x192 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x396) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x396))))
 (let (($x225 (and true $x192)))
 (let (($x482 (and $x192 $x225)))
 (let ((?x583 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x583 (_ bv1 32))) (select input.dst.llvm-mem ?x583))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x583 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x583 (_ bv2 32))) ?x318))))
 (let (($x187 (= (bvand ?x305 (_ bv4294967288 32)) ?x305)))
 (let (($x832 (= (bvand ?x583 (_ bv4294967292 32)) ?x583)))
 (let (($x546 (and $x832 $x187)))
 (let (($x216 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x583 (bvsub ?x583 (_ bv4 32))) (bvult ?x583 (bvsub ?x583 (_ bv4 32))))))
 (let (($x197 (and (and (and (and (and $x225 $x216) $x832) $x546) $x482) $x808)))
 (let (($x100 (= true $x197)))
 (let (($x172 (not $x213)))
 (let (($x518 (=> $x172 $x100)))
 (let (($x60 (= $x518 true)))
 (let (($x212 (= $x60 true)))
 (let (($x662 (= $x212 true)))
 (let (($x510 (= $x172 true)))
 (let (($x247 (= $x510 true)))
 (let (($x397 (= $x247 true)))
 (let (($x284 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x538 (= $x284 true)))
 (let (($x365 (= $x538 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x72)))
 (let ((?x377 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x683 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x377)))
 (let (($x382 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x382 $x683)))
 (let (($x500 (and $x120 $x205)))
 (let (($x468 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x610 (and $x468 $x500)))
 (let (($x393 (= $x610 true)))
 (let (($x415 (= $x393 true)))
 (let (($x135 (= $x415 true)))
 (let (($x821 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x840 (=> $x821 false)))
 (let ((?x425 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x541 (bvuge ?x425 (_ bv1 32))))
 (let (($x809 (= $x821 $x541)))
 (let (($x417 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x209 (=> $x417 $x788)))
 (let (($x849 (= ?x425 (_ bv0 32))))
 (let (($x170 (= $x417 $x849)))
 (let (($x444 (and $x170 $x209)))
 (let (($x248 (and $x444 $x809)))
 (let (($x822 (and $x248 $x840)))
 (let (($x847 (= $x822 true)))
 (let (($x848 (= $x847 true)))
 (let (($x155 (= $x848 true)))
 (let (($x729 (= $x338 $x541)))
 (let (($x311 (= $x700 $x849)))
 (let (($x252 (and $x311 $x612)))
 (let (($x369 (and $x252 $x729)))
 (let (($x548 (and $x369 $x854)))
 (let (($x615 (= $x548 true)))
 (let (($x429 (= $x615 true)))
 (let (($x804 (= $x429 true)))
 (let (($x460 (and $x804 $x155)))
 (let (($x533 (and $x460 $x135)))
 (let (($x303 (and $x533 $x365)))
 (let (($x720 (and $x303 $x397)))
 (let (($x413 (and $x720 $x662)))
 (let (($x489 (and $x413 $x78)))
 (let (($x333 (and $x489 $x161)))
 (let (($x47 (and $x333 $x544)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x550 (and $x268 $x47)))
 (let (($x838 (bvugt ?x583 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x583 (_ bv3 32))))
 (let (($x675 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x666 (=> (bvule ?x583 (bvsub (bvadd ?x583 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x675 $x838)))))))
 (let (($x682 (=> (and $x172 (bvule ?x583 (bvsub (bvadd ?x583 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x675 $x838)))))))
 (let (($x457 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x347 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x345)))
 (let (($x124 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x693 (=> $x124 (or false (or false (and true (or $x347 $x457)))))))
 (let (($x465 (=> (and $x172 $x124) (or false (or false (and true (or $x347 $x457)))))))
 (let (($x99 (and $x465 $x682)))
 (let (($x207 (and $x99 $x550)))
 (let (($x24 (=> $x207 $x447)))
 (not $x24))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0 () (_ BitVec 31))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x554 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x345 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x436 (concat (select input.dst.llvm-mem ?x345) (concat ?x292 (concat ?x554 ?x41)))))
 (let ((?x555 ((_ extract 30 0) ?x436)))
 (let ((?x90 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0 ?x555)))
 (let (($x88 (= (_ bv0 31) ?x90)))
 (let (($x447 (= $x88 true)))
 (let (($x306 (= (_ bv0 31) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_30_0)))
 (let (($x316 (= $x306 true)))
 (let (($x544 (= $x316 true)))
 (let ((?x102 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x234 (= (_ bv0 3) ?x102)))
 (let (($x349 (= $x234 true)))
 (let (($x161 (= $x349 true)))
 (let (($x338 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x854 (=> $x338 false)))
 (let (($x213 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x235 (ite $x213 (_ bv0 32) (_ bv1 32))))
 (let (($x364 (= $x338 (bvuge ?x235 (_ bv1 32)))))
 (let (($x788 (= false false)))
 (let (($x700 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x612 (=> $x700 $x788)))
 (let (($x707 (= $x700 (= ?x235 (_ bv0 32)))))
 (let (($x801 (and $x707 $x612)))
 (let (($x34 (and $x801 $x364)))
 (let (($x242 (and $x34 $x854)))
 (let (($x715 (= $x242 true)))
 (let (($x494 (= $x715 true)))
 (let (($x78 (= $x494 true)))
 (let (($x808 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x396 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x192 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x396) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x396))))
 (let (($x225 (and true $x192)))
 (let (($x482 (and $x192 $x225)))
 (let ((?x583 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x583 (_ bv1 32))) (select input.dst.llvm-mem ?x583))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x583 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x583 (_ bv2 32))) ?x318))))
 (let (($x187 (= (bvand ?x305 (_ bv4294967288 32)) ?x305)))
 (let (($x832 (= (bvand ?x583 (_ bv4294967292 32)) ?x583)))
 (let (($x546 (and $x832 $x187)))
 (let (($x216 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x583 (bvsub ?x583 (_ bv4 32))) (bvult ?x583 (bvsub ?x583 (_ bv4 32))))))
 (let (($x197 (and (and (and (and (and $x225 $x216) $x832) $x546) $x482) $x808)))
 (let (($x100 (= true $x197)))
 (let (($x172 (not $x213)))
 (let (($x518 (=> $x172 $x100)))
 (let (($x60 (= $x518 true)))
 (let (($x212 (= $x60 true)))
 (let (($x662 (= $x212 true)))
 (let (($x510 (= $x172 true)))
 (let (($x247 (= $x510 true)))
 (let (($x397 (= $x247 true)))
 (let (($x284 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x538 (= $x284 true)))
 (let (($x365 (= $x538 true)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x72)))
 (let ((?x377 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x683 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x377)))
 (let (($x382 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x382 $x683)))
 (let (($x500 (and $x120 $x205)))
 (let (($x468 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x610 (and $x468 $x500)))
 (let (($x393 (= $x610 true)))
 (let (($x415 (= $x393 true)))
 (let (($x135 (= $x415 true)))
 (let (($x821 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x840 (=> $x821 false)))
 (let ((?x425 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x541 (bvuge ?x425 (_ bv1 32))))
 (let (($x809 (= $x821 $x541)))
 (let (($x417 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x209 (=> $x417 $x788)))
 (let (($x849 (= ?x425 (_ bv0 32))))
 (let (($x170 (= $x417 $x849)))
 (let (($x444 (and $x170 $x209)))
 (let (($x248 (and $x444 $x809)))
 (let (($x822 (and $x248 $x840)))
 (let (($x847 (= $x822 true)))
 (let (($x848 (= $x847 true)))
 (let (($x155 (= $x848 true)))
 (let (($x729 (= $x338 $x541)))
 (let (($x311 (= $x700 $x849)))
 (let (($x252 (and $x311 $x612)))
 (let (($x369 (and $x252 $x729)))
 (let (($x548 (and $x369 $x854)))
 (let (($x615 (= $x548 true)))
 (let (($x429 (= $x615 true)))
 (let (($x804 (= $x429 true)))
 (let (($x460 (and $x804 $x155)))
 (let (($x533 (and $x460 $x135)))
 (let (($x303 (and $x533 $x365)))
 (let (($x720 (and $x303 $x397)))
 (let (($x413 (and $x720 $x662)))
 (let (($x489 (and $x413 $x78)))
 (let (($x333 (and $x489 $x161)))
 (let (($x47 (and $x333 $x544)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x550 (and $x268 $x47)))
 (let (($x838 (bvugt ?x583 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x583 (_ bv3 32))))
 (let (($x675 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x666 (=> (bvule ?x583 (bvsub (bvadd ?x583 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x675 $x838)))))))
 (let (($x682 (=> (and $x172 (bvule ?x583 (bvsub (bvadd ?x583 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x675 $x838)))))))
 (let (($x457 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x347 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x345)))
 (let (($x124 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x693 (=> $x124 (or false (or false (and true (or $x347 $x457)))))))
 (let (($x465 (=> (and $x172 $x124) (or false (or false (and true (or $x347 $x457)))))))
 (let (($x99 (and $x465 $x682)))
 (let (($x207 (and $x99 $x550)))
 (let (($x24 (=> $x207 $x447)))
 (not $x24))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 98
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0 () (_ BitVec 30))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x435 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x853 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x523 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x259 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x162 (concat (select input.dst.llvm-mem ?x259) (concat ?x523 (concat ?x853 ?x435)))))
 (let ((?x451 ((_ extract 29 0) ?x162)))
 (let ((?x23 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0 ?x451)))
 (let (($x681 (= (_ bv0 30) ?x23)))
 (let (($x684 (= $x681 true)))
 (let (($x539 (= (_ bv0 30) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0)))
 (let (($x319 (= $x539 true)))
 (let (($x475 (= $x319 true)))
 (let ((?x575 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x76 (= (_ bv0 3) ?x575)))
 (let (($x783 (= $x76 true)))
 (let (($x432 (= $x783 true)))
 (let (($x592 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x305 (=> $x592 true)))
 (let (($x215 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x785 (ite $x215 (_ bv0 32) (_ bv1 32))))
 (let (($x334 (= $x592 (bvuge ?x785 (_ bv1 32)))))
 (let (($x168 (= false false)))
 (let (($x95 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x832 (=> $x95 $x168)))
 (let (($x97 (= $x95 (= ?x785 (_ bv0 32)))))
 (let (($x843 (and $x97 $x832)))
 (let (($x68 (and $x843 $x334)))
 (let (($x806 (and $x68 $x305)))
 (let (($x811 (= $x806 true)))
 (let (($x313 (= $x811 true)))
 (let (($x238 (= $x313 true)))
 (let (($x226 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x555 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41))))
 (let (($x90 (and true $x555)))
 (let (($x69 (and $x555 $x90)))
 (let ((?x124 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x581 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x283))))
 (let (($x394 (= (bvand ?x581 (_ bv4294967288 32)) ?x581)))
 (let (($x104 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x309 (and $x104 $x394)))
 (let (($x577 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv4 32))) (bvult ?x124 (bvsub ?x124 (_ bv4 32))))))
 (let (($x817 (and (and (and (and (and $x90 $x577) $x104) $x309) $x69) $x226)))
 (let (($x676 (= true $x817)))
 (let (($x213 (not $x215)))
 (let (($x764 (=> $x213 $x676)))
 (let (($x588 (= $x764 true)))
 (let (($x409 (= $x588 true)))
 (let (($x182 (= $x409 true)))
 (let (($x73 (= $x213 true)))
 (let (($x292 (= $x73 true)))
 (let (($x488 (= $x292 true)))
 (let (($x47 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x550 (= $x47 true)))
 (let (($x207 (= $x550 true)))
 (let ((?x234 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x349 (= (_ bv0 32) ?x234)))
 (let ((?x489 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x403 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x489)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x78 $x403)))
 (let (($x161 (and $x102 $x349)))
 (let (($x494 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x333 (and $x494 $x161)))
 (let (($x508 (= $x333 true)))
 (let (($x573 (= $x508 true)))
 (let (($x306 (= $x573 true)))
 (let (($x413 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x707 (=> $x413 true)))
 (let ((?x216 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge ?x216 (_ bv1 32))))
 (let (($x235 (= $x413 $x196)))
 (let (($x197 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x518 (=> $x197 $x168)))
 (let (($x868 (= ?x216 (_ bv0 32))))
 (let (($x100 (= $x197 $x868)))
 (let (($x60 (and $x100 $x518)))
 (let (($x129 (and $x60 $x235)))
 (let (($x801 (and $x129 $x707)))
 (let (($x119 (= $x801 true)))
 (let (($x364 (= $x119 true)))
 (let (($x34 (= $x364 true)))
 (let (($x318 (= $x592 $x196)))
 (let (($x859 (= $x95 $x868)))
 (let (($x846 (and $x859 $x832)))
 (let (($x262 (and $x846 $x318)))
 (let (($x191 (and $x262 $x305)))
 (let (($x427 (= $x191 true)))
 (let (($x187 (= $x427 true)))
 (let (($x546 (= $x187 true)))
 (let (($x242 (and $x546 $x34)))
 (let (($x316 (and $x242 $x306)))
 (let (($x446 (and $x316 $x207)))
 (let (($x554 (and $x446 $x488)))
 (let (($x398 (and $x554 $x182)))
 (let (($x201 (and $x398 $x238)))
 (let (($x507 (and $x201 $x432)))
 (let (($x448 (and $x507 $x475)))
 (let (($x700 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x363 (and $x700 $x448)))
 (let (($x638 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x124 (_ bv3 32))))
 (let (($x614 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x268 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x614 $x638)))))))
 (let (($x17 (=> (and $x213 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x614 $x638)))))))
 (let (($x506 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x716 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x259)))
 (let (($x57 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x709 (=> $x57 (or false (or false (and true (or $x716 $x506)))))))
 (let (($x512 (=> (and $x213 $x57) (or false (or false (and true (or $x716 $x506)))))))
 (let (($x37 (and $x512 $x17)))
 (let (($x281 (and $x37 $x363)))
 (let (($x593 (=> $x281 $x684)))
 (not $x593))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0 () (_ BitVec 30))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x435 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x853 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x523 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x259 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x162 (concat (select input.dst.llvm-mem ?x259) (concat ?x523 (concat ?x853 ?x435)))))
 (let ((?x451 ((_ extract 29 0) ?x162)))
 (let ((?x23 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0 ?x451)))
 (let (($x681 (= (_ bv0 30) ?x23)))
 (let (($x684 (= $x681 true)))
 (let (($x539 (= (_ bv0 30) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0)))
 (let (($x319 (= $x539 true)))
 (let (($x475 (= $x319 true)))
 (let ((?x575 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x76 (= (_ bv0 3) ?x575)))
 (let (($x783 (= $x76 true)))
 (let (($x432 (= $x783 true)))
 (let (($x592 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x305 (=> $x592 true)))
 (let (($x215 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x785 (ite $x215 (_ bv0 32) (_ bv1 32))))
 (let (($x334 (= $x592 (bvuge ?x785 (_ bv1 32)))))
 (let (($x168 (= false false)))
 (let (($x95 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x832 (=> $x95 $x168)))
 (let (($x97 (= $x95 (= ?x785 (_ bv0 32)))))
 (let (($x843 (and $x97 $x832)))
 (let (($x68 (and $x843 $x334)))
 (let (($x806 (and $x68 $x305)))
 (let (($x811 (= $x806 true)))
 (let (($x313 (= $x811 true)))
 (let (($x238 (= $x313 true)))
 (let (($x226 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x555 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41))))
 (let (($x90 (and true $x555)))
 (let (($x69 (and $x555 $x90)))
 (let ((?x124 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x581 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x283))))
 (let (($x394 (= (bvand ?x581 (_ bv4294967288 32)) ?x581)))
 (let (($x104 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x309 (and $x104 $x394)))
 (let (($x577 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv4 32))) (bvult ?x124 (bvsub ?x124 (_ bv4 32))))))
 (let (($x817 (and (and (and (and (and $x90 $x577) $x104) $x309) $x69) $x226)))
 (let (($x676 (= true $x817)))
 (let (($x213 (not $x215)))
 (let (($x764 (=> $x213 $x676)))
 (let (($x588 (= $x764 true)))
 (let (($x409 (= $x588 true)))
 (let (($x182 (= $x409 true)))
 (let (($x73 (= $x213 true)))
 (let (($x292 (= $x73 true)))
 (let (($x488 (= $x292 true)))
 (let (($x47 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x550 (= $x47 true)))
 (let (($x207 (= $x550 true)))
 (let ((?x234 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x349 (= (_ bv0 32) ?x234)))
 (let ((?x489 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x403 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x489)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x78 $x403)))
 (let (($x161 (and $x102 $x349)))
 (let (($x494 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x333 (and $x494 $x161)))
 (let (($x508 (= $x333 true)))
 (let (($x573 (= $x508 true)))
 (let (($x306 (= $x573 true)))
 (let (($x413 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x707 (=> $x413 true)))
 (let ((?x216 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge ?x216 (_ bv1 32))))
 (let (($x235 (= $x413 $x196)))
 (let (($x197 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x518 (=> $x197 $x168)))
 (let (($x868 (= ?x216 (_ bv0 32))))
 (let (($x100 (= $x197 $x868)))
 (let (($x60 (and $x100 $x518)))
 (let (($x129 (and $x60 $x235)))
 (let (($x801 (and $x129 $x707)))
 (let (($x119 (= $x801 true)))
 (let (($x364 (= $x119 true)))
 (let (($x34 (= $x364 true)))
 (let (($x318 (= $x592 $x196)))
 (let (($x859 (= $x95 $x868)))
 (let (($x846 (and $x859 $x832)))
 (let (($x262 (and $x846 $x318)))
 (let (($x191 (and $x262 $x305)))
 (let (($x427 (= $x191 true)))
 (let (($x187 (= $x427 true)))
 (let (($x546 (= $x187 true)))
 (let (($x242 (and $x546 $x34)))
 (let (($x316 (and $x242 $x306)))
 (let (($x446 (and $x316 $x207)))
 (let (($x554 (and $x446 $x488)))
 (let (($x398 (and $x554 $x182)))
 (let (($x201 (and $x398 $x238)))
 (let (($x507 (and $x201 $x432)))
 (let (($x448 (and $x507 $x475)))
 (let (($x700 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x363 (and $x700 $x448)))
 (let (($x638 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x124 (_ bv3 32))))
 (let (($x614 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x268 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x614 $x638)))))))
 (let (($x17 (=> (and $x213 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x614 $x638)))))))
 (let (($x506 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x716 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x259)))
 (let (($x57 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x709 (=> $x57 (or false (or false (and true (or $x716 $x506)))))))
 (let (($x512 (=> (and $x213 $x57) (or false (or false (and true (or $x716 $x506)))))))
 (let (($x37 (and $x512 $x17)))
 (let (($x281 (and $x37 $x363)))
 (let (($x593 (=> $x281 $x684)))
 (not $x593))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0 #b000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b00100000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ffb #x3f))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0 () (_ BitVec 30)
    #b000000000000000000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv47536 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv47536 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0 () (_ BitVec 30) (_ bv0 30))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv319304 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv319304 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv319307 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 99
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0 () (_ BitVec 30))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x185 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x529 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x563 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x714 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x29 (concat (select input.dst.llvm-mem ?x714) (concat ?x563 (concat ?x529 ?x185)))))
 (let ((?x43 ((_ extract 29 0) ?x29)))
 (let ((?x189 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0 ?x43)))
 (let (($x154 (= (_ bv0 30) ?x189)))
 (let (($x520 (= $x154 true)))
 (let (($x286 (= (_ bv0 30) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0)))
 (let (($x782 (= $x286 true)))
 (let (($x32 (= $x782 true)))
 (let ((?x9 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x828 (= (_ bv0 3) ?x9)))
 (let (($x844 (= $x828 true)))
 (let (($x380 (= $x844 true)))
 (let (($x116 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x581 (=> $x116 false)))
 (let (($x215 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x59 (ite $x215 (_ bv0 32) (_ bv1 32))))
 (let (($x140 (= $x116 (bvuge ?x59 (_ bv1 32)))))
 (let (($x461 (= false false)))
 (let (($x24 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x104 (=> $x24 $x461)))
 (let (($x190 (= $x24 (= ?x59 (_ bv0 32)))))
 (let (($x458 (and $x190 $x104)))
 (let (($x483 (and $x458 $x140)))
 (let (($x344 (and $x483 $x581)))
 (let (($x244 (= $x344 true)))
 (let (($x567 (= $x244 true)))
 (let (($x291 (= $x567 true)))
 (let (($x429 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x435 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x451 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435))))
 (let (($x23 (and true $x451)))
 (let (($x417 (and $x451 $x23)))
 (let ((?x57 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem ?x57))))
 (let ((?x849 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv2 32))) ?x338))))
 (let (($x821 (= (bvand ?x849 (_ bv4294967288 32)) ?x849)))
 (let (($x410 (= (bvand ?x57 (_ bv4294967292 32)) ?x57)))
 (let (($x273 (and $x410 $x821)))
 (let (($x171 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x57 (bvsub ?x57 (_ bv4 32))) (bvult ?x57 (bvsub ?x57 (_ bv4 32))))))
 (let (($x804 (and (and (and (and (and $x23 $x171) $x410) $x273) $x417) $x429)))
 (let (($x170 (= true $x804)))
 (let (($x213 (not $x215)))
 (let (($x460 (=> $x213 $x170)))
 (let (($x390 (= $x460 true)))
 (let (($x847 (= $x390 true)))
 (let (($x848 (= $x847 true)))
 (let (($x261 (= $x213 true)))
 (let (($x523 (= $x261 true)))
 (let (($x659 (= $x523 true)))
 (let (($x448 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x363 (= $x448 true)))
 (let (($x281 (= $x363 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x783 (= (_ bv0 32) ?x76)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x575 (and $x238 $x260)))
 (let (($x432 (and $x575 $x783)))
 (let (($x313 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x507 (and $x313 $x432)))
 (let (($x725 (= $x507 true)))
 (let (($x236 (= $x725 true)))
 (let (($x539 (= $x236 true)))
 (let (($x398 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x97 (=> $x398 false)))
 (let ((?x577 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x378 (bvuge ?x577 (_ bv1 32))))
 (let (($x785 (= $x398 $x378)))
 (let (($x817 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x764 (=> $x817 $x461)))
 (let (($x299 (= ?x577 (_ bv0 32))))
 (let (($x676 (= $x817 $x299)))
 (let (($x588 (and $x676 $x764)))
 (let (($x204 (and $x588 $x785)))
 (let (($x843 (and $x204 $x97)))
 (let (($x219 (= $x843 true)))
 (let (($x334 (= $x219 true)))
 (let (($x68 (= $x334 true)))
 (let (($x283 (= $x116 $x378)))
 (let (($x111 (= $x24 $x299)))
 (let (($x210 (and $x111 $x104)))
 (let (($x176 (and $x210 $x283)))
 (let (($x297 (and $x176 $x581)))
 (let (($x686 (= $x297 true)))
 (let (($x394 (= $x686 true)))
 (let (($x309 (= $x394 true)))
 (let (($x806 (and $x309 $x68)))
 (let (($x319 (and $x806 $x539)))
 (let (($x606 (and $x319 $x281)))
 (let (($x853 (and $x606 $x659)))
 (let (($x248 (and $x853 $x848)))
 (let (($x352 (and $x248 $x291)))
 (let (($x803 (and $x352 $x380)))
 (let (($x763 (and $x803 $x32)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x391 (and $x95 $x763)))
 (let (($x682 (bvugt ?x57 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x57 (_ bv3 32))))
 (let (($x666 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x700 (=> (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x666 $x682)))))))
 (let (($x343 (=> (and $x213 (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x666 $x682)))))))
 (let (($x465 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x693 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x714)))
 (let (($x675 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x838 (=> $x675 (or false (or false (and true (or $x693 $x465)))))))
 (let (($x345 (=> (and $x213 $x675) (or false (or false (and true (or $x693 $x465)))))))
 (let (($x186 (and $x345 $x343)))
 (let (($x513 (and $x186 $x391)))
 (let (($x443 (=> $x513 $x520)))
 (not $x443))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0 () (_ BitVec 30))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x185 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x529 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x563 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x714 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x29 (concat (select input.dst.llvm-mem ?x714) (concat ?x563 (concat ?x529 ?x185)))))
 (let ((?x43 ((_ extract 29 0) ?x29)))
 (let ((?x189 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0 ?x43)))
 (let (($x154 (= (_ bv0 30) ?x189)))
 (let (($x520 (= $x154 true)))
 (let (($x286 (= (_ bv0 30) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_29_0)))
 (let (($x782 (= $x286 true)))
 (let (($x32 (= $x782 true)))
 (let ((?x9 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x828 (= (_ bv0 3) ?x9)))
 (let (($x844 (= $x828 true)))
 (let (($x380 (= $x844 true)))
 (let (($x116 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x581 (=> $x116 false)))
 (let (($x215 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x59 (ite $x215 (_ bv0 32) (_ bv1 32))))
 (let (($x140 (= $x116 (bvuge ?x59 (_ bv1 32)))))
 (let (($x461 (= false false)))
 (let (($x24 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x104 (=> $x24 $x461)))
 (let (($x190 (= $x24 (= ?x59 (_ bv0 32)))))
 (let (($x458 (and $x190 $x104)))
 (let (($x483 (and $x458 $x140)))
 (let (($x344 (and $x483 $x581)))
 (let (($x244 (= $x344 true)))
 (let (($x567 (= $x244 true)))
 (let (($x291 (= $x567 true)))
 (let (($x429 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x435 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x451 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435))))
 (let (($x23 (and true $x451)))
 (let (($x417 (and $x451 $x23)))
 (let ((?x57 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem ?x57))))
 (let ((?x849 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv2 32))) ?x338))))
 (let (($x821 (= (bvand ?x849 (_ bv4294967288 32)) ?x849)))
 (let (($x410 (= (bvand ?x57 (_ bv4294967292 32)) ?x57)))
 (let (($x273 (and $x410 $x821)))
 (let (($x171 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x57 (bvsub ?x57 (_ bv4 32))) (bvult ?x57 (bvsub ?x57 (_ bv4 32))))))
 (let (($x804 (and (and (and (and (and $x23 $x171) $x410) $x273) $x417) $x429)))
 (let (($x170 (= true $x804)))
 (let (($x213 (not $x215)))
 (let (($x460 (=> $x213 $x170)))
 (let (($x390 (= $x460 true)))
 (let (($x847 (= $x390 true)))
 (let (($x848 (= $x847 true)))
 (let (($x261 (= $x213 true)))
 (let (($x523 (= $x261 true)))
 (let (($x659 (= $x523 true)))
 (let (($x448 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x363 (= $x448 true)))
 (let (($x281 (= $x363 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x783 (= (_ bv0 32) ?x76)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x575 (and $x238 $x260)))
 (let (($x432 (and $x575 $x783)))
 (let (($x313 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x507 (and $x313 $x432)))
 (let (($x725 (= $x507 true)))
 (let (($x236 (= $x725 true)))
 (let (($x539 (= $x236 true)))
 (let (($x398 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x97 (=> $x398 false)))
 (let ((?x577 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x378 (bvuge ?x577 (_ bv1 32))))
 (let (($x785 (= $x398 $x378)))
 (let (($x817 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x764 (=> $x817 $x461)))
 (let (($x299 (= ?x577 (_ bv0 32))))
 (let (($x676 (= $x817 $x299)))
 (let (($x588 (and $x676 $x764)))
 (let (($x204 (and $x588 $x785)))
 (let (($x843 (and $x204 $x97)))
 (let (($x219 (= $x843 true)))
 (let (($x334 (= $x219 true)))
 (let (($x68 (= $x334 true)))
 (let (($x283 (= $x116 $x378)))
 (let (($x111 (= $x24 $x299)))
 (let (($x210 (and $x111 $x104)))
 (let (($x176 (and $x210 $x283)))
 (let (($x297 (and $x176 $x581)))
 (let (($x686 (= $x297 true)))
 (let (($x394 (= $x686 true)))
 (let (($x309 (= $x394 true)))
 (let (($x806 (and $x309 $x68)))
 (let (($x319 (and $x806 $x539)))
 (let (($x606 (and $x319 $x281)))
 (let (($x853 (and $x606 $x659)))
 (let (($x248 (and $x853 $x848)))
 (let (($x352 (and $x248 $x291)))
 (let (($x803 (and $x352 $x380)))
 (let (($x763 (and $x803 $x32)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x391 (and $x95 $x763)))
 (let (($x682 (bvugt ?x57 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x57 (_ bv3 32))))
 (let (($x666 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x700 (=> (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x666 $x682)))))))
 (let (($x343 (=> (and $x213 (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x666 $x682)))))))
 (let (($x465 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x693 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x714)))
 (let (($x675 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x838 (=> $x675 (or false (or false (and true (or $x693 $x465)))))))
 (let (($x345 (=> (and $x213 $x675) (or false (or false (and true (or $x693 $x465)))))))
 (let (($x186 (and $x345 $x343)))
 (let (($x513 (and $x186 $x391)))
 (let (($x443 (=> $x513 $x520)))
 (not $x443))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 100
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0 () (_ BitVec 29))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x382 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x583 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x120 (concat (select input.dst.llvm-mem ?x583) (concat ?x56 (concat ?x382 ?x284)))))
 (let ((?x500 ((_ extract 28 0) ?x120)))
 (let ((?x415 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0 ?x500)))
 (let (($x192 (= (_ bv0 29) ?x415)))
 (let (($x225 (= $x192 true)))
 (let (($x720 (= (_ bv0 29) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0)))
 (let (($x533 (= $x720 true)))
 (let (($x72 (= $x533 true)))
 (let ((?x610 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x393 (= (_ bv0 3) ?x610)))
 (let (($x551 (= $x393 true)))
 (let (($x135 (= $x551 true)))
 (let (($x612 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x849 (=> $x612 true)))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x544 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x548 (= $x612 (bvuge ?x544 (_ bv1 32)))))
 (let (($x723 (= false false)))
 (let (($x593 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x410 (=> $x593 $x723)))
 (let (($x497 (= $x593 (= ?x544 (_ bv0 32)))))
 (let (($x436 (and $x497 $x410)))
 (let (($x122 (and $x436 $x548)))
 (let (($x530 (and $x122 $x849)))
 (let (($x169 (= $x530 true)))
 (let (($x840 (= $x169 true)))
 (let (($x809 (= $x840 true)))
 (let (($x187 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x185 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x43 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x185) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x185))))
 (let (($x189 (and true $x43)))
 (let (($x197 (and $x43 $x189)))
 (let ((?x675 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x592 (concat (select input.dst.llvm-mem (bvadd ?x675 (_ bv1 32))) (select input.dst.llvm-mem ?x675))))
 (let ((?x868 (concat (select input.dst.llvm-mem (bvadd ?x675 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x675 (_ bv2 32))) ?x592))))
 (let (($x413 (= (bvand ?x868 (_ bv4294967288 32)) ?x868)))
 (let (($x637 (= (bvand ?x675 (_ bv4294967292 32)) ?x675)))
 (let (($x808 (and $x637 $x413)))
 (let (($x348 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x675 (bvsub ?x675 (_ bv4 32))) (bvult ?x675 (bvsub ?x675 (_ bv4 32))))))
 (let (($x546 (and (and (and (and (and $x189 $x348) $x637) $x808) $x197) $x187)))
 (let (($x100 (= true $x546)))
 (let (($x215 (not $x39)))
 (let (($x242 (=> $x215 $x100)))
 (let (($x715 (= $x242 true)))
 (let (($x119 (= $x715 true)))
 (let (($x364 (= $x119 true)))
 (let (($x642 (= $x215 true)))
 (let (($x563 (= $x642 true)))
 (let (($x740 (= $x563 true)))
 (let (($x763 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x391 (= $x763 true)))
 (let (($x513 (= $x391 true)))
 (let ((?x828 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x844 (= (_ bv0 32) ?x828)))
 (let ((?x352 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x657 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x352)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x291 $x657)))
 (let (($x380 (and $x9 $x844)))
 (let (($x567 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x803 (and $x567 $x380)))
 (let (($x522 (= $x803 true)))
 (let (($x392 (= $x522 true)))
 (let (($x286 (= $x392 true)))
 (let (($x248 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x190 (=> $x248 true)))
 (let ((?x171 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x209 (bvuge ?x171 (_ bv1 32))))
 (let (($x59 (= $x248 $x209)))
 (let (($x804 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x460 (=> $x804 $x723)))
 (let (($x729 (= ?x171 (_ bv0 32))))
 (let (($x170 (= $x804 $x729)))
 (let (($x390 (and $x170 $x460)))
 (let (($x867 (and $x390 $x59)))
 (let (($x458 (and $x867 $x190)))
 (let (($x662 (= $x458 true)))
 (let (($x140 (= $x662 true)))
 (let (($x483 (= $x140 true)))
 (let (($x338 (= $x612 $x209)))
 (let (($x482 (= $x593 $x729)))
 (let (($x369 (and $x482 $x410)))
 (let (($x404 (and $x369 $x338)))
 (let (($x312 (and $x404 $x849)))
 (let (($x444 (= $x312 true)))
 (let (($x821 (= $x444 true)))
 (let (($x273 (= $x821 true)))
 (let (($x344 (and $x273 $x483)))
 (let (($x782 (and $x344 $x286)))
 (let (($x496 (and $x782 $x513)))
 (let (($x529 (and $x496 $x740)))
 (let (($x129 (and $x529 $x364)))
 (let (($x822 (and $x129 $x809)))
 (let (($x538 (and $x822 $x135)))
 (let (($x396 (and $x538 $x72)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x247 (and $x24 $x396)))
 (let (($x17 (bvugt ?x675 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x675 (_ bv3 32))))
 (let (($x268 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x95 (=> (bvule ?x675 (bvsub (bvadd ?x675 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x268 $x17)))))))
 (let (($x278 (=> (and $x215 (bvule ?x675 (bvsub (bvadd ?x675 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x268 $x17)))))))
 (let (($x512 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x709 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x583)))
 (let (($x614 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x638 (=> $x614 (or false (or false (and true (or $x709 $x512)))))))
 (let (($x259 (=> (and $x215 $x614) (or false (or false (and true (or $x709 $x512)))))))
 (let (($x7 (and $x259 $x278)))
 (let (($x683 (and $x7 $x247)))
 (let (($x623 (=> $x683 $x225)))
 (not $x623))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0 () (_ BitVec 29))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x382 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x583 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x120 (concat (select input.dst.llvm-mem ?x583) (concat ?x56 (concat ?x382 ?x284)))))
 (let ((?x500 ((_ extract 28 0) ?x120)))
 (let ((?x415 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0 ?x500)))
 (let (($x192 (= (_ bv0 29) ?x415)))
 (let (($x225 (= $x192 true)))
 (let (($x720 (= (_ bv0 29) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0)))
 (let (($x533 (= $x720 true)))
 (let (($x72 (= $x533 true)))
 (let ((?x610 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x393 (= (_ bv0 3) ?x610)))
 (let (($x551 (= $x393 true)))
 (let (($x135 (= $x551 true)))
 (let (($x612 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x849 (=> $x612 true)))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x544 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x548 (= $x612 (bvuge ?x544 (_ bv1 32)))))
 (let (($x723 (= false false)))
 (let (($x593 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x410 (=> $x593 $x723)))
 (let (($x497 (= $x593 (= ?x544 (_ bv0 32)))))
 (let (($x436 (and $x497 $x410)))
 (let (($x122 (and $x436 $x548)))
 (let (($x530 (and $x122 $x849)))
 (let (($x169 (= $x530 true)))
 (let (($x840 (= $x169 true)))
 (let (($x809 (= $x840 true)))
 (let (($x187 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x185 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x43 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x185) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x185))))
 (let (($x189 (and true $x43)))
 (let (($x197 (and $x43 $x189)))
 (let ((?x675 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x592 (concat (select input.dst.llvm-mem (bvadd ?x675 (_ bv1 32))) (select input.dst.llvm-mem ?x675))))
 (let ((?x868 (concat (select input.dst.llvm-mem (bvadd ?x675 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x675 (_ bv2 32))) ?x592))))
 (let (($x413 (= (bvand ?x868 (_ bv4294967288 32)) ?x868)))
 (let (($x637 (= (bvand ?x675 (_ bv4294967292 32)) ?x675)))
 (let (($x808 (and $x637 $x413)))
 (let (($x348 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x675 (bvsub ?x675 (_ bv4 32))) (bvult ?x675 (bvsub ?x675 (_ bv4 32))))))
 (let (($x546 (and (and (and (and (and $x189 $x348) $x637) $x808) $x197) $x187)))
 (let (($x100 (= true $x546)))
 (let (($x215 (not $x39)))
 (let (($x242 (=> $x215 $x100)))
 (let (($x715 (= $x242 true)))
 (let (($x119 (= $x715 true)))
 (let (($x364 (= $x119 true)))
 (let (($x642 (= $x215 true)))
 (let (($x563 (= $x642 true)))
 (let (($x740 (= $x563 true)))
 (let (($x763 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x391 (= $x763 true)))
 (let (($x513 (= $x391 true)))
 (let ((?x828 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x844 (= (_ bv0 32) ?x828)))
 (let ((?x352 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x657 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x352)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x291 $x657)))
 (let (($x380 (and $x9 $x844)))
 (let (($x567 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x803 (and $x567 $x380)))
 (let (($x522 (= $x803 true)))
 (let (($x392 (= $x522 true)))
 (let (($x286 (= $x392 true)))
 (let (($x248 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x190 (=> $x248 true)))
 (let ((?x171 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x209 (bvuge ?x171 (_ bv1 32))))
 (let (($x59 (= $x248 $x209)))
 (let (($x804 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x460 (=> $x804 $x723)))
 (let (($x729 (= ?x171 (_ bv0 32))))
 (let (($x170 (= $x804 $x729)))
 (let (($x390 (and $x170 $x460)))
 (let (($x867 (and $x390 $x59)))
 (let (($x458 (and $x867 $x190)))
 (let (($x662 (= $x458 true)))
 (let (($x140 (= $x662 true)))
 (let (($x483 (= $x140 true)))
 (let (($x338 (= $x612 $x209)))
 (let (($x482 (= $x593 $x729)))
 (let (($x369 (and $x482 $x410)))
 (let (($x404 (and $x369 $x338)))
 (let (($x312 (and $x404 $x849)))
 (let (($x444 (= $x312 true)))
 (let (($x821 (= $x444 true)))
 (let (($x273 (= $x821 true)))
 (let (($x344 (and $x273 $x483)))
 (let (($x782 (and $x344 $x286)))
 (let (($x496 (and $x782 $x513)))
 (let (($x529 (and $x496 $x740)))
 (let (($x129 (and $x529 $x364)))
 (let (($x822 (and $x129 $x809)))
 (let (($x538 (and $x822 $x135)))
 (let (($x396 (and $x538 $x72)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x247 (and $x24 $x396)))
 (let (($x17 (bvugt ?x675 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x675 (_ bv3 32))))
 (let (($x268 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x95 (=> (bvule ?x675 (bvsub (bvadd ?x675 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x268 $x17)))))))
 (let (($x278 (=> (and $x215 (bvule ?x675 (bvsub (bvadd ?x675 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x268 $x17)))))))
 (let (($x512 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x709 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x583)))
 (let (($x614 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x638 (=> $x614 (or false (or false (and true (or $x709 $x512)))))))
 (let (($x259 (=> (and $x215 $x614) (or false (or false (and true (or $x709 $x512)))))))
 (let (($x7 (and $x259 $x278)))
 (let (($x683 (and $x7 $x247)))
 (let (($x623 (=> $x683 $x225)))
 (not $x623))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0 #b00000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b00010000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ffb #x1f))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0 () (_ BitVec 29)
    #b00000000000000000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv216496 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv216496 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0 () (_ BitVec 29) (_ bv0 29))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv310088 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv310088 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv310091 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 101
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0 () (_ BitVec 29))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x124 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x124) (concat ?x158 (concat ?x78 ?x47)))))
 (let ((?x161 ((_ extract 28 0) ?x102)))
 (let ((?x573 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0 ?x161)))
 (let (($x555 (= (_ bv0 29) ?x573)))
 (let (($x90 (= $x555 true)))
 (let (($x554 (= (_ bv0 29) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0)))
 (let (($x316 (= $x554 true)))
 (let (($x234 (= $x316 true)))
 (let ((?x333 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x508 (= (_ bv0 3) ?x333)))
 (let (($x340 (= $x508 true)))
 (let (($x306 (= $x340 true)))
 (let (($x832 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x868 (=> $x832 false)))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x475 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (= $x832 (bvuge ?x475 (_ bv1 32)))))
 (let (($x311 (= false false)))
 (let (($x443 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x637 (=> $x443 $x311)))
 (let (($x615 (= $x443 (= ?x475 (_ bv0 32)))))
 (let (($x162 (and $x615 $x637)))
 (let (($x346 (and $x162 $x191)))
 (let (($x296 (and $x346 $x868)))
 (let (($x788 (= $x296 true)))
 (let (($x707 (= $x788 true)))
 (let (($x235 (= $x707 true)))
 (let (($x394 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x284 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x500 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x284) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x284))))
 (let (($x415 (and true $x500)))
 (let (($x817 (and $x500 $x415)))
 (let ((?x614 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv1 32))) (select input.dst.llvm-mem ?x614))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv2 32))) ?x116))))
 (let (($x398 (= (bvand ?x299 (_ bv4294967288 32)) ?x299)))
 (let (($x771 (= (bvand ?x614 (_ bv4294967292 32)) ?x614)))
 (let (($x226 (and $x771 $x398)))
 (let (($x541 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x614 (bvsub ?x614 (_ bv4 32))) (bvult ?x614 (bvsub ?x614 (_ bv4 32))))))
 (let (($x309 (and (and (and (and (and $x415 $x541) $x771) $x226) $x817) $x394)))
 (let (($x676 (= true $x309)))
 (let (($x215 (not $x39)))
 (let (($x806 (=> $x215 $x676)))
 (let (($x811 (= $x806 true)))
 (let (($x219 (= $x811 true)))
 (let (($x334 (= $x219 true)))
 (let (($x377 (= $x215 true)))
 (let (($x56 (= $x377 true)))
 (let (($x468 (= $x56 true)))
 (let (($x396 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x247 (= $x396 true)))
 (let (($x683 (= $x247 true)))
 (let ((?x393 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x551 (= (_ bv0 32) ?x393)))
 (let ((?x822 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x365 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x822)))
 (let (($x809 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x610 (and $x809 $x365)))
 (let (($x135 (and $x610 $x551)))
 (let (($x840 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x538 (and $x840 $x135)))
 (let (($x510 (= $x538 true)))
 (let (($x303 (= $x510 true)))
 (let (($x720 (= $x303 true)))
 (let (($x129 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x497 (=> $x129 false)))
 (let ((?x348 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x518 (bvuge ?x348 (_ bv1 32))))
 (let (($x544 (= $x129 $x518)))
 (let (($x546 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x242 (=> $x546 $x311)))
 (let (($x318 (= ?x348 (_ bv0 32))))
 (let (($x100 (= $x546 $x318)))
 (let (($x715 (and $x100 $x242)))
 (let (($x317 (and $x715 $x544)))
 (let (($x436 (and $x317 $x497)))
 (let (($x182 (= $x436 true)))
 (let (($x548 (= $x182 true)))
 (let (($x122 (= $x548 true)))
 (let (($x592 (= $x832 $x518)))
 (let (($x69 (= $x443 $x318)))
 (let (($x262 (and $x69 $x637)))
 (let (($x580 (and $x262 $x592)))
 (let (($x315 (and $x580 $x868)))
 (let (($x60 (= $x315 true)))
 (let (($x413 (= $x60 true)))
 (let (($x808 (= $x413 true)))
 (let (($x530 (and $x808 $x122)))
 (let (($x533 (and $x530 $x720)))
 (let (($x205 (and $x533 $x683)))
 (let (($x382 (and $x205 $x468)))
 (let (($x204 (and $x382 $x334)))
 (let (($x801 (and $x204 $x235)))
 (let (($x550 (and $x801 $x306)))
 (let (($x41 (and $x550 $x234)))
 (let (($x593 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x292 (and $x593 $x41)))
 (let (($x343 (bvugt ?x614 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x614 (_ bv3 32))))
 (let (($x700 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x24 (=> (bvule ?x614 (bvsub (bvadd ?x614 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x700 $x343)))))))
 (let (($x328 (=> (and $x215 (bvule ?x614 (bvsub (bvadd ?x614 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x700 $x343)))))))
 (let (($x345 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x838 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x666 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x682 (=> $x666 (or false (or false (and true (or $x838 $x345)))))))
 (let (($x714 (=> (and $x215 $x666) (or false (or false (and true (or $x838 $x345)))))))
 (let (($x99 (and $x714 $x328)))
 (let (($x403 (and $x99 $x292)))
 (let (($x447 (=> $x403 $x90)))
 (not $x447))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0 () (_ BitVec 29))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x124 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x124) (concat ?x158 (concat ?x78 ?x47)))))
 (let ((?x161 ((_ extract 28 0) ?x102)))
 (let ((?x573 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0 ?x161)))
 (let (($x555 (= (_ bv0 29) ?x573)))
 (let (($x90 (= $x555 true)))
 (let (($x554 (= (_ bv0 29) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_28_0)))
 (let (($x316 (= $x554 true)))
 (let (($x234 (= $x316 true)))
 (let ((?x333 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x508 (= (_ bv0 3) ?x333)))
 (let (($x340 (= $x508 true)))
 (let (($x306 (= $x340 true)))
 (let (($x832 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x868 (=> $x832 false)))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x475 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (= $x832 (bvuge ?x475 (_ bv1 32)))))
 (let (($x311 (= false false)))
 (let (($x443 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x637 (=> $x443 $x311)))
 (let (($x615 (= $x443 (= ?x475 (_ bv0 32)))))
 (let (($x162 (and $x615 $x637)))
 (let (($x346 (and $x162 $x191)))
 (let (($x296 (and $x346 $x868)))
 (let (($x788 (= $x296 true)))
 (let (($x707 (= $x788 true)))
 (let (($x235 (= $x707 true)))
 (let (($x394 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x284 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x500 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x284) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x284))))
 (let (($x415 (and true $x500)))
 (let (($x817 (and $x500 $x415)))
 (let ((?x614 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv1 32))) (select input.dst.llvm-mem ?x614))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv2 32))) ?x116))))
 (let (($x398 (= (bvand ?x299 (_ bv4294967288 32)) ?x299)))
 (let (($x771 (= (bvand ?x614 (_ bv4294967292 32)) ?x614)))
 (let (($x226 (and $x771 $x398)))
 (let (($x541 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x614 (bvsub ?x614 (_ bv4 32))) (bvult ?x614 (bvsub ?x614 (_ bv4 32))))))
 (let (($x309 (and (and (and (and (and $x415 $x541) $x771) $x226) $x817) $x394)))
 (let (($x676 (= true $x309)))
 (let (($x215 (not $x39)))
 (let (($x806 (=> $x215 $x676)))
 (let (($x811 (= $x806 true)))
 (let (($x219 (= $x811 true)))
 (let (($x334 (= $x219 true)))
 (let (($x377 (= $x215 true)))
 (let (($x56 (= $x377 true)))
 (let (($x468 (= $x56 true)))
 (let (($x396 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x247 (= $x396 true)))
 (let (($x683 (= $x247 true)))
 (let ((?x393 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x551 (= (_ bv0 32) ?x393)))
 (let ((?x822 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x365 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x822)))
 (let (($x809 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x610 (and $x809 $x365)))
 (let (($x135 (and $x610 $x551)))
 (let (($x840 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x538 (and $x840 $x135)))
 (let (($x510 (= $x538 true)))
 (let (($x303 (= $x510 true)))
 (let (($x720 (= $x303 true)))
 (let (($x129 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x497 (=> $x129 false)))
 (let ((?x348 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x518 (bvuge ?x348 (_ bv1 32))))
 (let (($x544 (= $x129 $x518)))
 (let (($x546 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x242 (=> $x546 $x311)))
 (let (($x318 (= ?x348 (_ bv0 32))))
 (let (($x100 (= $x546 $x318)))
 (let (($x715 (and $x100 $x242)))
 (let (($x317 (and $x715 $x544)))
 (let (($x436 (and $x317 $x497)))
 (let (($x182 (= $x436 true)))
 (let (($x548 (= $x182 true)))
 (let (($x122 (= $x548 true)))
 (let (($x592 (= $x832 $x518)))
 (let (($x69 (= $x443 $x318)))
 (let (($x262 (and $x69 $x637)))
 (let (($x580 (and $x262 $x592)))
 (let (($x315 (and $x580 $x868)))
 (let (($x60 (= $x315 true)))
 (let (($x413 (= $x60 true)))
 (let (($x808 (= $x413 true)))
 (let (($x530 (and $x808 $x122)))
 (let (($x533 (and $x530 $x720)))
 (let (($x205 (and $x533 $x683)))
 (let (($x382 (and $x205 $x468)))
 (let (($x204 (and $x382 $x334)))
 (let (($x801 (and $x204 $x235)))
 (let (($x550 (and $x801 $x306)))
 (let (($x41 (and $x550 $x234)))
 (let (($x593 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x292 (and $x593 $x41)))
 (let (($x343 (bvugt ?x614 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x614 (_ bv3 32))))
 (let (($x700 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x24 (=> (bvule ?x614 (bvsub (bvadd ?x614 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x700 $x343)))))))
 (let (($x328 (=> (and $x215 (bvule ?x614 (bvsub (bvadd ?x614 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x700 $x343)))))))
 (let (($x345 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x838 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x666 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x682 (=> $x666 (or false (or false (and true (or $x838 $x345)))))))
 (let (($x714 (=> (and $x215 $x666) (or false (or false (and true (or $x838 $x345)))))))
 (let (($x99 (and $x714 $x328)))
 (let (($x403 (and $x99 $x292)))
 (let (($x447 (=> $x403 $x90)))
 (not $x447))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 102
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0 () (_ BitVec 28))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x448 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x653 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x57 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x575 (concat (select input.dst.llvm-mem ?x57) (concat ?x653 (concat ?x238 ?x448)))))
 (let ((?x432 ((_ extract 27 0) ?x575)))
 (let ((?x236 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0 ?x432)))
 (let (($x451 (= (_ bv0 28) ?x236)))
 (let (($x23 (= $x451 true)))
 (let (($x853 (= (_ bv0 28) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0)))
 (let (($x319 (= $x853 true)))
 (let (($x76 (= $x319 true)))
 (let ((?x507 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x725 (= (_ bv0 3) ?x507)))
 (let (($x535 (= $x725 true)))
 (let (($x539 (= $x535 true)))
 (let (($x104 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x299 (=> $x104 true)))
 (let (($x464 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x32 (ite $x464 (_ bv0 32) (_ bv1 32))))
 (let (($x297 (= $x104 (bvuge ?x32 (_ bv1 32)))))
 (let (($x859 (= false false)))
 (let (($x623 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x771 (=> $x623 $x859)))
 (let (($x427 (= $x623 (= ?x32 (_ bv0 32)))))
 (let (($x29 (and $x427 $x771)))
 (let (($x172 (and $x29 $x297)))
 (let (($x252 (and $x172 $x299)))
 (let (($x168 (= $x252 true)))
 (let (($x97 (= $x168 true)))
 (let (($x785 (= $x97 true)))
 (let (($x821 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x47 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x161 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x47) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x47))))
 (let (($x573 (and true $x161)))
 (let (($x804 (and $x161 $x573)))
 (let ((?x666 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x612 (concat (select input.dst.llvm-mem (bvadd ?x666 (_ bv1 32))) (select input.dst.llvm-mem ?x666))))
 (let ((?x729 (concat (select input.dst.llvm-mem (bvadd ?x666 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x666 (_ bv2 32))) ?x612))))
 (let (($x248 (= (bvand ?x729 (_ bv4294967288 32)) ?x729)))
 (let (($x193 (= (bvand ?x666 (_ bv4294967292 32)) ?x666)))
 (let (($x429 (and $x193 $x248)))
 (let (($x196 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x666 (bvsub ?x666 (_ bv4 32))) (bvult ?x666 (bvsub ?x666 (_ bv4 32))))))
 (let (($x273 (and (and (and (and (and $x573 $x196) $x193) $x429) $x804) $x821)))
 (let (($x170 (= true $x273)))
 (let (($x39 (not $x464)))
 (let (($x344 (=> $x39 $x170)))
 (let (($x244 (= $x344 true)))
 (let (($x662 (= $x244 true)))
 (let (($x140 (= $x662 true)))
 (let (($x489 (= $x39 true)))
 (let (($x158 (= $x489 true)))
 (let (($x494 (= $x158 true)))
 (let (($x41 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x292 (= $x41 true)))
 (let (($x403 (= $x292 true)))
 (let ((?x508 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x340 (= (_ bv0 32) ?x508)))
 (let ((?x801 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x801)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x235 $x207)))
 (let (($x306 (and $x333 $x340)))
 (let (($x707 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x550 (and $x707 $x306)))
 (let (($x73 (= $x550 true)))
 (let (($x446 (= $x73 true)))
 (let (($x554 (= $x446 true)))
 (let (($x204 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x615 (=> $x204 true)))
 (let ((?x541 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x764 (bvuge ?x541 (_ bv1 32))))
 (let (($x475 (= $x204 $x764)))
 (let (($x309 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x806 (=> $x309 $x859)))
 (let (($x283 (= ?x541 (_ bv0 32))))
 (let (($x676 (= $x309 $x283)))
 (let (($x811 (and $x676 $x806)))
 (let (($x854 (and $x811 $x475)))
 (let (($x162 (and $x854 $x615)))
 (let (($x848 (= $x162 true)))
 (let (($x191 (= $x848 true)))
 (let (($x346 (= $x191 true)))
 (let (($x116 (= $x104 $x764)))
 (let (($x417 (= $x623 $x283)))
 (let (($x176 (and $x417 $x771)))
 (let (($x425 (and $x176 $x116)))
 (let (($x457 (and $x425 $x299)))
 (let (($x588 (= $x457 true)))
 (let (($x398 (= $x588 true)))
 (let (($x226 (= $x398 true)))
 (let (($x296 (and $x226 $x346)))
 (let (($x316 (and $x296 $x554)))
 (let (($x349 (and $x316 $x403)))
 (let (($x78 (and $x349 $x494)))
 (let (($x867 (and $x78 $x140)))
 (let (($x843 (and $x867 $x785)))
 (let (($x363 (and $x843 $x539)))
 (let (($x435 (and $x363 $x76)))
 (let (($x443 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x523 (and $x443 $x435)))
 (let (($x278 (bvugt ?x666 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x666 (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x593 (=> (bvule ?x666 (bvsub (bvadd ?x666 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x278)))))))
 (let (($x88 (=> (and $x39 (bvule ?x666 (bvsub (bvadd ?x666 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x95 $x278)))))))
 (let (($x259 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x638 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x268 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x17 (=> $x268 (or false (or false (and true (or $x638 $x259)))))))
 (let (($x583 (=> (and $x39 $x268) (or false (or false (and true (or $x638 $x259)))))))
 (let (($x37 (and $x583 $x88)))
 (let (($x260 (and $x37 $x523)))
 (let (($x684 (=> $x260 $x23)))
 (not $x684))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0 () (_ BitVec 28))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x448 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x653 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x57 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x575 (concat (select input.dst.llvm-mem ?x57) (concat ?x653 (concat ?x238 ?x448)))))
 (let ((?x432 ((_ extract 27 0) ?x575)))
 (let ((?x236 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0 ?x432)))
 (let (($x451 (= (_ bv0 28) ?x236)))
 (let (($x23 (= $x451 true)))
 (let (($x853 (= (_ bv0 28) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0)))
 (let (($x319 (= $x853 true)))
 (let (($x76 (= $x319 true)))
 (let ((?x507 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x725 (= (_ bv0 3) ?x507)))
 (let (($x535 (= $x725 true)))
 (let (($x539 (= $x535 true)))
 (let (($x104 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x299 (=> $x104 true)))
 (let (($x464 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x32 (ite $x464 (_ bv0 32) (_ bv1 32))))
 (let (($x297 (= $x104 (bvuge ?x32 (_ bv1 32)))))
 (let (($x859 (= false false)))
 (let (($x623 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x771 (=> $x623 $x859)))
 (let (($x427 (= $x623 (= ?x32 (_ bv0 32)))))
 (let (($x29 (and $x427 $x771)))
 (let (($x172 (and $x29 $x297)))
 (let (($x252 (and $x172 $x299)))
 (let (($x168 (= $x252 true)))
 (let (($x97 (= $x168 true)))
 (let (($x785 (= $x97 true)))
 (let (($x821 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x47 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x161 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x47) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x47))))
 (let (($x573 (and true $x161)))
 (let (($x804 (and $x161 $x573)))
 (let ((?x666 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x612 (concat (select input.dst.llvm-mem (bvadd ?x666 (_ bv1 32))) (select input.dst.llvm-mem ?x666))))
 (let ((?x729 (concat (select input.dst.llvm-mem (bvadd ?x666 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x666 (_ bv2 32))) ?x612))))
 (let (($x248 (= (bvand ?x729 (_ bv4294967288 32)) ?x729)))
 (let (($x193 (= (bvand ?x666 (_ bv4294967292 32)) ?x666)))
 (let (($x429 (and $x193 $x248)))
 (let (($x196 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x666 (bvsub ?x666 (_ bv4 32))) (bvult ?x666 (bvsub ?x666 (_ bv4 32))))))
 (let (($x273 (and (and (and (and (and $x573 $x196) $x193) $x429) $x804) $x821)))
 (let (($x170 (= true $x273)))
 (let (($x39 (not $x464)))
 (let (($x344 (=> $x39 $x170)))
 (let (($x244 (= $x344 true)))
 (let (($x662 (= $x244 true)))
 (let (($x140 (= $x662 true)))
 (let (($x489 (= $x39 true)))
 (let (($x158 (= $x489 true)))
 (let (($x494 (= $x158 true)))
 (let (($x41 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x292 (= $x41 true)))
 (let (($x403 (= $x292 true)))
 (let ((?x508 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x340 (= (_ bv0 32) ?x508)))
 (let ((?x801 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x801)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x235 $x207)))
 (let (($x306 (and $x333 $x340)))
 (let (($x707 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x550 (and $x707 $x306)))
 (let (($x73 (= $x550 true)))
 (let (($x446 (= $x73 true)))
 (let (($x554 (= $x446 true)))
 (let (($x204 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x615 (=> $x204 true)))
 (let ((?x541 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x764 (bvuge ?x541 (_ bv1 32))))
 (let (($x475 (= $x204 $x764)))
 (let (($x309 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x806 (=> $x309 $x859)))
 (let (($x283 (= ?x541 (_ bv0 32))))
 (let (($x676 (= $x309 $x283)))
 (let (($x811 (and $x676 $x806)))
 (let (($x854 (and $x811 $x475)))
 (let (($x162 (and $x854 $x615)))
 (let (($x848 (= $x162 true)))
 (let (($x191 (= $x848 true)))
 (let (($x346 (= $x191 true)))
 (let (($x116 (= $x104 $x764)))
 (let (($x417 (= $x623 $x283)))
 (let (($x176 (and $x417 $x771)))
 (let (($x425 (and $x176 $x116)))
 (let (($x457 (and $x425 $x299)))
 (let (($x588 (= $x457 true)))
 (let (($x398 (= $x588 true)))
 (let (($x226 (= $x398 true)))
 (let (($x296 (and $x226 $x346)))
 (let (($x316 (and $x296 $x554)))
 (let (($x349 (and $x316 $x403)))
 (let (($x78 (and $x349 $x494)))
 (let (($x867 (and $x78 $x140)))
 (let (($x843 (and $x867 $x785)))
 (let (($x363 (and $x843 $x539)))
 (let (($x435 (and $x363 $x76)))
 (let (($x443 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x523 (and $x443 $x435)))
 (let (($x278 (bvugt ?x666 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x666 (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x593 (=> (bvule ?x666 (bvsub (bvadd ?x666 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x278)))))))
 (let (($x88 (=> (and $x39 (bvule ?x666 (bvsub (bvadd ?x666 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x95 $x278)))))))
 (let (($x259 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x638 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x268 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x17 (=> $x268 (or false (or false (and true (or $x638 $x259)))))))
 (let (($x583 (=> (and $x39 $x268) (or false (or false (and true (or $x638 $x259)))))))
 (let (($x37 (and $x583 $x88)))
 (let (($x260 (and $x37 $x523)))
 (let (($x684 (=> $x260 $x23)))
 (not $x684))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0 #b0000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b00001000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ffb #x0f))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0 () (_ BitVec 28)
    #x0000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv180016 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv180016 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0 () (_ BitVec 28) (_ bv0 28))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv286024 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv286024 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv286027 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 103
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0 () (_ BitVec 28))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x763 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x675 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x9 (concat (select input.dst.llvm-mem ?x675) (concat ?x302 (concat ?x291 ?x763)))))
 (let ((?x380 ((_ extract 27 0) ?x9)))
 (let ((?x392 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0 ?x380)))
 (let (($x43 (= (_ bv0 28) ?x392)))
 (let (($x189 (= $x43 true)))
 (let (($x529 (= (_ bv0 28) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0)))
 (let (($x782 (= $x529 true)))
 (let (($x828 (= $x782 true)))
 (let ((?x803 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x522 (= (_ bv0 3) ?x803)))
 (let (($x480 (= $x522 true)))
 (let (($x286 (= $x480 true)))
 (let (($x410 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x729 (=> $x410 false)))
 (let (($x464 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x72 (ite $x464 (_ bv0 32) (_ bv1 32))))
 (let (($x312 (= $x410 (bvuge ?x72 (_ bv1 32)))))
 (let (($x111 (= false false)))
 (let (($x447 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x193 (=> $x447 $x111)))
 (let (($x686 (= $x447 (= ?x72 (_ bv0 32)))))
 (let (($x120 (and $x686 $x193)))
 (let (($x347 (and $x120 $x312)))
 (let (($x846 (and $x347 $x729)))
 (let (($x461 (= $x846 true)))
 (let (($x190 (= $x461 true)))
 (let (($x59 (= $x190 true)))
 (let (($x413 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x448 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x432 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x448) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x448))))
 (let (($x236 (and true $x432)))
 (let (($x546 (and $x432 $x236)))
 (let ((?x268 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x832 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem ?x268))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv2 32))) ?x832))))
 (let (($x129 (= (bvand ?x318 (_ bv4294967288 32)) ?x318)))
 (let (($x341 (= (bvand ?x268 (_ bv4294967292 32)) ?x268)))
 (let (($x187 (and $x341 $x129)))
 (let (($x378 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x268 (bvsub ?x268 (_ bv4 32))) (bvult ?x268 (bvsub ?x268 (_ bv4 32))))))
 (let (($x808 (and (and (and (and (and $x236 $x378) $x341) $x187) $x546) $x413)))
 (let (($x100 (= true $x808)))
 (let (($x39 (not $x464)))
 (let (($x530 (=> $x39 $x100)))
 (let (($x169 (= $x530 true)))
 (let (($x182 (= $x169 true)))
 (let (($x548 (= $x182 true)))
 (let (($x201 (= $x39 true)))
 (let (($x653 (= $x201 true)))
 (let (($x313 (= $x653 true)))
 (let (($x435 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x523 (= $x435 true)))
 (let (($x260 (= $x523 true)))
 (let ((?x725 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x535 (= (_ bv0 32) ?x725)))
 (let ((?x843 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x843)))
 (let (($x785 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x507 (and $x785 $x281)))
 (let (($x539 (and $x507 $x535)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x363 (and $x97 $x539)))
 (let (($x261 (= $x363 true)))
 (let (($x606 (= $x261 true)))
 (let (($x853 (= $x606 true)))
 (let (($x867 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x427 (=> $x867 false)))
 (let ((?x196 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x460 (bvuge ?x196 (_ bv1 32))))
 (let (($x32 (= $x867 $x460)))
 (let (($x273 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x344 (=> $x273 $x111)))
 (let (($x338 (= ?x196 (_ bv0 32))))
 (let (($x170 (= $x273 $x338)))
 (let (($x244 (and $x170 $x344)))
 (let (($x305 (and $x244 $x32)))
 (let (($x29 (and $x305 $x427)))
 (let (($x364 (= $x29 true)))
 (let (($x297 (= $x364 true)))
 (let (($x172 (= $x297 true)))
 (let (($x612 (= $x410 $x460)))
 (let (($x197 (= $x447 $x338)))
 (let (($x404 (and $x197 $x193)))
 (let (($x216 (and $x404 $x612)))
 (let (($x506 (and $x216 $x729)))
 (let (($x390 (= $x506 true)))
 (let (($x248 (= $x390 true)))
 (let (($x429 (= $x248 true)))
 (let (($x252 (and $x429 $x172)))
 (let (($x319 (and $x252 $x853)))
 (let (($x783 (and $x319 $x260)))
 (let (($x238 (and $x783 $x313)))
 (let (($x317 (and $x238 $x548)))
 (let (($x458 (and $x317 $x59)))
 (let (($x391 (and $x458 $x286)))
 (let (($x185 (and $x391 $x828)))
 (let (($x623 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x563 (and $x623 $x185)))
 (let (($x328 (bvugt ?x268 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x268 (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x443 (=> (bvule ?x268 (bvsub (bvadd ?x268 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x328)))))))
 (let (($x681 (=> (and $x39 (bvule ?x268 (bvsub (bvadd ?x268 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x24 $x328)))))))
 (let (($x714 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x682 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x675)))
 (let (($x700 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x343 (=> $x700 (or false (or false (and true (or $x682 $x714)))))))
 (let (($x124 (=> (and $x39 $x700) (or false (or false (and true (or $x682 $x714)))))))
 (let (($x186 (and $x124 $x681)))
 (let (($x657 (and $x186 $x563)))
 (let (($x520 (=> $x657 $x189)))
 (not $x520))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0 () (_ BitVec 28))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x763 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x675 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x9 (concat (select input.dst.llvm-mem ?x675) (concat ?x302 (concat ?x291 ?x763)))))
 (let ((?x380 ((_ extract 27 0) ?x9)))
 (let ((?x392 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0 ?x380)))
 (let (($x43 (= (_ bv0 28) ?x392)))
 (let (($x189 (= $x43 true)))
 (let (($x529 (= (_ bv0 28) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_27_0)))
 (let (($x782 (= $x529 true)))
 (let (($x828 (= $x782 true)))
 (let ((?x803 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x522 (= (_ bv0 3) ?x803)))
 (let (($x480 (= $x522 true)))
 (let (($x286 (= $x480 true)))
 (let (($x410 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x729 (=> $x410 false)))
 (let (($x464 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x72 (ite $x464 (_ bv0 32) (_ bv1 32))))
 (let (($x312 (= $x410 (bvuge ?x72 (_ bv1 32)))))
 (let (($x111 (= false false)))
 (let (($x447 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x193 (=> $x447 $x111)))
 (let (($x686 (= $x447 (= ?x72 (_ bv0 32)))))
 (let (($x120 (and $x686 $x193)))
 (let (($x347 (and $x120 $x312)))
 (let (($x846 (and $x347 $x729)))
 (let (($x461 (= $x846 true)))
 (let (($x190 (= $x461 true)))
 (let (($x59 (= $x190 true)))
 (let (($x413 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x448 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x432 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x448) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x448))))
 (let (($x236 (and true $x432)))
 (let (($x546 (and $x432 $x236)))
 (let ((?x268 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x832 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem ?x268))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv2 32))) ?x832))))
 (let (($x129 (= (bvand ?x318 (_ bv4294967288 32)) ?x318)))
 (let (($x341 (= (bvand ?x268 (_ bv4294967292 32)) ?x268)))
 (let (($x187 (and $x341 $x129)))
 (let (($x378 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x268 (bvsub ?x268 (_ bv4 32))) (bvult ?x268 (bvsub ?x268 (_ bv4 32))))))
 (let (($x808 (and (and (and (and (and $x236 $x378) $x341) $x187) $x546) $x413)))
 (let (($x100 (= true $x808)))
 (let (($x39 (not $x464)))
 (let (($x530 (=> $x39 $x100)))
 (let (($x169 (= $x530 true)))
 (let (($x182 (= $x169 true)))
 (let (($x548 (= $x182 true)))
 (let (($x201 (= $x39 true)))
 (let (($x653 (= $x201 true)))
 (let (($x313 (= $x653 true)))
 (let (($x435 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x523 (= $x435 true)))
 (let (($x260 (= $x523 true)))
 (let ((?x725 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x535 (= (_ bv0 32) ?x725)))
 (let ((?x843 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x843)))
 (let (($x785 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x507 (and $x785 $x281)))
 (let (($x539 (and $x507 $x535)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x363 (and $x97 $x539)))
 (let (($x261 (= $x363 true)))
 (let (($x606 (= $x261 true)))
 (let (($x853 (= $x606 true)))
 (let (($x867 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x427 (=> $x867 false)))
 (let ((?x196 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x460 (bvuge ?x196 (_ bv1 32))))
 (let (($x32 (= $x867 $x460)))
 (let (($x273 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x344 (=> $x273 $x111)))
 (let (($x338 (= ?x196 (_ bv0 32))))
 (let (($x170 (= $x273 $x338)))
 (let (($x244 (and $x170 $x344)))
 (let (($x305 (and $x244 $x32)))
 (let (($x29 (and $x305 $x427)))
 (let (($x364 (= $x29 true)))
 (let (($x297 (= $x364 true)))
 (let (($x172 (= $x297 true)))
 (let (($x612 (= $x410 $x460)))
 (let (($x197 (= $x447 $x338)))
 (let (($x404 (and $x197 $x193)))
 (let (($x216 (and $x404 $x612)))
 (let (($x506 (and $x216 $x729)))
 (let (($x390 (= $x506 true)))
 (let (($x248 (= $x390 true)))
 (let (($x429 (= $x248 true)))
 (let (($x252 (and $x429 $x172)))
 (let (($x319 (and $x252 $x853)))
 (let (($x783 (and $x319 $x260)))
 (let (($x238 (and $x783 $x313)))
 (let (($x317 (and $x238 $x548)))
 (let (($x458 (and $x317 $x59)))
 (let (($x391 (and $x458 $x286)))
 (let (($x185 (and $x391 $x828)))
 (let (($x623 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x563 (and $x623 $x185)))
 (let (($x328 (bvugt ?x268 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x268 (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x443 (=> (bvule ?x268 (bvsub (bvadd ?x268 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x328)))))))
 (let (($x681 (=> (and $x39 (bvule ?x268 (bvsub (bvadd ?x268 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x24 $x328)))))))
 (let (($x714 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x682 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x675)))
 (let (($x700 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x343 (=> $x700 (or false (or false (and true (or $x682 $x714)))))))
 (let (($x124 (=> (and $x39 $x700) (or false (or false (and true (or $x682 $x714)))))))
 (let (($x186 (and $x124 $x681)))
 (let (($x657 (and $x186 $x563)))
 (let (($x520 (=> $x657 $x189)))
 (not $x520))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 104
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0 () (_ BitVec 27))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x396 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x809 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x614 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x610 (concat (select input.dst.llvm-mem ?x614) (concat ?x155 (concat ?x809 ?x396)))))
 (let ((?x135 ((_ extract 26 0) ?x610)))
 (let ((?x303 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0 ?x135)))
 (let (($x500 (= (_ bv0 27) ?x303)))
 (let (($x415 (= $x500 true)))
 (let (($x382 (= (_ bv0 27) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0)))
 (let (($x533 (= $x382 true)))
 (let (($x393 (= $x533 true)))
 (let ((?x538 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x510 (= (_ bv0 3) ?x538)))
 (let (($x397 (= $x510 true)))
 (let (($x720 (= $x397 true)))
 (let (($x637 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x318 (=> $x637 true)))
 (let (($x80 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x234 (ite $x80 (_ bv0 32) (_ bv1 32))))
 (let (($x315 (= $x637 (bvuge ?x234 (_ bv1 32)))))
 (let (($x482 (= false false)))
 (let (($x684 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x341 (=> $x684 $x482)))
 (let (($x444 (= $x684 (= ?x234 (_ bv0 32)))))
 (let (($x102 (and $x444 $x341)))
 (let (($x213 (and $x102 $x315)))
 (let (($x210 (and $x213 $x318)))
 (let (($x723 (= $x210 true)))
 (let (($x497 (= $x723 true)))
 (let (($x544 (= $x497 true)))
 (let (($x398 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x763 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x380 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763))))
 (let (($x392 (and true $x380)))
 (let (($x309 (and $x380 $x392)))
 (let ((?x700 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x700 (_ bv1 32))) (select input.dst.llvm-mem ?x700))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x700 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x700 (_ bv2 32))) ?x104))))
 (let (($x204 (= (bvand ?x283 (_ bv4294967288 32)) ?x283)))
 (let (($x212 (= (bvand ?x700 (_ bv4294967292 32)) ?x700)))
 (let (($x394 (and $x212 $x204)))
 (let (($x209 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x700 (bvsub ?x700 (_ bv4 32))) (bvult ?x700 (bvsub ?x700 (_ bv4 32))))))
 (let (($x226 (and (and (and (and (and $x392 $x209) $x212) $x394) $x309) $x398)))
 (let (($x676 (= true $x226)))
 (let (($x464 (not $x80)))
 (let (($x296 (=> $x464 $x676)))
 (let (($x788 (= $x296 true)))
 (let (($x848 (= $x788 true)))
 (let (($x191 (= $x848 true)))
 (let (($x352 (= $x464 true)))
 (let (($x302 (= $x352 true)))
 (let (($x567 (= $x302 true)))
 (let (($x185 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x563 (= $x185 true)))
 (let (($x657 (= $x563 true)))
 (let ((?x522 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x480 (= (_ bv0 32) ?x522)))
 (let ((?x458 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x513 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x458)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x803 (and $x59 $x513)))
 (let (($x286 (and $x803 $x480)))
 (let (($x190 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x391 (and $x190 $x286)))
 (let (($x642 (= $x391 true)))
 (let (($x496 (= $x642 true)))
 (let (($x529 (= $x496 true)))
 (let (($x317 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x686 (=> $x317 true)))
 (let ((?x378 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x242 (bvuge ?x378 (_ bv1 32))))
 (let (($x72 (= $x317 $x242)))
 (let (($x808 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x530 (=> $x808 $x482)))
 (let (($x592 (= ?x378 (_ bv0 32))))
 (let (($x100 (= $x808 $x592)))
 (let (($x169 (and $x100 $x530)))
 (let (($x581 (and $x169 $x72)))
 (let (($x120 (and $x581 $x686)))
 (let (($x334 (= $x120 true)))
 (let (($x312 (= $x334 true)))
 (let (($x347 (= $x312 true)))
 (let (($x832 (= $x637 $x242)))
 (let (($x817 (= $x684 $x592)))
 (let (($x580 (and $x817 $x341)))
 (let (($x577 (and $x580 $x832)))
 (let (($x465 (and $x577 $x318)))
 (let (($x715 (= $x465 true)))
 (let (($x129 (= $x715 true)))
 (let (($x187 (= $x129 true)))
 (let (($x846 (and $x187 $x347)))
 (let (($x782 (and $x846 $x529)))
 (let (($x844 (and $x782 $x657)))
 (let (($x291 (and $x844 $x567)))
 (let (($x854 (and $x291 $x191)))
 (let (($x436 (and $x854 $x544)))
 (let (($x247 (and $x436 $x720)))
 (let (($x284 (and $x247 $x393)))
 (let (($x447 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x56 (and $x447 $x284)))
 (let (($x88 (bvugt ?x700 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x700 (_ bv3 32))))
 (let (($x593 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x623 (=> (bvule ?x700 (bvsub (bvadd ?x700 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x593 $x88)))))))
 (let (($x154 (=> (and $x464 (bvule ?x700 (bvsub (bvadd ?x700 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x593 $x88)))))))
 (let (($x583 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x614)))
 (let (($x95 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x278 (=> $x95 (or false (or false (and true (or $x17 $x583)))))))
 (let (($x57 (=> (and $x464 $x95) (or false (or false (and true (or $x17 $x583)))))))
 (let (($x7 (and $x57 $x154)))
 (let (($x365 (and $x7 $x56)))
 (let (($x225 (=> $x365 $x415)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0 () (_ BitVec 27))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x396 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x809 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x614 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x610 (concat (select input.dst.llvm-mem ?x614) (concat ?x155 (concat ?x809 ?x396)))))
 (let ((?x135 ((_ extract 26 0) ?x610)))
 (let ((?x303 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0 ?x135)))
 (let (($x500 (= (_ bv0 27) ?x303)))
 (let (($x415 (= $x500 true)))
 (let (($x382 (= (_ bv0 27) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0)))
 (let (($x533 (= $x382 true)))
 (let (($x393 (= $x533 true)))
 (let ((?x538 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x510 (= (_ bv0 3) ?x538)))
 (let (($x397 (= $x510 true)))
 (let (($x720 (= $x397 true)))
 (let (($x637 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x318 (=> $x637 true)))
 (let (($x80 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x234 (ite $x80 (_ bv0 32) (_ bv1 32))))
 (let (($x315 (= $x637 (bvuge ?x234 (_ bv1 32)))))
 (let (($x482 (= false false)))
 (let (($x684 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x341 (=> $x684 $x482)))
 (let (($x444 (= $x684 (= ?x234 (_ bv0 32)))))
 (let (($x102 (and $x444 $x341)))
 (let (($x213 (and $x102 $x315)))
 (let (($x210 (and $x213 $x318)))
 (let (($x723 (= $x210 true)))
 (let (($x497 (= $x723 true)))
 (let (($x544 (= $x497 true)))
 (let (($x398 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x763 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x380 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763))))
 (let (($x392 (and true $x380)))
 (let (($x309 (and $x380 $x392)))
 (let ((?x700 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x700 (_ bv1 32))) (select input.dst.llvm-mem ?x700))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x700 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x700 (_ bv2 32))) ?x104))))
 (let (($x204 (= (bvand ?x283 (_ bv4294967288 32)) ?x283)))
 (let (($x212 (= (bvand ?x700 (_ bv4294967292 32)) ?x700)))
 (let (($x394 (and $x212 $x204)))
 (let (($x209 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x700 (bvsub ?x700 (_ bv4 32))) (bvult ?x700 (bvsub ?x700 (_ bv4 32))))))
 (let (($x226 (and (and (and (and (and $x392 $x209) $x212) $x394) $x309) $x398)))
 (let (($x676 (= true $x226)))
 (let (($x464 (not $x80)))
 (let (($x296 (=> $x464 $x676)))
 (let (($x788 (= $x296 true)))
 (let (($x848 (= $x788 true)))
 (let (($x191 (= $x848 true)))
 (let (($x352 (= $x464 true)))
 (let (($x302 (= $x352 true)))
 (let (($x567 (= $x302 true)))
 (let (($x185 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x563 (= $x185 true)))
 (let (($x657 (= $x563 true)))
 (let ((?x522 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x480 (= (_ bv0 32) ?x522)))
 (let ((?x458 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x513 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x458)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x803 (and $x59 $x513)))
 (let (($x286 (and $x803 $x480)))
 (let (($x190 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x391 (and $x190 $x286)))
 (let (($x642 (= $x391 true)))
 (let (($x496 (= $x642 true)))
 (let (($x529 (= $x496 true)))
 (let (($x317 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x686 (=> $x317 true)))
 (let ((?x378 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x242 (bvuge ?x378 (_ bv1 32))))
 (let (($x72 (= $x317 $x242)))
 (let (($x808 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x530 (=> $x808 $x482)))
 (let (($x592 (= ?x378 (_ bv0 32))))
 (let (($x100 (= $x808 $x592)))
 (let (($x169 (and $x100 $x530)))
 (let (($x581 (and $x169 $x72)))
 (let (($x120 (and $x581 $x686)))
 (let (($x334 (= $x120 true)))
 (let (($x312 (= $x334 true)))
 (let (($x347 (= $x312 true)))
 (let (($x832 (= $x637 $x242)))
 (let (($x817 (= $x684 $x592)))
 (let (($x580 (and $x817 $x341)))
 (let (($x577 (and $x580 $x832)))
 (let (($x465 (and $x577 $x318)))
 (let (($x715 (= $x465 true)))
 (let (($x129 (= $x715 true)))
 (let (($x187 (= $x129 true)))
 (let (($x846 (and $x187 $x347)))
 (let (($x782 (and $x846 $x529)))
 (let (($x844 (and $x782 $x657)))
 (let (($x291 (and $x844 $x567)))
 (let (($x854 (and $x291 $x191)))
 (let (($x436 (and $x854 $x544)))
 (let (($x247 (and $x436 $x720)))
 (let (($x284 (and $x247 $x393)))
 (let (($x447 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x56 (and $x447 $x284)))
 (let (($x88 (bvugt ?x700 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x700 (_ bv3 32))))
 (let (($x593 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x623 (=> (bvule ?x700 (bvsub (bvadd ?x700 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x593 $x88)))))))
 (let (($x154 (=> (and $x464 (bvule ?x700 (bvsub (bvadd ?x700 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x593 $x88)))))))
 (let (($x583 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x614)))
 (let (($x95 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x278 (=> $x95 (or false (or false (and true (or $x17 $x583)))))))
 (let (($x57 (=> (and $x464 $x95) (or false (or false (and true (or $x17 $x583)))))))
 (let (($x7 (and $x57 $x154)))
 (let (($x365 (and $x7 $x56)))
 (let (($x225 (=> $x365 $x415)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0 #b000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b00000100)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ffb #x07))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0 () (_ BitVec 27)
    #b000000000000000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv245456 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv245456 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0 () (_ BitVec 27) (_ bv0 27))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv310536 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv310536 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv310539 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 105
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0 () (_ BitVec 27))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x666 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x333 (concat (select input.dst.llvm-mem ?x666) (concat ?x34 (concat ?x235 ?x41)))))
 (let ((?x306 ((_ extract 26 0) ?x333)))
 (let ((?x446 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0 ?x306)))
 (let (($x161 (= (_ bv0 27) ?x446)))
 (let (($x573 (= $x161 true)))
 (let (($x78 (= (_ bv0 27) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0)))
 (let (($x316 (= $x78 true)))
 (let (($x508 (= $x316 true)))
 (let ((?x550 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x73 (= (_ bv0 3) ?x550)))
 (let (($x488 (= $x73 true)))
 (let (($x554 (= $x488 true)))
 (let (($x771 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x283 (=> $x771 false)))
 (let (($x80 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x76 (ite $x80 (_ bv0 32) (_ bv1 32))))
 (let (($x457 (= $x771 (bvuge ?x76 (_ bv1 32)))))
 (let (($x69 (= false false)))
 (let (($x520 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x212 (=> $x520 $x69)))
 (let (($x60 (= $x520 (= ?x76 (_ bv0 32)))))
 (let (($x575 (and $x60 $x212)))
 (let (($x693 (and $x575 $x457)))
 (let (($x369 (and $x693 $x283)))
 (let (($x311 (= $x369 true)))
 (let (($x615 (= $x311 true)))
 (let (($x475 (= $x615 true)))
 (let (($x248 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x396 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x135 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x396) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x396))))
 (let (($x303 (and true $x135)))
 (let (($x273 (and $x135 $x303)))
 (let ((?x95 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x410))))
 (let (($x867 (= (bvand ?x338 (_ bv4294967288 32)) ?x338)))
 (let (($x409 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x821 (and $x409 $x867)))
 (let (($x518 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv4 32))) (bvult ?x95 (bvsub ?x95 (_ bv4 32))))))
 (let (($x429 (and (and (and (and (and $x303 $x518) $x409) $x821) $x273) $x248)))
 (let (($x170 (= true $x429)))
 (let (($x464 (not $x80)))
 (let (($x252 (=> $x464 $x170)))
 (let (($x168 (= $x252 true)))
 (let (($x364 (= $x168 true)))
 (let (($x297 (= $x364 true)))
 (let (($x822 (= $x464 true)))
 (let (($x155 (= $x822 true)))
 (let (($x840 (= $x155 true)))
 (let (($x284 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x56 (= $x284 true)))
 (let (($x365 (= $x56 true)))
 (let ((?x510 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x397 (= (_ bv0 32) ?x510)))
 (let ((?x436 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x683 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x436)))
 (let (($x544 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x538 (and $x544 $x683)))
 (let (($x720 (and $x538 $x397)))
 (let (($x497 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (and $x497 $x720)))
 (let (($x377 (= $x247 true)))
 (let (($x205 (= $x377 true)))
 (let (($x382 (= $x205 true)))
 (let (($x854 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x444 (=> $x854 false)))
 (let ((?x209 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x806 (bvuge ?x209 (_ bv1 32))))
 (let (($x234 (= $x854 $x806)))
 (let (($x226 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x296 (=> $x226 $x69)))
 (let (($x116 (= ?x209 (_ bv0 32))))
 (let (($x676 (= $x226 $x116)))
 (let (($x788 (and $x676 $x296)))
 (let (($x849 (and $x788 $x234)))
 (let (($x102 (and $x849 $x444)))
 (let (($x140 (= $x102 true)))
 (let (($x315 (= $x140 true)))
 (let (($x213 (= $x315 true)))
 (let (($x104 (= $x771 $x806)))
 (let (($x804 (= $x520 $x116)))
 (let (($x425 (and $x804 $x212)))
 (let (($x171 (and $x425 $x104)))
 (let (($x512 (and $x171 $x283)))
 (let (($x811 (= $x512 true)))
 (let (($x204 (= $x811 true)))
 (let (($x394 (= $x204 true)))
 (let (($x210 (and $x394 $x213)))
 (let (($x533 (and $x210 $x382)))
 (let (($x551 (and $x533 $x365)))
 (let (($x809 (and $x551 $x840)))
 (let (($x305 (and $x809 $x297)))
 (let (($x162 (and $x305 $x475)))
 (let (($x292 (and $x162 $x554)))
 (let (($x47 (and $x292 $x508)))
 (let (($x684 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x158 (and $x684 $x47)))
 (let (($x681 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x95 (_ bv3 32))))
 (let (($x443 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x447 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x443 $x681)))))))
 (let (($x192 (=> (and $x464 (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x443 $x681)))))))
 (let (($x124 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x343 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x666)))
 (let (($x24 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x328 (=> $x24 (or false (or false (and true (or $x343 $x124)))))))
 (let (($x675 (=> (and $x464 $x24) (or false (or false (and true (or $x343 $x124)))))))
 (let (($x99 (and $x675 $x192)))
 (let (($x207 (and $x99 $x158)))
 (let (($x90 (=> $x207 $x573)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0 () (_ BitVec 27))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x666 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x333 (concat (select input.dst.llvm-mem ?x666) (concat ?x34 (concat ?x235 ?x41)))))
 (let ((?x306 ((_ extract 26 0) ?x333)))
 (let ((?x446 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0 ?x306)))
 (let (($x161 (= (_ bv0 27) ?x446)))
 (let (($x573 (= $x161 true)))
 (let (($x78 (= (_ bv0 27) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_26_0)))
 (let (($x316 (= $x78 true)))
 (let (($x508 (= $x316 true)))
 (let ((?x550 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x73 (= (_ bv0 3) ?x550)))
 (let (($x488 (= $x73 true)))
 (let (($x554 (= $x488 true)))
 (let (($x771 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x283 (=> $x771 false)))
 (let (($x80 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x76 (ite $x80 (_ bv0 32) (_ bv1 32))))
 (let (($x457 (= $x771 (bvuge ?x76 (_ bv1 32)))))
 (let (($x69 (= false false)))
 (let (($x520 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x212 (=> $x520 $x69)))
 (let (($x60 (= $x520 (= ?x76 (_ bv0 32)))))
 (let (($x575 (and $x60 $x212)))
 (let (($x693 (and $x575 $x457)))
 (let (($x369 (and $x693 $x283)))
 (let (($x311 (= $x369 true)))
 (let (($x615 (= $x311 true)))
 (let (($x475 (= $x615 true)))
 (let (($x248 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x396 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x135 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x396) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x396))))
 (let (($x303 (and true $x135)))
 (let (($x273 (and $x135 $x303)))
 (let ((?x95 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x410))))
 (let (($x867 (= (bvand ?x338 (_ bv4294967288 32)) ?x338)))
 (let (($x409 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x821 (and $x409 $x867)))
 (let (($x518 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv4 32))) (bvult ?x95 (bvsub ?x95 (_ bv4 32))))))
 (let (($x429 (and (and (and (and (and $x303 $x518) $x409) $x821) $x273) $x248)))
 (let (($x170 (= true $x429)))
 (let (($x464 (not $x80)))
 (let (($x252 (=> $x464 $x170)))
 (let (($x168 (= $x252 true)))
 (let (($x364 (= $x168 true)))
 (let (($x297 (= $x364 true)))
 (let (($x822 (= $x464 true)))
 (let (($x155 (= $x822 true)))
 (let (($x840 (= $x155 true)))
 (let (($x284 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x56 (= $x284 true)))
 (let (($x365 (= $x56 true)))
 (let ((?x510 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x397 (= (_ bv0 32) ?x510)))
 (let ((?x436 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x683 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x436)))
 (let (($x544 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x538 (and $x544 $x683)))
 (let (($x720 (and $x538 $x397)))
 (let (($x497 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (and $x497 $x720)))
 (let (($x377 (= $x247 true)))
 (let (($x205 (= $x377 true)))
 (let (($x382 (= $x205 true)))
 (let (($x854 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x444 (=> $x854 false)))
 (let ((?x209 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x806 (bvuge ?x209 (_ bv1 32))))
 (let (($x234 (= $x854 $x806)))
 (let (($x226 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x296 (=> $x226 $x69)))
 (let (($x116 (= ?x209 (_ bv0 32))))
 (let (($x676 (= $x226 $x116)))
 (let (($x788 (and $x676 $x296)))
 (let (($x849 (and $x788 $x234)))
 (let (($x102 (and $x849 $x444)))
 (let (($x140 (= $x102 true)))
 (let (($x315 (= $x140 true)))
 (let (($x213 (= $x315 true)))
 (let (($x104 (= $x771 $x806)))
 (let (($x804 (= $x520 $x116)))
 (let (($x425 (and $x804 $x212)))
 (let (($x171 (and $x425 $x104)))
 (let (($x512 (and $x171 $x283)))
 (let (($x811 (= $x512 true)))
 (let (($x204 (= $x811 true)))
 (let (($x394 (= $x204 true)))
 (let (($x210 (and $x394 $x213)))
 (let (($x533 (and $x210 $x382)))
 (let (($x551 (and $x533 $x365)))
 (let (($x809 (and $x551 $x840)))
 (let (($x305 (and $x809 $x297)))
 (let (($x162 (and $x305 $x475)))
 (let (($x292 (and $x162 $x554)))
 (let (($x47 (and $x292 $x508)))
 (let (($x684 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x158 (and $x684 $x47)))
 (let (($x681 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x95 (_ bv3 32))))
 (let (($x443 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x447 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x443 $x681)))))))
 (let (($x192 (=> (and $x464 (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x443 $x681)))))))
 (let (($x124 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x343 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x666)))
 (let (($x24 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x328 (=> $x24 (or false (or false (and true (or $x343 $x124)))))))
 (let (($x675 (=> (and $x464 $x24) (or false (or false (and true (or $x343 $x124)))))))
 (let (($x99 (and $x675 $x192)))
 (let (($x207 (and $x99 $x158)))
 (let (($x90 (=> $x207 $x573)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 106
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0 () (_ BitVec 26))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x435 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x785 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x268 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x507 (concat (select input.dst.llvm-mem ?x268) (concat ?x68 (concat ?x785 ?x435)))))
 (let ((?x539 ((_ extract 25 0) ?x507)))
 (let ((?x606 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0 ?x539)))
 (let (($x432 (= (_ bv0 26) ?x606)))
 (let (($x236 (= $x432 true)))
 (let (($x238 (= (_ bv0 26) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0)))
 (let (($x319 (= $x238 true)))
 (let (($x725 (= $x319 true)))
 (let ((?x363 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x261 (= (_ bv0 3) ?x363)))
 (let (($x659 (= $x261 true)))
 (let (($x853 (= $x659 true)))
 (let (($x193 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x338 (=> $x193 true)))
 (let (($x716 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x828 (ite $x716 (_ bv0 32) (_ bv1 32))))
 (let (($x506 (= $x193 (bvuge ?x828 (_ bv1 32)))))
 (let (($x417 (= false false)))
 (let (($x225 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x409 (=> $x225 $x417)))
 (let (($x588 (= $x225 (= ?x828 (_ bv0 32)))))
 (let (($x9 (and $x588 $x409)))
 (let (($x215 (and $x9 $x506)))
 (let (($x262 (and $x215 $x338)))
 (let (($x859 (= $x262 true)))
 (let (($x427 (= $x859 true)))
 (let (($x32 (= $x427 true)))
 (let (($x129 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x306 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41))))
 (let (($x446 (and true $x306)))
 (let (($x808 (and $x306 $x446)))
 (let ((?x24 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x637 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv1 32))) (select input.dst.llvm-mem ?x24))))
 (let ((?x592 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv2 32))) ?x637))))
 (let (($x317 (= (bvand ?x592 (_ bv4294967288 32)) ?x592)))
 (let (($x847 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x413 (and $x847 $x317)))
 (let (($x764 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x24 (bvsub ?x24 (_ bv4 32))) (bvult ?x24 (bvsub ?x24 (_ bv4 32))))))
 (let (($x187 (and (and (and (and (and $x446 $x764) $x847) $x413) $x808) $x129)))
 (let (($x100 (= true $x187)))
 (let (($x80 (not $x716)))
 (let (($x846 (=> $x80 $x100)))
 (let (($x461 (= $x846 true)))
 (let (($x334 (= $x461 true)))
 (let (($x312 (= $x334 true)))
 (let (($x801 (= $x80 true)))
 (let (($x34 (= $x801 true)))
 (let (($x707 (= $x34 true)))
 (let (($x47 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x158 (= $x47 true)))
 (let (($x207 (= $x158 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x488 (= (_ bv0 32) ?x73)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x403 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let (($x475 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x550 (and $x475 $x403)))
 (let (($x554 (and $x550 $x488)))
 (let (($x615 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x292 (and $x615 $x554)))
 (let (($x489 (= $x292 true)))
 (let (($x349 (= $x489 true)))
 (let (($x78 (= $x349 true)))
 (let (($x305 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x60 (=> $x305 true)))
 (let ((?x518 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x344 (bvuge ?x518 (_ bv1 32))))
 (let (($x76 (= $x305 $x344)))
 (let (($x429 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x252 (=> $x429 $x417)))
 (let (($x612 (= ?x518 (_ bv0 32))))
 (let (($x170 (= $x429 $x612)))
 (let (($x168 (and $x170 $x252)))
 (let (($x868 (and $x168 $x76)))
 (let (($x575 (and $x868 $x60)))
 (let (($x548 (= $x575 true)))
 (let (($x457 (= $x548 true)))
 (let (($x693 (= $x457 true)))
 (let (($x410 (= $x193 $x344)))
 (let (($x546 (= $x225 $x612)))
 (let (($x216 (and $x546 $x409)))
 (let (($x348 (and $x216 $x410)))
 (let (($x345 (and $x348 $x338)))
 (let (($x244 (= $x345 true)))
 (let (($x867 (= $x244 true)))
 (let (($x821 (= $x867 true)))
 (let (($x369 (and $x821 $x693)))
 (let (($x316 (and $x369 $x78)))
 (let (($x340 (and $x316 $x207)))
 (let (($x235 (and $x340 $x707)))
 (let (($x581 (and $x235 $x312)))
 (let (($x29 (and $x581 $x32)))
 (let (($x523 (and $x29 $x853)))
 (let (($x448 (and $x523 $x725)))
 (let (($x520 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x653 (and $x520 $x448)))
 (let (($x154 (bvugt ?x24 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x24 (_ bv3 32))))
 (let (($x623 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x684 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x623 $x154)))))))
 (let (($x555 (=> (and $x80 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x623 $x154)))))))
 (let (($x57 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x268)))
 (let (($x593 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x88 (=> $x593 (or false (or false (and true (or $x278 $x57)))))))
 (let (($x614 (=> (and $x80 $x593) (or false (or false (and true (or $x278 $x57)))))))
 (let (($x37 (and $x614 $x555)))
 (let (($x281 (and $x37 $x653)))
 (let (($x23 (=> $x281 $x236)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0 () (_ BitVec 26))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x435 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x785 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x268 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x507 (concat (select input.dst.llvm-mem ?x268) (concat ?x68 (concat ?x785 ?x435)))))
 (let ((?x539 ((_ extract 25 0) ?x507)))
 (let ((?x606 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0 ?x539)))
 (let (($x432 (= (_ bv0 26) ?x606)))
 (let (($x236 (= $x432 true)))
 (let (($x238 (= (_ bv0 26) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0)))
 (let (($x319 (= $x238 true)))
 (let (($x725 (= $x319 true)))
 (let ((?x363 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x261 (= (_ bv0 3) ?x363)))
 (let (($x659 (= $x261 true)))
 (let (($x853 (= $x659 true)))
 (let (($x193 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x338 (=> $x193 true)))
 (let (($x716 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x828 (ite $x716 (_ bv0 32) (_ bv1 32))))
 (let (($x506 (= $x193 (bvuge ?x828 (_ bv1 32)))))
 (let (($x417 (= false false)))
 (let (($x225 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x409 (=> $x225 $x417)))
 (let (($x588 (= $x225 (= ?x828 (_ bv0 32)))))
 (let (($x9 (and $x588 $x409)))
 (let (($x215 (and $x9 $x506)))
 (let (($x262 (and $x215 $x338)))
 (let (($x859 (= $x262 true)))
 (let (($x427 (= $x859 true)))
 (let (($x32 (= $x427 true)))
 (let (($x129 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x306 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41))))
 (let (($x446 (and true $x306)))
 (let (($x808 (and $x306 $x446)))
 (let ((?x24 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x637 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv1 32))) (select input.dst.llvm-mem ?x24))))
 (let ((?x592 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv2 32))) ?x637))))
 (let (($x317 (= (bvand ?x592 (_ bv4294967288 32)) ?x592)))
 (let (($x847 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x413 (and $x847 $x317)))
 (let (($x764 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x24 (bvsub ?x24 (_ bv4 32))) (bvult ?x24 (bvsub ?x24 (_ bv4 32))))))
 (let (($x187 (and (and (and (and (and $x446 $x764) $x847) $x413) $x808) $x129)))
 (let (($x100 (= true $x187)))
 (let (($x80 (not $x716)))
 (let (($x846 (=> $x80 $x100)))
 (let (($x461 (= $x846 true)))
 (let (($x334 (= $x461 true)))
 (let (($x312 (= $x334 true)))
 (let (($x801 (= $x80 true)))
 (let (($x34 (= $x801 true)))
 (let (($x707 (= $x34 true)))
 (let (($x47 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x158 (= $x47 true)))
 (let (($x207 (= $x158 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x488 (= (_ bv0 32) ?x73)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x403 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let (($x475 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x550 (and $x475 $x403)))
 (let (($x554 (and $x550 $x488)))
 (let (($x615 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x292 (and $x615 $x554)))
 (let (($x489 (= $x292 true)))
 (let (($x349 (= $x489 true)))
 (let (($x78 (= $x349 true)))
 (let (($x305 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x60 (=> $x305 true)))
 (let ((?x518 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x344 (bvuge ?x518 (_ bv1 32))))
 (let (($x76 (= $x305 $x344)))
 (let (($x429 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x252 (=> $x429 $x417)))
 (let (($x612 (= ?x518 (_ bv0 32))))
 (let (($x170 (= $x429 $x612)))
 (let (($x168 (and $x170 $x252)))
 (let (($x868 (and $x168 $x76)))
 (let (($x575 (and $x868 $x60)))
 (let (($x548 (= $x575 true)))
 (let (($x457 (= $x548 true)))
 (let (($x693 (= $x457 true)))
 (let (($x410 (= $x193 $x344)))
 (let (($x546 (= $x225 $x612)))
 (let (($x216 (and $x546 $x409)))
 (let (($x348 (and $x216 $x410)))
 (let (($x345 (and $x348 $x338)))
 (let (($x244 (= $x345 true)))
 (let (($x867 (= $x244 true)))
 (let (($x821 (= $x867 true)))
 (let (($x369 (and $x821 $x693)))
 (let (($x316 (and $x369 $x78)))
 (let (($x340 (and $x316 $x207)))
 (let (($x235 (and $x340 $x707)))
 (let (($x581 (and $x235 $x312)))
 (let (($x29 (and $x581 $x32)))
 (let (($x523 (and $x29 $x853)))
 (let (($x448 (and $x523 $x725)))
 (let (($x520 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x653 (and $x520 $x448)))
 (let (($x154 (bvugt ?x24 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x24 (_ bv3 32))))
 (let (($x623 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x684 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x623 $x154)))))))
 (let (($x555 (=> (and $x80 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x623 $x154)))))))
 (let (($x57 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x268)))
 (let (($x593 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x88 (=> $x593 (or false (or false (and true (or $x278 $x57)))))))
 (let (($x614 (=> (and $x80 $x593) (or false (or false (and true (or $x278 $x57)))))))
 (let (($x37 (and $x614 $x555)))
 (let (($x281 (and $x37 $x653)))
 (let (($x23 (=> $x281 $x236)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0 #b00000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b00000010)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ffb #x03))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0 () (_ BitVec 26)
    #b00000000000000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv172016 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv172016 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0 () (_ BitVec 26) (_ bv0 26))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv327112 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv327112 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv327115 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 107
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0 () (_ BitVec 26))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x185 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x483 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x700 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x803 (concat (select input.dst.llvm-mem ?x700) (concat ?x483 (concat ?x59 ?x185)))))
 (let ((?x286 ((_ extract 25 0) ?x803)))
 (let ((?x496 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0 ?x286)))
 (let (($x380 (= (_ bv0 26) ?x496)))
 (let (($x392 (= $x380 true)))
 (let (($x291 (= (_ bv0 26) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0)))
 (let (($x782 (= $x291 true)))
 (let (($x522 (= $x782 true)))
 (let ((?x391 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x642 (= (_ bv0 3) ?x391)))
 (let (($x740 (= $x642 true)))
 (let (($x529 (= $x740 true)))
 (let (($x341 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x592 (=> $x341 false)))
 (let (($x716 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x393 (ite $x716 (_ bv0 32) (_ bv1 32))))
 (let (($x465 (= $x341 (bvuge ?x393 (_ bv1 32)))))
 (let (($x197 (= false false)))
 (let (($x90 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x847 (=> $x90 $x197)))
 (let (($x390 (= $x90 (= ?x393 (_ bv0 32)))))
 (let (($x610 (and $x390 $x847)))
 (let (($x838 (and $x610 $x465)))
 (let (($x176 (and $x838 $x592)))
 (let (($x111 (= $x176 true)))
 (let (($x686 (= $x111 true)))
 (let (($x72 (= $x686 true)))
 (let (($x204 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x435 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x539 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435))))
 (let (($x606 (and true $x539)))
 (let (($x226 (and $x539 $x606)))
 (let ((?x593 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x771 (concat (select input.dst.llvm-mem (bvadd ?x593 (_ bv1 32))) (select input.dst.llvm-mem ?x593))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x593 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x593 (_ bv2 32))) ?x771))))
 (let (($x854 (= (bvand ?x116 (_ bv4294967288 32)) ?x116)))
 (let (($x119 (= (bvand ?x593 (_ bv4294967292 32)) ?x593)))
 (let (($x398 (and $x119 $x854)))
 (let (($x460 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x593 (bvsub ?x593 (_ bv4 32))) (bvult ?x593 (bvsub ?x593 (_ bv4 32))))))
 (let (($x394 (and (and (and (and (and $x606 $x460) $x119) $x398) $x226) $x204)))
 (let (($x676 (= true $x394)))
 (let (($x80 (not $x716)))
 (let (($x210 (=> $x80 $x676)))
 (let (($x723 (= $x210 true)))
 (let (($x140 (= $x723 true)))
 (let (($x315 (= $x140 true)))
 (let (($x843 (= $x80 true)))
 (let (($x68 (= $x843 true)))
 (let (($x97 (= $x68 true)))
 (let (($x448 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x653 (= $x448 true)))
 (let (($x281 (= $x653 true)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x659 (= (_ bv0 32) ?x261)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x363 (and $x32 $x260)))
 (let (($x853 (and $x363 $x659)))
 (let (($x427 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x523 (and $x427 $x853)))
 (let (($x201 (= $x523 true)))
 (let (($x783 (= $x201 true)))
 (let (($x238 (= $x783 true)))
 (let (($x581 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x588 (=> $x581 false)))
 (let ((?x764 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x530 (bvuge ?x764 (_ bv1 32))))
 (let (($x828 (= $x581 $x530)))
 (let (($x187 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x846 (=> $x187 $x197)))
 (let (($x832 (= ?x764 (_ bv0 32))))
 (let (($x100 (= $x187 $x832)))
 (let (($x461 (and $x100 $x846)))
 (let (($x299 (and $x461 $x828)))
 (let (($x9 (and $x299 $x588)))
 (let (($x191 (= $x9 true)))
 (let (($x506 (= $x191 true)))
 (let (($x215 (= $x506 true)))
 (let (($x637 (= $x341 $x530)))
 (let (($x309 (= $x90 $x832)))
 (let (($x577 (and $x309 $x847)))
 (let (($x541 (and $x577 $x637)))
 (let (($x259 (and $x541 $x592)))
 (let (($x169 (= $x259 true)))
 (let (($x317 (= $x169 true)))
 (let (($x413 (= $x317 true)))
 (let (($x262 (and $x413 $x215)))
 (let (($x319 (and $x262 $x238)))
 (let (($x535 (and $x319 $x281)))
 (let (($x785 (and $x535 $x97)))
 (let (($x849 (and $x785 $x315)))
 (let (($x120 (and $x849 $x72)))
 (let (($x563 (and $x120 $x529)))
 (let (($x763 (and $x563 $x522)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x302 (and $x225 $x763)))
 (let (($x192 (bvugt ?x593 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x593 (_ bv3 32))))
 (let (($x447 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x520 (=> (bvule ?x593 (bvsub (bvadd ?x593 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x447 $x192)))))))
 (let (($x451 (=> (and $x80 (bvule ?x593 (bvsub (bvadd ?x593 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x447 $x192)))))))
 (let (($x675 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x328 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x700)))
 (let (($x443 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x681 (=> $x443 (or false (or false (and true (or $x328 $x675)))))))
 (let (($x666 (=> (and $x80 $x443) (or false (or false (and true (or $x328 $x675)))))))
 (let (($x186 (and $x666 $x451)))
 (let (($x513 (and $x186 $x302)))
 (let (($x189 (=> $x513 $x392)))
 (not $x189))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0 () (_ BitVec 26))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x185 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x483 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x700 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x803 (concat (select input.dst.llvm-mem ?x700) (concat ?x483 (concat ?x59 ?x185)))))
 (let ((?x286 ((_ extract 25 0) ?x803)))
 (let ((?x496 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0 ?x286)))
 (let (($x380 (= (_ bv0 26) ?x496)))
 (let (($x392 (= $x380 true)))
 (let (($x291 (= (_ bv0 26) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_25_0)))
 (let (($x782 (= $x291 true)))
 (let (($x522 (= $x782 true)))
 (let ((?x391 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x642 (= (_ bv0 3) ?x391)))
 (let (($x740 (= $x642 true)))
 (let (($x529 (= $x740 true)))
 (let (($x341 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x592 (=> $x341 false)))
 (let (($x716 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x393 (ite $x716 (_ bv0 32) (_ bv1 32))))
 (let (($x465 (= $x341 (bvuge ?x393 (_ bv1 32)))))
 (let (($x197 (= false false)))
 (let (($x90 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x847 (=> $x90 $x197)))
 (let (($x390 (= $x90 (= ?x393 (_ bv0 32)))))
 (let (($x610 (and $x390 $x847)))
 (let (($x838 (and $x610 $x465)))
 (let (($x176 (and $x838 $x592)))
 (let (($x111 (= $x176 true)))
 (let (($x686 (= $x111 true)))
 (let (($x72 (= $x686 true)))
 (let (($x204 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x435 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x539 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435))))
 (let (($x606 (and true $x539)))
 (let (($x226 (and $x539 $x606)))
 (let ((?x593 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x771 (concat (select input.dst.llvm-mem (bvadd ?x593 (_ bv1 32))) (select input.dst.llvm-mem ?x593))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x593 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x593 (_ bv2 32))) ?x771))))
 (let (($x854 (= (bvand ?x116 (_ bv4294967288 32)) ?x116)))
 (let (($x119 (= (bvand ?x593 (_ bv4294967292 32)) ?x593)))
 (let (($x398 (and $x119 $x854)))
 (let (($x460 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x593 (bvsub ?x593 (_ bv4 32))) (bvult ?x593 (bvsub ?x593 (_ bv4 32))))))
 (let (($x394 (and (and (and (and (and $x606 $x460) $x119) $x398) $x226) $x204)))
 (let (($x676 (= true $x394)))
 (let (($x80 (not $x716)))
 (let (($x210 (=> $x80 $x676)))
 (let (($x723 (= $x210 true)))
 (let (($x140 (= $x723 true)))
 (let (($x315 (= $x140 true)))
 (let (($x843 (= $x80 true)))
 (let (($x68 (= $x843 true)))
 (let (($x97 (= $x68 true)))
 (let (($x448 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x653 (= $x448 true)))
 (let (($x281 (= $x653 true)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x659 (= (_ bv0 32) ?x261)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x363 (and $x32 $x260)))
 (let (($x853 (and $x363 $x659)))
 (let (($x427 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x523 (and $x427 $x853)))
 (let (($x201 (= $x523 true)))
 (let (($x783 (= $x201 true)))
 (let (($x238 (= $x783 true)))
 (let (($x581 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x588 (=> $x581 false)))
 (let ((?x764 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x530 (bvuge ?x764 (_ bv1 32))))
 (let (($x828 (= $x581 $x530)))
 (let (($x187 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x846 (=> $x187 $x197)))
 (let (($x832 (= ?x764 (_ bv0 32))))
 (let (($x100 (= $x187 $x832)))
 (let (($x461 (and $x100 $x846)))
 (let (($x299 (and $x461 $x828)))
 (let (($x9 (and $x299 $x588)))
 (let (($x191 (= $x9 true)))
 (let (($x506 (= $x191 true)))
 (let (($x215 (= $x506 true)))
 (let (($x637 (= $x341 $x530)))
 (let (($x309 (= $x90 $x832)))
 (let (($x577 (and $x309 $x847)))
 (let (($x541 (and $x577 $x637)))
 (let (($x259 (and $x541 $x592)))
 (let (($x169 (= $x259 true)))
 (let (($x317 (= $x169 true)))
 (let (($x413 (= $x317 true)))
 (let (($x262 (and $x413 $x215)))
 (let (($x319 (and $x262 $x238)))
 (let (($x535 (and $x319 $x281)))
 (let (($x785 (and $x535 $x97)))
 (let (($x849 (and $x785 $x315)))
 (let (($x120 (and $x849 $x72)))
 (let (($x563 (and $x120 $x529)))
 (let (($x763 (and $x563 $x522)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x302 (and $x225 $x763)))
 (let (($x192 (bvugt ?x593 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x593 (_ bv3 32))))
 (let (($x447 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x520 (=> (bvule ?x593 (bvsub (bvadd ?x593 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x447 $x192)))))))
 (let (($x451 (=> (and $x80 (bvule ?x593 (bvsub (bvadd ?x593 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x447 $x192)))))))
 (let (($x675 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x328 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x700)))
 (let (($x443 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x681 (=> $x443 (or false (or false (and true (or $x328 $x675)))))))
 (let (($x666 (=> (and $x80 $x443) (or false (or false (and true (or $x328 $x675)))))))
 (let (($x186 (and $x666 $x451)))
 (let (($x513 (and $x186 $x302)))
 (let (($x189 (=> $x513 $x392)))
 (not $x189))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 108
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x544 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x95 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x538 (concat (select input.dst.llvm-mem ?x95) (concat ?x122 (concat ?x544 ?x284)))))
 (let ((?x720 ((_ extract 24 0) ?x538)))
 (let ((?x205 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x720)))
 (let (($x135 (= (_ bv0 25) ?x205)))
 (let (($x303 (= $x135 true)))
 (let (($x809 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x533 (= $x809 true)))
 (let (($x510 (= $x533 true)))
 (let ((?x247 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x377 (= (_ bv0 3) ?x247)))
 (let (($x468 (= $x377 true)))
 (let (($x382 (= $x468 true)))
 (let (($x212 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x116 (=> $x212 true)))
 (let (($x709 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x508 (ite $x709 (_ bv0 32) (_ bv1 32))))
 (let (($x512 (= $x212 (bvuge ?x508 (_ bv1 32)))))
 (let (($x817 (= false false)))
 (let (($x23 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x119 (=> $x23 $x817)))
 (let (($x715 (= $x23 (= ?x508 (_ bv0 32)))))
 (let (($x333 (and $x715 $x119)))
 (let (($x39 (and $x333 $x512)))
 (let (($x404 (and $x39 $x116)))
 (let (($x482 (= $x404 true)))
 (let (($x444 (= $x482 true)))
 (let (($x234 (= $x444 true)))
 (let (($x867 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x185 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x185) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x185))))
 (let (($x496 (and true $x286)))
 (let (($x429 (and $x286 $x496)))
 (let ((?x443 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x443 (_ bv1 32))) (select input.dst.llvm-mem ?x443))))
 (let ((?x612 (concat (select input.dst.llvm-mem (bvadd ?x443 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x443 (_ bv2 32))) ?x193))))
 (let (($x305 (= (bvand ?x612 (_ bv4294967288 32)) ?x612)))
 (let (($x219 (= (bvand ?x443 (_ bv4294967292 32)) ?x443)))
 (let (($x248 (and $x219 $x305)))
 (let (($x242 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x443 (bvsub ?x443 (_ bv4 32))) (bvult ?x443 (bvsub ?x443 (_ bv4 32))))))
 (let (($x821 (and (and (and (and (and $x496 $x242) $x219) $x248) $x429) $x867)))
 (let (($x170 (= true $x821)))
 (let (($x716 (not $x709)))
 (let (($x369 (=> $x716 $x170)))
 (let (($x311 (= $x369 true)))
 (let (($x548 (= $x311 true)))
 (let (($x457 (= $x548 true)))
 (let (($x458 (= $x716 true)))
 (let (($x483 (= $x458 true)))
 (let (($x190 (= $x483 true)))
 (let (($x763 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x302 (= $x763 true)))
 (let (($x513 (= $x302 true)))
 (let ((?x642 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x740 (= (_ bv0 32) ?x642)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x657 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x391 (and $x72 $x657)))
 (let (($x529 (and $x391 $x740)))
 (let (($x686 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x563 (and $x686 $x529)))
 (let (($x352 (= $x563 true)))
 (let (($x844 (= $x352 true)))
 (let (($x291 (= $x844 true)))
 (let (($x849 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x390 (=> $x849 true)))
 (let ((?x460 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x296 (bvuge ?x460 (_ bv1 32))))
 (let (($x393 (= $x849 $x296)))
 (let (($x394 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x210 (=> $x394 $x817)))
 (let (($x104 (= ?x460 (_ bv0 32))))
 (let (($x676 (= $x394 $x104)))
 (let (($x723 (and $x676 $x210)))
 (let (($x729 (and $x723 $x393)))
 (let (($x610 (and $x729 $x390)))
 (let (($x297 (= $x610 true)))
 (let (($x465 (= $x297 true)))
 (let (($x838 (= $x465 true)))
 (let (($x771 (= $x212 $x296)))
 (let (($x273 (= $x23 $x104)))
 (let (($x171 (and $x273 $x119)))
 (let (($x196 (and $x171 $x771)))
 (let (($x714 (and $x196 $x116)))
 (let (($x788 (= $x714 true)))
 (let (($x854 (= $x788 true)))
 (let (($x398 (= $x854 true)))
 (let (($x176 (and $x398 $x838)))
 (let (($x782 (and $x176 $x291)))
 (let (($x480 (and $x782 $x513)))
 (let (($x59 (and $x480 $x190)))
 (let (($x868 (and $x59 $x457)))
 (let (($x102 (and $x868 $x234)))
 (let (($x56 (and $x102 $x382)))
 (let (($x396 (and $x56 $x510)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x155 (and $x90 $x396)))
 (let (($x555 (bvugt ?x443 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x443 (_ bv3 32))))
 (let (($x684 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x225 (=> (bvule ?x443 (bvsub (bvadd ?x443 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x684 $x555)))))))
 (let (($x43 (=> (and $x716 (bvule ?x443 (bvsub (bvadd ?x443 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x684 $x555)))))))
 (let (($x614 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x623 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x154 (=> $x623 (or false (or false (and true (or $x88 $x614)))))))
 (let (($x268 (=> (and $x716 $x623) (or false (or false (and true (or $x88 $x614)))))))
 (let (($x7 (and $x268 $x43)))
 (let (($x683 (and $x7 $x155)))
 (let (($x415 (=> $x683 $x303)))
 (not $x415))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x544 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x95 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x538 (concat (select input.dst.llvm-mem ?x95) (concat ?x122 (concat ?x544 ?x284)))))
 (let ((?x720 ((_ extract 24 0) ?x538)))
 (let ((?x205 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x720)))
 (let (($x135 (= (_ bv0 25) ?x205)))
 (let (($x303 (= $x135 true)))
 (let (($x809 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x533 (= $x809 true)))
 (let (($x510 (= $x533 true)))
 (let ((?x247 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x377 (= (_ bv0 3) ?x247)))
 (let (($x468 (= $x377 true)))
 (let (($x382 (= $x468 true)))
 (let (($x212 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x116 (=> $x212 true)))
 (let (($x709 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x508 (ite $x709 (_ bv0 32) (_ bv1 32))))
 (let (($x512 (= $x212 (bvuge ?x508 (_ bv1 32)))))
 (let (($x817 (= false false)))
 (let (($x23 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x119 (=> $x23 $x817)))
 (let (($x715 (= $x23 (= ?x508 (_ bv0 32)))))
 (let (($x333 (and $x715 $x119)))
 (let (($x39 (and $x333 $x512)))
 (let (($x404 (and $x39 $x116)))
 (let (($x482 (= $x404 true)))
 (let (($x444 (= $x482 true)))
 (let (($x234 (= $x444 true)))
 (let (($x867 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x185 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x185) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x185))))
 (let (($x496 (and true $x286)))
 (let (($x429 (and $x286 $x496)))
 (let ((?x443 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x443 (_ bv1 32))) (select input.dst.llvm-mem ?x443))))
 (let ((?x612 (concat (select input.dst.llvm-mem (bvadd ?x443 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x443 (_ bv2 32))) ?x193))))
 (let (($x305 (= (bvand ?x612 (_ bv4294967288 32)) ?x612)))
 (let (($x219 (= (bvand ?x443 (_ bv4294967292 32)) ?x443)))
 (let (($x248 (and $x219 $x305)))
 (let (($x242 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x443 (bvsub ?x443 (_ bv4 32))) (bvult ?x443 (bvsub ?x443 (_ bv4 32))))))
 (let (($x821 (and (and (and (and (and $x496 $x242) $x219) $x248) $x429) $x867)))
 (let (($x170 (= true $x821)))
 (let (($x716 (not $x709)))
 (let (($x369 (=> $x716 $x170)))
 (let (($x311 (= $x369 true)))
 (let (($x548 (= $x311 true)))
 (let (($x457 (= $x548 true)))
 (let (($x458 (= $x716 true)))
 (let (($x483 (= $x458 true)))
 (let (($x190 (= $x483 true)))
 (let (($x763 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x302 (= $x763 true)))
 (let (($x513 (= $x302 true)))
 (let ((?x642 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x740 (= (_ bv0 32) ?x642)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x657 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x391 (and $x72 $x657)))
 (let (($x529 (and $x391 $x740)))
 (let (($x686 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x563 (and $x686 $x529)))
 (let (($x352 (= $x563 true)))
 (let (($x844 (= $x352 true)))
 (let (($x291 (= $x844 true)))
 (let (($x849 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x390 (=> $x849 true)))
 (let ((?x460 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x296 (bvuge ?x460 (_ bv1 32))))
 (let (($x393 (= $x849 $x296)))
 (let (($x394 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x210 (=> $x394 $x817)))
 (let (($x104 (= ?x460 (_ bv0 32))))
 (let (($x676 (= $x394 $x104)))
 (let (($x723 (and $x676 $x210)))
 (let (($x729 (and $x723 $x393)))
 (let (($x610 (and $x729 $x390)))
 (let (($x297 (= $x610 true)))
 (let (($x465 (= $x297 true)))
 (let (($x838 (= $x465 true)))
 (let (($x771 (= $x212 $x296)))
 (let (($x273 (= $x23 $x104)))
 (let (($x171 (and $x273 $x119)))
 (let (($x196 (and $x171 $x771)))
 (let (($x714 (and $x196 $x116)))
 (let (($x788 (= $x714 true)))
 (let (($x854 (= $x788 true)))
 (let (($x398 (= $x854 true)))
 (let (($x176 (and $x398 $x838)))
 (let (($x782 (and $x176 $x291)))
 (let (($x480 (and $x782 $x513)))
 (let (($x59 (and $x480 $x190)))
 (let (($x868 (and $x59 $x457)))
 (let (($x102 (and $x868 $x234)))
 (let (($x56 (and $x102 $x382)))
 (let (($x396 (and $x56 $x510)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x155 (and $x90 $x396)))
 (let (($x555 (bvugt ?x443 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x443 (_ bv3 32))))
 (let (($x684 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x225 (=> (bvule ?x443 (bvsub (bvadd ?x443 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x684 $x555)))))))
 (let (($x43 (=> (and $x716 (bvule ?x443 (bvsub (bvadd ?x443 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x684 $x555)))))))
 (let (($x614 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x623 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x154 (=> $x623 (or false (or false (and true (or $x88 $x614)))))))
 (let (($x268 (=> (and $x716 $x623) (or false (or false (and true (or $x88 $x614)))))))
 (let (($x7 (and $x268 $x43)))
 (let (($x683 (and $x7 $x155)))
 (let (($x415 (=> $x683 $x303)))
 (not $x415))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 #b0000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ffb #x01))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25)
    #b0000000000000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv260816 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv260816 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25) (_ bv0 25))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv294152 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv294152 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv294155 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 109
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x475 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x24 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x550 (concat (select input.dst.llvm-mem ?x24) (concat ?x346 (concat ?x475 ?x47)))))
 (let ((?x554 ((_ extract 24 0) ?x550)))
 (let ((?x349 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x554)))
 (let (($x306 (= (_ bv0 25) ?x349)))
 (let (($x446 (= $x306 true)))
 (let (($x235 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x316 (= $x235 true)))
 (let (($x73 (= $x316 true)))
 (let ((?x292 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x489 (= (_ bv0 3) ?x292)))
 (let (($x494 (= $x489 true)))
 (let (($x78 (= $x494 true)))
 (let (($x409 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x612 (=> $x409 false)))
 (let (($x709 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x725 (ite $x709 (_ bv0 32) (_ bv1 32))))
 (let (($x345 (= $x409 (bvuge ?x725 (_ bv1 32)))))
 (let (($x804 (= false false)))
 (let (($x189 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x219 (=> $x189 $x804)))
 (let (($x811 (= $x189 (= ?x725 (_ bv0 32)))))
 (let (($x507 (and $x811 $x219)))
 (let (($x682 (and $x507 $x345)))
 (let (($x580 (and $x682 $x612)))
 (let (($x69 (= $x580 true)))
 (let (($x60 (= $x69 true)))
 (let (($x76 (= $x60 true)))
 (let (($x317 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x284 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x720 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x284) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x284))))
 (let (($x205 (and true $x720)))
 (let (($x187 (and $x720 $x205)))
 (let ((?x623 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x623 (_ bv1 32))) (select input.dst.llvm-mem ?x623))))
 (let ((?x832 (concat (select input.dst.llvm-mem (bvadd ?x623 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x623 (_ bv2 32))) ?x341))))
 (let (($x581 (= (bvand ?x832 (_ bv4294967288 32)) ?x832)))
 (let (($x662 (= (bvand ?x623 (_ bv4294967292 32)) ?x623)))
 (let (($x129 (and $x662 $x581)))
 (let (($x806 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x623 (bvsub ?x623 (_ bv4 32))) (bvult ?x623 (bvsub ?x623 (_ bv4 32))))))
 (let (($x413 (and (and (and (and (and $x205 $x806) $x662) $x129) $x187) $x317)))
 (let (($x100 (= true $x413)))
 (let (($x716 (not $x709)))
 (let (($x262 (=> $x716 $x100)))
 (let (($x859 (= $x262 true)))
 (let (($x191 (= $x859 true)))
 (let (($x506 (= $x191 true)))
 (let (($x436 (= $x716 true)))
 (let (($x122 (= $x436 true)))
 (let (($x497 (= $x122 true)))
 (let (($x396 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x155 (= $x396 true)))
 (let (($x683 (= $x155 true)))
 (let ((?x377 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x468 (= (_ bv0 32) ?x377)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x365 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x234 $x365)))
 (let (($x382 (and $x247 $x468)))
 (let (($x444 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x444 $x382)))
 (let (($x822 (= $x56 true)))
 (let (($x551 (= $x822 true)))
 (let (($x809 (= $x551 true)))
 (let (($x868 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x715 (=> $x868 false)))
 (let ((?x242 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x252 (bvuge ?x242 (_ bv1 32))))
 (let (($x508 (= $x868 $x252)))
 (let (($x821 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x369 (=> $x821 $x804)))
 (let (($x410 (= ?x242 (_ bv0 32))))
 (let (($x170 (= $x821 $x410)))
 (let (($x311 (and $x170 $x369)))
 (let (($x318 (and $x311 $x508)))
 (let (($x333 (and $x318 $x715)))
 (let (($x312 (= $x333 true)))
 (let (($x512 (= $x312 true)))
 (let (($x39 (= $x512 true)))
 (let (($x193 (= $x409 $x252)))
 (let (($x808 (= $x189 $x410)))
 (let (($x348 (and $x808 $x219)))
 (let (($x378 (and $x348 $x193)))
 (let (($x583 (and $x378 $x612)))
 (let (($x168 (= $x583 true)))
 (let (($x305 (= $x168 true)))
 (let (($x248 (= $x305 true)))
 (let (($x404 (and $x248 $x39)))
 (let (($x533 (and $x404 $x809)))
 (let (($x397 (and $x533 $x683)))
 (let (($x544 (and $x397 $x497)))
 (let (($x299 (and $x544 $x506)))
 (let (($x575 (and $x299 $x76)))
 (let (($x158 (and $x575 $x78)))
 (let (($x41 (and $x158 $x73)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x34 (and $x23 $x41)))
 (let (($x451 (bvugt ?x623 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x623 (_ bv3 32))))
 (let (($x520 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x90 (=> (bvule ?x623 (bvsub (bvadd ?x623 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x520 $x451)))))))
 (let (($x500 (=> (and $x716 (bvule ?x623 (bvsub (bvadd ?x623 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x520 $x451)))))))
 (let (($x666 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x681 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x447 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x192 (=> $x447 (or false (or false (and true (or $x681 $x666)))))))
 (let (($x700 (=> (and $x716 $x447) (or false (or false (and true (or $x681 $x666)))))))
 (let (($x99 (and $x700 $x500)))
 (let (($x403 (and $x99 $x34)))
 (let (($x573 (=> $x403 $x446)))
 (not $x573))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x475 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x24 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x550 (concat (select input.dst.llvm-mem ?x24) (concat ?x346 (concat ?x475 ?x47)))))
 (let ((?x554 ((_ extract 24 0) ?x550)))
 (let ((?x349 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x554)))
 (let (($x306 (= (_ bv0 25) ?x349)))
 (let (($x446 (= $x306 true)))
 (let (($x235 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x316 (= $x235 true)))
 (let (($x73 (= $x316 true)))
 (let ((?x292 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x489 (= (_ bv0 3) ?x292)))
 (let (($x494 (= $x489 true)))
 (let (($x78 (= $x494 true)))
 (let (($x409 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x612 (=> $x409 false)))
 (let (($x709 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x725 (ite $x709 (_ bv0 32) (_ bv1 32))))
 (let (($x345 (= $x409 (bvuge ?x725 (_ bv1 32)))))
 (let (($x804 (= false false)))
 (let (($x189 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x219 (=> $x189 $x804)))
 (let (($x811 (= $x189 (= ?x725 (_ bv0 32)))))
 (let (($x507 (and $x811 $x219)))
 (let (($x682 (and $x507 $x345)))
 (let (($x580 (and $x682 $x612)))
 (let (($x69 (= $x580 true)))
 (let (($x60 (= $x69 true)))
 (let (($x76 (= $x60 true)))
 (let (($x317 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x284 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x720 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x284) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x284))))
 (let (($x205 (and true $x720)))
 (let (($x187 (and $x720 $x205)))
 (let ((?x623 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x623 (_ bv1 32))) (select input.dst.llvm-mem ?x623))))
 (let ((?x832 (concat (select input.dst.llvm-mem (bvadd ?x623 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x623 (_ bv2 32))) ?x341))))
 (let (($x581 (= (bvand ?x832 (_ bv4294967288 32)) ?x832)))
 (let (($x662 (= (bvand ?x623 (_ bv4294967292 32)) ?x623)))
 (let (($x129 (and $x662 $x581)))
 (let (($x806 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x623 (bvsub ?x623 (_ bv4 32))) (bvult ?x623 (bvsub ?x623 (_ bv4 32))))))
 (let (($x413 (and (and (and (and (and $x205 $x806) $x662) $x129) $x187) $x317)))
 (let (($x100 (= true $x413)))
 (let (($x716 (not $x709)))
 (let (($x262 (=> $x716 $x100)))
 (let (($x859 (= $x262 true)))
 (let (($x191 (= $x859 true)))
 (let (($x506 (= $x191 true)))
 (let (($x436 (= $x716 true)))
 (let (($x122 (= $x436 true)))
 (let (($x497 (= $x122 true)))
 (let (($x396 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x155 (= $x396 true)))
 (let (($x683 (= $x155 true)))
 (let ((?x377 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x468 (= (_ bv0 32) ?x377)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x365 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x234 $x365)))
 (let (($x382 (and $x247 $x468)))
 (let (($x444 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x444 $x382)))
 (let (($x822 (= $x56 true)))
 (let (($x551 (= $x822 true)))
 (let (($x809 (= $x551 true)))
 (let (($x868 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x715 (=> $x868 false)))
 (let ((?x242 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x252 (bvuge ?x242 (_ bv1 32))))
 (let (($x508 (= $x868 $x252)))
 (let (($x821 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x369 (=> $x821 $x804)))
 (let (($x410 (= ?x242 (_ bv0 32))))
 (let (($x170 (= $x821 $x410)))
 (let (($x311 (and $x170 $x369)))
 (let (($x318 (and $x311 $x508)))
 (let (($x333 (and $x318 $x715)))
 (let (($x312 (= $x333 true)))
 (let (($x512 (= $x312 true)))
 (let (($x39 (= $x512 true)))
 (let (($x193 (= $x409 $x252)))
 (let (($x808 (= $x189 $x410)))
 (let (($x348 (and $x808 $x219)))
 (let (($x378 (and $x348 $x193)))
 (let (($x583 (and $x378 $x612)))
 (let (($x168 (= $x583 true)))
 (let (($x305 (= $x168 true)))
 (let (($x248 (= $x305 true)))
 (let (($x404 (and $x248 $x39)))
 (let (($x533 (and $x404 $x809)))
 (let (($x397 (and $x533 $x683)))
 (let (($x544 (and $x397 $x497)))
 (let (($x299 (and $x544 $x506)))
 (let (($x575 (and $x299 $x76)))
 (let (($x158 (and $x575 $x78)))
 (let (($x41 (and $x158 $x73)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x34 (and $x23 $x41)))
 (let (($x451 (bvugt ?x623 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x623 (_ bv3 32))))
 (let (($x520 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x90 (=> (bvule ?x623 (bvsub (bvadd ?x623 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x520 $x451)))))))
 (let (($x500 (=> (and $x716 (bvule ?x623 (bvsub (bvadd ?x623 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x520 $x451)))))))
 (let (($x666 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x681 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x447 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x192 (=> $x447 (or false (or false (and true (or $x681 $x666)))))))
 (let (($x700 (=> (and $x716 $x447) (or false (or false (and true (or $x681 $x666)))))))
 (let (($x99 (and $x700 $x500)))
 (let (($x403 (and $x99 $x34)))
 (let (($x573 (=> $x403 $x446)))
 (not $x573))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 110
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0 () (_ BitVec 24))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x448 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x97 (concat ?x172 (concat ?x32 ?x448))))
 (let ((?x659 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0 ?x97)))
 (let (($x363 (= (_ bv0 24) ?x659)))
 (let (($x853 (= $x363 true)))
 (let (($x785 (= (_ bv0 24) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0)))
 (let (($x319 (= $x785 true)))
 (let (($x261 (= $x319 true)))
 (let ((?x523 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x201 (= (_ bv0 3) ?x523)))
 (let (($x313 (= $x201 true)))
 (let (($x238 (= $x313 true)))
 (let (($x847 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x832 (=> $x847 true)))
 (let (($x709 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x522 (ite $x709 (_ bv0 32) (_ bv1 32))))
 (let (($x259 (= $x847 (bvuge ?x522 (_ bv1 32)))))
 (let (($x546 (= false false)))
 (let (($x415 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x662 (=> $x415 $x546)))
 (let (($x244 (= $x415 (= ?x522 (_ bv0 32)))))
 (let (($x803 (and $x244 $x662)))
 (let (($x464 (and $x803 $x259)))
 (let (($x425 (and $x464 $x832)))
 (let (($x417 (= $x425 true)))
 (let (($x588 (= $x417 true)))
 (let (($x828 (= $x588 true)))
 (let (($x854 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x47 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x554 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x47) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x47))))
 (let (($x349 (and true $x554)))
 (let (($x394 (and $x554 $x349)))
 (let ((?x447 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x212))))
 (let (($x849 (= (bvand ?x104 (_ bv4294967288 32)) ?x104)))
 (let (($x182 (= (bvand ?x447 (_ bv4294967292 32)) ?x447)))
 (let (($x204 (and $x182 $x849)))
 (let (($x344 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x447 (bvsub ?x447 (_ bv4 32))) (bvult ?x447 (bvsub ?x447 (_ bv4 32))))))
 (let (($x398 (and (and (and (and (and $x349 $x344) $x182) $x204) $x394) $x854)))
 (let (($x676 (= true $x398)))
 (let (($x638 (not $x709)))
 (let (($x176 (=> $x638 $x676)))
 (let (($x111 (= $x176 true)))
 (let (($x297 (= $x111 true)))
 (let (($x465 (= $x297 true)))
 (let (($x162 (= $x638 true)))
 (let (($x346 (= $x162 true)))
 (let (($x615 (= $x346 true)))
 (let (($x41 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x34 (= $x41 true)))
 (let (($x403 (= $x34 true)))
 (let ((?x489 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x494 (= (_ bv0 32) ?x489)))
 (let ((?x575 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x575)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x292 (and $x76 $x207)))
 (let (($x78 (and $x292 $x494)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x60 $x78)))
 (let (($x801 (= $x158 true)))
 (let (($x340 (= $x801 true)))
 (let (($x235 (= $x340 true)))
 (let (($x299 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x811 (=> $x299 true)))
 (let ((?x806 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x846 (bvuge ?x806 (_ bv1 32))))
 (let (($x725 (= $x299 $x846)))
 (let (($x413 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x262 (=> $x413 $x546)))
 (let (($x637 (= ?x806 (_ bv0 32))))
 (let (($x100 (= $x413 $x637)))
 (let (($x859 (and $x100 $x262)))
 (let (($x283 (and $x859 $x725)))
 (let (($x507 (and $x283 $x811)))
 (let (($x315 (= $x507 true)))
 (let (($x345 (= $x315 true)))
 (let (($x682 (= $x345 true)))
 (let (($x341 (= $x847 $x846)))
 (let (($x226 (= $x415 $x637)))
 (let (($x541 (and $x226 $x662)))
 (let (($x209 (and $x541 $x341)))
 (let (($x124 (and $x209 $x832)))
 (let (($x461 (= $x124 true)))
 (let (($x581 (= $x461 true)))
 (let (($x129 (= $x581 true)))
 (let (($x580 (and $x129 $x682)))
 (let (($x316 (and $x580 $x235)))
 (let (($x488 (and $x316 $x403)))
 (let (($x475 (and $x488 $x615)))
 (let (($x729 (and $x475 $x465)))
 (let (($x9 (and $x729 $x828)))
 (let (($x653 (and $x9 $x238)))
 (let (($x435 (and $x653 $x261)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x68 (and $x189 $x435)))
 (let (($x43 (bvugt ?x447 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x447 (_ bv3 32))))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x23 (=> (bvule ?x447 (bvsub (bvadd ?x447 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x43)))))))
 (let (($x161 (=> (and $x638 (bvule ?x447 (bvsub (bvadd ?x447 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x225 $x43)))))))
 (let (($x268 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x684 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x555 (=> $x684 (or false (or false (and true (or $x154 $x268)))))))
 (let (($x95 (=> (and $x638 $x684) (or false (or false (and true (or $x154 $x268)))))))
 (let (($x37 (and $x95 $x161)))
 (let (($x260 (and $x37 $x68)))
 (let (($x783 (=> $x260 $x853)))
 (not $x783))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0 () (_ BitVec 24))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x448 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x97 (concat ?x172 (concat ?x32 ?x448))))
 (let ((?x659 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0 ?x97)))
 (let (($x363 (= (_ bv0 24) ?x659)))
 (let (($x853 (= $x363 true)))
 (let (($x785 (= (_ bv0 24) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0)))
 (let (($x319 (= $x785 true)))
 (let (($x261 (= $x319 true)))
 (let ((?x523 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x201 (= (_ bv0 3) ?x523)))
 (let (($x313 (= $x201 true)))
 (let (($x238 (= $x313 true)))
 (let (($x847 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x832 (=> $x847 true)))
 (let (($x709 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x522 (ite $x709 (_ bv0 32) (_ bv1 32))))
 (let (($x259 (= $x847 (bvuge ?x522 (_ bv1 32)))))
 (let (($x546 (= false false)))
 (let (($x415 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x662 (=> $x415 $x546)))
 (let (($x244 (= $x415 (= ?x522 (_ bv0 32)))))
 (let (($x803 (and $x244 $x662)))
 (let (($x464 (and $x803 $x259)))
 (let (($x425 (and $x464 $x832)))
 (let (($x417 (= $x425 true)))
 (let (($x588 (= $x417 true)))
 (let (($x828 (= $x588 true)))
 (let (($x854 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x47 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x554 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x47) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x47))))
 (let (($x349 (and true $x554)))
 (let (($x394 (and $x554 $x349)))
 (let ((?x447 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x212))))
 (let (($x849 (= (bvand ?x104 (_ bv4294967288 32)) ?x104)))
 (let (($x182 (= (bvand ?x447 (_ bv4294967292 32)) ?x447)))
 (let (($x204 (and $x182 $x849)))
 (let (($x344 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x447 (bvsub ?x447 (_ bv4 32))) (bvult ?x447 (bvsub ?x447 (_ bv4 32))))))
 (let (($x398 (and (and (and (and (and $x349 $x344) $x182) $x204) $x394) $x854)))
 (let (($x676 (= true $x398)))
 (let (($x638 (not $x709)))
 (let (($x176 (=> $x638 $x676)))
 (let (($x111 (= $x176 true)))
 (let (($x297 (= $x111 true)))
 (let (($x465 (= $x297 true)))
 (let (($x162 (= $x638 true)))
 (let (($x346 (= $x162 true)))
 (let (($x615 (= $x346 true)))
 (let (($x41 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x34 (= $x41 true)))
 (let (($x403 (= $x34 true)))
 (let ((?x489 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x494 (= (_ bv0 32) ?x489)))
 (let ((?x575 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x575)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x292 (and $x76 $x207)))
 (let (($x78 (and $x292 $x494)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x60 $x78)))
 (let (($x801 (= $x158 true)))
 (let (($x340 (= $x801 true)))
 (let (($x235 (= $x340 true)))
 (let (($x299 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x811 (=> $x299 true)))
 (let ((?x806 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x846 (bvuge ?x806 (_ bv1 32))))
 (let (($x725 (= $x299 $x846)))
 (let (($x413 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x262 (=> $x413 $x546)))
 (let (($x637 (= ?x806 (_ bv0 32))))
 (let (($x100 (= $x413 $x637)))
 (let (($x859 (and $x100 $x262)))
 (let (($x283 (and $x859 $x725)))
 (let (($x507 (and $x283 $x811)))
 (let (($x315 (= $x507 true)))
 (let (($x345 (= $x315 true)))
 (let (($x682 (= $x345 true)))
 (let (($x341 (= $x847 $x846)))
 (let (($x226 (= $x415 $x637)))
 (let (($x541 (and $x226 $x662)))
 (let (($x209 (and $x541 $x341)))
 (let (($x124 (and $x209 $x832)))
 (let (($x461 (= $x124 true)))
 (let (($x581 (= $x461 true)))
 (let (($x129 (= $x581 true)))
 (let (($x580 (and $x129 $x682)))
 (let (($x316 (and $x580 $x235)))
 (let (($x488 (and $x316 $x403)))
 (let (($x475 (and $x488 $x615)))
 (let (($x729 (and $x475 $x465)))
 (let (($x9 (and $x729 $x828)))
 (let (($x653 (and $x9 $x238)))
 (let (($x435 (and $x653 $x261)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x68 (and $x189 $x435)))
 (let (($x43 (bvugt ?x447 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x447 (_ bv3 32))))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x23 (=> (bvule ?x447 (bvsub (bvadd ?x447 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x43)))))))
 (let (($x161 (=> (and $x638 (bvule ?x447 (bvsub (bvadd ?x447 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x225 $x43)))))))
 (let (($x268 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x684 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x555 (=> $x684 (or false (or false (and true (or $x154 $x268)))))))
 (let (($x95 (=> (and $x638 $x684) (or false (or false (and true (or $x154 $x268)))))))
 (let (($x37 (and $x95 $x161)))
 (let (($x260 (and $x37 $x68)))
 (let (($x783 (=> $x260 $x853)))
 (not $x783))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0 #b000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_17)
(function @fun_17
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_17 #b10000000000000000000000000000010) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3b6b7710)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x32055030)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x32055030 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0 () (_ BitVec 24)
    #x000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3b6b7713)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3b6b7710)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv24496 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv24496 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0 () (_ BitVec 24) (_ bv0 24))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv294280 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv294280 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv294283 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 111
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0 () (_ BitVec 24))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x838 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x391 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x529 (concat ?x391 (concat ?x347 ?x838))))
 (let ((?x844 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0 ?x529)))
 (let (($x286 (= (_ bv0 24) ?x844)))
 (let (($x496 (= $x286 true)))
 (let (($x185 (= (_ bv0 24) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0)))
 (let (($x483 (= $x185 true)))
 (let (($x657 (= $x483 true)))
 (let ((?x291 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x302 (= (_ bv0 3) ?x291)))
 (let (($x458 (= $x302 true)))
 (let (($x480 (= $x458 true)))
 (let (($x119 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x104 (=> $x119 false)))
 (let (($x709 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (ite $x709 (_ bv0 32) (_ bv1 32))))
 (let (($x197 (= $x119 (bvuge ?x538 (_ bv1 32)))))
 (let (($x309 (= false false)))
 (let (($x573 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x182 (=> $x573 $x309)))
 (let (($x205 (= $x573 (= ?x538 (_ bv0 32)))))
 (let (($x303 (and $x205 $x182)))
 (let (($x390 (and $x303 $x197)))
 (let (($x393 (and $x390 $x104)))
 (let (($x610 (= $x393 true)))
 (let (($x513 (= $x610 true)))
 (let (($x563 (= $x513 true)))
 (let (($x252 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x215 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x853 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x215) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x215))))
 (let (($x783 (and true $x853)))
 (let (($x193 (and $x853 $x783)))
 (let ((?x684 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x764 (concat (select input.dst.llvm-mem (bvadd ?x684 (_ bv1 32))) (select input.dst.llvm-mem ?x684))))
 (let ((?x868 (concat (select input.dst.llvm-mem (bvadd ?x684 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x684 (_ bv2 32))) ?x764))))
 (let (($x168 (= (bvand ?x868 (_ bv4294967288 32)) ?x868)))
 (let (($x219 (= (bvand ?x684 (_ bv4294967292 32)) ?x684)))
 (let (($x305 (and $x219 $x168)))
 (let (($x848 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x684 (bvsub ?x684 (_ bv4 32))) (bvult ?x684 (bvsub ?x684 (_ bv4 32))))))
 (let (($x482 (and (and (and (and (and $x783 $x848) $x219) $x305) $x193) $x252)))
 (let (($x312 (= true $x482)))
 (let (($x638 (not $x709)))
 (let (($x512 (=> $x638 $x312)))
 (let (($x318 (= $x512 true)))
 (let (($x715 (= $x318 true)))
 (let (($x508 (= $x715 true)))
 (let (($x172 (= $x638 true)))
 (let (($x427 (= $x172 true)))
 (let (($x32 (= $x427 true)))
 (let (($x435 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x68 (= $x435 true)))
 (let (($x260 (= $x68 true)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x313 (= (_ bv0 32) ?x201)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x828 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x523 (and $x828 $x281)))
 (let (($x238 (and $x523 $x313)))
 (let (($x588 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x653 (and $x588 $x238)))
 (let (($x843 (= $x653 true)))
 (let (($x535 (= $x843 true)))
 (let (($x785 (= $x535 true)))
 (let (($x729 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x244 (=> $x729 false)))
 (let ((?x344 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x210 (bvuge ?x344 (_ bv1 32))))
 (let (($x522 (= $x729 $x210)))
 (let (($x398 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x176 (=> $x398 $x309)))
 (let (($x771 (= ?x344 (_ bv0 32))))
 (let (($x676 (= $x398 $x771)))
 (let (($x111 (and $x676 $x176)))
 (let (($x338 (and $x111 $x522)))
 (let (($x803 (and $x338 $x244)))
 (let (($x457 (= $x803 true)))
 (let (($x259 (= $x457 true)))
 (let (($x464 (= $x259 true)))
 (let (($x212 (= $x119 $x210)))
 (let (($x429 (= $x573 $x771)))
 (let (($x196 (and $x429 $x182)))
 (let (($x518 (and $x196 $x212)))
 (let (($x57 (and $x518 $x104)))
 (let (($x723 (= $x57 true)))
 (let (($x849 (= $x723 true)))
 (let (($x204 (= $x849 true)))
 (let (($x425 (and $x204 $x464)))
 (let (($x319 (and $x425 $x785)))
 (let (($x29 (and $x319 $x260)))
 (let (($x448 (and $x29 $x32)))
 (let (($x333 (and $x448 $x508)))
 (let (($x352 (and $x333 $x563)))
 (let (($x59 (and $x352 $x480)))
 (let (($x763 (and $x59 $x657)))
 (let (($x415 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x686 (and $x415 $x763)))
 (let (($x500 (bvugt ?x684 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x684 (_ bv3 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x189 (=> (bvule ?x684 (bvsub (bvadd ?x684 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x500)))))))
 (let (($x432 (=> (and $x638 (bvule ?x684 (bvsub (bvadd ?x684 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x90 $x500)))))))
 (let (($x700 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x520 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x451 (=> $x520 (or false (or false (and true (or $x192 $x700)))))))
 (let (($x24 (=> (and $x638 $x520) (or false (or false (and true (or $x192 $x700)))))))
 (let (($x186 (and $x24 $x432)))
 (let (($x72 (and $x186 $x686)))
 (let (($x392 (=> $x72 $x496)))
 (not $x392))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0 () (_ BitVec 24))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x838 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x391 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x529 (concat ?x391 (concat ?x347 ?x838))))
 (let ((?x844 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0 ?x529)))
 (let (($x286 (= (_ bv0 24) ?x844)))
 (let (($x496 (= $x286 true)))
 (let (($x185 (= (_ bv0 24) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_23_0)))
 (let (($x483 (= $x185 true)))
 (let (($x657 (= $x483 true)))
 (let ((?x291 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x302 (= (_ bv0 3) ?x291)))
 (let (($x458 (= $x302 true)))
 (let (($x480 (= $x458 true)))
 (let (($x119 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x104 (=> $x119 false)))
 (let (($x709 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (ite $x709 (_ bv0 32) (_ bv1 32))))
 (let (($x197 (= $x119 (bvuge ?x538 (_ bv1 32)))))
 (let (($x309 (= false false)))
 (let (($x573 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x182 (=> $x573 $x309)))
 (let (($x205 (= $x573 (= ?x538 (_ bv0 32)))))
 (let (($x303 (and $x205 $x182)))
 (let (($x390 (and $x303 $x197)))
 (let (($x393 (and $x390 $x104)))
 (let (($x610 (= $x393 true)))
 (let (($x513 (= $x610 true)))
 (let (($x563 (= $x513 true)))
 (let (($x252 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x215 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x853 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x215) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x215))))
 (let (($x783 (and true $x853)))
 (let (($x193 (and $x853 $x783)))
 (let ((?x684 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x764 (concat (select input.dst.llvm-mem (bvadd ?x684 (_ bv1 32))) (select input.dst.llvm-mem ?x684))))
 (let ((?x868 (concat (select input.dst.llvm-mem (bvadd ?x684 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x684 (_ bv2 32))) ?x764))))
 (let (($x168 (= (bvand ?x868 (_ bv4294967288 32)) ?x868)))
 (let (($x219 (= (bvand ?x684 (_ bv4294967292 32)) ?x684)))
 (let (($x305 (and $x219 $x168)))
 (let (($x848 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x684 (bvsub ?x684 (_ bv4 32))) (bvult ?x684 (bvsub ?x684 (_ bv4 32))))))
 (let (($x482 (and (and (and (and (and $x783 $x848) $x219) $x305) $x193) $x252)))
 (let (($x312 (= true $x482)))
 (let (($x638 (not $x709)))
 (let (($x512 (=> $x638 $x312)))
 (let (($x318 (= $x512 true)))
 (let (($x715 (= $x318 true)))
 (let (($x508 (= $x715 true)))
 (let (($x172 (= $x638 true)))
 (let (($x427 (= $x172 true)))
 (let (($x32 (= $x427 true)))
 (let (($x435 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x68 (= $x435 true)))
 (let (($x260 (= $x68 true)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x313 (= (_ bv0 32) ?x201)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x828 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x523 (and $x828 $x281)))
 (let (($x238 (and $x523 $x313)))
 (let (($x588 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x653 (and $x588 $x238)))
 (let (($x843 (= $x653 true)))
 (let (($x535 (= $x843 true)))
 (let (($x785 (= $x535 true)))
 (let (($x729 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x244 (=> $x729 false)))
 (let ((?x344 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x210 (bvuge ?x344 (_ bv1 32))))
 (let (($x522 (= $x729 $x210)))
 (let (($x398 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x176 (=> $x398 $x309)))
 (let (($x771 (= ?x344 (_ bv0 32))))
 (let (($x676 (= $x398 $x771)))
 (let (($x111 (and $x676 $x176)))
 (let (($x338 (and $x111 $x522)))
 (let (($x803 (and $x338 $x244)))
 (let (($x457 (= $x803 true)))
 (let (($x259 (= $x457 true)))
 (let (($x464 (= $x259 true)))
 (let (($x212 (= $x119 $x210)))
 (let (($x429 (= $x573 $x771)))
 (let (($x196 (and $x429 $x182)))
 (let (($x518 (and $x196 $x212)))
 (let (($x57 (and $x518 $x104)))
 (let (($x723 (= $x57 true)))
 (let (($x849 (= $x723 true)))
 (let (($x204 (= $x849 true)))
 (let (($x425 (and $x204 $x464)))
 (let (($x319 (and $x425 $x785)))
 (let (($x29 (and $x319 $x260)))
 (let (($x448 (and $x29 $x32)))
 (let (($x333 (and $x448 $x508)))
 (let (($x352 (and $x333 $x563)))
 (let (($x59 (and $x352 $x480)))
 (let (($x763 (and $x59 $x657)))
 (let (($x415 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x686 (and $x415 $x763)))
 (let (($x500 (bvugt ?x684 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x684 (_ bv3 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x189 (=> (bvule ?x684 (bvsub (bvadd ?x684 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x500)))))))
 (let (($x432 (=> (and $x638 (bvule ?x684 (bvsub (bvadd ?x684 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x90 $x500)))))))
 (let (($x700 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x520 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x451 (=> $x520 (or false (or false (and true (or $x192 $x700)))))))
 (let (($x24 (=> (and $x638 $x520) (or false (or false (and true (or $x192 $x700)))))))
 (let (($x186 (and $x24 $x432)))
 (let (($x72 (and $x186 $x686)))
 (let (($x392 (=> $x72 $x496)))
 (not $x392))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 112
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0 () (_ BitVec 23))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x497 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x510 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x623 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x191 (concat (select input.dst.llvm-mem ?x623) (concat ?x510 (concat ?x497 ?x102)))))
 (let ((?x506 ((_ extract 22 0) ?x191)))
 (let ((?x714 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0 ?x506)))
 (let (($x343 (= (_ bv0 23) ?x714)))
 (let (($x606 (= $x343 true)))
 (let (($x683 (= (_ bv0 23) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0)))
 (let (($x397 (= $x683 true)))
 (let (($x284 (= $x397 true)))
 (let ((?x822 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x840 (= (_ bv0 3) ?x822)))
 (let (($x809 (= $x840 true)))
 (let (($x544 (= $x809 true)))
 (let (($x171 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x868 (=> $x171 true)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x550 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x817 (= $x171 (bvuge ?x550 (_ bv1 32)))))
 (let (($x804 (= false false)))
 (let (($x187 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x219 (=> $x187 $x804)))
 (let (($x349 (= $x187 (= ?x550 (_ bv0 32)))))
 (let (($x446 (and $x349 $x219)))
 (let (($x39 (and $x446 $x817)))
 (let (($x444 (and $x39 $x868)))
 (let (($x234 (= $x444 true)))
 (let (($x436 (= $x234 true)))
 (let (($x468 (= $x436 true)))
 (let (($x846 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x496 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x190) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x190))))
 (let (($x392 (and true $x496)))
 (let (($x341 (and $x496 $x392)))
 (let ((?x520 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x520 (_ bv1 32))) (select input.dst.llvm-mem ?x520))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x520 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x520 (_ bv2 32))) ?x460))))
 (let (($x461 (= (bvand ?x299 (_ bv4294967288 32)) ?x299)))
 (let (($x662 (= (bvand ?x520 (_ bv4294967292 32)) ?x520)))
 (let (($x581 (and $x662 $x461)))
 (let (($x364 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x520 (bvsub ?x520 (_ bv4 32))) (bvult ?x520 (bvsub ?x520 (_ bv4 32))))))
 (let (($x69 (and (and (and (and (and $x392 $x364) $x662) $x581) $x341) $x846)))
 (let (($x315 (= true $x69)))
 (let (($x709 (not $x17)))
 (let (($x345 (=> $x709 $x315)))
 (let (($x283 (= $x345 true)))
 (let (($x811 (= $x283 true)))
 (let (($x725 (= $x811 true)))
 (let (($x391 (= $x709 true)))
 (let (($x120 (= $x391 true)))
 (let (($x347 (= $x120 true)))
 (let (($x763 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x686 (= $x763 true)))
 (let (($x72 (= $x686 true)))
 (let ((?x302 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x458 (= (_ bv0 32) ?x302)))
 (let ((?x352 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x567 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x352)))
 (let (($x563 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (and $x563 $x567)))
 (let (($x480 (and $x291 $x458)))
 (let (($x513 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x513 $x480)))
 (let (($x782 (= $x59 true)))
 (let (($x642 (= $x782 true)))
 (let (($x185 (= $x642 true)))
 (let (($x333 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x205 (=> $x333 true)))
 (let ((?x848 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x409 (bvuge ?x848 (_ bv1 32))))
 (let (($x538 (= $x333 $x409)))
 (let (($x482 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x512 (=> $x482 $x804)))
 (let (($x612 (= ?x848 (_ bv0 32))))
 (let (($x312 (= $x482 $x612)))
 (let (($x318 (and $x312 $x512)))
 (let (($x720 (and $x318 $x538)))
 (let (($x303 (and $x720 $x205)))
 (let (($x216 (= $x303 true)))
 (let (($x197 (= $x216 true)))
 (let (($x390 (= $x197 true)))
 (let (($x764 (= $x171 $x409)))
 (let (($x369 (= $x187 $x612)))
 (let (($x248 (and $x369 $x219)))
 (let (($x675 (and $x248 $x764)))
 (let (($x867 (and $x675 $x868)))
 (let (($x821 (= $x867 true)))
 (let (($x168 (= $x821 true)))
 (let (($x305 (= $x168 true)))
 (let (($x393 (and $x305 $x390)))
 (let (($x483 (and $x393 $x185)))
 (let (($x740 (and $x483 $x72)))
 (let (($x838 (and $x740 $x347)))
 (let (($x507 (and $x838 $x725)))
 (let (($x247 (and $x507 $x468)))
 (let (($x533 (and $x247 $x544)))
 (let (($x122 (and $x533 $x284)))
 (let (($x573 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x365 (and $x573 $x122)))
 (let (($x161 (bvugt ?x520 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x520 (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x415 (=> (bvule ?x520 (bvsub (bvadd ?x520 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x161)))))))
 (let (($x380 (=> (and $x709 (bvule ?x520 (bvsub (bvadd ?x520 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x23 $x161)))))))
 (let (($x95 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x555 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x623)))
 (let (($x225 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x43 (=> $x225 (or false (or false (and true (or $x555 $x95)))))))
 (let (($x593 (=> (and $x709 $x225) (or false (or false (and true (or $x555 $x95)))))))
 (let (($x7 (and $x593 $x380)))
 (let (($x396 (and $x7 $x365)))
 (let (($x236 (=> $x396 $x606)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0 () (_ BitVec 23))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x497 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x510 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x623 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x191 (concat (select input.dst.llvm-mem ?x623) (concat ?x510 (concat ?x497 ?x102)))))
 (let ((?x506 ((_ extract 22 0) ?x191)))
 (let ((?x714 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0 ?x506)))
 (let (($x343 (= (_ bv0 23) ?x714)))
 (let (($x606 (= $x343 true)))
 (let (($x683 (= (_ bv0 23) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0)))
 (let (($x397 (= $x683 true)))
 (let (($x284 (= $x397 true)))
 (let ((?x822 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x840 (= (_ bv0 3) ?x822)))
 (let (($x809 (= $x840 true)))
 (let (($x544 (= $x809 true)))
 (let (($x171 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x868 (=> $x171 true)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x550 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x817 (= $x171 (bvuge ?x550 (_ bv1 32)))))
 (let (($x804 (= false false)))
 (let (($x187 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x219 (=> $x187 $x804)))
 (let (($x349 (= $x187 (= ?x550 (_ bv0 32)))))
 (let (($x446 (and $x349 $x219)))
 (let (($x39 (and $x446 $x817)))
 (let (($x444 (and $x39 $x868)))
 (let (($x234 (= $x444 true)))
 (let (($x436 (= $x234 true)))
 (let (($x468 (= $x436 true)))
 (let (($x846 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x496 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x190) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x190))))
 (let (($x392 (and true $x496)))
 (let (($x341 (and $x496 $x392)))
 (let ((?x520 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x520 (_ bv1 32))) (select input.dst.llvm-mem ?x520))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x520 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x520 (_ bv2 32))) ?x460))))
 (let (($x461 (= (bvand ?x299 (_ bv4294967288 32)) ?x299)))
 (let (($x662 (= (bvand ?x520 (_ bv4294967292 32)) ?x520)))
 (let (($x581 (and $x662 $x461)))
 (let (($x364 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x520 (bvsub ?x520 (_ bv4 32))) (bvult ?x520 (bvsub ?x520 (_ bv4 32))))))
 (let (($x69 (and (and (and (and (and $x392 $x364) $x662) $x581) $x341) $x846)))
 (let (($x315 (= true $x69)))
 (let (($x709 (not $x17)))
 (let (($x345 (=> $x709 $x315)))
 (let (($x283 (= $x345 true)))
 (let (($x811 (= $x283 true)))
 (let (($x725 (= $x811 true)))
 (let (($x391 (= $x709 true)))
 (let (($x120 (= $x391 true)))
 (let (($x347 (= $x120 true)))
 (let (($x763 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x686 (= $x763 true)))
 (let (($x72 (= $x686 true)))
 (let ((?x302 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x458 (= (_ bv0 32) ?x302)))
 (let ((?x352 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x567 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x352)))
 (let (($x563 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (and $x563 $x567)))
 (let (($x480 (and $x291 $x458)))
 (let (($x513 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x513 $x480)))
 (let (($x782 (= $x59 true)))
 (let (($x642 (= $x782 true)))
 (let (($x185 (= $x642 true)))
 (let (($x333 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x205 (=> $x333 true)))
 (let ((?x848 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x409 (bvuge ?x848 (_ bv1 32))))
 (let (($x538 (= $x333 $x409)))
 (let (($x482 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x512 (=> $x482 $x804)))
 (let (($x612 (= ?x848 (_ bv0 32))))
 (let (($x312 (= $x482 $x612)))
 (let (($x318 (and $x312 $x512)))
 (let (($x720 (and $x318 $x538)))
 (let (($x303 (and $x720 $x205)))
 (let (($x216 (= $x303 true)))
 (let (($x197 (= $x216 true)))
 (let (($x390 (= $x197 true)))
 (let (($x764 (= $x171 $x409)))
 (let (($x369 (= $x187 $x612)))
 (let (($x248 (and $x369 $x219)))
 (let (($x675 (and $x248 $x764)))
 (let (($x867 (and $x675 $x868)))
 (let (($x821 (= $x867 true)))
 (let (($x168 (= $x821 true)))
 (let (($x305 (= $x168 true)))
 (let (($x393 (and $x305 $x390)))
 (let (($x483 (and $x393 $x185)))
 (let (($x740 (and $x483 $x72)))
 (let (($x838 (and $x740 $x347)))
 (let (($x507 (and $x838 $x725)))
 (let (($x247 (and $x507 $x468)))
 (let (($x533 (and $x247 $x544)))
 (let (($x122 (and $x533 $x284)))
 (let (($x573 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x365 (and $x573 $x122)))
 (let (($x161 (bvugt ?x520 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x520 (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x415 (=> (bvule ?x520 (bvsub (bvadd ?x520 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x161)))))))
 (let (($x380 (=> (and $x709 (bvule ?x520 (bvsub (bvadd ?x520 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x23 $x161)))))))
 (let (($x95 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x555 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x623)))
 (let (($x225 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x43 (=> $x225 (or false (or false (and true (or $x555 $x95)))))))
 (let (($x593 (=> (and $x709 $x225) (or false (or false (and true (or $x555 $x95)))))))
 (let (($x7 (and $x593 $x380)))
 (let (($x396 (and $x7 $x365)))
 (let (($x236 (=> $x396 $x606)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0 #b00000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_17)
(function @fun_17
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_17 #b10000000000000000000000000000010) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0 () (_ BitVec 23)
    #b00000000000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv57264 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv57264 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0 () (_ BitVec 23) (_ bv0 23))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv294216 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv294216 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv294219 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 113
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0 () (_ BitVec 23))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x346 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x615 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x447 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x73 (concat (select input.dst.llvm-mem ?x447) (concat ?x615 (concat ?x41 ?x346)))))
 (let ((?x116 ((_ extract 22 0) ?x73)))
 (let ((?x788 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0 ?x116)))
 (let (($x297 (= (_ bv0 23) ?x788)))
 (let (($x465 (= $x297 true)))
 (let (($x316 (= (_ bv0 23) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0)))
 (let (($x489 (= $x316 true)))
 (let (($x78 (= $x489 true)))
 (let ((?x494 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x292 (= (_ bv0 3) ?x494)))
 (let (($x158 (= $x292 true)))
 (let (($x801 (= $x158 true)))
 (let (($x348 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x299 (=> $x348 false)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x261 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (= $x348 (bvuge ?x261 (_ bv1 32)))))
 (let (($x546 (= false false)))
 (let (($x394 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x662 (=> $x394 $x546)))
 (let (($x378 (= $x394 (= ?x261 (_ bv0 32)))))
 (let (($x363 (and $x378 $x662)))
 (let (($x242 (and $x363 $x124)))
 (let (($x410 (and $x242 $x299)))
 (let (($x328 (= $x410 true)))
 (let (($x682 (= $x328 true)))
 (let (($x60 (= $x682 true)))
 (let (($x849 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x102 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x506 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x102) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x102))))
 (let (($x714 (and true $x506)))
 (let (($x398 (and $x506 $x714)))
 (let ((?x225 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x771 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x119))))
 (let (($x729 (= (bvand ?x771 (_ bv4294967288 32)) ?x771)))
 (let (($x334 (= (bvand ?x225 (_ bv4294967292 32)) ?x225)))
 (let (($x854 (and $x334 $x729)))
 (let (($x170 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x225 (bvsub ?x225 (_ bv4 32))) (bvult ?x225 (bvsub ?x225 (_ bv4 32))))))
 (let (($x204 (and (and (and (and (and $x714 $x170) $x334) $x854) $x398) $x849)))
 (let (($x676 (= true $x204)))
 (let (($x709 (not $x17)))
 (let (($x425 (=> $x709 $x676)))
 (let (($x417 (= $x425 true)))
 (let (($x457 (= $x417 true)))
 (let (($x259 (= $x457 true)))
 (let (($x551 (= $x709 true)))
 (let (($x510 (= $x551 true)))
 (let (($x213 (= $x510 true)))
 (let (($x122 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x365 (= $x122 true)))
 (let (($x396 (= $x365 true)))
 (let ((?x840 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x809 (= (_ bv0 32) ?x840)))
 (let ((?x247 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x247)))
 (let (($x468 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x822 (and $x468 $x56)))
 (let (($x544 (and $x822 $x809)))
 (let (($x436 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x533 (and $x436 $x544)))
 (let (($x377 (= $x533 true)))
 (let (($x382 (= $x377 true)))
 (let (($x683 (= $x382 true)))
 (let (($x507 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x349 (=> $x507 false)))
 (let ((?x364 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x847 (bvuge ?x364 (_ bv1 32))))
 (let (($x550 (= $x507 $x847)))
 (let (($x69 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x345 (=> $x69 $x546)))
 (let (($x832 (= ?x364 (_ bv0 32))))
 (let (($x315 (= $x69 $x832)))
 (let (($x283 (and $x315 $x345)))
 (let (($x554 (and $x283 $x550)))
 (let (($x446 (and $x554 $x349)))
 (let (($x577 (= $x446 true)))
 (let (($x817 (= $x577 true)))
 (let (($x39 (= $x817 true)))
 (let (($x460 (= $x348 $x847)))
 (let (($x262 (= $x394 $x832)))
 (let (($x129 (and $x262 $x662)))
 (let (($x614 (and $x129 $x460)))
 (let (($x317 (and $x614 $x299)))
 (let (($x413 (= $x317 true)))
 (let (($x461 (= $x413 true)))
 (let (($x581 (= $x461 true)))
 (let (($x444 (and $x581 $x39)))
 (let (($x397 (and $x444 $x683)))
 (let (($x169 (and $x397 $x396)))
 (let (($x497 (and $x169 $x213)))
 (let (($x338 (and $x497 $x259)))
 (let (($x76 (and $x338 $x60)))
 (let (($x707 (and $x76 $x801)))
 (let (($x403 (and $x707 $x78)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x488 (and $x187 $x403)))
 (let (($x432 (bvugt ?x225 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x225 (_ bv3 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x573 (=> (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x189 $x432)))))))
 (let (($x135 (=> (and $x709 (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x189 $x432)))))))
 (let (($x24 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x451 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x447)))
 (let (($x90 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x500 (=> $x90 (or false (or false (and true (or $x451 $x24)))))))
 (let (($x443 (=> (and $x709 $x90) (or false (or false (and true (or $x451 $x24)))))))
 (let (($x99 (and $x443 $x135)))
 (let (($x47 (and $x99 $x488)))
 (let (($x583 (=> $x47 $x465)))
 (not $x583))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0 () (_ BitVec 23))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x346 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x615 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x447 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x73 (concat (select input.dst.llvm-mem ?x447) (concat ?x615 (concat ?x41 ?x346)))))
 (let ((?x116 ((_ extract 22 0) ?x73)))
 (let ((?x788 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0 ?x116)))
 (let (($x297 (= (_ bv0 23) ?x788)))
 (let (($x465 (= $x297 true)))
 (let (($x316 (= (_ bv0 23) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_22_0)))
 (let (($x489 (= $x316 true)))
 (let (($x78 (= $x489 true)))
 (let ((?x494 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x292 (= (_ bv0 3) ?x494)))
 (let (($x158 (= $x292 true)))
 (let (($x801 (= $x158 true)))
 (let (($x348 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x299 (=> $x348 false)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x261 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (= $x348 (bvuge ?x261 (_ bv1 32)))))
 (let (($x546 (= false false)))
 (let (($x394 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x662 (=> $x394 $x546)))
 (let (($x378 (= $x394 (= ?x261 (_ bv0 32)))))
 (let (($x363 (and $x378 $x662)))
 (let (($x242 (and $x363 $x124)))
 (let (($x410 (and $x242 $x299)))
 (let (($x328 (= $x410 true)))
 (let (($x682 (= $x328 true)))
 (let (($x60 (= $x682 true)))
 (let (($x849 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x102 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x506 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x102) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x102))))
 (let (($x714 (and true $x506)))
 (let (($x398 (and $x506 $x714)))
 (let ((?x225 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x771 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x119))))
 (let (($x729 (= (bvand ?x771 (_ bv4294967288 32)) ?x771)))
 (let (($x334 (= (bvand ?x225 (_ bv4294967292 32)) ?x225)))
 (let (($x854 (and $x334 $x729)))
 (let (($x170 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x225 (bvsub ?x225 (_ bv4 32))) (bvult ?x225 (bvsub ?x225 (_ bv4 32))))))
 (let (($x204 (and (and (and (and (and $x714 $x170) $x334) $x854) $x398) $x849)))
 (let (($x676 (= true $x204)))
 (let (($x709 (not $x17)))
 (let (($x425 (=> $x709 $x676)))
 (let (($x417 (= $x425 true)))
 (let (($x457 (= $x417 true)))
 (let (($x259 (= $x457 true)))
 (let (($x551 (= $x709 true)))
 (let (($x510 (= $x551 true)))
 (let (($x213 (= $x510 true)))
 (let (($x122 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x365 (= $x122 true)))
 (let (($x396 (= $x365 true)))
 (let ((?x840 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x809 (= (_ bv0 32) ?x840)))
 (let ((?x247 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x247)))
 (let (($x468 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x822 (and $x468 $x56)))
 (let (($x544 (and $x822 $x809)))
 (let (($x436 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x533 (and $x436 $x544)))
 (let (($x377 (= $x533 true)))
 (let (($x382 (= $x377 true)))
 (let (($x683 (= $x382 true)))
 (let (($x507 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x349 (=> $x507 false)))
 (let ((?x364 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x847 (bvuge ?x364 (_ bv1 32))))
 (let (($x550 (= $x507 $x847)))
 (let (($x69 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x345 (=> $x69 $x546)))
 (let (($x832 (= ?x364 (_ bv0 32))))
 (let (($x315 (= $x69 $x832)))
 (let (($x283 (and $x315 $x345)))
 (let (($x554 (and $x283 $x550)))
 (let (($x446 (and $x554 $x349)))
 (let (($x577 (= $x446 true)))
 (let (($x817 (= $x577 true)))
 (let (($x39 (= $x817 true)))
 (let (($x460 (= $x348 $x847)))
 (let (($x262 (= $x394 $x832)))
 (let (($x129 (and $x262 $x662)))
 (let (($x614 (and $x129 $x460)))
 (let (($x317 (and $x614 $x299)))
 (let (($x413 (= $x317 true)))
 (let (($x461 (= $x413 true)))
 (let (($x581 (= $x461 true)))
 (let (($x444 (and $x581 $x39)))
 (let (($x397 (and $x444 $x683)))
 (let (($x169 (and $x397 $x396)))
 (let (($x497 (and $x169 $x213)))
 (let (($x338 (and $x497 $x259)))
 (let (($x76 (and $x338 $x60)))
 (let (($x707 (and $x76 $x801)))
 (let (($x403 (and $x707 $x78)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x488 (and $x187 $x403)))
 (let (($x432 (bvugt ?x225 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x225 (_ bv3 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x573 (=> (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x189 $x432)))))))
 (let (($x135 (=> (and $x709 (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x189 $x432)))))))
 (let (($x24 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x451 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x447)))
 (let (($x90 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x500 (=> $x90 (or false (or false (and true (or $x451 $x24)))))))
 (let (($x443 (=> (and $x709 $x90) (or false (or false (and true (or $x451 $x24)))))))
 (let (($x99 (and $x443 $x135)))
 (let (($x47 (and $x99 $x488)))
 (let (($x583 (=> $x47 $x465)))
 (not $x583))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 114
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0 () (_ BitVec 22))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x435 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x828 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x684 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x523 (concat (select input.dst.llvm-mem ?x684) (concat ?x97 (concat ?x828 ?x435)))))
 (let ((?x238 ((_ extract 21 0) ?x523)))
 (let ((?x535 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0 ?x238)))
 (let (($x853 (= (_ bv0 22) ?x535)))
 (let (($x783 (= $x853 true)))
 (let (($x448 (= (_ bv0 22) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0)))
 (let (($x319 (= $x448 true)))
 (let (($x201 (= $x319 true)))
 (let ((?x653 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x843 (= (_ bv0 3) ?x653)))
 (let (($x659 (= $x843 true)))
 (let (($x785 (= $x659 true)))
 (let (($x182 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x771 (=> $x182 true)))
 (let (($x278 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x657 (ite $x278 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (= $x182 (bvuge ?x657 (_ bv1 32)))))
 (let (($x226 (= false false)))
 (let (($x236 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x334 (=> $x236 $x226)))
 (let (($x209 (= $x236 (= ?x657 (_ bv0 32)))))
 (let (($x286 (and $x209 $x334)))
 (let (($x806 (and $x286 $x57)))
 (let (($x637 (and $x806 $x771)))
 (let (($x716 (= $x637 true)))
 (let (($x244 (= $x716 true)))
 (let (($x522 (= $x244 true)))
 (let (($x168 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x346 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x116 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x346) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x346))))
 (let (($x788 (and true $x116)))
 (let (($x482 (and $x116 $x788)))
 (let ((?x90 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x612 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x171))))
 (let (($x333 (= (bvand ?x612 (_ bv4294967288 32)) ?x612)))
 (let (($x273 (= (bvand ?x90 (_ bv4294967292 32)) ?x90)))
 (let (($x252 (and $x273 $x333)))
 (let (($x100 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x90 (bvsub ?x90 (_ bv4 32))) (bvult ?x90 (bvsub ?x90 (_ bv4 32))))))
 (let (($x305 (and (and (and (and (and $x788 $x100) $x273) $x252) $x482) $x168)))
 (let (($x312 (= true $x305)))
 (let (($x17 (not $x278)))
 (let (($x393 (=> $x17 $x312)))
 (let (($x610 (= $x393 true)))
 (let (($x216 (= $x610 true)))
 (let (($x197 (= $x216 true)))
 (let (($x693 (= $x17 true)))
 (let (($x615 (= $x693 true)))
 (let (($x207 (= $x615 true)))
 (let (($x403 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x488 (= $x403 true)))
 (let (($x47 (= $x488 true)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x292)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x494 (and $x60 $x162)))
 (let (($x801 (and $x494 $x158)))
 (let (($x682 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x707 (and $x682 $x801)))
 (let (($x235 (= $x707 true)))
 (let (($x475 (= $x235 true)))
 (let (($x316 (= $x475 true)))
 (let (($x338 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x378 (=> $x338 true)))
 (let ((?x170 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x170 (_ bv1 32))))
 (let (($x261 (= $x338 $x176)))
 (let (($x204 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x425 (=> $x204 $x226)))
 (let (($x212 (= ?x170 (_ bv0 32))))
 (let (($x676 (= $x204 $x212)))
 (let (($x417 (and $x676 $x425)))
 (let (($x404 (and $x417 $x261)))
 (let (($x363 (and $x404 $x378)))
 (let (($x508 (= $x363 true)))
 (let (($x124 (= $x508 true)))
 (let (($x242 (= $x124 true)))
 (let (($x119 (= $x182 $x176)))
 (let (($x193 (= $x236 $x212)))
 (let (($x518 (and $x193 $x334)))
 (let (($x311 (and $x518 $x119)))
 (let (($x666 (and $x311 $x771)))
 (let (($x111 (= $x666 true)))
 (let (($x729 (= $x111 true)))
 (let (($x854 (= $x729 true)))
 (let (($x410 (and $x854 $x242)))
 (let (($x489 (and $x410 $x316)))
 (let (($x340 (and $x489 $x47)))
 (let (($x41 (and $x340 $x207)))
 (let (($x720 (and $x41 $x197)))
 (let (($x803 (and $x720 $x522)))
 (let (($x68 (and $x803 $x785)))
 (let (($x215 (and $x68 $x201)))
 (let (($x394 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x427 (and $x394 $x215)))
 (let (($x380 (bvugt ?x90 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x90 (_ bv3 32))))
 (let (($x415 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x187 (=> (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x415 $x380)))))))
 (let (($x306 (=> (and $x17 (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x415 $x380)))))))
 (let (($x593 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x684)))
 (let (($x23 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x161 (=> $x23 (or false (or false (and true (or $x43 $x593)))))))
 (let (($x623 (=> (and $x17 $x23) (or false (or false (and true (or $x43 $x593)))))))
 (let (($x37 (and $x623 $x306)))
 (let (($x281 (and $x37 $x427)))
 (let (($x530 (=> $x281 $x783)))
 (not $x530))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0 () (_ BitVec 22))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x435 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x828 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x684 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x523 (concat (select input.dst.llvm-mem ?x684) (concat ?x97 (concat ?x828 ?x435)))))
 (let ((?x238 ((_ extract 21 0) ?x523)))
 (let ((?x535 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0 ?x238)))
 (let (($x853 (= (_ bv0 22) ?x535)))
 (let (($x783 (= $x853 true)))
 (let (($x448 (= (_ bv0 22) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0)))
 (let (($x319 (= $x448 true)))
 (let (($x201 (= $x319 true)))
 (let ((?x653 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x843 (= (_ bv0 3) ?x653)))
 (let (($x659 (= $x843 true)))
 (let (($x785 (= $x659 true)))
 (let (($x182 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x771 (=> $x182 true)))
 (let (($x278 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x657 (ite $x278 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (= $x182 (bvuge ?x657 (_ bv1 32)))))
 (let (($x226 (= false false)))
 (let (($x236 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x334 (=> $x236 $x226)))
 (let (($x209 (= $x236 (= ?x657 (_ bv0 32)))))
 (let (($x286 (and $x209 $x334)))
 (let (($x806 (and $x286 $x57)))
 (let (($x637 (and $x806 $x771)))
 (let (($x716 (= $x637 true)))
 (let (($x244 (= $x716 true)))
 (let (($x522 (= $x244 true)))
 (let (($x168 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x346 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x116 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x346) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x346))))
 (let (($x788 (and true $x116)))
 (let (($x482 (and $x116 $x788)))
 (let ((?x90 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x612 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x171))))
 (let (($x333 (= (bvand ?x612 (_ bv4294967288 32)) ?x612)))
 (let (($x273 (= (bvand ?x90 (_ bv4294967292 32)) ?x90)))
 (let (($x252 (and $x273 $x333)))
 (let (($x100 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x90 (bvsub ?x90 (_ bv4 32))) (bvult ?x90 (bvsub ?x90 (_ bv4 32))))))
 (let (($x305 (and (and (and (and (and $x788 $x100) $x273) $x252) $x482) $x168)))
 (let (($x312 (= true $x305)))
 (let (($x17 (not $x278)))
 (let (($x393 (=> $x17 $x312)))
 (let (($x610 (= $x393 true)))
 (let (($x216 (= $x610 true)))
 (let (($x197 (= $x216 true)))
 (let (($x693 (= $x17 true)))
 (let (($x615 (= $x693 true)))
 (let (($x207 (= $x615 true)))
 (let (($x403 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x488 (= $x403 true)))
 (let (($x47 (= $x488 true)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x292)))
 (let ((?x76 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x494 (and $x60 $x162)))
 (let (($x801 (and $x494 $x158)))
 (let (($x682 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x707 (and $x682 $x801)))
 (let (($x235 (= $x707 true)))
 (let (($x475 (= $x235 true)))
 (let (($x316 (= $x475 true)))
 (let (($x338 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x378 (=> $x338 true)))
 (let ((?x170 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x170 (_ bv1 32))))
 (let (($x261 (= $x338 $x176)))
 (let (($x204 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x425 (=> $x204 $x226)))
 (let (($x212 (= ?x170 (_ bv0 32))))
 (let (($x676 (= $x204 $x212)))
 (let (($x417 (and $x676 $x425)))
 (let (($x404 (and $x417 $x261)))
 (let (($x363 (and $x404 $x378)))
 (let (($x508 (= $x363 true)))
 (let (($x124 (= $x508 true)))
 (let (($x242 (= $x124 true)))
 (let (($x119 (= $x182 $x176)))
 (let (($x193 (= $x236 $x212)))
 (let (($x518 (and $x193 $x334)))
 (let (($x311 (and $x518 $x119)))
 (let (($x666 (and $x311 $x771)))
 (let (($x111 (= $x666 true)))
 (let (($x729 (= $x111 true)))
 (let (($x854 (= $x729 true)))
 (let (($x410 (and $x854 $x242)))
 (let (($x489 (and $x410 $x316)))
 (let (($x340 (and $x489 $x47)))
 (let (($x41 (and $x340 $x207)))
 (let (($x720 (and $x41 $x197)))
 (let (($x803 (and $x720 $x522)))
 (let (($x68 (and $x803 $x785)))
 (let (($x215 (and $x68 $x201)))
 (let (($x394 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x427 (and $x394 $x215)))
 (let (($x380 (bvugt ?x90 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x90 (_ bv3 32))))
 (let (($x415 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x187 (=> (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x415 $x380)))))))
 (let (($x306 (=> (and $x17 (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x415 $x380)))))))
 (let (($x593 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x684)))
 (let (($x23 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x161 (=> $x23 (or false (or false (and true (or $x43 $x593)))))))
 (let (($x623 (=> (and $x17 $x23) (or false (or false (and true (or $x43 $x593)))))))
 (let (($x37 (and $x623 $x306)))
 (let (($x281 (and $x37 $x427)))
 (let (($x530 (=> $x281 $x783)))
 (not $x530))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0 #b0000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_17)
(function @fun_17
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_17 #b10000000000000000000000000000010) #b00100000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0 () (_ BitVec 22)
    #b0000000000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv245616 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv245616 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0 () (_ BitVec 22) (_ bv0 22))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv302984 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv302984 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv302987 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 115
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0 () (_ BitVec 22))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x763 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x563 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x529 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x520 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x291 (concat (select input.dst.llvm-mem ?x520) (concat ?x529 (concat ?x563 ?x763)))))
 (let ((?x480 ((_ extract 21 0) ?x291)))
 (let ((?x642 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0 ?x480)))
 (let (($x496 (= (_ bv0 22) ?x642)))
 (let (($x392 (= $x496 true)))
 (let (($x838 (= (_ bv0 22) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0)))
 (let (($x483 (= $x838 true)))
 (let (($x302 (= $x483 true)))
 (let ((?x59 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x782 (= (_ bv0 3) ?x59)))
 (let (($x844 (= $x782 true)))
 (let (($x185 (= $x844 true)))
 (let (($x219 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x612 (=> $x219 false)))
 (let (($x278 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x284 (ite $x278 (_ bv0 32) (_ bv1 32))))
 (let (($x867 (= $x219 (bvuge ?x284 (_ bv1 32)))))
 (let (($x429 (= false false)))
 (let (($x583 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x273 (=> $x583 $x429)))
 (let (($x723 (= $x583 (= ?x284 (_ bv0 32)))))
 (let (($x191 (and $x723 $x273)))
 (let (($x681 (and $x191 $x867)))
 (let (($x541 (and $x681 $x612)))
 (let (($x309 (= $x541 true)))
 (let (($x205 (= $x309 true)))
 (let (($x538 (= $x205 true)))
 (let (($x461 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x435 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x238 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435))))
 (let (($x535 (and true $x238)))
 (let (($x69 (and $x238 $x535)))
 (let ((?x23 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x832 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x348))))
 (let (($x507 (= (bvand ?x832 (_ bv4294967288 32)) ?x832)))
 (let (($x808 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x846 (and $x808 $x507)))
 (let (($x210 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x23 (bvsub ?x23 (_ bv4 32))) (bvult ?x23 (bvsub ?x23 (_ bv4 32))))))
 (let (($x581 (and (and (and (and (and $x535 $x210) $x808) $x846) $x69) $x461)))
 (let (($x315 (= true $x581)))
 (let (($x17 (not $x278)))
 (let (($x444 (=> $x17 $x315)))
 (let (($x234 (= $x444 true)))
 (let (($x577 (= $x234 true)))
 (let (($x817 (= $x577 true)))
 (let (($x9 (= $x17 true)))
 (let (($x97 (= $x9 true)))
 (let (($x588 (= $x97 true)))
 (let (($x215 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x427 (= $x215 true)))
 (let (($x281 (= $x427 true)))
 (let ((?x843 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x659 (= (_ bv0 32) ?x843)))
 (let ((?x803 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x803)))
 (let (($x522 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x653 (and $x522 $x260)))
 (let (($x785 (and $x653 $x659)))
 (let (($x244 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x244 $x785)))
 (let (($x172 (= $x68 true)))
 (let (($x29 (= $x172 true)))
 (let (($x448 (= $x29 true)))
 (let (($x720 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x209 (=> $x720 false)))
 (let ((?x100 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x512 (bvuge ?x100 (_ bv1 32))))
 (let (($x657 (= $x720 $x512)))
 (let (($x305 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x393 (=> $x305 $x429)))
 (let (($x764 (= ?x100 (_ bv0 32))))
 (let (($x312 (= $x305 $x764)))
 (let (($x610 (and $x312 $x393)))
 (let (($x580 (and $x610 $x657)))
 (let (($x286 (and $x580 $x209)))
 (let (($x725 (= $x286 true)))
 (let (($x57 (= $x725 true)))
 (let (($x806 (= $x57 true)))
 (let (($x171 (= $x219 $x512)))
 (let (($x341 (= $x583 $x764)))
 (let (($x675 (and $x341 $x273)))
 (let (($x859 (and $x675 $x171)))
 (let (($x268 (and $x859 $x612)))
 (let (($x318 (= $x268 true)))
 (let (($x333 (= $x318 true)))
 (let (($x252 (= $x333 true)))
 (let (($x637 (and $x252 $x806)))
 (let (($x319 (and $x637 $x448)))
 (let (($x313 (and $x319 $x281)))
 (let (($x828 (and $x313 $x588)))
 (let (($x554 (and $x828 $x817)))
 (let (($x303 (and $x554 $x538)))
 (let (($x686 (and $x303 $x185)))
 (let (($x190 (and $x686 $x302)))
 (let (($x236 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x120 (and $x236 $x190)))
 (let (($x135 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x23 (_ bv3 32))))
 (let (($x573 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x394 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x573 $x135)))))))
 (let (($x539 (=> (and $x17 (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x573 $x135)))))))
 (let (($x443 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x500 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x520)))
 (let (($x189 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x432 (=> $x189 (or false (or false (and true (or $x500 $x443)))))))
 (let (($x447 (=> (and $x17 $x189) (or false (or false (and true (or $x500 $x443)))))))
 (let (($x186 (and $x447 $x539)))
 (let (($x567 (and $x186 $x120)))
 (let (($x296 (=> $x567 $x392)))
 (not $x296))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0 () (_ BitVec 22))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x763 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x563 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x529 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x520 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x291 (concat (select input.dst.llvm-mem ?x520) (concat ?x529 (concat ?x563 ?x763)))))
 (let ((?x480 ((_ extract 21 0) ?x291)))
 (let ((?x642 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0 ?x480)))
 (let (($x496 (= (_ bv0 22) ?x642)))
 (let (($x392 (= $x496 true)))
 (let (($x838 (= (_ bv0 22) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_21_0)))
 (let (($x483 (= $x838 true)))
 (let (($x302 (= $x483 true)))
 (let ((?x59 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x782 (= (_ bv0 3) ?x59)))
 (let (($x844 (= $x782 true)))
 (let (($x185 (= $x844 true)))
 (let (($x219 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x612 (=> $x219 false)))
 (let (($x278 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x284 (ite $x278 (_ bv0 32) (_ bv1 32))))
 (let (($x867 (= $x219 (bvuge ?x284 (_ bv1 32)))))
 (let (($x429 (= false false)))
 (let (($x583 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x273 (=> $x583 $x429)))
 (let (($x723 (= $x583 (= ?x284 (_ bv0 32)))))
 (let (($x191 (and $x723 $x273)))
 (let (($x681 (and $x191 $x867)))
 (let (($x541 (and $x681 $x612)))
 (let (($x309 (= $x541 true)))
 (let (($x205 (= $x309 true)))
 (let (($x538 (= $x205 true)))
 (let (($x461 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x435 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x238 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435))))
 (let (($x535 (and true $x238)))
 (let (($x69 (and $x238 $x535)))
 (let ((?x23 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x832 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x348))))
 (let (($x507 (= (bvand ?x832 (_ bv4294967288 32)) ?x832)))
 (let (($x808 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x846 (and $x808 $x507)))
 (let (($x210 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x23 (bvsub ?x23 (_ bv4 32))) (bvult ?x23 (bvsub ?x23 (_ bv4 32))))))
 (let (($x581 (and (and (and (and (and $x535 $x210) $x808) $x846) $x69) $x461)))
 (let (($x315 (= true $x581)))
 (let (($x17 (not $x278)))
 (let (($x444 (=> $x17 $x315)))
 (let (($x234 (= $x444 true)))
 (let (($x577 (= $x234 true)))
 (let (($x817 (= $x577 true)))
 (let (($x9 (= $x17 true)))
 (let (($x97 (= $x9 true)))
 (let (($x588 (= $x97 true)))
 (let (($x215 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x427 (= $x215 true)))
 (let (($x281 (= $x427 true)))
 (let ((?x843 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x659 (= (_ bv0 32) ?x843)))
 (let ((?x803 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x803)))
 (let (($x522 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x653 (and $x522 $x260)))
 (let (($x785 (and $x653 $x659)))
 (let (($x244 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x244 $x785)))
 (let (($x172 (= $x68 true)))
 (let (($x29 (= $x172 true)))
 (let (($x448 (= $x29 true)))
 (let (($x720 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x209 (=> $x720 false)))
 (let ((?x100 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x512 (bvuge ?x100 (_ bv1 32))))
 (let (($x657 (= $x720 $x512)))
 (let (($x305 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x393 (=> $x305 $x429)))
 (let (($x764 (= ?x100 (_ bv0 32))))
 (let (($x312 (= $x305 $x764)))
 (let (($x610 (and $x312 $x393)))
 (let (($x580 (and $x610 $x657)))
 (let (($x286 (and $x580 $x209)))
 (let (($x725 (= $x286 true)))
 (let (($x57 (= $x725 true)))
 (let (($x806 (= $x57 true)))
 (let (($x171 (= $x219 $x512)))
 (let (($x341 (= $x583 $x764)))
 (let (($x675 (and $x341 $x273)))
 (let (($x859 (and $x675 $x171)))
 (let (($x268 (and $x859 $x612)))
 (let (($x318 (= $x268 true)))
 (let (($x333 (= $x318 true)))
 (let (($x252 (= $x333 true)))
 (let (($x637 (and $x252 $x806)))
 (let (($x319 (and $x637 $x448)))
 (let (($x313 (and $x319 $x281)))
 (let (($x828 (and $x313 $x588)))
 (let (($x554 (and $x828 $x817)))
 (let (($x303 (and $x554 $x538)))
 (let (($x686 (and $x303 $x185)))
 (let (($x190 (and $x686 $x302)))
 (let (($x236 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x120 (and $x236 $x190)))
 (let (($x135 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x23 (_ bv3 32))))
 (let (($x573 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x394 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x573 $x135)))))))
 (let (($x539 (=> (and $x17 (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x573 $x135)))))))
 (let (($x443 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x500 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x520)))
 (let (($x189 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x432 (=> $x189 (or false (or false (and true (or $x500 $x443)))))))
 (let (($x447 (=> (and $x17 $x189) (or false (or false (and true (or $x500 $x443)))))))
 (let (($x186 (and $x447 $x539)))
 (let (($x567 (and $x186 $x120)))
 (let (($x296 (=> $x567 $x392)))
 (not $x296))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 116
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0 () (_ BitVec 21))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x468 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x225 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x822 (concat (select input.dst.llvm-mem ?x225) (concat ?x155 (concat ?x468 ?x122)))))
 (let ((?x544 ((_ extract 20 0) ?x822)))
 (let ((?x382 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0 ?x544)))
 (let (($x506 (= (_ bv0 21) ?x382)))
 (let (($x714 (= $x506 true)))
 (let (($x497 (= (_ bv0 21) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0)))
 (let (($x397 (= $x497 true)))
 (let (($x840 (= $x397 true)))
 (let ((?x533 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x377 (= (_ bv0 3) ?x533)))
 (let (($x592 (= $x377 true)))
 (let (($x683 (= $x592 true)))
 (let (($x662 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x832 (=> $x662 true)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x317 (= $x662 (bvuge ?x78 (_ bv1 32)))))
 (let (($x369 (= false false)))
 (let (($x530 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x808 (=> $x530 $x369)))
 (let (($x821 (= $x530 (= ?x78 (_ bv0 32)))))
 (let (($x73 (and $x821 $x808)))
 (let (($x638 (and $x73 $x317)))
 (let (($x196 (and $x638 $x832)))
 (let (($x804 (= $x196 true)))
 (let (($x349 (= $x804 true)))
 (let (($x550 (= $x349 true)))
 (let (($x729 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x763 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x480 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763))))
 (let (($x642 (and true $x480)))
 (let (($x204 (and $x480 $x642)))
 (let ((?x189 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x182))))
 (let (($x338 (= (bvand ?x212 (_ bv4294967288 32)) ?x212)))
 (let (($x140 (= (bvand ?x189 (_ bv4294967292 32)) ?x189)))
 (let (($x849 (and $x140 $x338)))
 (let (($x409 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x189 (bvsub ?x189 (_ bv4 32))) (bvult ?x189 (bvsub ?x189 (_ bv4 32))))))
 (let (($x854 (and (and (and (and (and $x642 $x409) $x140) $x849) $x204) $x729)))
 (let (($x676 (= true $x854)))
 (let (($x278 (not $x88)))
 (let (($x410 (=> $x278 $x676)))
 (let (($x328 (= $x410 true)))
 (let (($x508 (= $x328 true)))
 (let (($x124 (= $x508 true)))
 (let (($x352 (= $x278 true)))
 (let (($x529 (= $x352 true)))
 (let (($x513 (= $x529 true)))
 (let (($x190 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x120 (= $x190 true)))
 (let (($x567 (= $x120 true)))
 (let ((?x782 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x844 (= (_ bv0 32) ?x782)))
 (let ((?x303 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x303)))
 (let (($x538 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x538 $x72)))
 (let (($x185 (and $x59 $x844)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x686 (and $x205 $x185)))
 (let (($x391 (= $x686 true)))
 (let (($x740 (= $x391 true)))
 (let (($x838 (= $x740 true)))
 (let (($x554 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x723 (=> $x554 true)))
 (let ((?x210 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x345 (bvuge ?x210 (_ bv1 32))))
 (let (($x284 (= $x554 $x345)))
 (let (($x581 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x444 (=> $x581 $x369)))
 (let (($x460 (= ?x210 (_ bv0 32))))
 (let (($x315 (= $x581 $x460)))
 (let (($x234 (and $x315 $x444)))
 (let (($x104 (and $x234 $x284)))
 (let (($x191 (and $x104 $x723)))
 (let (($x259 (= $x191 true)))
 (let (($x867 (= $x259 true)))
 (let (($x681 (= $x867 true)))
 (let (($x348 (= $x662 $x345)))
 (let (($x398 (= $x530 $x460)))
 (let (($x614 (and $x398 $x808)))
 (let (($x344 (and $x614 $x348)))
 (let (($x700 (and $x344 $x832)))
 (let (($x283 (= $x700 true)))
 (let (($x507 (= $x283 true)))
 (let (($x846 (= $x507 true)))
 (let (($x541 (and $x846 $x681)))
 (let (($x483 (and $x541 $x838)))
 (let (($x458 (and $x483 $x567)))
 (let (($x563 (and $x458 $x513)))
 (let (($x404 (and $x563 $x124)))
 (let (($x446 (and $x404 $x550)))
 (let (($x365 (and $x446 $x683)))
 (let (($x102 (and $x365 $x840)))
 (let (($x583 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x510 (and $x583 $x102)))
 (let (($x306 (bvugt ?x189 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x189 (_ bv3 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x236 (=> (bvule ?x189 (bvsub (bvadd ?x189 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x306)))))))
 (let (($x548 (=> (and $x278 (bvule ?x189 (bvsub (bvadd ?x189 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x187 $x306)))))))
 (let (($x623 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x415 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x380 (=> $x415 (or false (or false (and true (or $x161 $x623)))))))
 (let (($x684 (=> (and $x278 $x415) (or false (or false (and true (or $x161 $x623)))))))
 (let (($x7 (and $x684 $x548)))
 (let (($x56 (and $x7 $x510)))
 (let (($x606 (=> $x56 $x714)))
 (not $x606))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0 () (_ BitVec 21))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x468 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x225 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x822 (concat (select input.dst.llvm-mem ?x225) (concat ?x155 (concat ?x468 ?x122)))))
 (let ((?x544 ((_ extract 20 0) ?x822)))
 (let ((?x382 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0 ?x544)))
 (let (($x506 (= (_ bv0 21) ?x382)))
 (let (($x714 (= $x506 true)))
 (let (($x497 (= (_ bv0 21) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0)))
 (let (($x397 (= $x497 true)))
 (let (($x840 (= $x397 true)))
 (let ((?x533 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x377 (= (_ bv0 3) ?x533)))
 (let (($x592 (= $x377 true)))
 (let (($x683 (= $x592 true)))
 (let (($x662 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x832 (=> $x662 true)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x317 (= $x662 (bvuge ?x78 (_ bv1 32)))))
 (let (($x369 (= false false)))
 (let (($x530 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x808 (=> $x530 $x369)))
 (let (($x821 (= $x530 (= ?x78 (_ bv0 32)))))
 (let (($x73 (and $x821 $x808)))
 (let (($x638 (and $x73 $x317)))
 (let (($x196 (and $x638 $x832)))
 (let (($x804 (= $x196 true)))
 (let (($x349 (= $x804 true)))
 (let (($x550 (= $x349 true)))
 (let (($x729 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x763 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x480 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763))))
 (let (($x642 (and true $x480)))
 (let (($x204 (and $x480 $x642)))
 (let ((?x189 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x182))))
 (let (($x338 (= (bvand ?x212 (_ bv4294967288 32)) ?x212)))
 (let (($x140 (= (bvand ?x189 (_ bv4294967292 32)) ?x189)))
 (let (($x849 (and $x140 $x338)))
 (let (($x409 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x189 (bvsub ?x189 (_ bv4 32))) (bvult ?x189 (bvsub ?x189 (_ bv4 32))))))
 (let (($x854 (and (and (and (and (and $x642 $x409) $x140) $x849) $x204) $x729)))
 (let (($x676 (= true $x854)))
 (let (($x278 (not $x88)))
 (let (($x410 (=> $x278 $x676)))
 (let (($x328 (= $x410 true)))
 (let (($x508 (= $x328 true)))
 (let (($x124 (= $x508 true)))
 (let (($x352 (= $x278 true)))
 (let (($x529 (= $x352 true)))
 (let (($x513 (= $x529 true)))
 (let (($x190 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x120 (= $x190 true)))
 (let (($x567 (= $x120 true)))
 (let ((?x782 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x844 (= (_ bv0 32) ?x782)))
 (let ((?x303 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x303)))
 (let (($x538 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x538 $x72)))
 (let (($x185 (and $x59 $x844)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x686 (and $x205 $x185)))
 (let (($x391 (= $x686 true)))
 (let (($x740 (= $x391 true)))
 (let (($x838 (= $x740 true)))
 (let (($x554 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x723 (=> $x554 true)))
 (let ((?x210 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x345 (bvuge ?x210 (_ bv1 32))))
 (let (($x284 (= $x554 $x345)))
 (let (($x581 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x444 (=> $x581 $x369)))
 (let (($x460 (= ?x210 (_ bv0 32))))
 (let (($x315 (= $x581 $x460)))
 (let (($x234 (and $x315 $x444)))
 (let (($x104 (and $x234 $x284)))
 (let (($x191 (and $x104 $x723)))
 (let (($x259 (= $x191 true)))
 (let (($x867 (= $x259 true)))
 (let (($x681 (= $x867 true)))
 (let (($x348 (= $x662 $x345)))
 (let (($x398 (= $x530 $x460)))
 (let (($x614 (and $x398 $x808)))
 (let (($x344 (and $x614 $x348)))
 (let (($x700 (and $x344 $x832)))
 (let (($x283 (= $x700 true)))
 (let (($x507 (= $x283 true)))
 (let (($x846 (= $x507 true)))
 (let (($x541 (and $x846 $x681)))
 (let (($x483 (and $x541 $x838)))
 (let (($x458 (and $x483 $x567)))
 (let (($x563 (and $x458 $x513)))
 (let (($x404 (and $x563 $x124)))
 (let (($x446 (and $x404 $x550)))
 (let (($x365 (and $x446 $x683)))
 (let (($x102 (and $x365 $x840)))
 (let (($x583 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x510 (and $x583 $x102)))
 (let (($x306 (bvugt ?x189 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x189 (_ bv3 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x236 (=> (bvule ?x189 (bvsub (bvadd ?x189 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x306)))))))
 (let (($x548 (=> (and $x278 (bvule ?x189 (bvsub (bvadd ?x189 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x187 $x306)))))))
 (let (($x623 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x415 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x380 (=> $x415 (or false (or false (and true (or $x161 $x623)))))))
 (let (($x684 (=> (and $x278 $x415) (or false (or false (and true (or $x161 $x623)))))))
 (let (($x7 (and $x684 $x548)))
 (let (($x56 (and $x7 $x510)))
 (let (($x606 (=> $x56 $x714)))
 (not $x606))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0 #b000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_17)
(function @fun_17
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_17 #b10000000000000000000000000000010) #b00010000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0 () (_ BitVec 21)
    #b000000000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv144368 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv144368 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0 () (_ BitVec 21) (_ bv0 21))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv284936 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv284936 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv284939 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 117
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0 () (_ BitVec 21))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x403 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x575 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x90 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x494 (concat (select input.dst.llvm-mem ?x90) (concat ?x575 (concat ?x60 ?x403)))))
 (let ((?x801 ((_ extract 20 0) ?x494)))
 (let ((?x475 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0 ?x801)))
 (let (($x116 (= (_ bv0 21) ?x475)))
 (let (($x788 (= $x116 true)))
 (let (($x41 (= (_ bv0 21) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0)))
 (let (($x489 (= $x41 true)))
 (let (($x292 (= $x489 true)))
 (let ((?x707 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x235 (= (_ bv0 3) ?x707)))
 (let (($x34 (= $x235 true)))
 (let (($x316 (= $x34 true)))
 (let (($x334 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x212 (=> $x334 false)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x201 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x666 (= $x334 (bvuge ?x201 (_ bv1 32)))))
 (let (($x262 (= false false)))
 (let (($x296 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x140 (=> $x296 $x262)))
 (let (($x413 (= $x296 (= ?x201 (_ bv0 32)))))
 (let (($x523 (and $x413 $x140)))
 (let (($x192 (and $x523 $x666)))
 (let (($x248 (and $x192 $x212)))
 (let (($x546 (= $x248 true)))
 (let (($x378 (= $x546 true)))
 (let (($x261 (= $x378 true)))
 (let (($x333 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x122 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x544 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122))))
 (let (($x382 (and true $x544)))
 (let (($x305 (and $x544 $x382)))
 (let ((?x415 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv1 32))) (select input.dst.llvm-mem ?x415))))
 (let ((?x764 (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv2 32))) ?x219))))
 (let (($x720 (= (bvand ?x764 (_ bv4294967288 32)) ?x764)))
 (let (($x80 (= (bvand ?x415 (_ bv4294967292 32)) ?x415)))
 (let (($x168 (and $x80 $x720)))
 (let (($x847 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x415 (bvsub ?x415 (_ bv4 32))) (bvult ?x415 (bvsub ?x415 (_ bv4 32))))))
 (let (($x252 (and (and (and (and (and $x382 $x847) $x80) $x168) $x305) $x333)))
 (let (($x312 (= true $x252)))
 (let (($x278 (not $x88)))
 (let (($x637 (=> $x278 $x312)))
 (let (($x716 (= $x637 true)))
 (let (($x725 (= $x716 true)))
 (let (($x57 (= $x725 true)))
 (let (($x247 (= $x278 true)))
 (let (($x155 (= $x247 true)))
 (let (($x436 (= $x155 true)))
 (let (($x102 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x510 (= $x102 true)))
 (let (($x56 (= $x510 true)))
 (let ((?x377 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x592 (= (_ bv0 32) ?x377)))
 (let ((?x446 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x396 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x446)))
 (let (($x550 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x533 (and $x550 $x396)))
 (let (($x683 (and $x533 $x592)))
 (let (($x349 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x365 (and $x349 $x683)))
 (let (($x551 (= $x365 true)))
 (let (($x169 (= $x551 true)))
 (let (($x497 (= $x169 true)))
 (let (($x404 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x821 (=> $x404 false)))
 (let ((?x409 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x425 (bvuge ?x409 (_ bv1 32))))
 (let (($x78 (= $x404 $x425)))
 (let (($x854 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x410 (=> $x854 $x262)))
 (let (($x119 (= ?x409 (_ bv0 32))))
 (let (($x676 (= $x854 $x119)))
 (let (($x328 (and $x676 $x410)))
 (let (($x868 (and $x328 $x78)))
 (let (($x73 (and $x868 $x821)))
 (let (($x197 (= $x73 true)))
 (let (($x317 (= $x197 true)))
 (let (($x638 (= $x317 true)))
 (let (($x182 (= $x334 $x425)))
 (let (($x482 (= $x296 $x119)))
 (let (($x311 (and $x482 $x140)))
 (let (($x848 (and $x311 $x182)))
 (let (($x95 (and $x848 $x212)))
 (let (($x417 (= $x95 true)))
 (let (($x338 (= $x417 true)))
 (let (($x849 (= $x338 true)))
 (let (($x196 (and $x849 $x638)))
 (let (($x397 (and $x196 $x497)))
 (let (($x809 (and $x397 $x56)))
 (let (($x468 (and $x809 $x436)))
 (let (($x580 (and $x468 $x57)))
 (let (($x363 (and $x580 $x261)))
 (let (($x488 (and $x363 $x316)))
 (let (($x346 (and $x488 $x292)))
 (let (($x530 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x615 (and $x530 $x346)))
 (let (($x539 (bvugt ?x415 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x415 (_ bv3 32))))
 (let (($x394 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x583 (=> (bvule ?x415 (bvsub (bvadd ?x415 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x394 $x539)))))))
 (let (($x343 (=> (and $x278 (bvule ?x415 (bvsub (bvadd ?x415 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x394 $x539)))))))
 (let (($x447 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x432 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x573 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x135 (=> $x573 (or false (or false (and true (or $x432 $x447)))))))
 (let (($x520 (=> (and $x278 $x573) (or false (or false (and true (or $x432 $x447)))))))
 (let (($x99 (and $x520 $x343)))
 (let (($x162 (and $x99 $x615)))
 (let (($x465 (=> $x162 $x788)))
 (not $x465))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0 () (_ BitVec 21))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x403 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x575 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x90 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x494 (concat (select input.dst.llvm-mem ?x90) (concat ?x575 (concat ?x60 ?x403)))))
 (let ((?x801 ((_ extract 20 0) ?x494)))
 (let ((?x475 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0 ?x801)))
 (let (($x116 (= (_ bv0 21) ?x475)))
 (let (($x788 (= $x116 true)))
 (let (($x41 (= (_ bv0 21) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_20_0)))
 (let (($x489 (= $x41 true)))
 (let (($x292 (= $x489 true)))
 (let ((?x707 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x235 (= (_ bv0 3) ?x707)))
 (let (($x34 (= $x235 true)))
 (let (($x316 (= $x34 true)))
 (let (($x334 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x212 (=> $x334 false)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x201 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x666 (= $x334 (bvuge ?x201 (_ bv1 32)))))
 (let (($x262 (= false false)))
 (let (($x296 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x140 (=> $x296 $x262)))
 (let (($x413 (= $x296 (= ?x201 (_ bv0 32)))))
 (let (($x523 (and $x413 $x140)))
 (let (($x192 (and $x523 $x666)))
 (let (($x248 (and $x192 $x212)))
 (let (($x546 (= $x248 true)))
 (let (($x378 (= $x546 true)))
 (let (($x261 (= $x378 true)))
 (let (($x333 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x122 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x544 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122))))
 (let (($x382 (and true $x544)))
 (let (($x305 (and $x544 $x382)))
 (let ((?x415 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv1 32))) (select input.dst.llvm-mem ?x415))))
 (let ((?x764 (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv2 32))) ?x219))))
 (let (($x720 (= (bvand ?x764 (_ bv4294967288 32)) ?x764)))
 (let (($x80 (= (bvand ?x415 (_ bv4294967292 32)) ?x415)))
 (let (($x168 (and $x80 $x720)))
 (let (($x847 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x415 (bvsub ?x415 (_ bv4 32))) (bvult ?x415 (bvsub ?x415 (_ bv4 32))))))
 (let (($x252 (and (and (and (and (and $x382 $x847) $x80) $x168) $x305) $x333)))
 (let (($x312 (= true $x252)))
 (let (($x278 (not $x88)))
 (let (($x637 (=> $x278 $x312)))
 (let (($x716 (= $x637 true)))
 (let (($x725 (= $x716 true)))
 (let (($x57 (= $x725 true)))
 (let (($x247 (= $x278 true)))
 (let (($x155 (= $x247 true)))
 (let (($x436 (= $x155 true)))
 (let (($x102 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x510 (= $x102 true)))
 (let (($x56 (= $x510 true)))
 (let ((?x377 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x592 (= (_ bv0 32) ?x377)))
 (let ((?x446 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x396 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x446)))
 (let (($x550 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x533 (and $x550 $x396)))
 (let (($x683 (and $x533 $x592)))
 (let (($x349 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x365 (and $x349 $x683)))
 (let (($x551 (= $x365 true)))
 (let (($x169 (= $x551 true)))
 (let (($x497 (= $x169 true)))
 (let (($x404 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x821 (=> $x404 false)))
 (let ((?x409 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x425 (bvuge ?x409 (_ bv1 32))))
 (let (($x78 (= $x404 $x425)))
 (let (($x854 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x410 (=> $x854 $x262)))
 (let (($x119 (= ?x409 (_ bv0 32))))
 (let (($x676 (= $x854 $x119)))
 (let (($x328 (and $x676 $x410)))
 (let (($x868 (and $x328 $x78)))
 (let (($x73 (and $x868 $x821)))
 (let (($x197 (= $x73 true)))
 (let (($x317 (= $x197 true)))
 (let (($x638 (= $x317 true)))
 (let (($x182 (= $x334 $x425)))
 (let (($x482 (= $x296 $x119)))
 (let (($x311 (and $x482 $x140)))
 (let (($x848 (and $x311 $x182)))
 (let (($x95 (and $x848 $x212)))
 (let (($x417 (= $x95 true)))
 (let (($x338 (= $x417 true)))
 (let (($x849 (= $x338 true)))
 (let (($x196 (and $x849 $x638)))
 (let (($x397 (and $x196 $x497)))
 (let (($x809 (and $x397 $x56)))
 (let (($x468 (and $x809 $x436)))
 (let (($x580 (and $x468 $x57)))
 (let (($x363 (and $x580 $x261)))
 (let (($x488 (and $x363 $x316)))
 (let (($x346 (and $x488 $x292)))
 (let (($x530 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x615 (and $x530 $x346)))
 (let (($x539 (bvugt ?x415 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x415 (_ bv3 32))))
 (let (($x394 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x583 (=> (bvule ?x415 (bvsub (bvadd ?x415 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x394 $x539)))))))
 (let (($x343 (=> (and $x278 (bvule ?x415 (bvsub (bvadd ?x415 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x394 $x539)))))))
 (let (($x447 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x432 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x573 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x135 (=> $x573 (or false (or false (and true (or $x432 $x447)))))))
 (let (($x520 (=> (and $x278 $x573) (or false (or false (and true (or $x432 $x447)))))))
 (let (($x99 (and $x520 $x343)))
 (let (($x162 (and $x99 $x615)))
 (let (($x465 (=> $x162 $x788)))
 (not $x465))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 118
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0 () (_ BitVec 20))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x522 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x464 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x23 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x653 (concat (select input.dst.llvm-mem ?x23) (concat ?x464 (concat ?x522 ?x215)))))
 (let ((?x785 ((_ extract 19 0) ?x653)))
 (let ((?x29 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0 ?x785)))
 (let (($x238 (= (_ bv0 20) ?x29)))
 (let (($x535 (= $x238 true)))
 (let (($x828 (= (_ bv0 20) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0)))
 (let (($x319 (= $x828 true)))
 (let (($x843 (= $x319 true)))
 (let ((?x68 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x172 (= (_ bv0 3) ?x68)))
 (let (($x32 (= $x172 true)))
 (let (($x448 (= $x32 true)))
 (let (($x273 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x764 (=> $x273 true)))
 (let (($x154 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x302 (ite $x154 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (= $x273 (bvuge ?x302 (_ bv1 32)))))
 (let (($x193 (= false false)))
 (let (($x606 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x80 (=> $x606 $x193)))
 (let (($x111 (= $x606 (= ?x302 (_ bv0 32)))))
 (let (($x291 (and $x111 $x80)))
 (let (($x709 (and $x291 $x268)))
 (let (($x129 (and $x709 $x764)))
 (let (($x226 (= $x129 true)))
 (let (($x209 (= $x226 true)))
 (let (($x657 (= $x209 true)))
 (let (($x507 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x403 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x801 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x403) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x403))))
 (let (($x475 (and true $x801)))
 (let (($x581 (and $x801 $x475)))
 (let ((?x573 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x662 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv1 32))) (select input.dst.llvm-mem ?x573))))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv2 32))) ?x662))))
 (let (($x554 (= (bvand ?x460 (_ bv4294967288 32)) ?x460)))
 (let (($x715 (= (bvand ?x573 (_ bv4294967292 32)) ?x573)))
 (let (($x461 (and $x715 $x554)))
 (let (($x176 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x573 (bvsub ?x573 (_ bv4 32))) (bvult ?x573 (bvsub ?x573 (_ bv4 32))))))
 (let (($x846 (and (and (and (and (and $x475 $x176) $x715) $x461) $x581) $x507)))
 (let (($x315 (= true $x846)))
 (let (($x88 (not $x154)))
 (let (($x541 (=> $x88 $x315)))
 (let (($x309 (= $x541 true)))
 (let (($x259 (= $x309 true)))
 (let (($x867 (= $x259 true)))
 (let (($x76 (= $x88 true)))
 (let (($x575 (= $x76 true)))
 (let (($x682 (= $x575 true)))
 (let (($x346 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x615 (= $x346 true)))
 (let (($x162 (= $x615 true)))
 (let ((?x235 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x235)))
 (let ((?x363 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x363)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x707 (and $x261 $x47)))
 (let (($x316 (and $x707 $x34)))
 (let (($x378 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x488 (and $x378 $x316)))
 (let (($x693 (= $x488 true)))
 (let (($x340 (= $x693 true)))
 (let (($x41 (= $x340 true)))
 (let (($x580 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x413 (=> $x580 true)))
 (let ((?x847 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x393 (bvuge ?x847 (_ bv1 32))))
 (let (($x201 (= $x580 $x393)))
 (let (($x252 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x637 (=> $x252 $x193)))
 (let (($x171 (= ?x847 (_ bv0 32))))
 (let (($x312 (= $x252 $x171)))
 (let (($x716 (and $x312 $x637)))
 (let (($x299 (and $x716 $x201)))
 (let (($x523 (and $x299 $x413)))
 (let (($x817 (= $x523 true)))
 (let (($x666 (= $x817 true)))
 (let (($x192 (= $x666 true)))
 (let (($x219 (= $x273 $x393)))
 (let (($x69 (= $x606 $x171)))
 (let (($x859 (and $x69 $x80)))
 (let (($x364 (and $x859 $x219)))
 (let (($x24 (and $x364 $x764)))
 (let (($x610 (= $x24 true)))
 (let (($x720 (= $x610 true)))
 (let (($x168 (= $x720 true)))
 (let (($x248 (and $x168 $x192)))
 (let (($x489 (and $x248 $x41)))
 (let (($x158 (and $x489 $x162)))
 (let (($x60 (and $x158 $x682)))
 (let (($x104 (and $x60 $x867)))
 (let (($x286 (and $x104 $x657)))
 (let (($x427 (and $x286 $x448)))
 (let (($x435 (and $x427 $x843)))
 (let (($x296 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x97 (and $x296 $x435)))
 (let (($x548 (bvugt ?x573 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x573 (_ bv3 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x530 (=> (bvule ?x573 (bvsub (bvadd ?x573 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x236 $x548)))))))
 (let (($x297 (=> (and $x88 (bvule ?x573 (bvsub (bvadd ?x573 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x236 $x548)))))))
 (let (($x684 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x380 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x187 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x306 (=> $x187 (or false (or false (and true (or $x380 $x684)))))))
 (let (($x225 (=> (and $x88 $x187) (or false (or false (and true (or $x380 $x684)))))))
 (let (($x37 (and $x225 $x297)))
 (let (($x260 (and $x37 $x97)))
 (let (($x783 (=> $x260 $x535)))
 (not $x783))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0 () (_ BitVec 20))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x522 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x464 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x23 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x653 (concat (select input.dst.llvm-mem ?x23) (concat ?x464 (concat ?x522 ?x215)))))
 (let ((?x785 ((_ extract 19 0) ?x653)))
 (let ((?x29 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0 ?x785)))
 (let (($x238 (= (_ bv0 20) ?x29)))
 (let (($x535 (= $x238 true)))
 (let (($x828 (= (_ bv0 20) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0)))
 (let (($x319 (= $x828 true)))
 (let (($x843 (= $x319 true)))
 (let ((?x68 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x172 (= (_ bv0 3) ?x68)))
 (let (($x32 (= $x172 true)))
 (let (($x448 (= $x32 true)))
 (let (($x273 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x764 (=> $x273 true)))
 (let (($x154 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x302 (ite $x154 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (= $x273 (bvuge ?x302 (_ bv1 32)))))
 (let (($x193 (= false false)))
 (let (($x606 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x80 (=> $x606 $x193)))
 (let (($x111 (= $x606 (= ?x302 (_ bv0 32)))))
 (let (($x291 (and $x111 $x80)))
 (let (($x709 (and $x291 $x268)))
 (let (($x129 (and $x709 $x764)))
 (let (($x226 (= $x129 true)))
 (let (($x209 (= $x226 true)))
 (let (($x657 (= $x209 true)))
 (let (($x507 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x403 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x801 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x403) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x403))))
 (let (($x475 (and true $x801)))
 (let (($x581 (and $x801 $x475)))
 (let ((?x573 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x662 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv1 32))) (select input.dst.llvm-mem ?x573))))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv2 32))) ?x662))))
 (let (($x554 (= (bvand ?x460 (_ bv4294967288 32)) ?x460)))
 (let (($x715 (= (bvand ?x573 (_ bv4294967292 32)) ?x573)))
 (let (($x461 (and $x715 $x554)))
 (let (($x176 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x573 (bvsub ?x573 (_ bv4 32))) (bvult ?x573 (bvsub ?x573 (_ bv4 32))))))
 (let (($x846 (and (and (and (and (and $x475 $x176) $x715) $x461) $x581) $x507)))
 (let (($x315 (= true $x846)))
 (let (($x88 (not $x154)))
 (let (($x541 (=> $x88 $x315)))
 (let (($x309 (= $x541 true)))
 (let (($x259 (= $x309 true)))
 (let (($x867 (= $x259 true)))
 (let (($x76 (= $x88 true)))
 (let (($x575 (= $x76 true)))
 (let (($x682 (= $x575 true)))
 (let (($x346 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x615 (= $x346 true)))
 (let (($x162 (= $x615 true)))
 (let ((?x235 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x235)))
 (let ((?x363 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x363)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x707 (and $x261 $x47)))
 (let (($x316 (and $x707 $x34)))
 (let (($x378 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x488 (and $x378 $x316)))
 (let (($x693 (= $x488 true)))
 (let (($x340 (= $x693 true)))
 (let (($x41 (= $x340 true)))
 (let (($x580 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x413 (=> $x580 true)))
 (let ((?x847 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x393 (bvuge ?x847 (_ bv1 32))))
 (let (($x201 (= $x580 $x393)))
 (let (($x252 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x637 (=> $x252 $x193)))
 (let (($x171 (= ?x847 (_ bv0 32))))
 (let (($x312 (= $x252 $x171)))
 (let (($x716 (and $x312 $x637)))
 (let (($x299 (and $x716 $x201)))
 (let (($x523 (and $x299 $x413)))
 (let (($x817 (= $x523 true)))
 (let (($x666 (= $x817 true)))
 (let (($x192 (= $x666 true)))
 (let (($x219 (= $x273 $x393)))
 (let (($x69 (= $x606 $x171)))
 (let (($x859 (and $x69 $x80)))
 (let (($x364 (and $x859 $x219)))
 (let (($x24 (and $x364 $x764)))
 (let (($x610 (= $x24 true)))
 (let (($x720 (= $x610 true)))
 (let (($x168 (= $x720 true)))
 (let (($x248 (and $x168 $x192)))
 (let (($x489 (and $x248 $x41)))
 (let (($x158 (and $x489 $x162)))
 (let (($x60 (and $x158 $x682)))
 (let (($x104 (and $x60 $x867)))
 (let (($x286 (and $x104 $x657)))
 (let (($x427 (and $x286 $x448)))
 (let (($x435 (and $x427 $x843)))
 (let (($x296 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x97 (and $x296 $x435)))
 (let (($x548 (bvugt ?x573 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x573 (_ bv3 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x530 (=> (bvule ?x573 (bvsub (bvadd ?x573 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x236 $x548)))))))
 (let (($x297 (=> (and $x88 (bvule ?x573 (bvsub (bvadd ?x573 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x236 $x548)))))))
 (let (($x684 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x380 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x187 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x306 (=> $x187 (or false (or false (and true (or $x380 $x684)))))))
 (let (($x225 (=> (and $x88 $x187) (or false (or false (and true (or $x380 $x684)))))))
 (let (($x37 (and $x225 $x297)))
 (let (($x260 (and $x37 $x97)))
 (let (($x783 (=> $x260 $x535)))
 (not $x783))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0 #b00000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_17)
(function @fun_17
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_17 #b10000000000000000000000000000010) #b00001000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0 () (_ BitVec 20)
    #x00000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv175408 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv175408 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0 () (_ BitVec 20) (_ bv0 20))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv302344 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv302344 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv302347 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 119
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0 () (_ BitVec 20))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x190 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x390 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x189 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x59 (concat (select input.dst.llvm-mem ?x189) (concat ?x390 (concat ?x538 ?x190)))))
 (let ((?x185 ((_ extract 19 0) ?x59)))
 (let ((?x740 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0 ?x185)))
 (let (($x480 (= (_ bv0 20) ?x740)))
 (let (($x642 (= $x480 true)))
 (let (($x563 (= (_ bv0 20) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0)))
 (let (($x483 (= $x563 true)))
 (let (($x782 (= $x483 true)))
 (let ((?x686 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x391 (= (_ bv0 3) ?x686)))
 (let (($x347 (= $x391 true)))
 (let (($x838 (= $x347 true)))
 (let (($x808 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x460 (=> $x808 false)))
 (let (($x154 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x840 (ite $x154 (_ bv0 32) (_ bv1 32))))
 (let (($x700 (= $x808 (bvuge ?x840 (_ bv1 32)))))
 (let (($x341 (= false false)))
 (let (($x465 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x715 (=> $x465 $x341)))
 (let (($x318 (= $x465 (= ?x840 (_ bv0 32)))))
 (let (($x822 (and $x318 $x715)))
 (let (($x451 (and $x822 $x700)))
 (let (($x518 (and $x451 $x460)))
 (let (($x429 (= $x518 true)))
 (let (($x723 (= $x429 true)))
 (let (($x284 (= $x723 true)))
 (let (($x338 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x215 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x785 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x215) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x215))))
 (let (($x29 (and true $x785)))
 (let (($x854 (and $x785 $x29)))
 (let ((?x187 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x334))))
 (let (($x404 (= (bvand ?x119 (_ bv4294967288 32)) ?x119)))
 (let (($x811 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x729 (and $x811 $x404)))
 (let (($x512 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x187 (bvsub ?x187 (_ bv4 32))) (bvult ?x187 (bvsub ?x187 (_ bv4 32))))))
 (let (($x849 (and (and (and (and (and $x29 $x512) $x811) $x729) $x854) $x338)))
 (let (($x676 (= true $x849)))
 (let (($x88 (not $x154)))
 (let (($x196 (=> $x88 $x676)))
 (let (($x804 (= $x196 true)))
 (let (($x197 (= $x804 true)))
 (let (($x317 (= $x197 true)))
 (let (($x803 (= $x88 true)))
 (let (($x464 (= $x803 true)))
 (let (($x244 (= $x464 true)))
 (let (($x435 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x97 (= $x435 true)))
 (let (($x260 (= $x97 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x172)))
 (let ((?x286 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x286)))
 (let (($x657 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x657 $x281)))
 (let (($x448 (and $x68 $x32)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x427 (and $x209 $x448)))
 (let (($x9 (= $x427 true)))
 (let (($x313 (= $x9 true)))
 (let (($x828 (= $x313 true)))
 (let (($x104 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x111 (=> $x104 false)))
 (let ((?x176 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x444 (bvuge ?x176 (_ bv1 32))))
 (let (($x302 (= $x104 $x444)))
 (let (($x846 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x541 (=> $x846 $x341)))
 (let (($x348 (= ?x176 (_ bv0 32))))
 (let (($x315 (= $x846 $x348)))
 (let (($x309 (and $x315 $x541)))
 (let (($x771 (and $x309 $x302)))
 (let (($x291 (and $x771 $x111)))
 (let (($x124 (= $x291 true)))
 (let (($x268 (= $x124 true)))
 (let (($x709 (= $x268 true)))
 (let (($x662 (= $x808 $x444)))
 (let (($x204 (= $x465 $x348)))
 (let (($x344 (and $x204 $x715)))
 (let (($x170 (and $x344 $x662)))
 (let (($x593 (and $x170 $x460)))
 (let (($x234 (= $x593 true)))
 (let (($x554 (= $x234 true)))
 (let (($x461 (= $x554 true)))
 (let (($x129 (and $x461 $x709)))
 (let (($x319 (and $x129 $x828)))
 (let (($x659 (and $x319 $x260)))
 (let (($x522 (and $x659 $x244)))
 (let (($x868 (and $x522 $x317)))
 (let (($x191 (and $x868 $x284)))
 (let (($x120 (and $x191 $x838)))
 (let (($x763 (and $x120 $x782)))
 (let (($x606 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x529 (and $x606 $x763)))
 (let (($x343 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x187 (_ bv3 32))))
 (let (($x583 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x296 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x583 $x343)))))))
 (let (($x853 (=> (and $x88 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x583 $x343)))))))
 (let (($x520 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x394 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x539 (=> $x394 (or false (or false (and true (or $x135 $x520)))))))
 (let (($x90 (=> (and $x88 $x394) (or false (or false (and true (or $x135 $x520)))))))
 (let (($x186 (and $x90 $x853)))
 (let (($x72 (and $x186 $x529)))
 (let (($x392 (=> $x72 $x642)))
 (not $x392))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0 () (_ BitVec 20))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x190 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x390 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x189 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x59 (concat (select input.dst.llvm-mem ?x189) (concat ?x390 (concat ?x538 ?x190)))))
 (let ((?x185 ((_ extract 19 0) ?x59)))
 (let ((?x740 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0 ?x185)))
 (let (($x480 (= (_ bv0 20) ?x740)))
 (let (($x642 (= $x480 true)))
 (let (($x563 (= (_ bv0 20) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_19_0)))
 (let (($x483 (= $x563 true)))
 (let (($x782 (= $x483 true)))
 (let ((?x686 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x391 (= (_ bv0 3) ?x686)))
 (let (($x347 (= $x391 true)))
 (let (($x838 (= $x347 true)))
 (let (($x808 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x460 (=> $x808 false)))
 (let (($x154 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x840 (ite $x154 (_ bv0 32) (_ bv1 32))))
 (let (($x700 (= $x808 (bvuge ?x840 (_ bv1 32)))))
 (let (($x341 (= false false)))
 (let (($x465 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x715 (=> $x465 $x341)))
 (let (($x318 (= $x465 (= ?x840 (_ bv0 32)))))
 (let (($x822 (and $x318 $x715)))
 (let (($x451 (and $x822 $x700)))
 (let (($x518 (and $x451 $x460)))
 (let (($x429 (= $x518 true)))
 (let (($x723 (= $x429 true)))
 (let (($x284 (= $x723 true)))
 (let (($x338 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x215 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x785 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x215) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x215))))
 (let (($x29 (and true $x785)))
 (let (($x854 (and $x785 $x29)))
 (let ((?x187 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x334))))
 (let (($x404 (= (bvand ?x119 (_ bv4294967288 32)) ?x119)))
 (let (($x811 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let (($x729 (and $x811 $x404)))
 (let (($x512 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x187 (bvsub ?x187 (_ bv4 32))) (bvult ?x187 (bvsub ?x187 (_ bv4 32))))))
 (let (($x849 (and (and (and (and (and $x29 $x512) $x811) $x729) $x854) $x338)))
 (let (($x676 (= true $x849)))
 (let (($x88 (not $x154)))
 (let (($x196 (=> $x88 $x676)))
 (let (($x804 (= $x196 true)))
 (let (($x197 (= $x804 true)))
 (let (($x317 (= $x197 true)))
 (let (($x803 (= $x88 true)))
 (let (($x464 (= $x803 true)))
 (let (($x244 (= $x464 true)))
 (let (($x435 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x97 (= $x435 true)))
 (let (($x260 (= $x97 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x172)))
 (let ((?x286 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x286)))
 (let (($x657 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x657 $x281)))
 (let (($x448 (and $x68 $x32)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x427 (and $x209 $x448)))
 (let (($x9 (= $x427 true)))
 (let (($x313 (= $x9 true)))
 (let (($x828 (= $x313 true)))
 (let (($x104 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x111 (=> $x104 false)))
 (let ((?x176 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x444 (bvuge ?x176 (_ bv1 32))))
 (let (($x302 (= $x104 $x444)))
 (let (($x846 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x541 (=> $x846 $x341)))
 (let (($x348 (= ?x176 (_ bv0 32))))
 (let (($x315 (= $x846 $x348)))
 (let (($x309 (and $x315 $x541)))
 (let (($x771 (and $x309 $x302)))
 (let (($x291 (and $x771 $x111)))
 (let (($x124 (= $x291 true)))
 (let (($x268 (= $x124 true)))
 (let (($x709 (= $x268 true)))
 (let (($x662 (= $x808 $x444)))
 (let (($x204 (= $x465 $x348)))
 (let (($x344 (and $x204 $x715)))
 (let (($x170 (and $x344 $x662)))
 (let (($x593 (and $x170 $x460)))
 (let (($x234 (= $x593 true)))
 (let (($x554 (= $x234 true)))
 (let (($x461 (= $x554 true)))
 (let (($x129 (and $x461 $x709)))
 (let (($x319 (and $x129 $x828)))
 (let (($x659 (and $x319 $x260)))
 (let (($x522 (and $x659 $x244)))
 (let (($x868 (and $x522 $x317)))
 (let (($x191 (and $x868 $x284)))
 (let (($x120 (and $x191 $x838)))
 (let (($x763 (and $x120 $x782)))
 (let (($x606 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x529 (and $x606 $x763)))
 (let (($x343 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x187 (_ bv3 32))))
 (let (($x583 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x296 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x583 $x343)))))))
 (let (($x853 (=> (and $x88 (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x583 $x343)))))))
 (let (($x520 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x394 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x539 (=> $x394 (or false (or false (and true (or $x135 $x520)))))))
 (let (($x90 (=> (and $x88 $x394) (or false (or false (and true (or $x135 $x520)))))))
 (let (($x186 (and $x90 $x853)))
 (let (($x72 (and $x186 $x529)))
 (let (($x392 (=> $x72 $x642)))
 (not $x392))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 120
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0 () (_ BitVec 19))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x550 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x415 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x533 (concat (select input.dst.llvm-mem ?x415) (concat ?x39 (concat ?x550 ?x102)))))
 (let ((?x683 ((_ extract 18 0) ?x533)))
 (let ((?x169 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0 ?x683)))
 (let (($x544 (= (_ bv0 19) ?x169)))
 (let (($x382 (= $x544 true)))
 (let (($x468 (= (_ bv0 19) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0)))
 (let (($x397 (= $x468 true)))
 (let (($x377 (= $x397 true)))
 (let ((?x365 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x551 (= (_ bv0 3) ?x365)))
 (let (($x213 (= $x551 true)))
 (let (($x497 (= $x213 true)))
 (let (($x140 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x119 (=> $x140 true)))
 (let (($x555 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x292 (ite $x555 (_ bv0 32) (_ bv1 32))))
 (let (($x95 (= $x140 (bvuge ?x292 (_ bv1 32)))))
 (let (($x398 (= false false)))
 (let (($x783 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x811 (=> $x783 $x398)))
 (let (($x283 (= $x783 (= ?x292 (_ bv0 32)))))
 (let (($x494 (and $x283 $x811)))
 (let (($x17 (and $x494 $x95)))
 (let (($x675 (and $x17 $x119)))
 (let (($x369 (= $x675 true)))
 (let (($x821 (= $x369 true)))
 (let (($x78 (= $x821 true)))
 (let (($x720 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x190) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x190))))
 (let (($x740 (and true $x185)))
 (let (($x252 (and $x185 $x740)))
 (let ((?x394 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x394 (_ bv1 32))) (select input.dst.llvm-mem ?x394))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x394 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x394 (_ bv2 32))) ?x273))))
 (let (($x580 (= (bvand ?x171 (_ bv4294967288 32)) ?x171)))
 (let (($x457 (= (bvand ?x394 (_ bv4294967292 32)) ?x394)))
 (let (($x333 (and $x457 $x580)))
 (let (($x345 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x394 (bvsub ?x394 (_ bv4 32))) (bvult ?x394 (bvsub ?x394 (_ bv4 32))))))
 (let (($x168 (and (and (and (and (and $x740 $x345) $x457) $x333) $x252) $x720)))
 (let (($x312 (= true $x168)))
 (let (($x154 (not $x555)))
 (let (($x248 (=> $x154 $x312)))
 (let (($x546 (= $x248 true)))
 (let (($x817 (= $x546 true)))
 (let (($x666 (= $x817 true)))
 (let (($x303 (= $x154 true)))
 (let (($x390 (= $x303 true)))
 (let (($x205 (= $x390 true)))
 (let (($x763 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x529 (= $x763 true)))
 (let (($x72 (= $x529 true)))
 (let ((?x391 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x347 (= (_ bv0 32) ?x391)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x567 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x686 (and $x284 $x567)))
 (let (($x838 (and $x686 $x347)))
 (let (($x723 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x723 $x838)))
 (let (($x352 (= $x120 true)))
 (let (($x458 (= $x352 true)))
 (let (($x563 (= $x458 true)))
 (let (($x868 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x318 (=> $x868 true)))
 (let ((?x512 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x410 (bvuge ?x512 (_ bv1 32))))
 (let (($x840 (= $x868 $x410)))
 (let (($x849 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x196 (=> $x849 $x398)))
 (let (($x182 (= ?x512 (_ bv0 32))))
 (let (($x676 (= $x849 $x182)))
 (let (($x804 (and $x676 $x196)))
 (let (($x612 (and $x804 $x840)))
 (let (($x822 (and $x612 $x318)))
 (let (($x57 (= $x822 true)))
 (let (($x700 (= $x57 true)))
 (let (($x451 (= $x700 true)))
 (let (($x334 (= $x140 $x410)))
 (let (($x305 (= $x783 $x182)))
 (let (($x848 (and $x305 $x811)))
 (let (($x100 (and $x848 $x334)))
 (let (($x443 (and $x100 $x119)))
 (let (($x328 (= $x443 true)))
 (let (($x404 (= $x328 true)))
 (let (($x729 (= $x404 true)))
 (let (($x518 (and $x729 $x451)))
 (let (($x483 (and $x518 $x563)))
 (let (($x844 (and $x483 $x72)))
 (let (($x538 (and $x844 $x205)))
 (let (($x299 (and $x538 $x666)))
 (let (($x73 (and $x299 $x78)))
 (let (($x510 (and $x73 $x497)))
 (let (($x122 (and $x510 $x377)))
 (let (($x465 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x155 (and $x465 $x122)))
 (let (($x297 (bvugt ?x394 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x394 (_ bv3 32))))
 (let (($x530 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x606 (=> (bvule ?x394 (bvsub (bvadd ?x394 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x530 $x297)))))))
 (let (($x496 (=> (and $x154 (bvule ?x394 (bvsub (bvadd ?x394 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x530 $x297)))))))
 (let (($x225 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x306 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x415)))
 (let (($x236 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x548 (=> $x236 (or false (or false (and true (or $x306 $x225)))))))
 (let (($x23 (=> (and $x154 $x236) (or false (or false (and true (or $x306 $x225)))))))
 (let (($x7 (and $x23 $x496)))
 (let (($x396 (and $x7 $x155)))
 (let (($x714 (=> $x396 $x382)))
 (not $x714))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0 () (_ BitVec 19))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x550 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x415 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x533 (concat (select input.dst.llvm-mem ?x415) (concat ?x39 (concat ?x550 ?x102)))))
 (let ((?x683 ((_ extract 18 0) ?x533)))
 (let ((?x169 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0 ?x683)))
 (let (($x544 (= (_ bv0 19) ?x169)))
 (let (($x382 (= $x544 true)))
 (let (($x468 (= (_ bv0 19) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0)))
 (let (($x397 (= $x468 true)))
 (let (($x377 (= $x397 true)))
 (let ((?x365 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x551 (= (_ bv0 3) ?x365)))
 (let (($x213 (= $x551 true)))
 (let (($x497 (= $x213 true)))
 (let (($x140 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x119 (=> $x140 true)))
 (let (($x555 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x292 (ite $x555 (_ bv0 32) (_ bv1 32))))
 (let (($x95 (= $x140 (bvuge ?x292 (_ bv1 32)))))
 (let (($x398 (= false false)))
 (let (($x783 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x811 (=> $x783 $x398)))
 (let (($x283 (= $x783 (= ?x292 (_ bv0 32)))))
 (let (($x494 (and $x283 $x811)))
 (let (($x17 (and $x494 $x95)))
 (let (($x675 (and $x17 $x119)))
 (let (($x369 (= $x675 true)))
 (let (($x821 (= $x369 true)))
 (let (($x78 (= $x821 true)))
 (let (($x720 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x190) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x190))))
 (let (($x740 (and true $x185)))
 (let (($x252 (and $x185 $x740)))
 (let ((?x394 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x394 (_ bv1 32))) (select input.dst.llvm-mem ?x394))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x394 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x394 (_ bv2 32))) ?x273))))
 (let (($x580 (= (bvand ?x171 (_ bv4294967288 32)) ?x171)))
 (let (($x457 (= (bvand ?x394 (_ bv4294967292 32)) ?x394)))
 (let (($x333 (and $x457 $x580)))
 (let (($x345 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x394 (bvsub ?x394 (_ bv4 32))) (bvult ?x394 (bvsub ?x394 (_ bv4 32))))))
 (let (($x168 (and (and (and (and (and $x740 $x345) $x457) $x333) $x252) $x720)))
 (let (($x312 (= true $x168)))
 (let (($x154 (not $x555)))
 (let (($x248 (=> $x154 $x312)))
 (let (($x546 (= $x248 true)))
 (let (($x817 (= $x546 true)))
 (let (($x666 (= $x817 true)))
 (let (($x303 (= $x154 true)))
 (let (($x390 (= $x303 true)))
 (let (($x205 (= $x390 true)))
 (let (($x763 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x529 (= $x763 true)))
 (let (($x72 (= $x529 true)))
 (let ((?x391 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x347 (= (_ bv0 32) ?x391)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x567 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x686 (and $x284 $x567)))
 (let (($x838 (and $x686 $x347)))
 (let (($x723 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x723 $x838)))
 (let (($x352 (= $x120 true)))
 (let (($x458 (= $x352 true)))
 (let (($x563 (= $x458 true)))
 (let (($x868 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x318 (=> $x868 true)))
 (let ((?x512 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x410 (bvuge ?x512 (_ bv1 32))))
 (let (($x840 (= $x868 $x410)))
 (let (($x849 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x196 (=> $x849 $x398)))
 (let (($x182 (= ?x512 (_ bv0 32))))
 (let (($x676 (= $x849 $x182)))
 (let (($x804 (and $x676 $x196)))
 (let (($x612 (and $x804 $x840)))
 (let (($x822 (and $x612 $x318)))
 (let (($x57 (= $x822 true)))
 (let (($x700 (= $x57 true)))
 (let (($x451 (= $x700 true)))
 (let (($x334 (= $x140 $x410)))
 (let (($x305 (= $x783 $x182)))
 (let (($x848 (and $x305 $x811)))
 (let (($x100 (and $x848 $x334)))
 (let (($x443 (and $x100 $x119)))
 (let (($x328 (= $x443 true)))
 (let (($x404 (= $x328 true)))
 (let (($x729 (= $x404 true)))
 (let (($x518 (and $x729 $x451)))
 (let (($x483 (and $x518 $x563)))
 (let (($x844 (and $x483 $x72)))
 (let (($x538 (and $x844 $x205)))
 (let (($x299 (and $x538 $x666)))
 (let (($x73 (and $x299 $x78)))
 (let (($x510 (and $x73 $x497)))
 (let (($x122 (and $x510 $x377)))
 (let (($x465 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x155 (and $x465 $x122)))
 (let (($x297 (bvugt ?x394 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x394 (_ bv3 32))))
 (let (($x530 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x606 (=> (bvule ?x394 (bvsub (bvadd ?x394 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x530 $x297)))))))
 (let (($x496 (=> (and $x154 (bvule ?x394 (bvsub (bvadd ?x394 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x530 $x297)))))))
 (let (($x225 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x306 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x415)))
 (let (($x236 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x548 (=> $x236 (or false (or false (and true (or $x306 $x225)))))))
 (let (($x23 (=> (and $x154 $x236) (or false (or false (and true (or $x306 $x225)))))))
 (let (($x7 (and $x23 $x496)))
 (let (($x396 (and $x7 $x155)))
 (let (($x714 (=> $x396 $x382)))
 (not $x714))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0 #b0000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_17)
(function @fun_17
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_17 #b10000000000000000000000000000010) #b00000100)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0 () (_ BitVec 19)
    #b0000000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv196368 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv196368 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0 () (_ BitVec 19) (_ bv0 19))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv319304 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv319304 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv319307 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 121
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0 () (_ BitVec 19))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x346 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x573 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x707 (concat (select input.dst.llvm-mem ?x573) (concat ?x242 (concat ?x261 ?x346)))))
 (let ((?x316 ((_ extract 18 0) ?x707)))
 (let ((?x340 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0 ?x316)))
 (let (($x801 (= (_ bv0 19) ?x340)))
 (let (($x475 (= $x801 true)))
 (let (($x60 (= (_ bv0 19) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0)))
 (let (($x489 (= $x60 true)))
 (let (($x235 (= $x489 true)))
 (let ((?x488 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x693 (= (_ bv0 3) ?x488)))
 (let (($x207 (= $x693 true)))
 (let (($x41 (= $x207 true)))
 (let (($x80 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x171 (=> $x80 false)))
 (let (($x555 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x843 (ite $x555 (_ bv0 32) (_ bv1 32))))
 (let (($x24 (= $x80 (bvuge ?x843 (_ bv1 32)))))
 (let (($x482 (= false false)))
 (let (($x392 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x457 (=> $x392 $x482)))
 (let (($x417 (= $x392 (= ?x843 (_ bv0 32)))))
 (let (($x653 (and $x417 $x457)))
 (let (($x500 (and $x653 $x24)))
 (let (($x614 (and $x500 $x171)))
 (let (($x262 (= $x614 true)))
 (let (($x413 (= $x262 true)))
 (let (($x201 (= $x413 true)))
 (let (($x554 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x102 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x683 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x102) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x102))))
 (let (($x169 (and true $x683)))
 (let (($x846 (and $x683 $x169)))
 (let ((?x236 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x808 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x808))))
 (let (($x104 (= (bvand ?x348 (_ bv4294967288 32)) ?x348)))
 (let (($x216 (= (bvand ?x236 (_ bv4294967292 32)) ?x236)))
 (let (($x507 (and $x216 $x104)))
 (let (($x425 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x236 (bvsub ?x236 (_ bv4 32))) (bvult ?x236 (bvsub ?x236 (_ bv4 32))))))
 (let (($x461 (and (and (and (and (and $x169 $x425) $x216) $x507) $x846) $x554)))
 (let (($x315 (= true $x461)))
 (let (($x154 (not $x555)))
 (let (($x129 (=> $x154 $x315)))
 (let (($x226 (= $x129 true)))
 (let (($x124 (= $x226 true)))
 (let (($x268 (= $x124 true)))
 (let (($x446 (= $x154 true)))
 (let (($x39 (= $x446 true)))
 (let (($x349 (= $x39 true)))
 (let (($x122 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x155 (= $x122 true)))
 (let (($x396 (= $x155 true)))
 (let ((?x551 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x213 (= (_ bv0 32) ?x551)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x365 (and $x78 $x56)))
 (let (($x497 (and $x365 $x213)))
 (let (($x821 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x510 (and $x821 $x497)))
 (let (($x247 (= $x510 true)))
 (let (($x809 (= $x247 true)))
 (let (($x468 (= $x809 true)))
 (let (($x299 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x283 (=> $x299 false)))
 (let ((?x345 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x637 (bvuge ?x345 (_ bv1 32))))
 (let (($x292 (= $x299 $x637)))
 (let (($x168 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x248 (=> $x168 $x482)))
 (let (($x219 (= ?x345 (_ bv0 32))))
 (let (($x312 (= $x168 $x219)))
 (let (($x546 (and $x312 $x248)))
 (let (($x832 (and $x546 $x292)))
 (let (($x494 (and $x832 $x283)))
 (let (($x867 (= $x494 true)))
 (let (($x95 (= $x867 true)))
 (let (($x17 (= $x95 true)))
 (let (($x273 (= $x80 $x637)))
 (let (($x581 (= $x392 $x219)))
 (let (($x364 (and $x581 $x457)))
 (let (($x210 (and $x364 $x273)))
 (let (($x623 (and $x210 $x171)))
 (let (($x716 (= $x623 true)))
 (let (($x580 (= $x716 true)))
 (let (($x333 (= $x580 true)))
 (let (($x675 (and $x333 $x17)))
 (let (($x397 (and $x675 $x468)))
 (let (($x592 (and $x397 $x396)))
 (let (($x550 (and $x592 $x349)))
 (let (($x771 (and $x550 $x268)))
 (let (($x523 (and $x771 $x201)))
 (let (($x615 (and $x523 $x41)))
 (let (($x403 (and $x615 $x235)))
 (let (($x783 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x575 (and $x783 $x403)))
 (let (($x853 (bvugt ?x236 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x236 (_ bv3 32))))
 (let (($x296 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x465 (=> (bvule ?x236 (bvsub (bvadd ?x236 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x296 $x853)))))))
 (let (($x506 (=> (and $x154 (bvule ?x236 (bvsub (bvadd ?x236 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x296 $x853)))))))
 (let (($x90 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x539 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x573)))
 (let (($x583 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x343 (=> $x583 (or false (or false (and true (or $x539 $x90)))))))
 (let (($x189 (=> (and $x154 $x583) (or false (or false (and true (or $x539 $x90)))))))
 (let (($x99 (and $x189 $x506)))
 (let (($x47 (and $x99 $x575)))
 (let (($x788 (=> $x47 $x475)))
 (not $x788))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0 () (_ BitVec 19))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x346 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x573 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x707 (concat (select input.dst.llvm-mem ?x573) (concat ?x242 (concat ?x261 ?x346)))))
 (let ((?x316 ((_ extract 18 0) ?x707)))
 (let ((?x340 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0 ?x316)))
 (let (($x801 (= (_ bv0 19) ?x340)))
 (let (($x475 (= $x801 true)))
 (let (($x60 (= (_ bv0 19) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_18_0)))
 (let (($x489 (= $x60 true)))
 (let (($x235 (= $x489 true)))
 (let ((?x488 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x693 (= (_ bv0 3) ?x488)))
 (let (($x207 (= $x693 true)))
 (let (($x41 (= $x207 true)))
 (let (($x80 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x171 (=> $x80 false)))
 (let (($x555 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x843 (ite $x555 (_ bv0 32) (_ bv1 32))))
 (let (($x24 (= $x80 (bvuge ?x843 (_ bv1 32)))))
 (let (($x482 (= false false)))
 (let (($x392 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x457 (=> $x392 $x482)))
 (let (($x417 (= $x392 (= ?x843 (_ bv0 32)))))
 (let (($x653 (and $x417 $x457)))
 (let (($x500 (and $x653 $x24)))
 (let (($x614 (and $x500 $x171)))
 (let (($x262 (= $x614 true)))
 (let (($x413 (= $x262 true)))
 (let (($x201 (= $x413 true)))
 (let (($x554 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x102 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x683 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x102) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x102))))
 (let (($x169 (and true $x683)))
 (let (($x846 (and $x683 $x169)))
 (let ((?x236 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x808 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x808))))
 (let (($x104 (= (bvand ?x348 (_ bv4294967288 32)) ?x348)))
 (let (($x216 (= (bvand ?x236 (_ bv4294967292 32)) ?x236)))
 (let (($x507 (and $x216 $x104)))
 (let (($x425 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x236 (bvsub ?x236 (_ bv4 32))) (bvult ?x236 (bvsub ?x236 (_ bv4 32))))))
 (let (($x461 (and (and (and (and (and $x169 $x425) $x216) $x507) $x846) $x554)))
 (let (($x315 (= true $x461)))
 (let (($x154 (not $x555)))
 (let (($x129 (=> $x154 $x315)))
 (let (($x226 (= $x129 true)))
 (let (($x124 (= $x226 true)))
 (let (($x268 (= $x124 true)))
 (let (($x446 (= $x154 true)))
 (let (($x39 (= $x446 true)))
 (let (($x349 (= $x39 true)))
 (let (($x122 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x155 (= $x122 true)))
 (let (($x396 (= $x155 true)))
 (let ((?x551 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x213 (= (_ bv0 32) ?x551)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x365 (and $x78 $x56)))
 (let (($x497 (and $x365 $x213)))
 (let (($x821 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x510 (and $x821 $x497)))
 (let (($x247 (= $x510 true)))
 (let (($x809 (= $x247 true)))
 (let (($x468 (= $x809 true)))
 (let (($x299 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x283 (=> $x299 false)))
 (let ((?x345 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x637 (bvuge ?x345 (_ bv1 32))))
 (let (($x292 (= $x299 $x637)))
 (let (($x168 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x248 (=> $x168 $x482)))
 (let (($x219 (= ?x345 (_ bv0 32))))
 (let (($x312 (= $x168 $x219)))
 (let (($x546 (and $x312 $x248)))
 (let (($x832 (and $x546 $x292)))
 (let (($x494 (and $x832 $x283)))
 (let (($x867 (= $x494 true)))
 (let (($x95 (= $x867 true)))
 (let (($x17 (= $x95 true)))
 (let (($x273 (= $x80 $x637)))
 (let (($x581 (= $x392 $x219)))
 (let (($x364 (and $x581 $x457)))
 (let (($x210 (and $x364 $x273)))
 (let (($x623 (and $x210 $x171)))
 (let (($x716 (= $x623 true)))
 (let (($x580 (= $x716 true)))
 (let (($x333 (= $x580 true)))
 (let (($x675 (and $x333 $x17)))
 (let (($x397 (and $x675 $x468)))
 (let (($x592 (and $x397 $x396)))
 (let (($x550 (and $x592 $x349)))
 (let (($x771 (and $x550 $x268)))
 (let (($x523 (and $x771 $x201)))
 (let (($x615 (and $x523 $x41)))
 (let (($x403 (and $x615 $x235)))
 (let (($x783 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x575 (and $x783 $x403)))
 (let (($x853 (bvugt ?x236 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x236 (_ bv3 32))))
 (let (($x296 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x465 (=> (bvule ?x236 (bvsub (bvadd ?x236 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x296 $x853)))))))
 (let (($x506 (=> (and $x154 (bvule ?x236 (bvsub (bvadd ?x236 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x296 $x853)))))))
 (let (($x90 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x539 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x573)))
 (let (($x583 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x343 (=> $x583 (or false (or false (and true (or $x539 $x90)))))))
 (let (($x189 (=> (and $x154 $x583) (or false (or false (and true (or $x539 $x90)))))))
 (let (($x99 (and $x189 $x506)))
 (let (($x47 (and $x99 $x575)))
 (let (($x788 (=> $x47 $x475)))
 (not $x788))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 122
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0 () (_ BitVec 18))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x435 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x657 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x806 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x187 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x68 (concat (select input.dst.llvm-mem ?x187) (concat ?x806 (concat ?x657 ?x435)))))
 (let ((?x448 ((_ extract 17 0) ?x68)))
 (let ((?x313 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0 ?x448)))
 (let (($x785 (= (_ bv0 18) ?x313)))
 (let (($x29 (= $x785 true)))
 (let (($x522 (= (_ bv0 18) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0)))
 (let (($x319 (= $x522 true)))
 (let (($x172 (= $x319 true)))
 (let ((?x427 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x9 (= (_ bv0 3) ?x427)))
 (let (($x588 (= $x9 true)))
 (let (($x828 (= $x588 true)))
 (let (($x715 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x348 (=> $x715 true)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x782 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x593 (= $x715 (bvuge ?x782 (_ bv1 32)))))
 (let (($x69 (= false false)))
 (let (($x714 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x216 (=> $x714 $x69)))
 (let (($x610 (= $x714 (= ?x782 (_ bv0 32)))))
 (let (($x59 (and $x610 $x216)))
 (let (($x278 (and $x59 $x593)))
 (let (($x311 (and $x278 $x348)))
 (let (($x193 (= $x311 true)))
 (let (($x111 (= $x193 true)))
 (let (($x302 (= $x111 true)))
 (let (($x404 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x346 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x316 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x346) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x346))))
 (let (($x340 (and true $x316)))
 (let (($x849 (and $x316 $x340)))
 (let ((?x583 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x583 (_ bv1 32))) (select input.dst.llvm-mem ?x583))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x583 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x583 (_ bv2 32))) ?x140))))
 (let (($x868 (= (bvand ?x182 (_ bv4294967288 32)) ?x182)))
 (let (($x577 (= (bvand ?x583 (_ bv4294967292 32)) ?x583)))
 (let (($x338 (and $x577 $x868)))
 (let (($x393 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x583 (bvsub ?x583 (_ bv4 32))) (bvult ?x583 (bvsub ?x583 (_ bv4 32))))))
 (let (($x729 (and (and (and (and (and $x340 $x393) $x577) $x338) $x849) $x404)))
 (let (($x676 (= true $x729)))
 (let (($x555 (not $x43)))
 (let (($x518 (=> $x555 $x676)))
 (let (($x429 (= $x518 true)))
 (let (($x57 (= $x429 true)))
 (let (($x700 (= $x57 true)))
 (let (($x363 (= $x555 true)))
 (let (($x242 (= $x363 true)))
 (let (($x378 (= $x242 true)))
 (let (($x403 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x575 (= $x403 true)))
 (let (($x47 (= $x575 true)))
 (let ((?x693 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x693)))
 (let ((?x523 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x523)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x488 (and $x201 $x162)))
 (let (($x41 (and $x488 $x207)))
 (let (($x413 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x615 (and $x413 $x41)))
 (let (($x76 (= $x615 true)))
 (let (($x158 (= $x76 true)))
 (let (($x60 (= $x158 true)))
 (let (($x771 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x417 (=> $x771 true)))
 (let ((?x425 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x541 (bvuge ?x425 (_ bv1 32))))
 (let (($x843 (= $x771 $x541)))
 (let (($x461 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x129 (=> $x461 $x69)))
 (let (($x662 (= ?x425 (_ bv0 32))))
 (let (($x315 (= $x461 $x662)))
 (let (($x226 (and $x315 $x129)))
 (let (($x212 (and $x226 $x843)))
 (let (($x653 (and $x212 $x417)))
 (let (($x317 (= $x653 true)))
 (let (($x24 (= $x317 true)))
 (let (($x500 (= $x24 true)))
 (let (($x808 (= $x715 $x541)))
 (let (($x854 (= $x714 $x662)))
 (let (($x170 (and $x854 $x216)))
 (let (($x409 (and $x170 $x808)))
 (let (($x447 (and $x409 $x348)))
 (let (($x309 (= $x447 true)))
 (let (($x104 (= $x309 true)))
 (let (($x507 (= $x104 true)))
 (let (($x614 (and $x507 $x500)))
 (let (($x489 (and $x614 $x60)))
 (let (($x34 (and $x489 $x47)))
 (let (($x261 (and $x34 $x378)))
 (let (($x612 (and $x261 $x700)))
 (let (($x291 (and $x612 $x302)))
 (let (($x97 (and $x291 $x828)))
 (let (($x215 (and $x97 $x172)))
 (let (($x392 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x464 (and $x392 $x215)))
 (let (($x496 (bvugt ?x583 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x583 (_ bv3 32))))
 (let (($x606 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x783 (=> (bvule ?x583 (bvsub (bvadd ?x583 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x606 $x496)))))))
 (let (($x116 (=> (and $x555 (bvule ?x583 (bvsub (bvadd ?x583 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x606 $x496)))))))
 (let (($x23 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x548 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x530 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x297 (=> $x530 (or false (or false (and true (or $x548 $x23)))))))
 (let (($x415 (=> (and $x555 $x530) (or false (or false (and true (or $x548 $x23)))))))
 (let (($x37 (and $x415 $x116)))
 (let (($x281 (and $x37 $x464)))
 (let (($x535 (=> $x281 $x29)))
 (not $x535))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0 () (_ BitVec 18))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x435 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x657 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x806 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x187 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x68 (concat (select input.dst.llvm-mem ?x187) (concat ?x806 (concat ?x657 ?x435)))))
 (let ((?x448 ((_ extract 17 0) ?x68)))
 (let ((?x313 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0 ?x448)))
 (let (($x785 (= (_ bv0 18) ?x313)))
 (let (($x29 (= $x785 true)))
 (let (($x522 (= (_ bv0 18) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0)))
 (let (($x319 (= $x522 true)))
 (let (($x172 (= $x319 true)))
 (let ((?x427 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x9 (= (_ bv0 3) ?x427)))
 (let (($x588 (= $x9 true)))
 (let (($x828 (= $x588 true)))
 (let (($x715 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x348 (=> $x715 true)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x782 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x593 (= $x715 (bvuge ?x782 (_ bv1 32)))))
 (let (($x69 (= false false)))
 (let (($x714 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x216 (=> $x714 $x69)))
 (let (($x610 (= $x714 (= ?x782 (_ bv0 32)))))
 (let (($x59 (and $x610 $x216)))
 (let (($x278 (and $x59 $x593)))
 (let (($x311 (and $x278 $x348)))
 (let (($x193 (= $x311 true)))
 (let (($x111 (= $x193 true)))
 (let (($x302 (= $x111 true)))
 (let (($x404 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x346 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x316 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x346) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x346))))
 (let (($x340 (and true $x316)))
 (let (($x849 (and $x316 $x340)))
 (let ((?x583 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x583 (_ bv1 32))) (select input.dst.llvm-mem ?x583))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x583 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x583 (_ bv2 32))) ?x140))))
 (let (($x868 (= (bvand ?x182 (_ bv4294967288 32)) ?x182)))
 (let (($x577 (= (bvand ?x583 (_ bv4294967292 32)) ?x583)))
 (let (($x338 (and $x577 $x868)))
 (let (($x393 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x583 (bvsub ?x583 (_ bv4 32))) (bvult ?x583 (bvsub ?x583 (_ bv4 32))))))
 (let (($x729 (and (and (and (and (and $x340 $x393) $x577) $x338) $x849) $x404)))
 (let (($x676 (= true $x729)))
 (let (($x555 (not $x43)))
 (let (($x518 (=> $x555 $x676)))
 (let (($x429 (= $x518 true)))
 (let (($x57 (= $x429 true)))
 (let (($x700 (= $x57 true)))
 (let (($x363 (= $x555 true)))
 (let (($x242 (= $x363 true)))
 (let (($x378 (= $x242 true)))
 (let (($x403 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x575 (= $x403 true)))
 (let (($x47 (= $x575 true)))
 (let ((?x693 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x693)))
 (let ((?x523 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x523)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x488 (and $x201 $x162)))
 (let (($x41 (and $x488 $x207)))
 (let (($x413 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x615 (and $x413 $x41)))
 (let (($x76 (= $x615 true)))
 (let (($x158 (= $x76 true)))
 (let (($x60 (= $x158 true)))
 (let (($x771 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x417 (=> $x771 true)))
 (let ((?x425 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x541 (bvuge ?x425 (_ bv1 32))))
 (let (($x843 (= $x771 $x541)))
 (let (($x461 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x129 (=> $x461 $x69)))
 (let (($x662 (= ?x425 (_ bv0 32))))
 (let (($x315 (= $x461 $x662)))
 (let (($x226 (and $x315 $x129)))
 (let (($x212 (and $x226 $x843)))
 (let (($x653 (and $x212 $x417)))
 (let (($x317 (= $x653 true)))
 (let (($x24 (= $x317 true)))
 (let (($x500 (= $x24 true)))
 (let (($x808 (= $x715 $x541)))
 (let (($x854 (= $x714 $x662)))
 (let (($x170 (and $x854 $x216)))
 (let (($x409 (and $x170 $x808)))
 (let (($x447 (and $x409 $x348)))
 (let (($x309 (= $x447 true)))
 (let (($x104 (= $x309 true)))
 (let (($x507 (= $x104 true)))
 (let (($x614 (and $x507 $x500)))
 (let (($x489 (and $x614 $x60)))
 (let (($x34 (and $x489 $x47)))
 (let (($x261 (and $x34 $x378)))
 (let (($x612 (and $x261 $x700)))
 (let (($x291 (and $x612 $x302)))
 (let (($x97 (and $x291 $x828)))
 (let (($x215 (and $x97 $x172)))
 (let (($x392 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x464 (and $x392 $x215)))
 (let (($x496 (bvugt ?x583 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x583 (_ bv3 32))))
 (let (($x606 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x783 (=> (bvule ?x583 (bvsub (bvadd ?x583 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x606 $x496)))))))
 (let (($x116 (=> (and $x555 (bvule ?x583 (bvsub (bvadd ?x583 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x606 $x496)))))))
 (let (($x23 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x548 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x530 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x297 (=> $x530 (or false (or false (and true (or $x548 $x23)))))))
 (let (($x415 (=> (and $x555 $x530) (or false (or false (and true (or $x548 $x23)))))))
 (let (($x37 (and $x415 $x116)))
 (let (($x281 (and $x37 $x464)))
 (let (($x535 (=> $x281 $x29)))
 (not $x535))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0 #b000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_17)
(function @fun_17
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_17 #b10000000000000000000000000000010) #b00000010)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0 () (_ BitVec 18)
    #b000000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv250352 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv250352 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0 () (_ BitVec 18) (_ bv0 18))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv302856 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv302856 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv302859 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 123
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0 () (_ BitVec 18))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x763 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x284 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x681 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x394 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x686 (concat (select input.dst.llvm-mem ?x394) (concat ?x681 (concat ?x284 ?x763)))))
 (let ((?x838 ((_ extract 17 0) ?x686)))
 (let ((?x458 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0 ?x838)))
 (let (($x185 (= (_ bv0 18) ?x458)))
 (let (($x740 (= $x185 true)))
 (let (($x538 (= (_ bv0 18) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0)))
 (let (($x483 (= $x538 true)))
 (let (($x391 (= $x483 true)))
 (let ((?x120 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x352 (= (_ bv0 3) ?x120)))
 (let (($x513 (= $x352 true)))
 (let (($x563 (= $x513 true)))
 (let (($x811 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x182 (=> $x811 false)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x377 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x443 (= $x811 (bvuge ?x377 (_ bv1 32)))))
 (let (($x204 (= false false)))
 (let (($x788 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x577 (=> $x788 $x204)))
 (let (($x234 (= $x788 (= ?x377 (_ bv0 32)))))
 (let (($x533 (and $x234 $x577)))
 (let (($x432 (and $x533 $x443)))
 (let (($x859 (and $x432 $x182)))
 (let (($x341 (= $x859 true)))
 (let (($x318 (= $x341 true)))
 (let (($x840 (= $x318 true)))
 (let (($x580 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x435 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x448 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435))))
 (let (($x313 (and true $x448)))
 (let (($x168 (and $x448 $x313)))
 (let ((?x530 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x530 (_ bv1 32))) (select input.dst.llvm-mem ?x530))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x530 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x530 (_ bv2 32))) ?x80))))
 (let (($x299 (= (bvand ?x219 (_ bv4294967288 32)) ?x219)))
 (let (($x508 (= (bvand ?x530 (_ bv4294967292 32)) ?x530)))
 (let (($x720 (and $x508 $x299)))
 (let (($x444 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x530 (bvsub ?x530 (_ bv4 32))) (bvult ?x530 (bvsub ?x530 (_ bv4 32))))))
 (let (($x333 (and (and (and (and (and $x313 $x444) $x508) $x720) $x168) $x580)))
 (let (($x312 (= true $x333)))
 (let (($x555 (not $x43)))
 (let (($x675 (=> $x555 $x312)))
 (let (($x369 (= $x675 true)))
 (let (($x867 (= $x369 true)))
 (let (($x95 (= $x867 true)))
 (let (($x286 (= $x555 true)))
 (let (($x806 (= $x286 true)))
 (let (($x209 (= $x806 true)))
 (let (($x215 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x464 (= $x215 true)))
 (let (($x281 (= $x464 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x588 (= (_ bv0 32) ?x9)))
 (let ((?x291 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x291)))
 (let (($x302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x427 (and $x302 $x260)))
 (let (($x828 (and $x427 $x588)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x111 $x828)))
 (let (($x803 (= $x97 true)))
 (let (($x659 (= $x803 true)))
 (let (($x522 (= $x659 true)))
 (let (($x612 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x610 (=> $x612 false)))
 (let ((?x393 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge ?x393 (_ bv1 32))))
 (let (($x782 (= $x612 $x196)))
 (let (($x729 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x518 (=> $x729 $x204)))
 (let (($x334 (= ?x393 (_ bv0 32))))
 (let (($x676 (= $x729 $x334)))
 (let (($x429 (and $x676 $x518)))
 (let (($x764 (and $x429 $x782)))
 (let (($x59 (and $x764 $x610)))
 (let (($x666 (= $x59 true)))
 (let (($x593 (= $x666 true)))
 (let (($x278 (= $x593 true)))
 (let (($x140 (= $x811 $x196)))
 (let (($x252 (= $x788 $x334)))
 (let (($x100 (and $x252 $x577)))
 (let (($x847 (and $x100 $x140)))
 (let (($x684 (and $x847 $x182)))
 (let (($x804 (= $x684 true)))
 (let (($x868 (= $x804 true)))
 (let (($x338 (= $x868 true)))
 (let (($x311 (and $x338 $x278)))
 (let (($x319 (and $x311 $x522)))
 (let (($x32 (and $x319 $x281)))
 (let (($x657 (and $x32 $x209)))
 (let (($x832 (and $x657 $x95)))
 (let (($x822 (and $x832 $x840)))
 (let (($x529 (and $x822 $x563)))
 (let (($x190 (and $x529 $x391)))
 (let (($x714 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x390 (and $x714 $x190)))
 (let (($x506 (bvugt ?x530 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x530 (_ bv3 32))))
 (let (($x465 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x392 (=> (bvule ?x530 (bvsub (bvadd ?x530 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x465 $x506)))))))
 (let (($x238 (=> (and $x555 (bvule ?x530 (bvsub (bvadd ?x530 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x465 $x506)))))))
 (let (($x189 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x343 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x394)))
 (let (($x296 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x853 (=> $x296 (or false (or false (and true (or $x343 $x189)))))))
 (let (($x573 (=> (and $x555 $x296) (or false (or false (and true (or $x343 $x189)))))))
 (let (($x186 (and $x573 $x238)))
 (let (($x567 (and $x186 $x390)))
 (let (($x642 (=> $x567 $x740)))
 (not $x642))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0 () (_ BitVec 18))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x763 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x284 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x681 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x394 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x686 (concat (select input.dst.llvm-mem ?x394) (concat ?x681 (concat ?x284 ?x763)))))
 (let ((?x838 ((_ extract 17 0) ?x686)))
 (let ((?x458 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0 ?x838)))
 (let (($x185 (= (_ bv0 18) ?x458)))
 (let (($x740 (= $x185 true)))
 (let (($x538 (= (_ bv0 18) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_17_0)))
 (let (($x483 (= $x538 true)))
 (let (($x391 (= $x483 true)))
 (let ((?x120 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x352 (= (_ bv0 3) ?x120)))
 (let (($x513 (= $x352 true)))
 (let (($x563 (= $x513 true)))
 (let (($x811 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x182 (=> $x811 false)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x377 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x443 (= $x811 (bvuge ?x377 (_ bv1 32)))))
 (let (($x204 (= false false)))
 (let (($x788 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x577 (=> $x788 $x204)))
 (let (($x234 (= $x788 (= ?x377 (_ bv0 32)))))
 (let (($x533 (and $x234 $x577)))
 (let (($x432 (and $x533 $x443)))
 (let (($x859 (and $x432 $x182)))
 (let (($x341 (= $x859 true)))
 (let (($x318 (= $x341 true)))
 (let (($x840 (= $x318 true)))
 (let (($x580 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x435 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x448 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435))))
 (let (($x313 (and true $x448)))
 (let (($x168 (and $x448 $x313)))
 (let ((?x530 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x530 (_ bv1 32))) (select input.dst.llvm-mem ?x530))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x530 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x530 (_ bv2 32))) ?x80))))
 (let (($x299 (= (bvand ?x219 (_ bv4294967288 32)) ?x219)))
 (let (($x508 (= (bvand ?x530 (_ bv4294967292 32)) ?x530)))
 (let (($x720 (and $x508 $x299)))
 (let (($x444 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x530 (bvsub ?x530 (_ bv4 32))) (bvult ?x530 (bvsub ?x530 (_ bv4 32))))))
 (let (($x333 (and (and (and (and (and $x313 $x444) $x508) $x720) $x168) $x580)))
 (let (($x312 (= true $x333)))
 (let (($x555 (not $x43)))
 (let (($x675 (=> $x555 $x312)))
 (let (($x369 (= $x675 true)))
 (let (($x867 (= $x369 true)))
 (let (($x95 (= $x867 true)))
 (let (($x286 (= $x555 true)))
 (let (($x806 (= $x286 true)))
 (let (($x209 (= $x806 true)))
 (let (($x215 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x464 (= $x215 true)))
 (let (($x281 (= $x464 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x588 (= (_ bv0 32) ?x9)))
 (let ((?x291 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x291)))
 (let (($x302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x427 (and $x302 $x260)))
 (let (($x828 (and $x427 $x588)))
 (let (($x111 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x111 $x828)))
 (let (($x803 (= $x97 true)))
 (let (($x659 (= $x803 true)))
 (let (($x522 (= $x659 true)))
 (let (($x612 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x610 (=> $x612 false)))
 (let ((?x393 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge ?x393 (_ bv1 32))))
 (let (($x782 (= $x612 $x196)))
 (let (($x729 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x518 (=> $x729 $x204)))
 (let (($x334 (= ?x393 (_ bv0 32))))
 (let (($x676 (= $x729 $x334)))
 (let (($x429 (and $x676 $x518)))
 (let (($x764 (and $x429 $x782)))
 (let (($x59 (and $x764 $x610)))
 (let (($x666 (= $x59 true)))
 (let (($x593 (= $x666 true)))
 (let (($x278 (= $x593 true)))
 (let (($x140 (= $x811 $x196)))
 (let (($x252 (= $x788 $x334)))
 (let (($x100 (and $x252 $x577)))
 (let (($x847 (and $x100 $x140)))
 (let (($x684 (and $x847 $x182)))
 (let (($x804 (= $x684 true)))
 (let (($x868 (= $x804 true)))
 (let (($x338 (= $x868 true)))
 (let (($x311 (and $x338 $x278)))
 (let (($x319 (and $x311 $x522)))
 (let (($x32 (and $x319 $x281)))
 (let (($x657 (and $x32 $x209)))
 (let (($x832 (and $x657 $x95)))
 (let (($x822 (and $x832 $x840)))
 (let (($x529 (and $x822 $x563)))
 (let (($x190 (and $x529 $x391)))
 (let (($x714 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x390 (and $x714 $x190)))
 (let (($x506 (bvugt ?x530 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x530 (_ bv3 32))))
 (let (($x465 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x392 (=> (bvule ?x530 (bvsub (bvadd ?x530 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x465 $x506)))))))
 (let (($x238 (=> (and $x555 (bvule ?x530 (bvsub (bvadd ?x530 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x465 $x506)))))))
 (let (($x189 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x343 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x394)))
 (let (($x296 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x853 (=> $x296 (or false (or false (and true (or $x343 $x189)))))))
 (let (($x573 (=> (and $x555 $x296) (or false (or false (and true (or $x343 $x189)))))))
 (let (($x186 (and $x573 $x238)))
 (let (($x567 (and $x186 $x390)))
 (let (($x642 (=> $x567 $x740)))
 (not $x642))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 124
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0 () (_ BitVec 17))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x638 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x236 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x365 (concat (select input.dst.llvm-mem ?x236) (concat ?x638 (concat ?x78 ?x122)))))
 (let ((?x497 ((_ extract 16 0) ?x365)))
 (let ((?x809 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0 ?x497)))
 (let (($x683 (= (_ bv0 17) ?x809)))
 (let (($x169 (= $x683 true)))
 (let (($x550 (= (_ bv0 17) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0)))
 (let (($x397 (= $x550 true)))
 (let (($x551 (= $x397 true)))
 (let ((?x510 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x247 (= (_ bv0 3) ?x510)))
 (let (($x436 (= $x247 true)))
 (let (($x468 (= $x436 true)))
 (let (($x457 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x219 (=> $x457 true)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x235 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x623 (= $x457 (bvuge ?x235 (_ bv1 32)))))
 (let (($x305 (= false false)))
 (let (($x535 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x508 (=> $x535 $x305)))
 (let (($x328 (= $x535 (= ?x235 (_ bv0 32)))))
 (let (($x707 (and $x328 $x508)))
 (let (($x88 (and $x707 $x623)))
 (let (($x344 (and $x88 $x219)))
 (let (($x398 (= $x344 true)))
 (let (($x283 (= $x398 true)))
 (let (($x292 (= $x283 true)))
 (let (($x104 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x763 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x838 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763))))
 (let (($x458 (and true $x838)))
 (let (($x461 (and $x838 $x458)))
 (let ((?x296 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x715 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x662 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x715))))
 (let (($x771 (= (bvand ?x662 (_ bv4294967288 32)) ?x662)))
 (let (($x725 (= (bvand ?x296 (_ bv4294967292 32)) ?x296)))
 (let (($x554 (and $x725 $x771)))
 (let (($x410 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x296 (bvsub ?x296 (_ bv4 32))) (bvult ?x296 (bvsub ?x296 (_ bv4 32))))))
 (let (($x507 (and (and (and (and (and $x458 $x410) $x725) $x554) $x461) $x104)))
 (let (($x315 (= true $x507)))
 (let (($x43 (not $x161)))
 (let (($x614 (=> $x43 $x315)))
 (let (($x262 (= $x614 true)))
 (let (($x317 (= $x262 true)))
 (let (($x24 (= $x317 true)))
 (let (($x191 (= $x43 true)))
 (let (($x681 (= $x191 true)))
 (let (($x723 (= $x681 true)))
 (let (($x190 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x390 (= $x190 true)))
 (let (($x567 (= $x390 true)))
 (let ((?x352 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x513 (= (_ bv0 32) ?x352)))
 (let ((?x822 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x822)))
 (let (($x840 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x840 $x72)))
 (let (($x563 (and $x120 $x513)))
 (let (($x318 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x529 (and $x318 $x563)))
 (let (($x303 (= $x529 true)))
 (let (($x844 (= $x303 true)))
 (let (($x538 (= $x844 true)))
 (let (($x832 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x234 (=> $x832 true)))
 (let ((?x444 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x248 (bvuge ?x444 (_ bv1 32))))
 (let (($x377 (= $x832 $x248)))
 (let (($x333 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x675 (=> $x333 $x305)))
 (let (($x273 (= ?x444 (_ bv0 32))))
 (let (($x312 (= $x333 $x273)))
 (let (($x369 (and $x312 $x675)))
 (let (($x460 (and $x369 $x377)))
 (let (($x533 (and $x460 $x234)))
 (let (($x268 (= $x533 true)))
 (let (($x443 (= $x268 true)))
 (let (($x432 (= $x443 true)))
 (let (($x80 (= $x457 $x248)))
 (let (($x846 (= $x535 $x273)))
 (let (($x210 (and $x846 $x508)))
 (let (($x176 (and $x210 $x80)))
 (let (($x520 (and $x176 $x219)))
 (let (($x546 (= $x520 true)))
 (let (($x299 (= $x546 true)))
 (let (($x720 (= $x299 true)))
 (let (($x859 (and $x720 $x432)))
 (let (($x483 (and $x859 $x538)))
 (let (($x347 (and $x483 $x567)))
 (let (($x284 (and $x347 $x723)))
 (let (($x212 (and $x284 $x24)))
 (let (($x494 (and $x212 $x292)))
 (let (($x155 (and $x494 $x468)))
 (let (($x102 (and $x155 $x551)))
 (let (($x788 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x39 (and $x788 $x102)))
 (let (($x116 (bvugt ?x296 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x296 (_ bv3 32))))
 (let (($x783 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x714 (=> (bvule ?x296 (bvsub (bvadd ?x296 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x783 $x116)))))))
 (let (($x480 (=> (and $x43 (bvule ?x296 (bvsub (bvadd ?x296 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x783 $x116)))))))
 (let (($x415 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x236)))
 (let (($x606 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x496 (=> $x606 (or false (or false (and true (or $x297 $x415)))))))
 (let (($x187 (=> (and $x43 $x606) (or false (or false (and true (or $x297 $x415)))))))
 (let (($x7 (and $x187 $x480)))
 (let (($x56 (and $x7 $x39)))
 (let (($x382 (=> $x56 $x169)))
 (not $x382))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0 () (_ BitVec 17))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x638 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x236 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x365 (concat (select input.dst.llvm-mem ?x236) (concat ?x638 (concat ?x78 ?x122)))))
 (let ((?x497 ((_ extract 16 0) ?x365)))
 (let ((?x809 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0 ?x497)))
 (let (($x683 (= (_ bv0 17) ?x809)))
 (let (($x169 (= $x683 true)))
 (let (($x550 (= (_ bv0 17) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0)))
 (let (($x397 (= $x550 true)))
 (let (($x551 (= $x397 true)))
 (let ((?x510 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x247 (= (_ bv0 3) ?x510)))
 (let (($x436 (= $x247 true)))
 (let (($x468 (= $x436 true)))
 (let (($x457 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x219 (=> $x457 true)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x235 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x623 (= $x457 (bvuge ?x235 (_ bv1 32)))))
 (let (($x305 (= false false)))
 (let (($x535 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x508 (=> $x535 $x305)))
 (let (($x328 (= $x535 (= ?x235 (_ bv0 32)))))
 (let (($x707 (and $x328 $x508)))
 (let (($x88 (and $x707 $x623)))
 (let (($x344 (and $x88 $x219)))
 (let (($x398 (= $x344 true)))
 (let (($x283 (= $x398 true)))
 (let (($x292 (= $x283 true)))
 (let (($x104 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x763 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x838 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x763))))
 (let (($x458 (and true $x838)))
 (let (($x461 (and $x838 $x458)))
 (let ((?x296 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x715 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x662 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x715))))
 (let (($x771 (= (bvand ?x662 (_ bv4294967288 32)) ?x662)))
 (let (($x725 (= (bvand ?x296 (_ bv4294967292 32)) ?x296)))
 (let (($x554 (and $x725 $x771)))
 (let (($x410 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x296 (bvsub ?x296 (_ bv4 32))) (bvult ?x296 (bvsub ?x296 (_ bv4 32))))))
 (let (($x507 (and (and (and (and (and $x458 $x410) $x725) $x554) $x461) $x104)))
 (let (($x315 (= true $x507)))
 (let (($x43 (not $x161)))
 (let (($x614 (=> $x43 $x315)))
 (let (($x262 (= $x614 true)))
 (let (($x317 (= $x262 true)))
 (let (($x24 (= $x317 true)))
 (let (($x191 (= $x43 true)))
 (let (($x681 (= $x191 true)))
 (let (($x723 (= $x681 true)))
 (let (($x190 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x390 (= $x190 true)))
 (let (($x567 (= $x390 true)))
 (let ((?x352 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x513 (= (_ bv0 32) ?x352)))
 (let ((?x822 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x822)))
 (let (($x840 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x840 $x72)))
 (let (($x563 (and $x120 $x513)))
 (let (($x318 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x529 (and $x318 $x563)))
 (let (($x303 (= $x529 true)))
 (let (($x844 (= $x303 true)))
 (let (($x538 (= $x844 true)))
 (let (($x832 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x234 (=> $x832 true)))
 (let ((?x444 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x248 (bvuge ?x444 (_ bv1 32))))
 (let (($x377 (= $x832 $x248)))
 (let (($x333 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x675 (=> $x333 $x305)))
 (let (($x273 (= ?x444 (_ bv0 32))))
 (let (($x312 (= $x333 $x273)))
 (let (($x369 (and $x312 $x675)))
 (let (($x460 (and $x369 $x377)))
 (let (($x533 (and $x460 $x234)))
 (let (($x268 (= $x533 true)))
 (let (($x443 (= $x268 true)))
 (let (($x432 (= $x443 true)))
 (let (($x80 (= $x457 $x248)))
 (let (($x846 (= $x535 $x273)))
 (let (($x210 (and $x846 $x508)))
 (let (($x176 (and $x210 $x80)))
 (let (($x520 (and $x176 $x219)))
 (let (($x546 (= $x520 true)))
 (let (($x299 (= $x546 true)))
 (let (($x720 (= $x299 true)))
 (let (($x859 (and $x720 $x432)))
 (let (($x483 (and $x859 $x538)))
 (let (($x347 (and $x483 $x567)))
 (let (($x284 (and $x347 $x723)))
 (let (($x212 (and $x284 $x24)))
 (let (($x494 (and $x212 $x292)))
 (let (($x155 (and $x494 $x468)))
 (let (($x102 (and $x155 $x551)))
 (let (($x788 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x39 (and $x788 $x102)))
 (let (($x116 (bvugt ?x296 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x296 (_ bv3 32))))
 (let (($x783 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x714 (=> (bvule ?x296 (bvsub (bvadd ?x296 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x783 $x116)))))))
 (let (($x480 (=> (and $x43 (bvule ?x296 (bvsub (bvadd ?x296 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x783 $x116)))))))
 (let (($x415 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x236)))
 (let (($x606 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x496 (=> $x606 (or false (or false (and true (or $x297 $x415)))))))
 (let (($x187 (=> (and $x43 $x606) (or false (or false (and true (or $x297 $x415)))))))
 (let (($x7 (and $x187 $x480)))
 (let (($x56 (and $x7 $x39)))
 (let (($x382 (=> $x56 $x169)))
 (not $x382))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0 #b00000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_17)
(function @fun_17
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_17 #b10000000000000000000000000000010) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0 () (_ BitVec 17)
    #b00000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv161560 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv161560 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0 () (_ BitVec 17) (_ bv0 17))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv270104 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv270104 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv270107 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 125
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0 () (_ BitVec 17))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x403 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x583 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x488 (concat (select input.dst.llvm-mem ?x583) (concat ?x192 (concat ?x201 ?x403)))))
 (let ((?x41 ((_ extract 16 0) ?x488)))
 (let ((?x158 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0 ?x41)))
 (let (($x316 (= (_ bv0 17) ?x158)))
 (let (($x340 (= $x316 true)))
 (let (($x261 (= (_ bv0 17) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0)))
 (let (($x489 (= $x261 true)))
 (let (($x693 (= $x489 true)))
 (let ((?x615 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x76 (= (_ bv0 3) ?x615)))
 (let (($x682 (= $x76 true)))
 (let (($x60 (= $x682 true)))
 (let (($x216 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x662 (=> $x216 false)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x172 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x447 (= $x216 (bvuge ?x172 (_ bv1 32)))))
 (let (($x581 (= false false)))
 (let (($x642 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x725 (=> $x642 $x581)))
 (let (($x716 (= $x642 (= ?x172 (_ bv0 32)))))
 (let (($x68 (and $x716 $x725)))
 (let (($x135 (and $x68 $x447)))
 (let (($x848 (and $x135 $x662)))
 (let (($x482 (= $x848 true)))
 (let (($x417 (= $x482 true)))
 (let (($x843 (= $x417 true)))
 (let (($x868 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x122 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x497 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122))))
 (let (($x809 (and true $x497)))
 (let (($x729 (and $x497 $x809)))
 (let ((?x606 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x811 (concat (select input.dst.llvm-mem (bvadd ?x606 (_ bv1 32))) (select input.dst.llvm-mem ?x606))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x606 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x606 (_ bv2 32))) ?x811))))
 (let (($x612 (= (bvand ?x334 (_ bv4294967288 32)) ?x334)))
 (let (($x259 (= (bvand ?x606 (_ bv4294967292 32)) ?x606)))
 (let (($x404 (and $x259 $x612)))
 (let (($x637 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x606 (bvsub ?x606 (_ bv4 32))) (bvult ?x606 (bvsub ?x606 (_ bv4 32))))))
 (let (($x338 (and (and (and (and (and $x809 $x637) $x259) $x404) $x729) $x868)))
 (let (($x676 (= true $x338)))
 (let (($x43 (not $x161)))
 (let (($x311 (=> $x43 $x676)))
 (let (($x193 (= $x311 true)))
 (let (($x666 (= $x193 true)))
 (let (($x593 (= $x666 true)))
 (let (($x73 (= $x43 true)))
 (let (($x638 (= $x73 true)))
 (let (($x821 (= $x638 true)))
 (let (($x102 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x39 (= $x102 true)))
 (let (($x56 (= $x39 true)))
 (let ((?x247 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x436 (= (_ bv0 32) ?x247)))
 (let ((?x494 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x396 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x494)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x510 (and $x292 $x396)))
 (let (($x468 (and $x510 $x436)))
 (let (($x283 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x283 $x468)))
 (let (($x446 (= $x155 true)))
 (let (($x592 (= $x446 true)))
 (let (($x550 (= $x592 true)))
 (let (($x212 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x328 (=> $x212 false)))
 (let ((?x410 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x410 (_ bv1 32))))
 (let (($x235 (= $x212 $x129)))
 (let (($x507 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x614 (=> $x507 $x581)))
 (let (($x808 (= ?x410 (_ bv0 32))))
 (let (($x315 (= $x507 $x808)))
 (let (($x262 (and $x315 $x614)))
 (let (($x119 (and $x262 $x235)))
 (let (($x707 (and $x119 $x328)))
 (let (($x700 (= $x707 true)))
 (let (($x623 (= $x700 true)))
 (let (($x88 (= $x623 true)))
 (let (($x715 (= $x216 $x129)))
 (let (($x849 (= $x642 $x808)))
 (let (($x409 (and $x849 $x725)))
 (let (($x512 (and $x409 $x715)))
 (let (($x225 (and $x512 $x662)))
 (let (($x226 (= $x225 true)))
 (let (($x771 (= $x226 true)))
 (let (($x554 (= $x771 true)))
 (let (($x344 (and $x554 $x88)))
 (let (($x397 (and $x344 $x550)))
 (let (($x213 (and $x397 $x56)))
 (let (($x78 (and $x213 $x821)))
 (let (($x764 (and $x78 $x593)))
 (let (($x653 (and $x764 $x843)))
 (let (($x575 (and $x653 $x60)))
 (let (($x346 (and $x575 $x693)))
 (let (($x535 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x242 (and $x535 $x346)))
 (let (($x238 (bvugt ?x606 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x606 (_ bv3 32))))
 (let (($x392 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x788 (=> (bvule ?x606 (bvsub (bvadd ?x606 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x392 $x238)))))))
 (let (($x544 (=> (and $x43 (bvule ?x606 (bvsub (bvadd ?x606 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x392 $x238)))))))
 (let (($x573 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x853 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x583)))
 (let (($x465 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x506 (=> $x465 (or false (or false (and true (or $x853 $x573)))))))
 (let (($x394 (=> (and $x43 $x465) (or false (or false (and true (or $x853 $x573)))))))
 (let (($x99 (and $x394 $x544)))
 (let (($x162 (and $x99 $x242)))
 (let (($x475 (=> $x162 $x340)))
 (not $x475))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0 () (_ BitVec 17))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x403 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x583 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x488 (concat (select input.dst.llvm-mem ?x583) (concat ?x192 (concat ?x201 ?x403)))))
 (let ((?x41 ((_ extract 16 0) ?x488)))
 (let ((?x158 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0 ?x41)))
 (let (($x316 (= (_ bv0 17) ?x158)))
 (let (($x340 (= $x316 true)))
 (let (($x261 (= (_ bv0 17) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_16_0)))
 (let (($x489 (= $x261 true)))
 (let (($x693 (= $x489 true)))
 (let ((?x615 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x76 (= (_ bv0 3) ?x615)))
 (let (($x682 (= $x76 true)))
 (let (($x60 (= $x682 true)))
 (let (($x216 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x662 (=> $x216 false)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x172 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x447 (= $x216 (bvuge ?x172 (_ bv1 32)))))
 (let (($x581 (= false false)))
 (let (($x642 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x725 (=> $x642 $x581)))
 (let (($x716 (= $x642 (= ?x172 (_ bv0 32)))))
 (let (($x68 (and $x716 $x725)))
 (let (($x135 (and $x68 $x447)))
 (let (($x848 (and $x135 $x662)))
 (let (($x482 (= $x848 true)))
 (let (($x417 (= $x482 true)))
 (let (($x843 (= $x417 true)))
 (let (($x868 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x122 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x497 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122))))
 (let (($x809 (and true $x497)))
 (let (($x729 (and $x497 $x809)))
 (let ((?x606 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x811 (concat (select input.dst.llvm-mem (bvadd ?x606 (_ bv1 32))) (select input.dst.llvm-mem ?x606))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x606 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x606 (_ bv2 32))) ?x811))))
 (let (($x612 (= (bvand ?x334 (_ bv4294967288 32)) ?x334)))
 (let (($x259 (= (bvand ?x606 (_ bv4294967292 32)) ?x606)))
 (let (($x404 (and $x259 $x612)))
 (let (($x637 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x606 (bvsub ?x606 (_ bv4 32))) (bvult ?x606 (bvsub ?x606 (_ bv4 32))))))
 (let (($x338 (and (and (and (and (and $x809 $x637) $x259) $x404) $x729) $x868)))
 (let (($x676 (= true $x338)))
 (let (($x43 (not $x161)))
 (let (($x311 (=> $x43 $x676)))
 (let (($x193 (= $x311 true)))
 (let (($x666 (= $x193 true)))
 (let (($x593 (= $x666 true)))
 (let (($x73 (= $x43 true)))
 (let (($x638 (= $x73 true)))
 (let (($x821 (= $x638 true)))
 (let (($x102 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x39 (= $x102 true)))
 (let (($x56 (= $x39 true)))
 (let ((?x247 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x436 (= (_ bv0 32) ?x247)))
 (let ((?x494 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x396 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x494)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x510 (and $x292 $x396)))
 (let (($x468 (and $x510 $x436)))
 (let (($x283 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x283 $x468)))
 (let (($x446 (= $x155 true)))
 (let (($x592 (= $x446 true)))
 (let (($x550 (= $x592 true)))
 (let (($x212 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x328 (=> $x212 false)))
 (let ((?x410 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x410 (_ bv1 32))))
 (let (($x235 (= $x212 $x129)))
 (let (($x507 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x614 (=> $x507 $x581)))
 (let (($x808 (= ?x410 (_ bv0 32))))
 (let (($x315 (= $x507 $x808)))
 (let (($x262 (and $x315 $x614)))
 (let (($x119 (and $x262 $x235)))
 (let (($x707 (and $x119 $x328)))
 (let (($x700 (= $x707 true)))
 (let (($x623 (= $x700 true)))
 (let (($x88 (= $x623 true)))
 (let (($x715 (= $x216 $x129)))
 (let (($x849 (= $x642 $x808)))
 (let (($x409 (and $x849 $x725)))
 (let (($x512 (and $x409 $x715)))
 (let (($x225 (and $x512 $x662)))
 (let (($x226 (= $x225 true)))
 (let (($x771 (= $x226 true)))
 (let (($x554 (= $x771 true)))
 (let (($x344 (and $x554 $x88)))
 (let (($x397 (and $x344 $x550)))
 (let (($x213 (and $x397 $x56)))
 (let (($x78 (and $x213 $x821)))
 (let (($x764 (and $x78 $x593)))
 (let (($x653 (and $x764 $x843)))
 (let (($x575 (and $x653 $x60)))
 (let (($x346 (and $x575 $x693)))
 (let (($x535 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x242 (and $x535 $x346)))
 (let (($x238 (bvugt ?x606 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x606 (_ bv3 32))))
 (let (($x392 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x788 (=> (bvule ?x606 (bvsub (bvadd ?x606 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x392 $x238)))))))
 (let (($x544 (=> (and $x43 (bvule ?x606 (bvsub (bvadd ?x606 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x392 $x238)))))))
 (let (($x573 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x853 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x583)))
 (let (($x465 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x506 (=> $x465 (or false (or false (and true (or $x853 $x573)))))))
 (let (($x394 (=> (and $x43 $x465) (or false (or false (and true (or $x853 $x573)))))))
 (let (($x99 (and $x394 $x544)))
 (let (($x162 (and $x99 $x242)))
 (let (($x475 (=> $x162 $x340)))
 (not $x475))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 126
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0 () (_ BitVec 16))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x278 (concat ?x302 ?x215)))
 (let ((?x291 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0 ?x278)))
 (let (($x709 (= (_ bv0 16) ?x291)))
 (let (($x209 (= $x709 true)))
 (let (($x657 (= (_ bv0 16) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0)))
 (let (($x319 (= $x657 true)))
 (let (($x9 (= $x319 true)))
 (let ((?x97 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x803 (= (_ bv0 3) ?x97)))
 (let (($x244 (= $x803 true)))
 (let (($x522 (= $x244 true)))
 (let (($x577 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x334 (=> $x577 true)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x391 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x684 (= $x577 (bvuge ?x391 (_ bv1 32)))))
 (let (($x854 (= false false)))
 (let (($x382 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x259 (=> $x382 $x854)))
 (let (($x309 (= $x382 (= ?x391 (_ bv0 32)))))
 (let (($x686 (and $x309 $x259)))
 (let (($x154 (and $x686 $x684)))
 (let (($x364 (and $x154 $x334)))
 (let (($x69 (= $x364 true)))
 (let (($x610 (= $x69 true)))
 (let (($x782 (= $x610 true)))
 (let (($x299 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x403 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x403) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x403))))
 (let (($x158 (and true $x41)))
 (let (($x333 (and $x41 $x158)))
 (let ((?x465 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x465 (_ bv1 32))) (select input.dst.llvm-mem ?x465))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x465 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x465 (_ bv2 32))) ?x457))))
 (let (($x832 (= (bvand ?x273 (_ bv4294967288 32)) ?x273)))
 (let (($x197 (= (bvand ?x465 (_ bv4294967292 32)) ?x465)))
 (let (($x580 (and $x197 $x832)))
 (let (($x541 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x465 (bvsub ?x465 (_ bv4 32))) (bvult ?x465 (bvsub ?x465 (_ bv4 32))))))
 (let (($x720 (and (and (and (and (and $x158 $x541) $x197) $x580) $x333) $x299)))
 (let (($x312 (= true $x720)))
 (let (($x380 (not $x161)))
 (let (($x859 (=> $x380 $x312)))
 (let (($x341 (= $x859 true)))
 (let (($x268 (= $x341 true)))
 (let (($x443 (= $x268 true)))
 (let (($x523 (= $x380 true)))
 (let (($x192 (= $x523 true)))
 (let (($x413 (= $x192 true)))
 (let (($x346 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x242 (= $x346 true)))
 (let (($x162 (= $x242 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x682 (= (_ bv0 32) ?x76)))
 (let ((?x653 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x653)))
 (let (($x843 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x615 (and $x843 $x47)))
 (let (($x60 (and $x615 $x682)))
 (let (($x417 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x575 (and $x417 $x60)))
 (let (($x363 (= $x575 true)))
 (let (($x34 (= $x363 true)))
 (let (($x261 (= $x34 true)))
 (let (($x764 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x716 (=> $x764 true)))
 (let ((?x637 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x518 (bvuge ?x637 (_ bv1 32))))
 (let (($x172 (= $x764 $x518)))
 (let (($x338 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x311 (=> $x338 $x854)))
 (let (($x140 (= ?x637 (_ bv0 32))))
 (let (($x676 (= $x338 $x140)))
 (let (($x193 (and $x676 $x311)))
 (let (($x171 (and $x193 $x172)))
 (let (($x68 (and $x171 $x716)))
 (let (($x95 (= $x68 true)))
 (let (($x447 (= $x95 true)))
 (let (($x135 (= $x447 true)))
 (let (($x811 (= $x577 $x518)))
 (let (($x168 (= $x382 $x140)))
 (let (($x847 (and $x168 $x259)))
 (let (($x345 (and $x847 $x811)))
 (let (($x90 (and $x345 $x334)))
 (let (($x429 (= $x90 true)))
 (let (($x612 (= $x429 true)))
 (let (($x404 (= $x612 true)))
 (let (($x848 (and $x404 $x135)))
 (let (($x489 (and $x848 $x261)))
 (let (($x207 (and $x489 $x162)))
 (let (($x201 (and $x207 $x413)))
 (let (($x460 (and $x201 $x443)))
 (let (($x59 (and $x460 $x782)))
 (let (($x464 (and $x59 $x522)))
 (let (($x435 (and $x464 $x9)))
 (let (($x642 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x806 (and $x642 $x435)))
 (let (($x480 (bvugt ?x465 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x465 (_ bv3 32))))
 (let (($x714 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x535 (=> (bvule ?x465 (bvsub (bvadd ?x465 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x714 $x480)))))))
 (let (($x801 (=> (and $x380 (bvule ?x465 (bvsub (bvadd ?x465 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x714 $x480)))))))
 (let (($x187 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x496 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x783 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x116 (=> $x783 (or false (or false (and true (or $x496 $x187)))))))
 (let (($x236 (=> (and $x380 $x783) (or false (or false (and true (or $x496 $x187)))))))
 (let (($x37 (and $x236 $x801)))
 (let (($x260 (and $x37 $x806)))
 (let (($x588 (=> $x260 $x209)))
 (not $x588)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0 () (_ BitVec 16))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x278 (concat ?x302 ?x215)))
 (let ((?x291 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0 ?x278)))
 (let (($x709 (= (_ bv0 16) ?x291)))
 (let (($x209 (= $x709 true)))
 (let (($x657 (= (_ bv0 16) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0)))
 (let (($x319 (= $x657 true)))
 (let (($x9 (= $x319 true)))
 (let ((?x97 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x803 (= (_ bv0 3) ?x97)))
 (let (($x244 (= $x803 true)))
 (let (($x522 (= $x244 true)))
 (let (($x577 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x334 (=> $x577 true)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x391 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x684 (= $x577 (bvuge ?x391 (_ bv1 32)))))
 (let (($x854 (= false false)))
 (let (($x382 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x259 (=> $x382 $x854)))
 (let (($x309 (= $x382 (= ?x391 (_ bv0 32)))))
 (let (($x686 (and $x309 $x259)))
 (let (($x154 (and $x686 $x684)))
 (let (($x364 (and $x154 $x334)))
 (let (($x69 (= $x364 true)))
 (let (($x610 (= $x69 true)))
 (let (($x782 (= $x610 true)))
 (let (($x299 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x403 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x403) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x403))))
 (let (($x158 (and true $x41)))
 (let (($x333 (and $x41 $x158)))
 (let ((?x465 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x465 (_ bv1 32))) (select input.dst.llvm-mem ?x465))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x465 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x465 (_ bv2 32))) ?x457))))
 (let (($x832 (= (bvand ?x273 (_ bv4294967288 32)) ?x273)))
 (let (($x197 (= (bvand ?x465 (_ bv4294967292 32)) ?x465)))
 (let (($x580 (and $x197 $x832)))
 (let (($x541 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x465 (bvsub ?x465 (_ bv4 32))) (bvult ?x465 (bvsub ?x465 (_ bv4 32))))))
 (let (($x720 (and (and (and (and (and $x158 $x541) $x197) $x580) $x333) $x299)))
 (let (($x312 (= true $x720)))
 (let (($x380 (not $x161)))
 (let (($x859 (=> $x380 $x312)))
 (let (($x341 (= $x859 true)))
 (let (($x268 (= $x341 true)))
 (let (($x443 (= $x268 true)))
 (let (($x523 (= $x380 true)))
 (let (($x192 (= $x523 true)))
 (let (($x413 (= $x192 true)))
 (let (($x346 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x242 (= $x346 true)))
 (let (($x162 (= $x242 true)))
 (let ((?x76 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x682 (= (_ bv0 32) ?x76)))
 (let ((?x653 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x653)))
 (let (($x843 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x615 (and $x843 $x47)))
 (let (($x60 (and $x615 $x682)))
 (let (($x417 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x575 (and $x417 $x60)))
 (let (($x363 (= $x575 true)))
 (let (($x34 (= $x363 true)))
 (let (($x261 (= $x34 true)))
 (let (($x764 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x716 (=> $x764 true)))
 (let ((?x637 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x518 (bvuge ?x637 (_ bv1 32))))
 (let (($x172 (= $x764 $x518)))
 (let (($x338 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x311 (=> $x338 $x854)))
 (let (($x140 (= ?x637 (_ bv0 32))))
 (let (($x676 (= $x338 $x140)))
 (let (($x193 (and $x676 $x311)))
 (let (($x171 (and $x193 $x172)))
 (let (($x68 (and $x171 $x716)))
 (let (($x95 (= $x68 true)))
 (let (($x447 (= $x95 true)))
 (let (($x135 (= $x447 true)))
 (let (($x811 (= $x577 $x518)))
 (let (($x168 (= $x382 $x140)))
 (let (($x847 (and $x168 $x259)))
 (let (($x345 (and $x847 $x811)))
 (let (($x90 (and $x345 $x334)))
 (let (($x429 (= $x90 true)))
 (let (($x612 (= $x429 true)))
 (let (($x404 (= $x612 true)))
 (let (($x848 (and $x404 $x135)))
 (let (($x489 (and $x848 $x261)))
 (let (($x207 (and $x489 $x162)))
 (let (($x201 (and $x207 $x413)))
 (let (($x460 (and $x201 $x443)))
 (let (($x59 (and $x460 $x782)))
 (let (($x464 (and $x59 $x522)))
 (let (($x435 (and $x464 $x9)))
 (let (($x642 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x806 (and $x642 $x435)))
 (let (($x480 (bvugt ?x465 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x465 (_ bv3 32))))
 (let (($x714 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x535 (=> (bvule ?x465 (bvsub (bvadd ?x465 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x714 $x480)))))))
 (let (($x801 (=> (and $x380 (bvule ?x465 (bvsub (bvadd ?x465 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x714 $x480)))))))
 (let (($x187 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x496 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x783 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x116 (=> $x783 (or false (or false (and true (or $x496 $x187)))))))
 (let (($x236 (=> (and $x380 $x783) (or false (or false (and true (or $x496 $x187)))))))
 (let (($x37 (and $x236 $x801)))
 (let (($x260 (and $x37 $x806)))
 (let (($x588 (=> $x260 $x209)))
 (not $x588)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0 #b0000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_15)
(function @fun_15
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_15 #b10000000000000000000000000000001) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4ae3f0cc)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x356af0c8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x356af0c8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0 () (_ BitVec 16)
    #x0000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4ae3f0cf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4ae3f0cc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv240112 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv240112 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0 () (_ BitVec 16) (_ bv0 16))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv317704 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv317704 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv317707 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 127
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0 () (_ BitVec 16))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x723 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x563 (concat ?x120 ?x723)))
 (let ((?x844 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0 ?x563)))
 (let (($x838 (= (_ bv0 16) ?x844)))
 (let (($x458 (= $x838 true)))
 (let (($x190 (= (_ bv0 16) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0)))
 (let (($x318 (= $x190 true)))
 (let (($x840 (= $x318 true)))
 (let ((?x347 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x284 (= (_ bv0 3) ?x347)))
 (let (($x483 (= $x284 true)))
 (let (($x352 (= $x483 true)))
 (let (($x508 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x273 (=> $x508 false)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x533 (= $x508 (bvuge ?x169 (_ bv1 32)))))
 (let (($x252 (= false false)))
 (let (($x475 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x197 (=> $x475 $x252)))
 (let (($x593 (= $x475 (= ?x169 (_ bv0 32)))))
 (let (($x520 (and $x593 $x197)))
 (let (($x567 (and $x520 $x533)))
 (let (($x529 (and $x567 $x273)))
 (let (($x303 (= $x529 true)))
 (let (($x205 (= $x303 true)))
 (let (($x538 (= $x205 true)))
 (let (($x315 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x709 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x196 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x709) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x709))))
 (let (($x729 (and true $x196)))
 (let (($x662 (and $x196 $x729)))
 (let ((?x783 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x783 (_ bv1 32))) (select input.dst.llvm-mem ?x783))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x783 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x783 (_ bv2 32))) ?x189))))
 (let (($x512 (= (bvand ?x226 (_ bv4294967288 32)) ?x226)))
 (let (($x210 (= (bvand ?x783 (_ bv4294967292 32)) ?x783)))
 (let (($x129 (and $x210 $x512)))
 (let (($x725 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x783 (bvsub ?x783 (_ bv4 32))) (bvult ?x783 (bvsub ?x783 (_ bv4 32))))))
 (let (($x119 (and (and (and (and (and $x729 $x725) $x210) $x129) $x662) $x315)))
 (let (($x328 (= true $x119)))
 (let (($x380 (not $x161)))
 (let (($x235 (=> $x380 $x328)))
 (let (($x707 (= $x235 true)))
 (let (($x88 (= $x707 true)))
 (let (($x283 (= $x88 true)))
 (let (($x302 (= $x380 true)))
 (let (($x215 (= $x302 true)))
 (let (($x278 (= $x215 true)))
 (let (($x435 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x806 (= $x435 true)))
 (let (($x260 (= $x806 true)))
 (let ((?x803 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x803)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x782 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x782 $x281)))
 (let (($x522 (and $x97 $x244)))
 (let (($x610 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x464 (and $x610 $x522)))
 (let (($x286 (= $x464 true)))
 (let (($x32 (= $x286 true)))
 (let (($x657 (= $x32 true)))
 (let (($x460 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x309 (=> $x460 false)))
 (let ((?x541 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x675 (bvuge ?x541 (_ bv1 32))))
 (let (($x391 (= $x460 $x675)))
 (let (($x720 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x859 (=> $x720 $x252)))
 (let (($x80 (= ?x541 (_ bv0 32))))
 (let (($x312 (= $x720 $x80)))
 (let (($x341 (and $x312 $x859)))
 (let (($x348 (and $x341 $x391)))
 (let (($x686 (and $x348 $x309)))
 (let (($x24 (= $x686 true)))
 (let (($x684 (= $x24 true)))
 (let (($x154 (= $x684 true)))
 (let (($x457 (= $x508 $x675)))
 (let (($x461 (= $x475 $x80)))
 (let (($x176 (and $x461 $x197)))
 (let (($x425 (and $x176 $x457)))
 (let (($x23 (and $x425 $x273)))
 (let (($x369 (= $x23 true)))
 (let (($x832 (= $x369 true)))
 (let (($x580 (= $x832 true)))
 (let (($x364 (and $x580 $x154)))
 (let (($x319 (and $x364 $x657)))
 (let (($x111 (and $x319 $x260)))
 (let (($x291 (and $x111 $x278)))
 (let (($x292 (and $x291 $x283)))
 (let (($x390 (and $x292 $x538)))
 (let (($x763 (and $x390 $x352)))
 (let (($x432 (and $x763 $x840)))
 (let (($x382 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x822 (and $x382 $x432)))
 (let (($x544 (bvugt ?x783 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x783 (_ bv3 32))))
 (let (($x788 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x642 (=> (bvule ?x783 (bvsub (bvadd ?x783 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x788 $x544)))))))
 (let (($x785 (=> (and $x380 (bvule ?x783 (bvsub (bvadd ?x783 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x788 $x544)))))))
 (let (($x394 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x506 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x392 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x238 (=> $x392 (or false (or false (and true (or $x506 $x394)))))))
 (let (($x583 (=> (and $x380 $x392) (or false (or false (and true (or $x506 $x394)))))))
 (let (($x186 (and $x583 $x785)))
 (let (($x451 (and $x186 $x822)))
 (let (($x740 (=> $x451 $x458)))
 (not $x740)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0 () (_ BitVec 16))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x723 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x563 (concat ?x120 ?x723)))
 (let ((?x844 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0 ?x563)))
 (let (($x838 (= (_ bv0 16) ?x844)))
 (let (($x458 (= $x838 true)))
 (let (($x190 (= (_ bv0 16) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_15_0)))
 (let (($x318 (= $x190 true)))
 (let (($x840 (= $x318 true)))
 (let ((?x347 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x284 (= (_ bv0 3) ?x347)))
 (let (($x483 (= $x284 true)))
 (let (($x352 (= $x483 true)))
 (let (($x508 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x273 (=> $x508 false)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x533 (= $x508 (bvuge ?x169 (_ bv1 32)))))
 (let (($x252 (= false false)))
 (let (($x475 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x197 (=> $x475 $x252)))
 (let (($x593 (= $x475 (= ?x169 (_ bv0 32)))))
 (let (($x520 (and $x593 $x197)))
 (let (($x567 (and $x520 $x533)))
 (let (($x529 (and $x567 $x273)))
 (let (($x303 (= $x529 true)))
 (let (($x205 (= $x303 true)))
 (let (($x538 (= $x205 true)))
 (let (($x315 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x709 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x196 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x709) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x709))))
 (let (($x729 (and true $x196)))
 (let (($x662 (and $x196 $x729)))
 (let ((?x783 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x783 (_ bv1 32))) (select input.dst.llvm-mem ?x783))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x783 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x783 (_ bv2 32))) ?x189))))
 (let (($x512 (= (bvand ?x226 (_ bv4294967288 32)) ?x226)))
 (let (($x210 (= (bvand ?x783 (_ bv4294967292 32)) ?x783)))
 (let (($x129 (and $x210 $x512)))
 (let (($x725 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x783 (bvsub ?x783 (_ bv4 32))) (bvult ?x783 (bvsub ?x783 (_ bv4 32))))))
 (let (($x119 (and (and (and (and (and $x729 $x725) $x210) $x129) $x662) $x315)))
 (let (($x328 (= true $x119)))
 (let (($x380 (not $x161)))
 (let (($x235 (=> $x380 $x328)))
 (let (($x707 (= $x235 true)))
 (let (($x88 (= $x707 true)))
 (let (($x283 (= $x88 true)))
 (let (($x302 (= $x380 true)))
 (let (($x215 (= $x302 true)))
 (let (($x278 (= $x215 true)))
 (let (($x435 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x806 (= $x435 true)))
 (let (($x260 (= $x806 true)))
 (let ((?x803 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x803)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x782 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x782 $x281)))
 (let (($x522 (and $x97 $x244)))
 (let (($x610 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x464 (and $x610 $x522)))
 (let (($x286 (= $x464 true)))
 (let (($x32 (= $x286 true)))
 (let (($x657 (= $x32 true)))
 (let (($x460 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x309 (=> $x460 false)))
 (let ((?x541 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x675 (bvuge ?x541 (_ bv1 32))))
 (let (($x391 (= $x460 $x675)))
 (let (($x720 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x859 (=> $x720 $x252)))
 (let (($x80 (= ?x541 (_ bv0 32))))
 (let (($x312 (= $x720 $x80)))
 (let (($x341 (and $x312 $x859)))
 (let (($x348 (and $x341 $x391)))
 (let (($x686 (and $x348 $x309)))
 (let (($x24 (= $x686 true)))
 (let (($x684 (= $x24 true)))
 (let (($x154 (= $x684 true)))
 (let (($x457 (= $x508 $x675)))
 (let (($x461 (= $x475 $x80)))
 (let (($x176 (and $x461 $x197)))
 (let (($x425 (and $x176 $x457)))
 (let (($x23 (and $x425 $x273)))
 (let (($x369 (= $x23 true)))
 (let (($x832 (= $x369 true)))
 (let (($x580 (= $x832 true)))
 (let (($x364 (and $x580 $x154)))
 (let (($x319 (and $x364 $x657)))
 (let (($x111 (and $x319 $x260)))
 (let (($x291 (and $x111 $x278)))
 (let (($x292 (and $x291 $x283)))
 (let (($x390 (and $x292 $x538)))
 (let (($x763 (and $x390 $x352)))
 (let (($x432 (and $x763 $x840)))
 (let (($x382 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x822 (and $x382 $x432)))
 (let (($x544 (bvugt ?x783 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x783 (_ bv3 32))))
 (let (($x788 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x642 (=> (bvule ?x783 (bvsub (bvadd ?x783 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x788 $x544)))))))
 (let (($x785 (=> (and $x380 (bvule ?x783 (bvsub (bvadd ?x783 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x788 $x544)))))))
 (let (($x394 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x506 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x392 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x238 (=> $x392 (or false (or false (and true (or $x506 $x394)))))))
 (let (($x583 (=> (and $x380 $x392) (or false (or false (and true (or $x506 $x394)))))))
 (let (($x186 (and $x583 $x785)))
 (let (($x451 (and $x186 $x822)))
 (let (($x740 (=> $x451 $x458)))
 (not $x740)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 128
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0 () (_ BitVec 15))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x349 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x365 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x539 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x606 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x234 (concat (select input.dst.llvm-mem ?x606) (concat ?x539 (concat ?x365 ?x349)))))
 (let ((?x828 ((_ extract 14 0) ?x234)))
 (let ((?x659 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0 ?x828)))
 (let (($x448 (= (_ bv0 15) ?x659)))
 (let (($x313 (= $x448 true)))
 (let (($x213 (= (_ bv0 15) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0)))
 (let (($x122 (= $x213 true)))
 (let (($x638 (= $x122 true)))
 (let ((?x397 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x247 (= (_ bv0 3) ?x397)))
 (let (($x468 (= $x247 true)))
 (let (($x182 (= $x468 true)))
 (let (($x808 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x226 (=> $x808 true)))
 (let (($x306 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x340 (ite $x306 (_ bv0 32) (_ bv1 32))))
 (let (($x102 (= $x808 (bvuge ?x340 (_ bv1 32)))))
 (let (($x343 (= false false)))
 (let (($x614 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x210 (=> $x614 $x343)))
 (let (($x443 (= $x614 (= ?x340 (_ bv0 32)))))
 (let (($x225 (and $x443 $x210)))
 (let (($x550 (and $x225 $x102)))
 (let (($x592 (and $x550 $x226)))
 (let (($x551 (= $x592 true)))
 (let (($x436 (= $x551 true)))
 (let (($x510 (= $x436 true)))
 (let (($x676 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x838 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x838) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x838))))
 (let (($x333 (and true $x248)))
 (let (($x334 (and $x248 $x333)))
 (let ((?x392 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x392 (_ bv1 32))) (select input.dst.llvm-mem ?x392))))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x392 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x392 (_ bv2 32))) ?x415))))
 (let (($x345 (= (bvand ?x429 (_ bv4294967288 32)) ?x429)))
 (let (($x409 (= (bvand ?x392 (_ bv4294967292 32)) ?x392)))
 (let (($x518 (and $x409 $x345)))
 (let (($x259 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x392 (bvsub ?x392 (_ bv4 32))) (bvult ?x392 (bvsub ?x392 (_ bv4 32))))))
 (let (($x171 (and (and (and (and (and $x333 $x259) $x409) $x518) $x334) $x676)))
 (let (($x716 (= true $x171)))
 (let (($x161 (not $x306)))
 (let (($x172 (=> $x161 $x716)))
 (let (($x68 (= $x172 true)))
 (let (($x135 (= $x68 true)))
 (let (($x417 (= $x135 true)))
 (let (($x120 (= $x161 true)))
 (let (($x723 (= $x120 true)))
 (let (($x563 (= $x723 true)))
 (let (($x432 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x822 (= $x432 true)))
 (let (($x451 (= $x822 true)))
 (let ((?x284 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x483 (= (_ bv0 32) ?x284)))
 (let ((?x390 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x390)))
 (let (($x538 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x347 (and $x538 $x191)))
 (let (($x352 (and $x347 $x483)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x763 (and $x205 $x352)))
 (let (($x681 (= $x763 true)))
 (let (($x72 (= $x681 true)))
 (let (($x190 (= $x72 true)))
 (let (($x292 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x593 (=> $x292 true)))
 (let ((?x725 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x393 (bvuge ?x725 (_ bv1 32))))
 (let (($x169 (= $x292 $x393)))
 (let (($x119 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x235 (=> $x119 $x343)))
 (let (($x344 (= ?x725 (_ bv0 32))))
 (let (($x328 (= $x119 $x344)))
 (let (($x707 (and $x328 $x235)))
 (let (($x666 (and $x707 $x169)))
 (let (($x520 (and $x666 $x593)))
 (let (($x377 (= $x520 true)))
 (let (($x533 (= $x377 true)))
 (let (($x567 (= $x533 true)))
 (let (($x189 (= $x808 $x393)))
 (let (($x216 (= $x614 $x344)))
 (let (($x398 (and $x216 $x210)))
 (let (($x104 (and $x398 $x189)))
 (let (($x771 (and $x104 $x226)))
 (let (($x715 (= $x771 true)))
 (let (($x512 (= $x715 true)))
 (let (($x129 (= $x512 true)))
 (let (($x529 (and $x129 $x567)))
 (let (($x318 (and $x529 $x190)))
 (let (($x513 (and $x318 $x451)))
 (let (($x844 (and $x513 $x563)))
 (let (($x843 (and $x844 $x417)))
 (let (($x155 (and $x843 $x510)))
 (let (($x73 (and $x155 $x182)))
 (let (($x17 (and $x73 $x638)))
 (let (($x475 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x821 (and $x475 $x17)))
 (let (($x801 (bvugt ?x392 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x392 (_ bv3 32))))
 (let (($x535 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x382 (=> (bvule ?x392 (bvsub (bvadd ?x392 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x535 $x801)))))))
 (let (($x185 (=> (and $x161 (bvule ?x392 (bvsub (bvadd ?x392 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x535 $x801)))))))
 (let (($x236 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x606)))
 (let (($x714 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x480 (=> $x714 (or false (or false (and true (or $x116 $x236)))))))
 (let (($x530 (=> (and $x161 $x714) (or false (or false (and true (or $x116 $x236)))))))
 (let (($x7 (and $x530 $x185)))
 (let (($x39 (and $x7 $x821)))
 (let (($x29 (=> $x39 $x313)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0 () (_ BitVec 15))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x349 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x365 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x539 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x606 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x234 (concat (select input.dst.llvm-mem ?x606) (concat ?x539 (concat ?x365 ?x349)))))
 (let ((?x828 ((_ extract 14 0) ?x234)))
 (let ((?x659 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0 ?x828)))
 (let (($x448 (= (_ bv0 15) ?x659)))
 (let (($x313 (= $x448 true)))
 (let (($x213 (= (_ bv0 15) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0)))
 (let (($x122 (= $x213 true)))
 (let (($x638 (= $x122 true)))
 (let ((?x397 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x247 (= (_ bv0 3) ?x397)))
 (let (($x468 (= $x247 true)))
 (let (($x182 (= $x468 true)))
 (let (($x808 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x226 (=> $x808 true)))
 (let (($x306 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x340 (ite $x306 (_ bv0 32) (_ bv1 32))))
 (let (($x102 (= $x808 (bvuge ?x340 (_ bv1 32)))))
 (let (($x343 (= false false)))
 (let (($x614 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x210 (=> $x614 $x343)))
 (let (($x443 (= $x614 (= ?x340 (_ bv0 32)))))
 (let (($x225 (and $x443 $x210)))
 (let (($x550 (and $x225 $x102)))
 (let (($x592 (and $x550 $x226)))
 (let (($x551 (= $x592 true)))
 (let (($x436 (= $x551 true)))
 (let (($x510 (= $x436 true)))
 (let (($x676 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x838 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x838) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x838))))
 (let (($x333 (and true $x248)))
 (let (($x334 (and $x248 $x333)))
 (let ((?x392 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x392 (_ bv1 32))) (select input.dst.llvm-mem ?x392))))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x392 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x392 (_ bv2 32))) ?x415))))
 (let (($x345 (= (bvand ?x429 (_ bv4294967288 32)) ?x429)))
 (let (($x409 (= (bvand ?x392 (_ bv4294967292 32)) ?x392)))
 (let (($x518 (and $x409 $x345)))
 (let (($x259 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x392 (bvsub ?x392 (_ bv4 32))) (bvult ?x392 (bvsub ?x392 (_ bv4 32))))))
 (let (($x171 (and (and (and (and (and $x333 $x259) $x409) $x518) $x334) $x676)))
 (let (($x716 (= true $x171)))
 (let (($x161 (not $x306)))
 (let (($x172 (=> $x161 $x716)))
 (let (($x68 (= $x172 true)))
 (let (($x135 (= $x68 true)))
 (let (($x417 (= $x135 true)))
 (let (($x120 (= $x161 true)))
 (let (($x723 (= $x120 true)))
 (let (($x563 (= $x723 true)))
 (let (($x432 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x822 (= $x432 true)))
 (let (($x451 (= $x822 true)))
 (let ((?x284 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x483 (= (_ bv0 32) ?x284)))
 (let ((?x390 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x390)))
 (let (($x538 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x347 (and $x538 $x191)))
 (let (($x352 (and $x347 $x483)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x763 (and $x205 $x352)))
 (let (($x681 (= $x763 true)))
 (let (($x72 (= $x681 true)))
 (let (($x190 (= $x72 true)))
 (let (($x292 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x593 (=> $x292 true)))
 (let ((?x725 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x393 (bvuge ?x725 (_ bv1 32))))
 (let (($x169 (= $x292 $x393)))
 (let (($x119 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x235 (=> $x119 $x343)))
 (let (($x344 (= ?x725 (_ bv0 32))))
 (let (($x328 (= $x119 $x344)))
 (let (($x707 (and $x328 $x235)))
 (let (($x666 (and $x707 $x169)))
 (let (($x520 (and $x666 $x593)))
 (let (($x377 (= $x520 true)))
 (let (($x533 (= $x377 true)))
 (let (($x567 (= $x533 true)))
 (let (($x189 (= $x808 $x393)))
 (let (($x216 (= $x614 $x344)))
 (let (($x398 (and $x216 $x210)))
 (let (($x104 (and $x398 $x189)))
 (let (($x771 (and $x104 $x226)))
 (let (($x715 (= $x771 true)))
 (let (($x512 (= $x715 true)))
 (let (($x129 (= $x512 true)))
 (let (($x529 (and $x129 $x567)))
 (let (($x318 (and $x529 $x190)))
 (let (($x513 (and $x318 $x451)))
 (let (($x844 (and $x513 $x563)))
 (let (($x843 (and $x844 $x417)))
 (let (($x155 (and $x843 $x510)))
 (let (($x73 (and $x155 $x182)))
 (let (($x17 (and $x73 $x638)))
 (let (($x475 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x821 (and $x475 $x17)))
 (let (($x801 (bvugt ?x392 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x392 (_ bv3 32))))
 (let (($x535 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x382 (=> (bvule ?x392 (bvsub (bvadd ?x392 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x535 $x801)))))))
 (let (($x185 (=> (and $x161 (bvule ?x392 (bvsub (bvadd ?x392 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x535 $x801)))))))
 (let (($x236 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x606)))
 (let (($x714 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x480 (=> $x714 (or false (or false (and true (or $x116 $x236)))))))
 (let (($x530 (=> (and $x161 $x714) (or false (or false (and true (or $x116 $x236)))))))
 (let (($x7 (and $x530 $x185)))
 (let (($x39 (and $x7 $x821)))
 (let (($x29 (=> $x39 $x313)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0 #b000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_15)
(function @fun_15
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_15 #b10000000000000000000000000000001) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0 () (_ BitVec 15)
    #b000000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv193008 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv193008 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0 () (_ BitVec 15) (_ bv0 15))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv322824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv322824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv322827 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 129
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0 () (_ BitVec 15))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x207 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x465 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x488 (concat (select input.dst.llvm-mem ?x465) (concat ?x242 (concat ?x192 ?x207)))))
 (let ((?x41 ((_ extract 14 0) ?x488)))
 (let ((?x158 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0 ?x41)))
 (let (($x555 (= (_ bv0 15) ?x158)))
 (let (($x100 (= $x555 true)))
 (let (($x76 (= (_ bv0 15) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0)))
 (let (($x60 (= $x76 true)))
 (let (($x219 (= $x60 true)))
 (let ((?x34 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x693 (= (_ bv0 3) ?x34)))
 (let (($x682 (= $x693 true)))
 (let (($x615 (= $x682 true)))
 (let (($x140 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x429 (=> $x140 false)))
 (let (($x306 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x9 (ite $x306 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (= $x140 (bvuge ?x9 (_ bv1 32)))))
 (let (($x43 (= false false)))
 (let (($x311 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x409 (=> $x311 $x43)))
 (let (($x554 (= $x311 (= ?x9 (_ bv0 32)))))
 (let (($x427 (and $x554 $x409)))
 (let (($x262 (and $x427 $x90)))
 (let (($x212 (and $x262 $x429)))
 (let (($x410 (= $x212 true)))
 (let (($x653 (= $x410 true)))
 (let (($x47 (= $x653 true)))
 (let (($x832 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x349 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x828 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x349) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x349))))
 (let (($x659 (and true $x828)))
 (let (($x720 (and $x828 $x659)))
 (let ((?x714 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x508 (concat (select input.dst.llvm-mem (bvadd ?x714 (_ bv1 32))) (select input.dst.llvm-mem ?x714))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x714 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x714 (_ bv2 32))) ?x508))))
 (let (($x460 (= (bvand ?x80 (_ bv4294967288 32)) ?x80)))
 (let (($x57 (= (bvand ?x714 (_ bv4294967292 32)) ?x714)))
 (let (($x299 (and $x57 $x460)))
 (let (($x700 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x714 (bvsub ?x714 (_ bv4 32))) (bvult ?x714 (bvsub ?x714 (_ bv4 32))))))
 (let (($x580 (and (and (and (and (and $x659 $x700) $x57) $x299) $x720) $x832)))
 (let (($x312 (= true $x580)))
 (let (($x161 (not $x306)))
 (let (($x364 (=> $x161 $x312)))
 (let (($x69 (= $x364 true)))
 (let (($x24 (= $x69 true)))
 (let (($x684 (= $x24 true)))
 (let (($x809 (= $x161 true)))
 (let (($x539 (= $x809 true)))
 (let (($x804 (= $x539 true)))
 (let (($x17 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x821 (= $x17 true)))
 (let (($x39 (= $x821 true)))
 (let ((?x247 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x468 (= (_ bv0 32) ?x247)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x446 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x510 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x397 (and $x510 $x446)))
 (let (($x182 (and $x397 $x468)))
 (let (($x436 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x436 $x182)))
 (let (($x78 (= $x73 true)))
 (let (($x56 (= $x78 true)))
 (let (($x213 (= $x56 true)))
 (let (($x843 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x443 (=> $x843 false)))
 (let ((?x259 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x444 (bvuge ?x259 (_ bv1 32))))
 (let (($x340 (= $x843 $x444)))
 (let (($x171 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x172 (=> $x171 $x43)))
 (let (($x848 (= ?x259 (_ bv0 32))))
 (let (($x716 (= $x171 $x848)))
 (let (($x68 (and $x716 $x172)))
 (let (($x268 (and $x68 $x340)))
 (let (($x225 (and $x268 $x443)))
 (let (($x396 (= $x225 true)))
 (let (($x102 (= $x396 true)))
 (let (($x550 (= $x102 true)))
 (let (($x415 (= $x140 $x444)))
 (let (($x577 (= $x311 $x848)))
 (let (($x482 (and $x577 $x409)))
 (let (($x868 (and $x482 $x415)))
 (let (($x612 (and $x868 $x429)))
 (let (($x811 (= $x612 true)))
 (let (($x345 (= $x811 true)))
 (let (($x518 (= $x345 true)))
 (let (($x592 (and $x518 $x550)))
 (let (($x122 (and $x592 $x213)))
 (let (($x204 (and $x122 $x39)))
 (let (($x365 (and $x204 $x804)))
 (let (($x348 (and $x365 $x684)))
 (let (($x346 (and $x348 $x47)))
 (let (($x575 (and $x346 $x615)))
 (let (($x523 (and $x575 $x219)))
 (let (($x614 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x201 (and $x614 $x523)))
 (let (($x785 (bvugt ?x714 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x714 (_ bv3 32))))
 (let (($x642 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x475 (=> (bvule ?x714 (bvsub (bvadd ?x714 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x642 $x785)))))))
 (let (($x683 (=> (and $x161 (bvule ?x714 (bvsub (bvadd ?x714 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x642 $x785)))))))
 (let (($x583 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x465)))
 (let (($x788 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x544 (=> $x788 (or false (or false (and true (or $x238 $x583)))))))
 (let (($x296 (=> (and $x161 $x788) (or false (or false (and true (or $x238 $x583)))))))
 (let (($x99 (and $x296 $x683)))
 (let (($x162 (and $x99 $x201)))
 (let (($x305 (=> $x162 $x100)))
 (not $x305))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0 () (_ BitVec 15))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x207 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x465 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x488 (concat (select input.dst.llvm-mem ?x465) (concat ?x242 (concat ?x192 ?x207)))))
 (let ((?x41 ((_ extract 14 0) ?x488)))
 (let ((?x158 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0 ?x41)))
 (let (($x555 (= (_ bv0 15) ?x158)))
 (let (($x100 (= $x555 true)))
 (let (($x76 (= (_ bv0 15) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_14_0)))
 (let (($x60 (= $x76 true)))
 (let (($x219 (= $x60 true)))
 (let ((?x34 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x693 (= (_ bv0 3) ?x34)))
 (let (($x682 (= $x693 true)))
 (let (($x615 (= $x682 true)))
 (let (($x140 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x429 (=> $x140 false)))
 (let (($x306 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x9 (ite $x306 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (= $x140 (bvuge ?x9 (_ bv1 32)))))
 (let (($x43 (= false false)))
 (let (($x311 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x409 (=> $x311 $x43)))
 (let (($x554 (= $x311 (= ?x9 (_ bv0 32)))))
 (let (($x427 (and $x554 $x409)))
 (let (($x262 (and $x427 $x90)))
 (let (($x212 (and $x262 $x429)))
 (let (($x410 (= $x212 true)))
 (let (($x653 (= $x410 true)))
 (let (($x47 (= $x653 true)))
 (let (($x832 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x349 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x828 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x349) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x349))))
 (let (($x659 (and true $x828)))
 (let (($x720 (and $x828 $x659)))
 (let ((?x714 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x508 (concat (select input.dst.llvm-mem (bvadd ?x714 (_ bv1 32))) (select input.dst.llvm-mem ?x714))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x714 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x714 (_ bv2 32))) ?x508))))
 (let (($x460 (= (bvand ?x80 (_ bv4294967288 32)) ?x80)))
 (let (($x57 (= (bvand ?x714 (_ bv4294967292 32)) ?x714)))
 (let (($x299 (and $x57 $x460)))
 (let (($x700 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x714 (bvsub ?x714 (_ bv4 32))) (bvult ?x714 (bvsub ?x714 (_ bv4 32))))))
 (let (($x580 (and (and (and (and (and $x659 $x700) $x57) $x299) $x720) $x832)))
 (let (($x312 (= true $x580)))
 (let (($x161 (not $x306)))
 (let (($x364 (=> $x161 $x312)))
 (let (($x69 (= $x364 true)))
 (let (($x24 (= $x69 true)))
 (let (($x684 (= $x24 true)))
 (let (($x809 (= $x161 true)))
 (let (($x539 (= $x809 true)))
 (let (($x804 (= $x539 true)))
 (let (($x17 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x821 (= $x17 true)))
 (let (($x39 (= $x821 true)))
 (let ((?x247 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x468 (= (_ bv0 32) ?x247)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x446 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x510 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x397 (and $x510 $x446)))
 (let (($x182 (and $x397 $x468)))
 (let (($x436 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x436 $x182)))
 (let (($x78 (= $x73 true)))
 (let (($x56 (= $x78 true)))
 (let (($x213 (= $x56 true)))
 (let (($x843 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x443 (=> $x843 false)))
 (let ((?x259 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x444 (bvuge ?x259 (_ bv1 32))))
 (let (($x340 (= $x843 $x444)))
 (let (($x171 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x172 (=> $x171 $x43)))
 (let (($x848 (= ?x259 (_ bv0 32))))
 (let (($x716 (= $x171 $x848)))
 (let (($x68 (and $x716 $x172)))
 (let (($x268 (and $x68 $x340)))
 (let (($x225 (and $x268 $x443)))
 (let (($x396 (= $x225 true)))
 (let (($x102 (= $x396 true)))
 (let (($x550 (= $x102 true)))
 (let (($x415 (= $x140 $x444)))
 (let (($x577 (= $x311 $x848)))
 (let (($x482 (and $x577 $x409)))
 (let (($x868 (and $x482 $x415)))
 (let (($x612 (and $x868 $x429)))
 (let (($x811 (= $x612 true)))
 (let (($x345 (= $x811 true)))
 (let (($x518 (= $x345 true)))
 (let (($x592 (and $x518 $x550)))
 (let (($x122 (and $x592 $x213)))
 (let (($x204 (and $x122 $x39)))
 (let (($x365 (and $x204 $x804)))
 (let (($x348 (and $x365 $x684)))
 (let (($x346 (and $x348 $x47)))
 (let (($x575 (and $x346 $x615)))
 (let (($x523 (and $x575 $x219)))
 (let (($x614 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x201 (and $x614 $x523)))
 (let (($x785 (bvugt ?x714 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x714 (_ bv3 32))))
 (let (($x642 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x475 (=> (bvule ?x714 (bvsub (bvadd ?x714 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x642 $x785)))))))
 (let (($x683 (=> (and $x161 (bvule ?x714 (bvsub (bvadd ?x714 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x642 $x785)))))))
 (let (($x583 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x465)))
 (let (($x788 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x544 (=> $x788 (or false (or false (and true (or $x238 $x583)))))))
 (let (($x296 (=> (and $x161 $x788) (or false (or false (and true (or $x238 $x583)))))))
 (let (($x99 (and $x296 $x683)))
 (let (($x162 (and $x99 $x201)))
 (let (($x305 (=> $x162 $x100)))
 (not $x305))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 130
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0 () (_ BitVec 14))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x435 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x782 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x783 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem ?x783) (concat ?x209 (concat ?x782 ?x435)))))
 (let ((?x522 ((_ extract 13 0) ?x97)))
 (let ((?x32 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0 ?x522)))
 (let (($x196 (= (_ bv0 14) ?x32)))
 (let (($x729 (= $x196 true)))
 (let (($x291 (= (_ bv0 14) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0)))
 (let (($x319 (= $x291 true)))
 (let (($x803 (= $x319 true)))
 (let ((?x464 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x286 (= (_ bv0 3) ?x464)))
 (let (($x588 (= $x286 true)))
 (let (($x657 (= $x588 true)))
 (let (($x197 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x80 (=> $x197 true)))
 (let (($x548 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x840 (ite $x548 (_ bv0 32) (_ bv1 32))))
 (let (($x23 (= $x197 (bvuge ?x840 (_ bv1 32)))))
 (let (($x168 (= false false)))
 (let (($x29 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x57 (=> $x29 $x168)))
 (let (($x404 (= $x29 (= ?x840 (_ bv0 32)))))
 (let (($x317 (and $x404 $x57)))
 (let (($x193 (and $x317 $x23)))
 (let (($x764 (and $x193 $x80)))
 (let (($x637 (= $x764 true)))
 (let (($x309 (= $x637 true)))
 (let (($x391 (= $x309 true)))
 (let (($x512 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x207 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x207) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x207))))
 (let (($x158 (and true $x41)))
 (let (($x119 (and $x41 $x158)))
 (let ((?x788 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x808 (concat (select input.dst.llvm-mem (bvadd ?x788 (_ bv1 32))) (select input.dst.llvm-mem ?x788))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x788 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x788 (_ bv2 32))) ?x808))))
 (let (($x292 (= (bvand ?x344 (_ bv4294967288 32)) ?x344)))
 (let (($x581 (= (bvand ?x788 (_ bv4294967292 32)) ?x788)))
 (let (($x315 (and $x581 $x292)))
 (let (($x95 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x788 (bvsub ?x788 (_ bv4 32))) (bvult ?x788 (bvsub ?x788 (_ bv4 32))))))
 (let (($x129 (and (and (and (and (and $x158 $x95) $x581) $x315) $x119) $x512)))
 (let (($x328 (= true $x129)))
 (let (($x306 (not $x548)))
 (let (($x529 (=> $x306 $x328)))
 (let (($x303 (= $x529 true)))
 (let (($x377 (= $x303 true)))
 (let (($x533 (= $x377 true)))
 (let (($x413 (= $x306 true)))
 (let (($x242 (= $x413 true)))
 (let (($x403 (= $x242 true)))
 (let (($x523 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x201 (= $x523 true)))
 (let (($x162 (= $x201 true)))
 (let ((?x693 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x682 (= (_ bv0 32) ?x693)))
 (let ((?x346 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x346)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x47 $x261)))
 (let (($x615 (and $x34 $x682)))
 (let (($x653 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x575 (and $x653 $x615)))
 (let (($x363 (= $x575 true)))
 (let (($x489 (= $x363 true)))
 (let (($x76 (= $x489 true)))
 (let (($x348 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x554 (=> $x348 true)))
 (let ((?x700 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x859 (bvuge ?x700 (_ bv1 32))))
 (let (($x9 (= $x348 $x859)))
 (let (($x580 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x364 (=> $x580 $x168)))
 (let (($x457 (= ?x700 (_ bv0 32))))
 (let (($x312 (= $x580 $x457)))
 (let (($x69 (and $x312 $x364)))
 (let (($x623 (and $x69 $x9)))
 (let (($x427 (and $x623 $x554)))
 (let (($x283 (= $x427 true)))
 (let (($x90 (= $x283 true)))
 (let (($x262 (= $x90 true)))
 (let (($x508 (= $x197 $x859)))
 (let (($x662 (= $x29 $x457)))
 (let (($x425 (and $x662 $x57)))
 (let (($x507 (and $x425 $x508)))
 (let (($x573 (and $x507 $x80)))
 (let (($x341 (= $x573 true)))
 (let (($x460 (= $x341 true)))
 (let (($x299 (= $x460 true)))
 (let (($x212 (and $x299 $x262)))
 (let (($x60 (and $x212 $x76)))
 (let (($x546 (and $x60 $x162)))
 (let (($x192 (and $x546 $x403)))
 (let (($x666 (and $x192 $x533)))
 (let (($x686 (and $x666 $x391)))
 (let (($x806 (and $x686 $x657)))
 (let (($x709 (and $x806 $x803)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x215 (and $x311 $x709)))
 (let (($x185 (bvugt ?x788 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x788 (_ bv3 32))))
 (let (($x382 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x614 (=> (bvule ?x788 (bvsub (bvadd ?x788 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x382 $x185)))))))
 (let (($x316 (=> (and $x306 (bvule ?x788 (bvsub (bvadd ?x788 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x382 $x185)))))))
 (let (($x530 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x480 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x783)))
 (let (($x535 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x801 (=> $x535 (or false (or false (and true (or $x480 $x530)))))))
 (let (($x606 (=> (and $x306 $x535) (or false (or false (and true (or $x480 $x530)))))))
 (let (($x37 (and $x606 $x316)))
 (let (($x281 (and $x37 $x215)))
 (let (($x817 (=> $x281 $x729)))
 (not $x817))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0 () (_ BitVec 14))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x435 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x782 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x783 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem ?x783) (concat ?x209 (concat ?x782 ?x435)))))
 (let ((?x522 ((_ extract 13 0) ?x97)))
 (let ((?x32 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0 ?x522)))
 (let (($x196 (= (_ bv0 14) ?x32)))
 (let (($x729 (= $x196 true)))
 (let (($x291 (= (_ bv0 14) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0)))
 (let (($x319 (= $x291 true)))
 (let (($x803 (= $x319 true)))
 (let ((?x464 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x286 (= (_ bv0 3) ?x464)))
 (let (($x588 (= $x286 true)))
 (let (($x657 (= $x588 true)))
 (let (($x197 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x80 (=> $x197 true)))
 (let (($x548 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x840 (ite $x548 (_ bv0 32) (_ bv1 32))))
 (let (($x23 (= $x197 (bvuge ?x840 (_ bv1 32)))))
 (let (($x168 (= false false)))
 (let (($x29 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x57 (=> $x29 $x168)))
 (let (($x404 (= $x29 (= ?x840 (_ bv0 32)))))
 (let (($x317 (and $x404 $x57)))
 (let (($x193 (and $x317 $x23)))
 (let (($x764 (and $x193 $x80)))
 (let (($x637 (= $x764 true)))
 (let (($x309 (= $x637 true)))
 (let (($x391 (= $x309 true)))
 (let (($x512 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x207 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x41 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x207) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x207))))
 (let (($x158 (and true $x41)))
 (let (($x119 (and $x41 $x158)))
 (let ((?x788 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x808 (concat (select input.dst.llvm-mem (bvadd ?x788 (_ bv1 32))) (select input.dst.llvm-mem ?x788))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x788 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x788 (_ bv2 32))) ?x808))))
 (let (($x292 (= (bvand ?x344 (_ bv4294967288 32)) ?x344)))
 (let (($x581 (= (bvand ?x788 (_ bv4294967292 32)) ?x788)))
 (let (($x315 (and $x581 $x292)))
 (let (($x95 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x788 (bvsub ?x788 (_ bv4 32))) (bvult ?x788 (bvsub ?x788 (_ bv4 32))))))
 (let (($x129 (and (and (and (and (and $x158 $x95) $x581) $x315) $x119) $x512)))
 (let (($x328 (= true $x129)))
 (let (($x306 (not $x548)))
 (let (($x529 (=> $x306 $x328)))
 (let (($x303 (= $x529 true)))
 (let (($x377 (= $x303 true)))
 (let (($x533 (= $x377 true)))
 (let (($x413 (= $x306 true)))
 (let (($x242 (= $x413 true)))
 (let (($x403 (= $x242 true)))
 (let (($x523 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x201 (= $x523 true)))
 (let (($x162 (= $x201 true)))
 (let ((?x693 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x682 (= (_ bv0 32) ?x693)))
 (let ((?x346 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x346)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x47 $x261)))
 (let (($x615 (and $x34 $x682)))
 (let (($x653 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x575 (and $x653 $x615)))
 (let (($x363 (= $x575 true)))
 (let (($x489 (= $x363 true)))
 (let (($x76 (= $x489 true)))
 (let (($x348 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x554 (=> $x348 true)))
 (let ((?x700 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x859 (bvuge ?x700 (_ bv1 32))))
 (let (($x9 (= $x348 $x859)))
 (let (($x580 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x364 (=> $x580 $x168)))
 (let (($x457 (= ?x700 (_ bv0 32))))
 (let (($x312 (= $x580 $x457)))
 (let (($x69 (and $x312 $x364)))
 (let (($x623 (and $x69 $x9)))
 (let (($x427 (and $x623 $x554)))
 (let (($x283 (= $x427 true)))
 (let (($x90 (= $x283 true)))
 (let (($x262 (= $x90 true)))
 (let (($x508 (= $x197 $x859)))
 (let (($x662 (= $x29 $x457)))
 (let (($x425 (and $x662 $x57)))
 (let (($x507 (and $x425 $x508)))
 (let (($x573 (and $x507 $x80)))
 (let (($x341 (= $x573 true)))
 (let (($x460 (= $x341 true)))
 (let (($x299 (= $x460 true)))
 (let (($x212 (and $x299 $x262)))
 (let (($x60 (and $x212 $x76)))
 (let (($x546 (and $x60 $x162)))
 (let (($x192 (and $x546 $x403)))
 (let (($x666 (and $x192 $x533)))
 (let (($x686 (and $x666 $x391)))
 (let (($x806 (and $x686 $x657)))
 (let (($x709 (and $x806 $x803)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x215 (and $x311 $x709)))
 (let (($x185 (bvugt ?x788 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x788 (_ bv3 32))))
 (let (($x382 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x614 (=> (bvule ?x788 (bvsub (bvadd ?x788 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x382 $x185)))))))
 (let (($x316 (=> (and $x306 (bvule ?x788 (bvsub (bvadd ?x788 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x382 $x185)))))))
 (let (($x530 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x480 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x783)))
 (let (($x535 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x801 (=> $x535 (or false (or false (and true (or $x480 $x530)))))))
 (let (($x606 (=> (and $x306 $x535) (or false (or false (and true (or $x480 $x530)))))))
 (let (($x37 (and $x606 $x316)))
 (let (($x281 (and $x37 $x215)))
 (let (($x817 (=> $x281 $x729)))
 (not $x817))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0 #b00000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_15)
(function @fun_15
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_15 #b10000000000000000000000000000001) #b00100000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0 () (_ BitVec 14)
    #b00000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv190360 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv190360 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0 () (_ BitVec 14) (_ bv0 14))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv303000 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv303000 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv303003 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 131
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0 () (_ BitVec 14))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x432 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x458 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x392 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x347 (concat (select input.dst.llvm-mem ?x392) (concat ?x458 (concat ?x538 ?x432)))))
 (let ((?x352 ((_ extract 13 0) ?x347)))
 (let ((?x72 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0 ?x352)))
 (let (($x248 (= (_ bv0 14) ?x72)))
 (let (($x333 (= $x248 true)))
 (let (($x844 (= (_ bv0 14) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0)))
 (let (($x318 (= $x844 true)))
 (let (($x284 (= $x318 true)))
 (let ((?x763 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x681 (= (_ bv0 3) ?x763)))
 (let (($x740 (= $x681 true)))
 (let (($x190 (= $x740 true)))
 (let (($x210 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x344 (=> $x210 false)))
 (let (($x548 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x638 (ite $x548 (_ bv0 32) (_ bv1 32))))
 (let (($x771 (= $x210 (bvuge ?x638 (_ bv1 32)))))
 (let (($x461 (= false false)))
 (let (($x305 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x581 (=> $x305 $x461)))
 (let (($x369 (= $x305 (= ?x638 (_ bv0 32)))))
 (let (($x234 (and $x369 $x581)))
 (let (($x853 (and $x234 $x771)))
 (let (($x847 (and $x853 $x344)))
 (let (($x252 (= $x847 true)))
 (let (($x593 (= $x252 true)))
 (let (($x169 (= $x593 true)))
 (let (($x345 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x435 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x522 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435))))
 (let (($x32 (and true $x522)))
 (let (($x171 (and $x522 $x32)))
 (let ((?x535 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x535 (_ bv1 32))) (select input.dst.llvm-mem ?x535))))
 (let ((?x848 (concat (select input.dst.llvm-mem (bvadd ?x535 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x535 (_ bv2 32))) ?x140))))
 (let (($x843 (= (bvand ?x848 (_ bv4294967288 32)) ?x848)))
 (let (($x854 (= (bvand ?x535 (_ bv4294967292 32)) ?x535)))
 (let (($x676 (and $x854 $x843)))
 (let (($x675 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x535 (bvsub ?x535 (_ bv4 32))) (bvult ?x535 (bvsub ?x535 (_ bv4 32))))))
 (let (($x518 (and (and (and (and (and $x32 $x675) $x854) $x676) $x171) $x345)))
 (let (($x716 (= true $x518)))
 (let (($x306 (not $x548)))
 (let (($x592 (=> $x306 $x716)))
 (let (($x551 (= $x592 true)))
 (let (($x396 (= $x551 true)))
 (let (($x102 (= $x396 true)))
 (let (($x59 (= $x306 true)))
 (let (($x209 (= $x59 true)))
 (let (($x610 (= $x209 true)))
 (let (($x709 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x215 (= $x709 true)))
 (let (($x281 (= $x215 true)))
 (let ((?x286 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x588 (= (_ bv0 32) ?x286)))
 (let ((?x686 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x686)))
 (let (($x391 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x464 (and $x391 $x260)))
 (let (($x657 (and $x464 $x588)))
 (let (($x309 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x806 (and $x309 $x657)))
 (let (($x302 (= $x806 true)))
 (let (($x111 (= $x302 true)))
 (let (($x291 (= $x111 true)))
 (let (($x666 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x404 (=> $x666 false)))
 (let ((?x95 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x95 (_ bv1 32))))
 (let (($x840 (= $x666 $x235)))
 (let (($x129 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x529 (=> $x129 $x461)))
 (let (($x189 (= ?x95 (_ bv0 32))))
 (let (($x328 (= $x129 $x189)))
 (let (($x303 (and $x328 $x529)))
 (let (($x447 (and $x303 $x840)))
 (let (($x317 (and $x447 $x404)))
 (let (($x417 (= $x317 true)))
 (let (($x23 (= $x417 true)))
 (let (($x193 (= $x23 true)))
 (let (($x808 (= $x210 $x235)))
 (let (($x334 (= $x305 $x189)))
 (let (($x104 (and $x334 $x581)))
 (let (($x338 (and $x104 $x808)))
 (let (($x187 (and $x338 $x344)))
 (let (($x707 (= $x187 true)))
 (let (($x292 (= $x707 true)))
 (let (($x315 (= $x292 true)))
 (let (($x764 (and $x315 $x193)))
 (let (($x319 (and $x764 $x291)))
 (let (($x244 (and $x319 $x281)))
 (let (($x782 (and $x244 $x610)))
 (let (($x268 (and $x782 $x102)))
 (let (($x520 (and $x268 $x169)))
 (let (($x822 (and $x520 $x190)))
 (let (($x838 (and $x822 $x284)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x723 (and $x29 $x838)))
 (let (($x683 (bvugt ?x535 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x535 (_ bv3 32))))
 (let (($x475 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x311 (=> (bvule ?x535 (bvsub (bvadd ?x535 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x475 $x683)))))))
 (let (($x846 (=> (and $x306 (bvule ?x535 (bvsub (bvadd ?x535 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x475 $x683)))))))
 (let (($x296 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x544 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x392)))
 (let (($x642 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x785 (=> $x642 (or false (or false (and true (or $x544 $x296)))))))
 (let (($x465 (=> (and $x306 $x642) (or false (or false (and true (or $x544 $x296)))))))
 (let (($x186 (and $x465 $x846)))
 (let (($x191 (and $x186 $x723)))
 (let (($x124 (=> $x191 $x333)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0 () (_ BitVec 14))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x432 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x538 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x458 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x392 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x347 (concat (select input.dst.llvm-mem ?x392) (concat ?x458 (concat ?x538 ?x432)))))
 (let ((?x352 ((_ extract 13 0) ?x347)))
 (let ((?x72 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0 ?x352)))
 (let (($x248 (= (_ bv0 14) ?x72)))
 (let (($x333 (= $x248 true)))
 (let (($x844 (= (_ bv0 14) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_13_0)))
 (let (($x318 (= $x844 true)))
 (let (($x284 (= $x318 true)))
 (let ((?x763 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x681 (= (_ bv0 3) ?x763)))
 (let (($x740 (= $x681 true)))
 (let (($x190 (= $x740 true)))
 (let (($x210 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x344 (=> $x210 false)))
 (let (($x548 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x638 (ite $x548 (_ bv0 32) (_ bv1 32))))
 (let (($x771 (= $x210 (bvuge ?x638 (_ bv1 32)))))
 (let (($x461 (= false false)))
 (let (($x305 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x581 (=> $x305 $x461)))
 (let (($x369 (= $x305 (= ?x638 (_ bv0 32)))))
 (let (($x234 (and $x369 $x581)))
 (let (($x853 (and $x234 $x771)))
 (let (($x847 (and $x853 $x344)))
 (let (($x252 (= $x847 true)))
 (let (($x593 (= $x252 true)))
 (let (($x169 (= $x593 true)))
 (let (($x345 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x435 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x522 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435))))
 (let (($x32 (and true $x522)))
 (let (($x171 (and $x522 $x32)))
 (let ((?x535 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x535 (_ bv1 32))) (select input.dst.llvm-mem ?x535))))
 (let ((?x848 (concat (select input.dst.llvm-mem (bvadd ?x535 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x535 (_ bv2 32))) ?x140))))
 (let (($x843 (= (bvand ?x848 (_ bv4294967288 32)) ?x848)))
 (let (($x854 (= (bvand ?x535 (_ bv4294967292 32)) ?x535)))
 (let (($x676 (and $x854 $x843)))
 (let (($x675 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x535 (bvsub ?x535 (_ bv4 32))) (bvult ?x535 (bvsub ?x535 (_ bv4 32))))))
 (let (($x518 (and (and (and (and (and $x32 $x675) $x854) $x676) $x171) $x345)))
 (let (($x716 (= true $x518)))
 (let (($x306 (not $x548)))
 (let (($x592 (=> $x306 $x716)))
 (let (($x551 (= $x592 true)))
 (let (($x396 (= $x551 true)))
 (let (($x102 (= $x396 true)))
 (let (($x59 (= $x306 true)))
 (let (($x209 (= $x59 true)))
 (let (($x610 (= $x209 true)))
 (let (($x709 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x215 (= $x709 true)))
 (let (($x281 (= $x215 true)))
 (let ((?x286 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x588 (= (_ bv0 32) ?x286)))
 (let ((?x686 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x686)))
 (let (($x391 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x464 (and $x391 $x260)))
 (let (($x657 (and $x464 $x588)))
 (let (($x309 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x806 (and $x309 $x657)))
 (let (($x302 (= $x806 true)))
 (let (($x111 (= $x302 true)))
 (let (($x291 (= $x111 true)))
 (let (($x666 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x404 (=> $x666 false)))
 (let ((?x95 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x95 (_ bv1 32))))
 (let (($x840 (= $x666 $x235)))
 (let (($x129 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x529 (=> $x129 $x461)))
 (let (($x189 (= ?x95 (_ bv0 32))))
 (let (($x328 (= $x129 $x189)))
 (let (($x303 (and $x328 $x529)))
 (let (($x447 (and $x303 $x840)))
 (let (($x317 (and $x447 $x404)))
 (let (($x417 (= $x317 true)))
 (let (($x23 (= $x417 true)))
 (let (($x193 (= $x23 true)))
 (let (($x808 (= $x210 $x235)))
 (let (($x334 (= $x305 $x189)))
 (let (($x104 (and $x334 $x581)))
 (let (($x338 (and $x104 $x808)))
 (let (($x187 (and $x338 $x344)))
 (let (($x707 (= $x187 true)))
 (let (($x292 (= $x707 true)))
 (let (($x315 (= $x292 true)))
 (let (($x764 (and $x315 $x193)))
 (let (($x319 (and $x764 $x291)))
 (let (($x244 (and $x319 $x281)))
 (let (($x782 (and $x244 $x610)))
 (let (($x268 (and $x782 $x102)))
 (let (($x520 (and $x268 $x169)))
 (let (($x822 (and $x520 $x190)))
 (let (($x838 (and $x822 $x284)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x723 (and $x29 $x838)))
 (let (($x683 (bvugt ?x535 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x535 (_ bv3 32))))
 (let (($x475 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x311 (=> (bvule ?x535 (bvsub (bvadd ?x535 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x475 $x683)))))))
 (let (($x846 (=> (and $x306 (bvule ?x535 (bvsub (bvadd ?x535 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x475 $x683)))))))
 (let (($x296 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x544 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x392)))
 (let (($x642 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x785 (=> $x642 (or false (or false (and true (or $x544 $x296)))))))
 (let (($x465 (=> (and $x306 $x642) (or false (or false (and true (or $x544 $x296)))))))
 (let (($x186 (and $x465 $x846)))
 (let (($x191 (and $x186 $x723)))
 (let (($x124 (=> $x191 $x333)))
 (not $x124))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 132
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0 () (_ BitVec 13))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x510 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x497 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x714 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x397 (concat (select input.dst.llvm-mem ?x714) (concat ?x497 (concat ?x510 ?x17)))))
 (let ((?x182 ((_ extract 12 0) ?x397)))
 (let ((?x56 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0 ?x182)))
 (let (($x828 (= (_ bv0 13) ?x56)))
 (let (($x659 (= $x828 true)))
 (let (($x365 (= (_ bv0 13) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0)))
 (let (($x122 (= $x365 true)))
 (let (($x247 (= $x122 true)))
 (let ((?x73 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x78 (= (_ bv0 3) ?x73)))
 (let (($x170 (= $x78 true)))
 (let (($x213 (= $x170 true)))
 (let (($x409 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x848 (=> $x409 true)))
 (let (($x297 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x219 (ite $x297 (_ bv0 32) (_ bv1 32))))
 (let (($x612 (= $x409 (bvuge ?x219 (_ bv1 32)))))
 (let (($x216 (= false false)))
 (let (($x817 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x854 (=> $x817 $x216)))
 (let (($x715 (= $x817 (= ?x219 (_ bv0 32)))))
 (let (($x488 (and $x715 $x854)))
 (let (($x380 (and $x488 $x612)))
 (let (($x176 (and $x380 $x848)))
 (let (($x343 (= $x176 true)))
 (let (($x443 (= $x343 true)))
 (let (($x340 (= $x443 true)))
 (let (($x460 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x432 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x352 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x432) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x432))))
 (let (($x72 (and true $x352)))
 (let (($x580 (and $x352 $x72)))
 (let ((?x642 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x642 (_ bv1 32))) (select input.dst.llvm-mem ?x642))))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x642 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x642 (_ bv2 32))) ?x197))))
 (let (($x348 (= (bvand ?x457 (_ bv4294967288 32)) ?x457)))
 (let (($x867 (= (bvand ?x642 (_ bv4294967292 32)) ?x642)))
 (let (($x832 (and $x867 $x348)))
 (let (($x393 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x642 (bvsub ?x642 (_ bv4 32))) (bvult ?x642 (bvsub ?x642 (_ bv4 32))))))
 (let (($x299 (and (and (and (and (and $x72 $x393) $x867) $x832) $x580) $x460)))
 (let (($x312 (= true $x299)))
 (let (($x548 (not $x297)))
 (let (($x212 (=> $x548 $x312)))
 (let (($x410 (= $x212 true)))
 (let (($x283 (= $x410 true)))
 (let (($x90 (= $x283 true)))
 (let (($x390 (= $x548 true)))
 (let (($x458 (= $x390 true)))
 (let (($x205 (= $x458 true)))
 (let (($x838 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x723 (= $x838 true)))
 (let (($x191 (= $x723 true)))
 (let ((?x681 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x740 (= (_ bv0 32) ?x681)))
 (let ((?x520 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x451 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x520)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x763 (and $x169 $x451)))
 (let (($x190 (and $x763 $x740)))
 (let (($x593 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x822 (and $x593 $x190)))
 (let (($x120 (= $x822 true)))
 (let (($x513 (= $x120 true)))
 (let (($x844 (= $x513 true)))
 (let (($x268 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x369 (=> $x268 true)))
 (let ((?x675 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x172 (bvuge ?x675 (_ bv1 32))))
 (let (($x638 (= $x268 $x172)))
 (let (($x518 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x592 (=> $x518 $x216)))
 (let (($x415 (= ?x675 (_ bv0 32))))
 (let (($x716 (= $x518 $x415)))
 (let (($x551 (and $x716 $x592)))
 (let (($x273 (and $x551 $x638)))
 (let (($x234 (and $x273 $x369)))
 (let (($x684 (= $x234 true)))
 (let (($x771 (= $x684 true)))
 (let (($x853 (= $x771 true)))
 (let (($x140 (= $x409 $x172)))
 (let (($x720 (= $x817 $x415)))
 (let (($x868 (and $x720 $x854)))
 (let (($x541 (and $x868 $x140)))
 (let (($x394 (and $x541 $x848)))
 (let (($x68 (= $x394 true)))
 (let (($x843 (= $x68 true)))
 (let (($x676 (= $x843 true)))
 (let (($x847 (and $x676 $x853)))
 (let (($x318 (and $x847 $x844)))
 (let (($x483 (and $x318 $x191)))
 (let (($x538 (and $x483 $x205)))
 (let (($x623 (and $x538 $x90)))
 (let (($x225 (and $x623 $x340)))
 (let (($x821 (and $x225 $x213)))
 (let (($x349 (and $x821 $x247)))
 (let (($x305 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x539 (and $x305 $x349)))
 (let (($x316 (bvugt ?x642 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x642 (_ bv3 32))))
 (let (($x614 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x29 (=> (bvule ?x642 (bvsub (bvadd ?x642 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x614 $x316)))))))
 (let (($x849 (=> (and $x548 (bvule ?x642 (bvsub (bvadd ?x642 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x614 $x316)))))))
 (let (($x606 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x801 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x714)))
 (let (($x382 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x185 (=> $x382 (or false (or false (and true (or $x801 $x606)))))))
 (let (($x783 (=> (and $x548 $x382) (or false (or false (and true (or $x801 $x606)))))))
 (let (($x7 (and $x783 $x849)))
 (let (($x446 (and $x7 $x539)))
 (let (($x313 (=> $x446 $x659)))
 (not $x313))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0 () (_ BitVec 13))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x510 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x497 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x714 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x397 (concat (select input.dst.llvm-mem ?x714) (concat ?x497 (concat ?x510 ?x17)))))
 (let ((?x182 ((_ extract 12 0) ?x397)))
 (let ((?x56 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0 ?x182)))
 (let (($x828 (= (_ bv0 13) ?x56)))
 (let (($x659 (= $x828 true)))
 (let (($x365 (= (_ bv0 13) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0)))
 (let (($x122 (= $x365 true)))
 (let (($x247 (= $x122 true)))
 (let ((?x73 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x78 (= (_ bv0 3) ?x73)))
 (let (($x170 (= $x78 true)))
 (let (($x213 (= $x170 true)))
 (let (($x409 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x848 (=> $x409 true)))
 (let (($x297 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x219 (ite $x297 (_ bv0 32) (_ bv1 32))))
 (let (($x612 (= $x409 (bvuge ?x219 (_ bv1 32)))))
 (let (($x216 (= false false)))
 (let (($x817 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x854 (=> $x817 $x216)))
 (let (($x715 (= $x817 (= ?x219 (_ bv0 32)))))
 (let (($x488 (and $x715 $x854)))
 (let (($x380 (and $x488 $x612)))
 (let (($x176 (and $x380 $x848)))
 (let (($x343 (= $x176 true)))
 (let (($x443 (= $x343 true)))
 (let (($x340 (= $x443 true)))
 (let (($x460 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x432 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x352 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x432) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x432))))
 (let (($x72 (and true $x352)))
 (let (($x580 (and $x352 $x72)))
 (let ((?x642 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x642 (_ bv1 32))) (select input.dst.llvm-mem ?x642))))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x642 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x642 (_ bv2 32))) ?x197))))
 (let (($x348 (= (bvand ?x457 (_ bv4294967288 32)) ?x457)))
 (let (($x867 (= (bvand ?x642 (_ bv4294967292 32)) ?x642)))
 (let (($x832 (and $x867 $x348)))
 (let (($x393 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x642 (bvsub ?x642 (_ bv4 32))) (bvult ?x642 (bvsub ?x642 (_ bv4 32))))))
 (let (($x299 (and (and (and (and (and $x72 $x393) $x867) $x832) $x580) $x460)))
 (let (($x312 (= true $x299)))
 (let (($x548 (not $x297)))
 (let (($x212 (=> $x548 $x312)))
 (let (($x410 (= $x212 true)))
 (let (($x283 (= $x410 true)))
 (let (($x90 (= $x283 true)))
 (let (($x390 (= $x548 true)))
 (let (($x458 (= $x390 true)))
 (let (($x205 (= $x458 true)))
 (let (($x838 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x723 (= $x838 true)))
 (let (($x191 (= $x723 true)))
 (let ((?x681 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x740 (= (_ bv0 32) ?x681)))
 (let ((?x520 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x451 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x520)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x763 (and $x169 $x451)))
 (let (($x190 (and $x763 $x740)))
 (let (($x593 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x822 (and $x593 $x190)))
 (let (($x120 (= $x822 true)))
 (let (($x513 (= $x120 true)))
 (let (($x844 (= $x513 true)))
 (let (($x268 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x369 (=> $x268 true)))
 (let ((?x675 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x172 (bvuge ?x675 (_ bv1 32))))
 (let (($x638 (= $x268 $x172)))
 (let (($x518 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x592 (=> $x518 $x216)))
 (let (($x415 (= ?x675 (_ bv0 32))))
 (let (($x716 (= $x518 $x415)))
 (let (($x551 (and $x716 $x592)))
 (let (($x273 (and $x551 $x638)))
 (let (($x234 (and $x273 $x369)))
 (let (($x684 (= $x234 true)))
 (let (($x771 (= $x684 true)))
 (let (($x853 (= $x771 true)))
 (let (($x140 (= $x409 $x172)))
 (let (($x720 (= $x817 $x415)))
 (let (($x868 (and $x720 $x854)))
 (let (($x541 (and $x868 $x140)))
 (let (($x394 (and $x541 $x848)))
 (let (($x68 (= $x394 true)))
 (let (($x843 (= $x68 true)))
 (let (($x676 (= $x843 true)))
 (let (($x847 (and $x676 $x853)))
 (let (($x318 (and $x847 $x844)))
 (let (($x483 (and $x318 $x191)))
 (let (($x538 (and $x483 $x205)))
 (let (($x623 (and $x538 $x90)))
 (let (($x225 (and $x623 $x340)))
 (let (($x821 (and $x225 $x213)))
 (let (($x349 (and $x821 $x247)))
 (let (($x305 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x539 (and $x305 $x349)))
 (let (($x316 (bvugt ?x642 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x642 (_ bv3 32))))
 (let (($x614 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x29 (=> (bvule ?x642 (bvsub (bvadd ?x642 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x614 $x316)))))))
 (let (($x849 (=> (and $x548 (bvule ?x642 (bvsub (bvadd ?x642 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x614 $x316)))))))
 (let (($x606 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x801 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x714)))
 (let (($x382 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x185 (=> $x382 (or false (or false (and true (or $x801 $x606)))))))
 (let (($x783 (=> (and $x548 $x382) (or false (or false (and true (or $x801 $x606)))))))
 (let (($x7 (and $x783 $x849)))
 (let (($x446 (and $x7 $x539)))
 (let (($x313 (=> $x446 $x659)))
 (not $x313))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0 #b0000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_15)
(function @fun_15
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_15 #b10000000000000000000000000000001) #b00010000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0 () (_ BitVec 13)
    #b0000000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv193744 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv193744 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0 () (_ BitVec 13) (_ bv0 13))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv302984 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv302984 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv302987 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 133
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0 () (_ BitVec 13))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x523 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x500 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x788 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x34 (concat (select input.dst.llvm-mem ?x788) (concat ?x500 (concat ?x47 ?x523)))))
 (let ((?x615 ((_ extract 12 0) ?x34)))
 (let ((?x489 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0 ?x615)))
 (let (($x41 (= (_ bv0 13) ?x489)))
 (let (($x158 (= $x41 true)))
 (let (($x192 (= (_ bv0 13) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0)))
 (let (($x60 (= $x192 true)))
 (let (($x693 (= $x60 true)))
 (let ((?x575 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x363 (= (_ bv0 3) ?x575)))
 (let (($x378 (= $x363 true)))
 (let (($x76 (= $x378 true)))
 (let (($x57 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x457 (=> $x57 false)))
 (let (($x297 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x803 (ite $x297 (_ bv0 32) (_ bv1 32))))
 (let (($x573 (= $x57 (bvuge ?x803 (_ bv1 32)))))
 (let (($x577 (= false false)))
 (let (($x124 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x867 (=> $x124 $x577)))
 (let (($x811 (= $x124 (= ?x803 (_ bv0 32)))))
 (let (($x97 (and $x811 $x867)))
 (let (($x506 (and $x97 $x573)))
 (let (($x398 (and $x506 $x457)))
 (let (($x43 (= $x398 true)))
 (let (($x554 (= $x43 true)))
 (let (($x9 (= $x554 true)))
 (let (($x292 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x17 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x17) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x17))))
 (let (($x56 (and true $x182)))
 (let (($x129 (and $x182 $x56)))
 (let ((?x382 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem ?x382))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv2 32))) ?x210))))
 (let (($x666 (= (bvand ?x189 (_ bv4294967288 32)) ?x189)))
 (let (($x494 (= (bvand ?x382 (_ bv4294967292 32)) ?x382)))
 (let (($x512 (and $x494 $x666)))
 (let (($x444 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x382 (bvsub ?x382 (_ bv4 32))) (bvult ?x382 (bvsub ?x382 (_ bv4 32))))))
 (let (($x315 (and (and (and (and (and $x56 $x444) $x494) $x512) $x129) $x292)))
 (let (($x328 (= true $x315)))
 (let (($x548 (not $x297)))
 (let (($x764 (=> $x548 $x328)))
 (let (($x637 (= $x764 true)))
 (let (($x417 (= $x637 true)))
 (let (($x23 (= $x417 true)))
 (let (($x155 (= $x548 true)))
 (let (($x497 (= $x155 true)))
 (let (($x436 (= $x497 true)))
 (let (($x349 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x539 (= $x349 true)))
 (let (($x446 (= $x539 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x78)))
 (let ((?x225 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x225)))
 (let (($x340 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x340 $x39)))
 (let (($x213 (and $x73 $x170)))
 (let (($x443 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x821 (and $x443 $x213)))
 (let (($x809 (= $x821 true)))
 (let (($x204 (= $x809 true)))
 (let (($x365 (= $x204 true)))
 (let (($x623 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x715 (=> $x623 false)))
 (let ((?x393 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x364 (bvuge ?x393 (_ bv1 32))))
 (let (($x219 (= $x623 $x364)))
 (let (($x299 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x212 (=> $x299 $x577)))
 (let (($x508 (= ?x393 (_ bv0 32))))
 (let (($x312 (= $x299 $x508)))
 (let (($x410 (and $x312 $x212)))
 (let (($x226 (and $x410 $x219)))
 (let (($x488 (and $x226 $x715)))
 (let (($x533 (= $x488 true)))
 (let (($x612 (= $x533 true)))
 (let (($x380 (= $x612 true)))
 (let (($x197 (= $x57 $x364)))
 (let (($x119 (= $x124 $x508)))
 (let (($x507 (and $x119 $x867)))
 (let (($x725 (and $x507 $x197)))
 (let (($x236 (and $x725 $x457)))
 (let (($x69 (= $x236 true)))
 (let (($x348 (= $x69 true)))
 (let (($x832 (= $x348 true)))
 (let (($x176 (and $x832 $x380)))
 (let (($x122 (and $x176 $x365)))
 (let (($x468 (and $x122 $x446)))
 (let (($x510 (and $x468 $x436)))
 (let (($x447 (and $x510 $x23)))
 (let (($x427 (and $x447 $x9)))
 (let (($x201 (and $x427 $x76)))
 (let (($x207 (and $x201 $x693)))
 (let (($x817 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x242 (and $x817 $x207)))
 (let (($x846 (bvugt ?x382 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x382 (_ bv3 32))))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x305 (=> (bvule ?x382 (bvsub (bvadd ?x382 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x311 $x846)))))))
 (let (($x448 (=> (and $x548 (bvule ?x382 (bvsub (bvadd ?x382 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x311 $x846)))))))
 (let (($x465 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x785 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x788)))
 (let (($x475 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x683 (=> $x475 (or false (or false (and true (or $x785 $x465)))))))
 (let (($x392 (=> (and $x548 $x475) (or false (or false (and true (or $x785 $x465)))))))
 (let (($x99 (and $x392 $x448)))
 (let (($x261 (and $x99 $x242)))
 (let (($x100 (=> $x261 $x158)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0 () (_ BitVec 13))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x523 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x500 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x788 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x34 (concat (select input.dst.llvm-mem ?x788) (concat ?x500 (concat ?x47 ?x523)))))
 (let ((?x615 ((_ extract 12 0) ?x34)))
 (let ((?x489 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0 ?x615)))
 (let (($x41 (= (_ bv0 13) ?x489)))
 (let (($x158 (= $x41 true)))
 (let (($x192 (= (_ bv0 13) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_12_0)))
 (let (($x60 (= $x192 true)))
 (let (($x693 (= $x60 true)))
 (let ((?x575 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x363 (= (_ bv0 3) ?x575)))
 (let (($x378 (= $x363 true)))
 (let (($x76 (= $x378 true)))
 (let (($x57 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x457 (=> $x57 false)))
 (let (($x297 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x803 (ite $x297 (_ bv0 32) (_ bv1 32))))
 (let (($x573 (= $x57 (bvuge ?x803 (_ bv1 32)))))
 (let (($x577 (= false false)))
 (let (($x124 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x867 (=> $x124 $x577)))
 (let (($x811 (= $x124 (= ?x803 (_ bv0 32)))))
 (let (($x97 (and $x811 $x867)))
 (let (($x506 (and $x97 $x573)))
 (let (($x398 (and $x506 $x457)))
 (let (($x43 (= $x398 true)))
 (let (($x554 (= $x43 true)))
 (let (($x9 (= $x554 true)))
 (let (($x292 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x17 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x17) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x17))))
 (let (($x56 (and true $x182)))
 (let (($x129 (and $x182 $x56)))
 (let ((?x382 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem ?x382))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv2 32))) ?x210))))
 (let (($x666 (= (bvand ?x189 (_ bv4294967288 32)) ?x189)))
 (let (($x494 (= (bvand ?x382 (_ bv4294967292 32)) ?x382)))
 (let (($x512 (and $x494 $x666)))
 (let (($x444 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x382 (bvsub ?x382 (_ bv4 32))) (bvult ?x382 (bvsub ?x382 (_ bv4 32))))))
 (let (($x315 (and (and (and (and (and $x56 $x444) $x494) $x512) $x129) $x292)))
 (let (($x328 (= true $x315)))
 (let (($x548 (not $x297)))
 (let (($x764 (=> $x548 $x328)))
 (let (($x637 (= $x764 true)))
 (let (($x417 (= $x637 true)))
 (let (($x23 (= $x417 true)))
 (let (($x155 (= $x548 true)))
 (let (($x497 (= $x155 true)))
 (let (($x436 (= $x497 true)))
 (let (($x349 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x539 (= $x349 true)))
 (let (($x446 (= $x539 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x78)))
 (let ((?x225 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x225)))
 (let (($x340 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x340 $x39)))
 (let (($x213 (and $x73 $x170)))
 (let (($x443 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x821 (and $x443 $x213)))
 (let (($x809 (= $x821 true)))
 (let (($x204 (= $x809 true)))
 (let (($x365 (= $x204 true)))
 (let (($x623 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x715 (=> $x623 false)))
 (let ((?x393 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x364 (bvuge ?x393 (_ bv1 32))))
 (let (($x219 (= $x623 $x364)))
 (let (($x299 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x212 (=> $x299 $x577)))
 (let (($x508 (= ?x393 (_ bv0 32))))
 (let (($x312 (= $x299 $x508)))
 (let (($x410 (and $x312 $x212)))
 (let (($x226 (and $x410 $x219)))
 (let (($x488 (and $x226 $x715)))
 (let (($x533 (= $x488 true)))
 (let (($x612 (= $x533 true)))
 (let (($x380 (= $x612 true)))
 (let (($x197 (= $x57 $x364)))
 (let (($x119 (= $x124 $x508)))
 (let (($x507 (and $x119 $x867)))
 (let (($x725 (and $x507 $x197)))
 (let (($x236 (and $x725 $x457)))
 (let (($x69 (= $x236 true)))
 (let (($x348 (= $x69 true)))
 (let (($x832 (= $x348 true)))
 (let (($x176 (and $x832 $x380)))
 (let (($x122 (and $x176 $x365)))
 (let (($x468 (and $x122 $x446)))
 (let (($x510 (and $x468 $x436)))
 (let (($x447 (and $x510 $x23)))
 (let (($x427 (and $x447 $x9)))
 (let (($x201 (and $x427 $x76)))
 (let (($x207 (and $x201 $x693)))
 (let (($x817 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x242 (and $x817 $x207)))
 (let (($x846 (bvugt ?x382 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x382 (_ bv3 32))))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x305 (=> (bvule ?x382 (bvsub (bvadd ?x382 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x311 $x846)))))))
 (let (($x448 (=> (and $x548 (bvule ?x382 (bvsub (bvadd ?x382 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x311 $x846)))))))
 (let (($x465 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x785 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x788)))
 (let (($x475 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x683 (=> $x475 (or false (or false (and true (or $x785 $x465)))))))
 (let (($x392 (=> (and $x548 $x475) (or false (or false (and true (or $x785 $x465)))))))
 (let (($x99 (and $x392 $x448)))
 (let (($x261 (and $x99 $x242)))
 (let (($x100 (=> $x261 $x158)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 134
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0 () (_ BitVec 12))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x709 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x391 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x535 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x464 (concat (select input.dst.llvm-mem ?x535) (concat ?x154 (concat ?x391 ?x709)))))
 (let ((?x657 ((_ extract 11 0) ?x464)))
 (let ((?x111 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0 ?x657)))
 (let (($x522 (= (_ bv0 12) ?x111)))
 (let (($x32 (= $x522 true)))
 (let (($x782 (= (_ bv0 12) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0)))
 (let (($x319 (= $x782 true)))
 (let (($x286 (= $x319 true)))
 (let ((?x806 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x302 (= (_ bv0 3) ?x806)))
 (let (($x278 (= $x302 true)))
 (let (($x291 (= $x278 true)))
 (let (($x581 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x189 (=> $x581 true)))
 (let (($x496 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x284 (ite $x496 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (= $x581 (bvuge ?x284 (_ bv1 32)))))
 (let (($x662 (= false false)))
 (let (($x313 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x494 (=> $x313 $x662)))
 (let (($x341 (= $x313 (= ?x284 (_ bv0 32)))))
 (let (($x347 (and $x341 $x494)))
 (let (($x161 (and $x347 $x187)))
 (let (($x482 (and $x161 $x189)))
 (let (($x168 (= $x482 true)))
 (let (($x404 (= $x168 true)))
 (let (($x840 (= $x404 true)))
 (let (($x843 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x523 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x615 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x523) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x523))))
 (let (($x489 (and true $x615)))
 (let (($x518 (and $x615 $x489)))
 (let ((?x475 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv1 32))) (select input.dst.llvm-mem ?x475))))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv2 32))) ?x409))))
 (let (($x268 (= (bvand ?x415 (_ bv4294967288 32)) ?x415)))
 (let (($x88 (= (bvand ?x475 (_ bv4294967292 32)) ?x475)))
 (let (($x345 (and $x88 $x268)))
 (let (($x859 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x475 (bvsub ?x475 (_ bv4 32))) (bvult ?x475 (bvsub ?x475 (_ bv4 32))))))
 (let (($x676 (and (and (and (and (and $x489 $x859) $x88) $x345) $x518) $x843)))
 (let (($x716 (= true $x676)))
 (let (($x297 (not $x496)))
 (let (($x847 (=> $x297 $x716)))
 (let (($x252 (= $x847 true)))
 (let (($x684 (= $x252 true)))
 (let (($x771 (= $x684 true)))
 (let (($x346 (= $x297 true)))
 (let (($x500 (= $x346 true)))
 (let (($x653 (= $x500 true)))
 (let (($x207 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x242 (= $x207 true)))
 (let (($x261 (= $x242 true)))
 (let ((?x363 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x378 (= (_ bv0 32) ?x363)))
 (let ((?x427 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x427)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x575 (and $x9 $x162)))
 (let (($x76 (and $x575 $x378)))
 (let (($x554 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x554 $x76)))
 (let (($x413 (= $x201 true)))
 (let (($x546 (= $x413 true)))
 (let (($x192 (= $x546 true)))
 (let (($x447 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x811 (=> $x447 true)))
 (let ((?x444 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x529 (bvuge ?x444 (_ bv1 32))))
 (let (($x803 (= $x447 $x529)))
 (let (($x315 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x764 (=> $x315 $x662)))
 (let (($x808 (= ?x444 (_ bv0 32))))
 (let (($x328 (= $x315 $x808)))
 (let (($x637 (and $x328 $x764)))
 (let (($x429 (and $x637 $x803)))
 (let (($x97 (and $x429 $x811)))
 (let (($x102 (= $x97 true)))
 (let (($x573 (= $x102 true)))
 (let (($x506 (= $x573 true)))
 (let (($x210 (= $x581 $x529)))
 (let (($x171 (= $x313 $x808)))
 (let (($x338 (and $x171 $x494)))
 (let (($x259 (and $x338 $x210)))
 (let (($x583 (and $x259 $x189)))
 (let (($x303 (= $x583 true)))
 (let (($x666 (= $x303 true)))
 (let (($x512 (= $x666 true)))
 (let (($x398 (and $x512 $x506)))
 (let (($x60 (and $x398 $x192)))
 (let (($x682 (and $x60 $x261)))
 (let (($x47 (and $x682 $x653)))
 (let (($x273 (and $x47 $x771)))
 (let (($x317 (and $x273 $x840)))
 (let (($x215 (and $x317 $x291)))
 (let (($x435 (and $x215 $x286)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x209 (and $x124 $x435)))
 (let (($x849 (bvugt ?x475 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x475 (_ bv3 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x817 (=> (bvule ?x475 (bvsub (bvadd ?x475 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x849)))))))
 (let (($x555 (=> (and $x297 (bvule ?x475 (bvsub (bvadd ?x475 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x29 $x849)))))))
 (let (($x783 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x535)))
 (let (($x614 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x316 (=> $x614 (or false (or false (and true (or $x185 $x783)))))))
 (let (($x714 (=> (and $x297 $x614) (or false (or false (and true (or $x185 $x783)))))))
 (let (($x37 (and $x714 $x555)))
 (let (($x260 (and $x37 $x209)))
 (let (($x729 (=> $x260 $x32)))
 (not $x729))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0 () (_ BitVec 12))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x709 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x391 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x535 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x464 (concat (select input.dst.llvm-mem ?x535) (concat ?x154 (concat ?x391 ?x709)))))
 (let ((?x657 ((_ extract 11 0) ?x464)))
 (let ((?x111 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0 ?x657)))
 (let (($x522 (= (_ bv0 12) ?x111)))
 (let (($x32 (= $x522 true)))
 (let (($x782 (= (_ bv0 12) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0)))
 (let (($x319 (= $x782 true)))
 (let (($x286 (= $x319 true)))
 (let ((?x806 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x302 (= (_ bv0 3) ?x806)))
 (let (($x278 (= $x302 true)))
 (let (($x291 (= $x278 true)))
 (let (($x581 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x189 (=> $x581 true)))
 (let (($x496 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x284 (ite $x496 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (= $x581 (bvuge ?x284 (_ bv1 32)))))
 (let (($x662 (= false false)))
 (let (($x313 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x494 (=> $x313 $x662)))
 (let (($x341 (= $x313 (= ?x284 (_ bv0 32)))))
 (let (($x347 (and $x341 $x494)))
 (let (($x161 (and $x347 $x187)))
 (let (($x482 (and $x161 $x189)))
 (let (($x168 (= $x482 true)))
 (let (($x404 (= $x168 true)))
 (let (($x840 (= $x404 true)))
 (let (($x843 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x523 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x615 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x523) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x523))))
 (let (($x489 (and true $x615)))
 (let (($x518 (and $x615 $x489)))
 (let ((?x475 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv1 32))) (select input.dst.llvm-mem ?x475))))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv2 32))) ?x409))))
 (let (($x268 (= (bvand ?x415 (_ bv4294967288 32)) ?x415)))
 (let (($x88 (= (bvand ?x475 (_ bv4294967292 32)) ?x475)))
 (let (($x345 (and $x88 $x268)))
 (let (($x859 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x475 (bvsub ?x475 (_ bv4 32))) (bvult ?x475 (bvsub ?x475 (_ bv4 32))))))
 (let (($x676 (and (and (and (and (and $x489 $x859) $x88) $x345) $x518) $x843)))
 (let (($x716 (= true $x676)))
 (let (($x297 (not $x496)))
 (let (($x847 (=> $x297 $x716)))
 (let (($x252 (= $x847 true)))
 (let (($x684 (= $x252 true)))
 (let (($x771 (= $x684 true)))
 (let (($x346 (= $x297 true)))
 (let (($x500 (= $x346 true)))
 (let (($x653 (= $x500 true)))
 (let (($x207 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x242 (= $x207 true)))
 (let (($x261 (= $x242 true)))
 (let ((?x363 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x378 (= (_ bv0 32) ?x363)))
 (let ((?x427 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x427)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x575 (and $x9 $x162)))
 (let (($x76 (and $x575 $x378)))
 (let (($x554 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x554 $x76)))
 (let (($x413 (= $x201 true)))
 (let (($x546 (= $x413 true)))
 (let (($x192 (= $x546 true)))
 (let (($x447 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x811 (=> $x447 true)))
 (let ((?x444 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x529 (bvuge ?x444 (_ bv1 32))))
 (let (($x803 (= $x447 $x529)))
 (let (($x315 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x764 (=> $x315 $x662)))
 (let (($x808 (= ?x444 (_ bv0 32))))
 (let (($x328 (= $x315 $x808)))
 (let (($x637 (and $x328 $x764)))
 (let (($x429 (and $x637 $x803)))
 (let (($x97 (and $x429 $x811)))
 (let (($x102 (= $x97 true)))
 (let (($x573 (= $x102 true)))
 (let (($x506 (= $x573 true)))
 (let (($x210 (= $x581 $x529)))
 (let (($x171 (= $x313 $x808)))
 (let (($x338 (and $x171 $x494)))
 (let (($x259 (and $x338 $x210)))
 (let (($x583 (and $x259 $x189)))
 (let (($x303 (= $x583 true)))
 (let (($x666 (= $x303 true)))
 (let (($x512 (= $x666 true)))
 (let (($x398 (and $x512 $x506)))
 (let (($x60 (and $x398 $x192)))
 (let (($x682 (and $x60 $x261)))
 (let (($x47 (and $x682 $x653)))
 (let (($x273 (and $x47 $x771)))
 (let (($x317 (and $x273 $x840)))
 (let (($x215 (and $x317 $x291)))
 (let (($x435 (and $x215 $x286)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x209 (and $x124 $x435)))
 (let (($x849 (bvugt ?x475 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x475 (_ bv3 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x817 (=> (bvule ?x475 (bvsub (bvadd ?x475 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x849)))))))
 (let (($x555 (=> (and $x297 (bvule ?x475 (bvsub (bvadd ?x475 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x29 $x849)))))))
 (let (($x783 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x535)))
 (let (($x614 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x316 (=> $x614 (or false (or false (and true (or $x185 $x783)))))))
 (let (($x714 (=> (and $x297 $x614) (or false (or false (and true (or $x185 $x783)))))))
 (let (($x37 (and $x714 $x555)))
 (let (($x260 (and $x37 $x209)))
 (let (($x729 (=> $x260 $x32)))
 (not $x729))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0 #b000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_15)
(function @fun_15
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_15 #b10000000000000000000000000000001) #b00001000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0 () (_ BitVec 12)
    #x000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv259568 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv259568 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0 () (_ BitVec 12) (_ bv0 12))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv314120 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv314120 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv314123 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 135
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0 () (_ BitVec 12))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x838 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x567 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x642 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x763 (concat (select input.dst.llvm-mem ?x642) (concat ?x567 (concat ?x169 ?x838)))))
 (let ((?x190 ((_ extract 11 0) ?x763)))
 (let ((?x513 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0 ?x190)))
 (let (($x352 (= (_ bv0 12) ?x513)))
 (let (($x72 (= $x352 true)))
 (let (($x538 (= (_ bv0 12) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0)))
 (let (($x318 (= $x538 true)))
 (let (($x681 (= $x318 true)))
 (let ((?x822 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x120 (= (_ bv0 3) ?x822)))
 (let (($x563 (= $x120 true)))
 (let (($x844 (= $x563 true)))
 (let (($x854 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x415 (=> $x854 false)))
 (let (($x496 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x247 (ite $x496 (_ bv0 32) (_ bv1 32))))
 (let (($x394 (= $x854 (bvuge ?x247 (_ bv1 32)))))
 (let (($x334 (= false false)))
 (let (($x100 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x88 (=> $x100 $x334)))
 (let (($x707 (= $x100 (= ?x247 (_ bv0 32)))))
 (let (($x397 (and $x707 $x88)))
 (let (($x238 (and $x397 $x394)))
 (let (($x425 (and $x238 $x415)))
 (let (($x461 (= $x425 true)))
 (let (($x369 (= $x461 true)))
 (let (($x638 (= $x369 true)))
 (let (($x348 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x709 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x657 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x709) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x709))))
 (let (($x111 (and true $x657)))
 (let (($x299 (and $x657 $x111)))
 (let ((?x614 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv1 32))) (select input.dst.llvm-mem ?x614))))
 (let ((?x508 (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv2 32))) ?x57))))
 (let (($x623 (= (bvand ?x508 (_ bv4294967288 32)) ?x508)))
 (let (($x135 (= (bvand ?x614 (_ bv4294967292 32)) ?x614)))
 (let (($x460 (and $x135 $x623)))
 (let (($x235 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x614 (bvsub ?x614 (_ bv4 32))) (bvult ?x614 (bvsub ?x614 (_ bv4 32))))))
 (let (($x832 (and (and (and (and (and $x111 $x235) $x135) $x460) $x299) $x348)))
 (let (($x312 (= true $x832)))
 (let (($x297 (not $x496)))
 (let (($x176 (=> $x297 $x312)))
 (let (($x343 (= $x176 true)))
 (let (($x533 (= $x343 true)))
 (let (($x612 (= $x533 true)))
 (let (($x686 (= $x297 true)))
 (let (($x154 (= $x686 true)))
 (let (($x309 (= $x154 true)))
 (let (($x435 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x209 (= $x435 true)))
 (let (($x260 (= $x209 true)))
 (let ((?x302 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x302)))
 (let ((?x317 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x317)))
 (let (($x840 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x806 (and $x840 $x281)))
 (let (($x291 (and $x806 $x278)))
 (let (($x404 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x404 $x291)))
 (let (($x59 (= $x215 true)))
 (let (($x244 (= $x59 true)))
 (let (($x782 (= $x244 true)))
 (let (($x273 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x341 (=> $x273 false)))
 (let ((?x859 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x592 (bvuge ?x859 (_ bv1 32))))
 (let (($x284 (= $x273 $x592)))
 (let (($x676 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x847 (=> $x676 $x334)))
 (let (($x140 (= ?x859 (_ bv0 32))))
 (let (($x716 (= $x676 $x140)))
 (let (($x252 (and $x716 $x847)))
 (let (($x80 (and $x252 $x284)))
 (let (($x347 (and $x80 $x341)))
 (let (($x90 (= $x347 true)))
 (let (($x187 (= $x90 true)))
 (let (($x161 (= $x187 true)))
 (let (($x409 (= $x854 $x592)))
 (let (($x580 (= $x100 $x140)))
 (let (($x541 (and $x580 $x88)))
 (let (($x700 (and $x541 $x409)))
 (let (($x530 (and $x700 $x415)))
 (let (($x551 (= $x530 true)))
 (let (($x268 (= $x551 true)))
 (let (($x345 (= $x268 true)))
 (let (($x482 (and $x345 $x161)))
 (let (($x319 (and $x482 $x782)))
 (let (($x588 (and $x319 $x260)))
 (let (($x391 (and $x588 $x309)))
 (let (($x226 (and $x391 $x612)))
 (let (($x234 (and $x226 $x638)))
 (let (($x723 (and $x234 $x844)))
 (let (($x432 (and $x723 $x681)))
 (let (($x313 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x458 (and $x313 $x432)))
 (let (($x448 (bvugt ?x614 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x614 (_ bv3 32))))
 (let (($x305 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x124 (=> (bvule ?x614 (bvsub (bvadd ?x614 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x305 $x448)))))))
 (let (($x196 (=> (and $x297 (bvule ?x614 (bvsub (bvadd ?x614 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x305 $x448)))))))
 (let (($x392 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x683 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x642)))
 (let (($x311 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x846 (=> $x311 (or false (or false (and true (or $x683 $x392)))))))
 (let (($x788 (=> (and $x297 $x311) (or false (or false (and true (or $x683 $x392)))))))
 (let (($x186 (and $x788 $x196)))
 (let (($x451 (and $x186 $x458)))
 (let (($x333 (=> $x451 $x72)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0 () (_ BitVec 12))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x838 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x567 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x642 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x763 (concat (select input.dst.llvm-mem ?x642) (concat ?x567 (concat ?x169 ?x838)))))
 (let ((?x190 ((_ extract 11 0) ?x763)))
 (let ((?x513 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0 ?x190)))
 (let (($x352 (= (_ bv0 12) ?x513)))
 (let (($x72 (= $x352 true)))
 (let (($x538 (= (_ bv0 12) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_11_0)))
 (let (($x318 (= $x538 true)))
 (let (($x681 (= $x318 true)))
 (let ((?x822 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x120 (= (_ bv0 3) ?x822)))
 (let (($x563 (= $x120 true)))
 (let (($x844 (= $x563 true)))
 (let (($x854 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x415 (=> $x854 false)))
 (let (($x496 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x247 (ite $x496 (_ bv0 32) (_ bv1 32))))
 (let (($x394 (= $x854 (bvuge ?x247 (_ bv1 32)))))
 (let (($x334 (= false false)))
 (let (($x100 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x88 (=> $x100 $x334)))
 (let (($x707 (= $x100 (= ?x247 (_ bv0 32)))))
 (let (($x397 (and $x707 $x88)))
 (let (($x238 (and $x397 $x394)))
 (let (($x425 (and $x238 $x415)))
 (let (($x461 (= $x425 true)))
 (let (($x369 (= $x461 true)))
 (let (($x638 (= $x369 true)))
 (let (($x348 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x709 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x657 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x709) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x709))))
 (let (($x111 (and true $x657)))
 (let (($x299 (and $x657 $x111)))
 (let ((?x614 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv1 32))) (select input.dst.llvm-mem ?x614))))
 (let ((?x508 (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv2 32))) ?x57))))
 (let (($x623 (= (bvand ?x508 (_ bv4294967288 32)) ?x508)))
 (let (($x135 (= (bvand ?x614 (_ bv4294967292 32)) ?x614)))
 (let (($x460 (and $x135 $x623)))
 (let (($x235 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x614 (bvsub ?x614 (_ bv4 32))) (bvult ?x614 (bvsub ?x614 (_ bv4 32))))))
 (let (($x832 (and (and (and (and (and $x111 $x235) $x135) $x460) $x299) $x348)))
 (let (($x312 (= true $x832)))
 (let (($x297 (not $x496)))
 (let (($x176 (=> $x297 $x312)))
 (let (($x343 (= $x176 true)))
 (let (($x533 (= $x343 true)))
 (let (($x612 (= $x533 true)))
 (let (($x686 (= $x297 true)))
 (let (($x154 (= $x686 true)))
 (let (($x309 (= $x154 true)))
 (let (($x435 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x209 (= $x435 true)))
 (let (($x260 (= $x209 true)))
 (let ((?x302 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x302)))
 (let ((?x317 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x317)))
 (let (($x840 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x806 (and $x840 $x281)))
 (let (($x291 (and $x806 $x278)))
 (let (($x404 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x404 $x291)))
 (let (($x59 (= $x215 true)))
 (let (($x244 (= $x59 true)))
 (let (($x782 (= $x244 true)))
 (let (($x273 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x341 (=> $x273 false)))
 (let ((?x859 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x592 (bvuge ?x859 (_ bv1 32))))
 (let (($x284 (= $x273 $x592)))
 (let (($x676 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x847 (=> $x676 $x334)))
 (let (($x140 (= ?x859 (_ bv0 32))))
 (let (($x716 (= $x676 $x140)))
 (let (($x252 (and $x716 $x847)))
 (let (($x80 (and $x252 $x284)))
 (let (($x347 (and $x80 $x341)))
 (let (($x90 (= $x347 true)))
 (let (($x187 (= $x90 true)))
 (let (($x161 (= $x187 true)))
 (let (($x409 (= $x854 $x592)))
 (let (($x580 (= $x100 $x140)))
 (let (($x541 (and $x580 $x88)))
 (let (($x700 (and $x541 $x409)))
 (let (($x530 (and $x700 $x415)))
 (let (($x551 (= $x530 true)))
 (let (($x268 (= $x551 true)))
 (let (($x345 (= $x268 true)))
 (let (($x482 (and $x345 $x161)))
 (let (($x319 (and $x482 $x782)))
 (let (($x588 (and $x319 $x260)))
 (let (($x391 (and $x588 $x309)))
 (let (($x226 (and $x391 $x612)))
 (let (($x234 (and $x226 $x638)))
 (let (($x723 (and $x234 $x844)))
 (let (($x432 (and $x723 $x681)))
 (let (($x313 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x458 (and $x313 $x432)))
 (let (($x448 (bvugt ?x614 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x614 (_ bv3 32))))
 (let (($x305 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x124 (=> (bvule ?x614 (bvsub (bvadd ?x614 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x305 $x448)))))))
 (let (($x196 (=> (and $x297 (bvule ?x614 (bvsub (bvadd ?x614 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x305 $x448)))))))
 (let (($x392 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x683 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x642)))
 (let (($x311 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x846 (=> $x311 (or false (or false (and true (or $x683 $x392)))))))
 (let (($x788 (=> (and $x297 $x311) (or false (or false (and true (or $x683 $x392)))))))
 (let (($x186 (and $x788 $x196)))
 (let (($x451 (and $x186 $x458)))
 (let (($x333 (=> $x451 $x72)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 136
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0 () (_ BitVec 11))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x349 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x340 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x550 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x382 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x73 (concat (select input.dst.llvm-mem ?x382) (concat ?x550 (concat ?x340 ?x349)))))
 (let ((?x213 ((_ extract 10 0) ?x73)))
 (let ((?x204 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0 ?x213)))
 (let (($x182 (= (_ bv0 11) ?x204)))
 (let (($x56 (= $x182 true)))
 (let (($x510 (= (_ bv0 11) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0)))
 (let (($x122 (= $x510 true)))
 (let (($x78 (= $x122 true)))
 (let ((?x821 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x809 (= (_ bv0 3) ?x821)))
 (let (($x804 (= $x809 true)))
 (let (($x365 (= $x804 true)))
 (let (($x867 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x508 (=> $x867 true)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x693 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x236 (= $x867 (bvuge ?x693 (_ bv1 32)))))
 (let (($x720 (= false false)))
 (let (($x729 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x135 (=> $x729 $x720)))
 (let (($x68 (= $x729 (= ?x693 (_ bv0 32)))))
 (let (($x34 (and $x68 $x135)))
 (let (($x306 (and $x34 $x236)))
 (let (($x104 (and $x306 $x508)))
 (let (($x216 (= $x104 true)))
 (let (($x715 (= $x216 true)))
 (let (($x219 (= $x715 true)))
 (let (($x666 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x838 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x190 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x838) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x838))))
 (let (($x513 (and true $x190)))
 (let (($x315 (and $x190 $x513)))
 (let ((?x311 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x581 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x808 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x581))))
 (let (($x447 (= (bvand ?x808 (_ bv4294967288 32)) ?x808)))
 (let (($x24 (= (bvand ?x311 (_ bv4294967292 32)) ?x311)))
 (let (($x292 (and $x24 $x447)))
 (let (($x172 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x311 (bvsub ?x311 (_ bv4 32))) (bvult ?x311 (bvsub ?x311 (_ bv4 32))))))
 (let (($x512 (and (and (and (and (and $x513 $x172) $x24) $x292) $x315) $x666)))
 (let (($x328 (= true $x512)))
 (let (($x496 (not $x116)))
 (let (($x398 (=> $x496 $x328)))
 (let (($x43 (= $x398 true)))
 (let (($x102 (= $x43 true)))
 (let (($x573 (= $x102 true)))
 (let (($x520 (= $x496 true)))
 (let (($x567 (= $x520 true)))
 (let (($x593 (= $x567 true)))
 (let (($x432 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x458 (= $x432 true)))
 (let (($x451 (= $x458 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x563 (= (_ bv0 32) ?x120)))
 (let ((?x234 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x234)))
 (let (($x638 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x822 (and $x638 $x191)))
 (let (($x844 (and $x822 $x563)))
 (let (($x369 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x723 (and $x369 $x844)))
 (let (($x390 (= $x723 true)))
 (let (($x483 (= $x390 true)))
 (let (($x538 (= $x483 true)))
 (let (($x226 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x707 (=> $x226 true)))
 (let ((?x235 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x235 (_ bv1 32))))
 (let (($x247 (= $x226 $x212)))
 (let (($x832 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x176 (=> $x832 $x720)))
 (let (($x197 (= ?x235 (_ bv0 32))))
 (let (($x312 (= $x832 $x197)))
 (let (($x343 (and $x312 $x176)))
 (let (($x344 (and $x343 $x247)))
 (let (($x397 (and $x344 $x707)))
 (let (($x23 (= $x397 true)))
 (let (($x394 (= $x23 true)))
 (let (($x238 (= $x394 true)))
 (let (($x57 (= $x867 $x212)))
 (let (($x129 (= $x729 $x197)))
 (let (($x725 (and $x129 $x135)))
 (let (($x95 (and $x725 $x57)))
 (let (($x296 (and $x95 $x508)))
 (let (($x410 (= $x296 true)))
 (let (($x623 (= $x410 true)))
 (let (($x460 (= $x623 true)))
 (let (($x425 (and $x460 $x238)))
 (let (($x318 (and $x425 $x538)))
 (let (($x740 (and $x318 $x451)))
 (let (($x169 (and $x740 $x593)))
 (let (($x429 (and $x169 $x573)))
 (let (($x488 (and $x429 $x219)))
 (let (($x539 (and $x488 $x365)))
 (let (($x17 (and $x539 $x78)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x497 (and $x100 $x17)))
 (let (($x555 (bvugt ?x311 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x311 (_ bv3 32))))
 (let (($x817 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x313 (=> (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x817 $x555)))))))
 (let (($x248 (=> (and $x496 (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x817 $x555)))))))
 (let (($x714 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x316 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x382)))
 (let (($x29 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x849 (=> $x29 (or false (or false (and true (or $x316 $x714)))))))
 (let (($x535 (=> (and $x496 $x29) (or false (or false (and true (or $x316 $x714)))))))
 (let (($x7 (and $x535 $x248)))
 (let (($x39 (and $x7 $x497)))
 (let (($x659 (=> $x39 $x56)))
 (not $x659))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0 () (_ BitVec 11))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x349 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x340 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x550 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x382 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x73 (concat (select input.dst.llvm-mem ?x382) (concat ?x550 (concat ?x340 ?x349)))))
 (let ((?x213 ((_ extract 10 0) ?x73)))
 (let ((?x204 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0 ?x213)))
 (let (($x182 (= (_ bv0 11) ?x204)))
 (let (($x56 (= $x182 true)))
 (let (($x510 (= (_ bv0 11) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0)))
 (let (($x122 (= $x510 true)))
 (let (($x78 (= $x122 true)))
 (let ((?x821 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x809 (= (_ bv0 3) ?x821)))
 (let (($x804 (= $x809 true)))
 (let (($x365 (= $x804 true)))
 (let (($x867 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x508 (=> $x867 true)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x693 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x236 (= $x867 (bvuge ?x693 (_ bv1 32)))))
 (let (($x720 (= false false)))
 (let (($x729 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x135 (=> $x729 $x720)))
 (let (($x68 (= $x729 (= ?x693 (_ bv0 32)))))
 (let (($x34 (and $x68 $x135)))
 (let (($x306 (and $x34 $x236)))
 (let (($x104 (and $x306 $x508)))
 (let (($x216 (= $x104 true)))
 (let (($x715 (= $x216 true)))
 (let (($x219 (= $x715 true)))
 (let (($x666 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x838 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x190 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x838) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x838))))
 (let (($x513 (and true $x190)))
 (let (($x315 (and $x190 $x513)))
 (let ((?x311 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x581 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x808 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x581))))
 (let (($x447 (= (bvand ?x808 (_ bv4294967288 32)) ?x808)))
 (let (($x24 (= (bvand ?x311 (_ bv4294967292 32)) ?x311)))
 (let (($x292 (and $x24 $x447)))
 (let (($x172 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x311 (bvsub ?x311 (_ bv4 32))) (bvult ?x311 (bvsub ?x311 (_ bv4 32))))))
 (let (($x512 (and (and (and (and (and $x513 $x172) $x24) $x292) $x315) $x666)))
 (let (($x328 (= true $x512)))
 (let (($x496 (not $x116)))
 (let (($x398 (=> $x496 $x328)))
 (let (($x43 (= $x398 true)))
 (let (($x102 (= $x43 true)))
 (let (($x573 (= $x102 true)))
 (let (($x520 (= $x496 true)))
 (let (($x567 (= $x520 true)))
 (let (($x593 (= $x567 true)))
 (let (($x432 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x458 (= $x432 true)))
 (let (($x451 (= $x458 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x563 (= (_ bv0 32) ?x120)))
 (let ((?x234 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x234)))
 (let (($x638 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x822 (and $x638 $x191)))
 (let (($x844 (and $x822 $x563)))
 (let (($x369 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x723 (and $x369 $x844)))
 (let (($x390 (= $x723 true)))
 (let (($x483 (= $x390 true)))
 (let (($x538 (= $x483 true)))
 (let (($x226 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x707 (=> $x226 true)))
 (let ((?x235 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x235 (_ bv1 32))))
 (let (($x247 (= $x226 $x212)))
 (let (($x832 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x176 (=> $x832 $x720)))
 (let (($x197 (= ?x235 (_ bv0 32))))
 (let (($x312 (= $x832 $x197)))
 (let (($x343 (and $x312 $x176)))
 (let (($x344 (and $x343 $x247)))
 (let (($x397 (and $x344 $x707)))
 (let (($x23 (= $x397 true)))
 (let (($x394 (= $x23 true)))
 (let (($x238 (= $x394 true)))
 (let (($x57 (= $x867 $x212)))
 (let (($x129 (= $x729 $x197)))
 (let (($x725 (and $x129 $x135)))
 (let (($x95 (and $x725 $x57)))
 (let (($x296 (and $x95 $x508)))
 (let (($x410 (= $x296 true)))
 (let (($x623 (= $x410 true)))
 (let (($x460 (= $x623 true)))
 (let (($x425 (and $x460 $x238)))
 (let (($x318 (and $x425 $x538)))
 (let (($x740 (and $x318 $x451)))
 (let (($x169 (and $x740 $x593)))
 (let (($x429 (and $x169 $x573)))
 (let (($x488 (and $x429 $x219)))
 (let (($x539 (and $x488 $x365)))
 (let (($x17 (and $x539 $x78)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x497 (and $x100 $x17)))
 (let (($x555 (bvugt ?x311 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x311 (_ bv3 32))))
 (let (($x817 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x313 (=> (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x817 $x555)))))))
 (let (($x248 (=> (and $x496 (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x817 $x555)))))))
 (let (($x714 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x316 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x382)))
 (let (($x29 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x849 (=> $x29 (or false (or false (and true (or $x316 $x714)))))))
 (let (($x535 (=> (and $x496 $x29) (or false (or false (and true (or $x316 $x714)))))))
 (let (($x7 (and $x535 $x248)))
 (let (($x39 (and $x7 $x497)))
 (let (($x659 (=> $x39 $x56)))
 (not $x659))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0 #b00000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_15)
(function @fun_15
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_15 #b10000000000000000000000000000001) #b00000100)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0 () (_ BitVec 11)
    #b00000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv177008 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv177008 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0 () (_ BitVec 11) (_ bv0 11))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv326024 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv326024 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv326027 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 137
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0 () (_ BitVec 11))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x207 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x475 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x575 (concat (select input.dst.llvm-mem ?x475) (concat ?x262 (concat ?x9 ?x207)))))
 (let ((?x76 ((_ extract 10 0) ?x575)))
 (let ((?x546 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0 ?x76)))
 (let (($x615 (= (_ bv0 11) ?x546)))
 (let (($x489 (= $x615 true)))
 (let (($x47 (= (_ bv0 11) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0)))
 (let (($x60 (= $x47 true)))
 (let (($x363 (= $x60 true)))
 (let ((?x201 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x413 (= (_ bv0 3) ?x201)))
 (let (($x403 (= $x413 true)))
 (let (($x192 (= $x403 true)))
 (let (($x494 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x808 (=> $x494 false)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x286 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x583 (= $x494 (bvuge ?x286 (_ bv1 32)))))
 (let (($x119 (= false false)))
 (let (($x333 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x24 (=> $x333 $x119)))
 (let (($x69 (= $x333 (= ?x286 (_ bv0 32)))))
 (let (($x464 (and $x69 $x24)))
 (let (($x544 (and $x464 $x583)))
 (let (($x868 (and $x544 $x808)))
 (let (($x577 (= $x868 true)))
 (let (($x811 (= $x577 true)))
 (let (($x803 (= $x811 true)))
 (let (($x268 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x349 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x213 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x349) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x349))))
 (let (($x204 (and true $x213)))
 (let (($x676 (and $x213 $x204)))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x854 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem ?x29))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv2 32))) ?x854))))
 (let (($x273 (= (bvand ?x140 (_ bv4294967288 32)) ?x140)))
 (let (($x377 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x843 (and $x377 $x273)))
 (let (($x364 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv4 32))) (bvult ?x29 (bvsub ?x29 (_ bv4 32))))))
 (let (($x345 (and (and (and (and (and $x204 $x364) $x377) $x843) $x676) $x268)))
 (let (($x716 (= true $x345)))
 (let (($x496 (not $x116)))
 (let (($x482 (=> $x496 $x716)))
 (let (($x168 (= $x482 true)))
 (let (($x90 (= $x168 true)))
 (let (($x187 (= $x90 true)))
 (let (($x225 (= $x496 true)))
 (let (($x550 (= $x225 true)))
 (let (($x443 (= $x550 true)))
 (let (($x17 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x497 (= $x17 true)))
 (let (($x39 (= $x497 true)))
 (let ((?x809 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x804 (= (_ bv0 32) ?x809)))
 (let ((?x488 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x446 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x488)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x821 (and $x219 $x446)))
 (let (($x365 (and $x821 $x804)))
 (let (($x715 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x539 (and $x715 $x365)))
 (let (($x155 (= $x539 true)))
 (let (($x468 (= $x155 true)))
 (let (($x510 (= $x468 true)))
 (let (($x429 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x68 (=> $x429 false)))
 (let ((?x172 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x764 (bvuge ?x172 (_ bv1 32))))
 (let (($x693 (= $x429 $x764)))
 (let (($x512 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x398 (=> $x512 $x119)))
 (let (($x210 (= ?x172 (_ bv0 32))))
 (let (($x328 (= $x512 $x210)))
 (let (($x43 (and $x328 $x398)))
 (let (($x848 (and $x43 $x693)))
 (let (($x34 (and $x848 $x68)))
 (let (($x771 (= $x34 true)))
 (let (($x236 (= $x771 true)))
 (let (($x306 (= $x236 true)))
 (let (($x581 (= $x494 $x764)))
 (let (($x518 (= $x333 $x210)))
 (let (($x259 (and $x518 $x24)))
 (let (($x675 (and $x259 $x581)))
 (let (($x606 (and $x675 $x808)))
 (let (($x637 (= $x606 true)))
 (let (($x447 (= $x637 true)))
 (let (($x292 (= $x447 true)))
 (let (($x104 (and $x292 $x306)))
 (let (($x122 (and $x104 $x510)))
 (let (($x170 (and $x122 $x39)))
 (let (($x340 (and $x170 $x443)))
 (let (($x80 (and $x340 $x187)))
 (let (($x97 (and $x80 $x803)))
 (let (($x242 (and $x97 $x192)))
 (let (($x523 (and $x242 $x363)))
 (let (($x729 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x500 (and $x729 $x523)))
 (let (($x196 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x29 (_ bv3 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x100 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x196)))))))
 (let (($x828 (=> (and $x496 (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x124 $x196)))))))
 (let (($x788 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x846 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x475)))
 (let (($x305 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x448 (=> $x305 (or false (or false (and true (or $x846 $x788)))))))
 (let (($x642 (=> (and $x496 $x305) (or false (or false (and true (or $x846 $x788)))))))
 (let (($x99 (and $x642 $x828)))
 (let (($x162 (and $x99 $x500)))
 (let (($x158 (=> $x162 $x489)))
 (not $x158))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0 () (_ BitVec 11))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x207 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x475 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x575 (concat (select input.dst.llvm-mem ?x475) (concat ?x262 (concat ?x9 ?x207)))))
 (let ((?x76 ((_ extract 10 0) ?x575)))
 (let ((?x546 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0 ?x76)))
 (let (($x615 (= (_ bv0 11) ?x546)))
 (let (($x489 (= $x615 true)))
 (let (($x47 (= (_ bv0 11) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_10_0)))
 (let (($x60 (= $x47 true)))
 (let (($x363 (= $x60 true)))
 (let ((?x201 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x413 (= (_ bv0 3) ?x201)))
 (let (($x403 (= $x413 true)))
 (let (($x192 (= $x403 true)))
 (let (($x494 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x808 (=> $x494 false)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x286 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x583 (= $x494 (bvuge ?x286 (_ bv1 32)))))
 (let (($x119 (= false false)))
 (let (($x333 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x24 (=> $x333 $x119)))
 (let (($x69 (= $x333 (= ?x286 (_ bv0 32)))))
 (let (($x464 (and $x69 $x24)))
 (let (($x544 (and $x464 $x583)))
 (let (($x868 (and $x544 $x808)))
 (let (($x577 (= $x868 true)))
 (let (($x811 (= $x577 true)))
 (let (($x803 (= $x811 true)))
 (let (($x268 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x349 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x213 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x349) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x349))))
 (let (($x204 (and true $x213)))
 (let (($x676 (and $x213 $x204)))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x854 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem ?x29))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv2 32))) ?x854))))
 (let (($x273 (= (bvand ?x140 (_ bv4294967288 32)) ?x140)))
 (let (($x377 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x843 (and $x377 $x273)))
 (let (($x364 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv4 32))) (bvult ?x29 (bvsub ?x29 (_ bv4 32))))))
 (let (($x345 (and (and (and (and (and $x204 $x364) $x377) $x843) $x676) $x268)))
 (let (($x716 (= true $x345)))
 (let (($x496 (not $x116)))
 (let (($x482 (=> $x496 $x716)))
 (let (($x168 (= $x482 true)))
 (let (($x90 (= $x168 true)))
 (let (($x187 (= $x90 true)))
 (let (($x225 (= $x496 true)))
 (let (($x550 (= $x225 true)))
 (let (($x443 (= $x550 true)))
 (let (($x17 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x497 (= $x17 true)))
 (let (($x39 (= $x497 true)))
 (let ((?x809 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x804 (= (_ bv0 32) ?x809)))
 (let ((?x488 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x446 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x488)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x821 (and $x219 $x446)))
 (let (($x365 (and $x821 $x804)))
 (let (($x715 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x539 (and $x715 $x365)))
 (let (($x155 (= $x539 true)))
 (let (($x468 (= $x155 true)))
 (let (($x510 (= $x468 true)))
 (let (($x429 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x68 (=> $x429 false)))
 (let ((?x172 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x764 (bvuge ?x172 (_ bv1 32))))
 (let (($x693 (= $x429 $x764)))
 (let (($x512 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x398 (=> $x512 $x119)))
 (let (($x210 (= ?x172 (_ bv0 32))))
 (let (($x328 (= $x512 $x210)))
 (let (($x43 (and $x328 $x398)))
 (let (($x848 (and $x43 $x693)))
 (let (($x34 (and $x848 $x68)))
 (let (($x771 (= $x34 true)))
 (let (($x236 (= $x771 true)))
 (let (($x306 (= $x236 true)))
 (let (($x581 (= $x494 $x764)))
 (let (($x518 (= $x333 $x210)))
 (let (($x259 (and $x518 $x24)))
 (let (($x675 (and $x259 $x581)))
 (let (($x606 (and $x675 $x808)))
 (let (($x637 (= $x606 true)))
 (let (($x447 (= $x637 true)))
 (let (($x292 (= $x447 true)))
 (let (($x104 (and $x292 $x306)))
 (let (($x122 (and $x104 $x510)))
 (let (($x170 (and $x122 $x39)))
 (let (($x340 (and $x170 $x443)))
 (let (($x80 (and $x340 $x187)))
 (let (($x97 (and $x80 $x803)))
 (let (($x242 (and $x97 $x192)))
 (let (($x523 (and $x242 $x363)))
 (let (($x729 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x500 (and $x729 $x523)))
 (let (($x196 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x29 (_ bv3 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x100 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x196)))))))
 (let (($x828 (=> (and $x496 (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x124 $x196)))))))
 (let (($x788 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x846 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x475)))
 (let (($x305 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x448 (=> $x305 (or false (or false (and true (or $x846 $x788)))))))
 (let (($x642 (=> (and $x496 $x305) (or false (or false (and true (or $x846 $x788)))))))
 (let (($x99 (and $x642 $x828)))
 (let (($x162 (and $x99 $x500)))
 (let (($x158 (=> $x162 $x489)))
 (not $x158))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 138
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0 () (_ BitVec 10))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x435 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x840 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x614 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x806 (concat (select input.dst.llvm-mem ?x614) (concat ?x193 (concat ?x840 ?x435)))))
 (let ((?x291 ((_ extract 9 0) ?x806)))
 (let ((?x244 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0 ?x291)))
 (let (($x657 (= (_ bv0 10) ?x244)))
 (let (($x111 (= $x657 true)))
 (let (($x391 (= (_ bv0 10) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0)))
 (let (($x319 (= $x391 true)))
 (let (($x302 (= $x319 true)))
 (let ((?x215 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x59 (= (_ bv0 3) ?x215)))
 (let (($x610 (= $x59 true)))
 (let (($x782 (= $x610 true)))
 (let (($x88 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x140 (=> $x88 true)))
 (let (($x480 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x681 (ite $x480 (_ bv0 32) (_ bv1 32))))
 (let (($x530 (= $x88 (bvuge ?x681 (_ bv1 32)))))
 (let (($x171 (= false false)))
 (let (($x659 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x377 (=> $x659 $x171)))
 (let (($x303 (= $x659 (= ?x681 (_ bv0 32)))))
 (let (($x763 (and $x303 $x377)))
 (let (($x548 (and $x763 $x530)))
 (let (($x507 (and $x548 $x140)))
 (let (($x662 (= $x507 true)))
 (let (($x341 (= $x662 true)))
 (let (($x284 (= $x341 true)))
 (let (($x623 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x207 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x76 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x207) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x207))))
 (let (($x546 (and true $x76)))
 (let (($x832 (and $x76 $x546)))
 (let ((?x305 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x867 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem ?x305))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv2 32))) ?x867))))
 (let (($x226 (= (bvand ?x197 (_ bv4294967288 32)) ?x197)))
 (let (($x396 (= (bvand ?x305 (_ bv4294967292 32)) ?x305)))
 (let (($x348 (and $x396 $x226)))
 (let (($x529 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x305 (bvsub ?x305 (_ bv4 32))) (bvult ?x305 (bvsub ?x305 (_ bv4 32))))))
 (let (($x460 (and (and (and (and (and $x546 $x529) $x396) $x348) $x832) $x623)))
 (let (($x312 (= true $x460)))
 (let (($x116 (not $x480)))
 (let (($x425 (=> $x116 $x312)))
 (let (($x461 (= $x425 true)))
 (let (($x23 (= $x461 true)))
 (let (($x394 (= $x23 true)))
 (let (($x427 (= $x116 true)))
 (let (($x262 (= $x427 true)))
 (let (($x554 (= $x262 true)))
 (let (($x523 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x500 (= $x523 true)))
 (let (($x162 (= $x500 true)))
 (let ((?x413 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x403 (= (_ bv0 32) ?x413)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x803 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x803 $x261)))
 (let (($x192 (and $x201 $x403)))
 (let (($x811 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x811 $x192)))
 (let (($x346 (= $x242 true)))
 (let (($x682 (= $x346 true)))
 (let (($x47 (= $x682 true)))
 (let (($x80 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x69 (=> $x80 true)))
 (let ((?x364 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x847 (bvuge ?x364 (_ bv1 32))))
 (let (($x286 (= $x80 $x847)))
 (let (($x345 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x482 (=> $x345 $x171)))
 (let (($x409 (= ?x364 (_ bv0 32))))
 (let (($x716 (= $x345 $x409)))
 (let (($x168 (and $x716 $x482)))
 (let (($x457 (and $x168 $x286)))
 (let (($x464 (and $x457 $x69)))
 (let (($x612 (= $x464 true)))
 (let (($x583 (= $x612 true)))
 (let (($x544 (= $x583 true)))
 (let (($x854 (= $x88 $x847)))
 (let (($x299 (= $x659 $x409)))
 (let (($x700 (and $x299 $x377)))
 (let (($x393 (and $x700 $x854)))
 (let (($x465 (and $x393 $x140)))
 (let (($x252 (= $x465 true)))
 (let (($x273 (= $x252 true)))
 (let (($x843 (= $x273 true)))
 (let (($x868 (and $x843 $x544)))
 (let (($x60 (and $x868 $x47)))
 (let (($x378 (and $x60 $x162)))
 (let (($x9 (and $x378 $x554)))
 (let (($x344 (and $x9 $x394)))
 (let (($x347 (and $x344 $x284)))
 (let (($x209 (and $x347 $x782)))
 (let (($x709 (and $x209 $x302)))
 (let (($x333 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x154 (and $x333 $x709)))
 (let (($x248 (bvugt ?x305 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x305 (_ bv3 32))))
 (let (($x313 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x729 (=> (bvule ?x305 (bvsub (bvadd ?x305 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x313 $x248)))))))
 (let (($x41 (=> (and $x116 (bvule ?x305 (bvsub (bvadd ?x305 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x313 $x248)))))))
 (let (($x535 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x849 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x614)))
 (let (($x817 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x555 (=> $x817 (or false (or false (and true (or $x849 $x535)))))))
 (let (($x382 (=> (and $x116 $x817) (or false (or false (and true (or $x849 $x535)))))))
 (let (($x37 (and $x382 $x41)))
 (let (($x281 (and $x37 $x154)))
 (let (($x32 (=> $x281 $x111)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0 () (_ BitVec 10))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x435 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x840 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x614 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x806 (concat (select input.dst.llvm-mem ?x614) (concat ?x193 (concat ?x840 ?x435)))))
 (let ((?x291 ((_ extract 9 0) ?x806)))
 (let ((?x244 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0 ?x291)))
 (let (($x657 (= (_ bv0 10) ?x244)))
 (let (($x111 (= $x657 true)))
 (let (($x391 (= (_ bv0 10) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0)))
 (let (($x319 (= $x391 true)))
 (let (($x302 (= $x319 true)))
 (let ((?x215 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x59 (= (_ bv0 3) ?x215)))
 (let (($x610 (= $x59 true)))
 (let (($x782 (= $x610 true)))
 (let (($x88 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x140 (=> $x88 true)))
 (let (($x480 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x681 (ite $x480 (_ bv0 32) (_ bv1 32))))
 (let (($x530 (= $x88 (bvuge ?x681 (_ bv1 32)))))
 (let (($x171 (= false false)))
 (let (($x659 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x377 (=> $x659 $x171)))
 (let (($x303 (= $x659 (= ?x681 (_ bv0 32)))))
 (let (($x763 (and $x303 $x377)))
 (let (($x548 (and $x763 $x530)))
 (let (($x507 (and $x548 $x140)))
 (let (($x662 (= $x507 true)))
 (let (($x341 (= $x662 true)))
 (let (($x284 (= $x341 true)))
 (let (($x623 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x207 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x76 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x207) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x207))))
 (let (($x546 (and true $x76)))
 (let (($x832 (and $x76 $x546)))
 (let ((?x305 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x867 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem ?x305))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv2 32))) ?x867))))
 (let (($x226 (= (bvand ?x197 (_ bv4294967288 32)) ?x197)))
 (let (($x396 (= (bvand ?x305 (_ bv4294967292 32)) ?x305)))
 (let (($x348 (and $x396 $x226)))
 (let (($x529 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x305 (bvsub ?x305 (_ bv4 32))) (bvult ?x305 (bvsub ?x305 (_ bv4 32))))))
 (let (($x460 (and (and (and (and (and $x546 $x529) $x396) $x348) $x832) $x623)))
 (let (($x312 (= true $x460)))
 (let (($x116 (not $x480)))
 (let (($x425 (=> $x116 $x312)))
 (let (($x461 (= $x425 true)))
 (let (($x23 (= $x461 true)))
 (let (($x394 (= $x23 true)))
 (let (($x427 (= $x116 true)))
 (let (($x262 (= $x427 true)))
 (let (($x554 (= $x262 true)))
 (let (($x523 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x500 (= $x523 true)))
 (let (($x162 (= $x500 true)))
 (let ((?x413 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x403 (= (_ bv0 32) ?x413)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x803 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x803 $x261)))
 (let (($x192 (and $x201 $x403)))
 (let (($x811 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x811 $x192)))
 (let (($x346 (= $x242 true)))
 (let (($x682 (= $x346 true)))
 (let (($x47 (= $x682 true)))
 (let (($x80 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x69 (=> $x80 true)))
 (let ((?x364 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x847 (bvuge ?x364 (_ bv1 32))))
 (let (($x286 (= $x80 $x847)))
 (let (($x345 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x482 (=> $x345 $x171)))
 (let (($x409 (= ?x364 (_ bv0 32))))
 (let (($x716 (= $x345 $x409)))
 (let (($x168 (and $x716 $x482)))
 (let (($x457 (and $x168 $x286)))
 (let (($x464 (and $x457 $x69)))
 (let (($x612 (= $x464 true)))
 (let (($x583 (= $x612 true)))
 (let (($x544 (= $x583 true)))
 (let (($x854 (= $x88 $x847)))
 (let (($x299 (= $x659 $x409)))
 (let (($x700 (and $x299 $x377)))
 (let (($x393 (and $x700 $x854)))
 (let (($x465 (and $x393 $x140)))
 (let (($x252 (= $x465 true)))
 (let (($x273 (= $x252 true)))
 (let (($x843 (= $x273 true)))
 (let (($x868 (and $x843 $x544)))
 (let (($x60 (and $x868 $x47)))
 (let (($x378 (and $x60 $x162)))
 (let (($x9 (and $x378 $x554)))
 (let (($x344 (and $x9 $x394)))
 (let (($x347 (and $x344 $x284)))
 (let (($x209 (and $x347 $x782)))
 (let (($x709 (and $x209 $x302)))
 (let (($x333 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x154 (and $x333 $x709)))
 (let (($x248 (bvugt ?x305 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x305 (_ bv3 32))))
 (let (($x313 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x729 (=> (bvule ?x305 (bvsub (bvadd ?x305 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x313 $x248)))))))
 (let (($x41 (=> (and $x116 (bvule ?x305 (bvsub (bvadd ?x305 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x313 $x248)))))))
 (let (($x535 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x849 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x614)))
 (let (($x817 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x555 (=> $x817 (or false (or false (and true (or $x849 $x535)))))))
 (let (($x382 (=> (and $x116 $x817) (or false (or false (and true (or $x849 $x535)))))))
 (let (($x37 (and $x382 $x41)))
 (let (($x281 (and $x37 $x154)))
 (let (($x32 (=> $x281 $x111)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0 #b0000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_15)
(function @fun_15
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_15 #b10000000000000000000000000000001) #b00000010)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0 () (_ BitVec 10)
    #b0000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv176624 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv176624 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0 () (_ BitVec 10) (_ bv0 10))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv319240 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv319240 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv319243 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 139
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0 () (_ BitVec 10))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x432 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x638 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x853 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x311 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x822 (concat (select input.dst.llvm-mem ?x311) (concat ?x853 (concat ?x638 ?x432)))))
 (let ((?x844 ((_ extract 9 0) ?x822)))
 (let ((?x483 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0 ?x844)))
 (let (($x190 (= (_ bv0 10) ?x483)))
 (let (($x513 (= $x190 true)))
 (let (($x169 (= (_ bv0 10) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0)))
 (let (($x318 (= $x169 true)))
 (let (($x120 (= $x318 true)))
 (let ((?x723 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x390 (= (_ bv0 3) ?x723)))
 (let (($x205 (= $x390 true)))
 (let (($x538 (= $x205 true)))
 (let (($x135 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x197 (=> $x135 false)))
 (let (($x480 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (ite $x480 (_ bv0 32) (_ bv1 32))))
 (let (($x296 (= $x135 (bvuge ?x78 (_ bv1 32)))))
 (let (($x580 (= false false)))
 (let (($x158 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x396 (=> $x158 $x580)))
 (let (($x551 (= $x158 (= ?x78 (_ bv0 32)))))
 (let (($x73 (and $x551 $x396)))
 (let (($x785 (and $x73 $x296)))
 (let (($x338 (and $x785 $x197)))
 (let (($x334 (= $x338 true)))
 (let (($x707 (= $x334 true)))
 (let (($x247 (= $x707 true)))
 (let (($x447 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x435 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x291 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435))))
 (let (($x244 (and true $x291)))
 (let (($x512 (and $x291 $x244)))
 (let ((?x817 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd ?x817 (_ bv1 32))) (select input.dst.llvm-mem ?x817))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x817 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x817 (_ bv2 32))) ?x494))))
 (let (($x429 (= (bvand ?x210 (_ bv4294967288 32)) ?x210)))
 (let (($x283 (= (bvand ?x817 (_ bv4294967292 32)) ?x817)))
 (let (($x666 (and $x283 $x429)))
 (let (($x592 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x817 (bvsub ?x817 (_ bv4 32))) (bvult ?x817 (bvsub ?x817 (_ bv4 32))))))
 (let (($x292 (and (and (and (and (and $x244 $x592) $x283) $x666) $x512) $x447)))
 (let (($x328 (= true $x292)))
 (let (($x116 (not $x480)))
 (let (($x104 (=> $x116 $x328)))
 (let (($x216 (= $x104 true)))
 (let (($x771 (= $x216 true)))
 (let (($x236 (= $x771 true)))
 (let (($x317 (= $x116 true)))
 (let (($x193 (= $x317 true)))
 (let (($x404 (= $x193 true)))
 (let (($x709 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x154 (= $x709 true)))
 (let (($x281 (= $x154 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x610 (= (_ bv0 32) ?x59)))
 (let ((?x347 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x347)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x284 $x260)))
 (let (($x782 (and $x215 $x610)))
 (let (($x341 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x341 $x782)))
 (let (($x686 (= $x209 true)))
 (let (($x588 (= $x686 true)))
 (let (($x391 (= $x588 true)))
 (let (($x344 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x303 (=> $x344 false)))
 (let ((?x529 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x529 (_ bv1 32))))
 (let (($x681 (= $x344 $x176)))
 (let (($x460 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x425 (=> $x460 $x580)))
 (let (($x57 (= ?x529 (_ bv0 32))))
 (let (($x312 (= $x460 $x57)))
 (let (($x461 (and $x312 $x425)))
 (let (($x189 (and $x461 $x681)))
 (let (($x763 (and $x189 $x303)))
 (let (($x573 (= $x763 true)))
 (let (($x530 (= $x573 true)))
 (let (($x548 (= $x530 true)))
 (let (($x867 (= $x135 $x176)))
 (let (($x315 (= $x158 $x57)))
 (let (($x95 (and $x315 $x396)))
 (let (($x444 (and $x95 $x867)))
 (let (($x783 (and $x444 $x197)))
 (let (($x343 (= $x783 true)))
 (let (($x226 (= $x343 true)))
 (let (($x348 (= $x226 true)))
 (let (($x507 (and $x348 $x548)))
 (let (($x319 (and $x507 $x391)))
 (let (($x278 (and $x319 $x281)))
 (let (($x840 (and $x278 $x404)))
 (let (($x848 (and $x840 $x236)))
 (let (($x397 (and $x848 $x247)))
 (let (($x458 (and $x397 $x538)))
 (let (($x838 (and $x458 $x120)))
 (let (($x659 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x567 (and $x659 $x838)))
 (let (($x828 (bvugt ?x817 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x817 (_ bv3 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x333 (=> (bvule ?x817 (bvsub (bvadd ?x817 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x828)))))))
 (let (($x522 (=> (and $x116 (bvule ?x817 (bvsub (bvadd ?x817 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x100 $x828)))))))
 (let (($x642 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x448 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x311)))
 (let (($x124 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x196 (=> $x124 (or false (or false (and true (or $x448 $x642)))))))
 (let (($x475 (=> (and $x116 $x124) (or false (or false (and true (or $x448 $x642)))))))
 (let (($x186 (and $x475 $x522)))
 (let (($x191 (and $x186 $x567)))
 (let (($x72 (=> $x191 $x513)))
 (not $x72))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0 () (_ BitVec 10))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x432 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x638 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x853 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x311 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x822 (concat (select input.dst.llvm-mem ?x311) (concat ?x853 (concat ?x638 ?x432)))))
 (let ((?x844 ((_ extract 9 0) ?x822)))
 (let ((?x483 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0 ?x844)))
 (let (($x190 (= (_ bv0 10) ?x483)))
 (let (($x513 (= $x190 true)))
 (let (($x169 (= (_ bv0 10) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_9_0)))
 (let (($x318 (= $x169 true)))
 (let (($x120 (= $x318 true)))
 (let ((?x723 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x390 (= (_ bv0 3) ?x723)))
 (let (($x205 (= $x390 true)))
 (let (($x538 (= $x205 true)))
 (let (($x135 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x197 (=> $x135 false)))
 (let (($x480 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (ite $x480 (_ bv0 32) (_ bv1 32))))
 (let (($x296 (= $x135 (bvuge ?x78 (_ bv1 32)))))
 (let (($x580 (= false false)))
 (let (($x158 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x396 (=> $x158 $x580)))
 (let (($x551 (= $x158 (= ?x78 (_ bv0 32)))))
 (let (($x73 (and $x551 $x396)))
 (let (($x785 (and $x73 $x296)))
 (let (($x338 (and $x785 $x197)))
 (let (($x334 (= $x338 true)))
 (let (($x707 (= $x334 true)))
 (let (($x247 (= $x707 true)))
 (let (($x447 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x435 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x291 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x435))))
 (let (($x244 (and true $x291)))
 (let (($x512 (and $x291 $x244)))
 (let ((?x817 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd ?x817 (_ bv1 32))) (select input.dst.llvm-mem ?x817))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x817 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x817 (_ bv2 32))) ?x494))))
 (let (($x429 (= (bvand ?x210 (_ bv4294967288 32)) ?x210)))
 (let (($x283 (= (bvand ?x817 (_ bv4294967292 32)) ?x817)))
 (let (($x666 (and $x283 $x429)))
 (let (($x592 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x817 (bvsub ?x817 (_ bv4 32))) (bvult ?x817 (bvsub ?x817 (_ bv4 32))))))
 (let (($x292 (and (and (and (and (and $x244 $x592) $x283) $x666) $x512) $x447)))
 (let (($x328 (= true $x292)))
 (let (($x116 (not $x480)))
 (let (($x104 (=> $x116 $x328)))
 (let (($x216 (= $x104 true)))
 (let (($x771 (= $x216 true)))
 (let (($x236 (= $x771 true)))
 (let (($x317 (= $x116 true)))
 (let (($x193 (= $x317 true)))
 (let (($x404 (= $x193 true)))
 (let (($x709 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x154 (= $x709 true)))
 (let (($x281 (= $x154 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x610 (= (_ bv0 32) ?x59)))
 (let ((?x347 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x347)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x284 $x260)))
 (let (($x782 (and $x215 $x610)))
 (let (($x341 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x341 $x782)))
 (let (($x686 (= $x209 true)))
 (let (($x588 (= $x686 true)))
 (let (($x391 (= $x588 true)))
 (let (($x344 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x303 (=> $x344 false)))
 (let ((?x529 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x529 (_ bv1 32))))
 (let (($x681 (= $x344 $x176)))
 (let (($x460 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x425 (=> $x460 $x580)))
 (let (($x57 (= ?x529 (_ bv0 32))))
 (let (($x312 (= $x460 $x57)))
 (let (($x461 (and $x312 $x425)))
 (let (($x189 (and $x461 $x681)))
 (let (($x763 (and $x189 $x303)))
 (let (($x573 (= $x763 true)))
 (let (($x530 (= $x573 true)))
 (let (($x548 (= $x530 true)))
 (let (($x867 (= $x135 $x176)))
 (let (($x315 (= $x158 $x57)))
 (let (($x95 (and $x315 $x396)))
 (let (($x444 (and $x95 $x867)))
 (let (($x783 (and $x444 $x197)))
 (let (($x343 (= $x783 true)))
 (let (($x226 (= $x343 true)))
 (let (($x348 (= $x226 true)))
 (let (($x507 (and $x348 $x548)))
 (let (($x319 (and $x507 $x391)))
 (let (($x278 (and $x319 $x281)))
 (let (($x840 (and $x278 $x404)))
 (let (($x848 (and $x840 $x236)))
 (let (($x397 (and $x848 $x247)))
 (let (($x458 (and $x397 $x538)))
 (let (($x838 (and $x458 $x120)))
 (let (($x659 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x567 (and $x659 $x838)))
 (let (($x828 (bvugt ?x817 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x817 (_ bv3 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x333 (=> (bvule ?x817 (bvsub (bvadd ?x817 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x828)))))))
 (let (($x522 (=> (and $x116 (bvule ?x817 (bvsub (bvadd ?x817 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x100 $x828)))))))
 (let (($x642 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x448 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x311)))
 (let (($x124 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x196 (=> $x124 (or false (or false (and true (or $x448 $x642)))))))
 (let (($x475 (=> (and $x116 $x124) (or false (or false (and true (or $x448 $x642)))))))
 (let (($x186 (and $x475 $x522)))
 (let (($x191 (and $x186 $x567)))
 (let (($x72 (=> $x191 $x513)))
 (not $x72))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 140
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0 () (_ BitVec 9))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x29 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x821 (concat (select input.dst.llvm-mem ?x29) (concat ?x380 (concat ?x219 ?x17)))))
 (let ((?x365 ((_ extract 8 0) ?x821)))
 (let ((?x468 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0 ?x365)))
 (let (($x213 (= (_ bv0 9) ?x468)))
 (let (($x204 (= $x213 true)))
 (let (($x340 (= (_ bv0 9) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0)))
 (let (($x122 (= $x340 true)))
 (let (($x809 (= $x122 true)))
 (let ((?x539 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x155 (= (_ bv0 3) ?x539)))
 (let (($x436 (= $x155 true)))
 (let (($x510 (= $x436 true)))
 (let (($x24 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x210 (=> $x24 true)))
 (let (($x801 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x363 (ite $x801 (_ bv0 32) (_ bv1 32))))
 (let (($x606 (= $x24 (bvuge ?x363 (_ bv1 32)))))
 (let (($x129 (= false false)))
 (let (($x32 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x283 (=> $x32 $x129)))
 (let (($x410 (= $x32 (= ?x363 (_ bv0 32)))))
 (let (($x575 (and $x410 $x283)))
 (let (($x297 (and $x575 $x606)))
 (let (($x541 (and $x297 $x210)))
 (let (($x720 (= $x541 true)))
 (let (($x68 (= $x720 true)))
 (let (($x693 (= $x68 true)))
 (let (($x273 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x432 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x844 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x432) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x432))))
 (let (($x483 (and true $x844)))
 (let (($x345 (and $x844 $x483)))
 (let ((?x124 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x88))))
 (let (($x80 (= (bvand ?x409 (_ bv4294967288 32)) ?x409)))
 (let (($x417 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x268 (and $x417 $x80)))
 (let (($x212 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv4 32))) (bvult ?x124 (bvsub ?x124 (_ bv4 32))))))
 (let (($x843 (and (and (and (and (and $x483 $x212) $x417) $x268) $x345) $x273)))
 (let (($x716 (= true $x843)))
 (let (($x480 (not $x801)))
 (let (($x868 (=> $x480 $x716)))
 (let (($x577 (= $x868 true)))
 (let (($x612 (= $x577 true)))
 (let (($x583 (= $x612 true)))
 (let (($x234 (= $x480 true)))
 (let (($x853 (= $x234 true)))
 (let (($x369 (= $x853 true)))
 (let (($x838 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x567 (= $x838 true)))
 (let (($x191 (= $x567 true)))
 (let ((?x390 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x390)))
 (let ((?x397 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x451 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x397)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x723 (and $x247 $x451)))
 (let (($x538 (and $x723 $x205)))
 (let (($x707 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x458 (and $x707 $x538)))
 (let (($x520 (= $x458 true)))
 (let (($x740 (= $x520 true)))
 (let (($x169 (= $x740 true)))
 (let (($x848 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x551 (=> $x848 true)))
 (let ((?x592 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x398 (bvuge ?x592 (_ bv1 32))))
 (let (($x78 (= $x848 $x398)))
 (let (($x292 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x104 (=> $x292 $x129)))
 (let (($x581 (= ?x592 (_ bv0 32))))
 (let (($x328 (= $x292 $x581)))
 (let (($x216 (and $x328 $x104)))
 (let (($x415 (and $x216 $x78)))
 (let (($x73 (and $x415 $x551)))
 (let (($x187 (= $x73 true)))
 (let (($x296 (= $x187 true)))
 (let (($x785 (= $x296 true)))
 (let (($x494 (= $x24 $x398)))
 (let (($x676 (= $x32 $x581)))
 (let (($x675 (and $x676 $x283)))
 (let (($x859 (and $x675 $x494)))
 (let (($x392 (and $x859 $x210)))
 (let (($x43 (= $x392 true)))
 (let (($x429 (= $x43 true)))
 (let (($x666 (= $x429 true)))
 (let (($x338 (and $x666 $x785)))
 (let (($x318 (and $x338 $x169)))
 (let (($x563 (and $x318 $x191)))
 (let (($x638 (and $x563 $x369)))
 (let (($x457 (and $x638 $x583)))
 (let (($x34 (and $x457 $x693)))
 (let (($x497 (and $x34 $x510)))
 (let (($x349 (and $x497 $x809)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x550 (and $x158 $x349)))
 (let (($x41 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x124 (_ bv3 32))))
 (let (($x729 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x659 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x729 $x41)))))))
 (let (($x352 (=> (and $x480 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x729 $x41)))))))
 (let (($x382 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x555 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x313 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x248 (=> $x313 (or false (or false (and true (or $x555 $x382)))))))
 (let (($x614 (=> (and $x480 $x313) (or false (or false (and true (or $x555 $x382)))))))
 (let (($x7 (and $x614 $x352)))
 (let (($x446 (and $x7 $x550)))
 (let (($x56 (=> $x446 $x204)))
 (not $x56))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0 () (_ BitVec 9))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x29 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x821 (concat (select input.dst.llvm-mem ?x29) (concat ?x380 (concat ?x219 ?x17)))))
 (let ((?x365 ((_ extract 8 0) ?x821)))
 (let ((?x468 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0 ?x365)))
 (let (($x213 (= (_ bv0 9) ?x468)))
 (let (($x204 (= $x213 true)))
 (let (($x340 (= (_ bv0 9) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0)))
 (let (($x122 (= $x340 true)))
 (let (($x809 (= $x122 true)))
 (let ((?x539 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x155 (= (_ bv0 3) ?x539)))
 (let (($x436 (= $x155 true)))
 (let (($x510 (= $x436 true)))
 (let (($x24 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x210 (=> $x24 true)))
 (let (($x801 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x363 (ite $x801 (_ bv0 32) (_ bv1 32))))
 (let (($x606 (= $x24 (bvuge ?x363 (_ bv1 32)))))
 (let (($x129 (= false false)))
 (let (($x32 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x283 (=> $x32 $x129)))
 (let (($x410 (= $x32 (= ?x363 (_ bv0 32)))))
 (let (($x575 (and $x410 $x283)))
 (let (($x297 (and $x575 $x606)))
 (let (($x541 (and $x297 $x210)))
 (let (($x720 (= $x541 true)))
 (let (($x68 (= $x720 true)))
 (let (($x693 (= $x68 true)))
 (let (($x273 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x432 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x844 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x432) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x432))))
 (let (($x483 (and true $x844)))
 (let (($x345 (and $x844 $x483)))
 (let ((?x124 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x88))))
 (let (($x80 (= (bvand ?x409 (_ bv4294967288 32)) ?x409)))
 (let (($x417 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x268 (and $x417 $x80)))
 (let (($x212 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv4 32))) (bvult ?x124 (bvsub ?x124 (_ bv4 32))))))
 (let (($x843 (and (and (and (and (and $x483 $x212) $x417) $x268) $x345) $x273)))
 (let (($x716 (= true $x843)))
 (let (($x480 (not $x801)))
 (let (($x868 (=> $x480 $x716)))
 (let (($x577 (= $x868 true)))
 (let (($x612 (= $x577 true)))
 (let (($x583 (= $x612 true)))
 (let (($x234 (= $x480 true)))
 (let (($x853 (= $x234 true)))
 (let (($x369 (= $x853 true)))
 (let (($x838 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x567 (= $x838 true)))
 (let (($x191 (= $x567 true)))
 (let ((?x390 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x390)))
 (let ((?x397 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x451 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x397)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x723 (and $x247 $x451)))
 (let (($x538 (and $x723 $x205)))
 (let (($x707 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x458 (and $x707 $x538)))
 (let (($x520 (= $x458 true)))
 (let (($x740 (= $x520 true)))
 (let (($x169 (= $x740 true)))
 (let (($x848 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x551 (=> $x848 true)))
 (let ((?x592 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x398 (bvuge ?x592 (_ bv1 32))))
 (let (($x78 (= $x848 $x398)))
 (let (($x292 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x104 (=> $x292 $x129)))
 (let (($x581 (= ?x592 (_ bv0 32))))
 (let (($x328 (= $x292 $x581)))
 (let (($x216 (and $x328 $x104)))
 (let (($x415 (and $x216 $x78)))
 (let (($x73 (and $x415 $x551)))
 (let (($x187 (= $x73 true)))
 (let (($x296 (= $x187 true)))
 (let (($x785 (= $x296 true)))
 (let (($x494 (= $x24 $x398)))
 (let (($x676 (= $x32 $x581)))
 (let (($x675 (and $x676 $x283)))
 (let (($x859 (and $x675 $x494)))
 (let (($x392 (and $x859 $x210)))
 (let (($x43 (= $x392 true)))
 (let (($x429 (= $x43 true)))
 (let (($x666 (= $x429 true)))
 (let (($x338 (and $x666 $x785)))
 (let (($x318 (and $x338 $x169)))
 (let (($x563 (and $x318 $x191)))
 (let (($x638 (and $x563 $x369)))
 (let (($x457 (and $x638 $x583)))
 (let (($x34 (and $x457 $x693)))
 (let (($x497 (and $x34 $x510)))
 (let (($x349 (and $x497 $x809)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x550 (and $x158 $x349)))
 (let (($x41 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x124 (_ bv3 32))))
 (let (($x729 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x659 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x729 $x41)))))))
 (let (($x352 (=> (and $x480 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x729 $x41)))))))
 (let (($x382 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x555 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x313 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x248 (=> $x313 (or false (or false (and true (or $x555 $x382)))))))
 (let (($x614 (=> (and $x480 $x313) (or false (or false (and true (or $x555 $x382)))))))
 (let (($x7 (and $x614 $x352)))
 (let (($x446 (and $x7 $x550)))
 (let (($x56 (=> $x446 $x204)))
 (not $x56))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0 #b000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_15)
(function @fun_15
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_15 #b10000000000000000000000000000001) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d9fd000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08824ff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x08824ff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0 () (_ BitVec 9)
    #b000000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d9fd003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d9fd000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv242160 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv242160 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0 () (_ BitVec 9) (_ bv0 9))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv305928 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv305928 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv305931 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 141
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0 () (_ BitVec 9))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x523 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x803 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x506 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x305 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x305) (concat ?x506 (concat ?x803 ?x523)))))
 (let ((?x192 ((_ extract 8 0) ?x201)))
 (let ((?x682 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0 ?x192)))
 (let (($x76 (= (_ bv0 9) ?x682)))
 (let (($x546 (= $x76 true)))
 (let (($x9 (= (_ bv0 9) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0)))
 (let (($x60 (= $x9 true)))
 (let (($x413 (= $x60 true)))
 (let ((?x242 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x346 (= (_ bv0 3) ?x242)))
 (let (($x653 (= $x346 true)))
 (let (($x47 (= $x653 true)))
 (let (($x377 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x409 (=> $x377 false)))
 (let (($x801 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x302 (ite $x801 (_ bv0 32) (_ bv1 32))))
 (let (($x465 (= $x377 (bvuge ?x302 (_ bv1 32)))))
 (let (($x518 (= false false)))
 (let (($x72 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x417 (=> $x72 $x518)))
 (let (($x637 (= $x72 (= ?x302 (_ bv0 32)))))
 (let (($x806 (and $x637 $x417)))
 (let (($x683 (and $x806 $x465)))
 (let (($x725 (and $x683 $x409)))
 (let (($x119 (= $x725 true)))
 (let (($x69 (= $x119 true)))
 (let (($x286 (= $x69 true)))
 (let (($x226 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x17 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x365 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x17) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x17))))
 (let (($x468 (and true $x365)))
 (let (($x460 (and $x365 $x468)))
 (let ((?x313 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem ?x313))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv2 32))) ?x135))))
 (let (($x344 (= (bvand ?x57 (_ bv4294967288 32)) ?x57)))
 (let (($x684 (= (bvand ?x313 (_ bv4294967292 32)) ?x313)))
 (let (($x623 (and $x684 $x344)))
 (let (($x764 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x313 (bvsub ?x313 (_ bv4 32))) (bvult ?x313 (bvsub ?x313 (_ bv4 32))))))
 (let (($x348 (and (and (and (and (and $x468 $x764) $x684) $x623) $x460) $x226)))
 (let (($x312 (= true $x348)))
 (let (($x480 (not $x801)))
 (let (($x507 (=> $x480 $x312)))
 (let (($x662 (= $x507 true)))
 (let (($x573 (= $x662 true)))
 (let (($x530 (= $x573 true)))
 (let (($x488 (= $x480 true)))
 (let (($x380 (= $x488 true)))
 (let (($x715 (= $x380 true)))
 (let (($x349 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x550 (= $x349 true)))
 (let (($x446 (= $x550 true)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x436 (= (_ bv0 32) ?x155)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x693 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x539 (and $x693 $x39)))
 (let (($x510 (and $x539 $x436)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x497 (and $x68 $x510)))
 (let (($x225 (= $x497 true)))
 (let (($x170 (= $x225 true)))
 (let (($x340 (= $x170 true)))
 (let (($x457 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x410 (=> $x457 false)))
 (let ((?x212 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x482 (bvuge ?x212 (_ bv1 32))))
 (let (($x363 (= $x457 $x482)))
 (let (($x843 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x868 (=> $x843 $x518)))
 (let (($x854 (= ?x212 (_ bv0 32))))
 (let (($x716 (= $x843 $x854)))
 (let (($x577 (and $x716 $x868)))
 (let (($x508 (and $x577 $x363)))
 (let (($x575 (and $x508 $x410)))
 (let (($x394 (= $x575 true)))
 (let (($x606 (= $x394 true)))
 (let (($x297 (= $x606 true)))
 (let (($x88 (= $x377 $x482)))
 (let (($x832 (= $x72 $x854)))
 (let (($x393 (and $x832 $x417)))
 (let (($x235 (and $x393 $x88)))
 (let (($x714 (and $x235 $x409)))
 (let (($x168 (= $x714 true)))
 (let (($x80 (= $x168 true)))
 (let (($x268 (= $x80 true)))
 (let (($x541 (and $x268 $x297)))
 (let (($x122 (and $x541 $x340)))
 (let (($x804 (and $x122 $x446)))
 (let (($x219 (and $x804 $x715)))
 (let (($x189 (and $x219 $x530)))
 (let (($x464 (and $x189 $x286)))
 (let (($x500 (and $x464 $x47)))
 (let (($x207 (and $x500 $x413)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x262 (and $x32 $x207)))
 (let (($x522 (bvugt ?x313 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x313 (_ bv3 32))))
 (let (($x333 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x158 (=> (bvule ?x313 (bvsub (bvadd ?x313 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x333 $x522)))))))
 (let (($x182 (=> (and $x480 (bvule ?x313 (bvsub (bvadd ?x313 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x333 $x522)))))))
 (let (($x475 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x305)))
 (let (($x100 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x828 (=> $x100 (or false (or false (and true (or $x196 $x475)))))))
 (let (($x311 (=> (and $x480 $x100) (or false (or false (and true (or $x196 $x475)))))))
 (let (($x99 (and $x311 $x182)))
 (let (($x261 (and $x99 $x262)))
 (let (($x489 (=> $x261 $x546)))
 (not $x489))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0 () (_ BitVec 9))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x523 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x803 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x506 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x305 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x305) (concat ?x506 (concat ?x803 ?x523)))))
 (let ((?x192 ((_ extract 8 0) ?x201)))
 (let ((?x682 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0 ?x192)))
 (let (($x76 (= (_ bv0 9) ?x682)))
 (let (($x546 (= $x76 true)))
 (let (($x9 (= (_ bv0 9) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_8_0)))
 (let (($x60 (= $x9 true)))
 (let (($x413 (= $x60 true)))
 (let ((?x242 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x346 (= (_ bv0 3) ?x242)))
 (let (($x653 (= $x346 true)))
 (let (($x47 (= $x653 true)))
 (let (($x377 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x409 (=> $x377 false)))
 (let (($x801 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x302 (ite $x801 (_ bv0 32) (_ bv1 32))))
 (let (($x465 (= $x377 (bvuge ?x302 (_ bv1 32)))))
 (let (($x518 (= false false)))
 (let (($x72 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x417 (=> $x72 $x518)))
 (let (($x637 (= $x72 (= ?x302 (_ bv0 32)))))
 (let (($x806 (and $x637 $x417)))
 (let (($x683 (and $x806 $x465)))
 (let (($x725 (and $x683 $x409)))
 (let (($x119 (= $x725 true)))
 (let (($x69 (= $x119 true)))
 (let (($x286 (= $x69 true)))
 (let (($x226 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x17 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x365 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x17) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x17))))
 (let (($x468 (and true $x365)))
 (let (($x460 (and $x365 $x468)))
 (let ((?x313 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem ?x313))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv2 32))) ?x135))))
 (let (($x344 (= (bvand ?x57 (_ bv4294967288 32)) ?x57)))
 (let (($x684 (= (bvand ?x313 (_ bv4294967292 32)) ?x313)))
 (let (($x623 (and $x684 $x344)))
 (let (($x764 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x313 (bvsub ?x313 (_ bv4 32))) (bvult ?x313 (bvsub ?x313 (_ bv4 32))))))
 (let (($x348 (and (and (and (and (and $x468 $x764) $x684) $x623) $x460) $x226)))
 (let (($x312 (= true $x348)))
 (let (($x480 (not $x801)))
 (let (($x507 (=> $x480 $x312)))
 (let (($x662 (= $x507 true)))
 (let (($x573 (= $x662 true)))
 (let (($x530 (= $x573 true)))
 (let (($x488 (= $x480 true)))
 (let (($x380 (= $x488 true)))
 (let (($x715 (= $x380 true)))
 (let (($x349 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x550 (= $x349 true)))
 (let (($x446 (= $x550 true)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x436 (= (_ bv0 32) ?x155)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x693 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x539 (and $x693 $x39)))
 (let (($x510 (and $x539 $x436)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x497 (and $x68 $x510)))
 (let (($x225 (= $x497 true)))
 (let (($x170 (= $x225 true)))
 (let (($x340 (= $x170 true)))
 (let (($x457 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x410 (=> $x457 false)))
 (let ((?x212 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x482 (bvuge ?x212 (_ bv1 32))))
 (let (($x363 (= $x457 $x482)))
 (let (($x843 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x868 (=> $x843 $x518)))
 (let (($x854 (= ?x212 (_ bv0 32))))
 (let (($x716 (= $x843 $x854)))
 (let (($x577 (and $x716 $x868)))
 (let (($x508 (and $x577 $x363)))
 (let (($x575 (and $x508 $x410)))
 (let (($x394 (= $x575 true)))
 (let (($x606 (= $x394 true)))
 (let (($x297 (= $x606 true)))
 (let (($x88 (= $x377 $x482)))
 (let (($x832 (= $x72 $x854)))
 (let (($x393 (and $x832 $x417)))
 (let (($x235 (and $x393 $x88)))
 (let (($x714 (and $x235 $x409)))
 (let (($x168 (= $x714 true)))
 (let (($x80 (= $x168 true)))
 (let (($x268 (= $x80 true)))
 (let (($x541 (and $x268 $x297)))
 (let (($x122 (and $x541 $x340)))
 (let (($x804 (and $x122 $x446)))
 (let (($x219 (and $x804 $x715)))
 (let (($x189 (and $x219 $x530)))
 (let (($x464 (and $x189 $x286)))
 (let (($x500 (and $x464 $x47)))
 (let (($x207 (and $x500 $x413)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x262 (and $x32 $x207)))
 (let (($x522 (bvugt ?x313 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x313 (_ bv3 32))))
 (let (($x333 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x158 (=> (bvule ?x313 (bvsub (bvadd ?x313 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x333 $x522)))))))
 (let (($x182 (=> (and $x480 (bvule ?x313 (bvsub (bvadd ?x313 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x333 $x522)))))))
 (let (($x475 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x305)))
 (let (($x100 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x828 (=> $x100 (or false (or false (and true (or $x196 $x475)))))))
 (let (($x311 (=> (and $x480 $x100) (or false (or false (and true (or $x196 $x475)))))))
 (let (($x99 (and $x311 $x182)))
 (let (($x261 (and $x99 $x262)))
 (let (($x489 (=> $x261 $x546)))
 (not $x489))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 142
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x709 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x260)))
 (let (($x341 (= (_ bv0 8) ?x709)))
 (let (($x284 (= $x341 true)))
 (let (($x278 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x840 (= $x278 true)))
 (let (($x319 (= $x840 true)))
 (let ((?x209 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x686 (= (_ bv0 3) ?x209)))
 (let (($x309 (= $x686 true)))
 (let (($x391 (= $x309 true)))
 (let (($x396 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x57 (=> $x396 true)))
 (let (($x801 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x120 (ite $x801 (_ bv0 32) (_ bv1 32))))
 (let (($x783 (= $x396 (bvuge ?x120 (_ bv1 32)))))
 (let (($x299 (= false false)))
 (let (($x56 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x684 (=> $x56 $x299)))
 (let (($x252 (= $x56 (= ?x120 (_ bv0 32)))))
 (let (($x822 (and $x252 $x684)))
 (let (($x496 (and $x822 $x783)))
 (let (($x259 (and $x496 $x57)))
 (let (($x171 (= $x259 true)))
 (let (($x303 (= $x171 true)))
 (let (($x681 (= $x303 true)))
 (let (($x429 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x523 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x192 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x523) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x523))))
 (let (($x682 (and true $x192)))
 (let (($x292 (and $x192 $x682)))
 (let ((?x100 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x581 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x24))))
 (let (($x848 (= (bvand ?x581 (_ bv4294967288 32)) ?x581)))
 (let (($x533 (= (bvand ?x100 (_ bv4294967292 32)) ?x100)))
 (let (($x447 (and $x533 $x848)))
 (let (($x847 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x100 (bvsub ?x100 (_ bv4 32))) (bvult ?x100 (bvsub ?x100 (_ bv4 32))))))
 (let (($x666 (and (and (and (and (and $x682 $x847) $x533) $x447) $x292) $x429)))
 (let (($x328 (= true $x666)))
 (let (($x185 (not $x801)))
 (let (($x338 (=> $x185 $x328)))
 (let (($x334 (= $x338 true)))
 (let (($x187 (= $x334 true)))
 (let (($x296 (= $x187 true)))
 (let (($x97 (= $x185 true)))
 (let (($x506 (= $x97 true)))
 (let (($x811 (= $x506 true)))
 (let (($x207 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x262 (= $x207 true)))
 (let (($x261 (= $x262 true)))
 (let ((?x346 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x653 (= (_ bv0 32) ?x346)))
 (let ((?x464 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x464)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x286 $x162)))
 (let (($x47 (and $x242 $x653)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x500 (and $x69 $x47)))
 (let (($x427 (= $x500 true)))
 (let (($x378 (= $x427 true)))
 (let (($x9 (= $x378 true)))
 (let (($x189 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x637 (=> $x189 true)))
 (let ((?x764 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x425 (bvuge ?x764 (_ bv1 32))))
 (let (($x302 (= $x189 $x425)))
 (let (($x348 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x507 (=> $x348 $x299)))
 (let (($x867 (= ?x764 (_ bv0 32))))
 (let (($x312 (= $x348 $x867)))
 (let (($x662 (and $x312 $x507)))
 (let (($x808 (and $x662 $x302)))
 (let (($x806 (and $x808 $x637)))
 (let (($x236 (= $x806 true)))
 (let (($x465 (= $x236 true)))
 (let (($x683 (= $x465 true)))
 (let (($x135 (= $x396 $x425)))
 (let (($x512 (= $x56 $x867)))
 (let (($x444 (and $x512 $x684)))
 (let (($x172 (and $x444 $x135)))
 (let (($x788 (and $x172 $x57)))
 (let (($x461 (= $x788 true)))
 (let (($x344 (= $x461 true)))
 (let (($x623 (= $x344 true)))
 (let (($x725 (and $x623 $x683)))
 (let (($x60 (and $x725 $x9)))
 (let (($x403 (and $x60 $x261)))
 (let (($x803 (and $x403 $x811)))
 (let (($x415 (and $x803 $x296)))
 (let (($x763 (and $x415 $x681)))
 (let (($x154 (and $x763 $x391)))
 (let (($x59 (and $x154 $x319)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x435 (and $x72 $x59)))
 (let (($x352 (bvugt ?x100 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x100 (_ bv3 32))))
 (let (($x659 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x32 (=> (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x659 $x352)))))))
 (let (($x615 (=> (and $x185 (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x659 $x352)))))))
 (let (($x614 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x729 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x41 (=> $x729 (or false (or false (and true (or $x248 $x614)))))))
 (let (($x29 (=> (and $x185 $x729) (or false (or false (and true (or $x248 $x614)))))))
 (let (($x37 (and $x29 $x615)))
 (let (($x193 (and $x37 $x435)))
 (let (($x548 (=> $x193 $x284)))
 (not $x548)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x709 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x260)))
 (let (($x341 (= (_ bv0 8) ?x709)))
 (let (($x284 (= $x341 true)))
 (let (($x278 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x840 (= $x278 true)))
 (let (($x319 (= $x840 true)))
 (let ((?x209 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x686 (= (_ bv0 3) ?x209)))
 (let (($x309 (= $x686 true)))
 (let (($x391 (= $x309 true)))
 (let (($x396 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x57 (=> $x396 true)))
 (let (($x801 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x120 (ite $x801 (_ bv0 32) (_ bv1 32))))
 (let (($x783 (= $x396 (bvuge ?x120 (_ bv1 32)))))
 (let (($x299 (= false false)))
 (let (($x56 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x684 (=> $x56 $x299)))
 (let (($x252 (= $x56 (= ?x120 (_ bv0 32)))))
 (let (($x822 (and $x252 $x684)))
 (let (($x496 (and $x822 $x783)))
 (let (($x259 (and $x496 $x57)))
 (let (($x171 (= $x259 true)))
 (let (($x303 (= $x171 true)))
 (let (($x681 (= $x303 true)))
 (let (($x429 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x523 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x192 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x523) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x523))))
 (let (($x682 (and true $x192)))
 (let (($x292 (and $x192 $x682)))
 (let ((?x100 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x581 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x24))))
 (let (($x848 (= (bvand ?x581 (_ bv4294967288 32)) ?x581)))
 (let (($x533 (= (bvand ?x100 (_ bv4294967292 32)) ?x100)))
 (let (($x447 (and $x533 $x848)))
 (let (($x847 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x100 (bvsub ?x100 (_ bv4 32))) (bvult ?x100 (bvsub ?x100 (_ bv4 32))))))
 (let (($x666 (and (and (and (and (and $x682 $x847) $x533) $x447) $x292) $x429)))
 (let (($x328 (= true $x666)))
 (let (($x185 (not $x801)))
 (let (($x338 (=> $x185 $x328)))
 (let (($x334 (= $x338 true)))
 (let (($x187 (= $x334 true)))
 (let (($x296 (= $x187 true)))
 (let (($x97 (= $x185 true)))
 (let (($x506 (= $x97 true)))
 (let (($x811 (= $x506 true)))
 (let (($x207 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x262 (= $x207 true)))
 (let (($x261 (= $x262 true)))
 (let ((?x346 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x653 (= (_ bv0 32) ?x346)))
 (let ((?x464 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x464)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x286 $x162)))
 (let (($x47 (and $x242 $x653)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x500 (and $x69 $x47)))
 (let (($x427 (= $x500 true)))
 (let (($x378 (= $x427 true)))
 (let (($x9 (= $x378 true)))
 (let (($x189 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x637 (=> $x189 true)))
 (let ((?x764 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x425 (bvuge ?x764 (_ bv1 32))))
 (let (($x302 (= $x189 $x425)))
 (let (($x348 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x507 (=> $x348 $x299)))
 (let (($x867 (= ?x764 (_ bv0 32))))
 (let (($x312 (= $x348 $x867)))
 (let (($x662 (and $x312 $x507)))
 (let (($x808 (and $x662 $x302)))
 (let (($x806 (and $x808 $x637)))
 (let (($x236 (= $x806 true)))
 (let (($x465 (= $x236 true)))
 (let (($x683 (= $x465 true)))
 (let (($x135 (= $x396 $x425)))
 (let (($x512 (= $x56 $x867)))
 (let (($x444 (and $x512 $x684)))
 (let (($x172 (and $x444 $x135)))
 (let (($x788 (and $x172 $x57)))
 (let (($x461 (= $x788 true)))
 (let (($x344 (= $x461 true)))
 (let (($x623 (= $x344 true)))
 (let (($x725 (and $x623 $x683)))
 (let (($x60 (and $x725 $x9)))
 (let (($x403 (and $x60 $x261)))
 (let (($x803 (and $x403 $x811)))
 (let (($x415 (and $x803 $x296)))
 (let (($x763 (and $x415 $x681)))
 (let (($x154 (and $x763 $x391)))
 (let (($x59 (and $x154 $x319)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x435 (and $x72 $x59)))
 (let (($x352 (bvugt ?x100 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x100 (_ bv3 32))))
 (let (($x659 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x32 (=> (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x659 $x352)))))))
 (let (($x615 (=> (and $x185 (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x659 $x352)))))))
 (let (($x614 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x729 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x41 (=> $x729 (or false (or false (and true (or $x248 $x614)))))))
 (let (($x29 (=> (and $x185 $x729) (or false (or false (and true (or $x248 $x614)))))))
 (let (($x37 (and $x29 $x615)))
 (let (($x193 (and $x37 $x435)))
 (let (($x548 (=> $x193 $x284)))
 (not $x548)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 #b00000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_13)
(function @fun_13
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_13 #b10000000000000000000000000000100) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000111) #b00000000)
 (default #b10000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4ae3f0c4)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x356af0c0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x356af0c0 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4ae3f0c7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4ae3f0c4)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv146160 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv146160 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8) (_ bv0 8))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv301320 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv301320 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv301323 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 143
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x538 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x740 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x538)))
 (let (($x844 (= (_ bv0 8) ?x740)))
 (let (($x483 (= $x844 true)))
 (let (($x785 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x397 (= $x785 true)))
 (let (($x238 (= $x397 true)))
 (let ((?x432 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x853 (= (_ bv0 3) ?x432)))
 (let (($x451 (= $x853 true)))
 (let (($x838 (= $x451 true)))
 (let (($x283 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x581 (=> $x283 false)))
 (let (($x801 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x846 (ite $x801 (_ bv0 32) (_ bv1 32))))
 (let (($x593 (= $x283 (bvuge ?x846 (_ bv1 32)))))
 (let (($x315 (= false false)))
 (let (($x489 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x533 (=> $x489 $x315)))
 (let (($x580 (= $x489 (= ?x846 (_ bv0 32)))))
 (let (($x551 (and $x580 $x533)))
 (let (($x169 (and $x551 $x593)))
 (let (($x567 (and $x169 $x581)))
 (let (($x234 (= $x567 true)))
 (let (($x563 (= $x234 true)))
 (let (($x638 (= $x563 true)))
 (let (($x606 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x347 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x347) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x347))))
 (let (($x868 (and true $x102)))
 (let (($x720 (and $x102 $x868)))
 (let ((?x729 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x843 (concat (select input.dst.llvm-mem (bvadd ?x729 (_ bv1 32))) (select input.dst.llvm-mem ?x729))))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd ?x729 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x729 (_ bv2 32))) ?x843))))
 (let (($x716 (= (bvand ?x482 (_ bv4294967288 32)) ?x482)))
 (let (($x854 (= (bvand ?x729 (_ bv4294967292 32)) ?x729)))
 (let (($x541 (and $x854 $x716)))
 (let (($x675 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x729 (bvsub ?x729 (_ bv4 32))) (bvult ?x729 (bvsub ?x729 (_ bv4 32))))))
 (let (($x297 (and (and (and (and (and $x868 $x675) $x854) $x541) $x720) $x606)))
 (let (($x68 (= true $x297)))
 (let (($x185 (not $x801)))
 (let (($x693 (=> $x185 $x68)))
 (let (($x34 (= $x693 true)))
 (let (($x39 (= $x34 true)))
 (let (($x349 (= $x39 true)))
 (let (($x709 (= $x185 true)))
 (let (($x341 (= $x709 true)))
 (let (($x284 (= $x341 true)))
 (let (($x59 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x435 (= $x59 true)))
 (let (($x193 (= $x435 true)))
 (let ((?x686 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x686)))
 (let ((?x763 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x763)))
 (let (($x681 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x681 $x281)))
 (let (($x391 (and $x209 $x309)))
 (let (($x303 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x303 $x391)))
 (let (($x642 (= $x154 true)))
 (let (($x317 (= $x642 true)))
 (let (($x278 (= $x317 true)))
 (let (($x415 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x252 (=> $x415 false)))
 (let ((?x847 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x104 (bvuge ?x847 (_ bv1 32))))
 (let (($x120 (= $x415 $x104)))
 (let (($x666 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x338 (=> $x666 $x315)))
 (let (($x494 (= ?x847 (_ bv0 32))))
 (let (($x328 (= $x666 $x494)))
 (let (($x334 (and $x328 $x338)))
 (let (($x140 (and $x334 $x120)))
 (let (($x822 (and $x140 $x252)))
 (let (($x583 (= $x822 true)))
 (let (($x783 (= $x583 true)))
 (let (($x496 (= $x783 true)))
 (let (($x24 (= $x283 $x104)))
 (let (($x345 (= $x489 $x494)))
 (let (($x859 (and $x345 $x533)))
 (let (($x364 (and $x859 $x24)))
 (let (($x535 (and $x364 $x581)))
 (let (($x216 (= $x535 true)))
 (let (($x848 (= $x216 true)))
 (let (($x447 (= $x848 true)))
 (let (($x259 (and $x447 $x496)))
 (let (($x840 (and $x259 $x278)))
 (let (($x260 (and $x840 $x193)))
 (let (($x548 (and $x260 $x284)))
 (let (($x306 (and $x548 $x349)))
 (let (($x318 (and $x306 $x638)))
 (let (($x707 (and $x318 $x838)))
 (let (($x369 (and $x707 $x238)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x205 (and $x56 $x369)))
 (let (($x182 (bvugt ?x729 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x729 (_ bv3 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x72 (=> (bvule ?x729 (bvsub (bvadd ?x729 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x182)))))))
 (let (($x657 (=> (and $x185 (bvule ?x729 (bvsub (bvadd ?x729 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x158 $x182)))))))
 (let (($x311 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x828 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x333 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x522 (=> $x333 (or false (or false (and true (or $x828 $x311)))))))
 (let (($x305 (=> (and $x185 $x333) (or false (or false (and true (or $x828 $x311)))))))
 (let (($x186 (and $x305 $x657)))
 (let (($x723 (and $x186 $x205)))
 (let (($x513 (=> $x723 $x483)))
 (not $x513)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 () (_ BitVec 8))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x538 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x740 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0 ?x538)))
 (let (($x844 (= (_ bv0 8) ?x740)))
 (let (($x483 (= $x844 true)))
 (let (($x785 (= (_ bv0 8) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_7_0)))
 (let (($x397 (= $x785 true)))
 (let (($x238 (= $x397 true)))
 (let ((?x432 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x853 (= (_ bv0 3) ?x432)))
 (let (($x451 (= $x853 true)))
 (let (($x838 (= $x451 true)))
 (let (($x283 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x581 (=> $x283 false)))
 (let (($x801 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x846 (ite $x801 (_ bv0 32) (_ bv1 32))))
 (let (($x593 (= $x283 (bvuge ?x846 (_ bv1 32)))))
 (let (($x315 (= false false)))
 (let (($x489 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x533 (=> $x489 $x315)))
 (let (($x580 (= $x489 (= ?x846 (_ bv0 32)))))
 (let (($x551 (and $x580 $x533)))
 (let (($x169 (and $x551 $x593)))
 (let (($x567 (and $x169 $x581)))
 (let (($x234 (= $x567 true)))
 (let (($x563 (= $x234 true)))
 (let (($x638 (= $x563 true)))
 (let (($x606 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x347 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x347) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x347))))
 (let (($x868 (and true $x102)))
 (let (($x720 (and $x102 $x868)))
 (let ((?x729 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x843 (concat (select input.dst.llvm-mem (bvadd ?x729 (_ bv1 32))) (select input.dst.llvm-mem ?x729))))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd ?x729 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x729 (_ bv2 32))) ?x843))))
 (let (($x716 (= (bvand ?x482 (_ bv4294967288 32)) ?x482)))
 (let (($x854 (= (bvand ?x729 (_ bv4294967292 32)) ?x729)))
 (let (($x541 (and $x854 $x716)))
 (let (($x675 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x729 (bvsub ?x729 (_ bv4 32))) (bvult ?x729 (bvsub ?x729 (_ bv4 32))))))
 (let (($x297 (and (and (and (and (and $x868 $x675) $x854) $x541) $x720) $x606)))
 (let (($x68 (= true $x297)))
 (let (($x185 (not $x801)))
 (let (($x693 (=> $x185 $x68)))
 (let (($x34 (= $x693 true)))
 (let (($x39 (= $x34 true)))
 (let (($x349 (= $x39 true)))
 (let (($x709 (= $x185 true)))
 (let (($x341 (= $x709 true)))
 (let (($x284 (= $x341 true)))
 (let (($x59 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x435 (= $x59 true)))
 (let (($x193 (= $x435 true)))
 (let ((?x686 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x686)))
 (let ((?x763 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x763)))
 (let (($x681 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x681 $x281)))
 (let (($x391 (and $x209 $x309)))
 (let (($x303 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x303 $x391)))
 (let (($x642 (= $x154 true)))
 (let (($x317 (= $x642 true)))
 (let (($x278 (= $x317 true)))
 (let (($x415 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x252 (=> $x415 false)))
 (let ((?x847 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x104 (bvuge ?x847 (_ bv1 32))))
 (let (($x120 (= $x415 $x104)))
 (let (($x666 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x338 (=> $x666 $x315)))
 (let (($x494 (= ?x847 (_ bv0 32))))
 (let (($x328 (= $x666 $x494)))
 (let (($x334 (and $x328 $x338)))
 (let (($x140 (and $x334 $x120)))
 (let (($x822 (and $x140 $x252)))
 (let (($x583 (= $x822 true)))
 (let (($x783 (= $x583 true)))
 (let (($x496 (= $x783 true)))
 (let (($x24 (= $x283 $x104)))
 (let (($x345 (= $x489 $x494)))
 (let (($x859 (and $x345 $x533)))
 (let (($x364 (and $x859 $x24)))
 (let (($x535 (and $x364 $x581)))
 (let (($x216 (= $x535 true)))
 (let (($x848 (= $x216 true)))
 (let (($x447 (= $x848 true)))
 (let (($x259 (and $x447 $x496)))
 (let (($x840 (and $x259 $x278)))
 (let (($x260 (and $x840 $x193)))
 (let (($x548 (and $x260 $x284)))
 (let (($x306 (and $x548 $x349)))
 (let (($x318 (and $x306 $x638)))
 (let (($x707 (and $x318 $x838)))
 (let (($x369 (and $x707 $x238)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x205 (and $x56 $x369)))
 (let (($x182 (bvugt ?x729 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x729 (_ bv3 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x72 (=> (bvule ?x729 (bvsub (bvadd ?x729 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x182)))))))
 (let (($x657 (=> (and $x185 (bvule ?x729 (bvsub (bvadd ?x729 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x158 $x182)))))))
 (let (($x311 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x828 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x333 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x522 (=> $x333 (or false (or false (and true (or $x828 $x311)))))))
 (let (($x305 (=> (and $x185 $x333) (or false (or false (and true (or $x828 $x311)))))))
 (let (($x186 (and $x305 $x657)))
 (let (($x723 (and $x186 $x205)))
 (let (($x513 (=> $x723 $x483)))
 (not $x513)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 144
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0 () (_ BitVec 7))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x392 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x313 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x215 (concat (select input.dst.llvm-mem ?x313) (concat ?x161 (concat ?x73 ?x392)))))
 (let ((?x782 ((_ extract 6 0) ?x215)))
 (let ((?x588 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0 ?x782)))
 (let (($x291 (= (_ bv0 7) ?x588)))
 (let (($x244 (= $x291 true)))
 (let (($x488 (= (_ bv0 7) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0)))
 (let (($x340 (= $x488 true)))
 (let (($x225 (= $x340 true)))
 (let ((?x122 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x497 (= (_ bv0 3) ?x122)))
 (let (($x219 (= $x497 true)))
 (let (($x443 (= $x219 true)))
 (let (($x273 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x482 (=> $x273 true)))
 (let (($x316 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x116 (ite $x316 (_ bv0 32) (_ bv1 32))))
 (let (($x809 (= $x273 (bvuge ?x116 (_ bv1 32)))))
 (let (($x212 (= false false)))
 (let (($x377 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x854 (=> $x377 $x212)))
 (let (($x129 (= $x377 (= ?x116 (_ bv0 32)))))
 (let (($x17 (and $x129 $x854)))
 (let (($x197 (and $x17 $x809)))
 (let (($x539 (and $x197 $x482)))
 (let (($x510 (= $x539 true)))
 (let (($x436 (= $x510 true)))
 (let (($x170 (= $x436 true)))
 (let (($x465 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x612 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x90 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x612) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x612))))
 (let (($x507 (and true $x90)))
 (let (($x119 (and $x90 $x507)))
 (let ((?x333 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem ?x333))))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv2 32))) ?x348))))
 (let (($x312 (= (bvand ?x425 (_ bv4294967288 32)) ?x425)))
 (let (($x867 (= (bvand ?x333 (_ bv4294967292 32)) ?x333)))
 (let (($x725 (and $x867 $x312)))
 (let (($x393 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x333 (bvsub ?x333 (_ bv4 32))) (bvult ?x333 (bvsub ?x333 (_ bv4 32))))))
 (let (($x683 (and (and (and (and (and $x507 $x393) $x867) $x725) $x119) $x465)))
 (let (($x69 (= true $x683)))
 (let (($x801 (not $x316)))
 (let (($x286 (=> $x801 $x69)))
 (let (($x464 (= $x286 true)))
 (let (($x162 (= $x464 true)))
 (let (($x207 (= $x162 true)))
 (let (($x740 (= $x801 true)))
 (let (($x844 (= $x740 true)))
 (let (($x483 (= $x844 true)))
 (let (($x369 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x205 (= $x369 true)))
 (let (($x723 (= $x205 true)))
 (let ((?x853 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x451 (= (_ bv0 32) ?x853)))
 (let ((?x318 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x390 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x318)))
 (let (($x638 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x432 (and $x638 $x390)))
 (let (($x838 (and $x432 $x451)))
 (let (($x563 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x707 (and $x563 $x838)))
 (let (($x382 (= $x707 true)))
 (let (($x247 (= $x382 true)))
 (let (($x785 (= $x247 true)))
 (let (($x306 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x580 (=> $x306 true)))
 (let ((?x675 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x577 (bvuge ?x675 (_ bv1 32))))
 (let (($x846 (= $x306 $x577)))
 (let (($x297 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x693 (=> $x297 $x212)))
 (let (($x508 (= ?x675 (_ bv0 32))))
 (let (($x68 (= $x297 $x508)))
 (let (($x34 (and $x68 $x693)))
 (let (($x700 (and $x34 $x846)))
 (let (($x551 (and $x700 $x580)))
 (let (($x520 (= $x551 true)))
 (let (($x593 (= $x520 true)))
 (let (($x169 (= $x593 true)))
 (let (($x843 (= $x273 $x577)))
 (let (($x529 (= $x377 $x508)))
 (let (($x410 (and $x529 $x854)))
 (let (($x88 (and $x410 $x843)))
 (let (($x409 (and $x88 $x482)))
 (let (($x268 (= $x409 true)))
 (let (($x716 (= $x268 true)))
 (let (($x541 (= $x716 true)))
 (let (($x567 (and $x541 $x169)))
 (let (($x397 (and $x567 $x785)))
 (let (($x538 (and $x397 $x723)))
 (let (($x513 (and $x538 $x483)))
 (let (($x544 (and $x513 $x207)))
 (let (($x343 (and $x544 $x170)))
 (let (($x804 (and $x343 $x443)))
 (let (($x204 (and $x804 $x225)))
 (let (($x489 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x573 (and $x489 $x204)))
 (let (($x615 (bvugt ?x333 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x333 (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x56 (=> (bvule ?x333 (bvsub (bvadd ?x333 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x615)))))))
 (let (($x190 (=> (and $x801 (bvule ?x333 (bvsub (bvadd ?x333 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x32 $x615)))))))
 (let (($x29 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x313)))
 (let (($x659 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x352 (=> $x659 (or false (or false (and true (or $x41 $x29)))))))
 (let (($x817 (=> (and $x801 $x659) (or false (or false (and true (or $x41 $x29)))))))
 (let (($x7 (and $x817 $x190)))
 (let (($x530 (and $x7 $x573)))
 (let (($x111 (=> $x530 $x244)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0 () (_ BitVec 7))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x392 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x313 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x215 (concat (select input.dst.llvm-mem ?x313) (concat ?x161 (concat ?x73 ?x392)))))
 (let ((?x782 ((_ extract 6 0) ?x215)))
 (let ((?x588 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0 ?x782)))
 (let (($x291 (= (_ bv0 7) ?x588)))
 (let (($x244 (= $x291 true)))
 (let (($x488 (= (_ bv0 7) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0)))
 (let (($x340 (= $x488 true)))
 (let (($x225 (= $x340 true)))
 (let ((?x122 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x497 (= (_ bv0 3) ?x122)))
 (let (($x219 (= $x497 true)))
 (let (($x443 (= $x219 true)))
 (let (($x273 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x482 (=> $x273 true)))
 (let (($x316 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x116 (ite $x316 (_ bv0 32) (_ bv1 32))))
 (let (($x809 (= $x273 (bvuge ?x116 (_ bv1 32)))))
 (let (($x212 (= false false)))
 (let (($x377 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x854 (=> $x377 $x212)))
 (let (($x129 (= $x377 (= ?x116 (_ bv0 32)))))
 (let (($x17 (and $x129 $x854)))
 (let (($x197 (and $x17 $x809)))
 (let (($x539 (and $x197 $x482)))
 (let (($x510 (= $x539 true)))
 (let (($x436 (= $x510 true)))
 (let (($x170 (= $x436 true)))
 (let (($x465 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x612 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x90 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x612) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x612))))
 (let (($x507 (and true $x90)))
 (let (($x119 (and $x90 $x507)))
 (let ((?x333 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem ?x333))))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv2 32))) ?x348))))
 (let (($x312 (= (bvand ?x425 (_ bv4294967288 32)) ?x425)))
 (let (($x867 (= (bvand ?x333 (_ bv4294967292 32)) ?x333)))
 (let (($x725 (and $x867 $x312)))
 (let (($x393 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x333 (bvsub ?x333 (_ bv4 32))) (bvult ?x333 (bvsub ?x333 (_ bv4 32))))))
 (let (($x683 (and (and (and (and (and $x507 $x393) $x867) $x725) $x119) $x465)))
 (let (($x69 (= true $x683)))
 (let (($x801 (not $x316)))
 (let (($x286 (=> $x801 $x69)))
 (let (($x464 (= $x286 true)))
 (let (($x162 (= $x464 true)))
 (let (($x207 (= $x162 true)))
 (let (($x740 (= $x801 true)))
 (let (($x844 (= $x740 true)))
 (let (($x483 (= $x844 true)))
 (let (($x369 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x205 (= $x369 true)))
 (let (($x723 (= $x205 true)))
 (let ((?x853 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x451 (= (_ bv0 32) ?x853)))
 (let ((?x318 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x390 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x318)))
 (let (($x638 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x432 (and $x638 $x390)))
 (let (($x838 (and $x432 $x451)))
 (let (($x563 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x707 (and $x563 $x838)))
 (let (($x382 (= $x707 true)))
 (let (($x247 (= $x382 true)))
 (let (($x785 (= $x247 true)))
 (let (($x306 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x580 (=> $x306 true)))
 (let ((?x675 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x577 (bvuge ?x675 (_ bv1 32))))
 (let (($x846 (= $x306 $x577)))
 (let (($x297 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x693 (=> $x297 $x212)))
 (let (($x508 (= ?x675 (_ bv0 32))))
 (let (($x68 (= $x297 $x508)))
 (let (($x34 (and $x68 $x693)))
 (let (($x700 (and $x34 $x846)))
 (let (($x551 (and $x700 $x580)))
 (let (($x520 (= $x551 true)))
 (let (($x593 (= $x520 true)))
 (let (($x169 (= $x593 true)))
 (let (($x843 (= $x273 $x577)))
 (let (($x529 (= $x377 $x508)))
 (let (($x410 (and $x529 $x854)))
 (let (($x88 (and $x410 $x843)))
 (let (($x409 (and $x88 $x482)))
 (let (($x268 (= $x409 true)))
 (let (($x716 (= $x268 true)))
 (let (($x541 (= $x716 true)))
 (let (($x567 (and $x541 $x169)))
 (let (($x397 (and $x567 $x785)))
 (let (($x538 (and $x397 $x723)))
 (let (($x513 (and $x538 $x483)))
 (let (($x544 (and $x513 $x207)))
 (let (($x343 (and $x544 $x170)))
 (let (($x804 (and $x343 $x443)))
 (let (($x204 (and $x804 $x225)))
 (let (($x489 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x573 (and $x489 $x204)))
 (let (($x615 (bvugt ?x333 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x333 (_ bv3 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x56 (=> (bvule ?x333 (bvsub (bvadd ?x333 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x615)))))))
 (let (($x190 (=> (and $x801 (bvule ?x333 (bvsub (bvadd ?x333 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x32 $x615)))))))
 (let (($x29 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x313)))
 (let (($x659 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x352 (=> $x659 (or false (or false (and true (or $x41 $x29)))))))
 (let (($x817 (=> (and $x801 $x659) (or false (or false (and true (or $x41 $x29)))))))
 (let (($x7 (and $x817 $x190)))
 (let (($x530 (and $x7 $x573)))
 (let (($x111 (=> $x530 $x244)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0 #b0000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_13)
(function @fun_13
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_13 #b10000000000000000000000000000100) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000111) #b00000000)
 (default #b01000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ffff000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x5f7eeff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x5f7eeff8 #x7f))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0 () (_ BitVec 7)
    #b0000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ffff003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ffff000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv168912 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv168912 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0 () (_ BitVec 7) (_ bv0 7))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv305928 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv305928 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv305931 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 145
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0 () (_ BitVec 7))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x554 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x100 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x187 (concat (select input.dst.llvm-mem ?x100) (concat ?x9 (concat ?x262 ?x554)))))
 (let ((?x296 ((_ extract 6 0) ?x187)))
 (let ((?x714 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0 ?x296)))
 (let (($x380 (= (_ bv0 7) ?x714)))
 (let (($x715 (= $x380 true)))
 (let (($x378 (= (_ bv0 7) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0)))
 (let (($x43 (= $x378 true)))
 (let (($x682 (= $x43 true)))
 (let ((?x201 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x192 (= (_ bv0 3) ?x201)))
 (let (($x413 (= $x192 true)))
 (let (($x210 (= $x413 true)))
 (let (($x226 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x425 (=> $x226 false)))
 (let (($x316 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x319 (ite $x316 (_ bv0 32) (_ bv1 32))))
 (let (($x788 (= $x226 (bvuge ?x319 (_ bv1 32)))))
 (let (($x764 (= false false)))
 (let (($x396 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x867 (=> $x396 $x764)))
 (let (($x394 (= $x396 (= ?x319 (_ bv0 32)))))
 (let (($x676 (and $x394 $x867)))
 (let (($x168 (and $x676 $x788)))
 (let (($x80 (and $x168 $x425)))
 (let (($x457 (= $x80 true)))
 (let (($x523 (= $x457 true)))
 (let (($x506 (= $x523 true)))
 (let (($x848 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x392 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x782 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x392) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x392))))
 (let (($x588 (and true $x782)))
 (let (($x666 (and $x782 $x588)))
 (let ((?x659 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv1 32))) (select input.dst.llvm-mem ?x659))))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv2 32))) ?x283))))
 (let (($x415 (= (bvand ?x494 (_ bv4294967288 32)) ?x494)))
 (let (($x23 (= (bvand ?x659 (_ bv4294967292 32)) ?x659)))
 (let (($x429 (and $x23 $x415)))
 (let (($x363 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x659 (bvsub ?x659 (_ bv4 32))) (bvult ?x659 (bvsub ?x659 (_ bv4 32))))))
 (let (($x447 (and (and (and (and (and $x588 $x363) $x23) $x429) $x666) $x848)))
 (let (($x328 (= true $x447)))
 (let (($x801 (not $x316)))
 (let (($x259 (=> $x801 $x328)))
 (let (($x171 (= $x259 true)))
 (let (($x583 (= $x171 true)))
 (let (($x783 (= $x583 true)))
 (let (($x458 (= $x801 true)))
 (let (($x161 (= $x458 true)))
 (let (($x78 (= $x161 true)))
 (let (($x204 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x573 (= $x204 true)))
 (let (($x530 (= $x573 true)))
 (let ((?x497 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x219 (= (_ bv0 32) ?x497)))
 (let ((?x343 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x468 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x343)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x170 $x468)))
 (let (($x443 (and $x122 $x219)))
 (let (($x436 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x804 (and $x436 $x443)))
 (let (($x550 (= $x804 true)))
 (let (($x446 (= $x550 true)))
 (let (($x488 (= $x446 true)))
 (let (($x544 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x129 (=> $x544 false)))
 (let ((?x393 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x662 (bvuge ?x393 (_ bv1 32))))
 (let (($x116 (= $x544 $x662)))
 (let (($x683 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x286 (=> $x683 $x764)))
 (let (($x808 (= ?x393 (_ bv0 32))))
 (let (($x69 (= $x683 $x808)))
 (let (($x464 (and $x69 $x286)))
 (let (($x95 (and $x464 $x116)))
 (let (($x17 (and $x95 $x129)))
 (let (($x365 (= $x17 true)))
 (let (($x809 (= $x365 true)))
 (let (($x197 (= $x809 true)))
 (let (($x348 (= $x226 $x662)))
 (let (($x592 (= $x396 $x808)))
 (let (($x637 (and $x592 $x867)))
 (let (($x135 (and $x637 $x348)))
 (let (($x57 (and $x135 $x425)))
 (let (($x623 (= $x57 true)))
 (let (($x312 (= $x623 true)))
 (let (($x725 (= $x312 true)))
 (let (($x539 (and $x725 $x197)))
 (let (($x340 (and $x539 $x488)))
 (let (($x610 (and $x340 $x530)))
 (let (($x73 (and $x610 $x78)))
 (let (($x140 (and $x73 $x783)))
 (let (($x811 (and $x140 $x506)))
 (let (($x242 (and $x811 $x210)))
 (let (($x60 (and $x242 $x682)))
 (let (($x377 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x500 (and $x377 $x60)))
 (let (($x657 (bvugt ?x659 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x659 (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x489 (=> (bvule ?x659 (bvsub (bvadd ?x659 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x657)))))))
 (let (($x213 (=> (and $x801 (bvule ?x659 (bvsub (bvadd ?x659 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x72 $x657)))))))
 (let (($x305 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x522 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x158 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x182 (=> $x158 (or false (or false (and true (or $x522 $x305)))))))
 (let (($x124 (=> (and $x801 $x158) (or false (or false (and true (or $x522 $x305)))))))
 (let (($x99 (and $x124 $x213)))
 (let (($x803 (and $x99 $x500)))
 (let (($x155 (=> $x803 $x715)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0 () (_ BitVec 7))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x554 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x100 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x187 (concat (select input.dst.llvm-mem ?x100) (concat ?x9 (concat ?x262 ?x554)))))
 (let ((?x296 ((_ extract 6 0) ?x187)))
 (let ((?x714 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0 ?x296)))
 (let (($x380 (= (_ bv0 7) ?x714)))
 (let (($x715 (= $x380 true)))
 (let (($x378 (= (_ bv0 7) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_6_0)))
 (let (($x43 (= $x378 true)))
 (let (($x682 (= $x43 true)))
 (let ((?x201 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x192 (= (_ bv0 3) ?x201)))
 (let (($x413 (= $x192 true)))
 (let (($x210 (= $x413 true)))
 (let (($x226 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x425 (=> $x226 false)))
 (let (($x316 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x319 (ite $x316 (_ bv0 32) (_ bv1 32))))
 (let (($x788 (= $x226 (bvuge ?x319 (_ bv1 32)))))
 (let (($x764 (= false false)))
 (let (($x396 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x867 (=> $x396 $x764)))
 (let (($x394 (= $x396 (= ?x319 (_ bv0 32)))))
 (let (($x676 (and $x394 $x867)))
 (let (($x168 (and $x676 $x788)))
 (let (($x80 (and $x168 $x425)))
 (let (($x457 (= $x80 true)))
 (let (($x523 (= $x457 true)))
 (let (($x506 (= $x523 true)))
 (let (($x848 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x392 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x782 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x392) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x392))))
 (let (($x588 (and true $x782)))
 (let (($x666 (and $x782 $x588)))
 (let ((?x659 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv1 32))) (select input.dst.llvm-mem ?x659))))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv2 32))) ?x283))))
 (let (($x415 (= (bvand ?x494 (_ bv4294967288 32)) ?x494)))
 (let (($x23 (= (bvand ?x659 (_ bv4294967292 32)) ?x659)))
 (let (($x429 (and $x23 $x415)))
 (let (($x363 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x659 (bvsub ?x659 (_ bv4 32))) (bvult ?x659 (bvsub ?x659 (_ bv4 32))))))
 (let (($x447 (and (and (and (and (and $x588 $x363) $x23) $x429) $x666) $x848)))
 (let (($x328 (= true $x447)))
 (let (($x801 (not $x316)))
 (let (($x259 (=> $x801 $x328)))
 (let (($x171 (= $x259 true)))
 (let (($x583 (= $x171 true)))
 (let (($x783 (= $x583 true)))
 (let (($x458 (= $x801 true)))
 (let (($x161 (= $x458 true)))
 (let (($x78 (= $x161 true)))
 (let (($x204 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x573 (= $x204 true)))
 (let (($x530 (= $x573 true)))
 (let ((?x497 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x219 (= (_ bv0 32) ?x497)))
 (let ((?x343 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x468 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x343)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x170 $x468)))
 (let (($x443 (and $x122 $x219)))
 (let (($x436 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x804 (and $x436 $x443)))
 (let (($x550 (= $x804 true)))
 (let (($x446 (= $x550 true)))
 (let (($x488 (= $x446 true)))
 (let (($x544 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x129 (=> $x544 false)))
 (let ((?x393 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x662 (bvuge ?x393 (_ bv1 32))))
 (let (($x116 (= $x544 $x662)))
 (let (($x683 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x286 (=> $x683 $x764)))
 (let (($x808 (= ?x393 (_ bv0 32))))
 (let (($x69 (= $x683 $x808)))
 (let (($x464 (and $x69 $x286)))
 (let (($x95 (and $x464 $x116)))
 (let (($x17 (and $x95 $x129)))
 (let (($x365 (= $x17 true)))
 (let (($x809 (= $x365 true)))
 (let (($x197 (= $x809 true)))
 (let (($x348 (= $x226 $x662)))
 (let (($x592 (= $x396 $x808)))
 (let (($x637 (and $x592 $x867)))
 (let (($x135 (and $x637 $x348)))
 (let (($x57 (and $x135 $x425)))
 (let (($x623 (= $x57 true)))
 (let (($x312 (= $x623 true)))
 (let (($x725 (= $x312 true)))
 (let (($x539 (and $x725 $x197)))
 (let (($x340 (and $x539 $x488)))
 (let (($x610 (and $x340 $x530)))
 (let (($x73 (and $x610 $x78)))
 (let (($x140 (and $x73 $x783)))
 (let (($x811 (and $x140 $x506)))
 (let (($x242 (and $x811 $x210)))
 (let (($x60 (and $x242 $x682)))
 (let (($x377 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x500 (and $x377 $x60)))
 (let (($x657 (bvugt ?x659 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x659 (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x489 (=> (bvule ?x659 (bvsub (bvadd ?x659 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x657)))))))
 (let (($x213 (=> (and $x801 (bvule ?x659 (bvsub (bvadd ?x659 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x72 $x657)))))))
 (let (($x305 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x522 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x158 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x182 (=> $x158 (or false (or false (and true (or $x522 $x305)))))))
 (let (($x124 (=> (and $x801 $x158) (or false (or false (and true (or $x522 $x305)))))))
 (let (($x99 (and $x124 $x213)))
 (let (($x803 (and $x99 $x500)))
 (let (($x155 (=> $x803 $x715)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 146
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0 () (_ BitVec 6))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x681 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x729 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x209 (concat (select input.dst.llvm-mem ?x729) (concat ?x176 (concat ?x681 ?x59)))))
 (let ((?x391 ((_ extract 5 0) ?x209)))
 (let ((?x317 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0 ?x391)))
 (let (($x102 (= (_ bv0 6) ?x317)))
 (let (($x868 (= $x102 true)))
 (let (($x548 (= (_ bv0 6) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0)))
 (let (($x840 (= $x548 true)))
 (let (($x686 (= $x840 true)))
 (let ((?x154 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x642 (= (_ bv0 3) ?x154)))
 (let (($x460 (= $x642 true)))
 (let (($x278 (= $x460 true)))
 (let (($x533 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x494 (=> $x533 true)))
 (let (($x849 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (ite $x849 (_ bv0 32) (_ bv1 32))))
 (let (($x535 (= $x533 (bvuge ?x238 (_ bv1 32)))))
 (let (($x512 (= false false)))
 (let (($x111 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x23 (=> $x111 $x512)))
 (let (($x236 (= $x111 (= ?x238 (_ bv0 32)))))
 (let (($x832 (and $x236 $x23)))
 (let (($x461 (and $x832 $x535)))
 (let (($x344 (and $x461 $x494)))
 (let (($x189 (= $x344 true)))
 (let (($x252 (= $x189 true)))
 (let (($x120 (= $x252 true)))
 (let (($x716 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x554 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x296 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x554) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x554))))
 (let (($x714 (and true $x296)))
 (let (($x297 (and $x296 $x714)))
 (let ((?x158 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x508 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x273))))
 (let (($x306 (= (bvand ?x508 (_ bv4294967288 32)) ?x508)))
 (let (($x448 (= (bvand ?x158 (_ bv4294967292 32)) ?x158)))
 (let (($x606 (and $x448 $x306)))
 (let (($x302 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x158 (bvsub ?x158 (_ bv4 32))) (bvult ?x158 (bvsub ?x158 (_ bv4 32))))))
 (let (($x541 (and (and (and (and (and $x714 $x302) $x448) $x606) $x297) $x716)))
 (let (($x68 (= true $x541)))
 (let (($x316 (not $x849)))
 (let (($x567 (=> $x316 $x68)))
 (let (($x234 (= $x567 true)))
 (let (($x520 (= $x234 true)))
 (let (($x593 (= $x520 true)))
 (let (($x97 (= $x316 true)))
 (let (($x9 (= $x97 true)))
 (let (($x403 (= $x9 true)))
 (let (($x60 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x500 (= $x60 true)))
 (let (($x803 (= $x500 true)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x413 (= (_ bv0 32) ?x192)))
 (let ((?x811 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x346 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x811)))
 (let (($x506 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x506 $x346)))
 (let (($x210 (and $x201 $x413)))
 (let (($x523 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x523 $x210)))
 (let (($x47 (= $x242 true)))
 (let (($x653 (= $x47 true)))
 (let (($x378 (= $x653 true)))
 (let (($x140 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x394 (=> $x140 true)))
 (let ((?x363 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x338 (bvuge ?x363 (_ bv1 32))))
 (let (($x319 (= $x140 $x338)))
 (let (($x447 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x259 (=> $x447 $x512)))
 (let (($x24 (= ?x363 (_ bv0 32))))
 (let (($x328 (= $x447 $x24)))
 (let (($x171 (and $x328 $x259)))
 (let (($x575 (and $x171 $x319)))
 (let (($x676 (and $x575 $x394)))
 (let (($x349 (= $x676 true)))
 (let (($x788 (= $x349 true)))
 (let (($x168 (= $x788 true)))
 (let (($x283 (= $x533 $x338)))
 (let (($x720 (= $x111 $x24)))
 (let (($x364 (and $x720 $x23)))
 (let (($x235 (and $x364 $x283)))
 (let (($x475 (and $x235 $x494)))
 (let (($x334 (= $x475 true)))
 (let (($x415 (= $x334 true)))
 (let (($x429 (= $x415 true)))
 (let (($x80 (and $x429 $x168)))
 (let (($x43 (and $x80 $x378)))
 (let (($x546 (and $x43 $x803)))
 (let (($x262 (and $x546 $x403)))
 (let (($x700 (and $x262 $x593)))
 (let (($x822 (and $x700 $x120)))
 (let (($x435 (and $x822 $x278)))
 (let (($x347 (and $x435 $x686)))
 (let (($x396 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x341 (and $x396 $x347)))
 (let (($x190 (bvugt ?x158 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x158 (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x377 (=> (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x190)))))))
 (let (($x76 (=> (and $x316 (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x56 $x190)))))))
 (let (($x817 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x352 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x729)))
 (let (($x32 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x615 (=> $x32 (or false (or false (and true (or $x352 $x817)))))))
 (let (($x313 (=> (and $x316 $x32) (or false (or false (and true (or $x352 $x817)))))))
 (let (($x37 (and $x313 $x76)))
 (let (($x281 (and $x37 $x341)))
 (let (($x417 (=> $x281 $x868)))
 (not $x417))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0 () (_ BitVec 6))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x681 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x729 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x209 (concat (select input.dst.llvm-mem ?x729) (concat ?x176 (concat ?x681 ?x59)))))
 (let ((?x391 ((_ extract 5 0) ?x209)))
 (let ((?x317 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0 ?x391)))
 (let (($x102 (= (_ bv0 6) ?x317)))
 (let (($x868 (= $x102 true)))
 (let (($x548 (= (_ bv0 6) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0)))
 (let (($x840 (= $x548 true)))
 (let (($x686 (= $x840 true)))
 (let ((?x154 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x642 (= (_ bv0 3) ?x154)))
 (let (($x460 (= $x642 true)))
 (let (($x278 (= $x460 true)))
 (let (($x533 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x494 (=> $x533 true)))
 (let (($x849 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (ite $x849 (_ bv0 32) (_ bv1 32))))
 (let (($x535 (= $x533 (bvuge ?x238 (_ bv1 32)))))
 (let (($x512 (= false false)))
 (let (($x111 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x23 (=> $x111 $x512)))
 (let (($x236 (= $x111 (= ?x238 (_ bv0 32)))))
 (let (($x832 (and $x236 $x23)))
 (let (($x461 (and $x832 $x535)))
 (let (($x344 (and $x461 $x494)))
 (let (($x189 (= $x344 true)))
 (let (($x252 (= $x189 true)))
 (let (($x120 (= $x252 true)))
 (let (($x716 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x554 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x296 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x554) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x554))))
 (let (($x714 (and true $x296)))
 (let (($x297 (and $x296 $x714)))
 (let ((?x158 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x508 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x273))))
 (let (($x306 (= (bvand ?x508 (_ bv4294967288 32)) ?x508)))
 (let (($x448 (= (bvand ?x158 (_ bv4294967292 32)) ?x158)))
 (let (($x606 (and $x448 $x306)))
 (let (($x302 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x158 (bvsub ?x158 (_ bv4 32))) (bvult ?x158 (bvsub ?x158 (_ bv4 32))))))
 (let (($x541 (and (and (and (and (and $x714 $x302) $x448) $x606) $x297) $x716)))
 (let (($x68 (= true $x541)))
 (let (($x316 (not $x849)))
 (let (($x567 (=> $x316 $x68)))
 (let (($x234 (= $x567 true)))
 (let (($x520 (= $x234 true)))
 (let (($x593 (= $x520 true)))
 (let (($x97 (= $x316 true)))
 (let (($x9 (= $x97 true)))
 (let (($x403 (= $x9 true)))
 (let (($x60 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x500 (= $x60 true)))
 (let (($x803 (= $x500 true)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x413 (= (_ bv0 32) ?x192)))
 (let ((?x811 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x346 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x811)))
 (let (($x506 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x506 $x346)))
 (let (($x210 (and $x201 $x413)))
 (let (($x523 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x523 $x210)))
 (let (($x47 (= $x242 true)))
 (let (($x653 (= $x47 true)))
 (let (($x378 (= $x653 true)))
 (let (($x140 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x394 (=> $x140 true)))
 (let ((?x363 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x338 (bvuge ?x363 (_ bv1 32))))
 (let (($x319 (= $x140 $x338)))
 (let (($x447 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x259 (=> $x447 $x512)))
 (let (($x24 (= ?x363 (_ bv0 32))))
 (let (($x328 (= $x447 $x24)))
 (let (($x171 (and $x328 $x259)))
 (let (($x575 (and $x171 $x319)))
 (let (($x676 (and $x575 $x394)))
 (let (($x349 (= $x676 true)))
 (let (($x788 (= $x349 true)))
 (let (($x168 (= $x788 true)))
 (let (($x283 (= $x533 $x338)))
 (let (($x720 (= $x111 $x24)))
 (let (($x364 (and $x720 $x23)))
 (let (($x235 (and $x364 $x283)))
 (let (($x475 (and $x235 $x494)))
 (let (($x334 (= $x475 true)))
 (let (($x415 (= $x334 true)))
 (let (($x429 (= $x415 true)))
 (let (($x80 (and $x429 $x168)))
 (let (($x43 (and $x80 $x378)))
 (let (($x546 (and $x43 $x803)))
 (let (($x262 (and $x546 $x403)))
 (let (($x700 (and $x262 $x593)))
 (let (($x822 (and $x700 $x120)))
 (let (($x435 (and $x822 $x278)))
 (let (($x347 (and $x435 $x686)))
 (let (($x396 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x341 (and $x396 $x347)))
 (let (($x190 (bvugt ?x158 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x158 (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x377 (=> (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x190)))))))
 (let (($x76 (=> (and $x316 (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x56 $x190)))))))
 (let (($x817 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x352 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x729)))
 (let (($x32 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x615 (=> $x32 (or false (or false (and true (or $x352 $x817)))))))
 (let (($x313 (=> (and $x316 $x32) (or false (or false (and true (or $x352 $x817)))))))
 (let (($x37 (and $x313 $x76)))
 (let (($x281 (and $x37 $x341)))
 (let (($x417 (=> $x281 $x868)))
 (not $x417))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0 #b000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_13)
(function @fun_13
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_13 #b10000000000000000000000000000100) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000111) #b00000000)
 (default #b00100000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ffff000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x5f7eeff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x5f7eeff8 #x3f))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0 () (_ BitVec 6)
    #b000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ffff003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ffff000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv185328 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv185328 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0 () (_ BitVec 6) (_ bv0 6))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv276744 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv276744 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv276747 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 147
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0 () (_ BitVec 6))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x369 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x638 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x398 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x333 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x432 (concat (select input.dst.llvm-mem ?x333) (concat ?x398 (concat ?x638 ?x369)))))
 (let ((?x838 ((_ extract 5 0) ?x432)))
 (let ((?x247 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0 ?x838)))
 (let (($x90 (= (_ bv0 6) ?x247)))
 (let (($x507 (= $x90 true)))
 (let (($x513 (= (_ bv0 6) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0)))
 (let (($x397 (= $x513 true)))
 (let (($x853 (= $x397 true)))
 (let ((?x707 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x382 (= (_ bv0 3) ?x707)))
 (let (($x292 (= $x382 true)))
 (let (($x785 (= $x292 true)))
 (let (($x854 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x508 (=> $x854 false)))
 (let (($x849 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x225 (ite $x849 (_ bv0 32) (_ bv1 32))))
 (let (($x409 (= $x854 (bvuge ?x225 (_ bv1 32)))))
 (let (($x345 (= false false)))
 (let (($x155 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x448 (=> $x155 $x345)))
 (let (($x216 (= $x155 (= ?x225 (_ bv0 32)))))
 (let (($x215 (and $x216 $x448)))
 (let (($x196 (and $x215 $x409)))
 (let (($x444 (and $x196 $x508)))
 (let (($x315 (= $x444 true)))
 (let (($x580 (= $x315 true)))
 (let (($x846 (= $x580 true)))
 (let (($x312 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x59 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x391 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x59) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x59))))
 (let (($x317 (and true $x391)))
 (let (($x683 (and $x391 $x317)))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x808 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x226))))
 (let (($x544 (= (bvand ?x808 (_ bv4294967288 32)) ?x808)))
 (let (($x480 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x465 (and $x480 $x544)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x725 (and (and (and (and (and $x317 $x104) $x480) $x465) $x683) $x312)))
 (let (($x69 (= true $x725)))
 (let (($x316 (not $x849)))
 (let (($x539 (=> $x316 $x69)))
 (let (($x510 (= $x539 true)))
 (let (($x365 (= $x510 true)))
 (let (($x809 (= $x365 true)))
 (let (($x763 (= $x316 true)))
 (let (($x176 (= $x763 true)))
 (let (($x303 (= $x176 true)))
 (let (($x347 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x341 (= $x347 true)))
 (let (($x281 (= $x341 true)))
 (let ((?x642 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x460 (= (_ bv0 32) ?x642)))
 (let ((?x822 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x822)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x120 $x193)))
 (let (($x278 (and $x154 $x460)))
 (let (($x252 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x435 (and $x252 $x278)))
 (let (($x709 (= $x435 true)))
 (let (($x260 (= $x709 true)))
 (let (($x548 (= $x260 true)))
 (let (($x700 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x236 (=> $x700 false)))
 (let ((?x302 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x693 (bvuge ?x302 (_ bv1 32))))
 (let (($x238 (= $x700 $x693)))
 (let (($x541 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x567 (=> $x541 $x345)))
 (let (($x843 (= ?x302 (_ bv0 32))))
 (let (($x68 (= $x541 $x843)))
 (let (($x234 (and $x68 $x567)))
 (let (($x806 (and $x234 $x238)))
 (let (($x832 (and $x806 $x236)))
 (let (($x207 (= $x832 true)))
 (let (($x535 (= $x207 true)))
 (let (($x461 (= $x535 true)))
 (let (($x273 (= $x854 $x693)))
 (let (($x119 (= $x155 $x843)))
 (let (($x88 (and $x119 $x448)))
 (let (($x172 (and $x88 $x273)))
 (let (($x614 (and $x172 $x508)))
 (let (($x34 (= $x614 true)))
 (let (($x306 (= $x34 true)))
 (let (($x606 (= $x306 true)))
 (let (($x344 (and $x606 $x461)))
 (let (($x840 (and $x344 $x548)))
 (let (($x309 (and $x840 $x281)))
 (let (($x681 (and $x309 $x303)))
 (let (($x95 (and $x681 $x809)))
 (let (($x551 (and $x95 $x846)))
 (let (($x205 (and $x551 $x785)))
 (let (($x612 (and $x205 $x853)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x844 (and $x111 $x612)))
 (let (($x213 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x32 (_ bv3 32))))
 (let (($x489 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x396 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x489 $x213)))))))
 (let (($x518 (=> (and $x316 (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x489 $x213)))))))
 (let (($x124 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x333)))
 (let (($x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x657 (=> $x72 (or false (or false (and true (or $x182 $x124)))))))
 (let (($x100 (=> (and $x316 $x72) (or false (or false (and true (or $x182 $x124)))))))
 (let (($x186 (and $x100 $x518)))
 (let (($x390 (and $x186 $x844)))
 (let (($x684 (=> $x390 $x507)))
 (not $x684))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0 () (_ BitVec 6))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x369 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x638 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x398 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x333 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x432 (concat (select input.dst.llvm-mem ?x333) (concat ?x398 (concat ?x638 ?x369)))))
 (let ((?x838 ((_ extract 5 0) ?x432)))
 (let ((?x247 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0 ?x838)))
 (let (($x90 (= (_ bv0 6) ?x247)))
 (let (($x507 (= $x90 true)))
 (let (($x513 (= (_ bv0 6) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_5_0)))
 (let (($x397 (= $x513 true)))
 (let (($x853 (= $x397 true)))
 (let ((?x707 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x382 (= (_ bv0 3) ?x707)))
 (let (($x292 (= $x382 true)))
 (let (($x785 (= $x292 true)))
 (let (($x854 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x508 (=> $x854 false)))
 (let (($x849 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x225 (ite $x849 (_ bv0 32) (_ bv1 32))))
 (let (($x409 (= $x854 (bvuge ?x225 (_ bv1 32)))))
 (let (($x345 (= false false)))
 (let (($x155 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x448 (=> $x155 $x345)))
 (let (($x216 (= $x155 (= ?x225 (_ bv0 32)))))
 (let (($x215 (and $x216 $x448)))
 (let (($x196 (and $x215 $x409)))
 (let (($x444 (and $x196 $x508)))
 (let (($x315 (= $x444 true)))
 (let (($x580 (= $x315 true)))
 (let (($x846 (= $x580 true)))
 (let (($x312 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x59 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x391 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x59) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x59))))
 (let (($x317 (and true $x391)))
 (let (($x683 (and $x391 $x317)))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x808 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x226))))
 (let (($x544 (= (bvand ?x808 (_ bv4294967288 32)) ?x808)))
 (let (($x480 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x465 (and $x480 $x544)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x725 (and (and (and (and (and $x317 $x104) $x480) $x465) $x683) $x312)))
 (let (($x69 (= true $x725)))
 (let (($x316 (not $x849)))
 (let (($x539 (=> $x316 $x69)))
 (let (($x510 (= $x539 true)))
 (let (($x365 (= $x510 true)))
 (let (($x809 (= $x365 true)))
 (let (($x763 (= $x316 true)))
 (let (($x176 (= $x763 true)))
 (let (($x303 (= $x176 true)))
 (let (($x347 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x341 (= $x347 true)))
 (let (($x281 (= $x341 true)))
 (let ((?x642 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x460 (= (_ bv0 32) ?x642)))
 (let ((?x822 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x822)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x120 $x193)))
 (let (($x278 (and $x154 $x460)))
 (let (($x252 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x435 (and $x252 $x278)))
 (let (($x709 (= $x435 true)))
 (let (($x260 (= $x709 true)))
 (let (($x548 (= $x260 true)))
 (let (($x700 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x236 (=> $x700 false)))
 (let ((?x302 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x693 (bvuge ?x302 (_ bv1 32))))
 (let (($x238 (= $x700 $x693)))
 (let (($x541 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x567 (=> $x541 $x345)))
 (let (($x843 (= ?x302 (_ bv0 32))))
 (let (($x68 (= $x541 $x843)))
 (let (($x234 (and $x68 $x567)))
 (let (($x806 (and $x234 $x238)))
 (let (($x832 (and $x806 $x236)))
 (let (($x207 (= $x832 true)))
 (let (($x535 (= $x207 true)))
 (let (($x461 (= $x535 true)))
 (let (($x273 (= $x854 $x693)))
 (let (($x119 (= $x155 $x843)))
 (let (($x88 (and $x119 $x448)))
 (let (($x172 (and $x88 $x273)))
 (let (($x614 (and $x172 $x508)))
 (let (($x34 (= $x614 true)))
 (let (($x306 (= $x34 true)))
 (let (($x606 (= $x306 true)))
 (let (($x344 (and $x606 $x461)))
 (let (($x840 (and $x344 $x548)))
 (let (($x309 (and $x840 $x281)))
 (let (($x681 (and $x309 $x303)))
 (let (($x95 (and $x681 $x809)))
 (let (($x551 (and $x95 $x846)))
 (let (($x205 (and $x551 $x785)))
 (let (($x612 (and $x205 $x853)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x844 (and $x111 $x612)))
 (let (($x213 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x32 (_ bv3 32))))
 (let (($x489 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x396 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x489 $x213)))))))
 (let (($x518 (=> (and $x316 (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x489 $x213)))))))
 (let (($x124 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x333)))
 (let (($x72 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x657 (=> $x72 (or false (or false (and true (or $x182 $x124)))))))
 (let (($x100 (=> (and $x316 $x72) (or false (or false (and true (or $x182 $x124)))))))
 (let (($x186 (and $x100 $x518)))
 (let (($x390 (and $x186 $x844)))
 (let (($x684 (=> $x390 $x507)))
 (not $x684))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 148
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0 () (_ BitVec 5))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x204 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x659 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x122 (concat (select input.dst.llvm-mem ?x659) (concat ?x191 (concat ?x170 ?x204)))))
 (let ((?x443 ((_ extract 4 0) ?x122)))
 (let ((?x446 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0 ?x443)))
 (let (($x782 (= (_ bv0 5) ?x446)))
 (let (($x588 (= $x782 true)))
 (let (($x73 (= (_ bv0 5) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0)))
 (let (($x340 (= $x73 true)))
 (let (($x497 (= $x340 true)))
 (let ((?x804 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x550 (= (_ bv0 3) ?x804)))
 (let (($x404 (= $x550 true)))
 (let (($x488 (= $x404 true)))
 (let (($x867 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x808 (=> $x867 true)))
 (let (($x555 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x682 (ite $x555 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (= $x867 (bvuge ?x682 (_ bv1 32)))))
 (let (($x529 (= false false)))
 (let (($x417 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x480 (=> $x417 $x529)))
 (let (($x268 (= $x417 (= ?x682 (_ bv0 32)))))
 (let (($x187 (and $x268 $x480)))
 (let (($x185 (and $x187 $x57)))
 (let (($x859 (and $x185 $x808)))
 (let (($x212 (= $x859 true)))
 (let (($x129 (= $x212 true)))
 (let (($x116 (= $x129 true)))
 (let (($x415 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x369 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x838 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x369) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x369))))
 (let (($x247 (and true $x838)))
 (let (($x447 (and $x838 $x247)))
 (let ((?x72 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x533 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x533))))
 (let (($x140 (= (bvand ?x24 (_ bv4294967288 32)) ?x24)))
 (let (($x771 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x848 (and $x771 $x140)))
 (let (($x577 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x72 (bvsub ?x72 (_ bv4 32))) (bvult ?x72 (bvsub ?x72 (_ bv4 32))))))
 (let (($x429 (and (and (and (and (and $x247 $x577) $x771) $x848) $x447) $x415)))
 (let (($x328 (= true $x429)))
 (let (($x849 (not $x555)))
 (let (($x80 (=> $x849 $x328)))
 (let (($x457 (= $x80 true)))
 (let (($x349 (= $x457 true)))
 (let (($x788 (= $x349 true)))
 (let (($x318 (= $x849 true)))
 (let (($x398 (= $x318 true)))
 (let (($x563 (= $x398 true)))
 (let (($x612 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x844 (= $x612 true)))
 (let (($x390 (= $x844 true)))
 (let ((?x382 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x292 (= (_ bv0 32) ?x382)))
 (let ((?x551 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x723 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x551)))
 (let (($x846 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x707 (and $x846 $x723)))
 (let (($x785 (and $x707 $x292)))
 (let (($x580 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (and $x580 $x785)))
 (let (($x740 (= $x205 true)))
 (let (($x538 (= $x740 true)))
 (let (($x513 (= $x538 true)))
 (let (($x95 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x216 (=> $x95 true)))
 (let ((?x104 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x286 (bvuge ?x104 (_ bv1 32))))
 (let (($x225 (= $x95 $x286)))
 (let (($x725 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x539 (=> $x725 $x529)))
 (let (($x348 (= ?x104 (_ bv0 32))))
 (let (($x69 (= $x725 $x348)))
 (let (($x510 (and $x69 $x539)))
 (let (($x581 (and $x510 $x225)))
 (let (($x215 (and $x581 $x216)))
 (let (($x783 (= $x215 true)))
 (let (($x409 (= $x783 true)))
 (let (($x196 (= $x409 true)))
 (let (($x226 (= $x867 $x286)))
 (let (($x666 (= $x417 $x348)))
 (let (($x135 (and $x666 $x480)))
 (let (($x847 (and $x135 $x226)))
 (let (($x311 (and $x847 $x808)))
 (let (($x464 (= $x311 true)))
 (let (($x544 (= $x464 true)))
 (let (($x465 (= $x544 true)))
 (let (($x444 (and $x465 $x196)))
 (let (($x397 (and $x444 $x513)))
 (let (($x451 (and $x397 $x390)))
 (let (($x638 (and $x451 $x563)))
 (let (($x575 (and $x638 $x788)))
 (let (($x17 (and $x575 $x116)))
 (let (($x573 (and $x17 $x488)))
 (let (($x392 (and $x573 $x497)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x161 (and $x155 $x392)))
 (let (($x76 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x72 (_ bv3 32))))
 (let (($x377 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x111 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x377 $x76)))))))
 (let (($x299 (=> (and $x849 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x377 $x76)))))))
 (let (($x313 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x615 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x659)))
 (let (($x56 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x190 (=> $x56 (or false (or false (and true (or $x615 $x313)))))))
 (let (($x729 (=> (and $x849 $x56) (or false (or false (and true (or $x615 $x313)))))))
 (let (($x7 (and $x729 $x299)))
 (let (($x468 (and $x7 $x161)))
 (let (($x244 (=> $x468 $x588)))
 (not $x244))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0 () (_ BitVec 5))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x204 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x659 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x122 (concat (select input.dst.llvm-mem ?x659) (concat ?x191 (concat ?x170 ?x204)))))
 (let ((?x443 ((_ extract 4 0) ?x122)))
 (let ((?x446 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0 ?x443)))
 (let (($x782 (= (_ bv0 5) ?x446)))
 (let (($x588 (= $x782 true)))
 (let (($x73 (= (_ bv0 5) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0)))
 (let (($x340 (= $x73 true)))
 (let (($x497 (= $x340 true)))
 (let ((?x804 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x550 (= (_ bv0 3) ?x804)))
 (let (($x404 (= $x550 true)))
 (let (($x488 (= $x404 true)))
 (let (($x867 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x808 (=> $x867 true)))
 (let (($x555 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x682 (ite $x555 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (= $x867 (bvuge ?x682 (_ bv1 32)))))
 (let (($x529 (= false false)))
 (let (($x417 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x480 (=> $x417 $x529)))
 (let (($x268 (= $x417 (= ?x682 (_ bv0 32)))))
 (let (($x187 (and $x268 $x480)))
 (let (($x185 (and $x187 $x57)))
 (let (($x859 (and $x185 $x808)))
 (let (($x212 (= $x859 true)))
 (let (($x129 (= $x212 true)))
 (let (($x116 (= $x129 true)))
 (let (($x415 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x369 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x838 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x369) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x369))))
 (let (($x247 (and true $x838)))
 (let (($x447 (and $x838 $x247)))
 (let ((?x72 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x533 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x533))))
 (let (($x140 (= (bvand ?x24 (_ bv4294967288 32)) ?x24)))
 (let (($x771 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x848 (and $x771 $x140)))
 (let (($x577 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x72 (bvsub ?x72 (_ bv4 32))) (bvult ?x72 (bvsub ?x72 (_ bv4 32))))))
 (let (($x429 (and (and (and (and (and $x247 $x577) $x771) $x848) $x447) $x415)))
 (let (($x328 (= true $x429)))
 (let (($x849 (not $x555)))
 (let (($x80 (=> $x849 $x328)))
 (let (($x457 (= $x80 true)))
 (let (($x349 (= $x457 true)))
 (let (($x788 (= $x349 true)))
 (let (($x318 (= $x849 true)))
 (let (($x398 (= $x318 true)))
 (let (($x563 (= $x398 true)))
 (let (($x612 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x844 (= $x612 true)))
 (let (($x390 (= $x844 true)))
 (let ((?x382 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x292 (= (_ bv0 32) ?x382)))
 (let ((?x551 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x723 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x551)))
 (let (($x846 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x707 (and $x846 $x723)))
 (let (($x785 (and $x707 $x292)))
 (let (($x580 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (and $x580 $x785)))
 (let (($x740 (= $x205 true)))
 (let (($x538 (= $x740 true)))
 (let (($x513 (= $x538 true)))
 (let (($x95 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x216 (=> $x95 true)))
 (let ((?x104 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x286 (bvuge ?x104 (_ bv1 32))))
 (let (($x225 (= $x95 $x286)))
 (let (($x725 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x539 (=> $x725 $x529)))
 (let (($x348 (= ?x104 (_ bv0 32))))
 (let (($x69 (= $x725 $x348)))
 (let (($x510 (and $x69 $x539)))
 (let (($x581 (and $x510 $x225)))
 (let (($x215 (and $x581 $x216)))
 (let (($x783 (= $x215 true)))
 (let (($x409 (= $x783 true)))
 (let (($x196 (= $x409 true)))
 (let (($x226 (= $x867 $x286)))
 (let (($x666 (= $x417 $x348)))
 (let (($x135 (and $x666 $x480)))
 (let (($x847 (and $x135 $x226)))
 (let (($x311 (and $x847 $x808)))
 (let (($x464 (= $x311 true)))
 (let (($x544 (= $x464 true)))
 (let (($x465 (= $x544 true)))
 (let (($x444 (and $x465 $x196)))
 (let (($x397 (and $x444 $x513)))
 (let (($x451 (and $x397 $x390)))
 (let (($x638 (and $x451 $x563)))
 (let (($x575 (and $x638 $x788)))
 (let (($x17 (and $x575 $x116)))
 (let (($x573 (and $x17 $x488)))
 (let (($x392 (and $x573 $x497)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x161 (and $x155 $x392)))
 (let (($x76 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x72 (_ bv3 32))))
 (let (($x377 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x111 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x377 $x76)))))))
 (let (($x299 (=> (and $x849 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x377 $x76)))))))
 (let (($x313 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x615 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x659)))
 (let (($x56 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x190 (=> $x56 (or false (or false (and true (or $x615 $x313)))))))
 (let (($x729 (=> (and $x849 $x56) (or false (or false (and true (or $x615 $x313)))))))
 (let (($x7 (and $x729 $x299)))
 (let (($x468 (and $x7 $x161)))
 (let (($x244 (=> $x468 $x588)))
 (not $x244))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0 #b00000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_13)
(function @fun_13
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_13 #b10000000000000000000000000000100) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000111) #b00000000)
 (default #b00010000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ffff000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x5f7eeff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x5f7eeff8 #x1f))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0 () (_ BitVec 5)
    #b00000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ffff003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ffff000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv178128 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv178128 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0 () (_ BitVec 5) (_ bv0 5))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv318728 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv318728 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv318731 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 149
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0 () (_ BitVec 5))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x60 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x506 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x158 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x158) (concat ?x261 (concat ?x506 ?x60)))))
 (let ((?x210 ((_ extract 4 0) ?x201)))
 (let ((?x653 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0 ?x210)))
 (let (($x296 (= (_ bv0 5) ?x653)))
 (let (($x714 (= $x296 true)))
 (let (($x262 (= (_ bv0 5) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0)))
 (let (($x43 (= $x262 true)))
 (let (($x192 (= $x43 true)))
 (let ((?x242 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x47 (= (_ bv0 3) ?x242)))
 (let (($x427 (= $x47 true)))
 (let (($x378 (= $x427 true)))
 (let (($x23 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x24 (=> $x23 false)))
 (let (($x555 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x686 (ite $x555 (_ bv0 32) (_ bv1 32))))
 (let (($x475 (= $x23 (bvuge ?x686 (_ bv1 32)))))
 (let (($x592 (= false false)))
 (let (($x684 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x771 (=> $x684 $x592)))
 (let (($x623 (= $x684 (= ?x686 (_ bv0 32)))))
 (let (($x209 (and $x623 $x771)))
 (let (($x828 (and $x209 $x475)))
 (let (($x410 (and $x828 $x24)))
 (let (($x764 (= $x410 true)))
 (let (($x394 (= $x764 true)))
 (let (($x319 (= $x394 true)))
 (let (($x306 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x204 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x443 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x204) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x204))))
 (let (($x446 (and true $x443)))
 (let (($x541 (and $x443 $x446)))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x854 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x843 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x854))))
 (let (($x700 (= (bvand ?x843 (_ bv4294967288 32)) ?x843)))
 (let (($x821 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x716 (and $x821 $x700)))
 (let (($x662 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x606 (and (and (and (and (and $x446 $x662) $x821) $x716) $x541) $x306)))
 (let (($x68 (= true $x606)))
 (let (($x849 (not $x555)))
 (let (($x344 (=> $x849 $x68)))
 (let (($x189 (= $x344 true)))
 (let (($x207 (= $x189 true)))
 (let (($x535 (= $x207 true)))
 (let (($x343 (= $x849 true)))
 (let (($x191 (= $x343 true)))
 (let (($x436 (= $x191 true)))
 (let (($x392 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x161 (= $x392 true)))
 (let (($x468 (= $x161 true)))
 (let ((?x550 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x404 (= (_ bv0 32) ?x550)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x530 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x804 (and $x116 $x530)))
 (let (($x488 (and $x804 $x404)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x573 (and $x129 $x488)))
 (let (($x458 (= $x573 true)))
 (let (($x610 (= $x458 true)))
 (let (($x73 (= $x610 true)))
 (let (($x575 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x268 (=> $x575 false)))
 (let ((?x577 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x259 (bvuge ?x577 (_ bv1 32))))
 (let (($x682 (= $x575 $x259)))
 (let (($x429 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x80 (=> $x429 $x592)))
 (let (($x283 (= ?x577 (_ bv0 32))))
 (let (($x328 (= $x429 $x283)))
 (let (($x457 (and $x328 $x80)))
 (let (($x482 (and $x457 $x682)))
 (let (($x187 (and $x482 $x268)))
 (let (($x593 (= $x187 true)))
 (let (($x57 (= $x593 true)))
 (let (($x185 (= $x57 true)))
 (let (($x533 (= $x23 $x259)))
 (let (($x297 (= $x684 $x283)))
 (let (($x235 (and $x297 $x771)))
 (let (($x675 (and $x235 $x533)))
 (let (($x29 (and $x675 $x24)))
 (let (($x171 (= $x29 true)))
 (let (($x140 (= $x171 true)))
 (let (($x848 (= $x140 true)))
 (let (($x859 (and $x848 $x185)))
 (let (($x340 (and $x859 $x73)))
 (let (($x219 (and $x340 $x468)))
 (let (($x170 (and $x219 $x436)))
 (let (($x806 (and $x170 $x535)))
 (let (($x676 (and $x806 $x319)))
 (let (($x500 (and $x676 $x378)))
 (let (($x554 (and $x500 $x192)))
 (let (($x417 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x9 (and $x417 $x554)))
 (let (($x518 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x56 (_ bv3 32))))
 (let (($x396 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x155 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x396 $x518)))))))
 (let (($x291 (=> (and $x849 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x396 $x518)))))))
 (let (($x100 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x657 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x489 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x213 (=> $x489 (or false (or false (and true (or $x657 $x100)))))))
 (let (($x333 (=> (and $x849 $x489) (or false (or false (and true (or $x657 $x100)))))))
 (let (($x99 (and $x333 $x291)))
 (let (($x346 (and $x99 $x9)))
 (let (($x715 (=> $x346 $x714)))
 (not $x715))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0 () (_ BitVec 5))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x60 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x506 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x158 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x158) (concat ?x261 (concat ?x506 ?x60)))))
 (let ((?x210 ((_ extract 4 0) ?x201)))
 (let ((?x653 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0 ?x210)))
 (let (($x296 (= (_ bv0 5) ?x653)))
 (let (($x714 (= $x296 true)))
 (let (($x262 (= (_ bv0 5) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_4_0)))
 (let (($x43 (= $x262 true)))
 (let (($x192 (= $x43 true)))
 (let ((?x242 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x47 (= (_ bv0 3) ?x242)))
 (let (($x427 (= $x47 true)))
 (let (($x378 (= $x427 true)))
 (let (($x23 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x24 (=> $x23 false)))
 (let (($x555 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x686 (ite $x555 (_ bv0 32) (_ bv1 32))))
 (let (($x475 (= $x23 (bvuge ?x686 (_ bv1 32)))))
 (let (($x592 (= false false)))
 (let (($x684 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x771 (=> $x684 $x592)))
 (let (($x623 (= $x684 (= ?x686 (_ bv0 32)))))
 (let (($x209 (and $x623 $x771)))
 (let (($x828 (and $x209 $x475)))
 (let (($x410 (and $x828 $x24)))
 (let (($x764 (= $x410 true)))
 (let (($x394 (= $x764 true)))
 (let (($x319 (= $x394 true)))
 (let (($x306 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x204 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x443 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x204) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x204))))
 (let (($x446 (and true $x443)))
 (let (($x541 (and $x443 $x446)))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x854 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x843 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x854))))
 (let (($x700 (= (bvand ?x843 (_ bv4294967288 32)) ?x843)))
 (let (($x821 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x716 (and $x821 $x700)))
 (let (($x662 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x606 (and (and (and (and (and $x446 $x662) $x821) $x716) $x541) $x306)))
 (let (($x68 (= true $x606)))
 (let (($x849 (not $x555)))
 (let (($x344 (=> $x849 $x68)))
 (let (($x189 (= $x344 true)))
 (let (($x207 (= $x189 true)))
 (let (($x535 (= $x207 true)))
 (let (($x343 (= $x849 true)))
 (let (($x191 (= $x343 true)))
 (let (($x436 (= $x191 true)))
 (let (($x392 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x161 (= $x392 true)))
 (let (($x468 (= $x161 true)))
 (let ((?x550 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x404 (= (_ bv0 32) ?x550)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x530 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x804 (and $x116 $x530)))
 (let (($x488 (and $x804 $x404)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x573 (and $x129 $x488)))
 (let (($x458 (= $x573 true)))
 (let (($x610 (= $x458 true)))
 (let (($x73 (= $x610 true)))
 (let (($x575 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x268 (=> $x575 false)))
 (let ((?x577 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x259 (bvuge ?x577 (_ bv1 32))))
 (let (($x682 (= $x575 $x259)))
 (let (($x429 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x80 (=> $x429 $x592)))
 (let (($x283 (= ?x577 (_ bv0 32))))
 (let (($x328 (= $x429 $x283)))
 (let (($x457 (and $x328 $x80)))
 (let (($x482 (and $x457 $x682)))
 (let (($x187 (and $x482 $x268)))
 (let (($x593 (= $x187 true)))
 (let (($x57 (= $x593 true)))
 (let (($x185 (= $x57 true)))
 (let (($x533 (= $x23 $x259)))
 (let (($x297 (= $x684 $x283)))
 (let (($x235 (and $x297 $x771)))
 (let (($x675 (and $x235 $x533)))
 (let (($x29 (and $x675 $x24)))
 (let (($x171 (= $x29 true)))
 (let (($x140 (= $x171 true)))
 (let (($x848 (= $x140 true)))
 (let (($x859 (and $x848 $x185)))
 (let (($x340 (and $x859 $x73)))
 (let (($x219 (and $x340 $x468)))
 (let (($x170 (and $x219 $x436)))
 (let (($x806 (and $x170 $x535)))
 (let (($x676 (and $x806 $x319)))
 (let (($x500 (and $x676 $x378)))
 (let (($x554 (and $x500 $x192)))
 (let (($x417 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x9 (and $x417 $x554)))
 (let (($x518 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x56 (_ bv3 32))))
 (let (($x396 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x155 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x396 $x518)))))))
 (let (($x291 (=> (and $x849 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x396 $x518)))))))
 (let (($x100 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x657 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x489 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x213 (=> $x489 (or false (or false (and true (or $x657 $x100)))))))
 (let (($x333 (=> (and $x849 $x489) (or false (or false (and true (or $x657 $x100)))))))
 (let (($x99 (and $x333 $x291)))
 (let (($x346 (and $x99 $x9)))
 (let (($x715 (=> $x346 $x714)))
 (not $x715))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 150
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0 () (_ BitVec 4))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x347 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x496 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x32 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x154 (concat (select input.dst.llvm-mem ?x32) (concat ?x496 (concat ?x120 ?x347)))))
 (let ((?x278 ((_ extract 3 0) ?x154)))
 (let ((?x260 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0 ?x278)))
 (let (($x391 (= (_ bv0 4) ?x260)))
 (let (($x317 (= $x391 true)))
 (let (($x681 (= (_ bv0 4) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0)))
 (let (($x840 (= $x681 true)))
 (let (($x642 (= $x840 true)))
 (let ((?x435 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x709 (= (_ bv0 3) ?x435)))
 (let (($x284 (= $x709 true)))
 (let (($x548 (= $x284 true)))
 (let (($x448 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x843 (=> $x448 true)))
 (let (($x248 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x853 (ite $x248 (_ bv0 32) (_ bv1 32))))
 (let (($x614 (= $x448 (bvuge ?x853 (_ bv1 32)))))
 (let (($x720 (= false false)))
 (let (($x244 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x821 (=> $x244 $x720)))
 (let (($x334 (= $x244 (= ?x853 (_ bv0 32)))))
 (let (($x432 (and $x334 $x821)))
 (let (($x801 (and $x432 $x614)))
 (let (($x637 (and $x801 $x843)))
 (let (($x512 (= $x637 true)))
 (let (($x236 (= $x512 true)))
 (let (($x238 (= $x236 true)))
 (let (($x544 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x60 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x210 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x60) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x60))))
 (let (($x653 (and true $x210)))
 (let (($x725 (and $x210 $x653)))
 (let ((?x489 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x867 (concat (select input.dst.llvm-mem (bvadd ?x489 (_ bv1 32))) (select input.dst.llvm-mem ?x489))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x489 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x489 (_ bv2 32))) ?x867))))
 (let (($x95 (= (bvand ?x348 (_ bv4294967288 32)) ?x348)))
 (let (($x39 (= (bvand ?x489 (_ bv4294967292 32)) ?x489)))
 (let (($x312 (and $x39 $x95)))
 (let (($x338 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x489 (bvsub ?x489 (_ bv4 32))) (bvult ?x489 (bvsub ?x489 (_ bv4 32))))))
 (let (($x465 (and (and (and (and (and $x653 $x338) $x39) $x312) $x725) $x544)))
 (let (($x69 (= true $x465)))
 (let (($x555 (not $x248)))
 (let (($x444 (=> $x555 $x69)))
 (let (($x315 (= $x444 true)))
 (let (($x783 (= $x315 true)))
 (let (($x409 (= $x783 true)))
 (let (($x811 (= $x555 true)))
 (let (($x261 (= $x811 true)))
 (let (($x523 (= $x261 true)))
 (let (($x554 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x9 (= $x554 true)))
 (let (($x346 (= $x9 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x427 (= (_ bv0 32) ?x47)))
 (let ((?x676 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x803 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x676)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x319 $x803)))
 (let (($x378 (and $x242 $x427)))
 (let (($x394 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x500 (and $x394 $x378)))
 (let (($x97 (= $x500 true)))
 (let (($x546 (= $x97 true)))
 (let (($x262 (= $x546 true)))
 (let (($x806 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x623 (=> $x806 true)))
 (let ((?x662 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x567 (bvuge ?x662 (_ bv1 32))))
 (let (($x686 (= $x806 $x567)))
 (let (($x606 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x344 (=> $x606 $x720)))
 (let (($x273 (= ?x662 (_ bv0 32))))
 (let (($x68 (= $x606 $x273)))
 (let (($x189 (and $x68 $x344)))
 (let (($x425 (and $x189 $x686)))
 (let (($x209 (and $x425 $x623)))
 (let (($x809 (= $x209 true)))
 (let (($x475 (= $x809 true)))
 (let (($x828 (= $x475 true)))
 (let (($x854 (= $x448 $x567)))
 (let (($x683 (= $x244 $x273)))
 (let (($x172 (and $x683 $x821)))
 (let (($x393 (and $x172 $x854)))
 (let (($x305 (and $x393 $x843)))
 (let (($x234 (= $x305 true)))
 (let (($x700 (= $x234 true)))
 (let (($x716 (= $x700 true)))
 (let (($x410 (and $x716 $x828)))
 (let (($x43 (and $x410 $x262)))
 (let (($x413 (and $x43 $x346)))
 (let (($x506 (and $x413 $x523)))
 (let (($x581 (and $x506 $x409)))
 (let (($x832 (and $x581 $x238)))
 (let (($x341 (and $x832 $x548)))
 (let (($x59 (and $x341 $x642)))
 (let (($x684 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x176 (and $x684 $x59)))
 (let (($x299 (bvugt ?x489 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x489 (_ bv3 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x417 (=> (bvule ?x489 (bvsub (bvadd ?x489 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x111 $x299)))))))
 (let (($x380 (=> (and $x555 (bvule ?x489 (bvsub (bvadd ?x489 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x111 $x299)))))))
 (let (($x729 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x377 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x76 (=> $x377 (or false (or false (and true (or $x190 $x729)))))))
 (let (($x659 (=> (and $x555 $x377) (or false (or false (and true (or $x190 $x729)))))))
 (let (($x37 (and $x659 $x380)))
 (let (($x193 (and $x37 $x176)))
 (let (($x868 (=> $x193 $x317)))
 (not $x868))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0 () (_ BitVec 4))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x347 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x496 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x32 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x154 (concat (select input.dst.llvm-mem ?x32) (concat ?x496 (concat ?x120 ?x347)))))
 (let ((?x278 ((_ extract 3 0) ?x154)))
 (let ((?x260 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0 ?x278)))
 (let (($x391 (= (_ bv0 4) ?x260)))
 (let (($x317 (= $x391 true)))
 (let (($x681 (= (_ bv0 4) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0)))
 (let (($x840 (= $x681 true)))
 (let (($x642 (= $x840 true)))
 (let ((?x435 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x709 (= (_ bv0 3) ?x435)))
 (let (($x284 (= $x709 true)))
 (let (($x548 (= $x284 true)))
 (let (($x448 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x843 (=> $x448 true)))
 (let (($x248 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x853 (ite $x248 (_ bv0 32) (_ bv1 32))))
 (let (($x614 (= $x448 (bvuge ?x853 (_ bv1 32)))))
 (let (($x720 (= false false)))
 (let (($x244 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x821 (=> $x244 $x720)))
 (let (($x334 (= $x244 (= ?x853 (_ bv0 32)))))
 (let (($x432 (and $x334 $x821)))
 (let (($x801 (and $x432 $x614)))
 (let (($x637 (and $x801 $x843)))
 (let (($x512 (= $x637 true)))
 (let (($x236 (= $x512 true)))
 (let (($x238 (= $x236 true)))
 (let (($x544 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x60 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x210 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x60) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x60))))
 (let (($x653 (and true $x210)))
 (let (($x725 (and $x210 $x653)))
 (let ((?x489 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x867 (concat (select input.dst.llvm-mem (bvadd ?x489 (_ bv1 32))) (select input.dst.llvm-mem ?x489))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x489 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x489 (_ bv2 32))) ?x867))))
 (let (($x95 (= (bvand ?x348 (_ bv4294967288 32)) ?x348)))
 (let (($x39 (= (bvand ?x489 (_ bv4294967292 32)) ?x489)))
 (let (($x312 (and $x39 $x95)))
 (let (($x338 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x489 (bvsub ?x489 (_ bv4 32))) (bvult ?x489 (bvsub ?x489 (_ bv4 32))))))
 (let (($x465 (and (and (and (and (and $x653 $x338) $x39) $x312) $x725) $x544)))
 (let (($x69 (= true $x465)))
 (let (($x555 (not $x248)))
 (let (($x444 (=> $x555 $x69)))
 (let (($x315 (= $x444 true)))
 (let (($x783 (= $x315 true)))
 (let (($x409 (= $x783 true)))
 (let (($x811 (= $x555 true)))
 (let (($x261 (= $x811 true)))
 (let (($x523 (= $x261 true)))
 (let (($x554 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x9 (= $x554 true)))
 (let (($x346 (= $x9 true)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x427 (= (_ bv0 32) ?x47)))
 (let ((?x676 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x803 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x676)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x319 $x803)))
 (let (($x378 (and $x242 $x427)))
 (let (($x394 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x500 (and $x394 $x378)))
 (let (($x97 (= $x500 true)))
 (let (($x546 (= $x97 true)))
 (let (($x262 (= $x546 true)))
 (let (($x806 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x623 (=> $x806 true)))
 (let ((?x662 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x567 (bvuge ?x662 (_ bv1 32))))
 (let (($x686 (= $x806 $x567)))
 (let (($x606 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x344 (=> $x606 $x720)))
 (let (($x273 (= ?x662 (_ bv0 32))))
 (let (($x68 (= $x606 $x273)))
 (let (($x189 (and $x68 $x344)))
 (let (($x425 (and $x189 $x686)))
 (let (($x209 (and $x425 $x623)))
 (let (($x809 (= $x209 true)))
 (let (($x475 (= $x809 true)))
 (let (($x828 (= $x475 true)))
 (let (($x854 (= $x448 $x567)))
 (let (($x683 (= $x244 $x273)))
 (let (($x172 (and $x683 $x821)))
 (let (($x393 (and $x172 $x854)))
 (let (($x305 (and $x393 $x843)))
 (let (($x234 (= $x305 true)))
 (let (($x700 (= $x234 true)))
 (let (($x716 (= $x700 true)))
 (let (($x410 (and $x716 $x828)))
 (let (($x43 (and $x410 $x262)))
 (let (($x413 (and $x43 $x346)))
 (let (($x506 (and $x413 $x523)))
 (let (($x581 (and $x506 $x409)))
 (let (($x832 (and $x581 $x238)))
 (let (($x341 (and $x832 $x548)))
 (let (($x59 (and $x341 $x642)))
 (let (($x684 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x176 (and $x684 $x59)))
 (let (($x299 (bvugt ?x489 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x489 (_ bv3 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x417 (=> (bvule ?x489 (bvsub (bvadd ?x489 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x111 $x299)))))))
 (let (($x380 (=> (and $x555 (bvule ?x489 (bvsub (bvadd ?x489 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x111 $x299)))))))
 (let (($x729 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x377 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x76 (=> $x377 (or false (or false (and true (or $x190 $x729)))))))
 (let (($x659 (=> (and $x555 $x377) (or false (or false (and true (or $x190 $x729)))))))
 (let (($x37 (and $x659 $x380)))
 (let (($x193 (and $x37 $x176)))
 (let (($x868 (=> $x193 $x317)))
 (not $x868))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0 #b0000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_13)
(function @fun_13
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_13 #b10000000000000000000000000000100) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000111) #b00000000)
 (default #b00001000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ffff000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x5f7eeff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x5f7eeff8 #x0f))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0 () (_ BitVec 4)
    #x0)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ffff003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ffff000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv171888 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv171888 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0 () (_ BitVec 4) (_ bv0 4))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv286536 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv286536 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv286539 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 151
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0 () (_ BitVec 4))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x612 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x846 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x72 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x707 (concat (select input.dst.llvm-mem ?x72) (concat ?x169 (concat ?x846 ?x612)))))
 (let ((?x785 ((_ extract 3 0) ?x707)))
 (let ((?x538 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0 ?x785)))
 (let (($x838 (= (_ bv0 4) ?x538)))
 (let (($x247 (= $x838 true)))
 (let (($x638 (= (_ bv0 4) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0)))
 (let (($x397 (= $x638 true)))
 (let (($x382 (= $x397 true)))
 (let ((?x205 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x740 (= (_ bv0 3) ?x205)))
 (let (($x483 (= $x740 true)))
 (let (($x513 (= $x483 true)))
 (let (($x480 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x348 (=> $x480 false)))
 (let (($x248 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x497 (ite $x248 (_ bv0 32) (_ bv1 32))))
 (let (($x311 (= $x480 (bvuge ?x497 (_ bv1 32)))))
 (let (($x119 (= false false)))
 (let (($x715 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x39 (=> $x715 $x119)))
 (let (($x34 (= $x715 (= ?x497 (_ bv0 32)))))
 (let (($x122 (and $x34 $x39)))
 (let (($x522 (and $x122 $x311)))
 (let (($x364 (and $x522 $x348)))
 (let (($x345 (= $x364 true)))
 (let (($x216 (= $x345 true)))
 (let (($x225 (= $x216 true)))
 (let (($x140 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x347 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x278 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x347) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x347))))
 (let (($x260 (and true $x278)))
 (let (($x429 (and $x278 $x260)))
 (let ((?x377 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv1 32))) (select input.dst.llvm-mem ?x377))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv2 32))) ?x23))))
 (let (($x575 (= (bvand ?x283 (_ bv4294967288 32)) ?x283)))
 (let (($x162 (= (bvand ?x377 (_ bv4294967292 32)) ?x377)))
 (let (($x415 (and $x162 $x575)))
 (let (($x693 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x377 (bvsub ?x377 (_ bv4 32))) (bvult ?x377 (bvsub ?x377 (_ bv4 32))))))
 (let (($x848 (and (and (and (and (and $x260 $x693) $x162) $x415) $x429) $x140)))
 (let (($x328 (= true $x848)))
 (let (($x555 (not $x248)))
 (let (($x859 (=> $x555 $x328)))
 (let (($x212 (= $x859 true)))
 (let (($x593 (= $x212 true)))
 (let (($x57 (= $x593 true)))
 (let (($x822 (= $x555 true)))
 (let (($x496 (= $x822 true)))
 (let (($x252 (= $x496 true)))
 (let (($x59 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x176 (= $x59 true)))
 (let (($x193 (= $x176 true)))
 (let ((?x709 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x709)))
 (let ((?x832 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x832)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x435 (and $x238 $x281)))
 (let (($x548 (and $x435 $x284)))
 (let (($x236 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x341 (and $x236 $x548)))
 (let (($x763 (= $x341 true)))
 (let (($x309 (= $x763 true)))
 (let (($x681 (= $x309 true)))
 (let (($x581 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x334 (=> $x581 false)))
 (let ((?x338 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x539 (bvuge ?x338 (_ bv1 32))))
 (let (($x853 (= $x581 $x539)))
 (let (($x465 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x444 (=> $x465 $x119)))
 (let (($x226 (= ?x338 (_ bv0 32))))
 (let (($x69 (= $x465 $x226)))
 (let (($x315 (and $x69 $x444)))
 (let (($x494 (and $x315 $x853)))
 (let (($x432 (and $x494 $x334)))
 (let (($x788 (= $x432 true)))
 (let (($x614 (= $x788 true)))
 (let (($x801 (= $x614 true)))
 (let (($x867 (= $x480 $x539)))
 (let (($x447 (= $x715 $x226)))
 (let (($x847 (and $x447 $x39)))
 (let (($x363 (and $x847 $x867)))
 (let (($x817 (and $x363 $x348)))
 (let (($x510 (= $x817 true)))
 (let (($x95 (= $x510 true)))
 (let (($x312 (= $x95 true)))
 (let (($x637 (and $x312 $x801)))
 (let (($x840 (and $x637 $x681)))
 (let (($x460 (and $x840 $x193)))
 (let (($x120 (and $x460 $x252)))
 (let (($x482 (and $x120 $x57)))
 (let (($x215 (and $x482 $x225)))
 (let (($x844 (and $x215 $x513)))
 (let (($x369 (and $x844 $x382)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x398 (and $x244 $x369)))
 (let (($x291 (bvugt ?x377 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x377 (_ bv3 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x684 (=> (bvule ?x377 (bvsub (bvadd ?x377 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x291)))))))
 (let (($x102 (=> (and $x555 (bvule ?x377 (bvsub (bvadd ?x377 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x155 $x291)))))))
 (let (($x333 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x396 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x518 (=> $x396 (or false (or false (and true (or $x213 $x333)))))))
 (let (($x158 (=> (and $x555 $x396) (or false (or false (and true (or $x213 $x333)))))))
 (let (($x186 (and $x158 $x102)))
 (let (($x723 (and $x186 $x398)))
 (let (($x507 (=> $x723 $x247)))
 (not $x507))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0 () (_ BitVec 4))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x612 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x846 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x72 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x707 (concat (select input.dst.llvm-mem ?x72) (concat ?x169 (concat ?x846 ?x612)))))
 (let ((?x785 ((_ extract 3 0) ?x707)))
 (let ((?x538 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0 ?x785)))
 (let (($x838 (= (_ bv0 4) ?x538)))
 (let (($x247 (= $x838 true)))
 (let (($x638 (= (_ bv0 4) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_3_0)))
 (let (($x397 (= $x638 true)))
 (let (($x382 (= $x397 true)))
 (let ((?x205 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x740 (= (_ bv0 3) ?x205)))
 (let (($x483 (= $x740 true)))
 (let (($x513 (= $x483 true)))
 (let (($x480 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x348 (=> $x480 false)))
 (let (($x248 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x497 (ite $x248 (_ bv0 32) (_ bv1 32))))
 (let (($x311 (= $x480 (bvuge ?x497 (_ bv1 32)))))
 (let (($x119 (= false false)))
 (let (($x715 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x39 (=> $x715 $x119)))
 (let (($x34 (= $x715 (= ?x497 (_ bv0 32)))))
 (let (($x122 (and $x34 $x39)))
 (let (($x522 (and $x122 $x311)))
 (let (($x364 (and $x522 $x348)))
 (let (($x345 (= $x364 true)))
 (let (($x216 (= $x345 true)))
 (let (($x225 (= $x216 true)))
 (let (($x140 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x347 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x278 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x347) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x347))))
 (let (($x260 (and true $x278)))
 (let (($x429 (and $x278 $x260)))
 (let ((?x377 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv1 32))) (select input.dst.llvm-mem ?x377))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv2 32))) ?x23))))
 (let (($x575 (= (bvand ?x283 (_ bv4294967288 32)) ?x283)))
 (let (($x162 (= (bvand ?x377 (_ bv4294967292 32)) ?x377)))
 (let (($x415 (and $x162 $x575)))
 (let (($x693 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x377 (bvsub ?x377 (_ bv4 32))) (bvult ?x377 (bvsub ?x377 (_ bv4 32))))))
 (let (($x848 (and (and (and (and (and $x260 $x693) $x162) $x415) $x429) $x140)))
 (let (($x328 (= true $x848)))
 (let (($x555 (not $x248)))
 (let (($x859 (=> $x555 $x328)))
 (let (($x212 (= $x859 true)))
 (let (($x593 (= $x212 true)))
 (let (($x57 (= $x593 true)))
 (let (($x822 (= $x555 true)))
 (let (($x496 (= $x822 true)))
 (let (($x252 (= $x496 true)))
 (let (($x59 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x176 (= $x59 true)))
 (let (($x193 (= $x176 true)))
 (let ((?x709 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x709)))
 (let ((?x832 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x832)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x435 (and $x238 $x281)))
 (let (($x548 (and $x435 $x284)))
 (let (($x236 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x341 (and $x236 $x548)))
 (let (($x763 (= $x341 true)))
 (let (($x309 (= $x763 true)))
 (let (($x681 (= $x309 true)))
 (let (($x581 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x334 (=> $x581 false)))
 (let ((?x338 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x539 (bvuge ?x338 (_ bv1 32))))
 (let (($x853 (= $x581 $x539)))
 (let (($x465 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x444 (=> $x465 $x119)))
 (let (($x226 (= ?x338 (_ bv0 32))))
 (let (($x69 (= $x465 $x226)))
 (let (($x315 (and $x69 $x444)))
 (let (($x494 (and $x315 $x853)))
 (let (($x432 (and $x494 $x334)))
 (let (($x788 (= $x432 true)))
 (let (($x614 (= $x788 true)))
 (let (($x801 (= $x614 true)))
 (let (($x867 (= $x480 $x539)))
 (let (($x447 (= $x715 $x226)))
 (let (($x847 (and $x447 $x39)))
 (let (($x363 (and $x847 $x867)))
 (let (($x817 (and $x363 $x348)))
 (let (($x510 (= $x817 true)))
 (let (($x95 (= $x510 true)))
 (let (($x312 (= $x95 true)))
 (let (($x637 (and $x312 $x801)))
 (let (($x840 (and $x637 $x681)))
 (let (($x460 (and $x840 $x193)))
 (let (($x120 (and $x460 $x252)))
 (let (($x482 (and $x120 $x57)))
 (let (($x215 (and $x482 $x225)))
 (let (($x844 (and $x215 $x513)))
 (let (($x369 (and $x844 $x382)))
 (let (($x244 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x398 (and $x244 $x369)))
 (let (($x291 (bvugt ?x377 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x377 (_ bv3 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x684 (=> (bvule ?x377 (bvsub (bvadd ?x377 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x291)))))))
 (let (($x102 (=> (and $x555 (bvule ?x377 (bvsub (bvadd ?x377 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x155 $x291)))))))
 (let (($x333 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x396 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x518 (=> $x396 (or false (or false (and true (or $x213 $x333)))))))
 (let (($x158 (=> (and $x555 $x396) (or false (or false (and true (or $x213 $x333)))))))
 (let (($x186 (and $x158 $x102)))
 (let (($x723 (and $x186 $x398)))
 (let (($x507 (=> $x723 $x247)))
 (not $x507))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 152
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0 () (_ BitVec 3))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x530 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x56 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x404 (concat (select input.dst.llvm-mem ?x56) (concat ?x17 (concat ?x129 ?x530)))))
 (let ((?x804 ((_ extract 2 0) ?x404)))
 (let ((?x488 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0 ?x804)))
 (let (($x610 (= (_ bv0 3) ?x488)))
 (let (($x443 (= $x610 true)))
 (let (($x219 (= (_ bv0 3) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0)))
 (let (($x170 (= $x219 true)))
 (let (($x340 (= $x170 true)))
 (let ((?x573 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x458 (= (_ bv0 3) ?x573)))
 (let (($x78 (= $x458 true)))
 (let (($x73 (= $x78 true)))
 (let (($x771 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x283 (=> $x771 true)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x192 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (= $x771 (bvuge ?x192 (_ bv1 32)))))
 (let (($x666 (= false false)))
 (let (($x868 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x162 (=> $x868 $x666)))
 (let (($x464 (= $x868 (= ?x192 (_ bv0 32)))))
 (let (($x201 (and $x464 $x162)))
 (let (($x316 (and $x201 $x29)))
 (let (($x88 (and $x316 $x283)))
 (let (($x529 (= $x88 true)))
 (let (($x268 (= $x529 true)))
 (let (($x682 (= $x268 true)))
 (let (($x700 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x612 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x785 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x612) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x612))))
 (let (($x538 (and true $x785)))
 (let (($x606 (and $x785 $x538)))
 (let ((?x396 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd ?x396 (_ bv1 32))) (select input.dst.llvm-mem ?x396))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x396 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x396 (_ bv2 32))) ?x448))))
 (let (($x806 (= (bvand ?x273 (_ bv4294967288 32)) ?x273)))
 (let (($x583 (= (bvand ?x396 (_ bv4294967292 32)) ?x396)))
 (let (($x306 (and $x583 $x806)))
 (let (($x286 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x396 (bvsub ?x396 (_ bv4 32))) (bvult ?x396 (bvsub ?x396 (_ bv4 32))))))
 (let (($x716 (and (and (and (and (and $x538 $x286) $x583) $x306) $x606) $x700)))
 (let (($x68 (= true $x716)))
 (let (($x248 (not $x41)))
 (let (($x410 (=> $x248 $x68)))
 (let (($x764 (= $x410 true)))
 (let (($x809 (= $x764 true)))
 (let (($x475 (= $x809 true)))
 (let (($x551 (= $x248 true)))
 (let (($x169 (= $x551 true)))
 (let (($x580 (= $x169 true)))
 (let (($x369 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x398 (= $x369 true)))
 (let (($x723 (= $x398 true)))
 (let ((?x740 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x483 (= (_ bv0 32) ?x740)))
 (let ((?x215 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x390 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x215)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (and $x225 $x390)))
 (let (($x513 (and $x205 $x483)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x844 (and $x216 $x513)))
 (let (($x318 (= $x844 true)))
 (let (($x451 (= $x318 true)))
 (let (($x638 (= $x451 true)))
 (let (($x482 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x34 (=> $x482 true)))
 (let ((?x693 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x80 (bvuge ?x693 (_ bv1 32))))
 (let (($x497 (= $x482 $x80)))
 (let (($x848 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x859 (=> $x848 $x666)))
 (let (($x533 (= ?x693 (_ bv0 32))))
 (let (($x328 (= $x848 $x533)))
 (let (($x212 (and $x328 $x859)))
 (let (($x508 (and $x212 $x497)))
 (let (($x122 (and $x508 $x34)))
 (let (($x535 (= $x122 true)))
 (let (($x311 (= $x535 true)))
 (let (($x522 (= $x311 true)))
 (let (($x23 (= $x771 $x80)))
 (let (($x541 (= $x868 $x533)))
 (let (($x675 (and $x541 $x162)))
 (let (($x302 (and $x675 $x23)))
 (let (($x124 (and $x302 $x283)))
 (let (($x457 (= $x124 true)))
 (let (($x575 (= $x457 true)))
 (let (($x415 (= $x575 true)))
 (let (($x364 (and $x415 $x522)))
 (let (($x397 (and $x364 $x638)))
 (let (($x292 (and $x397 $x723)))
 (let (($x846 (and $x292 $x580)))
 (let (($x425 (and $x846 $x475)))
 (let (($x187 (and $x425 $x682)))
 (let (($x161 (and $x187 $x73)))
 (let (($x550 (and $x161 $x340)))
 (let (($x715 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x204 (and $x715 $x550)))
 (let (($x380 (bvugt ?x396 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x396 (_ bv3 32))))
 (let (($x417 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x244 (=> (bvule ?x396 (bvsub (bvadd ?x396 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x417 $x380)))))))
 (let (($x90 (=> (and $x248 (bvule ?x396 (bvsub (bvadd ?x396 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x417 $x380)))))))
 (let (($x659 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x111 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x299 (=> $x111 (or false (or false (and true (or $x76 $x659)))))))
 (let (($x32 (=> (and $x248 $x111) (or false (or false (and true (or $x76 $x659)))))))
 (let (($x7 (and $x32 $x90)))
 (let (($x191 (and $x7 $x204)))
 (let (($x446 (=> $x191 $x443)))
 (not $x446))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0 () (_ BitVec 3))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x530 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x56 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x404 (concat (select input.dst.llvm-mem ?x56) (concat ?x17 (concat ?x129 ?x530)))))
 (let ((?x804 ((_ extract 2 0) ?x404)))
 (let ((?x488 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0 ?x804)))
 (let (($x610 (= (_ bv0 3) ?x488)))
 (let (($x443 (= $x610 true)))
 (let (($x219 (= (_ bv0 3) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0)))
 (let (($x170 (= $x219 true)))
 (let (($x340 (= $x170 true)))
 (let ((?x573 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x458 (= (_ bv0 3) ?x573)))
 (let (($x78 (= $x458 true)))
 (let (($x73 (= $x78 true)))
 (let (($x771 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x283 (=> $x771 true)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x192 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (= $x771 (bvuge ?x192 (_ bv1 32)))))
 (let (($x666 (= false false)))
 (let (($x868 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x162 (=> $x868 $x666)))
 (let (($x464 (= $x868 (= ?x192 (_ bv0 32)))))
 (let (($x201 (and $x464 $x162)))
 (let (($x316 (and $x201 $x29)))
 (let (($x88 (and $x316 $x283)))
 (let (($x529 (= $x88 true)))
 (let (($x268 (= $x529 true)))
 (let (($x682 (= $x268 true)))
 (let (($x700 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x612 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x785 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x612) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x612))))
 (let (($x538 (and true $x785)))
 (let (($x606 (and $x785 $x538)))
 (let ((?x396 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd ?x396 (_ bv1 32))) (select input.dst.llvm-mem ?x396))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x396 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x396 (_ bv2 32))) ?x448))))
 (let (($x806 (= (bvand ?x273 (_ bv4294967288 32)) ?x273)))
 (let (($x583 (= (bvand ?x396 (_ bv4294967292 32)) ?x396)))
 (let (($x306 (and $x583 $x806)))
 (let (($x286 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x396 (bvsub ?x396 (_ bv4 32))) (bvult ?x396 (bvsub ?x396 (_ bv4 32))))))
 (let (($x716 (and (and (and (and (and $x538 $x286) $x583) $x306) $x606) $x700)))
 (let (($x68 (= true $x716)))
 (let (($x248 (not $x41)))
 (let (($x410 (=> $x248 $x68)))
 (let (($x764 (= $x410 true)))
 (let (($x809 (= $x764 true)))
 (let (($x475 (= $x809 true)))
 (let (($x551 (= $x248 true)))
 (let (($x169 (= $x551 true)))
 (let (($x580 (= $x169 true)))
 (let (($x369 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x398 (= $x369 true)))
 (let (($x723 (= $x398 true)))
 (let ((?x740 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x483 (= (_ bv0 32) ?x740)))
 (let ((?x215 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x390 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x215)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (and $x225 $x390)))
 (let (($x513 (and $x205 $x483)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x844 (and $x216 $x513)))
 (let (($x318 (= $x844 true)))
 (let (($x451 (= $x318 true)))
 (let (($x638 (= $x451 true)))
 (let (($x482 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x34 (=> $x482 true)))
 (let ((?x693 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x80 (bvuge ?x693 (_ bv1 32))))
 (let (($x497 (= $x482 $x80)))
 (let (($x848 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x859 (=> $x848 $x666)))
 (let (($x533 (= ?x693 (_ bv0 32))))
 (let (($x328 (= $x848 $x533)))
 (let (($x212 (and $x328 $x859)))
 (let (($x508 (and $x212 $x497)))
 (let (($x122 (and $x508 $x34)))
 (let (($x535 (= $x122 true)))
 (let (($x311 (= $x535 true)))
 (let (($x522 (= $x311 true)))
 (let (($x23 (= $x771 $x80)))
 (let (($x541 (= $x868 $x533)))
 (let (($x675 (and $x541 $x162)))
 (let (($x302 (and $x675 $x23)))
 (let (($x124 (and $x302 $x283)))
 (let (($x457 (= $x124 true)))
 (let (($x575 (= $x457 true)))
 (let (($x415 (= $x575 true)))
 (let (($x364 (and $x415 $x522)))
 (let (($x397 (and $x364 $x638)))
 (let (($x292 (and $x397 $x723)))
 (let (($x846 (and $x292 $x580)))
 (let (($x425 (and $x846 $x475)))
 (let (($x187 (and $x425 $x682)))
 (let (($x161 (and $x187 $x73)))
 (let (($x550 (and $x161 $x340)))
 (let (($x715 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x204 (and $x715 $x550)))
 (let (($x380 (bvugt ?x396 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x396 (_ bv3 32))))
 (let (($x417 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x244 (=> (bvule ?x396 (bvsub (bvadd ?x396 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x417 $x380)))))))
 (let (($x90 (=> (and $x248 (bvule ?x396 (bvsub (bvadd ?x396 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x417 $x380)))))))
 (let (($x659 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x111 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x299 (=> $x111 (or false (or false (and true (or $x76 $x659)))))))
 (let (($x32 (=> (and $x248 $x111) (or false (or false (and true (or $x76 $x659)))))))
 (let (($x7 (and $x32 $x90)))
 (let (($x191 (and $x7 $x204)))
 (let (($x446 (=> $x191 $x443)))
 (not $x446))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0 #b000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_13)
(function @fun_13
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_13 #b10000000000000000000000000000100) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000111) #b00000000)
 (default #b00000100))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ffff000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x5f7eeff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x5f7eeff8 #x07))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0 () (_ BitVec 3)
    #b000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ffff003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ffff000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv167888 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv167888 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0 () (_ BitVec 3) (_ bv0 3))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv283912 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv283912 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv283915 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 153
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0 () (_ BitVec 3))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x554 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x489 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x242 (concat (select input.dst.llvm-mem ?x489) (concat ?x168 (concat ?x319 ?x554)))))
 (let ((?x378 ((_ extract 2 0) ?x242)))
 (let ((?x546 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0 ?x378)))
 (let (($x210 (= (_ bv0 3) ?x546)))
 (let (($x653 (= $x210 true)))
 (let (($x506 (= (_ bv0 3) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0)))
 (let (($x43 (= $x506 true)))
 (let (($x47 (= $x43 true)))
 (let ((?x97 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x403 (= (_ bv0 3) ?x97)))
 (let (($x262 (= $x403 true)))
 (let (($x9 (= $x262 true)))
 (let (($x821 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x273 (=> $x821 false)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x24 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (= $x821 (bvuge ?x24 (_ bv1 32)))))
 (let (($x297 (= false false)))
 (let (($x507 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x583 (=> $x507 $x297)))
 (let (($x154 (= $x507 (= ?x24 (_ bv0 32)))))
 (let (($x278 (and $x154 $x583)))
 (let (($x135 (and $x278 $x182)))
 (let (($x592 (and $x135 $x273)))
 (let (($x623 (= $x592 true)))
 (let (($x686 (= $x623 true)))
 (let (($x209 (= $x686 true)))
 (let (($x867 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x116 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x488 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x116) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x116))))
 (let (($x610 (and true $x488)))
 (let (($x510 (and $x488 $x610)))
 (let ((?x111 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x657 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x657))))
 (let (($x544 (= (bvand ?x100 (_ bv4294967288 32)) ?x100)))
 (let (($x444 (= (bvand ?x111 (_ bv4294967292 32)) ?x111)))
 (let (($x465 (and $x444 $x544)))
 (let (($x429 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x111 (bvsub ?x111 (_ bv4 32))) (bvult ?x111 (bvsub ?x111 (_ bv4 32))))))
 (let (($x69 (and (and (and (and (and $x610 $x429) $x444) $x465) $x510) $x867)))
 (let (($x637 (= true $x69)))
 (let (($x248 (not $x41)))
 (let (($x512 (=> $x248 $x637)))
 (let (($x788 (= $x512 true)))
 (let (($x614 (= $x788 true)))
 (let (($x494 (= $x614 true)))
 (let (($x17 (= $x248 true)))
 (let (($x392 (= $x17 true)))
 (let (($x129 (= $x392 true)))
 (let (($x204 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x191 (= $x204 true)))
 (let (($x436 (= $x191 true)))
 (let ((?x458 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x458)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x468 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x187)))
 (let (($x682 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x573 (and $x682 $x468)))
 (let (($x73 (and $x573 $x78)))
 (let (($x268 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x268 $x73)))
 (let (($x343 (= $x161 true)))
 (let (($x219 (= $x343 true)))
 (let (($x170 (= $x219 true)))
 (let (($x425 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x464 (=> $x425 false)))
 (let ((?x286 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x344 (bvuge ?x286 (_ bv1 32))))
 (let (($x192 (= $x425 $x344)))
 (let (($x716 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x410 (=> $x716 $x297)))
 (let (($x854 (= ?x286 (_ bv0 32))))
 (let (($x68 (= $x716 $x854)))
 (let (($x764 (and $x68 $x410)))
 (let (($x808 (and $x764 $x192)))
 (let (($x201 (and $x808 $x464)))
 (let (($x409 (= $x201 true)))
 (let (($x29 (= $x409 true)))
 (let (($x316 (= $x29 true)))
 (let (($x448 (= $x821 $x344)))
 (let (($x725 (= $x507 $x854)))
 (let (($x393 (and $x725 $x583)))
 (let (($x104 (and $x393 $x448)))
 (let (($x313 (and $x104 $x273)))
 (let (($x189 (= $x313 true)))
 (let (($x806 (= $x189 true)))
 (let (($x306 (= $x806 true)))
 (let (($x88 (and $x306 $x316)))
 (let (($x340 (and $x88 $x170)))
 (let (($x185 (and $x340 $x436)))
 (let (($x530 (and $x185 $x129)))
 (let (($x334 (and $x530 $x494)))
 (let (($x346 (and $x334 $x209)))
 (let (($x811 (and $x346 $x9)))
 (let (($x60 (and $x811 $x47)))
 (let (($x868 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x261 (and $x868 $x60)))
 (let (($x102 (bvugt ?x111 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x111 (_ bv3 32))))
 (let (($x684 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x715 (=> (bvule ?x111 (bvsub (bvadd ?x111 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x684 $x102)))))))
 (let (($x782 (=> (and $x248 (bvule ?x111 (bvsub (bvadd ?x111 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x684 $x102)))))))
 (let (($x158 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x518 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x489)))
 (let (($x155 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x291 (=> $x155 (or false (or false (and true (or $x518 $x158)))))))
 (let (($x72 (=> (and $x248 $x155) (or false (or false (and true (or $x518 $x158)))))))
 (let (($x99 (and $x72 $x782)))
 (let (($x803 (and $x99 $x261)))
 (let (($x714 (=> $x803 $x653)))
 (not $x714))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0 () (_ BitVec 3))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x554 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x489 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x242 (concat (select input.dst.llvm-mem ?x489) (concat ?x168 (concat ?x319 ?x554)))))
 (let ((?x378 ((_ extract 2 0) ?x242)))
 (let ((?x546 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0 ?x378)))
 (let (($x210 (= (_ bv0 3) ?x546)))
 (let (($x653 (= $x210 true)))
 (let (($x506 (= (_ bv0 3) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_2_0)))
 (let (($x43 (= $x506 true)))
 (let (($x47 (= $x43 true)))
 (let ((?x97 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x403 (= (_ bv0 3) ?x97)))
 (let (($x262 (= $x403 true)))
 (let (($x9 (= $x262 true)))
 (let (($x821 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x273 (=> $x821 false)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x24 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (= $x821 (bvuge ?x24 (_ bv1 32)))))
 (let (($x297 (= false false)))
 (let (($x507 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x583 (=> $x507 $x297)))
 (let (($x154 (= $x507 (= ?x24 (_ bv0 32)))))
 (let (($x278 (and $x154 $x583)))
 (let (($x135 (and $x278 $x182)))
 (let (($x592 (and $x135 $x273)))
 (let (($x623 (= $x592 true)))
 (let (($x686 (= $x623 true)))
 (let (($x209 (= $x686 true)))
 (let (($x867 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x116 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x488 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x116) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x116))))
 (let (($x610 (and true $x488)))
 (let (($x510 (and $x488 $x610)))
 (let ((?x111 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x657 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x657))))
 (let (($x544 (= (bvand ?x100 (_ bv4294967288 32)) ?x100)))
 (let (($x444 (= (bvand ?x111 (_ bv4294967292 32)) ?x111)))
 (let (($x465 (and $x444 $x544)))
 (let (($x429 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x111 (bvsub ?x111 (_ bv4 32))) (bvult ?x111 (bvsub ?x111 (_ bv4 32))))))
 (let (($x69 (and (and (and (and (and $x610 $x429) $x444) $x465) $x510) $x867)))
 (let (($x637 (= true $x69)))
 (let (($x248 (not $x41)))
 (let (($x512 (=> $x248 $x637)))
 (let (($x788 (= $x512 true)))
 (let (($x614 (= $x788 true)))
 (let (($x494 (= $x614 true)))
 (let (($x17 (= $x248 true)))
 (let (($x392 (= $x17 true)))
 (let (($x129 (= $x392 true)))
 (let (($x204 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x191 (= $x204 true)))
 (let (($x436 (= $x191 true)))
 (let ((?x458 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x458)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x468 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x187)))
 (let (($x682 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x573 (and $x682 $x468)))
 (let (($x73 (and $x573 $x78)))
 (let (($x268 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x268 $x73)))
 (let (($x343 (= $x161 true)))
 (let (($x219 (= $x343 true)))
 (let (($x170 (= $x219 true)))
 (let (($x425 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x464 (=> $x425 false)))
 (let ((?x286 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x344 (bvuge ?x286 (_ bv1 32))))
 (let (($x192 (= $x425 $x344)))
 (let (($x716 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x410 (=> $x716 $x297)))
 (let (($x854 (= ?x286 (_ bv0 32))))
 (let (($x68 (= $x716 $x854)))
 (let (($x764 (and $x68 $x410)))
 (let (($x808 (and $x764 $x192)))
 (let (($x201 (and $x808 $x464)))
 (let (($x409 (= $x201 true)))
 (let (($x29 (= $x409 true)))
 (let (($x316 (= $x29 true)))
 (let (($x448 (= $x821 $x344)))
 (let (($x725 (= $x507 $x854)))
 (let (($x393 (and $x725 $x583)))
 (let (($x104 (and $x393 $x448)))
 (let (($x313 (and $x104 $x273)))
 (let (($x189 (= $x313 true)))
 (let (($x806 (= $x189 true)))
 (let (($x306 (= $x806 true)))
 (let (($x88 (and $x306 $x316)))
 (let (($x340 (and $x88 $x170)))
 (let (($x185 (and $x340 $x436)))
 (let (($x530 (and $x185 $x129)))
 (let (($x334 (and $x530 $x494)))
 (let (($x346 (and $x334 $x209)))
 (let (($x811 (and $x346 $x9)))
 (let (($x60 (and $x811 $x47)))
 (let (($x868 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x261 (and $x868 $x60)))
 (let (($x102 (bvugt ?x111 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x111 (_ bv3 32))))
 (let (($x684 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x715 (=> (bvule ?x111 (bvsub (bvadd ?x111 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x684 $x102)))))))
 (let (($x782 (=> (and $x248 (bvule ?x111 (bvsub (bvadd ?x111 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x684 $x102)))))))
 (let (($x158 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x518 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x489)))
 (let (($x155 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x291 (=> $x155 (or false (or false (and true (or $x518 $x158)))))))
 (let (($x72 (=> (and $x248 $x155) (or false (or false (and true (or $x518 $x158)))))))
 (let (($x99 (and $x72 $x782)))
 (let (($x803 (and $x99 $x261)))
 (let (($x714 (=> $x803 $x653)))
 (not $x714))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 154
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x236 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x377 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x309 (concat (select input.dst.llvm-mem ?x377) (concat ?x193 (concat ?x236 ?x238)))))
 (let ((?x642 ((_ extract 1 0) ?x309)))
 (let ((?x260 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x642)))
 (let (($x317 (= (_ bv0 2) ?x260)))
 (let (($x593 (= $x317 true)))
 (let (($x341 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x284 (= $x341 true)))
 (let (($x496 (= $x284 true)))
 (let ((?x709 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x681 (= (_ bv0 3) ?x709)))
 (let (($x840 (= $x681 true)))
 (let (($x822 (= $x840 true)))
 (let (($x480 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x100 (=> $x480 true)))
 (let (($x352 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x843 (ite $x352 (_ bv0 32) (_ bv1 32))))
 (let (($x849 (= $x480 (bvuge ?x843 (_ bv1 32)))))
 (let (($x520 (= false false)))
 (let (($x588 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x444 (=> $x588 $x520)))
 (let (($x707 (= $x588 (= ?x843 (_ bv0 32)))))
 (let (($x785 (and $x707 $x444)))
 (let (($x235 (and $x785 $x849)))
 (let (($x720 (and $x235 $x100)))
 (let (($x853 (= $x720 true)))
 (let (($x432 (= $x853 true)))
 (let (($x801 (= $x432 true)))
 (let (($x23 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x828 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x546 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x828) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x828))))
 (let (($x210 (and true $x546)))
 (let (($x457 (and $x546 $x210)))
 (let ((?x155 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x729 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x555))))
 (let (($x140 (= (bvand ?x729 (_ bv4294967288 32)) ?x729)))
 (let (($x859 (= (bvand ?x155 (_ bv4294967292 32)) ?x155)))
 (let (($x848 (and $x859 $x140)))
 (let (($x606 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x155 (bvsub ?x155 (_ bv4 32))) (bvult ?x155 (bvsub ?x155 (_ bv4 32))))))
 (let (($x328 (and (and (and (and (and $x210 $x606) $x859) $x848) $x457) $x23)))
 (let (($x364 (= true $x328)))
 (let (($x41 (not $x352)))
 (let (($x345 (=> $x41 $x364)))
 (let (($x535 (= $x345 true)))
 (let (($x311 (= $x535 true)))
 (let (($x508 (= $x311 true)))
 (let (($x168 (= $x41 true)))
 (let (($x394 (= $x168 true)))
 (let (($x319 (= $x394 true)))
 (let (($x261 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x803 (= $x261 true)))
 (let (($x427 (= $x803 true)))
 (let ((?x403 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x262 (= (_ bv0 32) ?x403)))
 (let ((?x346 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x500 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x346)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x209 $x500)))
 (let (($x9 (and $x97 $x262)))
 (let (($x686 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x811 (and $x686 $x9)))
 (let (($x413 (= $x811 true)))
 (let (($x506 (= $x413 true)))
 (let (($x43 (= $x506 true)))
 (let (($x334 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x154 (=> $x334 true)))
 (let ((?x429 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x429 (_ bv1 32))))
 (let (($x24 (= $x334 $x119)))
 (let (($x69 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x512 (=> $x69 $x520)))
 (let (($x363 (= ?x429 (_ bv0 32))))
 (let (($x637 (= $x69 $x363)))
 (let (($x788 (and $x637 $x512)))
 (let (($x171 (and $x788 $x24)))
 (let (($x278 (and $x171 $x154)))
 (let (($x305 (= $x278 true)))
 (let (($x182 (= $x305 true)))
 (let (($x135 (= $x182 true)))
 (let (($x657 (= $x480 $x119)))
 (let (($x683 (= $x588 $x363)))
 (let (($x539 (and $x683 $x444)))
 (let (($x338 (and $x539 $x657)))
 (let (($x315 (and $x338 $x100)))
 (let (($x581 (= $x315 true)))
 (let (($x544 (= $x581 true)))
 (let (($x465 (= $x544 true)))
 (let (($x592 (and $x465 $x135)))
 (let (($x47 (and $x592 $x43)))
 (let (($x676 (and $x47 $x427)))
 (let (($x554 (and $x676 $x319)))
 (let (($x34 (and $x554 $x508)))
 (let (($x460 (and $x34 $x801)))
 (let (($x120 (and $x460 $x822)))
 (let (($x252 (and $x120 $x496)))
 (let (($x507 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x59 (and $x507 $x252)))
 (let (($x90 (bvugt ?x155 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x155 (_ bv3 32))))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x868 (=> (bvule ?x155 (bvsub (bvadd ?x155 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x244 $x90)))))))
 (let (($x296 (=> (and $x41 (bvule ?x155 (bvsub (bvadd ?x155 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x244 $x90)))))))
 (let (($x32 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x377)))
 (let (($x417 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x380 (=> $x417 (or false (or false (and true (or $x299 $x32)))))))
 (let (($x56 (=> (and $x41 $x417) (or false (or false (and true (or $x299 $x32)))))))
 (let (($x37 (and $x56 $x296)))
 (let (($x461 (and $x37 $x59)))
 (let (($x57 (=> $x461 $x593)))
 (not $x57))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x236 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x377 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x309 (concat (select input.dst.llvm-mem ?x377) (concat ?x193 (concat ?x236 ?x238)))))
 (let ((?x642 ((_ extract 1 0) ?x309)))
 (let ((?x260 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x642)))
 (let (($x317 (= (_ bv0 2) ?x260)))
 (let (($x593 (= $x317 true)))
 (let (($x341 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x284 (= $x341 true)))
 (let (($x496 (= $x284 true)))
 (let ((?x709 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x681 (= (_ bv0 3) ?x709)))
 (let (($x840 (= $x681 true)))
 (let (($x822 (= $x840 true)))
 (let (($x480 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x100 (=> $x480 true)))
 (let (($x352 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x843 (ite $x352 (_ bv0 32) (_ bv1 32))))
 (let (($x849 (= $x480 (bvuge ?x843 (_ bv1 32)))))
 (let (($x520 (= false false)))
 (let (($x588 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x444 (=> $x588 $x520)))
 (let (($x707 (= $x588 (= ?x843 (_ bv0 32)))))
 (let (($x785 (and $x707 $x444)))
 (let (($x235 (and $x785 $x849)))
 (let (($x720 (and $x235 $x100)))
 (let (($x853 (= $x720 true)))
 (let (($x432 (= $x853 true)))
 (let (($x801 (= $x432 true)))
 (let (($x23 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x828 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x546 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x828) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x828))))
 (let (($x210 (and true $x546)))
 (let (($x457 (and $x546 $x210)))
 (let ((?x155 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x729 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x555))))
 (let (($x140 (= (bvand ?x729 (_ bv4294967288 32)) ?x729)))
 (let (($x859 (= (bvand ?x155 (_ bv4294967292 32)) ?x155)))
 (let (($x848 (and $x859 $x140)))
 (let (($x606 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x155 (bvsub ?x155 (_ bv4 32))) (bvult ?x155 (bvsub ?x155 (_ bv4 32))))))
 (let (($x328 (and (and (and (and (and $x210 $x606) $x859) $x848) $x457) $x23)))
 (let (($x364 (= true $x328)))
 (let (($x41 (not $x352)))
 (let (($x345 (=> $x41 $x364)))
 (let (($x535 (= $x345 true)))
 (let (($x311 (= $x535 true)))
 (let (($x508 (= $x311 true)))
 (let (($x168 (= $x41 true)))
 (let (($x394 (= $x168 true)))
 (let (($x319 (= $x394 true)))
 (let (($x261 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x803 (= $x261 true)))
 (let (($x427 (= $x803 true)))
 (let ((?x403 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x262 (= (_ bv0 32) ?x403)))
 (let ((?x346 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x500 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x346)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x209 $x500)))
 (let (($x9 (and $x97 $x262)))
 (let (($x686 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x811 (and $x686 $x9)))
 (let (($x413 (= $x811 true)))
 (let (($x506 (= $x413 true)))
 (let (($x43 (= $x506 true)))
 (let (($x334 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x154 (=> $x334 true)))
 (let ((?x429 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x429 (_ bv1 32))))
 (let (($x24 (= $x334 $x119)))
 (let (($x69 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x512 (=> $x69 $x520)))
 (let (($x363 (= ?x429 (_ bv0 32))))
 (let (($x637 (= $x69 $x363)))
 (let (($x788 (and $x637 $x512)))
 (let (($x171 (and $x788 $x24)))
 (let (($x278 (and $x171 $x154)))
 (let (($x305 (= $x278 true)))
 (let (($x182 (= $x305 true)))
 (let (($x135 (= $x182 true)))
 (let (($x657 (= $x480 $x119)))
 (let (($x683 (= $x588 $x363)))
 (let (($x539 (and $x683 $x444)))
 (let (($x338 (and $x539 $x657)))
 (let (($x315 (and $x338 $x100)))
 (let (($x581 (= $x315 true)))
 (let (($x544 (= $x581 true)))
 (let (($x465 (= $x544 true)))
 (let (($x592 (and $x465 $x135)))
 (let (($x47 (and $x592 $x43)))
 (let (($x676 (and $x47 $x427)))
 (let (($x554 (and $x676 $x319)))
 (let (($x34 (and $x554 $x508)))
 (let (($x460 (and $x34 $x801)))
 (let (($x120 (and $x460 $x822)))
 (let (($x252 (and $x120 $x496)))
 (let (($x507 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x59 (and $x507 $x252)))
 (let (($x90 (bvugt ?x155 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x155 (_ bv3 32))))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x868 (=> (bvule ?x155 (bvsub (bvadd ?x155 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x244 $x90)))))))
 (let (($x296 (=> (and $x41 (bvule ?x155 (bvsub (bvadd ?x155 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x244 $x90)))))))
 (let (($x32 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x377)))
 (let (($x417 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x380 (=> $x417 (or false (or false (and true (or $x299 $x32)))))))
 (let (($x56 (=> (and $x41 $x417) (or false (or false (and true (or $x299 $x32)))))))
 (let (($x37 (and $x56 $x296)))
 (let (($x461 (and $x37 $x59)))
 (let (($x57 (=> $x461 $x593)))
 (not $x57))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 #b00)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_13)
(function @fun_13
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_13 #b10000000000000000000000000000100) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000111) #b00000000)
 (default #b00000010))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ffff000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x5f7eeff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x5f7eeff8 #x03))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2)
    #b00)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ffff003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ffff000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv238544 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv238544 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2) (_ bv0 2))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv284936 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv284936 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv284939 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 155
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x196 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x612 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x396 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x513 (concat (select input.dst.llvm-mem ?x396) (concat ?x612 (concat ?x215 ?x196)))))
 (let ((?x451 ((_ extract 1 0) ?x513)))
 (let ((?x382 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x451)))
 (let (($x538 (= (_ bv0 2) ?x382)))
 (let (($x247 (= $x538 true)))
 (let (($x563 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x844 (= $x563 true)))
 (let (($x483 (= $x844 true)))
 (let ((?x318 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x740 (= (_ bv0 3) ?x318)))
 (let (($x638 (= $x740 true)))
 (let (($x397 (= $x638 true)))
 (let (($x771 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x729 (=> $x771 false)))
 (let (($x352 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x550 (ite $x352 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (= $x771 (bvuge ?x550 (_ bv1 32)))))
 (let (($x365 (= false false)))
 (let (($x783 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x859 (=> $x783 $x365)))
 (let (($x95 (= $x783 (= ?x550 (_ bv0 32)))))
 (let (($x804 (and $x95 $x859)))
 (let (($x172 (and $x804 $x124)))
 (let (($x577 (and $x172 $x729)))
 (let (($x39 (= $x577 true)))
 (let (($x497 (= $x39 true)))
 (let (($x122 (= $x497 true)))
 (let (($x806 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x642 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x238) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x238))))
 (let (($x260 (and true $x642)))
 (let (($x716 (and $x642 $x260)))
 (let ((?x417 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x821 (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv1 32))) (select input.dst.llvm-mem ?x417))))
 (let ((?x854 (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv2 32))) ?x821))))
 (let (($x425 (= (bvand ?x854 (_ bv4294967288 32)) ?x854)))
 (let (($x349 (= (bvand ?x417 (_ bv4294967292 32)) ?x417)))
 (let (($x700 (and $x349 $x425)))
 (let (($x348 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x417 (bvsub ?x417 (_ bv4 32))) (bvult ?x417 (bvsub ?x417 (_ bv4 32))))))
 (let (($x306 (and (and (and (and (and $x260 $x348) $x349) $x700) $x716) $x806)))
 (let (($x68 (= true $x306)))
 (let (($x41 (not $x352)))
 (let (($x88 (=> $x41 $x68)))
 (let (($x529 (= $x88 true)))
 (let (($x409 (= $x529 true)))
 (let (($x29 (= $x409 true)))
 (let (($x347 (= $x41 true)))
 (let (($x193 (= $x347 true)))
 (let (($x832 (= $x193 true)))
 (let (($x252 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x59 (= $x252 true)))
 (let (($x461 (= $x59 true)))
 (let ((?x681 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x840 (= (_ bv0 32) ?x681)))
 (let ((?x460 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x763 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x460)))
 (let (($x801 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x709 (and $x801 $x763)))
 (let (($x822 (and $x709 $x840)))
 (let (($x432 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x432 $x822)))
 (let (($x176 (= $x120 true)))
 (let (($x303 (= $x176 true)))
 (let (($x341 (= $x303 true)))
 (let (($x34 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x707 (=> $x34 false)))
 (let ((?x606 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x666 (bvuge ?x606 (_ bv1 32))))
 (let (($x843 (= $x34 $x666)))
 (let (($x328 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x345 (=> $x328 $x365)))
 (let (($x302 (= ?x606 (_ bv0 32))))
 (let (($x364 (= $x328 $x302)))
 (let (($x535 (and $x364 $x345)))
 (let (($x234 (and $x535 $x843)))
 (let (($x785 (and $x234 $x707)))
 (let (($x817 (= $x785 true)))
 (let (($x849 (= $x817 true)))
 (let (($x235 (= $x849 true)))
 (let (($x555 (= $x771 $x666)))
 (let (($x447 (= $x783 $x302)))
 (let (($x80 (and $x447 $x859)))
 (let (($x693 (and $x80 $x555)))
 (let (($x212 (and $x693 $x729)))
 (let (($x482 (= $x212 true)))
 (let (($x140 (= $x482 true)))
 (let (($x848 (= $x140 true)))
 (let (($x720 (and $x848 $x235)))
 (let (($x284 (and $x720 $x341)))
 (let (($x548 (and $x284 $x461)))
 (let (($x236 (and $x548 $x832)))
 (let (($x808 (and $x236 $x29)))
 (let (($x522 (and $x808 $x122)))
 (let (($x551 (and $x522 $x397)))
 (let (($x169 (and $x551 $x483)))
 (let (($x588 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x580 (and $x588 $x169)))
 (let (($x782 (bvugt ?x417 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x417 (_ bv3 32))))
 (let (($x715 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x507 (=> (bvule ?x417 (bvsub (bvadd ?x417 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x715 $x782)))))))
 (let (($x391 (=> (and $x41 (bvule ?x417 (bvsub (bvadd ?x417 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x715 $x782)))))))
 (let (($x72 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x396)))
 (let (($x684 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x102 (=> $x684 (or false (or false (and true (or $x291 $x72)))))))
 (let (($x489 (=> (and $x41 $x684) (or false (or false (and true (or $x291 $x72)))))))
 (let (($x186 (and $x489 $x391)))
 (let (($x369 (and $x186 $x580)))
 (let (($x809 (=> $x369 $x247)))
 (not $x809))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 () (_ BitVec 2))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x196 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x612 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x396 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x513 (concat (select input.dst.llvm-mem ?x396) (concat ?x612 (concat ?x215 ?x196)))))
 (let ((?x451 ((_ extract 1 0) ?x513)))
 (let ((?x382 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0 ?x451)))
 (let (($x538 (= (_ bv0 2) ?x382)))
 (let (($x247 (= $x538 true)))
 (let (($x563 (= (_ bv0 2) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_1_0)))
 (let (($x844 (= $x563 true)))
 (let (($x483 (= $x844 true)))
 (let ((?x318 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x740 (= (_ bv0 3) ?x318)))
 (let (($x638 (= $x740 true)))
 (let (($x397 (= $x638 true)))
 (let (($x771 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x729 (=> $x771 false)))
 (let (($x352 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x550 (ite $x352 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (= $x771 (bvuge ?x550 (_ bv1 32)))))
 (let (($x365 (= false false)))
 (let (($x783 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x859 (=> $x783 $x365)))
 (let (($x95 (= $x783 (= ?x550 (_ bv0 32)))))
 (let (($x804 (and $x95 $x859)))
 (let (($x172 (and $x804 $x124)))
 (let (($x577 (and $x172 $x729)))
 (let (($x39 (= $x577 true)))
 (let (($x497 (= $x39 true)))
 (let (($x122 (= $x497 true)))
 (let (($x806 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x642 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x238) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x238))))
 (let (($x260 (and true $x642)))
 (let (($x716 (and $x642 $x260)))
 (let ((?x417 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x821 (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv1 32))) (select input.dst.llvm-mem ?x417))))
 (let ((?x854 (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv2 32))) ?x821))))
 (let (($x425 (= (bvand ?x854 (_ bv4294967288 32)) ?x854)))
 (let (($x349 (= (bvand ?x417 (_ bv4294967292 32)) ?x417)))
 (let (($x700 (and $x349 $x425)))
 (let (($x348 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x417 (bvsub ?x417 (_ bv4 32))) (bvult ?x417 (bvsub ?x417 (_ bv4 32))))))
 (let (($x306 (and (and (and (and (and $x260 $x348) $x349) $x700) $x716) $x806)))
 (let (($x68 (= true $x306)))
 (let (($x41 (not $x352)))
 (let (($x88 (=> $x41 $x68)))
 (let (($x529 (= $x88 true)))
 (let (($x409 (= $x529 true)))
 (let (($x29 (= $x409 true)))
 (let (($x347 (= $x41 true)))
 (let (($x193 (= $x347 true)))
 (let (($x832 (= $x193 true)))
 (let (($x252 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x59 (= $x252 true)))
 (let (($x461 (= $x59 true)))
 (let ((?x681 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x840 (= (_ bv0 32) ?x681)))
 (let ((?x460 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x763 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x460)))
 (let (($x801 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x709 (and $x801 $x763)))
 (let (($x822 (and $x709 $x840)))
 (let (($x432 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x432 $x822)))
 (let (($x176 (= $x120 true)))
 (let (($x303 (= $x176 true)))
 (let (($x341 (= $x303 true)))
 (let (($x34 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x707 (=> $x34 false)))
 (let ((?x606 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x666 (bvuge ?x606 (_ bv1 32))))
 (let (($x843 (= $x34 $x666)))
 (let (($x328 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x345 (=> $x328 $x365)))
 (let (($x302 (= ?x606 (_ bv0 32))))
 (let (($x364 (= $x328 $x302)))
 (let (($x535 (and $x364 $x345)))
 (let (($x234 (and $x535 $x843)))
 (let (($x785 (and $x234 $x707)))
 (let (($x817 (= $x785 true)))
 (let (($x849 (= $x817 true)))
 (let (($x235 (= $x849 true)))
 (let (($x555 (= $x771 $x666)))
 (let (($x447 (= $x783 $x302)))
 (let (($x80 (and $x447 $x859)))
 (let (($x693 (and $x80 $x555)))
 (let (($x212 (and $x693 $x729)))
 (let (($x482 (= $x212 true)))
 (let (($x140 (= $x482 true)))
 (let (($x848 (= $x140 true)))
 (let (($x720 (and $x848 $x235)))
 (let (($x284 (and $x720 $x341)))
 (let (($x548 (and $x284 $x461)))
 (let (($x236 (and $x548 $x832)))
 (let (($x808 (and $x236 $x29)))
 (let (($x522 (and $x808 $x122)))
 (let (($x551 (and $x522 $x397)))
 (let (($x169 (and $x551 $x483)))
 (let (($x588 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x580 (and $x588 $x169)))
 (let (($x782 (bvugt ?x417 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x417 (_ bv3 32))))
 (let (($x715 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x507 (=> (bvule ?x417 (bvsub (bvadd ?x417 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x715 $x782)))))))
 (let (($x391 (=> (and $x41 (bvule ?x417 (bvsub (bvadd ?x417 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x715 $x782)))))))
 (let (($x72 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x396)))
 (let (($x684 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x102 (=> $x684 (or false (or false (and true (or $x291 $x72)))))))
 (let (($x489 (=> (and $x41 $x684) (or false (or false (and true (or $x291 $x72)))))))
 (let (($x186 (and $x489 $x391)))
 (let (($x369 (and $x186 $x580)))
 (let (($x809 (=> $x369 $x247)))
 (not $x809))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 156
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0 () (_ BitVec 1))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x204 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x682 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x111 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x573 (concat (select input.dst.llvm-mem ?x111) (concat ?x197 (concat ?x682 ?x204)))))
 (let ((?x73 ((_ extract 0 0) ?x573)))
 (let ((?x219 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0 ?x73)))
 (let (($x488 (= (_ bv0 1) ?x219)))
 (let (($x610 (= $x488 true)))
 (let (($x530 (= (_ bv0 1) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0)))
 (let (($x340 (= $x530 true)))
 (let (($x458 (= $x340 true)))
 (let ((?x161 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x343 (= (_ bv0 3) ?x161)))
 (let (($x404 (= $x343 true)))
 (let (($x170 (= $x404 true)))
 (let (($x583 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x854 (=> $x583 true)))
 (let (($x615 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x60 (ite $x615 (_ bv0 32) (_ bv1 32))))
 (let (($x313 (= $x583 (bvuge ?x60 (_ bv1 32)))))
 (let (($x541 (= false false)))
 (let (($x57 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x349 (=> $x57 $x541)))
 (let (($x575 (= $x57 (= ?x60 (_ bv0 32)))))
 (let (($x378 (and $x575 $x349)))
 (let (($x847 (and $x378 $x313)))
 (let (($x662 (and $x847 $x854)))
 (let (($x162 (= $x662 true)))
 (let (($x464 (= $x162 true)))
 (let (($x192 (= $x464 true)))
 (let (($x544 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x196 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x451 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x196) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x196))))
 (let (($x382 (and true $x451)))
 (let (($x69 (and $x451 $x382)))
 (let ((?x684 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x480 (concat (select input.dst.llvm-mem (bvadd ?x684 (_ bv1 32))) (select input.dst.llvm-mem ?x684))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ?x684 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x684 (_ bv2 32))) ?x480))))
 (let (($x334 (= (bvand ?x363 (_ bv4294967288 32)) ?x363)))
 (let (($x259 (= (bvand ?x684 (_ bv4294967292 32)) ?x684)))
 (let (($x867 (and $x259 $x334)))
 (let (($x283 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x684 (bvsub ?x684 (_ bv4 32))) (bvult ?x684 (bvsub ?x684 (_ bv4 32))))))
 (let (($x465 (and (and (and (and (and $x382 $x283) $x259) $x867) $x69) $x544)))
 (let (($x637 (= true $x465)))
 (let (($x352 (not $x615)))
 (let (($x592 (=> $x352 $x637)))
 (let (($x623 (= $x592 true)))
 (let (($x305 (= $x623 true)))
 (let (($x182 (= $x305 true)))
 (let (($x390 (= $x352 true)))
 (let (($x612 (= $x390 true)))
 (let (($x225 (= $x612 true)))
 (let (($x169 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x580 (= $x169 true)))
 (let (($x369 (= $x580 true)))
 (let ((?x740 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x638 (= (_ bv0 32) ?x740)))
 (let ((?x522 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x522)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (and $x122 $x292)))
 (let (($x397 (and $x318 $x638)))
 (let (($x497 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x551 (and $x497 $x397)))
 (let (($x846 (= $x551 true)))
 (let (($x398 (= $x846 true)))
 (let (($x563 (= $x398 true)))
 (let (($x808 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x95 (=> $x808 true)))
 (let ((?x348 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x410 (bvuge ?x348 (_ bv1 32))))
 (let (($x550 (= $x808 $x410)))
 (let (($x306 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x88 (=> $x306 $x541)))
 (let (($x448 (= ?x348 (_ bv0 32))))
 (let (($x68 (= $x306 $x448)))
 (let (($x529 (and $x68 $x88)))
 (let (($x312 (and $x529 $x550)))
 (let (($x804 (and $x312 $x95)))
 (let (($x494 (= $x804 true)))
 (let (($x124 (= $x494 true)))
 (let (($x172 (= $x124 true)))
 (let (($x821 (= $x583 $x410)))
 (let (($x510 (= $x57 $x448)))
 (let (($x104 (and $x510 $x349)))
 (let (($x226 (and $x104 $x821)))
 (let (($x333 (and $x226 $x854)))
 (let (($x764 (= $x333 true)))
 (let (($x425 (= $x764 true)))
 (let (($x700 (= $x425 true)))
 (let (($x577 (and $x700 $x172)))
 (let (($x844 (and $x577 $x563)))
 (let (($x205 (and $x844 $x369)))
 (let (($x215 (and $x205 $x225)))
 (let (($x171 (and $x215 $x182)))
 (let (($x201 (and $x171 $x192)))
 (let (($x191 (and $x201 $x170)))
 (let (($x116 (and $x191 $x458)))
 (let (($x783 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x392 (and $x783 $x116)))
 (let (($x296 (bvugt ?x684 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x684 (_ bv3 32))))
 (let (($x868 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x588 (=> (bvule ?x684 (bvsub (bvadd ?x684 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x868 $x296)))))))
 (let (($x838 (=> (and $x352 (bvule ?x684 (bvsub (bvadd ?x684 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x868 $x296)))))))
 (let (($x56 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x380 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x244 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x90 (=> $x244 (or false (or false (and true (or $x380 $x56)))))))
 (let (($x377 (=> (and $x352 $x244) (or false (or false (and true (or $x380 $x56)))))))
 (let (($x7 (and $x377 $x838)))
 (let (($x468 (and $x7 $x392)))
 (let (($x446 (=> $x468 $x610)))
 (not $x446))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0 () (_ BitVec 1))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x204 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x682 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x111 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x573 (concat (select input.dst.llvm-mem ?x111) (concat ?x197 (concat ?x682 ?x204)))))
 (let ((?x73 ((_ extract 0 0) ?x573)))
 (let ((?x219 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0 ?x73)))
 (let (($x488 (= (_ bv0 1) ?x219)))
 (let (($x610 (= $x488 true)))
 (let (($x530 (= (_ bv0 1) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0)))
 (let (($x340 (= $x530 true)))
 (let (($x458 (= $x340 true)))
 (let ((?x161 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x343 (= (_ bv0 3) ?x161)))
 (let (($x404 (= $x343 true)))
 (let (($x170 (= $x404 true)))
 (let (($x583 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x854 (=> $x583 true)))
 (let (($x615 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x60 (ite $x615 (_ bv0 32) (_ bv1 32))))
 (let (($x313 (= $x583 (bvuge ?x60 (_ bv1 32)))))
 (let (($x541 (= false false)))
 (let (($x57 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x349 (=> $x57 $x541)))
 (let (($x575 (= $x57 (= ?x60 (_ bv0 32)))))
 (let (($x378 (and $x575 $x349)))
 (let (($x847 (and $x378 $x313)))
 (let (($x662 (and $x847 $x854)))
 (let (($x162 (= $x662 true)))
 (let (($x464 (= $x162 true)))
 (let (($x192 (= $x464 true)))
 (let (($x544 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x196 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x451 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x196) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x196))))
 (let (($x382 (and true $x451)))
 (let (($x69 (and $x451 $x382)))
 (let ((?x684 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x480 (concat (select input.dst.llvm-mem (bvadd ?x684 (_ bv1 32))) (select input.dst.llvm-mem ?x684))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ?x684 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x684 (_ bv2 32))) ?x480))))
 (let (($x334 (= (bvand ?x363 (_ bv4294967288 32)) ?x363)))
 (let (($x259 (= (bvand ?x684 (_ bv4294967292 32)) ?x684)))
 (let (($x867 (and $x259 $x334)))
 (let (($x283 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x684 (bvsub ?x684 (_ bv4 32))) (bvult ?x684 (bvsub ?x684 (_ bv4 32))))))
 (let (($x465 (and (and (and (and (and $x382 $x283) $x259) $x867) $x69) $x544)))
 (let (($x637 (= true $x465)))
 (let (($x352 (not $x615)))
 (let (($x592 (=> $x352 $x637)))
 (let (($x623 (= $x592 true)))
 (let (($x305 (= $x623 true)))
 (let (($x182 (= $x305 true)))
 (let (($x390 (= $x352 true)))
 (let (($x612 (= $x390 true)))
 (let (($x225 (= $x612 true)))
 (let (($x169 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x580 (= $x169 true)))
 (let (($x369 (= $x580 true)))
 (let ((?x740 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x638 (= (_ bv0 32) ?x740)))
 (let ((?x522 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x522)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (and $x122 $x292)))
 (let (($x397 (and $x318 $x638)))
 (let (($x497 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x551 (and $x497 $x397)))
 (let (($x846 (= $x551 true)))
 (let (($x398 (= $x846 true)))
 (let (($x563 (= $x398 true)))
 (let (($x808 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x95 (=> $x808 true)))
 (let ((?x348 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x410 (bvuge ?x348 (_ bv1 32))))
 (let (($x550 (= $x808 $x410)))
 (let (($x306 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x88 (=> $x306 $x541)))
 (let (($x448 (= ?x348 (_ bv0 32))))
 (let (($x68 (= $x306 $x448)))
 (let (($x529 (and $x68 $x88)))
 (let (($x312 (and $x529 $x550)))
 (let (($x804 (and $x312 $x95)))
 (let (($x494 (= $x804 true)))
 (let (($x124 (= $x494 true)))
 (let (($x172 (= $x124 true)))
 (let (($x821 (= $x583 $x410)))
 (let (($x510 (= $x57 $x448)))
 (let (($x104 (and $x510 $x349)))
 (let (($x226 (and $x104 $x821)))
 (let (($x333 (and $x226 $x854)))
 (let (($x764 (= $x333 true)))
 (let (($x425 (= $x764 true)))
 (let (($x700 (= $x425 true)))
 (let (($x577 (and $x700 $x172)))
 (let (($x844 (and $x577 $x563)))
 (let (($x205 (and $x844 $x369)))
 (let (($x215 (and $x205 $x225)))
 (let (($x171 (and $x215 $x182)))
 (let (($x201 (and $x171 $x192)))
 (let (($x191 (and $x201 $x170)))
 (let (($x116 (and $x191 $x458)))
 (let (($x783 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x392 (and $x783 $x116)))
 (let (($x296 (bvugt ?x684 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x684 (_ bv3 32))))
 (let (($x868 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x588 (=> (bvule ?x684 (bvsub (bvadd ?x684 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x868 $x296)))))))
 (let (($x838 (=> (and $x352 (bvule ?x684 (bvsub (bvadd ?x684 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x868 $x296)))))))
 (let (($x56 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x380 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x244 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x90 (=> $x244 (or false (or false (and true (or $x380 $x56)))))))
 (let (($x377 (=> (and $x352 $x244) (or false (or false (and true (or $x380 $x56)))))))
 (let (($x7 (and $x377 $x838)))
 (let (($x468 (and $x7 $x392)))
 (let (($x446 (=> $x468 $x610)))
 (not $x446))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0 #b0)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_13)
(function @fun_13
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_13 #b10000000000000000000000000000100) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000101) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000110) #b00000000)
 (= (@fun_13 #b10000000000000000000000000000111) #b00000000)
 (default #b00000001))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ffff000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x5f7eeff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x5f7eeff8 #x01))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0 () (_ BitVec 1)
    #b0)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ffff003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ffff000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv52208 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv52208 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0 () (_ BitVec 1) (_ bv0 1))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv312584 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv312584 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv312587 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 157
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0 () (_ BitVec 1))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x261 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x523 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x155 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem ?x155) (concat ?x523 (concat ?x209 ?x261)))))
 (let ((?x9 ((_ extract 0 0) ?x97)))
 (let ((?x506 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0 ?x9)))
 (let (($x546 (= (_ bv0 1) ?x506)))
 (let (($x210 (= $x546 true)))
 (let (($x554 (= (_ bv0 1) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0)))
 (let (($x47 (= $x554 true)))
 (let (($x403 (= $x47 true)))
 (let ((?x811 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x413 (= (_ bv0 3) ?x811)))
 (let (($x242 (= $x413 true)))
 (let (($x43 (= $x242 true)))
 (let (($x444 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x363 (=> $x444 false)))
 (let (($x615 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x496 (ite $x615 (_ bv0 32) (_ bv1 32))))
 (let (($x315 (= $x444 (bvuge ?x496 (_ bv1 32)))))
 (let (($x725 (= false false)))
 (let (($x809 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x259 (=> $x809 $x725)))
 (let (($x189 (= $x809 (= ?x496 (_ bv0 32)))))
 (let (($x309 (and $x189 $x259)))
 (let (($x213 (and $x309 $x315)))
 (let (($x675 (and $x213 $x363)))
 (let (($x297 (= $x675 true)))
 (let (($x154 (= $x297 true)))
 (let (($x24 (= $x154 true)))
 (let (($x140 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x204 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x73 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x204) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x204))))
 (let (($x219 (and true $x73)))
 (let (($x328 (and $x73 $x219)))
 (let ((?x244 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x771 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x771))))
 (let (($x34 (= (bvand ?x302 (_ bv4294967288 32)) ?x302)))
 (let (($x567 (= (bvand ?x244 (_ bv4294967292 32)) ?x244)))
 (let (($x23 (and $x567 $x34)))
 (let (($x344 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x244 (bvsub ?x244 (_ bv4 32))) (bvult ?x244 (bvsub ?x244 (_ bv4 32))))))
 (let (($x848 (and (and (and (and (and $x219 $x344) $x567) $x23) $x328) $x140)))
 (let (($x364 (= true $x848)))
 (let (($x352 (not $x615)))
 (let (($x720 (=> $x352 $x364)))
 (let (($x853 (= $x720 true)))
 (let (($x817 (= $x853 true)))
 (let (($x849 (= $x817 true)))
 (let (($x187 (= $x352 true)))
 (let (($x197 (= $x187 true)))
 (let (($x268 (= $x197 true)))
 (let (($x116 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x392 (= $x116 true)))
 (let (($x468 (= $x392 true)))
 (let ((?x343 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x404 (= (_ bv0 32) ?x343)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x436 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x192 $x436)))
 (let (($x170 (and $x161 $x404)))
 (let (($x464 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x464 $x170)))
 (let (($x17 (= $x191 true)))
 (let (($x185 (= $x17 true)))
 (let (($x530 (= $x185 true)))
 (let (($x171 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x575 (=> $x171 false)))
 (let ((?x283 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x512 (bvuge ?x283 (_ bv1 32))))
 (let (($x60 (= $x171 $x512)))
 (let (($x465 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x592 (=> $x465 $x725)))
 (let (($x657 (= ?x283 (_ bv0 32))))
 (let (($x637 (= $x465 $x657)))
 (let (($x623 (and $x637 $x592)))
 (let (($x415 (and $x623 $x60)))
 (let (($x378 (and $x415 $x575)))
 (let (($x508 (= $x378 true)))
 (let (($x313 (= $x508 true)))
 (let (($x847 (= $x313 true)))
 (let (($x480 (= $x444 $x512)))
 (let (($x457 (= $x809 $x657)))
 (let (($x338 (and $x457 $x259)))
 (let (($x533 (and $x338 $x480)))
 (let (($x659 (and $x533 $x363)))
 (let (($x788 (= $x659 true)))
 (let (($x334 (= $x788 true)))
 (let (($x867 (= $x334 true)))
 (let (($x662 (and $x867 $x847)))
 (let (($x340 (and $x662 $x530)))
 (let (($x78 (and $x340 $x468)))
 (let (($x682 (and $x78 $x268)))
 (let (($x234 (and $x682 $x849)))
 (let (($x278 (and $x234 $x24)))
 (let (($x803 (and $x278 $x43)))
 (let (($x828 (and $x803 $x403)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x394 (and $x57 $x828)))
 (let (($x391 (bvugt ?x244 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x244 (_ bv3 32))))
 (let (($x507 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x783 (=> (bvule ?x244 (bvsub (bvadd ?x244 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x507 $x391)))))))
 (let (($x443 (=> (and $x352 (bvule ?x244 (bvsub (bvadd ?x244 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x507 $x391)))))))
 (let (($x489 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x715 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x782 (=> $x715 (or false (or false (and true (or $x102 $x489)))))))
 (let (($x396 (=> (and $x352 $x715) (or false (or false (and true (or $x102 $x489)))))))
 (let (($x99 (and $x396 $x443)))
 (let (($x500 (and $x99 $x394)))
 (let (($x714 (=> $x500 $x210)))
 (not $x714))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0 () (_ BitVec 1))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x261 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x523 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x155 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem ?x155) (concat ?x523 (concat ?x209 ?x261)))))
 (let ((?x9 ((_ extract 0 0) ?x97)))
 (let ((?x506 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0 ?x9)))
 (let (($x546 (= (_ bv0 1) ?x506)))
 (let (($x210 (= $x546 true)))
 (let (($x554 (= (_ bv0 1) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_0_0)))
 (let (($x47 (= $x554 true)))
 (let (($x403 (= $x47 true)))
 (let ((?x811 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x413 (= (_ bv0 3) ?x811)))
 (let (($x242 (= $x413 true)))
 (let (($x43 (= $x242 true)))
 (let (($x444 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x363 (=> $x444 false)))
 (let (($x615 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x496 (ite $x615 (_ bv0 32) (_ bv1 32))))
 (let (($x315 (= $x444 (bvuge ?x496 (_ bv1 32)))))
 (let (($x725 (= false false)))
 (let (($x809 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x259 (=> $x809 $x725)))
 (let (($x189 (= $x809 (= ?x496 (_ bv0 32)))))
 (let (($x309 (and $x189 $x259)))
 (let (($x213 (and $x309 $x315)))
 (let (($x675 (and $x213 $x363)))
 (let (($x297 (= $x675 true)))
 (let (($x154 (= $x297 true)))
 (let (($x24 (= $x154 true)))
 (let (($x140 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x204 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x73 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x204) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x204))))
 (let (($x219 (and true $x73)))
 (let (($x328 (and $x73 $x219)))
 (let ((?x244 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x771 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x771))))
 (let (($x34 (= (bvand ?x302 (_ bv4294967288 32)) ?x302)))
 (let (($x567 (= (bvand ?x244 (_ bv4294967292 32)) ?x244)))
 (let (($x23 (and $x567 $x34)))
 (let (($x344 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x244 (bvsub ?x244 (_ bv4 32))) (bvult ?x244 (bvsub ?x244 (_ bv4 32))))))
 (let (($x848 (and (and (and (and (and $x219 $x344) $x567) $x23) $x328) $x140)))
 (let (($x364 (= true $x848)))
 (let (($x352 (not $x615)))
 (let (($x720 (=> $x352 $x364)))
 (let (($x853 (= $x720 true)))
 (let (($x817 (= $x853 true)))
 (let (($x849 (= $x817 true)))
 (let (($x187 (= $x352 true)))
 (let (($x197 (= $x187 true)))
 (let (($x268 (= $x197 true)))
 (let (($x116 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x392 (= $x116 true)))
 (let (($x468 (= $x392 true)))
 (let ((?x343 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x404 (= (_ bv0 32) ?x343)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x436 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x192 $x436)))
 (let (($x170 (and $x161 $x404)))
 (let (($x464 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x464 $x170)))
 (let (($x17 (= $x191 true)))
 (let (($x185 (= $x17 true)))
 (let (($x530 (= $x185 true)))
 (let (($x171 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x575 (=> $x171 false)))
 (let ((?x283 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x512 (bvuge ?x283 (_ bv1 32))))
 (let (($x60 (= $x171 $x512)))
 (let (($x465 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x592 (=> $x465 $x725)))
 (let (($x657 (= ?x283 (_ bv0 32))))
 (let (($x637 (= $x465 $x657)))
 (let (($x623 (and $x637 $x592)))
 (let (($x415 (and $x623 $x60)))
 (let (($x378 (and $x415 $x575)))
 (let (($x508 (= $x378 true)))
 (let (($x313 (= $x508 true)))
 (let (($x847 (= $x313 true)))
 (let (($x480 (= $x444 $x512)))
 (let (($x457 (= $x809 $x657)))
 (let (($x338 (and $x457 $x259)))
 (let (($x533 (and $x338 $x480)))
 (let (($x659 (and $x533 $x363)))
 (let (($x788 (= $x659 true)))
 (let (($x334 (= $x788 true)))
 (let (($x867 (= $x334 true)))
 (let (($x662 (and $x867 $x847)))
 (let (($x340 (and $x662 $x530)))
 (let (($x78 (and $x340 $x468)))
 (let (($x682 (and $x78 $x268)))
 (let (($x234 (and $x682 $x849)))
 (let (($x278 (and $x234 $x24)))
 (let (($x803 (and $x278 $x43)))
 (let (($x828 (and $x803 $x403)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x394 (and $x57 $x828)))
 (let (($x391 (bvugt ?x244 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x244 (_ bv3 32))))
 (let (($x507 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x783 (=> (bvule ?x244 (bvsub (bvadd ?x244 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x507 $x391)))))))
 (let (($x443 (=> (and $x352 (bvule ?x244 (bvsub (bvadd ?x244 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x507 $x391)))))))
 (let (($x489 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x715 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x782 (=> $x715 (or false (or false (and true (or $x102 $x489)))))))
 (let (($x396 (=> (and $x352 $x715) (or false (or false (and true (or $x102 $x489)))))))
 (let (($x99 (and $x396 $x443)))
 (let (($x500 (and $x99 $x394)))
 (let (($x714 (=> $x500 $x210)))
 (not $x714))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 158
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x385 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x6))))
 (let ((?x505 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x773 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x525 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x715 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x715 (_ bv1 32))) (select input.dst.llvm-mem ?x715))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x715 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x715 (_ bv2 32))) ?x191))))
 (let (($x463 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x116 ?x525 false (concat ?x255 (concat ?x335 (concat ?x773 ?x505))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x385)))
 (let (($x697 (= $x463 true)))
 (let (($x679 (= $x697 true)))
 (let ((?x120 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x176 (= (_ bv0 3) ?x120)))
 (let (($x435 (= $x176 true)))
 (let (($x341 (= $x435 true)))
 (let (($x305 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x248 (=> $x305 true)))
 (let ((?x169 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x390 (bvuge ?x169 (_ bv1 32))))
 (let (($x182 (= $x305 $x390)))
 (let (($x261 (= false false)))
 (let (($x100 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x513 (=> $x100 $x261)))
 (let (($x216 (= ?x169 (_ bv0 32))))
 (let (($x581 (= $x100 $x216)))
 (let (($x451 (and $x581 $x513)))
 (let (($x212 (and $x451 $x182)))
 (let (($x393 (and $x212 $x248)))
 (let (($x520 (= $x393 true)))
 (let (($x707 (= $x520 true)))
 (let (($x843 (= $x707 true)))
 (let (($x311 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x207 (=> $x311 true)))
 (let (($x215 (= $x311 $x390)))
 (let (($x346 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x135 (=> $x346 $x261)))
 (let (($x196 (= $x346 $x216)))
 (let (($x612 (and $x196 $x135)))
 (let (($x723 (and $x612 $x215)))
 (let (($x563 (and $x723 $x207)))
 (let (($x844 (= $x563 true)))
 (let (($x551 (= $x844 true)))
 (let (($x846 (= $x551 true)))
 (let (($x615 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x523 (ite $x615 (_ bv0 32) (_ bv1 32))))
 (let (($x69 (= $x311 (bvuge ?x523 (_ bv1 32)))))
 (let (($x209 (= $x346 (= ?x523 (_ bv0 32)))))
 (let (($x319 (and $x209 $x135)))
 (let (($x447 (and $x319 $x69)))
 (let (($x88 (and $x447 $x207)))
 (let (($x541 (= $x88 true)))
 (let (($x349 (= $x541 true)))
 (let (($x583 (= $x349 true)))
 (let (($x682 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x171 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x378 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x171) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x171))))
 (let (($x508 (and true $x378)))
 (let (($x197 (and $x378 $x508)))
 (let (($x78 (= (bvand ?x116 (_ bv4294967288 32)) ?x116)))
 (let (($x436 (= (bvand ?x715 (_ bv4294967292 32)) ?x715)))
 (let (($x187 (and $x436 $x78)))
 (let (($x464 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x715 (bvsub ?x715 (_ bv4 32))) (bvult ?x715 (bvsub ?x715 (_ bv4 32))))))
 (let (($x73 (and (and (and (and (and $x508 $x464) $x436) $x187) $x197) $x682)))
 (let (($x219 (= true $x73)))
 (let (($x352 (not $x615)))
 (let (($x610 (=> $x352 $x219)))
 (let (($x488 (= $x610 true)))
 (let (($x446 (= $x488 true)))
 (let (($x614 (= $x446 true)))
 (let (($x465 (= $x352 true)))
 (let (($x637 (= $x465 true)))
 (let (($x592 (= $x637 true)))
 (let (($x788 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x334 (= $x788 true)))
 (let (($x867 (= $x334 true)))
 (let ((?x259 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x338 (= (_ bv0 32) ?x259)))
 (let ((?x657 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x457 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x657)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x725 (and $x283 $x457)))
 (let (($x444 (and $x725 $x338)))
 (let (($x475 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x512 (and $x475 $x444)))
 (let (($x480 (= $x512 true)))
 (let (($x533 (= $x480 true)))
 (let (($x363 (= $x533 true)))
 (let (($x544 (and $x363 $x867)))
 (let (($x623 (and $x544 $x592)))
 (let (($x344 (and $x623 $x614)))
 (let (($x41 (and $x344 $x583)))
 (let (($x740 (and $x41 $x846)))
 (let (($x785 (and $x740 $x843)))
 (let (($x59 (and $x785 $x341)))
 (let (($x809 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x347 (and $x809 $x59)))
 (let (($x838 (bvugt ?x715 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x715 (_ bv3 32))))
 (let (($x588 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x57 (=> (bvule ?x715 (bvsub (bvadd ?x715 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x588 $x838)))))))
 (let (($x653 (=> (and $x352 (bvule ?x715 (bvsub (bvadd ?x715 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x588 $x838)))))))
 (let (($x377 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x868 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x296 (=> $x868 (or false (or false (and true (or $x90 $x377)))))))
 (let (($x111 (=> (and $x352 $x868) (or false (or false (and true (or $x90 $x377)))))))
 (let (($x37 (and $x111 $x653)))
 (let (($x548 (and $x37 $x347)))
 (let (($x810 (=> $x548 $x679)))
 (not $x810))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x385 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x6))))
 (let ((?x505 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x773 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x525 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x715 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x715 (_ bv1 32))) (select input.dst.llvm-mem ?x715))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x715 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x715 (_ bv2 32))) ?x191))))
 (let (($x463 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x116 ?x525 false (concat ?x255 (concat ?x335 (concat ?x773 ?x505))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x385)))
 (let (($x697 (= $x463 true)))
 (let (($x679 (= $x697 true)))
 (let ((?x120 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x176 (= (_ bv0 3) ?x120)))
 (let (($x435 (= $x176 true)))
 (let (($x341 (= $x435 true)))
 (let (($x305 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x248 (=> $x305 true)))
 (let ((?x169 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x390 (bvuge ?x169 (_ bv1 32))))
 (let (($x182 (= $x305 $x390)))
 (let (($x261 (= false false)))
 (let (($x100 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x513 (=> $x100 $x261)))
 (let (($x216 (= ?x169 (_ bv0 32))))
 (let (($x581 (= $x100 $x216)))
 (let (($x451 (and $x581 $x513)))
 (let (($x212 (and $x451 $x182)))
 (let (($x393 (and $x212 $x248)))
 (let (($x520 (= $x393 true)))
 (let (($x707 (= $x520 true)))
 (let (($x843 (= $x707 true)))
 (let (($x311 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x207 (=> $x311 true)))
 (let (($x215 (= $x311 $x390)))
 (let (($x346 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x135 (=> $x346 $x261)))
 (let (($x196 (= $x346 $x216)))
 (let (($x612 (and $x196 $x135)))
 (let (($x723 (and $x612 $x215)))
 (let (($x563 (and $x723 $x207)))
 (let (($x844 (= $x563 true)))
 (let (($x551 (= $x844 true)))
 (let (($x846 (= $x551 true)))
 (let (($x615 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x523 (ite $x615 (_ bv0 32) (_ bv1 32))))
 (let (($x69 (= $x311 (bvuge ?x523 (_ bv1 32)))))
 (let (($x209 (= $x346 (= ?x523 (_ bv0 32)))))
 (let (($x319 (and $x209 $x135)))
 (let (($x447 (and $x319 $x69)))
 (let (($x88 (and $x447 $x207)))
 (let (($x541 (= $x88 true)))
 (let (($x349 (= $x541 true)))
 (let (($x583 (= $x349 true)))
 (let (($x682 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x171 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x378 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x171) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x171))))
 (let (($x508 (and true $x378)))
 (let (($x197 (and $x378 $x508)))
 (let (($x78 (= (bvand ?x116 (_ bv4294967288 32)) ?x116)))
 (let (($x436 (= (bvand ?x715 (_ bv4294967292 32)) ?x715)))
 (let (($x187 (and $x436 $x78)))
 (let (($x464 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x715 (bvsub ?x715 (_ bv4 32))) (bvult ?x715 (bvsub ?x715 (_ bv4 32))))))
 (let (($x73 (and (and (and (and (and $x508 $x464) $x436) $x187) $x197) $x682)))
 (let (($x219 (= true $x73)))
 (let (($x352 (not $x615)))
 (let (($x610 (=> $x352 $x219)))
 (let (($x488 (= $x610 true)))
 (let (($x446 (= $x488 true)))
 (let (($x614 (= $x446 true)))
 (let (($x465 (= $x352 true)))
 (let (($x637 (= $x465 true)))
 (let (($x592 (= $x637 true)))
 (let (($x788 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x334 (= $x788 true)))
 (let (($x867 (= $x334 true)))
 (let ((?x259 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x338 (= (_ bv0 32) ?x259)))
 (let ((?x657 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x457 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x657)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x725 (and $x283 $x457)))
 (let (($x444 (and $x725 $x338)))
 (let (($x475 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x512 (and $x475 $x444)))
 (let (($x480 (= $x512 true)))
 (let (($x533 (= $x480 true)))
 (let (($x363 (= $x533 true)))
 (let (($x544 (and $x363 $x867)))
 (let (($x623 (and $x544 $x592)))
 (let (($x344 (and $x623 $x614)))
 (let (($x41 (and $x344 $x583)))
 (let (($x740 (and $x41 $x846)))
 (let (($x785 (and $x740 $x843)))
 (let (($x59 (and $x785 $x341)))
 (let (($x809 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x347 (and $x809 $x59)))
 (let (($x838 (bvugt ?x715 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x715 (_ bv3 32))))
 (let (($x588 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x57 (=> (bvule ?x715 (bvsub (bvadd ?x715 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x588 $x838)))))))
 (let (($x653 (=> (and $x352 (bvule ?x715 (bvsub (bvadd ?x715 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x588 $x838)))))))
 (let (($x377 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x868 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x296 (=> $x868 (or false (or false (and true (or $x90 $x377)))))))
 (let (($x111 (=> (and $x352 $x868) (or false (or false (and true (or $x90 $x377)))))))
 (let (($x37 (and $x111 $x653)))
 (let (($x548 (and $x37 $x347)))
 (let (($x810 (=> $x548 $x679)))
 (not $x810))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_14)
(= input.dst.llvm-mem @fun_23)
(function @fun_14
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_14 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_23
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_8847 (_ BitVec 32)) (BOUND_VARIABLE_8848 (_ BitVec 32)) (BOUND_VARIABLE_8849 (_ BitVec 32)) (BOUND_VARIABLE_8850 Bool) (BOUND_VARIABLE_8851 (_ BitVec 32)) (BOUND_VARIABLE_8852 (_ BitVec 32)) (BOUND_VARIABLE_8853 (_ BitVec 32)) (BOUND_VARIABLE_8854 (_ BitVec 32)) (BOUND_VARIABLE_8855 (_ BitVec 32)) (BOUND_VARIABLE_8856 (_ BitVec 32)) (BOUND_VARIABLE_8857 Bool) (BOUND_VARIABLE_8858 (_ BitVec 32)) (BOUND_VARIABLE_8859 (_ BitVec 32)) (BOUND_VARIABLE_8860 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv156266032 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3635941696 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3635941696 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3635941699 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000001)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000001)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000001)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 159
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x205 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x425 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x425 (_ bv1 32))) (select input.dst.llvm-mem ?x425))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x425 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x425 (_ bv2 32))) ?x172))))
 (let ((?x494 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x821 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x764 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x806 (concat ?x32 (concat ?x764 (concat ?x821 ?x494)))))
 (let ((?x380 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x530 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv1 32))) (select input.dst.llvm-mem ?x380))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv2 32))) ?x530))))
 (let (($x733 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x116 ?x806 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x225 ?x205 false)))
 (let (($x818 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x395 (=> $x818 $x733)))
 (let (($x437 (= $x818 (bvuge (ite (= (_ bv0 32) ?x116) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x335 (= false false)))
 (let (($x525 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x253 (=> $x525 $x335)))
 (let (($x651 (= $x525 (= (ite (= (_ bv0 32) ?x116) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x559 (and $x651 $x253)))
 (let (($x692 (and $x559 $x437)))
 (let (($x243 (and $x692 $x395)))
 (let (($x748 (= $x243 true)))
 (let (($x831 (= $x748 true)))
 (let ((?x250 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x28 (= (_ bv0 3) ?x250)))
 (let (($x42 (= $x28 true)))
 (let (($x275 (= $x42 true)))
 (let (($x146 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l ?x806 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x225 ?x205 false)))
 (let (($x252 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x235 (=> $x252 $x146)))
 (let ((?x427 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x189 (bvuge ?x427 (_ bv1 32))))
 (let (($x801 (= $x252 $x189)))
 (let (($x503 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x677 (=> $x503 $x335)))
 (let (($x242 (= ?x427 (_ bv0 32))))
 (let (($x665 (= $x503 $x242)))
 (let (($x832 (and $x665 $x677)))
 (let (($x193 (and $x832 $x801)))
 (let (($x282 (and $x193 $x235)))
 (let (($x218 (= $x282 true)))
 (let (($x514 (= $x218 true)))
 (let (($x866 (= $x514 true)))
 (let (($x459 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l ?x806 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x225 ?x205 false)))
 (let (($x561 (=> $x818 $x459)))
 (let (($x309 (= $x818 $x189)))
 (let (($x168 (= $x525 $x242)))
 (let (($x47 (and $x168 $x253)))
 (let (($x273 (and $x47 $x309)))
 (let (($x460 (and $x273 $x561)))
 (let (($x281 (= $x460 true)))
 (let (($x321 (= $x281 true)))
 (let (($x121 (= $x321 true)))
 (let (($x580 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x806 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x225 ?x205 false)))
 (let (($x286 (=> $x818 $x580)))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x70 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x829 (= $x818 (bvuge ?x70 (_ bv1 32)))))
 (let (($x787 (= $x525 (= ?x70 (_ bv0 32)))))
 (let (($x773 (and $x787 $x253)))
 (let (($x591 (and $x773 $x829)))
 (let (($x302 (and $x591 $x286)))
 (let (($x859 (= $x302 true)))
 (let (($x729 (= $x859 true)))
 (let (($x854 (= $x729 true)))
 (let (($x573 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x415 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x847 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x415) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x415))))
 (let (($x313 (and true $x847)))
 (let (($x129 (and $x847 $x313)))
 (let (($x78 (= (bvand ?x116 (_ bv4294967288 32)) ?x116)))
 (let (($x204 (= (bvand ?x380 (_ bv4294967292 32)) ?x380)))
 (let (($x187 (and $x204 $x78)))
 (let (($x192 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x380 (bvsub ?x380 (_ bv4 32))) (bvult ?x380 (bvsub ?x380 (_ bv4 32))))))
 (let (($x610 (and (and (and (and (and $x313 $x192) $x204) $x187) $x129) $x573)))
 (let (($x488 (= true $x610)))
 (let (($x615 (not $x190)))
 (let (($x446 (=> $x615 $x488)))
 (let (($x614 (= $x446 true)))
 (let (($x344 (= $x614 true)))
 (let (($x262 (= $x344 true)))
 (let (($x592 (= $x615 true)))
 (let (($x623 (= $x592 true)))
 (let (($x60 (= $x623 true)))
 (let (($x867 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x544 (= $x867 true)))
 (let (($x465 (= $x544 true)))
 (let ((?x444 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x512 (= (_ bv0 32) ?x444)))
 (let ((?x725 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x725)))
 (let (($x457 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x338 (and $x457 $x259)))
 (let (($x480 (and $x338 $x512)))
 (let (($x657 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x533 (and $x657 $x480)))
 (let (($x363 (= $x533 true)))
 (let (($x659 (= $x363 true)))
 (let (($x788 (= $x659 true)))
 (let (($x637 (and $x788 $x465)))
 (let (($x171 (and $x637 $x60)))
 (let (($x346 (and $x171 $x262)))
 (let (($x95 (and $x346 $x854)))
 (let (($x301 (and $x95 $x121)))
 (let (($x845 (and $x301 $x866)))
 (let (($x467 (and $x845 $x275)))
 (let (($x475 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x531 (and $x475 $x467)))
 (let (($x443 (bvugt ?x380 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x380 (_ bv3 32))))
 (let (($x783 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x809 (=> (bvule ?x380 (bvsub (bvadd ?x380 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x783 $x443)))))))
 (let (($x317 (=> (and $x615 (bvule ?x380 (bvsub (bvadd ?x380 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x783 $x443)))))))
 (let (($x396 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x782 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x507 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x391 (=> $x507 (or false (or false (and true (or $x782 $x396)))))))
 (let (($x291 (=> (and $x615 $x507) (or false (or false (and true (or $x782 $x396)))))))
 (let (($x186 (and $x291 $x317)))
 (let (($x634 (and $x186 $x531)))
 (let (($x406 (=> $x634 $x831)))
 (not $x406)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x205 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x425 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x425 (_ bv1 32))) (select input.dst.llvm-mem ?x425))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x425 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x425 (_ bv2 32))) ?x172))))
 (let ((?x494 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x821 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x764 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x806 (concat ?x32 (concat ?x764 (concat ?x821 ?x494)))))
 (let ((?x380 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x530 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv1 32))) (select input.dst.llvm-mem ?x380))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv2 32))) ?x530))))
 (let (($x733 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x116 ?x806 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x225 ?x205 false)))
 (let (($x818 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x395 (=> $x818 $x733)))
 (let (($x437 (= $x818 (bvuge (ite (= (_ bv0 32) ?x116) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x335 (= false false)))
 (let (($x525 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x253 (=> $x525 $x335)))
 (let (($x651 (= $x525 (= (ite (= (_ bv0 32) ?x116) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x559 (and $x651 $x253)))
 (let (($x692 (and $x559 $x437)))
 (let (($x243 (and $x692 $x395)))
 (let (($x748 (= $x243 true)))
 (let (($x831 (= $x748 true)))
 (let ((?x250 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x28 (= (_ bv0 3) ?x250)))
 (let (($x42 (= $x28 true)))
 (let (($x275 (= $x42 true)))
 (let (($x146 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l ?x806 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x225 ?x205 false)))
 (let (($x252 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x235 (=> $x252 $x146)))
 (let ((?x427 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x189 (bvuge ?x427 (_ bv1 32))))
 (let (($x801 (= $x252 $x189)))
 (let (($x503 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x677 (=> $x503 $x335)))
 (let (($x242 (= ?x427 (_ bv0 32))))
 (let (($x665 (= $x503 $x242)))
 (let (($x832 (and $x665 $x677)))
 (let (($x193 (and $x832 $x801)))
 (let (($x282 (and $x193 $x235)))
 (let (($x218 (= $x282 true)))
 (let (($x514 (= $x218 true)))
 (let (($x866 (= $x514 true)))
 (let (($x459 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l ?x806 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x225 ?x205 false)))
 (let (($x561 (=> $x818 $x459)))
 (let (($x309 (= $x818 $x189)))
 (let (($x168 (= $x525 $x242)))
 (let (($x47 (and $x168 $x253)))
 (let (($x273 (and $x47 $x309)))
 (let (($x460 (and $x273 $x561)))
 (let (($x281 (= $x460 true)))
 (let (($x321 (= $x281 true)))
 (let (($x121 (= $x321 true)))
 (let (($x580 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x806 smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x225 ?x205 false)))
 (let (($x286 (=> $x818 $x580)))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x70 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x829 (= $x818 (bvuge ?x70 (_ bv1 32)))))
 (let (($x787 (= $x525 (= ?x70 (_ bv0 32)))))
 (let (($x773 (and $x787 $x253)))
 (let (($x591 (and $x773 $x829)))
 (let (($x302 (and $x591 $x286)))
 (let (($x859 (= $x302 true)))
 (let (($x729 (= $x859 true)))
 (let (($x854 (= $x729 true)))
 (let (($x573 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x415 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x847 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x415) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x415))))
 (let (($x313 (and true $x847)))
 (let (($x129 (and $x847 $x313)))
 (let (($x78 (= (bvand ?x116 (_ bv4294967288 32)) ?x116)))
 (let (($x204 (= (bvand ?x380 (_ bv4294967292 32)) ?x380)))
 (let (($x187 (and $x204 $x78)))
 (let (($x192 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x380 (bvsub ?x380 (_ bv4 32))) (bvult ?x380 (bvsub ?x380 (_ bv4 32))))))
 (let (($x610 (and (and (and (and (and $x313 $x192) $x204) $x187) $x129) $x573)))
 (let (($x488 (= true $x610)))
 (let (($x615 (not $x190)))
 (let (($x446 (=> $x615 $x488)))
 (let (($x614 (= $x446 true)))
 (let (($x344 (= $x614 true)))
 (let (($x262 (= $x344 true)))
 (let (($x592 (= $x615 true)))
 (let (($x623 (= $x592 true)))
 (let (($x60 (= $x623 true)))
 (let (($x867 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x544 (= $x867 true)))
 (let (($x465 (= $x544 true)))
 (let ((?x444 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x512 (= (_ bv0 32) ?x444)))
 (let ((?x725 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x725)))
 (let (($x457 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x338 (and $x457 $x259)))
 (let (($x480 (and $x338 $x512)))
 (let (($x657 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x533 (and $x657 $x480)))
 (let (($x363 (= $x533 true)))
 (let (($x659 (= $x363 true)))
 (let (($x788 (= $x659 true)))
 (let (($x637 (and $x788 $x465)))
 (let (($x171 (and $x637 $x60)))
 (let (($x346 (and $x171 $x262)))
 (let (($x95 (and $x346 $x854)))
 (let (($x301 (and $x95 $x121)))
 (let (($x845 (and $x301 $x866)))
 (let (($x467 (and $x845 $x275)))
 (let (($x475 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x531 (and $x475 $x467)))
 (let (($x443 (bvugt ?x380 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd ?x380 (_ bv3 32))))
 (let (($x783 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x809 (=> (bvule ?x380 (bvsub (bvadd ?x380 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x783 $x443)))))))
 (let (($x317 (=> (and $x615 (bvule ?x380 (bvsub (bvadd ?x380 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x783 $x443)))))))
 (let (($x396 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x782 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x507 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x391 (=> $x507 (or false (or false (and true (or $x782 $x396)))))))
 (let (($x291 (=> (and $x615 $x507) (or false (or false (and true (or $x782 $x396)))))))
 (let (($x186 (and $x291 $x317)))
 (let (($x634 (and $x186 $x531)))
 (let (($x406 (=> $x634 $x831)))
 (not $x406)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_15)
(= input.dst.llvm-mem @fun_24)
(function @fun_15
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_15 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_24
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_1 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_2 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_3 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_4 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_5 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_6 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_7 Bool) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_8 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_9 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_10 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_11 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_12 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_13 (_ BitVec 32)) (_arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_14 Bool)) Bool (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_1 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_2 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_3 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_4 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_5 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_6 (_ bv0 32)) (ite (not _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_7) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_8 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_9 (_ bv1 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_10 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_11 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_12 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_13 (_ bv0 32)) (not _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_14) false) false) false) false) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_9 (_ bv1374028832 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_10 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_11 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_12 (_ bv0 32)) (ite (= _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_13 (_ bv0 32)) (not _arg_axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7_14) false) false) false) false) false)) false) false) false) false) false) false) false) false))
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1374028836 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1374028832 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2563587504 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2563587504 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2563587507 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x88080808)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x00000013)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08))
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000013)
              (= x!8 #x08080808)
              (= x!9 #x08080808)
              (= x!10 #x00000013)
              (= x!11 #x08080808)
              (= x!12 #x00000001)
              (= x!13 false))
      false
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000013)
              (= x!8 #x88080808)
              (= x!9 #x08080808)
              (= x!10 #x00000013)
              (= x!11 #x08080808)
              (= x!12 #x00000001)
              (= x!13 false))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000013)
              (= x!8 #x00000008)
              (= x!9 #x08080808)
              (= x!10 #x00000013)
              (= x!11 #x08080808)
              (= x!12 #x00000001)
              (= x!13 false))
      true
      false))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 160
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x834 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x834))))
 (let ((?x453 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x830 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x387 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x688 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x507 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv1 32))) (select input.dst.llvm-mem ?x507))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv2 32))) ?x343))))
 (let ((?x264 (bvadd ?x116 (_ bv4 32))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem ?x264))))
 (let ((?x678 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv2 32))) ?x131))))
 (let (($x277 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x678 ?x688 false (concat ?x387 (concat ?x830 (concat ?x128 ?x453))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x136)))
 (let ((?x683 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x683))))
 (let (($x638 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x23)))
 (let (($x105 (and $x638 $x277)))
 (let (($x235 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x251 (=> $x235 $x105)))
 (let (($x403 (= $x235 (bvuge (ite (= (_ bv0 32) ?x116) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x503 (= false false)))
 (let (($x321 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x665 (=> $x321 $x503)))
 (let (($x303 (= $x321 (= (ite (= (_ bv0 32) ?x116) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x409 (and $x303 $x665)))
 (let (($x675 (and $x409 $x403)))
 (let (($x449 (and $x675 $x251)))
 (let (($x188 (= $x449 true)))
 (let (($x663 (= $x188 true)))
 (let ((?x158 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x140 (= (_ bv0 3) ?x158)))
 (let (($x333 (= $x140 true)))
 (let (($x848 (= $x333 true)))
 (let (($x844 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x482 (=> $x844 true)))
 (let ((?x209 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x216 (bvuge ?x209 (_ bv1 32))))
 (let (($x740 (= $x844 $x216)))
 (let (($x723 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x612 (=> $x723 $x503)))
 (let (($x261 (= ?x209 (_ bv0 32))))
 (let (($x563 (= $x723 $x261)))
 (let (($x390 (and $x563 $x612)))
 (let (($x348 (and $x390 $x740)))
 (let (($x364 (and $x348 $x482)))
 (let (($x345 (= $x364 true)))
 (let (($x496 (= $x345 true)))
 (let (($x278 (= $x496 true)))
 (let (($x866 (=> $x235 true)))
 (let (($x583 (= $x235 $x216)))
 (let (($x439 (= $x321 $x261)))
 (let (($x619 (and $x439 $x665)))
 (let (($x41 (and $x619 $x583)))
 (let (($x88 (and $x41 $x866)))
 (let (($x541 (= $x88 true)))
 (let (($x69 (= $x541 true)))
 (let (($x447 (= $x69 true)))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x121 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x218 (= $x235 (bvuge ?x121 (_ bv1 32)))))
 (let (($x360 (= $x321 (= ?x121 (_ bv0 32)))))
 (let (($x677 (and $x360 $x665)))
 (let (($x514 (and $x677 $x218)))
 (let (($x845 (and $x514 $x866)))
 (let (($x18 (= $x845 true)))
 (let (($x250 (= $x18 true)))
 (let (($x28 (= $x250 true)))
 (let (($x219 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x378 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x162 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x378) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x378))))
 (let (($x662 (and true $x162)))
 (let (($x73 (and $x162 $x662)))
 (let (($x78 (= (bvand ?x116 (_ bv4294967288 32)) ?x116)))
 (let (($x682 (= (bvand ?x507 (_ bv4294967292 32)) ?x507)))
 (let (($x187 (and $x682 $x78)))
 (let (($x201 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x507 (bvsub ?x507 (_ bv4 32))) (bvult ?x507 (bvsub ?x507 (_ bv4 32))))))
 (let (($x446 (and (and (and (and (and $x662 $x201) $x682) $x187) $x73) $x219)))
 (let (($x614 (= true $x446)))
 (let (($x615 (not $x190)))
 (let (($x344 (=> $x615 $x614)))
 (let (($x262 (= $x344 true)))
 (let (($x346 (= $x262 true)))
 (let (($x652 (= $x346 true)))
 (let (($x60 (= $x615 true)))
 (let (($x171 (= $x60 true)))
 (let (($x575 (= $x171 true)))
 (let (($x465 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x637 (= $x465 true)))
 (let (($x592 (= $x637 true)))
 (let ((?x480 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x533 (= (_ bv0 32) ?x480)))
 (let ((?x338 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x444 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x338)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x512 (and $x259 $x444)))
 (let (($x363 (and $x512 $x533)))
 (let (($x725 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x659 (and $x725 $x363)))
 (let (($x788 (= $x659 true)))
 (let (($x334 (= $x788 true)))
 (let (($x867 (= $x334 true)))
 (let (($x623 (and $x867 $x592)))
 (let (($x415 (and $x623 $x575)))
 (let (($x525 (and $x415 $x652)))
 (let (($x42 (and $x525 $x28)))
 (let (($x119 (and $x42 $x447)))
 (let (($x328 (and $x119 $x278)))
 (let (($x234 (and $x328 $x848)))
 (let (($x657 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x676 (and $x657 $x234)))
 (let (($x653 (bvugt ?x507 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x507 (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x475 (=> (bvule ?x507 (bvsub (bvadd ?x507 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x653)))))))
 (let (($x538 (=> (and $x615 (bvule ?x507 (bvsub (bvadd ?x507 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x57 $x653)))))))
 (let (($x111 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x588 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x838 (=> $x588 (or false (or false (and true (or $x296 $x111)))))))
 (let (($x489 (=> (and $x615 $x588) (or false (or false (and true (or $x296 $x111)))))))
 (let (($x7 (and $x489 $x538)))
 (let (($x771 (and $x7 $x676)))
 (let (($x608 (=> $x771 $x663)))
 (not $x608)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x834 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x834))))
 (let ((?x453 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x830 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x387 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x688 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x507 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv1 32))) (select input.dst.llvm-mem ?x507))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv2 32))) ?x343))))
 (let ((?x264 (bvadd ?x116 (_ bv4 32))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem ?x264))))
 (let ((?x678 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv2 32))) ?x131))))
 (let (($x277 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x678 ?x688 false (concat ?x387 (concat ?x830 (concat ?x128 ?x453))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x136)))
 (let ((?x683 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x683))))
 (let (($x638 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x23)))
 (let (($x105 (and $x638 $x277)))
 (let (($x235 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x251 (=> $x235 $x105)))
 (let (($x403 (= $x235 (bvuge (ite (= (_ bv0 32) ?x116) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x503 (= false false)))
 (let (($x321 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x665 (=> $x321 $x503)))
 (let (($x303 (= $x321 (= (ite (= (_ bv0 32) ?x116) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x409 (and $x303 $x665)))
 (let (($x675 (and $x409 $x403)))
 (let (($x449 (and $x675 $x251)))
 (let (($x188 (= $x449 true)))
 (let (($x663 (= $x188 true)))
 (let ((?x158 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x140 (= (_ bv0 3) ?x158)))
 (let (($x333 (= $x140 true)))
 (let (($x848 (= $x333 true)))
 (let (($x844 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x482 (=> $x844 true)))
 (let ((?x209 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x216 (bvuge ?x209 (_ bv1 32))))
 (let (($x740 (= $x844 $x216)))
 (let (($x723 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x612 (=> $x723 $x503)))
 (let (($x261 (= ?x209 (_ bv0 32))))
 (let (($x563 (= $x723 $x261)))
 (let (($x390 (and $x563 $x612)))
 (let (($x348 (and $x390 $x740)))
 (let (($x364 (and $x348 $x482)))
 (let (($x345 (= $x364 true)))
 (let (($x496 (= $x345 true)))
 (let (($x278 (= $x496 true)))
 (let (($x866 (=> $x235 true)))
 (let (($x583 (= $x235 $x216)))
 (let (($x439 (= $x321 $x261)))
 (let (($x619 (and $x439 $x665)))
 (let (($x41 (and $x619 $x583)))
 (let (($x88 (and $x41 $x866)))
 (let (($x541 (= $x88 true)))
 (let (($x69 (= $x541 true)))
 (let (($x447 (= $x69 true)))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x121 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x218 (= $x235 (bvuge ?x121 (_ bv1 32)))))
 (let (($x360 (= $x321 (= ?x121 (_ bv0 32)))))
 (let (($x677 (and $x360 $x665)))
 (let (($x514 (and $x677 $x218)))
 (let (($x845 (and $x514 $x866)))
 (let (($x18 (= $x845 true)))
 (let (($x250 (= $x18 true)))
 (let (($x28 (= $x250 true)))
 (let (($x219 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x378 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x162 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x378) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x378))))
 (let (($x662 (and true $x162)))
 (let (($x73 (and $x162 $x662)))
 (let (($x78 (= (bvand ?x116 (_ bv4294967288 32)) ?x116)))
 (let (($x682 (= (bvand ?x507 (_ bv4294967292 32)) ?x507)))
 (let (($x187 (and $x682 $x78)))
 (let (($x201 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x507 (bvsub ?x507 (_ bv4 32))) (bvult ?x507 (bvsub ?x507 (_ bv4 32))))))
 (let (($x446 (and (and (and (and (and $x662 $x201) $x682) $x187) $x73) $x219)))
 (let (($x614 (= true $x446)))
 (let (($x615 (not $x190)))
 (let (($x344 (=> $x615 $x614)))
 (let (($x262 (= $x344 true)))
 (let (($x346 (= $x262 true)))
 (let (($x652 (= $x346 true)))
 (let (($x60 (= $x615 true)))
 (let (($x171 (= $x60 true)))
 (let (($x575 (= $x171 true)))
 (let (($x465 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x637 (= $x465 true)))
 (let (($x592 (= $x637 true)))
 (let ((?x480 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x533 (= (_ bv0 32) ?x480)))
 (let ((?x338 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x444 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x338)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x512 (and $x259 $x444)))
 (let (($x363 (and $x512 $x533)))
 (let (($x725 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x659 (and $x725 $x363)))
 (let (($x788 (= $x659 true)))
 (let (($x334 (= $x788 true)))
 (let (($x867 (= $x334 true)))
 (let (($x623 (and $x867 $x592)))
 (let (($x415 (and $x623 $x575)))
 (let (($x525 (and $x415 $x652)))
 (let (($x42 (and $x525 $x28)))
 (let (($x119 (and $x42 $x447)))
 (let (($x328 (and $x119 $x278)))
 (let (($x234 (and $x328 $x848)))
 (let (($x657 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x676 (and $x657 $x234)))
 (let (($x653 (bvugt ?x507 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x507 (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x475 (=> (bvule ?x507 (bvsub (bvadd ?x507 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x653)))))))
 (let (($x538 (=> (and $x615 (bvule ?x507 (bvsub (bvadd ?x507 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x57 $x653)))))))
 (let (($x111 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x588 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x838 (=> $x588 (or false (or false (and true (or $x296 $x111)))))))
 (let (($x489 (=> (and $x615 $x588) (or false (or false (and true (or $x296 $x111)))))))
 (let (($x7 (and $x489 $x538)))
 (let (($x771 (and $x7 $x676)))
 (let (($x608 (=> $x771 $x663)))
 (not $x608)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_20)
(= input.dst.llvm-mem @fun_37)
(function @fun_20
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_20 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_37
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_6941 (_ BitVec 32)) (BOUND_VARIABLE_6942 (_ BitVec 32)) (BOUND_VARIABLE_6943 (_ BitVec 32)) (BOUND_VARIABLE_6944 Bool) (BOUND_VARIABLE_6945 (_ BitVec 32)) (BOUND_VARIABLE_6946 (_ BitVec 32)) (BOUND_VARIABLE_6947 (_ BitVec 32)) (BOUND_VARIABLE_6948 (_ BitVec 32)) (BOUND_VARIABLE_6949 (_ BitVec 32)) (BOUND_VARIABLE_6950 (_ BitVec 32)) (BOUND_VARIABLE_6951 Bool) (BOUND_VARIABLE_6952 (_ BitVec 32)) (BOUND_VARIABLE_6953 (_ BitVec 32)) (BOUND_VARIABLE_6954 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8 32) (_ bv255 8)) (_ bv271831924 32) (_ bv8 8)) (_ bv9 32) (_ bv255 8)) (_ bv10 32) (_ bv255 8)) (_ bv11 32) (_ bv255 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv271831920 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2280419200 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2280419200 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2280419203 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffff8bc)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x007f7fe8)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x007f8001)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x7f)
                     #x007f7ffc
                     #xf8)
              #x007f7fef
              #x00)
       #x007f7fec
       #xf8))
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffff8bc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffff8bf)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x007f8001)
              (= x!8 #x7f7f7ff8)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x7f7f7f7f)
              (= x!12 #x007f8001)
              (= x!13 #x7f7f7f7f))
      true
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 161
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x588 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x588 (_ bv1 32))) (select input.dst.llvm-mem ?x588))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x588 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x588 (_ bv2 32))) ?x5))))
 (let ((?x277 ((_ extract 2 0) ?x131)))
 (let (($x105 (= (_ bv0 3) ?x277)))
 (let (($x251 (= $x105 true)))
 (let ((?x691 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x841 (= (_ bv0 3) ?x691)))
 (let (($x857 (= $x841 true)))
 (let (($x287 (= $x857 true)))
 (let (($x387 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x606 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x72 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x606) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x606))))
 (let (($x683 (and true $x72)))
 (let (($x688 (and $x72 $x683)))
 (let (($x471 (= (bvand ?x131 (_ bv4294967288 32)) ?x131)))
 (let (($x422 (= (bvand ?x588 (_ bv4294967292 32)) ?x588)))
 (let (($x408 (and $x422 $x471)))
 (let (($x64 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x588 (bvsub ?x588 (_ bv4 32))) (bvult ?x588 (bvsub ?x588 (_ bv4 32))))))
 (let (($x453 (and (and (and (and (and $x683 $x64) $x422) $x408) $x688) $x387)))
 (let (($x276 (= true $x453)))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x615 (not $x190)))
 (let (($x860 (=> $x615 $x276)))
 (let (($x440 (= $x860 true)))
 (let (($x221 (= $x440 true)))
 (let (($x108 (= $x221 true)))
 (let (($x675 (= $x615 true)))
 (let (($x693 (= $x675 true)))
 (let (($x97 (= $x693 true)))
 (let (($x303 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x409 (= $x303 true)))
 (let (($x24 (= $x409 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x333 (= (_ bv0 32) ?x140)))
 (let ((?x328 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x849 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x328)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x278 $x849)))
 (let (($x848 (and $x158 $x333)))
 (let (($x496 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (and $x496 $x848)))
 (let (($x676 (= $x234 true)))
 (let (($x771 (= $x676 true)))
 (let (($x487 (= $x771 true)))
 (let (($x723 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x390 (=> $x723 true)))
 (let ((?x321 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x18 (bvuge ?x321 (_ bv1 32))))
 (let (($x563 (= $x723 $x18)))
 (let (($x360 (= false false)))
 (let (($x88 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x69 (=> $x88 $x360)))
 (let (($x121 (= ?x321 (_ bv0 32))))
 (let (($x541 (= $x88 $x121)))
 (let (($x447 (and $x541 $x69)))
 (let (($x612 (and $x447 $x563)))
 (let (($x844 (and $x612 $x390)))
 (let (($x740 (= $x844 true)))
 (let (($x348 (= $x740 true)))
 (let (($x482 (= $x348 true)))
 (let (($x845 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x42 (=> $x845 true)))
 (let (($x250 (= $x845 $x18)))
 (let (($x525 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x503 (=> $x525 $x360)))
 (let (($x301 (= $x525 $x121)))
 (let (($x665 (and $x301 $x503)))
 (let (($x28 (and $x665 $x250)))
 (let (($x275 (and $x28 $x42)))
 (let (($x203 (= $x275 true)))
 (let (($x209 (= $x203 true)))
 (let (($x261 (= $x209 true)))
 (let (($x364 (and $x261 $x482)))
 (let (($x840 (and $x364 $x487)))
 (let (($x403 (and $x840 $x24)))
 (let (($x567 (and $x403 $x97)))
 (let (($x194 (and $x567 $x108)))
 (let (($x834 (and $x194 $x287)))
 (let (($x725 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x687 (and $x725 $x834)))
 (let (($x317 (bvugt ?x588 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x588 (_ bv3 32))))
 (let (($x809 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x657 (=> (bvule ?x588 (bvsub (bvadd ?x588 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x809 $x317)))))))
 (let (($x510 (=> (and $x615 (bvule ?x588 (bvsub (bvadd ?x588 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x809 $x317)))))))
 (let (($x291 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x391 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x783 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x443 (=> $x783 (or false (or false (and true (or $x391 $x291)))))))
 (let (($x684 (=> (and $x615 $x783) (or false (or false (and true (or $x391 $x291)))))))
 (let (($x99 (and $x684 $x510)))
 (let (($x136 (and $x99 $x687)))
 (let (($x449 (=> $x136 $x251)))
 (not $x449))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x588 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x588 (_ bv1 32))) (select input.dst.llvm-mem ?x588))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x588 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x588 (_ bv2 32))) ?x5))))
 (let ((?x277 ((_ extract 2 0) ?x131)))
 (let (($x105 (= (_ bv0 3) ?x277)))
 (let (($x251 (= $x105 true)))
 (let ((?x691 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x841 (= (_ bv0 3) ?x691)))
 (let (($x857 (= $x841 true)))
 (let (($x287 (= $x857 true)))
 (let (($x387 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x606 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x72 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x606) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x606))))
 (let (($x683 (and true $x72)))
 (let (($x688 (and $x72 $x683)))
 (let (($x471 (= (bvand ?x131 (_ bv4294967288 32)) ?x131)))
 (let (($x422 (= (bvand ?x588 (_ bv4294967292 32)) ?x588)))
 (let (($x408 (and $x422 $x471)))
 (let (($x64 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x588 (bvsub ?x588 (_ bv4 32))) (bvult ?x588 (bvsub ?x588 (_ bv4 32))))))
 (let (($x453 (and (and (and (and (and $x683 $x64) $x422) $x408) $x688) $x387)))
 (let (($x276 (= true $x453)))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x615 (not $x190)))
 (let (($x860 (=> $x615 $x276)))
 (let (($x440 (= $x860 true)))
 (let (($x221 (= $x440 true)))
 (let (($x108 (= $x221 true)))
 (let (($x675 (= $x615 true)))
 (let (($x693 (= $x675 true)))
 (let (($x97 (= $x693 true)))
 (let (($x303 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x409 (= $x303 true)))
 (let (($x24 (= $x409 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x333 (= (_ bv0 32) ?x140)))
 (let ((?x328 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x849 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x328)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x278 $x849)))
 (let (($x848 (and $x158 $x333)))
 (let (($x496 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (and $x496 $x848)))
 (let (($x676 (= $x234 true)))
 (let (($x771 (= $x676 true)))
 (let (($x487 (= $x771 true)))
 (let (($x723 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x390 (=> $x723 true)))
 (let ((?x321 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x18 (bvuge ?x321 (_ bv1 32))))
 (let (($x563 (= $x723 $x18)))
 (let (($x360 (= false false)))
 (let (($x88 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x69 (=> $x88 $x360)))
 (let (($x121 (= ?x321 (_ bv0 32))))
 (let (($x541 (= $x88 $x121)))
 (let (($x447 (and $x541 $x69)))
 (let (($x612 (and $x447 $x563)))
 (let (($x844 (and $x612 $x390)))
 (let (($x740 (= $x844 true)))
 (let (($x348 (= $x740 true)))
 (let (($x482 (= $x348 true)))
 (let (($x845 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x42 (=> $x845 true)))
 (let (($x250 (= $x845 $x18)))
 (let (($x525 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x503 (=> $x525 $x360)))
 (let (($x301 (= $x525 $x121)))
 (let (($x665 (and $x301 $x503)))
 (let (($x28 (and $x665 $x250)))
 (let (($x275 (and $x28 $x42)))
 (let (($x203 (= $x275 true)))
 (let (($x209 (= $x203 true)))
 (let (($x261 (= $x209 true)))
 (let (($x364 (and $x261 $x482)))
 (let (($x840 (and $x364 $x487)))
 (let (($x403 (and $x840 $x24)))
 (let (($x567 (and $x403 $x97)))
 (let (($x194 (and $x567 $x108)))
 (let (($x834 (and $x194 $x287)))
 (let (($x725 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x687 (and $x725 $x834)))
 (let (($x317 (bvugt ?x588 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x37 (bvadd ?x588 (_ bv3 32))))
 (let (($x809 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x37)))
 (let (($x657 (=> (bvule ?x588 (bvsub (bvadd ?x588 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x809 $x317)))))))
 (let (($x510 (=> (and $x615 (bvule ?x588 (bvsub (bvadd ?x588 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x809 $x317)))))))
 (let (($x291 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x391 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x783 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x443 (=> $x783 (or false (or false (and true (or $x391 $x291)))))))
 (let (($x684 (=> (and $x615 $x783) (or false (or false (and true (or $x391 $x291)))))))
 (let (($x99 (and $x684 $x510)))
 (let (($x136 (and $x99 $x687)))
 (let (($x449 (=> $x136 $x251)))
 (not $x449))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 162
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x583 (= $x190 false)))
 (let (($x614 (= $x583 true)))
 (let ((?x191 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x17 (= (_ bv0 3) ?x191)))
 (let (($x161 (= $x17 true)))
 (let (($x185 (= $x161 true)))
 (let (($x73 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x187 (=> $x73 true)))
 (let (($x78 (= $x73 (bvuge (ite $x190 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x12 (= false false)))
 (let (($x662 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x436 (=> $x662 $x12)))
 (let (($x268 (= $x662 (= (ite $x190 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x204 (and $x268 $x436)))
 (let (($x392 (and $x204 $x78)))
 (let (($x488 (and $x392 $x187)))
 (let (($x446 (= $x488 true)))
 (let (($x340 (= $x446 true)))
 (let (($x343 (= $x340 true)))
 (let ((?x857 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x287 (= (_ bv0 32) ?x857)))
 (let ((?x861 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x691 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x861)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x841 (and $x194 $x691)))
 (let (($x834 (and $x841 $x287)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x687 (and $x108 $x834)))
 (let (($x136 (= $x687 true)))
 (let (($x277 (= $x136 true)))
 (let (($x105 (= $x277 true)))
 (let (($x408 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x89 (=> $x408 true)))
 (let (($x688 (= $x408 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x659 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x816 (=> $x659 $x12)))
 (let (($x269 (= $x659 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x264 (and $x269 $x816)))
 (let (($x128 (and $x264 $x688)))
 (let (($x387 (and $x128 $x89)))
 (let (($x453 (= $x387 true)))
 (let (($x276 (= $x453 true)))
 (let (($x860 (= $x276 true)))
 (let ((?x321 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x121 (bvneg ?x321)))
 (let (($x360 (= ?x121 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x503 (= $x360 true)))
 (let (($x665 (= $x503 true)))
 (let (($x440 (and $x665 $x860)))
 (let (($x251 (and $x440 $x105)))
 (let (($x458 (and $x251 $x343)))
 (let (($x170 (and $x458 $x185)))
 (let (($x525 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x530 (and $x525 $x170)))
 (let ((?x783 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x538 (bvugt ?x783 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x475 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x783 (_ bv3 32)))))
 (let (($x725 (=> (bvule ?x783 (bvsub (bvadd ?x783 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x475 $x538)))))))
 (let (($x615 (not $x190)))
 (let (($x283 (=> (and $x615 (bvule ?x783 (bvsub (bvadd ?x783 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x475 $x538)))))))
 (let (($x489 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x838 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x57 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x653 (=> $x57 (or false (or false (and true (or $x838 $x489)))))))
 (let (($x244 (=> (and $x615 $x57) (or false (or false (and true (or $x838 $x489)))))))
 (let (($x37 (and $x244 $x283)))
 (let (($x216 (and $x37 $x530)))
 (let (($x344 (=> $x216 $x614)))
 (not $x344)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x583 (= $x190 false)))
 (let (($x614 (= $x583 true)))
 (let ((?x191 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x17 (= (_ bv0 3) ?x191)))
 (let (($x161 (= $x17 true)))
 (let (($x185 (= $x161 true)))
 (let (($x73 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x187 (=> $x73 true)))
 (let (($x78 (= $x73 (bvuge (ite $x190 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x12 (= false false)))
 (let (($x662 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x436 (=> $x662 $x12)))
 (let (($x268 (= $x662 (= (ite $x190 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x204 (and $x268 $x436)))
 (let (($x392 (and $x204 $x78)))
 (let (($x488 (and $x392 $x187)))
 (let (($x446 (= $x488 true)))
 (let (($x340 (= $x446 true)))
 (let (($x343 (= $x340 true)))
 (let ((?x857 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x287 (= (_ bv0 32) ?x857)))
 (let ((?x861 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x691 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x861)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x841 (and $x194 $x691)))
 (let (($x834 (and $x841 $x287)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x687 (and $x108 $x834)))
 (let (($x136 (= $x687 true)))
 (let (($x277 (= $x136 true)))
 (let (($x105 (= $x277 true)))
 (let (($x408 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x89 (=> $x408 true)))
 (let (($x688 (= $x408 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x659 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x816 (=> $x659 $x12)))
 (let (($x269 (= $x659 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x264 (and $x269 $x816)))
 (let (($x128 (and $x264 $x688)))
 (let (($x387 (and $x128 $x89)))
 (let (($x453 (= $x387 true)))
 (let (($x276 (= $x453 true)))
 (let (($x860 (= $x276 true)))
 (let ((?x321 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x121 (bvneg ?x321)))
 (let (($x360 (= ?x121 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x503 (= $x360 true)))
 (let (($x665 (= $x503 true)))
 (let (($x440 (and $x665 $x860)))
 (let (($x251 (and $x440 $x105)))
 (let (($x458 (and $x251 $x343)))
 (let (($x170 (and $x458 $x185)))
 (let (($x525 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x530 (and $x525 $x170)))
 (let ((?x783 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x538 (bvugt ?x783 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x475 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x783 (_ bv3 32)))))
 (let (($x725 (=> (bvule ?x783 (bvsub (bvadd ?x783 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x475 $x538)))))))
 (let (($x615 (not $x190)))
 (let (($x283 (=> (and $x615 (bvule ?x783 (bvsub (bvadd ?x783 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x475 $x538)))))))
 (let (($x489 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x838 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x57 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x653 (=> $x57 (or false (or false (and true (or $x838 $x489)))))))
 (let (($x244 (=> (and $x615 $x57) (or false (or false (and true (or $x838 $x489)))))))
 (let (($x37 (and $x244 $x283)))
 (let (($x216 (and $x37 $x530)))
 (let (($x344 (=> $x216 $x614)))
 (not $x344)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv268435459 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 163
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x116 (= $x190 false)))
 (let (($x129 (= $x116 true)))
 (let ((?x90 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x444 (= (_ bv0 3) ?x90)))
 (let (($x378 (= $x444 true)))
 (let (($x201 (= $x378 true)))
 (let (($x171 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x512 (=> $x171 false)))
 (let (($x334 (= $x171 (bvuge (ite $x190 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x203 (= false false)))
 (let (($x678 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x508 (=> $x678 $x203)))
 (let (($x338 (= $x678 (= (ite $x190 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x847 (and $x338 $x508)))
 (let (($x415 (and $x847 $x334)))
 (let (($x377 (and $x415 $x512)))
 (let (($x677 (= $x377 true)))
 (let (($x235 (= $x677 true)))
 (let (($x363 (= $x235 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x496 (= (_ bv0 32) ?x158)))
 (let ((?x333 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x848 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x333)))
 (let (($x740 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x849 (and $x740 $x848)))
 (let (($x278 (and $x849 $x496)))
 (let (($x612 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x345 (and $x612 $x278)))
 (let (($x328 (= $x345 true)))
 (let (($x140 (= $x328 true)))
 (let (($x234 (= $x140 true)))
 (let (($x482 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x447 (=> $x482 false)))
 (let (($x390 (= $x482 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x18 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x261 (=> $x18 $x203)))
 (let (($x275 (= $x18 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x209 (and $x275 $x261)))
 (let (($x844 (and $x209 $x390)))
 (let (($x723 (and $x844 $x447)))
 (let (($x563 (= $x723 true)))
 (let (($x88 (= $x563 true)))
 (let (($x541 (= $x88 true)))
 (let ((?x301 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x360 (bvneg ?x301)))
 (let (($x665 (= ?x360 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x830 (= $x665 true)))
 (let (($x659 (= $x830 true)))
 (let (($x41 (and $x659 $x541)))
 (let (($x676 (and $x41 $x234)))
 (let (($x788 (and $x676 $x363)))
 (let (($x197 (and $x788 $x201)))
 (let (($x281 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x464 (and $x281 $x197)))
 (let ((?x57 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x510 (bvugt ?x57 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x657 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x57 (_ bv3 32)))))
 (let (($x525 (=> (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x657 $x510)))))))
 (let (($x615 (not $x190)))
 (let (($x457 (=> (and $x615 (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x657 $x510)))))))
 (let (($x684 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x443 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x809 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x317 (=> $x809 (or false (or false (and true (or $x443 $x684)))))))
 (let (($x715 (=> (and $x615 $x809) (or false (or false (and true (or $x443 $x684)))))))
 (let (($x186 (and $x715 $x457)))
 (let (($x192 (and $x186 $x464)))
 (let (($x219 (=> $x192 $x129)))
 (not $x219)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x116 (= $x190 false)))
 (let (($x129 (= $x116 true)))
 (let ((?x90 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x444 (= (_ bv0 3) ?x90)))
 (let (($x378 (= $x444 true)))
 (let (($x201 (= $x378 true)))
 (let (($x171 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x512 (=> $x171 false)))
 (let (($x334 (= $x171 (bvuge (ite $x190 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x203 (= false false)))
 (let (($x678 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x508 (=> $x678 $x203)))
 (let (($x338 (= $x678 (= (ite $x190 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x847 (and $x338 $x508)))
 (let (($x415 (and $x847 $x334)))
 (let (($x377 (and $x415 $x512)))
 (let (($x677 (= $x377 true)))
 (let (($x235 (= $x677 true)))
 (let (($x363 (= $x235 true)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x496 (= (_ bv0 32) ?x158)))
 (let ((?x333 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x848 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x333)))
 (let (($x740 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x849 (and $x740 $x848)))
 (let (($x278 (and $x849 $x496)))
 (let (($x612 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x345 (and $x612 $x278)))
 (let (($x328 (= $x345 true)))
 (let (($x140 (= $x328 true)))
 (let (($x234 (= $x140 true)))
 (let (($x482 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x447 (=> $x482 false)))
 (let (($x390 (= $x482 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x18 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x261 (=> $x18 $x203)))
 (let (($x275 (= $x18 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x209 (and $x275 $x261)))
 (let (($x844 (and $x209 $x390)))
 (let (($x723 (and $x844 $x447)))
 (let (($x563 (= $x723 true)))
 (let (($x88 (= $x563 true)))
 (let (($x541 (= $x88 true)))
 (let ((?x301 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x360 (bvneg ?x301)))
 (let (($x665 (= ?x360 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x830 (= $x665 true)))
 (let (($x659 (= $x830 true)))
 (let (($x41 (and $x659 $x541)))
 (let (($x676 (and $x41 $x234)))
 (let (($x788 (and $x676 $x363)))
 (let (($x197 (and $x788 $x201)))
 (let (($x281 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x464 (and $x281 $x197)))
 (let ((?x57 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x510 (bvugt ?x57 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x657 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x57 (_ bv3 32)))))
 (let (($x525 (=> (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x657 $x510)))))))
 (let (($x615 (not $x190)))
 (let (($x457 (=> (and $x615 (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x657 $x510)))))))
 (let (($x684 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x443 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x809 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x317 (=> $x809 (or false (or false (and true (or $x443 $x684)))))))
 (let (($x715 (=> (and $x615 $x809) (or false (or false (and true (or $x443 $x684)))))))
 (let (($x186 (and $x715 $x457)))
 (let (($x192 (and $x186 $x464)))
 (let (($x219 (=> $x192 $x129)))
 (not $x219)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv786432 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv786432 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv786435 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 164
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x291 (not $x190)))
 (let (($x619 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x867 (or $x619 $x291)))
 (let (($x544 (= $x867 true)))
 (let (($x575 (= $x544 true)))
 (let ((?x72 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x693 (= (_ bv0 3) ?x72)))
 (let (($x403 (= $x693 true)))
 (let (($x422 (= $x403 true)))
 (let (($x303 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x97 (=> $x303 true)))
 (let (($x28 (= $x303 (bvuge (ite $x190 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x816 (= false false)))
 (let (($x23 (=> $x619 $x816)))
 (let (($x683 (= $x619 (= (ite $x190 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x260 (and $x683 $x23)))
 (let (($x620 (and $x260 $x28)))
 (let (($x24 (and $x620 $x97)))
 (let (($x104 (= $x24 true)))
 (let (($x64 (= $x104 true)))
 (let (($x9 (= $x64 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x857 (= (_ bv0 32) ?x136)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x251 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x687 (and $x108 $x251)))
 (let (($x287 (and $x687 $x857)))
 (let (($x860 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x841 (and $x860 $x287)))
 (let (($x834 (= $x841 true)))
 (let (($x277 (= $x834 true)))
 (let (($x162 (= $x277 true)))
 (let (($x861 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x387 (=> $x861 true)))
 (let (($x440 (= $x861 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x631 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x408 (=> $x631 $x816)))
 (let (($x12 (= $x631 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x264 (and $x12 $x408)))
 (let (($x221 (and $x264 $x440)))
 (let (($x453 (and $x221 $x387)))
 (let (($x276 (= $x453 true)))
 (let (($x688 (= $x276 true)))
 (let (($x128 (= $x688 true)))
 (let ((?x503 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x665 (bvneg ?x503)))
 (let (($x659 (= ?x665 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x845 (= $x659 true)))
 (let (($x18 (= $x845 true)))
 (let (($x669 (and $x18 $x128)))
 (let (($x662 (and $x669 $x162)))
 (let (($x606 (and $x662 $x9)))
 (let (($x5 (and $x606 $x422)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x367 (and $x121 $x5)))
 (let ((?x391 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x283 (bvugt ?x391 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x725 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x391 (_ bv3 32)))))
 (let (($x281 (=> (bvule ?x391 (bvsub (bvadd ?x391 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x725 $x283)))))))
 (let (($x652 (=> (and $x291 (bvule ?x391 (bvsub (bvadd ?x391 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x725 $x283)))))))
 (let (($x244 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x653 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x475 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x538 (=> $x475 (or false (or false (and true (or $x653 $x244)))))))
 (let (($x296 (=> (and $x291 $x475) (or false (or false (and true (or $x653 $x244)))))))
 (let (($x7 (and $x296 $x652)))
 (let (($x131 (and $x7 $x367)))
 (let (($x592 (=> $x131 $x575)))
 (not $x592))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x291 (not $x190)))
 (let (($x619 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x867 (or $x619 $x291)))
 (let (($x544 (= $x867 true)))
 (let (($x575 (= $x544 true)))
 (let ((?x72 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x693 (= (_ bv0 3) ?x72)))
 (let (($x403 (= $x693 true)))
 (let (($x422 (= $x403 true)))
 (let (($x303 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x97 (=> $x303 true)))
 (let (($x28 (= $x303 (bvuge (ite $x190 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x816 (= false false)))
 (let (($x23 (=> $x619 $x816)))
 (let (($x683 (= $x619 (= (ite $x190 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x260 (and $x683 $x23)))
 (let (($x620 (and $x260 $x28)))
 (let (($x24 (and $x620 $x97)))
 (let (($x104 (= $x24 true)))
 (let (($x64 (= $x104 true)))
 (let (($x9 (= $x64 true)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x857 (= (_ bv0 32) ?x136)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x251 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x687 (and $x108 $x251)))
 (let (($x287 (and $x687 $x857)))
 (let (($x860 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x841 (and $x860 $x287)))
 (let (($x834 (= $x841 true)))
 (let (($x277 (= $x834 true)))
 (let (($x162 (= $x277 true)))
 (let (($x861 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x387 (=> $x861 true)))
 (let (($x440 (= $x861 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x631 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x408 (=> $x631 $x816)))
 (let (($x12 (= $x631 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x264 (and $x12 $x408)))
 (let (($x221 (and $x264 $x440)))
 (let (($x453 (and $x221 $x387)))
 (let (($x276 (= $x453 true)))
 (let (($x688 (= $x276 true)))
 (let (($x128 (= $x688 true)))
 (let ((?x503 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x665 (bvneg ?x503)))
 (let (($x659 (= ?x665 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x845 (= $x659 true)))
 (let (($x18 (= $x845 true)))
 (let (($x669 (and $x18 $x128)))
 (let (($x662 (and $x669 $x162)))
 (let (($x606 (and $x662 $x9)))
 (let (($x5 (and $x606 $x422)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x367 (and $x121 $x5)))
 (let ((?x391 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x283 (bvugt ?x391 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x725 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x391 (_ bv3 32)))))
 (let (($x281 (=> (bvule ?x391 (bvsub (bvadd ?x391 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x725 $x283)))))))
 (let (($x652 (=> (and $x291 (bvule ?x391 (bvsub (bvadd ?x391 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x725 $x283)))))))
 (let (($x244 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x653 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x475 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x538 (=> $x475 (or false (or false (and true (or $x653 $x244)))))))
 (let (($x296 (=> (and $x291 $x475) (or false (or false (and true (or $x653 $x244)))))))
 (let (($x7 (and $x296 $x652)))
 (let (($x131 (and $x7 $x367)))
 (let (($x592 (=> $x131 $x575)))
 (not $x592))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 165
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x583 (= input.spec-%var-sum-0.L2%6%bbentry input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x614 (= $x583 true)))
 (let (($x446 (= $x614 true)))
 (let ((?x465 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x60 (bvneg ?x465)))
 (let (($x638 (= ?x60 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x111 (= $x638 true)))
 (let (($x530 (= $x111 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x415 (= (_ bv0 32) ?x171)))
 (let ((?x508 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x847 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x508)))
 (let (($x334 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x338 (and $x334 $x847)))
 (let (($x677 (and $x338 $x415)))
 (let (($x377 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x377 $x677)))
 (let (($x348 (= $x188 true)))
 (let (($x116 (= $x348 true)))
 (let (($x129 (= $x116 true)))
 (let (($x235 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x378 (=> $x235 true)))
 (let (($x464 (= $x235 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x23 (= false false)))
 (let (($x234 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x496 (=> $x234 $x23)))
 (let (($x158 (= $x234 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x849 (and $x158 $x496)))
 (let (($x444 (and $x849 $x464)))
 (let (($x788 (and $x444 $x378)))
 (let (($x533 (= $x788 true)))
 (let (($x363 (= $x533 true)))
 (let (($x90 (= $x363 true)))
 (let (($x64 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x72 (=> $x64 true)))
 (let (($x475 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x396 (ite $x475 (_ bv0 32) (_ bv1 32))))
 (let (($x606 (= $x64 (bvuge ?x396 (_ bv1 32)))))
 (let (($x619 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x260 (=> $x619 $x23)))
 (let (($x683 (= $x619 (= ?x396 (_ bv0 32)))))
 (let (($x303 (and $x683 $x260)))
 (let (($x34 (and $x303 $x606)))
 (let (($x693 (and $x34 $x72)))
 (let (($x403 (= $x693 true)))
 (let (($x422 (= $x403 true)))
 (let (($x5 (= $x422 true)))
 (let ((?x417 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x244 (= (_ bv0 3) ?x417)))
 (let (($x783 (= $x244 true)))
 (let (($x317 (= $x783 true)))
 (let (($x443 (= $x475 true)))
 (let (($x684 (= $x443 true)))
 (let (($x588 (= $x684 true)))
 (let (($x715 (and $x588 $x317)))
 (let (($x367 (and $x715 $x5)))
 (let (($x201 (and $x367 $x90)))
 (let (($x219 (and $x201 $x129)))
 (let (($x17 (and $x219 $x530)))
 (let (($x161 (and $x619 $x17)))
 (let (($x838 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x436 (and $x838 $x161)))
 (let (($x637 (=> $x436 $x446)))
 (not $x637)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x583 (= input.spec-%var-sum-0.L2%6%bbentry input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x614 (= $x583 true)))
 (let (($x446 (= $x614 true)))
 (let ((?x465 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x60 (bvneg ?x465)))
 (let (($x638 (= ?x60 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x111 (= $x638 true)))
 (let (($x530 (= $x111 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x415 (= (_ bv0 32) ?x171)))
 (let ((?x508 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x847 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x508)))
 (let (($x334 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x338 (and $x334 $x847)))
 (let (($x677 (and $x338 $x415)))
 (let (($x377 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x377 $x677)))
 (let (($x348 (= $x188 true)))
 (let (($x116 (= $x348 true)))
 (let (($x129 (= $x116 true)))
 (let (($x235 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x378 (=> $x235 true)))
 (let (($x464 (= $x235 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x23 (= false false)))
 (let (($x234 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x496 (=> $x234 $x23)))
 (let (($x158 (= $x234 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x849 (and $x158 $x496)))
 (let (($x444 (and $x849 $x464)))
 (let (($x788 (and $x444 $x378)))
 (let (($x533 (= $x788 true)))
 (let (($x363 (= $x533 true)))
 (let (($x90 (= $x363 true)))
 (let (($x64 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x72 (=> $x64 true)))
 (let (($x475 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x396 (ite $x475 (_ bv0 32) (_ bv1 32))))
 (let (($x606 (= $x64 (bvuge ?x396 (_ bv1 32)))))
 (let (($x619 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x260 (=> $x619 $x23)))
 (let (($x683 (= $x619 (= ?x396 (_ bv0 32)))))
 (let (($x303 (and $x683 $x260)))
 (let (($x34 (and $x303 $x606)))
 (let (($x693 (and $x34 $x72)))
 (let (($x403 (= $x693 true)))
 (let (($x422 (= $x403 true)))
 (let (($x5 (= $x422 true)))
 (let ((?x417 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x244 (= (_ bv0 3) ?x417)))
 (let (($x783 (= $x244 true)))
 (let (($x317 (= $x783 true)))
 (let (($x443 (= $x475 true)))
 (let (($x684 (= $x443 true)))
 (let (($x588 (= $x684 true)))
 (let (($x715 (and $x588 $x317)))
 (let (($x367 (and $x715 $x5)))
 (let (($x201 (and $x367 $x90)))
 (let (($x219 (and $x201 $x129)))
 (let (($x17 (and $x219 $x530)))
 (let (($x161 (and $x619 $x17)))
 (let (($x838 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x436 (and $x838 $x161)))
 (let (($x637 (=> $x436 $x446)))
 (not $x637)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 166
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x838 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x507 (not $x838)))
 (let (($x573 (or $x838 $x507)))
 (let (($x567 (= $x573 true)))
 (let (($x250 (= $x567 true)))
 (let ((?x458 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x191 (= (_ bv0 3) ?x458)))
 (let (($x187 (= $x191 true)))
 (let (($x78 (= $x187 true)))
 (let (($x73 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x344 (=> $x73 true)))
 (let (($x392 (= $x73 (bvuge (ite $x838 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x771 (= false false)))
 (let (($x264 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x834 (=> $x264 $x771)))
 (let (($x128 (= $x264 (= (ite $x838 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x277 (and $x128 $x834)))
 (let (($x147 (and $x277 $x392)))
 (let (($x488 (and $x147 $x344)))
 (let (($x468 (= $x488 true)))
 (let (($x185 (= $x468 true)))
 (let (($x216 (= $x185 true)))
 (let ((?x863 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x261 (= (_ bv0 32) ?x863)))
 (let ((?x723 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x390 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x723)))
 (let (($x848 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x380 (and $x848 $x390)))
 (let (($x482 (and $x380 $x261)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (and $x170 $x482)))
 (let (($x740 (= $x316 true)))
 (let (($x313 (= $x740 true)))
 (let (($x203 (= $x313 true)))
 (let (($x194 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x340 (=> $x194 true)))
 (let (($x269 (= $x194 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x37 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x487 (=> $x37 $x771)))
 (let (($x301 (= $x37 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x42 (and $x301 $x487)))
 (let (($x449 (and $x42 $x269)))
 (let (($x563 (and $x449 $x340)))
 (let (($x88 (= $x563 true)))
 (let (($x41 (= $x88 true)))
 (let (($x69 (= $x41 true)))
 (let ((?x849 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x235 (bvneg ?x849)))
 (let (($x464 (= ?x235 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x444 (= $x464 true)))
 (let (($x378 (= $x444 true)))
 (let (($x615 (and $x378 $x69)))
 (let (($x209 (and $x615 $x203)))
 (let (($x404 (and $x209 $x216)))
 (let (($x262 (and $x404 $x78)))
 (let (($x328 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x868 (and $x328 $x262)))
 (let ((?x653 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x422 (bvugt ?x653 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x653 (_ bv3 32)))))
 (let (($x676 (=> (bvule ?x653 (bvsub (bvadd ?x653 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x403 $x422)))))))
 (let (($x9 (=> (and $x507 (bvule ?x653 (bvsub (bvadd ?x653 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x403 $x422)))))))
 (let (($x396 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x725 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x303 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x64 (=> $x303 (or false (or false (and true (or $x725 $x396)))))))
 (let (($x588 (=> (and $x507 $x303) (or false (or false (and true (or $x725 $x396)))))))
 (let (($x606 (and $x588 $x9)))
 (let (($x682 (and $x606 $x868)))
 (let (($x840 (=> $x682 $x250)))
 (not $x840))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x838 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x507 (not $x838)))
 (let (($x573 (or $x838 $x507)))
 (let (($x567 (= $x573 true)))
 (let (($x250 (= $x567 true)))
 (let ((?x458 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x191 (= (_ bv0 3) ?x458)))
 (let (($x187 (= $x191 true)))
 (let (($x78 (= $x187 true)))
 (let (($x73 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x344 (=> $x73 true)))
 (let (($x392 (= $x73 (bvuge (ite $x838 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x771 (= false false)))
 (let (($x264 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x834 (=> $x264 $x771)))
 (let (($x128 (= $x264 (= (ite $x838 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x277 (and $x128 $x834)))
 (let (($x147 (and $x277 $x392)))
 (let (($x488 (and $x147 $x344)))
 (let (($x468 (= $x488 true)))
 (let (($x185 (= $x468 true)))
 (let (($x216 (= $x185 true)))
 (let ((?x863 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x261 (= (_ bv0 32) ?x863)))
 (let ((?x723 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x390 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x723)))
 (let (($x848 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x380 (and $x848 $x390)))
 (let (($x482 (and $x380 $x261)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (and $x170 $x482)))
 (let (($x740 (= $x316 true)))
 (let (($x313 (= $x740 true)))
 (let (($x203 (= $x313 true)))
 (let (($x194 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x340 (=> $x194 true)))
 (let (($x269 (= $x194 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x37 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x487 (=> $x37 $x771)))
 (let (($x301 (= $x37 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x42 (and $x301 $x487)))
 (let (($x449 (and $x42 $x269)))
 (let (($x563 (and $x449 $x340)))
 (let (($x88 (= $x563 true)))
 (let (($x41 (= $x88 true)))
 (let (($x69 (= $x41 true)))
 (let ((?x849 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x235 (bvneg ?x849)))
 (let (($x464 (= ?x235 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x444 (= $x464 true)))
 (let (($x378 (= $x444 true)))
 (let (($x615 (and $x378 $x69)))
 (let (($x209 (and $x615 $x203)))
 (let (($x404 (and $x209 $x216)))
 (let (($x262 (and $x404 $x78)))
 (let (($x328 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x868 (and $x328 $x262)))
 (let ((?x653 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x422 (bvugt ?x653 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x653 (_ bv3 32)))))
 (let (($x676 (=> (bvule ?x653 (bvsub (bvadd ?x653 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x403 $x422)))))))
 (let (($x9 (=> (and $x507 (bvule ?x653 (bvsub (bvadd ?x653 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x403 $x422)))))))
 (let (($x396 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x725 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x303 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x64 (=> $x303 (or false (or false (and true (or $x725 $x396)))))))
 (let (($x588 (=> (and $x507 $x303) (or false (or false (and true (or $x725 $x396)))))))
 (let (($x606 (and $x588 $x9)))
 (let (($x682 (and $x606 $x868)))
 (let (($x840 (=> $x682 $x250)))
 (not $x840))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 167
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x262 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x868 (= (_ bv0 32) ?x262)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let (($x458 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x458 $x187)))
 (let (($x682 (and $x78 $x868)))
 (let (($x404 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x338 (and $x404 $x682)))
 (let (($x171 (= $x338 true)))
 (let (($x415 (= $x171 true)))
 (let ((?x567 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x840 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x533 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x192 (concat ?x129 (concat ?x533 (concat ?x840 ?x567)))))
 (let (($x684 (= ?x192 input.dst.llvm-%l)))
 (let (($x219 (= $x684 true)))
 (let (($x610 (= $x219 true)))
 (let (($x512 (= input.dst.llvm-%l ?x192)))
 (let (($x377 (and (and (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l) $x404) $x682)))
 (let (($x475 (and $x377 $x512)))
 (let (($x834 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x392 (=> $x834 true)))
 (let (($x73 (= $x834 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x740 (= false false)))
 (let (($x380 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x313 (=> $x380 $x740)))
 (let (($x316 (= $x380 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x203 (and $x316 $x313)))
 (let (($x204 (and $x203 $x73)))
 (let (($x147 (and $x204 $x392)))
 (let (($x162 (and $x147 $x475)))
 (let (($x662 (= $x162 true)))
 (let (($x575 (= $x662 true)))
 (let (($x844 (= $x575 true)))
 (let (($x188 (and $x844 $x610)))
 (let (($x838 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x348 (and $x838 $x188)))
 (let (($x7 (=> $x348 $x415)))
 (not $x7))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x262 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x868 (= (_ bv0 32) ?x262)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let (($x458 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x458 $x187)))
 (let (($x682 (and $x78 $x868)))
 (let (($x404 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x338 (and $x404 $x682)))
 (let (($x171 (= $x338 true)))
 (let (($x415 (= $x171 true)))
 (let ((?x567 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x840 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x533 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x192 (concat ?x129 (concat ?x533 (concat ?x840 ?x567)))))
 (let (($x684 (= ?x192 input.dst.llvm-%l)))
 (let (($x219 (= $x684 true)))
 (let (($x610 (= $x219 true)))
 (let (($x512 (= input.dst.llvm-%l ?x192)))
 (let (($x377 (and (and (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l) $x404) $x682)))
 (let (($x475 (and $x377 $x512)))
 (let (($x834 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x392 (=> $x834 true)))
 (let (($x73 (= $x834 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x740 (= false false)))
 (let (($x380 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x313 (=> $x380 $x740)))
 (let (($x316 (= $x380 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x203 (and $x316 $x313)))
 (let (($x204 (and $x203 $x73)))
 (let (($x147 (and $x204 $x392)))
 (let (($x162 (and $x147 $x475)))
 (let (($x662 (= $x162 true)))
 (let (($x575 (= $x662 true)))
 (let (($x844 (= $x575 true)))
 (let (($x188 (and $x844 $x610)))
 (let (($x838 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x348 (and $x838 $x188)))
 (let (($x7 (=> $x348 $x415)))
 (not $x7))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 168
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x264 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x440 (= (_ bv0 3) ?x264)))
 (let (($x453 (= $x440 true)))
 (let ((?x346 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x615 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x525 (concat ?x99 (concat ?x615 (concat ?x194 ?x346)))))
 (let (($x333 (= ?x525 input.dst.llvm-%l)))
 (let (($x170 (= $x333 true)))
 (let (($x848 (= $x170 true)))
 (let (($x283 (= input.dst.llvm-%l ?x525)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x41)))
 (let ((?x464 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x444 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x464)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x197 $x444)))
 (let (($x340 (and $x42 $x69)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x201 (and (and (and $x9 $x158) $x340) $x283)))
 (let (($x64 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x849 (=> $x64 true)))
 (let (($x422 (= $x64 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x367 (= false false)))
 (let (($x715 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x612 (=> $x715 $x367)))
 (let (($x725 (= $x715 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x693 (and $x725 $x612)))
 (let (($x496 (and $x693 $x422)))
 (let (($x345 (and $x496 $x849)))
 (let (($x652 (and $x345 $x201)))
 (let (($x487 (= $x652 true)))
 (let (($x417 (= $x487 true)))
 (let (($x244 (= $x417 true)))
 (let (($x723 (and $x244 $x848)))
 (let (($x838 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x209 (and $x838 $x723)))
 (let (($x128 (=> $x209 $x453)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x264 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x440 (= (_ bv0 3) ?x264)))
 (let (($x453 (= $x440 true)))
 (let ((?x346 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x615 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x525 (concat ?x99 (concat ?x615 (concat ?x194 ?x346)))))
 (let (($x333 (= ?x525 input.dst.llvm-%l)))
 (let (($x170 (= $x333 true)))
 (let (($x848 (= $x170 true)))
 (let (($x283 (= input.dst.llvm-%l ?x525)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x41)))
 (let ((?x464 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x444 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x464)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x197 $x444)))
 (let (($x340 (and $x42 $x69)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x201 (and (and (and $x9 $x158) $x340) $x283)))
 (let (($x64 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x849 (=> $x64 true)))
 (let (($x422 (= $x64 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x367 (= false false)))
 (let (($x715 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x612 (=> $x715 $x367)))
 (let (($x725 (= $x715 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x693 (and $x725 $x612)))
 (let (($x496 (and $x693 $x422)))
 (let (($x345 (and $x496 $x849)))
 (let (($x652 (and $x345 $x201)))
 (let (($x487 (= $x652 true)))
 (let (($x417 (= $x487 true)))
 (let (($x244 (= $x417 true)))
 (let (($x723 (and $x244 $x848)))
 (let (($x838 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x209 (and $x838 $x723)))
 (let (($x128 (=> $x209 $x453)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 169
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x281))))
 (let ((?x538 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x637 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x510 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x57 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x364 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x57 false (concat ?x510 (concat ?x637 (concat ?x56 ?x538))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x275)))
 (let (($x403 (= $x364 true)))
 (let (($x653 (= $x403 true)))
 (let ((?x338 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x610 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x662 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x192 (concat ?x662 (concat ?x171 (concat ?x610 ?x338)))))
 (let (($x863 (= ?x192 input.dst.llvm-%l)))
 (let (($x507 (= $x863 true)))
 (let (($x443 (= $x507 true)))
 (let (($x512 (= input.dst.llvm-%l ?x192)))
 (let ((?x844 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x415 (= (_ bv0 32) ?x844)))
 (let ((?x788 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x533 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x788)))
 (let (($x588 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x588 $x533)))
 (let (($x7 (and $x250 $x415)))
 (let (($x868 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x840 (and (and (and $x78 $x868) $x7) $x512)))
 (let (($x277 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x544 (=> $x277 true)))
 (let (($x185 (= $x277 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x313 (= false false)))
 (let (($x482 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x592 (=> $x482 $x313)))
 (let (($x563 (= $x482 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x191 (and $x563 $x592)))
 (let (($x343 (and $x191 $x185)))
 (let (($x129 (and $x343 $x544)))
 (let (($x600 (and $x129 $x840)))
 (let (($x475 (= $x600 true)))
 (let (($x575 (= $x475 true)))
 (let (($x783 (= $x575 true)))
 (let (($x5 (and $x783 $x443)))
 (let (($x838 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x303 (and $x838 $x5)))
 (let (($x34 (=> $x303 $x653)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x281))))
 (let ((?x538 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x637 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x510 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x57 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x364 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x57 false (concat ?x510 (concat ?x637 (concat ?x56 ?x538))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x275)))
 (let (($x403 (= $x364 true)))
 (let (($x653 (= $x403 true)))
 (let ((?x338 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x610 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x662 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x192 (concat ?x662 (concat ?x171 (concat ?x610 ?x338)))))
 (let (($x863 (= ?x192 input.dst.llvm-%l)))
 (let (($x507 (= $x863 true)))
 (let (($x443 (= $x507 true)))
 (let (($x512 (= input.dst.llvm-%l ?x192)))
 (let ((?x844 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x415 (= (_ bv0 32) ?x844)))
 (let ((?x788 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x533 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x788)))
 (let (($x588 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x588 $x533)))
 (let (($x7 (and $x250 $x415)))
 (let (($x868 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x840 (and (and (and $x78 $x868) $x7) $x512)))
 (let (($x277 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x544 (=> $x277 true)))
 (let (($x185 (= $x277 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x313 (= false false)))
 (let (($x482 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x592 (=> $x482 $x313)))
 (let (($x563 (= $x482 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x191 (and $x563 $x592)))
 (let (($x343 (and $x191 $x185)))
 (let (($x129 (and $x343 $x544)))
 (let (($x600 (and $x129 $x840)))
 (let (($x475 (= $x600 true)))
 (let (($x575 (= $x475 true)))
 (let (($x783 (= $x575 true)))
 (let (($x5 (and $x783 $x443)))
 (let (($x838 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x303 (and $x838 $x5)))
 (let (($x34 (=> $x303 $x653)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_29)
(= input.dst.llvm-mem @fun_26)
(function @fun_29
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_29 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x44200007)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x44200007)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x44200007)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_5768 (_ BitVec 32)) (BOUND_VARIABLE_5769 (_ BitVec 32)) (BOUND_VARIABLE_5770 (_ BitVec 32)) (BOUND_VARIABLE_5771 Bool) (BOUND_VARIABLE_5772 (_ BitVec 32)) (BOUND_VARIABLE_5773 (_ BitVec 32)) (BOUND_VARIABLE_5774 (_ BitVec 32)) (BOUND_VARIABLE_5775 (_ BitVec 32)) (BOUND_VARIABLE_5776 (_ BitVec 32)) (BOUND_VARIABLE_5777 (_ BitVec 32)) (BOUND_VARIABLE_5778 Bool) (BOUND_VARIABLE_5779 (_ BitVec 32)) (BOUND_VARIABLE_5780 (_ BitVec 32)) (BOUND_VARIABLE_5781 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
==query_number: 170
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x530 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x404 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem ?x404))))
 (let ((?x614 (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv2 32))) ?x204))))
 (let ((?x652 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x201 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x396 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x436 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x380 (concat ?x396 (concat ?x201 ?x652))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x614 ?x530 false)))
 (let (($x457 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x234 (=> $x457 $x436)))
 (let (($x121 (= $x457 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x268 (= false false)))
 (let (($x131 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x867 (=> $x131 $x268)))
 (let (($x538 (= $x131 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x363 (and $x538 $x867)))
 (let (($x281 (and $x363 $x121)))
 (let (($x235 (and $x281 $x234)))
 (let (($x447 (= $x235 true)))
 (let (($x541 (= $x447 true)))
 (let ((?x444 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x378 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x299 (concat ?x269 (concat ?x69 (concat ?x378 ?x444)))))
 (let (($x677 (= ?x299 input.dst.llvm-%l)))
 (let (($x21 (= $x677 true)))
 (let (($x116 (= $x21 true)))
 (let (($x583 (= input.dst.llvm-%l ?x299)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x316 (= (_ bv0 32) ?x128)))
 (let ((?x440 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x691 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x440)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x209 $x691)))
 (let (($x344 (and $x333 $x316)))
 (let (($x848 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x723 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x111 (and (and (and $x723 $x848) $x344) $x583)))
 (let (($x465 (and $x235 $x111)))
 (let (($x17 (= $x465 true)))
 (let (($x161 (= $x17 true)))
 (let (($x847 (= $x161 true)))
 (let (($x638 (and $x847 $x116)))
 (let (($x838 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x60 (and $x838 $x638)))
 (let (($x857 (=> $x60 $x541)))
 (not $x857))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x530 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x404 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem ?x404))))
 (let ((?x614 (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv2 32))) ?x204))))
 (let ((?x652 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x201 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x396 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x436 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x380 (concat ?x396 (concat ?x201 ?x652))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x614 ?x530 false)))
 (let (($x457 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x234 (=> $x457 $x436)))
 (let (($x121 (= $x457 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x268 (= false false)))
 (let (($x131 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x867 (=> $x131 $x268)))
 (let (($x538 (= $x131 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x363 (and $x538 $x867)))
 (let (($x281 (and $x363 $x121)))
 (let (($x235 (and $x281 $x234)))
 (let (($x447 (= $x235 true)))
 (let (($x541 (= $x447 true)))
 (let ((?x444 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x378 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x299 (concat ?x269 (concat ?x69 (concat ?x378 ?x444)))))
 (let (($x677 (= ?x299 input.dst.llvm-%l)))
 (let (($x21 (= $x677 true)))
 (let (($x116 (= $x21 true)))
 (let (($x583 (= input.dst.llvm-%l ?x299)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x316 (= (_ bv0 32) ?x128)))
 (let ((?x440 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x691 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x440)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x209 $x691)))
 (let (($x344 (and $x333 $x316)))
 (let (($x848 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x723 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x111 (and (and (and $x723 $x848) $x344) $x583)))
 (let (($x465 (and $x235 $x111)))
 (let (($x17 (= $x465 true)))
 (let (($x161 (= $x17 true)))
 (let (($x847 (= $x161 true)))
 (let (($x638 (and $x847 $x116)))
 (let (($x838 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x60 (and $x838 $x638)))
 (let (($x857 (=> $x60 $x541)))
 (not $x857))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2708125/query
