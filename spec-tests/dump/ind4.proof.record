==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x10 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x10 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= true false)))
 (let (($x71 (= $x70 true)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x60 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x60 (_ bv1 32))))
 (let (($x63 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x65 (= $x63 $x64)))
 (let (($x61 (= ?x60 (_ bv0 32))))
 (let (($x58 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x62 (= $x58 $x61)))
 (let (($x66 (and $x62 $x65)))
 (let (($x67 (= $x66 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x50 (concat ?x33 (concat ?x17 ?x41)))))
 (let (($x53 (= ?x51 input.dst.llvm-%l)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x37)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x36 $x38)))
 (let (($x44 (and $x8 $x18)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x25 $x44)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x26)))))))
 (let (($x11 (and $x22 $x5)))
 (let (($x6 (= $x11 true)))
 (let (($x39 (= $x6 true)))
 (let (($x34 (= $x39 true)))
 (let (($x56 (and $x34 $x55)))
 (let (($x68 (and $x56 $x67)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x69 (and $x12 $x68)))
 (let (($x72 (=> $x69 $x71)))
 (not $x72)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (= true false)))
 (let (($x71 (= $x70 true)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x60 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x60 (_ bv1 32))))
 (let (($x63 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x65 (= $x63 $x64)))
 (let (($x61 (= ?x60 (_ bv0 32))))
 (let (($x58 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x62 (= $x58 $x61)))
 (let (($x66 (and $x62 $x65)))
 (let (($x67 (= $x66 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x50 (concat ?x33 (concat ?x17 ?x41)))))
 (let (($x53 (= ?x51 input.dst.llvm-%l)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x37)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x36 $x38)))
 (let (($x44 (and $x8 $x18)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x25 $x44)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x26)))))))
 (let (($x11 (and $x22 $x5)))
 (let (($x6 (= $x11 true)))
 (let (($x39 (= $x6 true)))
 (let (($x34 (= $x39 true)))
 (let (($x56 (and $x34 $x55)))
 (let (($x68 (and $x56 $x67)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x69 (and $x12 $x68)))
 (let (($x72 (=> $x69 $x71)))
 (not $x72)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv128 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1024 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1027 32) (_ bv64 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1024 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1027 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (= true false)))
 (let (($x75 (= $x74 true)))
 (let (($x66 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x70 (not $x66)))
 (let (($x61 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x69 (not $x61)))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x63 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x67 (bvuge ?x63 (_ bv1 32))))
 (let (($x68 (= $x66 $x67)))
 (let (($x64 (= ?x63 (_ bv0 32))))
 (let (($x65 (= $x61 $x64)))
 (let (($x73 (and (and (and $x65 $x68) $x69) $x70)))
 (let (($x23 (= $x73 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x53 (concat ?x31 (concat ?x45 ?x9)))))
 (let (($x56 (= ?x54 input.dst.llvm-%l)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x44)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x16 $x37)))
 (let (($x11 (and $x18 $x5)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x48 $x11)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x21)))))))
 (let (($x39 (and $x15 $x6)))
 (let (($x34 (= $x39 true)))
 (let (($x14 (= $x34 true)))
 (let (($x10 (= $x14 true)))
 (let (($x59 (and $x10 $x58)))
 (let (($x20 (and $x59 $x23)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x30 (and $x12 $x20)))
 (let (($x76 (=> $x30 $x75)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (= true false)))
 (let (($x75 (= $x74 true)))
 (let (($x66 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x70 (not $x66)))
 (let (($x61 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x69 (not $x61)))
 (let (($x62 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x63 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x67 (bvuge ?x63 (_ bv1 32))))
 (let (($x68 (= $x66 $x67)))
 (let (($x64 (= ?x63 (_ bv0 32))))
 (let (($x65 (= $x61 $x64)))
 (let (($x73 (and (and (and $x65 $x68) $x69) $x70)))
 (let (($x23 (= $x73 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x53 (concat ?x31 (concat ?x45 ?x9)))))
 (let (($x56 (= ?x54 input.dst.llvm-%l)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x44)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x16 $x37)))
 (let (($x11 (and $x18 $x5)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x48 $x11)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x21)))))))
 (let (($x39 (and $x15 $x6)))
 (let (($x34 (= $x39 true)))
 (let (($x14 (= $x34 true)))
 (let (($x10 (= $x14 true)))
 (let (($x59 (and $x10 $x58)))
 (let (($x20 (and $x59 $x23)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x30 (and $x12 $x20)))
 (let (($x76 (=> $x30 $x75)))
 (not $x76)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x75 (= true false)))
 (let (($x76 (= $x75 true)))
 (let (($x72 (= false false)))
 (let (($x63 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x63 $x72)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x65 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x65 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x69 (= $x68 $x71)))
 (let (($x66 (= ?x65 (_ bv0 32))))
 (let (($x67 (= $x63 $x66)))
 (let (($x23 (and (and $x67 $x69) $x70)))
 (let (($x20 (= $x23 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x55 (concat ?x17 (concat ?x31 ?x41)))))
 (let (($x58 (= ?x56 input.dst.llvm-%l)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x5)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x38 $x18)))
 (let (($x6 (and $x44 $x11)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x26 $x6)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x19)))))))
 (let (($x34 (and $x16 $x39)))
 (let (($x14 (= $x34 true)))
 (let (($x10 (= $x14 true)))
 (let (($x50 (= $x10 true)))
 (let (($x61 (and $x50 $x60)))
 (let (($x30 (and $x61 $x20)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x74 (and $x35 $x30)))
 (let (($x77 (=> $x74 $x76)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x75 (= true false)))
 (let (($x76 (= $x75 true)))
 (let (($x72 (= false false)))
 (let (($x63 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x63 $x72)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x65 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x65 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x69 (= $x68 $x71)))
 (let (($x66 (= ?x65 (_ bv0 32))))
 (let (($x67 (= $x63 $x66)))
 (let (($x23 (and (and $x67 $x69) $x70)))
 (let (($x20 (= $x23 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x55 (concat ?x17 (concat ?x31 ?x41)))))
 (let (($x58 (= ?x56 input.dst.llvm-%l)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x5)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x38 $x18)))
 (let (($x6 (and $x44 $x11)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x26 $x6)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x19)))))))
 (let (($x34 (and $x16 $x39)))
 (let (($x14 (= $x34 true)))
 (let (($x10 (= $x14 true)))
 (let (($x50 (= $x10 true)))
 (let (($x61 (and $x50 $x60)))
 (let (($x30 (and $x61 $x20)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x74 (and $x35 $x30)))
 (let (($x77 (=> $x74 $x76)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv128 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1024 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1027 32) (_ bv64 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1024 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1027 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x21 (= true false)))
 (let (($x53 (= $x21 true)))
 (let (($x23 (= false false)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x20 (=> $x65 $x23)))
 (let (($x69 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x70 (not $x69)))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x67 (ite $x66 (_ bv0 32) (_ bv1 32))))
 (let (($x73 (bvuge ?x67 (_ bv1 32))))
 (let (($x72 (= $x69 $x73)))
 (let (($x68 (= ?x67 (_ bv0 32))))
 (let (($x71 (= $x65 $x68)))
 (let (($x75 (and (and (and $x71 $x72) $x70) $x20)))
 (let (($x76 (= $x75 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x57 (concat ?x33 (concat ?x17 ?x45)))))
 (let (($x60 (= ?x58 input.dst.llvm-%l)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x11)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x8 $x44)))
 (let (($x39 (and $x5 $x6)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x15 $x39)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x7)))))))
 (let (($x14 (and $x38 $x34)))
 (let (($x10 (= $x14 true)))
 (let (($x50 (= $x10 true)))
 (let (($x52 (= $x50 true)))
 (let (($x63 (and $x52 $x62)))
 (let (($x77 (and $x63 $x76)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x42 (and $x12 $x77)))
 (let (($x43 (=> $x42 $x53)))
 (not $x43))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x21 (= true false)))
 (let (($x53 (= $x21 true)))
 (let (($x23 (= false false)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x20 (=> $x65 $x23)))
 (let (($x69 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x70 (not $x69)))
 (let (($x66 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x67 (ite $x66 (_ bv0 32) (_ bv1 32))))
 (let (($x73 (bvuge ?x67 (_ bv1 32))))
 (let (($x72 (= $x69 $x73)))
 (let (($x68 (= ?x67 (_ bv0 32))))
 (let (($x71 (= $x65 $x68)))
 (let (($x75 (and (and (and $x71 $x72) $x70) $x20)))
 (let (($x76 (= $x75 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x57 (concat ?x33 (concat ?x17 ?x45)))))
 (let (($x60 (= ?x58 input.dst.llvm-%l)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x11)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x8 $x44)))
 (let (($x39 (and $x5 $x6)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x15 $x39)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x7)))))))
 (let (($x14 (and $x38 $x34)))
 (let (($x10 (= $x14 true)))
 (let (($x50 (= $x10 true)))
 (let (($x52 (= $x50 true)))
 (let (($x63 (and $x52 $x62)))
 (let (($x77 (and $x63 $x76)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x42 (and $x12 $x77)))
 (let (($x43 (=> $x42 $x53)))
 (not $x43))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x62)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x34 $x64)))
 (let (($x63 (and $x37 $x11)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x26 $x63)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x65)))))))
 (let (($x53 (and $x17 $x47)))
 (let (($x43 (= $x53 true)))
 (let (($x78 (= $x43 true)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x30 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x20 (bvuge ?x30 (_ bv1 32))))
 (let (($x23 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x75 (= $x23 $x20)))
 (let (($x70 (= ?x30 (_ bv0 32))))
 (let (($x73 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x74 (= $x73 $x70)))
 (let (($x76 (and $x74 $x75)))
 (let (($x77 (= $x76 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x51 (concat ?x18 (concat ?x39 ?x60)))))
 (let (($x31 (= input.dst.llvm-%l ?x29)))
 (let (($x28 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x41 (and $x28 $x31)))
 (let (($x59 (and (and (and $x17 true) $x47) $x41)))
 (let (($x67 (= $x59 true)))
 (let (($x68 (= $x67 true)))
 (let (($x71 (= $x68 true)))
 (let (($x42 (and $x71 $x77)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x21 (and $x49 $x42)))
 (let (($x32 (=> $x21 $x78)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x62)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x34 $x64)))
 (let (($x63 (and $x37 $x11)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x26 $x63)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x65)))))))
 (let (($x53 (and $x17 $x47)))
 (let (($x43 (= $x53 true)))
 (let (($x78 (= $x43 true)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x30 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x20 (bvuge ?x30 (_ bv1 32))))
 (let (($x23 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x75 (= $x23 $x20)))
 (let (($x70 (= ?x30 (_ bv0 32))))
 (let (($x73 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x74 (= $x73 $x70)))
 (let (($x76 (and $x74 $x75)))
 (let (($x77 (= $x76 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x51 (concat ?x18 (concat ?x39 ?x60)))))
 (let (($x31 (= input.dst.llvm-%l ?x29)))
 (let (($x28 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x41 (and $x28 $x31)))
 (let (($x59 (and (and (and $x17 true) $x47) $x41)))
 (let (($x67 (= $x59 true)))
 (let (($x68 (= $x67 true)))
 (let (($x71 (= $x68 true)))
 (let (($x42 (and $x71 $x77)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x21 (and $x49 $x42)))
 (let (($x32 (=> $x21 $x78)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x32 (= $x74 true)))
 (let ((?x23 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x23 (_ bv1 32))))
 (let (($x76 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x42 (= $x76 $x77)))
 (let (($x20 (= ?x23 (_ bv0 32))))
 (let (($x70 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x75 (= $x70 $x20)))
 (let (($x21 (and $x75 $x42)))
 (let (($x53 (= $x21 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x29 (concat ?x60 (concat ?x52 ?x51)))))
 (let (($x41 (= input.dst.llvm-%l ?x31)))
 (let (($x28 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x59 (and $x28 $x41)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x11)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x14 $x37)))
 (let (($x47 (and $x62 $x63)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x58 $x47)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x66)))))))
 (let (($x71 (and (and (and $x34 true) $x22) $x59)))
 (let (($x69 (= $x71 true)))
 (let (($x73 (= $x69 true)))
 (let (($x72 (= $x73 true)))
 (let (($x43 (and $x72 $x53)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x78 (and $x49 $x43)))
 (let (($x40 (=> $x78 $x32)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x74 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x32 (= $x74 true)))
 (let ((?x23 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x23 (_ bv1 32))))
 (let (($x76 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x42 (= $x76 $x77)))
 (let (($x20 (= ?x23 (_ bv0 32))))
 (let (($x70 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x75 (= $x70 $x20)))
 (let (($x21 (and $x75 $x42)))
 (let (($x53 (= $x21 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x29 (concat ?x60 (concat ?x52 ?x51)))))
 (let (($x41 (= input.dst.llvm-%l ?x31)))
 (let (($x28 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x59 (and $x28 $x41)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x11)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x14 $x37)))
 (let (($x47 (and $x62 $x63)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x58 $x47)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x66)))))))
 (let (($x71 (and (and (and $x34 true) $x22) $x59)))
 (let (($x69 (= $x71 true)))
 (let (($x73 (= $x69 true)))
 (let (($x72 (= $x73 true)))
 (let (($x43 (and $x72 $x53)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x78 (and $x49 $x43)))
 (let (($x40 (=> $x78 $x32)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08)
                     #x80000001
                     #x00)
              #x80000002
              #x00)
       #x80000003
       #x00))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x75 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x45 (= $x75 true)))
 (let (($x21 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x32 (not $x21)))
 (let (($x20 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x78 (not $x20)))
 (let ((?x76 (ite $x75 (_ bv0 32) (_ bv1 32))))
 (let (($x53 (bvuge ?x76 (_ bv1 32))))
 (let (($x43 (= $x21 $x53)))
 (let (($x77 (= ?x76 (_ bv0 32))))
 (let (($x42 (= $x20 $x77)))
 (let (($x35 (and (and (and $x42 $x43) $x78) $x32)))
 (let (($x16 (= $x35 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x31 (concat ?x51 (concat ?x39 ?x29)))))
 (let (($x59 (= input.dst.llvm-%l ?x41)))
 (let (($x28 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x71 (and $x28 $x59)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x63)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x15 $x62)))
 (let (($x22 (and $x11 $x47)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x44 $x22)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x7)))))))
 (let (($x72 (and (and (and $x14 true) $x68) $x71)))
 (let (($x30 (= $x72 true)))
 (let (($x70 (= $x30 true)))
 (let (($x74 (= $x70 true)))
 (let (($x8 (and $x74 $x16)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x12 (and $x49 $x8)))
 (let (($x55 (=> $x12 $x45)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x75 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x45 (= $x75 true)))
 (let (($x21 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x32 (not $x21)))
 (let (($x20 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x78 (not $x20)))
 (let ((?x76 (ite $x75 (_ bv0 32) (_ bv1 32))))
 (let (($x53 (bvuge ?x76 (_ bv1 32))))
 (let (($x43 (= $x21 $x53)))
 (let (($x77 (= ?x76 (_ bv0 32))))
 (let (($x42 (= $x20 $x77)))
 (let (($x35 (and (and (and $x42 $x43) $x78) $x32)))
 (let (($x16 (= $x35 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x31 (concat ?x51 (concat ?x39 ?x29)))))
 (let (($x59 (= input.dst.llvm-%l ?x41)))
 (let (($x28 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x71 (and $x28 $x59)))
 (let ((?x63 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x63)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x15 $x62)))
 (let (($x22 (and $x11 $x47)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x44 $x22)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x7)))))))
 (let (($x72 (and (and (and $x14 true) $x68) $x71)))
 (let (($x30 (= $x72 true)))
 (let (($x70 (= $x30 true)))
 (let (($x74 (= $x70 true)))
 (let (($x8 (and $x74 $x16)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x12 (and $x49 $x8)))
 (let (($x55 (=> $x12 $x45)))
 (not $x55)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x79 (= $x42 true)))
 (let (($x32 (= false false)))
 (let (($x77 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x35 (=> $x77 $x32)))
 (let ((?x21 (ite $x42 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x21 (_ bv1 32))))
 (let (($x40 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x24 (= $x40 $x78)))
 (let (($x53 (= ?x21 (_ bv0 32))))
 (let (($x43 (= $x77 $x53)))
 (let (($x8 (and (and $x43 $x24) $x35)))
 (let (($x12 (= $x8 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x41 (concat ?x29 (concat ?x52 ?x31)))))
 (let (($x71 (= input.dst.llvm-%l ?x59)))
 (let (($x28 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x72 (and $x28 $x71)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x47)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x64 $x11)))
 (let (($x68 (and $x63 $x22)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x65 $x68)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x34 $x67)))))))
 (let (($x74 (and (and (and $x15 true) $x73) $x72)))
 (let (($x23 (= $x74 true)))
 (let (($x20 (= $x23 true)))
 (let (($x75 (= $x20 true)))
 (let (($x45 (and $x75 $x12)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x55 (and $x49 $x45)))
 (let (($x27 (=> $x55 $x79)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x79 (= $x42 true)))
 (let (($x32 (= false false)))
 (let (($x77 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x35 (=> $x77 $x32)))
 (let ((?x21 (ite $x42 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x21 (_ bv1 32))))
 (let (($x40 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x24 (= $x40 $x78)))
 (let (($x53 (= ?x21 (_ bv0 32))))
 (let (($x43 (= $x77 $x53)))
 (let (($x8 (and (and $x43 $x24) $x35)))
 (let (($x12 (= $x8 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x41 (concat ?x29 (concat ?x52 ?x31)))))
 (let (($x71 (= input.dst.llvm-%l ?x59)))
 (let (($x28 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x72 (and $x28 $x71)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x47)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x64 $x11)))
 (let (($x68 (and $x63 $x22)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x65 $x68)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x34 $x67)))))))
 (let (($x74 (and (and (and $x15 true) $x73) $x72)))
 (let (($x23 (= $x74 true)))
 (let (($x20 (= $x23 true)))
 (let (($x75 (= $x20 true)))
 (let (($x45 (and $x75 $x12)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x55 (and $x49 $x45)))
 (let (($x27 (=> $x55 $x79)))
 (not $x27)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08)
                     #x80000001
                     #x00)
              #x80000002
              #x00)
       #x80000003
       #x00))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x54 (= $x43 true)))
 (let (($x12 (= false false)))
 (let (($x53 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x45 (=> $x53 $x12)))
 (let (($x16 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x8 (not $x16)))
 (let ((?x40 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x32 (bvuge ?x40 (_ bv1 32))))
 (let (($x35 (= $x16 $x32)))
 (let (($x78 (= ?x40 (_ bv0 32))))
 (let (($x24 (= $x53 $x78)))
 (let (($x27 (and (and (and $x24 $x35) $x8) $x45)))
 (let (($x46 (= $x27 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x59 (concat ?x31 (concat ?x39 ?x41)))))
 (let (($x72 (= input.dst.llvm-%l ?x71)))
 (let (($x28 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x74 (and $x28 $x72)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x22)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x37 $x63)))
 (let (($x73 (and $x47 $x68)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x66 $x73)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x69)))))))
 (let (($x75 (and (and (and $x64 true) $x70) $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x42 (= $x77 true)))
 (let (($x9 (and $x42 $x46)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x5 (and $x49 $x9)))
 (let (($x56 (=> $x5 $x54)))
 (not $x56))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x54 (= $x43 true)))
 (let (($x12 (= false false)))
 (let (($x53 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x45 (=> $x53 $x12)))
 (let (($x16 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x8 (not $x16)))
 (let ((?x40 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x32 (bvuge ?x40 (_ bv1 32))))
 (let (($x35 (= $x16 $x32)))
 (let (($x78 (= ?x40 (_ bv0 32))))
 (let (($x24 (= $x53 $x78)))
 (let (($x27 (and (and (and $x24 $x35) $x8) $x45)))
 (let (($x46 (= $x27 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x59 (concat ?x31 (concat ?x39 ?x41)))))
 (let (($x72 (= input.dst.llvm-%l ?x71)))
 (let (($x28 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x74 (and $x28 $x72)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x22)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x37 $x63)))
 (let (($x73 (and $x47 $x68)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x66 $x73)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x69)))))))
 (let (($x75 (and (and (and $x64 true) $x70) $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x42 (= $x77 true)))
 (let (($x9 (and $x42 $x46)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x5 (and $x49 $x9)))
 (let (($x56 (=> $x5 $x54)))
 (not $x56))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x158 (= $x78 true)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x92 (concat ?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x98 (concat ?x97 (concat ?x94 ?x92))))
 (let ((?x126 (bvadd ?x98 (_ bv4 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x130))))
 (let (($x137 (= (_ bv0 32) ?x136)))
 (let ((?x138 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x138 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x144 (= $x142 $x143)))
 (let (($x106 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x35 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x110 (and $x35 $x106)))
 (let (($x145 (=> $x110 $x144)))
 (let (($x139 (= ?x138 (_ bv0 32))))
 (let (($x125 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x140 (= $x125 $x139)))
 (let (($x141 (=> $x110 $x140)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x115))))
 (let (($x122 (= input.spec-%var-l-1.2.1.2.0 ?x121)))
 (let (($x123 (=> $x110 $x122)))
 (let (($x99 (= (_ bv0 32) ?x98)))
 (let ((?x100 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x100 (_ bv1 32))))
 (let (($x108 (= $x106 $x107)))
 (let (($x109 (=> $x35 $x108)))
 (let (($x79 (= false false)))
 (let (($x86 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x104 (and $x35 $x86)))
 (let (($x105 (=> $x104 $x79)))
 (let (($x101 (= ?x100 (_ bv0 32))))
 (let (($x102 (= $x86 $x101)))
 (let (($x103 (=> $x35 $x102)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x54)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x17)))
 (let (($x83 (= input.spec-%var-l-1.2.0 ?x82)))
 (let (($x84 (=> $x35 $x83)))
 (let (($x40 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x12 (=> $x40 $x79)))
 (let ((?x24 (ite $x78 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x24 (_ bv1 32))))
 (let (($x8 (= $x35 $x55)))
 (let (($x16 (= ?x24 (_ bv0 32))))
 (let (($x32 (= $x40 $x16)))
 (let (($x151 (and (and (and (and (and (and $x32 $x8) $x12) $x84) $x103) $x105) $x109)))
 (let (($x154 (and (and (and $x151 $x123) $x141) $x145)))
 (let (($x155 (= $x154 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x51 (concat ?x39 (concat ?x33 ?x60)))))
 (let (($x72 (= input.dst.llvm-%l ?x71)))
 (let (($x6 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x74 (and $x6 $x72)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x62)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x64 $x66)))
 (let (($x63 (and $x37 $x11)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x68 $x63)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x15)))))))
 (let (($x77 (and (and (and $x7 true) $x47) $x74)))
 (let (($x42 (= $x77 true)))
 (let (($x21 (= $x42 true)))
 (let (($x53 (= $x21 true)))
 (let (($x156 (and $x53 $x155)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x157 (and $x10 $x156)))
 (let (($x159 (=> $x157 $x158)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x158 (= $x78 true)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x92 (concat ?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x98 (concat ?x97 (concat ?x94 ?x92))))
 (let ((?x126 (bvadd ?x98 (_ bv4 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x130))))
 (let (($x137 (= (_ bv0 32) ?x136)))
 (let ((?x138 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x138 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x144 (= $x142 $x143)))
 (let (($x106 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x35 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x110 (and $x35 $x106)))
 (let (($x145 (=> $x110 $x144)))
 (let (($x139 (= ?x138 (_ bv0 32))))
 (let (($x125 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x140 (= $x125 $x139)))
 (let (($x141 (=> $x110 $x140)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x115))))
 (let (($x122 (= input.spec-%var-l-1.2.1.2.0 ?x121)))
 (let (($x123 (=> $x110 $x122)))
 (let (($x99 (= (_ bv0 32) ?x98)))
 (let ((?x100 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x100 (_ bv1 32))))
 (let (($x108 (= $x106 $x107)))
 (let (($x109 (=> $x35 $x108)))
 (let (($x79 (= false false)))
 (let (($x86 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x104 (and $x35 $x86)))
 (let (($x105 (=> $x104 $x79)))
 (let (($x101 (= ?x100 (_ bv0 32))))
 (let (($x102 (= $x86 $x101)))
 (let (($x103 (=> $x35 $x102)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x54)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x17)))
 (let (($x83 (= input.spec-%var-l-1.2.0 ?x82)))
 (let (($x84 (=> $x35 $x83)))
 (let (($x40 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x12 (=> $x40 $x79)))
 (let ((?x24 (ite $x78 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x24 (_ bv1 32))))
 (let (($x8 (= $x35 $x55)))
 (let (($x16 (= ?x24 (_ bv0 32))))
 (let (($x32 (= $x40 $x16)))
 (let (($x151 (and (and (and (and (and (and $x32 $x8) $x12) $x84) $x103) $x105) $x109)))
 (let (($x154 (and (and (and $x151 $x123) $x141) $x145)))
 (let (($x155 (= $x154 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x51 (concat ?x39 (concat ?x33 ?x60)))))
 (let (($x72 (= input.dst.llvm-%l ?x71)))
 (let (($x6 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x74 (and $x6 $x72)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x62)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x64 $x66)))
 (let (($x63 (and $x37 $x11)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x68 $x63)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x15)))))))
 (let (($x77 (and (and (and $x7 true) $x47) $x74)))
 (let (($x42 (= $x77 true)))
 (let (($x21 (= $x42 true)))
 (let (($x53 (= $x21 true)))
 (let (($x156 (and $x53 $x155)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x157 (and $x10 $x156)))
 (let (($x159 (=> $x157 $x158)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xff)
              #xffff7ff9
              #x7f)
       #xffff7ff8
       #xf8))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffff7ffb)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x16 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x164 (= $x16 true)))
 (let (($x122 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x105 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x8 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x108 (and $x8 $x105)))
 (let (($x143 (and $x108 $x122)))
 (let (($x144 (not $x143)))
 (let (($x138 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x153 (and $x108 $x138)))
 (let (($x142 (not $x153)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x94 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x98 (concat ?x95 (concat ?x91 ?x94))))
 (let ((?x123 (bvadd ?x98 (_ bv4 32))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem ?x123))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv2 32))) ?x126))))
 (let (($x127 (= (_ bv0 32) ?x129)))
 (let ((?x130 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x130 (_ bv1 32))))
 (let (($x140 (= $x138 $x139)))
 (let (($x141 (=> $x108 $x140)))
 (let (($x133 (= ?x130 (_ bv0 32))))
 (let (($x136 (= $x122 $x133)))
 (let (($x137 (=> $x108 $x136)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x119))))
 (let (($x115 (= input.spec-%var-l-1.2.1.2.0 ?x112)))
 (let (($x118 (=> $x108 $x115)))
 (let (($x99 (= (_ bv0 32) ?x98)))
 (let ((?x100 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge ?x100 (_ bv1 32))))
 (let (($x106 (= $x105 $x150)))
 (let (($x107 (=> $x8 $x106)))
 (let (($x12 (= false false)))
 (let (($x86 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x149 (and $x8 $x86)))
 (let (($x104 (=> $x149 $x12)))
 (let (($x101 (= ?x100 (_ bv0 32))))
 (let (($x102 (= $x86 $x101)))
 (let (($x103 (=> $x8 $x102)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x9)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x54)))
 (let (($x84 (= input.spec-%var-l-1.2.0 ?x83)))
 (let (($x148 (=> $x8 $x84)))
 (let (($x24 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x147 (=> $x24 $x12)))
 (let ((?x32 (ite $x16 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (bvuge ?x32 (_ bv1 32))))
 (let (($x79 (= $x8 $x146)))
 (let (($x35 (= ?x32 (_ bv0 32))))
 (let (($x55 (= $x24 $x35)))
 (let (($x158 (and (and (and (and (and (and $x55 $x79) $x147) $x148) $x103) $x104) $x107)))
 (let (($x61 (and (and (and (and (and $x158 $x118) $x137) $x141) $x142) $x144)))
 (let (($x161 (= $x61 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x29 (concat ?x44 (concat ?x13 ?x50)))))
 (let (($x72 (= input.dst.llvm-%l ?x71)))
 (let (($x76 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x74 (and $x76 $x72)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x73)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x23 $x52)))
 (let (($x27 (and $x41 $x26)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x31 $x27)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x58)))))))
 (let (($x21 (and (and (and $x59 true) $x62) $x74)))
 (let (($x53 (= $x21 true)))
 (let (($x43 (= $x53 true)))
 (let (($x40 (= $x43 true)))
 (let (($x162 (and $x40 $x161)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x163 (and $x65 $x162)))
 (let (($x165 (=> $x163 $x164)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x16 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x164 (= $x16 true)))
 (let (($x122 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x105 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x8 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x108 (and $x8 $x105)))
 (let (($x143 (and $x108 $x122)))
 (let (($x144 (not $x143)))
 (let (($x138 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x153 (and $x108 $x138)))
 (let (($x142 (not $x153)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x94 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x98 (concat ?x95 (concat ?x91 ?x94))))
 (let ((?x123 (bvadd ?x98 (_ bv4 32))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem ?x123))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv2 32))) ?x126))))
 (let (($x127 (= (_ bv0 32) ?x129)))
 (let ((?x130 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x130 (_ bv1 32))))
 (let (($x140 (= $x138 $x139)))
 (let (($x141 (=> $x108 $x140)))
 (let (($x133 (= ?x130 (_ bv0 32))))
 (let (($x136 (= $x122 $x133)))
 (let (($x137 (=> $x108 $x136)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x119))))
 (let (($x115 (= input.spec-%var-l-1.2.1.2.0 ?x112)))
 (let (($x118 (=> $x108 $x115)))
 (let (($x99 (= (_ bv0 32) ?x98)))
 (let ((?x100 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x150 (bvuge ?x100 (_ bv1 32))))
 (let (($x106 (= $x105 $x150)))
 (let (($x107 (=> $x8 $x106)))
 (let (($x12 (= false false)))
 (let (($x86 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x149 (and $x8 $x86)))
 (let (($x104 (=> $x149 $x12)))
 (let (($x101 (= ?x100 (_ bv0 32))))
 (let (($x102 (= $x86 $x101)))
 (let (($x103 (=> $x8 $x102)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x9)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x54)))
 (let (($x84 (= input.spec-%var-l-1.2.0 ?x83)))
 (let (($x148 (=> $x8 $x84)))
 (let (($x24 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x147 (=> $x24 $x12)))
 (let ((?x32 (ite $x16 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (bvuge ?x32 (_ bv1 32))))
 (let (($x79 (= $x8 $x146)))
 (let (($x35 (= ?x32 (_ bv0 32))))
 (let (($x55 (= $x24 $x35)))
 (let (($x158 (and (and (and (and (and (and $x55 $x79) $x147) $x148) $x103) $x104) $x107)))
 (let (($x61 (and (and (and (and (and $x158 $x118) $x137) $x141) $x142) $x144)))
 (let (($x161 (= $x61 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x29 (concat ?x44 (concat ?x13 ?x50)))))
 (let (($x72 (= input.dst.llvm-%l ?x71)))
 (let (($x76 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x74 (and $x76 $x72)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x73)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x23 $x52)))
 (let (($x27 (and $x41 $x26)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x31 $x27)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x58)))))))
 (let (($x21 (and (and (and $x59 true) $x62) $x74)))
 (let (($x53 (= $x21 true)))
 (let (($x43 (= $x53 true)))
 (let (($x40 (= $x43 true)))
 (let (($x162 (and $x40 $x161)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x163 (and $x65 $x162)))
 (let (($x165 (=> $x163 $x164)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv16 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv268435456 32) (_ bv16 8)))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv268435459 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbf401870)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x40)
                                #xbf401877
                                #x00)
                         #xbf401875
                         #x00)
                  #xbf401873
                  #xbf)))
(let ((a!2 (store (store (store (store a!1 #x00000005 #x00) #xbf401874 #x00)
                         #xbf401871
                         #x18)
                  #xbf401876
                  #x00)))
  (store (store (store (store a!2 #x00000006 #x00) #x00000007 #x91)
                #x00000004
                #x00)
         #xbf401870
         #x70))))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xbfbfbfbf)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xbf401870)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xbf401870)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbf401870)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbf401873)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x46 (= (_ bv0 4) ?x5)))
 (let (($x56 (= $x46 true)))
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x55 (ite $x35 (_ bv0 32) (_ bv1 32))))
 (let (($x145 (bvuge ?x55 (_ bv1 32))))
 (let (($x79 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x12 (= $x79 $x145)))
 (let (($x8 (= ?x55 (_ bv0 32))))
 (let (($x32 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x146 (= $x32 $x8)))
 (let (($x147 (and $x146 $x12)))
 (let (($x154 (= $x147 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x66 (concat ?x13 (concat ?x64 ?x37)))))
 (let (($x72 (= input.dst.llvm-%l ?x71)))
 (let (($x47 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x74 (and $x47 $x72)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x73)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x23 $x52)))
 (let (($x27 (and $x41 $x26)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x39 $x27)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x19)))))))
 (let (($x43 (and (and (and $x31 true) $x62) $x74)))
 (let (($x40 (= $x43 true)))
 (let (($x78 (= $x40 true)))
 (let (($x24 (= $x78 true)))
 (let (($x45 (and $x24 $x154)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x17 (and $x18 $x45)))
 (let (($x80 (=> $x17 $x56)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x46 (= (_ bv0 4) ?x5)))
 (let (($x56 (= $x46 true)))
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x55 (ite $x35 (_ bv0 32) (_ bv1 32))))
 (let (($x145 (bvuge ?x55 (_ bv1 32))))
 (let (($x79 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x12 (= $x79 $x145)))
 (let (($x8 (= ?x55 (_ bv0 32))))
 (let (($x32 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x146 (= $x32 $x8)))
 (let (($x147 (and $x146 $x12)))
 (let (($x154 (= $x147 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x66 (concat ?x13 (concat ?x64 ?x37)))))
 (let (($x72 (= input.dst.llvm-%l ?x71)))
 (let (($x47 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x74 (and $x47 $x72)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x73)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x23 $x52)))
 (let (($x27 (and $x41 $x26)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x39 $x27)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x19)))))))
 (let (($x43 (and (and (and $x31 true) $x62) $x74)))
 (let (($x40 (= $x43 true)))
 (let (($x78 (= $x40 true)))
 (let (($x24 (= $x78 true)))
 (let (($x45 (and $x24 $x154)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x17 (and $x18 $x45)))
 (let (($x80 (=> $x17 $x56)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000001000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000001) #b00000000)
 (= (@fun_11 #b10000000000000000000000000000010) #b00000000)
 (= (@fun_11 #b10000000000000000000000000000011) #b00000000)
 (default #b00001000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08)
                     #x80000003
                     #x00)
              #x80000002
              #x00)
       #x80000001
       #x00))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x20 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x9 (= (_ bv0 4) ?x20)))
 (let (($x54 (= $x9 true)))
 (let (($x147 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x82 (not $x147)))
 (let (($x8 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x17 (not $x8)))
 (let (($x146 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x79 (ite $x146 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x79 (_ bv1 32))))
 (let (($x45 (= $x147 $x154)))
 (let (($x145 (= ?x79 (_ bv0 32))))
 (let (($x12 (= $x8 $x145)))
 (let (($x56 (and (and (and $x12 $x45) $x17) $x82)))
 (let (($x80 (= $x56 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x71 (concat ?x37 (concat ?x6 ?x66)))))
 (let (($x74 (= input.dst.llvm-%l ?x72)))
 (let (($x47 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x43 (and $x47 $x74)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x26)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x33 $x41)))
 (let (($x62 (and $x73 $x27)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x30 $x62)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x59)))))))
 (let (($x24 (and (and (and $x23 true) $x53) $x43)))
 (let (($x16 (= $x24 true)))
 (let (($x32 (= $x16 true)))
 (let (($x35 (= $x32 true)))
 (let (($x81 (and $x35 $x80)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x65 (and $x18 $x81)))
 (let (($x83 (=> $x65 $x54)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x20 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x9 (= (_ bv0 4) ?x20)))
 (let (($x54 (= $x9 true)))
 (let (($x147 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x82 (not $x147)))
 (let (($x8 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x17 (not $x8)))
 (let (($x146 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x79 (ite $x146 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x79 (_ bv1 32))))
 (let (($x45 (= $x147 $x154)))
 (let (($x145 (= ?x79 (_ bv0 32))))
 (let (($x12 (= $x8 $x145)))
 (let (($x56 (and (and (and $x12 $x45) $x17) $x82)))
 (let (($x80 (= $x56 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x71 (concat ?x37 (concat ?x6 ?x66)))))
 (let (($x74 (= input.dst.llvm-%l ?x72)))
 (let (($x47 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x43 (and $x47 $x74)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x26)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x33 $x41)))
 (let (($x62 (and $x73 $x27)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x30 $x62)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x23 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x59)))))))
 (let (($x24 (and (and (and $x23 true) $x53) $x43)))
 (let (($x16 (= $x24 true)))
 (let (($x32 (= $x16 true)))
 (let (($x35 (= $x32 true)))
 (let (($x81 (and $x35 $x80)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x65 (and $x18 $x81)))
 (let (($x83 (=> $x65 $x54)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x83 (= (_ bv0 4) ?x54)))
 (let (($x84 (= $x83 true)))
 (let (($x82 (= false false)))
 (let (($x145 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x56 (=> $x145 $x82)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x147 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x17 (bvuge ?x147 (_ bv1 32))))
 (let (($x5 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x46 (= $x5 $x17)))
 (let (($x154 (= ?x147 (_ bv0 32))))
 (let (($x45 (= $x145 $x154)))
 (let (($x81 (and (and $x45 $x46) $x56)))
 (let (($x65 (= $x81 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x72 (concat ?x66 (concat ?x64 ?x71)))))
 (let (($x43 (= input.dst.llvm-%l ?x74)))
 (let (($x47 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x24 (and $x47 $x43)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x27)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x60 $x73)))
 (let (($x53 (and $x26 $x62)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x67 $x53)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x21)))))))
 (let (($x35 (and (and (and $x33 true) $x78) $x24)))
 (let (($x55 (= $x35 true)))
 (let (($x8 (= $x55 true)))
 (let (($x146 (= $x8 true)))
 (let (($x57 (and $x146 $x65)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x20 (and $x18 $x57)))
 (let (($x10 (=> $x20 $x84)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x83 (= (_ bv0 4) ?x54)))
 (let (($x84 (= $x83 true)))
 (let (($x82 (= false false)))
 (let (($x145 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x56 (=> $x145 $x82)))
 (let (($x12 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x147 (ite $x12 (_ bv0 32) (_ bv1 32))))
 (let (($x17 (bvuge ?x147 (_ bv1 32))))
 (let (($x5 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x46 (= $x5 $x17)))
 (let (($x154 (= ?x147 (_ bv0 32))))
 (let (($x45 (= $x145 $x154)))
 (let (($x81 (and (and $x45 $x46) $x56)))
 (let (($x65 (= $x81 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x72 (concat ?x66 (concat ?x64 ?x71)))))
 (let (($x43 (= input.dst.llvm-%l ?x74)))
 (let (($x47 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x24 (and $x47 $x43)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x27)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x60 $x73)))
 (let (($x53 (and $x26 $x62)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x67 $x53)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x21)))))))
 (let (($x35 (and (and (and $x33 true) $x78) $x24)))
 (let (($x55 (= $x35 true)))
 (let (($x8 (= $x55 true)))
 (let (($x146 (= $x8 true)))
 (let (($x57 (and $x146 $x65)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x20 (and $x18 $x57)))
 (let (($x10 (=> $x20 $x84)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000001000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000001) #b00000000)
 (= (@fun_11 #b10000000000000000000000000000010) #b00000000)
 (= (@fun_11 #b10000000000000000000000000000011) #b00000000)
 (default #b00001000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08)
                     #x80000003
                     #x00)
              #x80000002
              #x00)
       #x80000001
       #x00))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x70 (= (_ bv0 4) ?x25)))
 (let (($x50 (= $x70 true)))
 (let (($x65 (= false false)))
 (let (($x154 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x57 (=> $x154 $x65)))
 (let (($x80 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x81 (not $x80)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x5 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x5 (_ bv1 32))))
 (let (($x56 (= $x80 $x82)))
 (let (($x17 (= ?x5 (_ bv0 32))))
 (let (($x46 (= $x154 $x17)))
 (let (($x54 (and (and (and $x46 $x56) $x81) $x57)))
 (let (($x83 (= $x54 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x74 (concat ?x71 (concat ?x6 ?x72)))))
 (let (($x24 (= input.dst.llvm-%l ?x43)))
 (let (($x47 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x35 (and $x47 $x24)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x62)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x52 $x26)))
 (let (($x78 (and $x27 $x53)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x19 $x78)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x40)))))))
 (let (($x146 (and (and (and $x60 true) $x32) $x35)))
 (let (($x79 (= $x146 true)))
 (let (($x145 (= $x79 true)))
 (let (($x12 (= $x145 true)))
 (let (($x84 (and $x12 $x83)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x10 (and $x18 $x84)))
 (let (($x68 (=> $x10 $x50)))
 (not $x68))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x70 (= (_ bv0 4) ?x25)))
 (let (($x50 (= $x70 true)))
 (let (($x65 (= false false)))
 (let (($x154 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x57 (=> $x154 $x65)))
 (let (($x80 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x81 (not $x80)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x5 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x5 (_ bv1 32))))
 (let (($x56 (= $x80 $x82)))
 (let (($x17 (= ?x5 (_ bv0 32))))
 (let (($x46 (= $x154 $x17)))
 (let (($x54 (and (and (and $x46 $x56) $x81) $x57)))
 (let (($x83 (= $x54 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x74 (concat ?x71 (concat ?x6 ?x72)))))
 (let (($x24 (= input.dst.llvm-%l ?x43)))
 (let (($x47 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x35 (and $x47 $x24)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x62)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x52 $x26)))
 (let (($x78 (and $x27 $x53)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x19 $x78)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x40)))))))
 (let (($x146 (and (and (and $x60 true) $x32) $x35)))
 (let (($x79 (= $x146 true)))
 (let (($x145 (= $x79 true)))
 (let (($x12 (= $x145 true)))
 (let (($x84 (and $x12 $x83)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x10 (and $x18 $x84)))
 (let (($x68 (=> $x10 $x50)))
 (not $x68))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x163 (= (_ bv0 4) ?x162)))
 (let (($x164 (= $x163 true)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x91 (concat ?x90 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x98 (concat ?x89 (concat ?x93 ?x91))))
 (let ((?x118 (bvadd ?x98 (_ bv4 32))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv1 32))) (select input.dst.llvm-mem ?x118))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv2 32))) ?x123))))
 (let (($x152 (= (_ bv0 32) ?x125)))
 (let ((?x126 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x126 (_ bv1 32))))
 (let (($x130 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x136 (= $x130 $x133)))
 (let (($x104 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x20 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x106 (and $x20 $x104)))
 (let (($x137 (=> $x106 $x136)))
 (let (($x131 (= ?x126 (_ bv0 32))))
 (let (($x115 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x129 (= $x115 $x131)))
 (let (($x127 (=> $x106 $x129)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x113))))
 (let (($x119 (= input.spec-%var-l-1.2.1.2.0 ?x151)))
 (let (($x117 (=> $x106 $x119)))
 (let (($x99 (= (_ bv0 32) ?x98)))
 (let ((?x100 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge ?x100 (_ bv1 32))))
 (let (($x105 (= $x104 $x157)))
 (let (($x150 (=> $x20 $x105)))
 (let (($x65 (= false false)))
 (let (($x86 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x156 (and $x20 $x86)))
 (let (($x149 (=> $x156 $x65)))
 (let (($x101 (= ?x100 (_ bv0 32))))
 (let (($x102 (= $x86 $x101)))
 (let (($x103 (=> $x20 $x102)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x25)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x68)))
 (let (($x28 (= input.spec-%var-l-1.2.0 ?x75)))
 (let (($x155 (=> $x20 $x28)))
 (let (($x17 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x57 (=> $x17 $x65)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x80 (ite $x46 (_ bv0 32) (_ bv1 32))))
 (let (($x81 (bvuge ?x80 (_ bv1 32))))
 (let (($x9 (= $x20 $x81)))
 (let (($x82 (= ?x80 (_ bv0 32))))
 (let (($x56 (= $x17 $x82)))
 (let (($x36 (and (and (and (and (and (and $x56 $x9) $x57) $x155) $x103) $x149) $x150)))
 (let (($x22 (and (and (and $x36 $x117) $x127) $x137)))
 (let (($x143 (= $x22 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x43 (concat ?x72 (concat ?x64 ?x74)))))
 (let (($x35 (= input.dst.llvm-%l ?x24)))
 (let (($x47 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x146 (and $x47 $x35)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x53)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x41 $x27)))
 (let (($x32 (and $x62 $x78)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x59 $x32)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x16)))))))
 (let (($x12 (and (and (and $x52 true) $x8) $x146)))
 (let (($x147 (= $x12 true)))
 (let (($x154 (= $x147 true)))
 (let (($x45 (= $x154 true)))
 (let (($x144 (and $x45 $x143)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x61 (and $x18 $x144)))
 (let (($x165 (=> $x61 $x164)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x163 (= (_ bv0 4) ?x162)))
 (let (($x164 (= $x163 true)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x91 (concat ?x90 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x98 (concat ?x89 (concat ?x93 ?x91))))
 (let ((?x118 (bvadd ?x98 (_ bv4 32))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv1 32))) (select input.dst.llvm-mem ?x118))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv2 32))) ?x123))))
 (let (($x152 (= (_ bv0 32) ?x125)))
 (let ((?x126 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x126 (_ bv1 32))))
 (let (($x130 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x136 (= $x130 $x133)))
 (let (($x104 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x20 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x106 (and $x20 $x104)))
 (let (($x137 (=> $x106 $x136)))
 (let (($x131 (= ?x126 (_ bv0 32))))
 (let (($x115 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x129 (= $x115 $x131)))
 (let (($x127 (=> $x106 $x129)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x113))))
 (let (($x119 (= input.spec-%var-l-1.2.1.2.0 ?x151)))
 (let (($x117 (=> $x106 $x119)))
 (let (($x99 (= (_ bv0 32) ?x98)))
 (let ((?x100 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge ?x100 (_ bv1 32))))
 (let (($x105 (= $x104 $x157)))
 (let (($x150 (=> $x20 $x105)))
 (let (($x65 (= false false)))
 (let (($x86 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x156 (and $x20 $x86)))
 (let (($x149 (=> $x156 $x65)))
 (let (($x101 (= ?x100 (_ bv0 32))))
 (let (($x102 (= $x86 $x101)))
 (let (($x103 (=> $x20 $x102)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x25)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x68)))
 (let (($x28 (= input.spec-%var-l-1.2.0 ?x75)))
 (let (($x155 (=> $x20 $x28)))
 (let (($x17 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x57 (=> $x17 $x65)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x80 (ite $x46 (_ bv0 32) (_ bv1 32))))
 (let (($x81 (bvuge ?x80 (_ bv1 32))))
 (let (($x9 (= $x20 $x81)))
 (let (($x82 (= ?x80 (_ bv0 32))))
 (let (($x56 (= $x17 $x82)))
 (let (($x36 (and (and (and (and (and (and $x56 $x9) $x57) $x155) $x103) $x149) $x150)))
 (let (($x22 (and (and (and $x36 $x117) $x127) $x137)))
 (let (($x143 (= $x22 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x43 (concat ?x72 (concat ?x64 ?x74)))))
 (let (($x35 (= input.dst.llvm-%l ?x24)))
 (let (($x47 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x146 (and $x47 $x35)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x53)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x41 $x27)))
 (let (($x32 (and $x62 $x78)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x59 $x32)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x16)))))))
 (let (($x12 (and (and (and $x52 true) $x8) $x146)))
 (let (($x147 (= $x12 true)))
 (let (($x154 (= $x147 true)))
 (let (($x45 (= $x154 true)))
 (let (($x144 (and $x45 $x143)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x61 (and $x18 $x144)))
 (let (($x165 (=> $x61 $x164)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000001000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b10000000000000000000000000000001) #b00000000)
 (= (@fun_43 #b10000000000000000000000000000010) #b00000000)
 (= (@fun_43 #b10000000000000000000000000000011) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001100) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001101) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001110) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001111) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000100) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000101) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000110) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000111) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000000) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000011) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001000) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001001) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001010) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001011) #b00000000)
 (default #b00001000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00008e0c)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
                     #x00008e0d
                     #x8e)
              #x00008e0e
              #x10)
       #x00008e0c
       #x08))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00108e08)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00008e0f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00008e0c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x38 (= (_ bv0 4) ?x51)))
 (let (($x167 (= $x38 true)))
 (let (($x117 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x141 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x160 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x150 (and $x160 $x141)))
 (let (($x136 (and $x150 $x117)))
 (let (($x137 (not $x136)))
 (let (($x131 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x130 (and $x150 $x131)))
 (let (($x133 (not $x130)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x95 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x92 ?x95))))
 (let ((?x153 (bvadd ?x99 (_ bv4 32))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x135))))
 (let (($x123 (= (_ bv0 32) ?x159)))
 (let ((?x134 (ite $x123 (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x134 (_ bv1 32))))
 (let (($x127 (= $x131 $x129)))
 (let (($x142 (=> $x150 $x127)))
 (let (($x125 (= ?x134 (_ bv0 32))))
 (let (($x152 (= $x117 $x125)))
 (let (($x126 (=> $x150 $x152)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x111))))
 (let (($x116 (= input.spec-%var-l-1.2.1.2.0 ?x113)))
 (let (($x151 (=> $x150 $x116)))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x101 (ite $x100 (_ bv0 32) (_ bv1 32))))
 (let (($x104 (bvuge ?x101 (_ bv1 32))))
 (let (($x157 (= $x141 $x104)))
 (let (($x105 (=> $x160 $x157)))
 (let (($x138 (= false false)))
 (let (($x87 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x156 (and $x160 $x87)))
 (let (($x149 (=> $x156 $x138)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x103 (= $x87 $x102)))
 (let (($x140 (=> $x160 $x103)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x15)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x68)))
 (let (($x139 (= input.spec-%var-l-1.2.0 ?x155)))
 (let (($x85 (=> $x160 $x139)))
 (let (($x82 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x54 (=> $x82 $x138)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x20 (ite $x56 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x20 (_ bv1 32))))
 (let (($x57 (= $x160 $x65)))
 (let (($x81 (= ?x20 (_ bv0 32))))
 (let (($x9 (= $x82 $x81)))
 (let (($x162 (and (and (and (and (and (and $x9 $x57) $x54) $x85) $x140) $x149) $x105)))
 (let (($x83 (and (and (and (and (and $x162 $x151) $x126) $x142) $x133) $x137)))
 (let (($x7 (= $x83 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x24 (concat ?x74 (concat ?x6 ?x43)))))
 (let (($x146 (= input.dst.llvm-%l ?x35)))
 (let (($x47 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x12 (and $x47 $x146)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x78)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x73 $x62)))
 (let (($x8 (and $x53 $x32)))
 (let (($x21 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x21 $x8)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x55)))))))
 (let (($x45 (and (and (and $x41 true) $x145) $x12)))
 (let (($x5 (= $x45 true)))
 (let (($x17 (= $x5 true)))
 (let (($x46 (= $x17 true)))
 (let (($x31 (and $x46 $x7)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x13 (and $x18 $x31)))
 (let (($x168 (=> $x13 $x167)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x38 (= (_ bv0 4) ?x51)))
 (let (($x167 (= $x38 true)))
 (let (($x117 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x141 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x160 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x150 (and $x160 $x141)))
 (let (($x136 (and $x150 $x117)))
 (let (($x137 (not $x136)))
 (let (($x131 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x130 (and $x150 $x131)))
 (let (($x133 (not $x130)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x95 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x92 ?x95))))
 (let ((?x153 (bvadd ?x99 (_ bv4 32))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x135))))
 (let (($x123 (= (_ bv0 32) ?x159)))
 (let ((?x134 (ite $x123 (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x134 (_ bv1 32))))
 (let (($x127 (= $x131 $x129)))
 (let (($x142 (=> $x150 $x127)))
 (let (($x125 (= ?x134 (_ bv0 32))))
 (let (($x152 (= $x117 $x125)))
 (let (($x126 (=> $x150 $x152)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x111))))
 (let (($x116 (= input.spec-%var-l-1.2.1.2.0 ?x113)))
 (let (($x151 (=> $x150 $x116)))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x101 (ite $x100 (_ bv0 32) (_ bv1 32))))
 (let (($x104 (bvuge ?x101 (_ bv1 32))))
 (let (($x157 (= $x141 $x104)))
 (let (($x105 (=> $x160 $x157)))
 (let (($x138 (= false false)))
 (let (($x87 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x156 (and $x160 $x87)))
 (let (($x149 (=> $x156 $x138)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x103 (= $x87 $x102)))
 (let (($x140 (=> $x160 $x103)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x15)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x68)))
 (let (($x139 (= input.spec-%var-l-1.2.0 ?x155)))
 (let (($x85 (=> $x160 $x139)))
 (let (($x82 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x54 (=> $x82 $x138)))
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x20 (ite $x56 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x20 (_ bv1 32))))
 (let (($x57 (= $x160 $x65)))
 (let (($x81 (= ?x20 (_ bv0 32))))
 (let (($x9 (= $x82 $x81)))
 (let (($x162 (and (and (and (and (and (and $x9 $x57) $x54) $x85) $x140) $x149) $x105)))
 (let (($x83 (and (and (and (and (and $x162 $x151) $x126) $x142) $x133) $x137)))
 (let (($x7 (= $x83 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x24 (concat ?x74 (concat ?x6 ?x43)))))
 (let (($x146 (= input.dst.llvm-%l ?x35)))
 (let (($x47 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x12 (and $x47 $x146)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x78)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x73 $x62)))
 (let (($x8 (and $x53 $x32)))
 (let (($x21 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x21 $x8)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x55)))))))
 (let (($x45 (and (and (and $x41 true) $x145) $x12)))
 (let (($x5 (= $x45 true)))
 (let (($x17 (= $x5 true)))
 (let (($x46 (= $x17 true)))
 (let (($x31 (and $x46 $x7)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x13 (and $x18 $x31)))
 (let (($x168 (=> $x13 $x167)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000001000)
(= input.spec-%var-l-1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b10000000000000000000000000000001) #b00000000)
 (= (@fun_43 #b10000000000000000000000000000010) #b00000000)
 (= (@fun_43 #b10000000000000000000000000000011) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001100) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001101) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001110) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001111) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000100) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000101) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000110) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000111) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000000) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000011) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001000) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001001) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001010) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001011) #b00000000)
 (default #b00001000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2169248256 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2169248256 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2169248256 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2169248259 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000750c)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
              #x0000750d
              #x7d)
       #x0000750c
       #x08))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00007d08)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000750f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000750c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x84 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x25 (= (_ bv0 3) ?x84)))
 (let (($x50 (= $x25 true)))
 (let (($x81 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x9 (ite $x81 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x9 (_ bv1 32))))
 (let (($x57 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x138 (= $x57 $x22)))
 (let (($x160 (= ?x9 (_ bv0 32))))
 (let (($x20 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x65 (= $x20 $x160)))
 (let (($x54 (and $x65 $x138)))
 (let (($x143 (= $x54 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x71 (concat ?x6 (concat ?x29 ?x66)))))
 (let (($x146 (= input.dst.llvm-%l ?x35)))
 (let (($x63 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x12 (and $x63 $x146)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x78)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x73 $x62)))
 (let (($x8 (and $x53 $x32)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x59 $x8)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x52)))))))
 (let (($x17 (and (and (and $x21 true) $x145) $x12)))
 (let (($x46 (= $x17 true)))
 (let (($x80 (= $x46 true)))
 (let (($x82 (= $x80 true)))
 (let (($x148 (and $x82 $x143)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x75 (and $x58 $x148)))
 (let (($x10 (=> $x75 $x50)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x84 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x25 (= (_ bv0 3) ?x84)))
 (let (($x50 (= $x25 true)))
 (let (($x81 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x9 (ite $x81 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x9 (_ bv1 32))))
 (let (($x57 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x138 (= $x57 $x22)))
 (let (($x160 (= ?x9 (_ bv0 32))))
 (let (($x20 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x65 (= $x20 $x160)))
 (let (($x54 (and $x65 $x138)))
 (let (($x143 (= $x54 true)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x71 (concat ?x6 (concat ?x29 ?x66)))))
 (let (($x146 (= input.dst.llvm-%l ?x35)))
 (let (($x63 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x12 (and $x63 $x146)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x78)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x73 $x62)))
 (let (($x8 (and $x53 $x32)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x59 $x8)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x52)))))))
 (let (($x17 (and (and (and $x21 true) $x145) $x12)))
 (let (($x46 (= $x17 true)))
 (let (($x80 (= $x46 true)))
 (let (($x82 (= $x80 true)))
 (let (($x148 (and $x82 $x143)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x75 (and $x58 $x148)))
 (let (($x10 (=> $x75 $x50)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x10 (= $x50 true)))
 (let (($x70 (= $x10 true)))
 (let (($x160 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x65 (ite $x160 (_ bv0 32) (_ bv1 32))))
 (let (($x54 (bvuge ?x65 (_ bv1 32))))
 (let (($x138 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x143 (= $x138 $x54)))
 (let (($x57 (= ?x65 (_ bv0 32))))
 (let (($x9 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (= $x9 $x57)))
 (let (($x148 (and $x22 $x143)))
 (let (($x75 (= $x148 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x43 (concat ?x29 (concat ?x74 ?x72)))))
 (let (($x146 (= input.dst.llvm-%l ?x35)))
 (let (($x11 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x12 (and $x11 $x146)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x78)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x73 $x62)))
 (let (($x8 (and $x53 $x32)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x19 $x8)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x67)))))))
 (let (($x80 (and (and (and $x59 true) $x145) $x12)))
 (let (($x82 (= $x80 true)))
 (let (($x56 (= $x82 true)))
 (let (($x20 (= $x56 true)))
 (let (($x28 (and $x20 $x75)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x84 (and $x49 $x28)))
 (let (($x69 (=> $x84 $x70)))
 (not $x69)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x10 (= $x50 true)))
 (let (($x70 (= $x10 true)))
 (let (($x160 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x65 (ite $x160 (_ bv0 32) (_ bv1 32))))
 (let (($x54 (bvuge ?x65 (_ bv1 32))))
 (let (($x138 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x143 (= $x138 $x54)))
 (let (($x57 (= ?x65 (_ bv0 32))))
 (let (($x9 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (= $x9 $x57)))
 (let (($x148 (and $x22 $x143)))
 (let (($x75 (= $x148 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x43 (concat ?x29 (concat ?x74 ?x72)))))
 (let (($x146 (= input.dst.llvm-%l ?x35)))
 (let (($x11 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x12 (and $x11 $x146)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x78)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x73 $x62)))
 (let (($x8 (and $x53 $x32)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x19 $x8)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x67)))))))
 (let (($x80 (and (and (and $x59 true) $x145) $x12)))
 (let (($x82 (= $x80 true)))
 (let (($x56 (= $x82 true)))
 (let (($x20 (= $x56 true)))
 (let (($x28 (and $x20 $x75)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x84 (and $x49 $x28)))
 (let (($x69 (=> $x84 $x70)))
 (not $x69)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x22 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x138 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x138 (_ bv1 32))))
 (let (($x15 (= $x75 false)))
 (let (($x40 (= false false)))
 (let (($x54 (= ?x138 (_ bv0 32))))
 (let (($x47 (=> $x54 $x40)))
 (let (($x139 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x54 true)) $x47) $x15)))
 (let (($x69 (not true)))
 (let (($x85 (or $x69 $x139)))
 (let (($x70 (= true true)))
 (let (($x144 (and $x70 $x85)))
 (let (($x86 (= $x144 true)))
 (let (($x148 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x28 (= $x148 $x75)))
 (let (($x57 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x143 (= $x57 $x54)))
 (let (($x84 (and $x143 $x28)))
 (let (($x25 (= $x84 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x35 (concat ?x72 (concat ?x24 ?x43)))))
 (let (($x12 (= input.dst.llvm-%l ?x146)))
 (let (($x11 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x80 (and $x11 $x12)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x32)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x26 $x53)))
 (let (($x145 (and $x78 $x8)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x30 $x145)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x21)))))))
 (let (($x20 (and (and (and $x73 true) $x46) $x80)))
 (let (($x81 (= $x20 true)))
 (let (($x9 (= $x81 true)))
 (let (($x160 (= $x9 true)))
 (let (($x50 (and $x160 $x25)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x10 (and $x49 $x50)))
 (let (($x87 (=> $x10 $x86)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x22 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x138 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x138 (_ bv1 32))))
 (let (($x15 (= $x75 false)))
 (let (($x40 (= false false)))
 (let (($x54 (= ?x138 (_ bv0 32))))
 (let (($x47 (=> $x54 $x40)))
 (let (($x139 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x54 true)) $x47) $x15)))
 (let (($x69 (not true)))
 (let (($x85 (or $x69 $x139)))
 (let (($x70 (= true true)))
 (let (($x144 (and $x70 $x85)))
 (let (($x86 (= $x144 true)))
 (let (($x148 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x28 (= $x148 $x75)))
 (let (($x57 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x143 (= $x57 $x54)))
 (let (($x84 (and $x143 $x28)))
 (let (($x25 (= $x84 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x35 (concat ?x72 (concat ?x24 ?x43)))))
 (let (($x12 (= input.dst.llvm-%l ?x146)))
 (let (($x11 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x80 (and $x11 $x12)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x32)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x26 $x53)))
 (let (($x145 (and $x78 $x8)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x30 $x145)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x21)))))))
 (let (($x20 (and (and (and $x73 true) $x46) $x80)))
 (let (($x81 (= $x20 true)))
 (let (($x9 (= $x81 true)))
 (let (($x160 (= $x9 true)))
 (let (($x50 (and $x160 $x25)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x10 (and $x49 $x50)))
 (let (($x87 (=> $x10 $x86)))
 (not $x87)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x80000001
                     #x00)
              #x80000002
              #x00)
       #x80000003
       #x00))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x143 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x148 (ite $x143 (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x148 (_ bv1 32))))
 (let (($x144 (= $x25 false)))
 (let (($x10 (= false false)))
 (let (($x75 (= ?x148 (_ bv0 32))))
 (let (($x85 (=> $x75 $x10)))
 (let (($x88 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x75 true)) $x85) $x144)))
 (let (($x155 (not true)))
 (let (($x14 (or $x155 $x88)))
 (let (($x47 (= true true)))
 (let (($x55 (and $x47 $x14)))
 (let (($x64 (= $x55 true)))
 (let (($x54 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x54 $x10)))
 (let (($x76 (and (and (= $x54 $x75) (= (bvuge input.spec-%var-l-1.0 (_ bv1 32)) $x25)) $x70)))
 (let (($x58 (= $x76 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x12 (concat ?x146 (concat ?x43 (concat ?x74 ?x35)))))
 (let (($x80 (= input.dst.llvm-%l ?x12)))
 (let (($x11 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x20 (and $x11 $x80)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x8)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x27 $x78)))
 (let (($x46 (and $x32 $x145)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x16 $x46)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x17)))))))
 (let (($x160 (and (and (and $x26 true) $x56) $x20)))
 (let (($x65 (= $x160 true)))
 (let (($x57 (= $x65 true)))
 (let (($x22 (= $x57 true)))
 (let (($x68 (and $x22 $x58)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x40 (and $x49 $x68)))
 (let (($x94 (=> $x40 $x64)))
 (not $x94)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x143 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x148 (ite $x143 (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x148 (_ bv1 32))))
 (let (($x144 (= $x25 false)))
 (let (($x10 (= false false)))
 (let (($x75 (= ?x148 (_ bv0 32))))
 (let (($x85 (=> $x75 $x10)))
 (let (($x88 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x75 true)) $x85) $x144)))
 (let (($x155 (not true)))
 (let (($x14 (or $x155 $x88)))
 (let (($x47 (= true true)))
 (let (($x55 (and $x47 $x14)))
 (let (($x64 (= $x55 true)))
 (let (($x54 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x54 $x10)))
 (let (($x76 (and (and (= $x54 $x75) (= (bvuge input.spec-%var-l-1.0 (_ bv1 32)) $x25)) $x70)))
 (let (($x58 (= $x76 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x12 (concat ?x146 (concat ?x43 (concat ?x74 ?x35)))))
 (let (($x80 (= input.dst.llvm-%l ?x12)))
 (let (($x11 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x20 (and $x11 $x80)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x8)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x27 $x78)))
 (let (($x46 (and $x32 $x145)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x16 $x46)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x17)))))))
 (let (($x160 (and (and (and $x26 true) $x56) $x20)))
 (let (($x65 (= $x160 true)))
 (let (($x57 (= $x65 true)))
 (let (($x22 (= $x57 true)))
 (let (($x68 (and $x22 $x58)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x40 (and $x49 $x68)))
 (let (($x94 (=> $x40 $x64)))
 (not $x94)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x80)
                     #x80000001
                     #x00)
              #x80000002
              #x00)
       #x80000003
       #x00))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x84 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x10 (bvuge ?x84 (_ bv1 32))))
 (let (($x38 (= $x10 false)))
 (let (($x76 (= false false)))
 (let (($x25 (= ?x84 (_ bv0 32))))
 (let (($x51 (=> $x25 $x76)))
 (let (($x169 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x25 true)) $x51) $x38)))
 (let (($x31 (not true)))
 (let (($x77 (or $x31 $x169)))
 (let (($x7 (= true true)))
 (let (($x23 (and $x7 $x77)))
 (let (($x37 (= $x23 true)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x92 (concat ?x90 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x99 (concat ?x91 (concat ?x93 ?x92))))
 (let ((?x151 (bvadd ?x99 (_ bv4 32))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x153))))
 (let (($x112 (= (_ bv0 32) ?x118)))
 (let ((?x135 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (bvuge ?x135 (_ bv1 32))))
 (let (($x134 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x152 (= $x134 $x125)))
 (let (($x149 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x69 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x157 (and $x69 $x149)))
 (let (($x126 (=> $x157 $x152)))
 (let (($x128 (= ?x135 (_ bv0 32))))
 (let (($x116 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x159 (= $x116 $x128)))
 (let (($x123 (=> $x157 $x159)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x109))))
 (let (($x111 (= input.spec-%var-l-1.2.1.2.0 ?x106)))
 (let (($x108 (=> $x157 $x111)))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x101 (ite $x100 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x101 (_ bv1 32))))
 (let (($x141 (= $x149 $x161)))
 (let (($x104 (=> $x69 $x141)))
 (let (($x96 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x61 (and $x69 $x96)))
 (let (($x156 (=> $x61 $x76)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x103 (= $x96 $x102)))
 (let (($x140 (=> $x69 $x103)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x139)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x87)))
 (let (($x55 (= input.spec-%var-l-1.2.0 ?x14)))
 (let (($x64 (=> $x69 $x55)))
 (let (($x75 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x58 (=> $x75 $x76)))
 (let (($x142 (and (and (and (and (and (= $x75 $x25) (= $x69 $x10)) $x58) $x64) $x140) $x156)))
 (let (($x166 (and (and (and (and $x142 $x104) $x108) $x123) $x126)))
 (let (($x136 (= $x166 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x12 (concat ?x35 (concat ?x24 ?x146)))))
 (let (($x20 (= input.dst.llvm-%l ?x80)))
 (let (($x11 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x160 (and $x11 $x20)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x145)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x62 $x32)))
 (let (($x56 (and $x8 $x46)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x67 $x56)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x82)))))))
 (let (($x22 (and (and (and $x27 true) $x9) $x160)))
 (let (($x138 (= $x22 true)))
 (let (($x54 (= $x138 true)))
 (let (($x143 (= $x54 true)))
 (let (($x137 (and $x143 $x136)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x83 (and $x49 $x137)))
 (let (($x170 (=> $x83 $x37)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x84 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x10 (bvuge ?x84 (_ bv1 32))))
 (let (($x38 (= $x10 false)))
 (let (($x76 (= false false)))
 (let (($x25 (= ?x84 (_ bv0 32))))
 (let (($x51 (=> $x25 $x76)))
 (let (($x169 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x25 true)) $x51) $x38)))
 (let (($x31 (not true)))
 (let (($x77 (or $x31 $x169)))
 (let (($x7 (= true true)))
 (let (($x23 (and $x7 $x77)))
 (let (($x37 (= $x23 true)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x92 (concat ?x90 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x99 (concat ?x91 (concat ?x93 ?x92))))
 (let ((?x151 (bvadd ?x99 (_ bv4 32))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x153))))
 (let (($x112 (= (_ bv0 32) ?x118)))
 (let ((?x135 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (bvuge ?x135 (_ bv1 32))))
 (let (($x134 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x152 (= $x134 $x125)))
 (let (($x149 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x69 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x157 (and $x69 $x149)))
 (let (($x126 (=> $x157 $x152)))
 (let (($x128 (= ?x135 (_ bv0 32))))
 (let (($x116 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x159 (= $x116 $x128)))
 (let (($x123 (=> $x157 $x159)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x109))))
 (let (($x111 (= input.spec-%var-l-1.2.1.2.0 ?x106)))
 (let (($x108 (=> $x157 $x111)))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x101 (ite $x100 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x101 (_ bv1 32))))
 (let (($x141 (= $x149 $x161)))
 (let (($x104 (=> $x69 $x141)))
 (let (($x96 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x61 (and $x69 $x96)))
 (let (($x156 (=> $x61 $x76)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x103 (= $x96 $x102)))
 (let (($x140 (=> $x69 $x103)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x139)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x87)))
 (let (($x55 (= input.spec-%var-l-1.2.0 ?x14)))
 (let (($x64 (=> $x69 $x55)))
 (let (($x75 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x58 (=> $x75 $x76)))
 (let (($x142 (and (and (and (and (and (= $x75 $x25) (= $x69 $x10)) $x58) $x64) $x140) $x156)))
 (let (($x166 (and (and (and (and $x142 $x104) $x108) $x123) $x126)))
 (let (($x136 (= $x166 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x12 (concat ?x35 (concat ?x24 ?x146)))))
 (let (($x20 (= input.dst.llvm-%l ?x80)))
 (let (($x11 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x160 (and $x11 $x20)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x145)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x62 $x32)))
 (let (($x56 (and $x8 $x46)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x67 $x56)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x82)))))))
 (let (($x22 (and (and (and $x27 true) $x9) $x160)))
 (let (($x138 (= $x22 true)))
 (let (($x54 (= $x138 true)))
 (let (($x143 (= $x54 true)))
 (let (($x137 (and $x143 $x136)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x83 (and $x49 $x137)))
 (let (($x170 (=> $x83 $x37)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x20005204)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x1b497f70)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x20005205
                                #x52)
                         #x20005207
                         #x20)
                  #x20005205
                  #x52)))
  (store (store (store a!1 #x20005205 #x52) #x20005207 #x20) #x20005207 #x20)))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x20005200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x20005207)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x20005204)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x50 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x164 (bvuge ?x50 (_ bv1 32))))
 (let (($x250 (= $x164 false)))
 (let (($x58 (= false false)))
 (let (($x69 (= ?x50 (_ bv0 32))))
 (let (($x249 (=> $x69 $x58)))
 (let (($x253 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x69 true)) $x249) $x250)))
 (let (($x246 (not true)))
 (let (($x254 (or $x246 $x253)))
 (let (($x245 (= true true)))
 (let (($x255 (and $x245 $x254)))
 (let (($x256 (= $x255 true)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x93 (concat ?x97 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x99 (concat ?x89 (concat ?x90 ?x93))))
 (let ((?x108 (bvadd ?x99 (_ bv4 32))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv1 32))) (select input.dst.llvm-mem ?x108))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv2 32))) ?x151))))
 (let ((?x77 (bvadd ?x117 (_ bv4 32))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem ?x77))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv2 32))) ?x171))))
 (let ((?x204 (bvadd ?x174 (_ bv4 32))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x208))))
 (let (($x215 (= (_ bv0 32) ?x214)))
 (let ((?x216 (ite $x215 (_ bv0 32) (_ bv1 32))))
 (let (($x221 (bvuge ?x216 (_ bv1 32))))
 (let (($x220 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x222 (= $x220 $x221)))
 (let (($x182 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x156 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x70 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x141 (and $x70 $x156)))
 (let (($x125 (and $x141 $x135)))
 (let (($x186 (and $x125 $x182)))
 (let (($x223 (=> $x186 $x222)))
 (let (($x217 (= ?x216 (_ bv0 32))))
 (let (($x201 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x218 (= $x201 $x217)))
 (let (($x219 (=> $x186 $x218)))
 (let (($x202 (and $x186 $x201)))
 (let (($x203 (=> $x202 $x58)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x191))))
 (let (($x198 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x197)))
 (let (($x199 (=> $x186 $x198)))
 (let (($x175 (= (_ bv0 32) ?x174)))
 (let ((?x176 (ite $x175 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x176 (_ bv1 32))))
 (let (($x184 (= $x182 $x183)))
 (let (($x185 (=> $x125 $x184)))
 (let (($x169 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x180 (and $x125 $x169)))
 (let (($x181 (=> $x180 $x58)))
 (let (($x177 (= ?x176 (_ bv0 32))))
 (let (($x178 (= $x169 $x177)))
 (let (($x179 (=> $x125 $x178)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x137))))
 (let (($x51 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x167)))
 (let (($x168 (=> $x125 $x51)))
 (let (($x111 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x133 (and $x141 $x111)))
 (let (($x134 (=> $x133 $x58)))
 (let (($x163 (= (_ bv0 32) ?x117)))
 (let ((?x153 (ite $x163 (_ bv0 32) (_ bv1 32))))
 (let (($x128 (bvuge ?x153 (_ bv1 32))))
 (let (($x159 (= $x135 $x128)))
 (let (($x123 (=> $x141 $x159)))
 (let (($x124 (= ?x153 (_ bv0 32))))
 (let (($x118 (= $x111 $x124)))
 (let (($x112 (=> $x141 $x118)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x107))))
 (let (($x109 (= input.spec-%var-l-1.2.1.2.0 ?x162)))
 (let (($x120 (=> $x141 $x109)))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x101 (ite $x100 (_ bv0 32) (_ bv1 32))))
 (let (($x142 (bvuge ?x101 (_ bv1 32))))
 (let (($x149 (= $x156 $x142)))
 (let (($x161 (=> $x70 $x149)))
 (let (($x96 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x127 (and $x70 $x96)))
 (let (($x61 (=> $x127 $x58)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x103 (= $x96 $x102)))
 (let (($x140 (=> $x70 $x103)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x155)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x139)))
 (let (($x64 (= input.spec-%var-l-1.2.0 ?x55)))
 (let (($x129 (=> $x70 $x64)))
 (let (($x84 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x131 (=> $x84 $x58)))
 (let (($x228 (and (and (and (and (and (= $x84 $x69) (= $x70 $x164)) $x131) $x129) $x140) $x61)))
 (let (($x234 (and (and (and (and (and (and $x228 $x161) $x120) $x112) $x123) $x134) $x168)))
 (let (($x240 (and (and (and (and (and (and $x234 $x179) $x181) $x185) $x199) $x203) $x219)))
 (let (($x241 (and $x240 $x223)))
 (let (($x242 (= $x241 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x6 (concat ?x71 (concat ?x11 ?x154)))))
 (let (($x146 (= input.dst.llvm-%l ?x24)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x160 (and $x9 $x146)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x20)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x62 $x32)))
 (let (($x18 (and $x8 $x17)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x72 $x18)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x26)))))))
 (let (($x54 (and (and (and $x67 true) $x73) $x160)))
 (let (($x143 (= $x54 true)))
 (let (($x148 (= $x143 true)))
 (let (($x75 (= $x148 true)))
 (let (($x243 (and $x75 $x242)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x244 (and $x48 $x243)))
 (let (($x257 (=> $x244 $x256)))
 (not $x257)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x50 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x164 (bvuge ?x50 (_ bv1 32))))
 (let (($x250 (= $x164 false)))
 (let (($x58 (= false false)))
 (let (($x69 (= ?x50 (_ bv0 32))))
 (let (($x249 (=> $x69 $x58)))
 (let (($x253 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x69 true)) $x249) $x250)))
 (let (($x246 (not true)))
 (let (($x254 (or $x246 $x253)))
 (let (($x245 (= true true)))
 (let (($x255 (and $x245 $x254)))
 (let (($x256 (= $x255 true)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x93 (concat ?x97 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x99 (concat ?x89 (concat ?x90 ?x93))))
 (let ((?x108 (bvadd ?x99 (_ bv4 32))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv1 32))) (select input.dst.llvm-mem ?x108))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv2 32))) ?x151))))
 (let ((?x77 (bvadd ?x117 (_ bv4 32))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv1 32))) (select input.dst.llvm-mem ?x77))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x77 (_ bv2 32))) ?x171))))
 (let ((?x204 (bvadd ?x174 (_ bv4 32))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x208))))
 (let (($x215 (= (_ bv0 32) ?x214)))
 (let ((?x216 (ite $x215 (_ bv0 32) (_ bv1 32))))
 (let (($x221 (bvuge ?x216 (_ bv1 32))))
 (let (($x220 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x222 (= $x220 $x221)))
 (let (($x182 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x156 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x70 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x141 (and $x70 $x156)))
 (let (($x125 (and $x141 $x135)))
 (let (($x186 (and $x125 $x182)))
 (let (($x223 (=> $x186 $x222)))
 (let (($x217 (= ?x216 (_ bv0 32))))
 (let (($x201 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x218 (= $x201 $x217)))
 (let (($x219 (=> $x186 $x218)))
 (let (($x202 (and $x186 $x201)))
 (let (($x203 (=> $x202 $x58)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x191))))
 (let (($x198 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x197)))
 (let (($x199 (=> $x186 $x198)))
 (let (($x175 (= (_ bv0 32) ?x174)))
 (let ((?x176 (ite $x175 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x176 (_ bv1 32))))
 (let (($x184 (= $x182 $x183)))
 (let (($x185 (=> $x125 $x184)))
 (let (($x169 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x180 (and $x125 $x169)))
 (let (($x181 (=> $x180 $x58)))
 (let (($x177 (= ?x176 (_ bv0 32))))
 (let (($x178 (= $x169 $x177)))
 (let (($x179 (=> $x125 $x178)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x137))))
 (let (($x51 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x167)))
 (let (($x168 (=> $x125 $x51)))
 (let (($x111 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x133 (and $x141 $x111)))
 (let (($x134 (=> $x133 $x58)))
 (let (($x163 (= (_ bv0 32) ?x117)))
 (let ((?x153 (ite $x163 (_ bv0 32) (_ bv1 32))))
 (let (($x128 (bvuge ?x153 (_ bv1 32))))
 (let (($x159 (= $x135 $x128)))
 (let (($x123 (=> $x141 $x159)))
 (let (($x124 (= ?x153 (_ bv0 32))))
 (let (($x118 (= $x111 $x124)))
 (let (($x112 (=> $x141 $x118)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x107))))
 (let (($x109 (= input.spec-%var-l-1.2.1.2.0 ?x162)))
 (let (($x120 (=> $x141 $x109)))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x101 (ite $x100 (_ bv0 32) (_ bv1 32))))
 (let (($x142 (bvuge ?x101 (_ bv1 32))))
 (let (($x149 (= $x156 $x142)))
 (let (($x161 (=> $x70 $x149)))
 (let (($x96 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x127 (and $x70 $x96)))
 (let (($x61 (=> $x127 $x58)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x103 (= $x96 $x102)))
 (let (($x140 (=> $x70 $x103)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x155)))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x139)))
 (let (($x64 (= input.spec-%var-l-1.2.0 ?x55)))
 (let (($x129 (=> $x70 $x64)))
 (let (($x84 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x131 (=> $x84 $x58)))
 (let (($x228 (and (and (and (and (and (= $x84 $x69) (= $x70 $x164)) $x131) $x129) $x140) $x61)))
 (let (($x234 (and (and (and (and (and (and $x228 $x161) $x120) $x112) $x123) $x134) $x168)))
 (let (($x240 (and (and (and (and (and (and $x234 $x179) $x181) $x185) $x199) $x203) $x219)))
 (let (($x241 (and $x240 $x223)))
 (let (($x242 (= $x241 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x6 (concat ?x71 (concat ?x11 ?x154)))))
 (let (($x146 (= input.dst.llvm-%l ?x24)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x160 (and $x9 $x146)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x20)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x62 $x32)))
 (let (($x18 (and $x8 $x17)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x72 $x18)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x26)))))))
 (let (($x54 (and (and (and $x67 true) $x73) $x160)))
 (let (($x143 (= $x54 true)))
 (let (($x148 (= $x143 true)))
 (let (($x75 (= $x148 true)))
 (let (($x243 (and $x75 $x242)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x244 (and $x48 $x243)))
 (let (($x257 (=> $x244 $x256)))
 (not $x257)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x12121a10)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x12)
                                #x12130003
                                #xff)
                         #x12fed8b6
                         #xfe)
                  #x12130002
                  #xfe)))
(let ((a!2 (store (store (store (store a!1 #x12121a10 #x10) #x12130004 #xff)
                         #x12121216
                         #xfe)
                  #x12121215
                  #xd8)))
  (store (store (store (store a!2 #x13000004 #xfe) #x12fed8b7 #xff)
                #x12121214
                #xb2)
         #x13000002
         #xb2))))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x12121212)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x12121212)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x12121212)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x12121212)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x12121210)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x12121a13)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x12121a10)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var405X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var405X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x101 (concat ?x100 (select input.dst.llvm-mem (bvadd input.ind-%var405X (_ bv4 32))))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var405X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var405X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x127 (concat ?x103 ?x101))))
 (let (($x228 (= ?x61 ?x61)))
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x70 (ite $x10 (_ bv0 32) (_ bv1 32))))
 (let (($x58 (bvuge ?x70 (_ bv1 32))))
 (let (($x156 (=> $x58 $x228)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.ind-%var405X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var405X))))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.ind-%var405X (_ bv2 32))) ?x96)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.ind-%var405X (_ bv3 32))) ?x92)))
 (let (($x91 (= ?x90 ?x90)))
 (let (($x97 (=> $x58 $x91)))
 (let (($x139 (= $x58 $x58)))
 (let (($x164 (= ?x70 (_ bv0 32))))
 (let (($x155 (= $x164 $x164)))
 (let (($x88 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x86 (= false false)))
 (let (($x85 (=> $x164 $x86)))
 (let (($x141 (and (and (and (and (and $x85 $x88) $x155) $x139) $x97) $x156)))
 (let (($x47 (not true)))
 (let (($x104 (or $x47 $x141)))
 (let (($x15 (= true true)))
 (let (($x150 (and $x15 $x104)))
 (let (($x36 (= $x150 true)))
 (let (($x224 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x131 (= $x224 $x58)))
 (let (($x69 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x76 (= $x69 $x164)))
 (let (($x225 (and $x76 $x131)))
 (let (($x68 (= $x225 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x24 (concat ?x154 (concat ?x12 ?x6)))))
 (let (($x160 (= input.dst.llvm-%l ?x146)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x54 (and $x9 $x160)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x17)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x53 $x8)))
 (let (($x73 (and $x20 $x18)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x16 $x73)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x27)))))))
 (let (($x75 (and (and (and $x62 true) $x138) $x54)))
 (let (($x28 (= $x75 true)))
 (let (($x84 (= $x28 true)))
 (let (($x25 (= $x84 true)))
 (let (($x87 (and $x25 $x68)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x14 (and $x48 $x87)))
 (let (($x110 (=> $x14 $x36)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var405X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var405X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x101 (concat ?x100 (select input.dst.llvm-mem (bvadd input.ind-%var405X (_ bv4 32))))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var405X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var405X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x127 (concat ?x103 ?x101))))
 (let (($x228 (= ?x61 ?x61)))
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x70 (ite $x10 (_ bv0 32) (_ bv1 32))))
 (let (($x58 (bvuge ?x70 (_ bv1 32))))
 (let (($x156 (=> $x58 $x228)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.ind-%var405X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var405X))))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.ind-%var405X (_ bv2 32))) ?x96)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.ind-%var405X (_ bv3 32))) ?x92)))
 (let (($x91 (= ?x90 ?x90)))
 (let (($x97 (=> $x58 $x91)))
 (let (($x139 (= $x58 $x58)))
 (let (($x164 (= ?x70 (_ bv0 32))))
 (let (($x155 (= $x164 $x164)))
 (let (($x88 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x86 (= false false)))
 (let (($x85 (=> $x164 $x86)))
 (let (($x141 (and (and (and (and (and $x85 $x88) $x155) $x139) $x97) $x156)))
 (let (($x47 (not true)))
 (let (($x104 (or $x47 $x141)))
 (let (($x15 (= true true)))
 (let (($x150 (and $x15 $x104)))
 (let (($x36 (= $x150 true)))
 (let (($x224 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x131 (= $x224 $x58)))
 (let (($x69 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x76 (= $x69 $x164)))
 (let (($x225 (and $x76 $x131)))
 (let (($x68 (= $x225 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x24 (concat ?x154 (concat ?x12 ?x6)))))
 (let (($x160 (= input.dst.llvm-%l ?x146)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x54 (and $x9 $x160)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x17)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x53 $x8)))
 (let (($x73 (and $x20 $x18)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x16 $x73)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x27)))))))
 (let (($x75 (and (and (and $x62 true) $x138) $x54)))
 (let (($x28 (= $x75 true)))
 (let (($x84 (= $x28 true)))
 (let (($x25 (= $x84 true)))
 (let (($x87 (and $x25 $x68)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x14 (and $x48 $x87)))
 (let (($x110 (=> $x14 $x36)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var422X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var422X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x103 (concat ?x102 (select input.dst.llvm-mem (bvadd input.ind-%var422X (_ bv4 32))))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var422X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var422X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x140 (concat ?x100 ?x103))))
 (let (($x228 (= ?x61 ?x61)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x224 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x224 (_ bv1 32))))
 (let (($x156 (=> $x68 $x228)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd input.ind-%var422X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var422X))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.ind-%var422X (_ bv2 32))) ?x226)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.ind-%var422X (_ bv3 32))) ?x96)))
 (let (($x97 (= ?x91 ?x91)))
 (let (($x229 (=> $x68 $x97)))
 (let (($x161 (= $x68 $x68)))
 (let (($x58 (= ?x224 (_ bv0 32))))
 (let (($x139 (= $x58 $x58)))
 (let (($x149 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x142 (= false false)))
 (let (($x155 (=> $x58 $x142)))
 (let (($x110 (and (and (and (and (and $x155 $x149) $x139) $x161) $x229) $x156)))
 (let (($x88 (not true)))
 (let (($x158 (or $x88 $x110)))
 (let (($x85 (= true true)))
 (let (($x55 (and $x85 $x158)))
 (let (($x21 (= $x55 true)))
 (let (($x225 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x87 (= $x225 $x68)))
 (let (($x164 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x131 (= $x164 $x58)))
 (let (($x14 (and $x131 $x87)))
 (let (($x15 (= $x14 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x160 (concat ?x146 (concat ?x6 (concat ?x11 ?x24)))))
 (let (($x54 (= input.dst.llvm-%l ?x160)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x75 (and $x9 $x54)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x18)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x78 $x20)))
 (let (($x138 (and $x17 $x73)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x59 $x138)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x22)))))))
 (let (($x25 (and (and (and $x53 true) $x148) $x75)))
 (let (($x50 (= $x25 true)))
 (let (($x69 (= $x50 true)))
 (let (($x10 (= $x69 true)))
 (let (($x47 (and $x10 $x15)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x86 (and $x48 $x47)))
 (let (($x41 (=> $x86 $x21)))
 (not $x41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var422X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var422X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x103 (concat ?x102 (select input.dst.llvm-mem (bvadd input.ind-%var422X (_ bv4 32))))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var422X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var422X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x140 (concat ?x100 ?x103))))
 (let (($x228 (= ?x61 ?x61)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x224 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x224 (_ bv1 32))))
 (let (($x156 (=> $x68 $x228)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd input.ind-%var422X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var422X))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.ind-%var422X (_ bv2 32))) ?x226)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.ind-%var422X (_ bv3 32))) ?x96)))
 (let (($x97 (= ?x91 ?x91)))
 (let (($x229 (=> $x68 $x97)))
 (let (($x161 (= $x68 $x68)))
 (let (($x58 (= ?x224 (_ bv0 32))))
 (let (($x139 (= $x58 $x58)))
 (let (($x149 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x142 (= false false)))
 (let (($x155 (=> $x58 $x142)))
 (let (($x110 (and (and (and (and (and $x155 $x149) $x139) $x161) $x229) $x156)))
 (let (($x88 (not true)))
 (let (($x158 (or $x88 $x110)))
 (let (($x85 (= true true)))
 (let (($x55 (and $x85 $x158)))
 (let (($x21 (= $x55 true)))
 (let (($x225 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x87 (= $x225 $x68)))
 (let (($x164 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x131 (= $x164 $x58)))
 (let (($x14 (and $x131 $x87)))
 (let (($x15 (= $x14 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x160 (concat ?x146 (concat ?x6 (concat ?x11 ?x24)))))
 (let (($x54 (= input.dst.llvm-%l ?x160)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x75 (and $x9 $x54)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x18)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x8)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x78 $x20)))
 (let (($x138 (and $x17 $x73)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x59 $x138)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x22)))))))
 (let (($x25 (and (and (and $x53 true) $x148) $x75)))
 (let (($x50 (= $x25 true)))
 (let (($x69 (= $x50 true)))
 (let (($x10 (= $x69 true)))
 (let (($x47 (and $x10 $x15)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x86 (and $x48 $x47)))
 (let (($x41 (=> $x86 $x21)))
 (not $x41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var456X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var456X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x100 (concat ?x99 (select input.dst.llvm-mem (bvadd input.ind-%var456X (_ bv4 32))))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var456X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var456X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x66 (concat ?x102 ?x100))))
 (let (($x228 (= ?x61 ?x61)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x225 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x15 (bvuge ?x225 (_ bv1 32))))
 (let (($x156 (=> $x15 $x228)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.ind-%var456X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var456X))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd input.ind-%var456X (_ bv2 32))) ?x60)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.ind-%var456X (_ bv3 32))) ?x226)))
 (let (($x229 (= ?x97 ?x97)))
 (let (($x36 (=> $x15 $x229)))
 (let (($x150 (= $x15 $x15)))
 (let (($x68 (= ?x225 (_ bv0 32))))
 (let (($x161 (= $x68 $x68)))
 (let (($x104 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x141 (= false false)))
 (let (($x139 (=> $x68 $x141)))
 (let (($x41 (and (and (and (and (and $x139 $x104) $x161) $x150) $x36) $x156)))
 (let (($x149 (not true)))
 (let (($x35 (or $x149 $x41)))
 (let (($x155 (= true true)))
 (let (($x64 (and $x155 $x35)))
 (let (($x80 (= $x64 true)))
 (let (($x14 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x47 (= $x14 $x15)))
 (let (($x58 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x87 (= $x58 $x68)))
 (let (($x86 (and $x87 $x47)))
 (let (($x85 (= $x86 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x160 (concat ?x24 (concat ?x12 ?x146)))))
 (let (($x75 (= input.dst.llvm-%l ?x54)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x25 (and $x9 $x75)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x73)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x32 $x17)))
 (let (($x148 (and $x18 $x138)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x26 $x148)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x143)))))))
 (let (($x10 (and (and (and $x78 true) $x84) $x25)))
 (let (($x70 (= $x10 true)))
 (let (($x164 (= $x70 true)))
 (let (($x76 (= $x164 true)))
 (let (($x88 (and $x76 $x85)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x142 (and $x48 $x88)))
 (let (($x33 (=> $x142 $x80)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var456X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var456X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x100 (concat ?x99 (select input.dst.llvm-mem (bvadd input.ind-%var456X (_ bv4 32))))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var456X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var456X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x66 (concat ?x102 ?x100))))
 (let (($x228 (= ?x61 ?x61)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x225 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x15 (bvuge ?x225 (_ bv1 32))))
 (let (($x156 (=> $x15 $x228)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.ind-%var456X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var456X))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd input.ind-%var456X (_ bv2 32))) ?x60)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.ind-%var456X (_ bv3 32))) ?x226)))
 (let (($x229 (= ?x97 ?x97)))
 (let (($x36 (=> $x15 $x229)))
 (let (($x150 (= $x15 $x15)))
 (let (($x68 (= ?x225 (_ bv0 32))))
 (let (($x161 (= $x68 $x68)))
 (let (($x104 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x141 (= false false)))
 (let (($x139 (=> $x68 $x141)))
 (let (($x41 (and (and (and (and (and $x139 $x104) $x161) $x150) $x36) $x156)))
 (let (($x149 (not true)))
 (let (($x35 (or $x149 $x41)))
 (let (($x155 (= true true)))
 (let (($x64 (and $x155 $x35)))
 (let (($x80 (= $x64 true)))
 (let (($x14 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x47 (= $x14 $x15)))
 (let (($x58 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x87 (= $x58 $x68)))
 (let (($x86 (and $x87 $x47)))
 (let (($x85 (= $x86 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x160 (concat ?x24 (concat ?x12 ?x146)))))
 (let (($x75 (= input.dst.llvm-%l ?x54)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x25 (and $x9 $x75)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x73)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x32 $x17)))
 (let (($x148 (and $x18 $x138)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x26 $x148)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x143)))))))
 (let (($x10 (and (and (and $x78 true) $x84) $x25)))
 (let (($x70 (= $x10 true)))
 (let (($x164 (= $x70 true)))
 (let (($x76 (= $x164 true)))
 (let (($x88 (and $x76 $x85)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x142 (and $x48 $x88)))
 (let (($x33 (=> $x142 $x80)))
 (not $x33)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var473X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var473X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x102 (concat ?x127 (select input.dst.llvm-mem (bvadd input.ind-%var473X (_ bv4 32))))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var473X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var473X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x227 (concat ?x99 ?x102))))
 (let (($x228 (= ?x61 ?x61)))
 (let (($x87 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x14 (ite $x87 (_ bv0 32) (_ bv1 32))))
 (let (($x85 (bvuge ?x14 (_ bv1 32))))
 (let (($x156 (=> $x85 $x228)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.ind-%var473X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var473X))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.ind-%var473X (_ bv2 32))) ?x94)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.ind-%var473X (_ bv3 32))) ?x60)))
 (let (($x36 (= ?x229 ?x229)))
 (let (($x21 (=> $x85 $x36)))
 (let (($x55 (= $x85 $x85)))
 (let (($x15 (= ?x14 (_ bv0 32))))
 (let (($x150 (= $x15 $x15)))
 (let (($x158 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x110 (= false false)))
 (let (($x161 (=> $x15 $x110)))
 (let (($x33 (and (and (and (and (and $x161 $x158) $x150) $x55) $x21) $x156)))
 (let (($x104 (not true)))
 (let (($x74 (or $x104 $x33)))
 (let (($x139 (= true true)))
 (let (($x89 (and $x139 $x74)))
 (let (($x45 (= $x89 true)))
 (let (($x86 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x88 (= $x86 $x85)))
 (let (($x68 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x47 (= $x68 $x15)))
 (let (($x142 (and $x47 $x88)))
 (let (($x155 (= $x142 true)))
 (let ((?x160 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x54 (concat ?x146 (concat ?x11 ?x160)))))
 (let (($x25 (= input.dst.llvm-%l ?x75)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x10 (and $x9 $x25)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x138)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x8 $x18)))
 (let (($x84 (and $x73 $x148)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x27 $x84)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x28)))))))
 (let (($x76 (and (and (and $x32 true) $x69) $x10)))
 (let (($x224 (= $x76 true)))
 (let (($x58 (= $x224 true)))
 (let (($x131 (= $x58 true)))
 (let (($x149 (and $x131 $x155)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x141 (and $x48 $x149)))
 (let (($x19 (=> $x141 $x45)))
 (not $x19)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var473X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var473X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x102 (concat ?x127 (select input.dst.llvm-mem (bvadd input.ind-%var473X (_ bv4 32))))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var473X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var473X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x227 (concat ?x99 ?x102))))
 (let (($x228 (= ?x61 ?x61)))
 (let (($x87 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x14 (ite $x87 (_ bv0 32) (_ bv1 32))))
 (let (($x85 (bvuge ?x14 (_ bv1 32))))
 (let (($x156 (=> $x85 $x228)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.ind-%var473X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var473X))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd input.ind-%var473X (_ bv2 32))) ?x94)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.ind-%var473X (_ bv3 32))) ?x60)))
 (let (($x36 (= ?x229 ?x229)))
 (let (($x21 (=> $x85 $x36)))
 (let (($x55 (= $x85 $x85)))
 (let (($x15 (= ?x14 (_ bv0 32))))
 (let (($x150 (= $x15 $x15)))
 (let (($x158 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x110 (= false false)))
 (let (($x161 (=> $x15 $x110)))
 (let (($x33 (and (and (and (and (and $x161 $x158) $x150) $x55) $x21) $x156)))
 (let (($x104 (not true)))
 (let (($x74 (or $x104 $x33)))
 (let (($x139 (= true true)))
 (let (($x89 (and $x139 $x74)))
 (let (($x45 (= $x89 true)))
 (let (($x86 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x88 (= $x86 $x85)))
 (let (($x68 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x47 (= $x68 $x15)))
 (let (($x142 (and $x47 $x88)))
 (let (($x155 (= $x142 true)))
 (let ((?x160 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x54 (concat ?x146 (concat ?x11 ?x160)))))
 (let (($x25 (= input.dst.llvm-%l ?x75)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x10 (and $x9 $x25)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x138)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x8 $x18)))
 (let (($x84 (and $x73 $x148)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x27 $x84)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x28)))))))
 (let (($x76 (and (and (and $x32 true) $x69) $x10)))
 (let (($x224 (= $x76 true)))
 (let (($x58 (= $x224 true)))
 (let (($x131 (= $x58 true)))
 (let (($x149 (and $x131 $x155)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x141 (and $x48 $x149)))
 (let (($x19 (=> $x141 $x45)))
 (not $x19)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (= false true)))
 (let (($x158 (= $x161 true)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x86 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x155 (bvuge ?x86 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x149 (= $x142 $x155)))
 (let (($x85 (= ?x86 (_ bv0 32))))
 (let (($x15 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x88 (= $x15 $x85)))
 (let (($x141 (and $x88 $x149)))
 (let (($x139 (= $x141 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x75 (concat ?x160 (concat ?x12 ?x54)))))
 (let (($x10 (= input.dst.llvm-%l ?x25)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x76 (and $x9 $x10)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x148)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x20 $x73)))
 (let (($x69 (and $x138 $x84)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x22 $x69)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x50)))))))
 (let (($x131 (and (and (and $x8 true) $x164) $x76)))
 (let (($x225 (= $x131 true)))
 (let (($x68 (= $x225 true)))
 (let (($x87 (= $x68 true)))
 (let (($x104 (and $x87 $x139)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x110 (and $x48 $x104)))
 (let (($x41 (=> $x110 $x158)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x161 (= false true)))
 (let (($x158 (= $x161 true)))
 (let (($x47 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x86 (ite $x47 (_ bv0 32) (_ bv1 32))))
 (let (($x155 (bvuge ?x86 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x149 (= $x142 $x155)))
 (let (($x85 (= ?x86 (_ bv0 32))))
 (let (($x15 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x88 (= $x15 $x85)))
 (let (($x141 (and $x88 $x149)))
 (let (($x139 (= $x141 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x75 (concat ?x160 (concat ?x12 ?x54)))))
 (let (($x10 (= input.dst.llvm-%l ?x25)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x76 (and $x9 $x10)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x148)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x20 $x73)))
 (let (($x69 (and $x138 $x84)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x22 $x69)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x50)))))))
 (let (($x131 (and (and (and $x8 true) $x164) $x76)))
 (let (($x225 (= $x131 true)))
 (let (($x68 (= $x225 true)))
 (let (($x87 (= $x68 true)))
 (let (($x104 (and $x87 $x139)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x110 (and $x48 $x104)))
 (let (($x41 (=> $x110 $x158)))
 (not $x41))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (= false true)))
 (let (($x55 (= $x35 true)))
 (let (($x141 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x161 (not $x141)))
 (let (($x85 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x110 (not $x85)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x142 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x142 (_ bv1 32))))
 (let (($x104 (= $x141 $x139)))
 (let (($x155 (= ?x142 (_ bv0 32))))
 (let (($x149 (= $x85 $x155)))
 (let (($x150 (and (and (and $x149 $x104) $x110) $x161)))
 (let (($x65 (= $x150 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x10 (concat ?x25 (concat ?x54 (concat ?x11 ?x75)))))
 (let (($x76 (= input.dst.llvm-%l ?x10)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x131 (and $x9 $x76)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x84)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x17 $x138)))
 (let (($x164 (and $x148 $x69)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x143 $x164)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x70)))))))
 (let (($x87 (and (and (and $x20 true) $x58) $x131)))
 (let (($x14 (= $x87 true)))
 (let (($x15 (= $x14 true)))
 (let (($x47 (= $x15 true)))
 (let (($x62 (and $x47 $x65)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x154 (and $x48 $x62)))
 (let (($x64 (=> $x154 $x55)))
 (not $x64))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (= false true)))
 (let (($x55 (= $x35 true)))
 (let (($x141 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x161 (not $x141)))
 (let (($x85 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x110 (not $x85)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x142 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x142 (_ bv1 32))))
 (let (($x104 (= $x141 $x139)))
 (let (($x155 (= ?x142 (_ bv0 32))))
 (let (($x149 (= $x85 $x155)))
 (let (($x150 (and (and (and $x149 $x104) $x110) $x161)))
 (let (($x65 (= $x150 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x10 (concat ?x25 (concat ?x54 (concat ?x11 ?x75)))))
 (let (($x76 (= input.dst.llvm-%l ?x10)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x131 (and $x9 $x76)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x84)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x17 $x138)))
 (let (($x164 (and $x148 $x69)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x143 $x164)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x70)))))))
 (let (($x87 (and (and (and $x20 true) $x58) $x131)))
 (let (($x14 (= $x87 true)))
 (let (($x15 (= $x14 true)))
 (let (($x47 (= $x15 true)))
 (let (($x62 (and $x47 $x65)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x154 (and $x48 $x62)))
 (let (($x64 (=> $x154 $x55)))
 (not $x64))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x64 (= false true)))
 (let (($x96 (= $x64 true)))
 (let (($x161 (= false false)))
 (let (($x155 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x150 (=> $x155 $x161)))
 (let (($x149 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x141 (ite $x149 (_ bv0 32) (_ bv1 32))))
 (let (($x110 (bvuge ?x141 (_ bv1 32))))
 (let (($x158 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x41 (= $x158 $x110)))
 (let (($x139 (= ?x141 (_ bv0 32))))
 (let (($x104 (= $x155 $x139)))
 (let (($x62 (and (and $x104 $x41) $x150)))
 (let (($x154 (= $x62 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x10 (concat ?x75 (concat ?x12 ?x25)))))
 (let (($x131 (= input.dst.llvm-%l ?x76)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x87 (and $x9 $x131)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x69)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x18 $x148)))
 (let (($x58 (and $x84 $x164)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x28 $x58)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x224)))))))
 (let (($x47 (and (and (and $x17 true) $x68) $x87)))
 (let (($x86 (= $x47 true)))
 (let (($x85 (= $x86 true)))
 (let (($x88 (= $x85 true)))
 (let (($x35 (and $x88 $x154)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x55 (and $x48 $x35)))
 (let (($x82 (=> $x55 $x96)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x64 (= false true)))
 (let (($x96 (= $x64 true)))
 (let (($x161 (= false false)))
 (let (($x155 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x150 (=> $x155 $x161)))
 (let (($x149 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x141 (ite $x149 (_ bv0 32) (_ bv1 32))))
 (let (($x110 (bvuge ?x141 (_ bv1 32))))
 (let (($x158 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x41 (= $x158 $x110)))
 (let (($x139 (= ?x141 (_ bv0 32))))
 (let (($x104 (= $x155 $x139)))
 (let (($x62 (and (and $x104 $x41) $x150)))
 (let (($x154 (= $x62 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x10 (concat ?x75 (concat ?x12 ?x25)))))
 (let (($x131 (= input.dst.llvm-%l ?x76)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x87 (and $x9 $x131)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x69)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x18 $x148)))
 (let (($x58 (and $x84 $x164)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x28 $x58)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x224)))))))
 (let (($x47 (and (and (and $x17 true) $x68) $x87)))
 (let (($x86 (= $x47 true)))
 (let (($x85 (= $x86 true)))
 (let (($x88 (= $x85 true)))
 (let (($x35 (and $x88 $x154)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x55 (and $x48 $x35)))
 (let (($x82 (=> $x55 $x96)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (= false true)))
 (let (($x24 (= $x78 true)))
 (let (($x154 (= false false)))
 (let (($x139 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x35 (=> $x139 $x154)))
 (let (($x65 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x62 (not $x65)))
 (let (($x104 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x158 (ite $x104 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x158 (_ bv1 32))))
 (let (($x150 (= $x65 $x161)))
 (let (($x110 (= ?x158 (_ bv0 32))))
 (let (($x41 (= $x139 $x110)))
 (let (($x96 (and (and (and $x41 $x150) $x62) $x35)))
 (let (($x82 (= $x96 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x76 (concat ?x25 (concat ?x11 ?x10)))))
 (let (($x87 (= input.dst.llvm-%l ?x131)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x47 (and $x9 $x87)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x164)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x73 $x84)))
 (let (($x68 (and $x69 $x58)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x50 $x68)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x225)))))))
 (let (($x88 (and (and (and $x18 true) $x15) $x47)))
 (let (($x142 (= $x88 true)))
 (let (($x155 (= $x142 true)))
 (let (($x149 (= $x155 true)))
 (let (($x53 (and $x149 $x82)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x30 (and $x48 $x53)))
 (let (($x6 (=> $x30 $x24)))
 (not $x6)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (= false true)))
 (let (($x24 (= $x78 true)))
 (let (($x154 (= false false)))
 (let (($x139 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x35 (=> $x139 $x154)))
 (let (($x65 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x62 (not $x65)))
 (let (($x104 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x158 (ite $x104 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x158 (_ bv1 32))))
 (let (($x150 (= $x65 $x161)))
 (let (($x110 (= ?x158 (_ bv0 32))))
 (let (($x41 (= $x139 $x110)))
 (let (($x96 (and (and (and $x41 $x150) $x62) $x35)))
 (let (($x82 (= $x96 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x76 (concat ?x25 (concat ?x11 ?x10)))))
 (let (($x87 (= input.dst.llvm-%l ?x131)))
 (let (($x9 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x47 (and $x9 $x87)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x164)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x73 $x84)))
 (let (($x68 (and $x69 $x58)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x50 $x68)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x225)))))))
 (let (($x88 (and (and (and $x18 true) $x15) $x47)))
 (let (($x142 (= $x88 true)))
 (let (($x155 (= $x142 true)))
 (let (($x149 (= $x155 true)))
 (let (($x53 (and $x149 $x82)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x30 (and $x48 $x53)))
 (let (($x6 (=> $x30 $x24)))
 (not $x6)))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var610X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var610X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x99 (concat ?x140 (select input.dst.llvm-mem (bvadd input.ind-%var610X (_ bv4 32))))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var610X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var610X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x101 (concat ?x127 ?x99))))
 (let (($x228 (= ?x61 ?x61)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x41 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x41 (_ bv1 32))))
 (let (($x156 (=> $x55 $x228)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.ind-%var610X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var610X))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.ind-%var610X (_ bv2 32))) ?x79)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.ind-%var610X (_ bv3 32))) ?x94)))
 (let (($x21 (= ?x36 ?x36)))
 (let (($x80 (=> $x55 $x21)))
 (let (($x226 (= $x55 $x55)))
 (let (($x65 (= ?x41 (_ bv0 32))))
 (let (($x6 (= $x65 $x65)))
 (let (($x24 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x30 (= false false)))
 (let (($x78 (=> $x65 $x30)))
 (let (($x19 (and (and (and (and (and $x78 $x24) $x6) $x226) $x80) $x156)))
 (let (($x53 (not true)))
 (let (($x63 (or $x53 $x19)))
 (let (($x82 (= true true)))
 (let (($x92 (and $x82 $x63)))
 (let (($x81 (= $x92 true)))
 (let (($x150 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x62 (= $x150 $x55)))
 (let (($x158 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x161 (= $x158 $x65)))
 (let (($x64 (and $x161 $x62)))
 (let (($x154 (= $x64 true)))
 (let ((?x160 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x54 (concat ?x11 (concat ?x29 ?x160)))))
 (let (($x87 (= input.dst.llvm-%l ?x131)))
 (let (($x56 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x47 (and $x56 $x87)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x164)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x73 $x84)))
 (let (($x68 (and $x69 $x58)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x28 $x68)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x17)))))))
 (let (($x155 (and (and (and $x50 true) $x15) $x47)))
 (let (($x149 (= $x155 true)))
 (let (($x141 (= $x149 true)))
 (let (($x139 (= $x141 true)))
 (let (($x35 (and $x139 $x154)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x96 (and $x39 $x35)))
 (let (($x67 (=> $x96 $x81)))
 (not $x67)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var610X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var610X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x99 (concat ?x140 (select input.dst.llvm-mem (bvadd input.ind-%var610X (_ bv4 32))))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var610X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var610X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x101 (concat ?x127 ?x99))))
 (let (($x228 (= ?x61 ?x61)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x41 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x41 (_ bv1 32))))
 (let (($x156 (=> $x55 $x228)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.ind-%var610X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var610X))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.ind-%var610X (_ bv2 32))) ?x79)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.ind-%var610X (_ bv3 32))) ?x94)))
 (let (($x21 (= ?x36 ?x36)))
 (let (($x80 (=> $x55 $x21)))
 (let (($x226 (= $x55 $x55)))
 (let (($x65 (= ?x41 (_ bv0 32))))
 (let (($x6 (= $x65 $x65)))
 (let (($x24 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x30 (= false false)))
 (let (($x78 (=> $x65 $x30)))
 (let (($x19 (and (and (and (and (and $x78 $x24) $x6) $x226) $x80) $x156)))
 (let (($x53 (not true)))
 (let (($x63 (or $x53 $x19)))
 (let (($x82 (= true true)))
 (let (($x92 (and $x82 $x63)))
 (let (($x81 (= $x92 true)))
 (let (($x150 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x62 (= $x150 $x55)))
 (let (($x158 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x161 (= $x158 $x65)))
 (let (($x64 (and $x161 $x62)))
 (let (($x154 (= $x64 true)))
 (let ((?x160 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x54 (concat ?x11 (concat ?x29 ?x160)))))
 (let (($x87 (= input.dst.llvm-%l ?x131)))
 (let (($x56 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x47 (and $x56 $x87)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x164)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x73 $x84)))
 (let (($x68 (and $x69 $x58)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x28 $x68)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x17)))))))
 (let (($x155 (and (and (and $x50 true) $x15) $x47)))
 (let (($x149 (= $x155 true)))
 (let (($x141 (= $x149 true)))
 (let (($x139 (= $x141 true)))
 (let (($x35 (and $x139 $x154)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x96 (and $x39 $x35)))
 (let (($x67 (=> $x96 $x81)))
 (not $x67)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var626X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var626X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x127 (concat ?x66 (select input.dst.llvm-mem (bvadd input.ind-%var626X (_ bv4 32))))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var626X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var626X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x103 (concat ?x140 ?x127))))
 (let (($x228 (= ?x61 ?x61)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x150 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x150 (_ bv1 32))))
 (let (($x156 (=> $x154 $x228)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd input.ind-%var626X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var626X))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.ind-%var626X (_ bv2 32))) ?x129)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.ind-%var626X (_ bv3 32))) ?x79)))
 (let (($x80 (= ?x21 ?x21)))
 (let (($x45 (=> $x154 $x80)))
 (let (($x89 (= $x154 $x154)))
 (let (($x55 (= ?x150 (_ bv0 32))))
 (let (($x226 (= $x55 $x55)))
 (let (($x74 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x33 (= false false)))
 (let (($x6 (=> $x55 $x33)))
 (let (($x67 (and (and (and (and (and $x6 $x74) $x226) $x89) $x45) $x156)))
 (let (($x24 (not true)))
 (let (($x71 (or $x24 $x67)))
 (let (($x78 (= true true)))
 (let (($x32 (and $x78 $x71)))
 (let (($x48 (= $x32 true)))
 (let (($x64 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x35 (= $x64 $x154)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x62 (= $x65 $x55)))
 (let (($x96 (and $x62 $x35)))
 (let (($x82 (= $x96 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x131 (concat ?x160 (concat ?x42 ?x54)))))
 (let (($x47 (= input.dst.llvm-%l ?x87)))
 (let (($x56 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x155 (and $x56 $x47)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x58)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x138 $x69)))
 (let (($x15 (and $x164 $x68)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x20 $x15)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x18)))))))
 (let (($x139 (and (and (and $x73 true) $x142) $x155)))
 (let (($x104 (= $x139 true)))
 (let (($x158 (= $x104 true)))
 (let (($x110 (= $x158 true)))
 (let (($x53 (and $x110 $x82)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x30 (and $x39 $x53)))
 (let (($x59 (=> $x30 $x48)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var626X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var626X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x127 (concat ?x66 (select input.dst.llvm-mem (bvadd input.ind-%var626X (_ bv4 32))))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var626X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var626X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x61 (concat ?x103 (concat ?x140 ?x127))))
 (let (($x228 (= ?x61 ?x61)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x150 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x150 (_ bv1 32))))
 (let (($x156 (=> $x154 $x228)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd input.ind-%var626X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var626X))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.ind-%var626X (_ bv2 32))) ?x129)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.ind-%var626X (_ bv3 32))) ?x79)))
 (let (($x80 (= ?x21 ?x21)))
 (let (($x45 (=> $x154 $x80)))
 (let (($x89 (= $x154 $x154)))
 (let (($x55 (= ?x150 (_ bv0 32))))
 (let (($x226 (= $x55 $x55)))
 (let (($x74 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x33 (= false false)))
 (let (($x6 (=> $x55 $x33)))
 (let (($x67 (and (and (and (and (and $x6 $x74) $x226) $x89) $x45) $x156)))
 (let (($x24 (not true)))
 (let (($x71 (or $x24 $x67)))
 (let (($x78 (= true true)))
 (let (($x32 (and $x78 $x71)))
 (let (($x48 (= $x32 true)))
 (let (($x64 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x35 (= $x64 $x154)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x62 (= $x65 $x55)))
 (let (($x96 (and $x62 $x35)))
 (let (($x82 (= $x96 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x131 (concat ?x160 (concat ?x42 ?x54)))))
 (let (($x47 (= input.dst.llvm-%l ?x87)))
 (let (($x56 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x155 (and $x56 $x47)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x58)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x138 $x69)))
 (let (($x15 (and $x164 $x68)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x20 $x15)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x18)))))))
 (let (($x139 (and (and (and $x73 true) $x142) $x155)))
 (let (($x104 (= $x139 true)))
 (let (($x158 (= $x104 true)))
 (let (($x110 (= $x158 true)))
 (let (($x53 (and $x110 $x82)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x30 (and $x39 $x53)))
 (let (($x59 (=> $x30 $x48)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x160 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x25 (not $x160)))
 (let (($x26 (= $x25 false)))
 (let (($x75 (= $x26 true)))
 (let ((?x228 (ite $x160 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x228 (_ bv1 32))))
 (let (($x101 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x32 (= $x101 $x71)))
 (let (($x156 (= ?x228 (_ bv0 32))))
 (let (($x95 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x67 (= $x95 $x156)))
 (let (($x48 (and $x67 $x32)))
 (let (($x59 (= $x48 true)))
 (let (($x99 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x103 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x103 (_ bv1 32))))
 (let (($x102 (= $x101 $x66)))
 (let (($x227 (= ?x103 (_ bv0 32))))
 (let (($x140 (= $x95 $x227)))
 (let (($x127 (and $x140 $x102)))
 (let (($x100 (= $x127 true)))
 (let ((?x129 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x79 (= (_ bv0 3) ?x129)))
 (let (($x21 (= $x79 true)))
 (let (($x80 (= $x21 true)))
 (let ((?x78 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x63 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x78 (_ bv3 32)))))
 (let (($x90 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x226 $x63)))))))
 (let (($x24 (=> (and $x25 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x226 $x63)))))))
 (let (($x33 (= $x24 true)))
 (let (($x97 (= $x33 true)))
 (let (($x98 (= $x97 true)))
 (let (($x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x96 (= $x35 true)))
 (let (($x82 (= $x96 true)))
 (let (($x53 (= $x82 true)))
 (let (($x104 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x161 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x150 (=> $x161 (or false (or false (and true (or $x139 $x104)))))))
 (let (($x11 (=> (and $x25 $x161) (or false (or false (and true (or $x139 $x104)))))))
 (let (($x12 (= $x11 true)))
 (let (($x55 (= $x12 true)))
 (let (($x62 (= $x55 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x141)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x164 $x15)))
 (let (($x145 (and $x142 $x85)))
 (let (($x225 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x225 $x145)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x149)))))))
 (let (($x56 (and $x69 $x46)))
 (let (($x9 (= $x56 true)))
 (let (($x10 (= $x9 true)))
 (let (($x131 (= $x10 true)))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x22 (= $x39 true)))
 (let (($x224 (= $x22 true)))
 (let (($x76 (and $x224 $x131)))
 (let (($x64 (and $x76 $x62)))
 (let (($x30 (and $x64 $x53)))
 (let (($x91 (and $x30 $x98)))
 (let (($x45 (and $x91 $x80)))
 (let (($x61 (and $x45 $x100)))
 (let (($x57 (and $x61 $x59)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x16 (and $x72 $x57)))
 (let (($x157 (=> $x16 $x75)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x160 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x25 (not $x160)))
 (let (($x26 (= $x25 false)))
 (let (($x75 (= $x26 true)))
 (let ((?x228 (ite $x160 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x228 (_ bv1 32))))
 (let (($x101 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x32 (= $x101 $x71)))
 (let (($x156 (= ?x228 (_ bv0 32))))
 (let (($x95 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x67 (= $x95 $x156)))
 (let (($x48 (and $x67 $x32)))
 (let (($x59 (= $x48 true)))
 (let (($x99 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x103 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x103 (_ bv1 32))))
 (let (($x102 (= $x101 $x66)))
 (let (($x227 (= ?x103 (_ bv0 32))))
 (let (($x140 (= $x95 $x227)))
 (let (($x127 (and $x140 $x102)))
 (let (($x100 (= $x127 true)))
 (let ((?x129 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x79 (= (_ bv0 3) ?x129)))
 (let (($x21 (= $x79 true)))
 (let (($x80 (= $x21 true)))
 (let ((?x78 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x63 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x78 (_ bv3 32)))))
 (let (($x90 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x226 $x63)))))))
 (let (($x24 (=> (and $x25 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x226 $x63)))))))
 (let (($x33 (= $x24 true)))
 (let (($x97 (= $x33 true)))
 (let (($x98 (= $x97 true)))
 (let (($x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x96 (= $x35 true)))
 (let (($x82 (= $x96 true)))
 (let (($x53 (= $x82 true)))
 (let (($x104 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x161 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x150 (=> $x161 (or false (or false (and true (or $x139 $x104)))))))
 (let (($x11 (=> (and $x25 $x161) (or false (or false (and true (or $x139 $x104)))))))
 (let (($x12 (= $x11 true)))
 (let (($x55 (= $x12 true)))
 (let (($x62 (= $x55 true)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x141)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x164 $x15)))
 (let (($x145 (and $x142 $x85)))
 (let (($x225 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x225 $x145)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x149)))))))
 (let (($x56 (and $x69 $x46)))
 (let (($x9 (= $x56 true)))
 (let (($x10 (= $x9 true)))
 (let (($x131 (= $x10 true)))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x22 (= $x39 true)))
 (let (($x224 (= $x22 true)))
 (let (($x76 (and $x224 $x131)))
 (let (($x64 (and $x76 $x62)))
 (let (($x30 (and $x64 $x53)))
 (let (($x91 (and $x30 $x98)))
 (let (($x45 (and $x91 $x80)))
 (let (($x61 (and $x45 $x100)))
 (let (($x57 (and $x61 $x59)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x16 (and $x72 $x57)))
 (let (($x157 (=> $x16 $x75)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b11001000000000000000000000001000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000110000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000110000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000110000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1c007ffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1c007fff)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x3fff8000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1c007ffc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv16384 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x42 (not $x25)))
 (let (($x114 (= $x42 false)))
 (let (($x162 (= $x114 true)))
 (let ((?x59 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x59 (_ bv1 32))))
 (let (($x102 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x75 (= $x102 $x26)))
 (let (($x57 (= ?x59 (_ bv0 32))))
 (let (($x99 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x16 (= $x99 $x57)))
 (let (($x86 (and (and (and (not $x99) (not $x102)) $x16) $x75)))
 (let (($x54 (= $x86 true)))
 (let (($x228 (not $x102)))
 (let (($x61 (not $x99)))
 (let (($x227 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x140 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x127 (bvuge ?x140 (_ bv1 32))))
 (let (($x100 (= $x102 $x127)))
 (let (($x101 (= ?x140 (_ bv0 32))))
 (let (($x66 (= $x99 $x101)))
 (let (($x71 (and (and (and $x66 $x100) $x61) $x228)))
 (let (($x32 (= $x71 true)))
 (let ((?x21 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x80 (= (_ bv0 3) ?x21)))
 (let (($x45 (= $x80 true)))
 (let (($x81 (= $x45 true)))
 (let ((?x74 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x60 (bvugt ?x74 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x74 (_ bv3 32)))))
 (let (($x98 (=> (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x60)))))))
 (let (($x36 (=> (and $x42 (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x92 $x60)))))))
 (let (($x19 (= $x36 true)))
 (let (($x91 (= $x19 true)))
 (let (($x229 (= $x91 true)))
 (let (($x82 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x82 true)))
 (let (($x30 (= $x53 true)))
 (let (($x78 (= $x30 true)))
 (let (($x41 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x55 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x62 (=> $x55 (or false (or false (and true (or $x110 $x41)))))))
 (let (($x161 (=> (and $x42 $x55) (or false (or false (and true (or $x110 $x41)))))))
 (let (($x155 (= $x161 true)))
 (let (($x64 (= $x155 true)))
 (let (($x154 (= $x64 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x85)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x58 $x142)))
 (let (($x46 (and $x141 $x145)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x20 $x46)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x164 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x8)))))))
 (let (($x9 (and $x164 $x56)))
 (let (($x10 (= $x9 true)))
 (let (($x131 (= $x10 true)))
 (let (($x76 (= $x131 true)))
 (let (($x73 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x88 (= $x73 true)))
 (let (($x22 (= $x88 true)))
 (let (($x29 (and $x22 $x76)))
 (let (($x35 (and $x29 $x154)))
 (let (($x6 (and $x35 $x78)))
 (let (($x129 (and $x6 $x229)))
 (let (($x95 (and $x129 $x81)))
 (let (($x48 (and $x95 $x32)))
 (let (($x165 (and $x48 $x54)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x107 (and $x146 $x165)))
 (let (($x109 (=> $x107 $x162)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x42 (not $x25)))
 (let (($x114 (= $x42 false)))
 (let (($x162 (= $x114 true)))
 (let ((?x59 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x59 (_ bv1 32))))
 (let (($x102 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x75 (= $x102 $x26)))
 (let (($x57 (= ?x59 (_ bv0 32))))
 (let (($x99 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x16 (= $x99 $x57)))
 (let (($x86 (and (and (and (not $x99) (not $x102)) $x16) $x75)))
 (let (($x54 (= $x86 true)))
 (let (($x228 (not $x102)))
 (let (($x61 (not $x99)))
 (let (($x227 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x140 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x127 (bvuge ?x140 (_ bv1 32))))
 (let (($x100 (= $x102 $x127)))
 (let (($x101 (= ?x140 (_ bv0 32))))
 (let (($x66 (= $x99 $x101)))
 (let (($x71 (and (and (and $x66 $x100) $x61) $x228)))
 (let (($x32 (= $x71 true)))
 (let ((?x21 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x80 (= (_ bv0 3) ?x21)))
 (let (($x45 (= $x80 true)))
 (let (($x81 (= $x45 true)))
 (let ((?x74 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x60 (bvugt ?x74 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x74 (_ bv3 32)))))
 (let (($x98 (=> (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x60)))))))
 (let (($x36 (=> (and $x42 (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x92 $x60)))))))
 (let (($x19 (= $x36 true)))
 (let (($x91 (= $x19 true)))
 (let (($x229 (= $x91 true)))
 (let (($x82 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x82 true)))
 (let (($x30 (= $x53 true)))
 (let (($x78 (= $x30 true)))
 (let (($x41 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x55 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x62 (=> $x55 (or false (or false (and true (or $x110 $x41)))))))
 (let (($x161 (=> (and $x42 $x55) (or false (or false (and true (or $x110 $x41)))))))
 (let (($x155 (= $x161 true)))
 (let (($x64 (= $x155 true)))
 (let (($x154 (= $x64 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x85)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x58 $x142)))
 (let (($x46 (and $x141 $x145)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x20 $x46)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x164 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x8)))))))
 (let (($x9 (and $x164 $x56)))
 (let (($x10 (= $x9 true)))
 (let (($x131 (= $x10 true)))
 (let (($x76 (= $x131 true)))
 (let (($x73 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x88 (= $x73 true)))
 (let (($x22 (= $x88 true)))
 (let (($x29 (and $x22 $x76)))
 (let (($x35 (and $x29 $x154)))
 (let (($x6 (and $x35 $x78)))
 (let (($x129 (and $x6 $x229)))
 (let (($x95 (and $x129 $x81)))
 (let (($x48 (and $x95 $x32)))
 (let (($x165 (and $x48 $x54)))
 (let (($x146 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x107 (and $x146 $x165)))
 (let (($x109 (=> $x107 $x162)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x87 (not $x42)))
 (let (($x114 (= $x87 false)))
 (let (($x162 (= $x114 true)))
 (let ((?x59 (ite $x42 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x59 (_ bv1 32))))
 (let (($x100 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x26 (= $x100 $x105)))
 (let (($x57 (= ?x59 (_ bv0 32))))
 (let (($x227 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x16 (= $x227 $x57)))
 (let (($x67 (= false false)))
 (let (($x228 (=> $x227 $x67)))
 (let (($x86 (and (and $x228 $x16) $x26)))
 (let (($x54 (= $x86 true)))
 (let (($x101 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x66 (ite $x101 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x66 (_ bv1 32))))
 (let (($x61 (= $x100 $x156)))
 (let (($x102 (= ?x66 (_ bv0 32))))
 (let (($x127 (= $x227 $x102)))
 (let (($x32 (and (and $x127 $x61) $x228)))
 (let (($x48 (= $x32 true)))
 (let ((?x45 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x81 (= (_ bv0 3) ?x45)))
 (let (($x95 (= $x81 true)))
 (let (($x93 (= $x95 true)))
 (let ((?x63 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x24 (bvugt ?x63 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x63 (_ bv3 32)))))
 (let (($x229 (=> (bvule ?x63 (bvsub (bvadd ?x63 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x24)))))))
 (let (($x97 (=> (and $x87 (bvule ?x63 (bvsub (bvadd ?x63 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x90 $x24)))))))
 (let (($x89 (= $x97 true)))
 (let (($x129 (= $x89 true)))
 (let (($x79 (= $x129 true)))
 (let (($x30 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x30 true)))
 (let (($x6 (= $x78 true)))
 (let (($x74 (= $x6 true)))
 (let (($x11 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x64 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x154 (=> $x64 (or false (or false (and true (or $x150 $x11)))))))
 (let (($x55 (=> (and $x87 $x64) (or false (or false (and true (or $x150 $x11)))))))
 (let (($x158 (= $x55 true)))
 (let (($x35 (= $x158 true)))
 (let (($x96 (= $x35 true)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x145)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x68 $x141)))
 (let (($x56 (and $x85 $x46)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x39 $x56)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x148)))))))
 (let (($x10 (and $x58 $x9)))
 (let (($x131 (= $x10 true)))
 (let (($x76 (= $x131 true)))
 (let (($x29 (= $x76 true)))
 (let (($x146 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x73 (= $x146 true)))
 (let (($x84 (= $x73 true)))
 (let (($x160 (and $x84 $x29)))
 (let (($x82 (and $x160 $x96)))
 (let (($x226 (and $x82 $x74)))
 (let (($x21 (and $x226 $x79)))
 (let (($x99 (and $x21 $x93)))
 (let (($x157 (and $x99 $x48)))
 (let (($x165 (and $x157 $x54)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x107 (and $x27 $x165)))
 (let (($x109 (=> $x107 $x162)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x87 (not $x42)))
 (let (($x114 (= $x87 false)))
 (let (($x162 (= $x114 true)))
 (let ((?x59 (ite $x42 (_ bv0 32) (_ bv1 32))))
 (let (($x105 (bvuge ?x59 (_ bv1 32))))
 (let (($x100 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x26 (= $x100 $x105)))
 (let (($x57 (= ?x59 (_ bv0 32))))
 (let (($x227 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x16 (= $x227 $x57)))
 (let (($x67 (= false false)))
 (let (($x228 (=> $x227 $x67)))
 (let (($x86 (and (and $x228 $x16) $x26)))
 (let (($x54 (= $x86 true)))
 (let (($x101 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x66 (ite $x101 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x66 (_ bv1 32))))
 (let (($x61 (= $x100 $x156)))
 (let (($x102 (= ?x66 (_ bv0 32))))
 (let (($x127 (= $x227 $x102)))
 (let (($x32 (and (and $x127 $x61) $x228)))
 (let (($x48 (= $x32 true)))
 (let ((?x45 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x81 (= (_ bv0 3) ?x45)))
 (let (($x95 (= $x81 true)))
 (let (($x93 (= $x95 true)))
 (let ((?x63 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x24 (bvugt ?x63 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x63 (_ bv3 32)))))
 (let (($x229 (=> (bvule ?x63 (bvsub (bvadd ?x63 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x24)))))))
 (let (($x97 (=> (and $x87 (bvule ?x63 (bvsub (bvadd ?x63 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x90 $x24)))))))
 (let (($x89 (= $x97 true)))
 (let (($x129 (= $x89 true)))
 (let (($x79 (= $x129 true)))
 (let (($x30 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x78 (= $x30 true)))
 (let (($x6 (= $x78 true)))
 (let (($x74 (= $x6 true)))
 (let (($x11 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x64 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x154 (=> $x64 (or false (or false (and true (or $x150 $x11)))))))
 (let (($x55 (=> (and $x87 $x64) (or false (or false (and true (or $x150 $x11)))))))
 (let (($x158 (= $x55 true)))
 (let (($x35 (= $x158 true)))
 (let (($x96 (= $x35 true)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x145)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x68 $x141)))
 (let (($x56 (and $x85 $x46)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x39 $x56)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x148)))))))
 (let (($x10 (and $x58 $x9)))
 (let (($x131 (= $x10 true)))
 (let (($x76 (= $x131 true)))
 (let (($x29 (= $x76 true)))
 (let (($x146 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x73 (= $x146 true)))
 (let (($x84 (= $x73 true)))
 (let (($x160 (and $x84 $x29)))
 (let (($x82 (and $x160 $x96)))
 (let (($x226 (and $x82 $x74)))
 (let (($x21 (and $x226 $x79)))
 (let (($x99 (and $x21 $x93)))
 (let (($x157 (and $x99 $x48)))
 (let (($x165 (and $x157 $x54)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x107 (and $x27 $x165)))
 (let (($x109 (=> $x107 $x162)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b11001000000000000000000000001000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000110000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000110000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000110000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1c007ffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1c007fff)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x3fff8000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1c007ffc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv131072 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x87 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x139 (not $x87)))
 (let (($x104 (= $x139 false)))
 (let (($x149 (= $x104 true)))
 (let ((?x105 (ite $x87 (_ bv0 32) (_ bv1 32))))
 (let (($x54 (bvuge ?x105 (_ bv1 32))))
 (let (($x61 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x165 (= $x61 $x54)))
 (let (($x26 (= ?x105 (_ bv0 32))))
 (let (($x101 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x86 (= $x101 $x26)))
 (let (($x162 (and (and (and (not $x61) (=> $x101 (= false false))) $x86) $x165)))
 (let (($x109 (= $x162 true)))
 (let (($x32 (= false false)))
 (let (($x48 (=> $x101 $x32)))
 (let (($x228 (not $x61)))
 (let (($x102 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x127 (ite $x102 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x127 (_ bv1 32))))
 (let (($x67 (= $x61 $x71)))
 (let (($x100 (= ?x127 (_ bv0 32))))
 (let (($x156 (= $x101 $x100)))
 (let (($x57 (and (and (and $x156 $x67) $x228) $x48)))
 (let (($x16 (= $x57 true)))
 (let ((?x95 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x93 (= (_ bv0 3) ?x95)))
 (let (($x99 (= $x93 true)))
 (let (($x103 (= $x99 true)))
 (let ((?x60 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x36 (bvugt ?x60 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x60 (_ bv3 32)))))
 (let (($x79 (=> (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x36)))))))
 (let (($x91 (=> (and $x139 (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x98 $x36)))))))
 (let (($x94 (= $x91 true)))
 (let (($x21 (= $x94 true)))
 (let (($x80 (= $x21 true)))
 (let (($x6 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x74 (= $x6 true)))
 (let (($x226 (= $x74 true)))
 (let (($x63 (= $x226 true)))
 (let (($x161 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x96 (=> $x35 (or false (or false (and true (or $x62 $x161)))))))
 (let (($x64 (=> (and $x139 $x35) (or false (or false (and true (or $x62 $x161)))))))
 (let (($x65 (= $x64 true)))
 (let (($x82 (= $x65 true)))
 (let (($x53 (= $x82 true)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x46)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x15 $x85)))
 (let (($x9 (and $x145 $x56)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x69 $x9)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x28)))))))
 (let (($x131 (and $x68 $x10)))
 (let (($x76 (= $x131 true)))
 (let (($x29 (= $x76 true)))
 (let (($x160 (= $x29 true)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x17 (= $x27 true)))
 (let (($x73 (= $x17 true)))
 (let (($x25 (and $x73 $x160)))
 (let (($x30 (and $x25 $x53)))
 (let (($x92 (and $x30 $x63)))
 (let (($x45 (and $x92 $x80)))
 (let (($x227 (and $x45 $x103)))
 (let (($x75 (and $x227 $x16)))
 (let (($x120 (and $x75 $x109)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x14 (and $x72 $x120)))
 (let (($x47 (=> $x14 $x149)))
 (not $x47)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x87 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x139 (not $x87)))
 (let (($x104 (= $x139 false)))
 (let (($x149 (= $x104 true)))
 (let ((?x105 (ite $x87 (_ bv0 32) (_ bv1 32))))
 (let (($x54 (bvuge ?x105 (_ bv1 32))))
 (let (($x61 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x165 (= $x61 $x54)))
 (let (($x26 (= ?x105 (_ bv0 32))))
 (let (($x101 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x86 (= $x101 $x26)))
 (let (($x162 (and (and (and (not $x61) (=> $x101 (= false false))) $x86) $x165)))
 (let (($x109 (= $x162 true)))
 (let (($x32 (= false false)))
 (let (($x48 (=> $x101 $x32)))
 (let (($x228 (not $x61)))
 (let (($x102 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x127 (ite $x102 (_ bv0 32) (_ bv1 32))))
 (let (($x71 (bvuge ?x127 (_ bv1 32))))
 (let (($x67 (= $x61 $x71)))
 (let (($x100 (= ?x127 (_ bv0 32))))
 (let (($x156 (= $x101 $x100)))
 (let (($x57 (and (and (and $x156 $x67) $x228) $x48)))
 (let (($x16 (= $x57 true)))
 (let ((?x95 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x93 (= (_ bv0 3) ?x95)))
 (let (($x99 (= $x93 true)))
 (let (($x103 (= $x99 true)))
 (let ((?x60 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x36 (bvugt ?x60 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x60 (_ bv3 32)))))
 (let (($x79 (=> (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x36)))))))
 (let (($x91 (=> (and $x139 (bvule ?x60 (bvsub (bvadd ?x60 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x98 $x36)))))))
 (let (($x94 (= $x91 true)))
 (let (($x21 (= $x94 true)))
 (let (($x80 (= $x21 true)))
 (let (($x6 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x74 (= $x6 true)))
 (let (($x226 (= $x74 true)))
 (let (($x63 (= $x226 true)))
 (let (($x161 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x96 (=> $x35 (or false (or false (and true (or $x62 $x161)))))))
 (let (($x64 (=> (and $x139 $x35) (or false (or false (and true (or $x62 $x161)))))))
 (let (($x65 (= $x64 true)))
 (let (($x82 (= $x65 true)))
 (let (($x53 (= $x82 true)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x46)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x15 $x85)))
 (let (($x9 (and $x145 $x56)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x69 $x9)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x28)))))))
 (let (($x131 (and $x68 $x10)))
 (let (($x76 (= $x131 true)))
 (let (($x29 (= $x76 true)))
 (let (($x160 (= $x29 true)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x17 (= $x27 true)))
 (let (($x73 (= $x17 true)))
 (let (($x25 (and $x73 $x160)))
 (let (($x30 (and $x25 $x53)))
 (let (($x92 (and $x30 $x63)))
 (let (($x45 (and $x92 $x80)))
 (let (($x227 (and $x45 $x103)))
 (let (($x75 (and $x227 $x16)))
 (let (($x120 (and $x75 $x109)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x14 (and $x72 $x120)))
 (let (($x47 (=> $x14 $x149)))
 (not $x47)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x139 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x110 (not $x139)))
 (let (($x269 (= $x110 false)))
 (let (($x270 (= $x269 true)))
 (let ((?x62 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x200))))
 (let ((?x242 (bvadd ?x212 (_ bv4 32))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x246))))
 (let (($x253 (= (_ bv0 32) ?x250)))
 (let ((?x254 (ite $x253 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x254 (_ bv1 32))))
 (let (($x170 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x144 (= $x170 $x258)))
 (let (($x153 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x67 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x231 (and $x67 $x153)))
 (let (($x40 (=> $x231 $x144)))
 (let (($x255 (= ?x254 (_ bv0 32))))
 (let (($x166 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x256 (= $x166 $x255)))
 (let (($x257 (=> $x231 $x256)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x217))))
 (let (($x223 (= input.spec-%var-l-1.2.1.2.0 ?x222)))
 (let (($x241 (=> $x231 $x223)))
 (let (($x213 (= (_ bv0 32) ?x212)))
 (let ((?x209 (ite $x213 (_ bv0 32) (_ bv1 32))))
 (let (($x205 (bvuge ?x209 (_ bv1 32))))
 (let (($x208 (= $x153 $x205)))
 (let (($x211 (=> $x67 $x208)))
 (let (($x210 (= ?x209 (_ bv0 32))))
 (let (($x149 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x206 (= $x149 $x210)))
 (let (($x207 (=> $x67 $x206)))
 (let ((?x187 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x155 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x191 (concat (select input.dst.llvm-mem ?x155) (concat ?x189 (concat ?x196 ?x187)))))
 (let (($x194 (= input.spec-%var-l-1.2.0 ?x191)))
 (let (($x197 (=> $x67 $x194)))
 (let ((?x183 (ite $x139 (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge ?x183 (_ bv1 32))))
 (let (($x186 (= $x67 $x237)))
 (let (($x184 (= ?x183 (_ bv0 32))))
 (let (($x102 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x185 (= $x102 $x184)))
 (let (($x59 (= false false)))
 (let (($x117 (and $x67 $x149)))
 (let (($x163 (=> $x117 $x59)))
 (let (($x32 (=> $x102 $x59)))
 (let (($x262 (and (and (and (and (and (and $x32 $x163) $x185) $x186) $x197) $x207) $x211)))
 (let (($x265 (and (and (and $x262 $x241) $x257) $x40)))
 (let (($x266 (= $x265 true)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x106 (concat ?x41 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x115 (concat ?x132 (concat ?x108 ?x106))))
 (let ((?x136 (bvadd ?x115 (_ bv4 32))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem ?x136))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv2 32))) ?x167))))
 (let (($x172 (= (_ bv0 32) ?x77)))
 (let ((?x173 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x23 (bvuge ?x173 (_ bv1 32))))
 (let (($x171 (= $x170 $x23)))
 (let (($x44 (=> $x231 $x171)))
 (let (($x52 (= ?x173 (_ bv0 32))))
 (let (($x147 (= $x166 $x52)))
 (let (($x37 (=> $x231 $x147)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x232))))
 (let (($x34 (= input.spec-%var-l-1.2.1.2.0 ?x13)))
 (let (($x83 (=> $x231 $x34)))
 (let (($x113 (= (_ bv0 32) ?x115)))
 (let ((?x116 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (bvuge ?x116 (_ bv1 32))))
 (let (($x118 (= $x153 $x124)))
 (let (($x112 (=> $x67 $x118)))
 (let (($x130 (= ?x116 (_ bv0 32))))
 (let (($x151 (= $x149 $x130)))
 (let (($x121 (=> $x67 $x151)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x105)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x54)))
 (let (($x120 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x14 (=> $x67 $x120)))
 (let (($x100 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x156 (ite $x100 (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge ?x156 (_ bv1 32))))
 (let (($x228 (= $x67 $x157)))
 (let (($x61 (= ?x156 (_ bv0 32))))
 (let (($x71 (= $x102 $x61)))
 (let (($x179 (and (and (and (and (and (and $x71 $x228) $x32) $x14) $x121) $x163) $x112)))
 (let (($x181 (and (and (and $x179 $x83) $x37) $x44)))
 (let (($x236 (= $x181 true)))
 (let ((?x99 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x103 (= (_ bv0 3) ?x99)))
 (let (($x227 (= $x103 true)))
 (let (($x140 (= $x227 true)))
 (let ((?x24 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x97 (bvugt ?x24 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x24 (_ bv3 32)))))
 (let (($x80 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x97)))))))
 (let (($x129 (=> (and $x110 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x229 $x97)))))))
 (let (($x33 (= $x129 true)))
 (let (($x45 (= $x33 true)))
 (let (($x81 (= $x45 true)))
 (let (($x226 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x63 (= $x226 true)))
 (let (($x92 (= $x63 true)))
 (let (($x60 (= $x92 true)))
 (let (($x55 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x53 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x62 (_ bv1 32))) (or false (or false (and true (or $x154 $x55)))))))
 (let (($x35 (=> (and $x110 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x62 (_ bv1 32)))) (or false (or false (and true (or $x154 $x55)))))))
 (let (($x12 (= $x35 true)))
 (let (($x30 (= $x12 true)))
 (let (($x78 (= $x30 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x56)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x68 $x15)))
 (let (($x10 (and $x142 $x9)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x39 $x10)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x164)))))))
 (let (($x76 (and $x50 $x131)))
 (let (($x29 (= $x76 true)))
 (let (($x160 (= $x29 true)))
 (let (($x25 (= $x160 true)))
 (let (($x138 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (= $x138 true)))
 (let (($x27 (= $x72 true)))
 (let (($x42 (and $x27 $x25)))
 (let (($x6 (and $x42 $x78)))
 (let (($x90 (and $x6 $x60)))
 (let (($x95 (and $x90 $x81)))
 (let (($x101 (and $x95 $x140)))
 (let (($x182 (and $x101 $x236)))
 (let (($x267 (and $x182 $x266)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x268 (and $x70 $x267)))
 (let (($x271 (=> $x268 $x270)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x139 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x110 (not $x139)))
 (let (($x269 (= $x110 false)))
 (let (($x270 (= $x269 true)))
 (let ((?x62 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x200))))
 (let ((?x242 (bvadd ?x212 (_ bv4 32))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x246))))
 (let (($x253 (= (_ bv0 32) ?x250)))
 (let ((?x254 (ite $x253 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x254 (_ bv1 32))))
 (let (($x170 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x144 (= $x170 $x258)))
 (let (($x153 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x67 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x231 (and $x67 $x153)))
 (let (($x40 (=> $x231 $x144)))
 (let (($x255 (= ?x254 (_ bv0 32))))
 (let (($x166 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x256 (= $x166 $x255)))
 (let (($x257 (=> $x231 $x256)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x217))))
 (let (($x223 (= input.spec-%var-l-1.2.1.2.0 ?x222)))
 (let (($x241 (=> $x231 $x223)))
 (let (($x213 (= (_ bv0 32) ?x212)))
 (let ((?x209 (ite $x213 (_ bv0 32) (_ bv1 32))))
 (let (($x205 (bvuge ?x209 (_ bv1 32))))
 (let (($x208 (= $x153 $x205)))
 (let (($x211 (=> $x67 $x208)))
 (let (($x210 (= ?x209 (_ bv0 32))))
 (let (($x149 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x206 (= $x149 $x210)))
 (let (($x207 (=> $x67 $x206)))
 (let ((?x187 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x155 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x191 (concat (select input.dst.llvm-mem ?x155) (concat ?x189 (concat ?x196 ?x187)))))
 (let (($x194 (= input.spec-%var-l-1.2.0 ?x191)))
 (let (($x197 (=> $x67 $x194)))
 (let ((?x183 (ite $x139 (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge ?x183 (_ bv1 32))))
 (let (($x186 (= $x67 $x237)))
 (let (($x184 (= ?x183 (_ bv0 32))))
 (let (($x102 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x185 (= $x102 $x184)))
 (let (($x59 (= false false)))
 (let (($x117 (and $x67 $x149)))
 (let (($x163 (=> $x117 $x59)))
 (let (($x32 (=> $x102 $x59)))
 (let (($x262 (and (and (and (and (and (and $x32 $x163) $x185) $x186) $x197) $x207) $x211)))
 (let (($x265 (and (and (and $x262 $x241) $x257) $x40)))
 (let (($x266 (= $x265 true)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x106 (concat ?x41 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x115 (concat ?x132 (concat ?x108 ?x106))))
 (let ((?x136 (bvadd ?x115 (_ bv4 32))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv1 32))) (select input.dst.llvm-mem ?x136))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x136 (_ bv2 32))) ?x167))))
 (let (($x172 (= (_ bv0 32) ?x77)))
 (let ((?x173 (ite $x172 (_ bv0 32) (_ bv1 32))))
 (let (($x23 (bvuge ?x173 (_ bv1 32))))
 (let (($x171 (= $x170 $x23)))
 (let (($x44 (=> $x231 $x171)))
 (let (($x52 (= ?x173 (_ bv0 32))))
 (let (($x147 (= $x166 $x52)))
 (let (($x37 (=> $x231 $x147)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x232))))
 (let (($x34 (= input.spec-%var-l-1.2.1.2.0 ?x13)))
 (let (($x83 (=> $x231 $x34)))
 (let (($x113 (= (_ bv0 32) ?x115)))
 (let ((?x116 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (bvuge ?x116 (_ bv1 32))))
 (let (($x118 (= $x153 $x124)))
 (let (($x112 (=> $x67 $x118)))
 (let (($x130 (= ?x116 (_ bv0 32))))
 (let (($x151 (= $x149 $x130)))
 (let (($x121 (=> $x67 $x151)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x105)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x54)))
 (let (($x120 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x14 (=> $x67 $x120)))
 (let (($x100 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x156 (ite $x100 (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge ?x156 (_ bv1 32))))
 (let (($x228 (= $x67 $x157)))
 (let (($x61 (= ?x156 (_ bv0 32))))
 (let (($x71 (= $x102 $x61)))
 (let (($x179 (and (and (and (and (and (and $x71 $x228) $x32) $x14) $x121) $x163) $x112)))
 (let (($x181 (and (and (and $x179 $x83) $x37) $x44)))
 (let (($x236 (= $x181 true)))
 (let ((?x99 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x103 (= (_ bv0 3) ?x99)))
 (let (($x227 (= $x103 true)))
 (let (($x140 (= $x227 true)))
 (let ((?x24 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x97 (bvugt ?x24 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x24 (_ bv3 32)))))
 (let (($x80 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x97)))))))
 (let (($x129 (=> (and $x110 (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x229 $x97)))))))
 (let (($x33 (= $x129 true)))
 (let (($x45 (= $x33 true)))
 (let (($x81 (= $x45 true)))
 (let (($x226 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x63 (= $x226 true)))
 (let (($x92 (= $x63 true)))
 (let (($x60 (= $x92 true)))
 (let (($x55 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x53 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x62 (_ bv1 32))) (or false (or false (and true (or $x154 $x55)))))))
 (let (($x35 (=> (and $x110 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x62 (_ bv1 32)))) (or false (or false (and true (or $x154 $x55)))))))
 (let (($x12 (= $x35 true)))
 (let (($x30 (= $x12 true)))
 (let (($x78 (= $x30 true)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x56)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x68 $x15)))
 (let (($x10 (and $x142 $x9)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x39 $x10)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x164)))))))
 (let (($x76 (and $x50 $x131)))
 (let (($x29 (= $x76 true)))
 (let (($x160 (= $x29 true)))
 (let (($x25 (= $x160 true)))
 (let (($x138 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (= $x138 true)))
 (let (($x27 (= $x72 true)))
 (let (($x42 (and $x27 $x25)))
 (let (($x6 (and $x42 $x78)))
 (let (($x90 (and $x6 $x60)))
 (let (($x95 (and $x90 $x81)))
 (let (($x101 (and $x95 $x140)))
 (let (($x182 (and $x101 $x236)))
 (let (($x267 (and $x182 $x266)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x268 (and $x70 $x267)))
 (let (($x271 (=> $x268 $x270)))
 (not $x271))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10011001010001001000100100110000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00010100101000010010000000011011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00010100101000010010000000011000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00010100101000010010000000011000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_50)
(function @fun_50
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0ae9685c)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x30000008)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x1a1a1a1a)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x30000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x30000001
                                #x1a)
                         #x3000000a
                         #x1a)
                  #x3000000b
                  #x98)))
(let ((a!2 (store (store (store (store a!1 #x1a121a1f #x1a) #x30000006 #x12)
                         #x30000004
                         #x1a)
                  #x30000007
                  #x1a)))
(let ((a!3 (store (store (store (store a!2 #x1a121a1d #x1a) #x30000008 #x1a)
                         #x3000000b
                         #x98)
                  #x3000000c
                  #x07)))
(let ((a!4 (store (store (store (store a!3 #x30000003 #x98) #x3000000c #x07)
                         #x3000000f
                         #x30)
                  #x30000005
                  #x1a)))
(let ((a!5 (store (store (store (store a!4 #x30000009 #x1a) #x30000008 #x1a)
                         #x1a121a20
                         #x94)
                  #x30000002
                  #x1a)))
(let ((a!6 (store (store (store (store a!5 #x1a121a1a #x1a) #x30000009 #x1a)
                         #x30000000
                         #x1a)
                  #x1a121a1c
                  #x1a)))
  (store (store (store (store a!6 #x1a121a1b #x1a) #x30000007 #x1a)
                #x1a121a1e
                #x1a)
         #x3000000a
         #x1a))))))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x981a1a1a)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0ae9685c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0ae9685f)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x131 (not $x10)))
 (let (($x277 (= $x131 false)))
 (let (($x278 (= $x277 true)))
 (let ((?x154 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem ?x154))))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv2 32))) ?x200))))
 (let ((?x249 (bvadd ?x206 (_ bv4 32))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x244))))
 (let (($x254 (= (_ bv0 32) ?x253)))
 (let ((?x255 (ite $x254 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x255 (_ bv1 32))))
 (let (($x172 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x144 (= $x172 $x258)))
 (let (($x117 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x124 (and $x228 $x117)))
 (let (($x40 (=> $x124 $x144)))
 (let (($x256 (= ?x255 (_ bv0 32))))
 (let (($x13 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x257 (= $x13 $x256)))
 (let (($x264 (=> $x124 $x257)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x216))))
 (let (($x263 (= input.spec-%var-l-1.2.1.2.0 ?x241)))
 (let (($x242 (=> $x124 $x263)))
 (let (($x207 (= (_ bv0 32) ?x206)))
 (let ((?x261 (ite $x207 (_ bv0 32) (_ bv1 32))))
 (let (($x262 (bvuge ?x261 (_ bv1 32))))
 (let (($x220 (= $x117 $x262)))
 (let (($x221 (=> $x228 $x220)))
 (let (($x205 (= ?x261 (_ bv0 32))))
 (let (($x104 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x208 (= $x104 $x205)))
 (let (($x211 (=> $x228 $x208)))
 (let ((?x187 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x158 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x204 (concat (select input.dst.llvm-mem ?x158) (concat ?x197 (concat ?x190 ?x187)))))
 (let (($x201 (= input.spec-%var-l-1.2.0 ?x204)))
 (let (($x202 (=> $x228 $x201)))
 (let ((?x188 (ite $x10 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x188 (_ bv1 32))))
 (let (($x196 (= $x228 $x195)))
 (let (($x193 (= ?x188 (_ bv0 32))))
 (let (($x100 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x189 (= $x100 $x193)))
 (let (($x170 (and $x124 $x13)))
 (let (($x23 (not $x170)))
 (let (($x37 (and $x124 $x172)))
 (let (($x180 (not $x37)))
 (let (($x32 (= false false)))
 (let (($x121 (and $x228 $x104)))
 (let (($x177 (=> $x121 $x32)))
 (let (($x175 (=> $x100 $x32)))
 (let (($x270 (and (and (and (and (and (and $x175 $x177) $x180) $x23) $x189) $x196) $x202)))
 (let (($x273 (and (and (and (and (and $x270 $x211) $x221) $x242) $x264) $x40)))
 (let (($x274 (= $x273 true)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x111 (concat ?x132 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x122 (concat ?x106 (concat ?x225 ?x111))))
 (let ((?x34 (bvadd ?x122 (_ bv4 32))))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x166))))
 (let (($x31 (= (_ bv0 32) ?x137)))
 (let ((?x126 (ite $x31 (_ bv0 32) (_ bv1 32))))
 (let (($x173 (bvuge ?x126 (_ bv1 32))))
 (let (($x52 (= $x172 $x173)))
 (let (($x147 (=> $x124 $x52)))
 (let (($x167 (= ?x126 (_ bv0 32))))
 (let (($x234 (= $x13 $x167)))
 (let (($x77 (=> $x124 $x234)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem ?x122))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv2 32))) ?x135))))
 (let (($x128 (= input.spec-%var-l-1.2.1.2.0 ?x123)))
 (let (($x232 (=> $x124 $x128)))
 (let (($x115 (= (_ bv0 32) ?x122)))
 (let ((?x113 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x113 (_ bv1 32))))
 (let (($x178 (= $x117 $x163)))
 (let (($x153 (=> $x228 $x178)))
 (let (($x116 (= ?x113 (_ bv0 32))))
 (let (($x130 (= $x104 $x116)))
 (let (($x151 (=> $x228 $x130)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x86)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x16)))
 (let (($x120 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x14 (=> $x228 $x120)))
 (let (($x61 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x71 (ite $x61 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x71 (_ bv1 32))))
 (let (($x59 (= $x228 $x174)))
 (let (($x67 (= ?x71 (_ bv0 32))))
 (let (($x157 (= $x100 $x67)))
 (let (($x43 (and (and (and (and (and (and $x157 $x59) $x175) $x14) $x151) $x177) $x153)))
 (let (($x237 (and (and (and (and (and $x43 $x232) $x77) $x147) $x180) $x23)))
 (let (($x186 (= $x237 true)))
 (let ((?x227 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x140 (= (_ bv0 3) ?x227)))
 (let (($x101 (= $x140 true)))
 (let (($x66 (= $x101 true)))
 (let ((?x36 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x91 (bvugt ?x36 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x36 (_ bv3 32)))))
 (let (($x81 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x91)))))))
 (let (($x21 (=> (and $x131 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x79 $x91)))))))
 (let (($x19 (= $x21 true)))
 (let (($x95 (= $x19 true)))
 (let (($x93 (= $x95 true)))
 (let (($x92 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x60 (= $x92 true)))
 (let (($x90 (= $x60 true)))
 (let (($x24 (= $x90 true)))
 (let (($x64 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x78 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x154 (_ bv1 32))) (or false (or false (and true (or $x96 $x64)))))))
 (let (($x160 (=> (and $x131 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x154 (_ bv1 32)))) (or false (or false (and true (or $x96 $x64)))))))
 (let (($x25 (= $x160 true)))
 (let (($x6 (= $x25 true)))
 (let (($x74 (= $x6 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x15)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x155 $x72)))
 (let (($x58 (and $x27 $x18)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x150 $x58)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x161 $x82)))))))
 (let (($x142 (and $x148 $x8)))
 (let (($x56 (= $x142 true)))
 (let (($x164 (= $x56 true)))
 (let (($x22 (= $x164 true)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x146 (= $x70 true)))
 (let (($x42 (= $x146 true)))
 (let (($x20 (and $x42 $x22)))
 (let (($x226 (and $x20 $x74)))
 (let (($x98 (and $x226 $x24)))
 (let (($x99 (and $x98 $x93)))
 (let (($x102 (and $x99 $x66)))
 (let (($x259 (and $x102 $x186)))
 (let (($x275 (and $x259 $x274)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x276 (and $x224 $x275)))
 (let (($x279 (=> $x276 $x278)))
 (not $x279))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x131 (not $x10)))
 (let (($x277 (= $x131 false)))
 (let (($x278 (= $x277 true)))
 (let ((?x154 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem ?x154))))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv2 32))) ?x200))))
 (let ((?x249 (bvadd ?x206 (_ bv4 32))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv1 32))) (select input.dst.llvm-mem ?x249))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x249 (_ bv2 32))) ?x244))))
 (let (($x254 (= (_ bv0 32) ?x253)))
 (let ((?x255 (ite $x254 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x255 (_ bv1 32))))
 (let (($x172 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x144 (= $x172 $x258)))
 (let (($x117 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x124 (and $x228 $x117)))
 (let (($x40 (=> $x124 $x144)))
 (let (($x256 (= ?x255 (_ bv0 32))))
 (let (($x13 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x257 (= $x13 $x256)))
 (let (($x264 (=> $x124 $x257)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x216))))
 (let (($x263 (= input.spec-%var-l-1.2.1.2.0 ?x241)))
 (let (($x242 (=> $x124 $x263)))
 (let (($x207 (= (_ bv0 32) ?x206)))
 (let ((?x261 (ite $x207 (_ bv0 32) (_ bv1 32))))
 (let (($x262 (bvuge ?x261 (_ bv1 32))))
 (let (($x220 (= $x117 $x262)))
 (let (($x221 (=> $x228 $x220)))
 (let (($x205 (= ?x261 (_ bv0 32))))
 (let (($x104 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x208 (= $x104 $x205)))
 (let (($x211 (=> $x228 $x208)))
 (let ((?x187 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x158 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x204 (concat (select input.dst.llvm-mem ?x158) (concat ?x197 (concat ?x190 ?x187)))))
 (let (($x201 (= input.spec-%var-l-1.2.0 ?x204)))
 (let (($x202 (=> $x228 $x201)))
 (let ((?x188 (ite $x10 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x188 (_ bv1 32))))
 (let (($x196 (= $x228 $x195)))
 (let (($x193 (= ?x188 (_ bv0 32))))
 (let (($x100 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x189 (= $x100 $x193)))
 (let (($x170 (and $x124 $x13)))
 (let (($x23 (not $x170)))
 (let (($x37 (and $x124 $x172)))
 (let (($x180 (not $x37)))
 (let (($x32 (= false false)))
 (let (($x121 (and $x228 $x104)))
 (let (($x177 (=> $x121 $x32)))
 (let (($x175 (=> $x100 $x32)))
 (let (($x270 (and (and (and (and (and (and $x175 $x177) $x180) $x23) $x189) $x196) $x202)))
 (let (($x273 (and (and (and (and (and $x270 $x211) $x221) $x242) $x264) $x40)))
 (let (($x274 (= $x273 true)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x111 (concat ?x132 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x122 (concat ?x106 (concat ?x225 ?x111))))
 (let ((?x34 (bvadd ?x122 (_ bv4 32))))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x166))))
 (let (($x31 (= (_ bv0 32) ?x137)))
 (let ((?x126 (ite $x31 (_ bv0 32) (_ bv1 32))))
 (let (($x173 (bvuge ?x126 (_ bv1 32))))
 (let (($x52 (= $x172 $x173)))
 (let (($x147 (=> $x124 $x52)))
 (let (($x167 (= ?x126 (_ bv0 32))))
 (let (($x234 (= $x13 $x167)))
 (let (($x77 (=> $x124 $x234)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem ?x122))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv2 32))) ?x135))))
 (let (($x128 (= input.spec-%var-l-1.2.1.2.0 ?x123)))
 (let (($x232 (=> $x124 $x128)))
 (let (($x115 (= (_ bv0 32) ?x122)))
 (let ((?x113 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x113 (_ bv1 32))))
 (let (($x178 (= $x117 $x163)))
 (let (($x153 (=> $x228 $x178)))
 (let (($x116 (= ?x113 (_ bv0 32))))
 (let (($x130 (= $x104 $x116)))
 (let (($x151 (=> $x228 $x130)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x86)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x16)))
 (let (($x120 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x14 (=> $x228 $x120)))
 (let (($x61 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x71 (ite $x61 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x71 (_ bv1 32))))
 (let (($x59 (= $x228 $x174)))
 (let (($x67 (= ?x71 (_ bv0 32))))
 (let (($x157 (= $x100 $x67)))
 (let (($x43 (and (and (and (and (and (and $x157 $x59) $x175) $x14) $x151) $x177) $x153)))
 (let (($x237 (and (and (and (and (and $x43 $x232) $x77) $x147) $x180) $x23)))
 (let (($x186 (= $x237 true)))
 (let ((?x227 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x140 (= (_ bv0 3) ?x227)))
 (let (($x101 (= $x140 true)))
 (let (($x66 (= $x101 true)))
 (let ((?x36 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x91 (bvugt ?x36 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x36 (_ bv3 32)))))
 (let (($x81 (=> (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x91)))))))
 (let (($x21 (=> (and $x131 (bvule ?x36 (bvsub (bvadd ?x36 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x79 $x91)))))))
 (let (($x19 (= $x21 true)))
 (let (($x95 (= $x19 true)))
 (let (($x93 (= $x95 true)))
 (let (($x92 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x60 (= $x92 true)))
 (let (($x90 (= $x60 true)))
 (let (($x24 (= $x90 true)))
 (let (($x64 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x78 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x154 (_ bv1 32))) (or false (or false (and true (or $x96 $x64)))))))
 (let (($x160 (=> (and $x131 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x154 (_ bv1 32)))) (or false (or false (and true (or $x96 $x64)))))))
 (let (($x25 (= $x160 true)))
 (let (($x6 (= $x25 true)))
 (let (($x74 (= $x6 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x15)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x155 $x72)))
 (let (($x58 (and $x27 $x18)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x150 $x58)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x161 $x82)))))))
 (let (($x142 (and $x148 $x8)))
 (let (($x56 (= $x142 true)))
 (let (($x164 (= $x56 true)))
 (let (($x22 (= $x164 true)))
 (let (($x70 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x146 (= $x70 true)))
 (let (($x42 (= $x146 true)))
 (let (($x20 (and $x42 $x22)))
 (let (($x226 (and $x20 $x74)))
 (let (($x98 (and $x226 $x24)))
 (let (($x99 (and $x98 $x93)))
 (let (($x102 (and $x99 $x66)))
 (let (($x259 (and $x102 $x186)))
 (let (($x275 (and $x259 $x274)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x276 (and $x224 $x275)))
 (let (($x279 (=> $x276 $x278)))
 (not $x279))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10011001010001001000100100110000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00010100101000010010000000011011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00010100101000010010000000011000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00010100101000010010000000011000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_50)
(function @fun_50
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv32 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x32))))
 (let ((?x112 ((_ extract 2 0) ?x54)))
 (let (($x135 (= (_ bv0 3) ?x112)))
 (let (($x133 (= $x135 true)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x153 (_ bv1 32))))
 (let (($x121 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x134 (= $x121 $x118)))
 (let (($x43 (= ?x153 (_ bv0 32))))
 (let (($x115 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x124 (= $x115 $x43)))
 (let (($x159 (and $x124 $x134)))
 (let (($x125 (= $x159 true)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x130 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (bvuge ?x130 (_ bv1 32))))
 (let (($x182 (= $x121 $x177)))
 (let (($x151 (= ?x130 (_ bv0 32))))
 (let (($x236 (= $x115 $x151)))
 (let (($x117 (and $x236 $x182)))
 (let (($x163 (= $x117 true)))
 (let ((?x119 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x132 (= (_ bv0 3) ?x119)))
 (let (($x47 (= $x132 true)))
 (let (($x111 (= $x47 true)))
 (let (($x86 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x99) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x99))))
 (let (($x66 (and true $x101)))
 (let (($x26 (and $x101 $x66)))
 (let (($x107 (= (bvand ?x54 (_ bv4294967288 32)) ?x54)))
 (let (($x157 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x162 (and $x157 $x107)))
 (let (($x61 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x181 (and (and (and (and (and $x66 $x61) $x157) $x162) $x26) $x86)))
 (let (($x176 (= true $x181)))
 (let (($x161 (not $x11)))
 (let (($x104 (=> $x161 $x176)))
 (let (($x149 (= $x104 true)))
 (let (($x230 (= $x149 true)))
 (let (($x106 (= $x230 true)))
 (let (($x81 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x21 (= $x81 true)))
 (let (($x19 (= $x21 true)))
 (let (($x95 (= $x19 true)))
 (let (($x91 (= $x161 true)))
 (let (($x94 (= $x91 true)))
 (let (($x80 (= $x94 true)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x90)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x226 $x92)))
 (let (($x98 (and $x60 $x24)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x158 $x98)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x35)))))))
 (let (($x229 (and $x74 $x36)))
 (let (($x97 (= $x229 true)))
 (let (($x45 (= $x97 true)))
 (let (($x89 (= $x45 true)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x76 (= $x131 true)))
 (let (($x154 (= $x76 true)))
 (let (($x79 (and $x154 $x89)))
 (let (($x129 (and $x79 $x80)))
 (let (($x93 (and $x129 $x95)))
 (let (($x108 (and $x93 $x106)))
 (let (($x41 (and $x108 $x111)))
 (let (($x178 (and $x41 $x163)))
 (let (($x152 (and $x178 $x125)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x179 (and $x9 $x152)))
 (let (($x18 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd ?x28 (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x22 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x18)))))))
 (let (($x155 (=> (and $x161 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x15 $x18)))))))
 (let (($x49 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x110 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x150 (=> $x110 (or false (or false (and true (or $x82 $x49)))))))
 (let (($x143 (=> (and $x161 $x110) (or false (or false (and true (or $x82 $x49)))))))
 (let (($x69 (and $x143 $x155)))
 (let (($x231 (and $x69 $x179)))
 (let (($x123 (=> $x231 $x133)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x32))))
 (let ((?x112 ((_ extract 2 0) ?x54)))
 (let (($x135 (= (_ bv0 3) ?x112)))
 (let (($x133 (= $x135 true)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x153 (_ bv1 32))))
 (let (($x121 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x134 (= $x121 $x118)))
 (let (($x43 (= ?x153 (_ bv0 32))))
 (let (($x115 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x124 (= $x115 $x43)))
 (let (($x159 (and $x124 $x134)))
 (let (($x125 (= $x159 true)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x130 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (bvuge ?x130 (_ bv1 32))))
 (let (($x182 (= $x121 $x177)))
 (let (($x151 (= ?x130 (_ bv0 32))))
 (let (($x236 (= $x115 $x151)))
 (let (($x117 (and $x236 $x182)))
 (let (($x163 (= $x117 true)))
 (let ((?x119 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x132 (= (_ bv0 3) ?x119)))
 (let (($x47 (= $x132 true)))
 (let (($x111 (= $x47 true)))
 (let (($x86 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x99) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x99))))
 (let (($x66 (and true $x101)))
 (let (($x26 (and $x101 $x66)))
 (let (($x107 (= (bvand ?x54 (_ bv4294967288 32)) ?x54)))
 (let (($x157 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x162 (and $x157 $x107)))
 (let (($x61 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x181 (and (and (and (and (and $x66 $x61) $x157) $x162) $x26) $x86)))
 (let (($x176 (= true $x181)))
 (let (($x161 (not $x11)))
 (let (($x104 (=> $x161 $x176)))
 (let (($x149 (= $x104 true)))
 (let (($x230 (= $x149 true)))
 (let (($x106 (= $x230 true)))
 (let (($x81 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x21 (= $x81 true)))
 (let (($x19 (= $x21 true)))
 (let (($x95 (= $x19 true)))
 (let (($x91 (= $x161 true)))
 (let (($x94 (= $x91 true)))
 (let (($x80 (= $x94 true)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x90)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x226 $x92)))
 (let (($x98 (and $x60 $x24)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x158 $x98)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x35)))))))
 (let (($x229 (and $x74 $x36)))
 (let (($x97 (= $x229 true)))
 (let (($x45 (= $x97 true)))
 (let (($x89 (= $x45 true)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x76 (= $x131 true)))
 (let (($x154 (= $x76 true)))
 (let (($x79 (and $x154 $x89)))
 (let (($x129 (and $x79 $x80)))
 (let (($x93 (and $x129 $x95)))
 (let (($x108 (and $x93 $x106)))
 (let (($x41 (and $x108 $x111)))
 (let (($x178 (and $x41 $x163)))
 (let (($x152 (and $x178 $x125)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x179 (and $x9 $x152)))
 (let (($x18 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd ?x28 (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x22 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x18)))))))
 (let (($x155 (=> (and $x161 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x15 $x18)))))))
 (let (($x49 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x110 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x150 (=> $x110 (or false (or false (and true (or $x82 $x49)))))))
 (let (($x143 (=> (and $x161 $x110) (or false (or false (and true (or $x82 $x49)))))))
 (let (($x69 (and $x143 $x155)))
 (let (($x231 (and $x69 $x179)))
 (let (($x123 (=> $x231 $x133)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x232 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x50 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x13 (concat (select input.dst.llvm-mem ?x50) (concat ?x232 (concat ?x68 ?x123)))))
 (let ((?x34 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x13)))
 (let (($x51 (= (_ bv0 32) ?x34)))
 (let (($x168 (= $x51 true)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x118 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (bvuge ?x118 (_ bv1 32))))
 (let (($x117 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x152 (= $x117 $x125)))
 (let (($x134 (= ?x118 (_ bv0 32))))
 (let (($x130 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x159 (= $x130 $x134)))
 (let (($x179 (and $x159 $x152)))
 (let (($x231 (= $x179 true)))
 (let (($x236 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x121 (ite $x236 (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x121 (_ bv1 32))))
 (let (($x178 (= $x117 $x163)))
 (let (($x177 (= ?x121 (_ bv0 32))))
 (let (($x182 (= $x130 $x177)))
 (let (($x153 (and $x182 $x178)))
 (let (($x43 (= $x153 true)))
 (let ((?x111 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x41 (= (_ bv0 3) ?x111)))
 (let (($x122 (= $x41 true)))
 (let (($x115 (= $x122 true)))
 (let (($x108 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x225 (= $x108 true)))
 (let (($x119 (= $x225 true)))
 (let (($x107 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x95 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x227 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x95) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x95))))
 (let (($x140 (and true $x227)))
 (let (($x114 (and $x227 $x140)))
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x228))))
 (let (($x57 (= (bvand ?x171 (_ bv4294967288 32)) ?x171)))
 (let (($x16 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x54 (and $x16 $x57)))
 (let (($x100 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv4 32))) (bvult ?x110 (bvsub ?x110 (_ bv4 32))))))
 (let (($x165 (and (and (and (and (and $x140 $x100) $x16) $x54) $x114) $x107)))
 (let (($x86 (= true $x165)))
 (let (($x161 (not $x11)))
 (let (($x181 (=> $x161 $x86)))
 (let (($x176 (= $x181 true)))
 (let (($x104 (= $x176 true)))
 (let (($x149 (= $x104 true)))
 (let (($x129 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x33 (= $x129 true)))
 (let (($x81 (= $x33 true)))
 (let (($x21 (= $x81 true)))
 (let (($x89 (= $x161 true)))
 (let (($x79 (= $x89 true)))
 (let (($x91 (= $x79 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x60)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x226)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x158 $x63)))
 (let (($x24 (and $x92 $x90)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x96 $x24)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x35)))))))
 (let (($x36 (and $x30 $x98)))
 (let (($x229 (= $x36 true)))
 (let (($x97 (= $x229 true)))
 (let (($x45 (= $x97 true)))
 (let (($x94 (and $x45 $x91)))
 (let (($x19 (and $x94 $x21)))
 (let (($x230 (and $x19 $x149)))
 (let (($x132 (and $x230 $x119)))
 (let (($x113 (and $x132 $x115)))
 (let (($x124 (and $x113 $x43)))
 (let (($x112 (and $x124 $x231)))
 (let (($x131 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x135 (and $x131 $x112)))
 (let (($x142 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd ?x110 (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x9 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x142)))))))
 (let (($x164 (=> (and $x161 (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x8 $x142)))))))
 (let (($x39 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x138 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x72 (=> $x138 (or false (or false (and true (or $x145 $x39)))))))
 (let (($x29 (=> (and $x161 $x138) (or false (or false (and true (or $x145 $x39)))))))
 (let (($x27 (and $x29 $x164)))
 (let (($x133 (and $x27 $x135)))
 (let (($x136 (=> $x133 $x168)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x232 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x50 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x13 (concat (select input.dst.llvm-mem ?x50) (concat ?x232 (concat ?x68 ?x123)))))
 (let ((?x34 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x13)))
 (let (($x51 (= (_ bv0 32) ?x34)))
 (let (($x168 (= $x51 true)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x118 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (bvuge ?x118 (_ bv1 32))))
 (let (($x117 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x152 (= $x117 $x125)))
 (let (($x134 (= ?x118 (_ bv0 32))))
 (let (($x130 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x159 (= $x130 $x134)))
 (let (($x179 (and $x159 $x152)))
 (let (($x231 (= $x179 true)))
 (let (($x236 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x121 (ite $x236 (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x121 (_ bv1 32))))
 (let (($x178 (= $x117 $x163)))
 (let (($x177 (= ?x121 (_ bv0 32))))
 (let (($x182 (= $x130 $x177)))
 (let (($x153 (and $x182 $x178)))
 (let (($x43 (= $x153 true)))
 (let ((?x111 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x41 (= (_ bv0 3) ?x111)))
 (let (($x122 (= $x41 true)))
 (let (($x115 (= $x122 true)))
 (let (($x108 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x225 (= $x108 true)))
 (let (($x119 (= $x225 true)))
 (let (($x107 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x95 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x227 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x95) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x95))))
 (let (($x140 (and true $x227)))
 (let (($x114 (and $x227 $x140)))
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x228))))
 (let (($x57 (= (bvand ?x171 (_ bv4294967288 32)) ?x171)))
 (let (($x16 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x54 (and $x16 $x57)))
 (let (($x100 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv4 32))) (bvult ?x110 (bvsub ?x110 (_ bv4 32))))))
 (let (($x165 (and (and (and (and (and $x140 $x100) $x16) $x54) $x114) $x107)))
 (let (($x86 (= true $x165)))
 (let (($x161 (not $x11)))
 (let (($x181 (=> $x161 $x86)))
 (let (($x176 (= $x181 true)))
 (let (($x104 (= $x176 true)))
 (let (($x149 (= $x104 true)))
 (let (($x129 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x33 (= $x129 true)))
 (let (($x81 (= $x33 true)))
 (let (($x21 (= $x81 true)))
 (let (($x89 (= $x161 true)))
 (let (($x79 (= $x89 true)))
 (let (($x91 (= $x79 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x60)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x226)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x158 $x63)))
 (let (($x24 (and $x92 $x90)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x96 $x24)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x35)))))))
 (let (($x36 (and $x30 $x98)))
 (let (($x229 (= $x36 true)))
 (let (($x97 (= $x229 true)))
 (let (($x45 (= $x97 true)))
 (let (($x94 (and $x45 $x91)))
 (let (($x19 (and $x94 $x21)))
 (let (($x230 (and $x19 $x149)))
 (let (($x132 (and $x230 $x119)))
 (let (($x113 (and $x132 $x115)))
 (let (($x124 (and $x113 $x43)))
 (let (($x112 (and $x124 $x231)))
 (let (($x131 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x135 (and $x131 $x112)))
 (let (($x142 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd ?x110 (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x9 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x8 $x142)))))))
 (let (($x164 (=> (and $x161 (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x8 $x142)))))))
 (let (($x39 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x138 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x72 (=> $x138 (or false (or false (and true (or $x145 $x39)))))))
 (let (($x29 (=> (and $x161 $x138) (or false (or false (and true (or $x145 $x39)))))))
 (let (($x27 (and $x29 $x164)))
 (let (($x133 (and $x27 $x135)))
 (let (($x136 (=> $x133 $x168)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6110000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xffd1fbf0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #xffd1fbf1 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6110000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6110003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8388600 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8388600 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv16777215 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x148 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x235 (concat (select input.dst.llvm-mem ?x148) (concat ?x84 (concat ?x168 ?x34)))))
 (let ((?x7 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x235)))
 (let (($x83 (= (_ bv0 32) ?x7)))
 (let (($x166 (= $x83 true)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x112 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x112 (_ bv1 32))))
 (let (($x153 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x88 (= $x153 $x233)))
 (let (($x135 (= ?x112 (_ bv0 32))))
 (let (($x121 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x133 (= $x121 $x135)))
 (let (($x68 (and (and (and (not $x121) (not $x153)) $x133) $x88)))
 (let (($x123 (= $x68 true)))
 (let (($x134 (not $x153)))
 (let (($x118 (not $x121)))
 (let (($x182 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x117 (ite $x182 (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x117 (_ bv1 32))))
 (let (($x124 (= $x153 $x43)))
 (let (($x163 (= ?x117 (_ bv0 32))))
 (let (($x178 (= $x121 $x163)))
 (let (($x152 (and (and (and $x178 $x124) $x118) $x134)))
 (let (($x179 (= $x152 true)))
 (let ((?x115 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x113 (= (_ bv0 3) ?x115)))
 (let (($x116 (= $x113 true)))
 (let (($x130 (= $x116 true)))
 (let (($x132 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x47 (= $x132 true)))
 (let (($x111 (= $x47 true)))
 (let (($x75 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x99) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x99))))
 (let (($x127 (and true $x101)))
 (let (($x114 (and $x101 $x127)))
 (let ((?x138 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem ?x138))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv2 32))) ?x157))))
 (let (($x54 (= (bvand ?x174 (_ bv4294967288 32)) ?x174)))
 (let (($x71 (= (bvand ?x138 (_ bv4294967292 32)) ?x138)))
 (let (($x26 (and $x71 $x54)))
 (let (($x61 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x138 (bvsub ?x138 (_ bv4 32))) (bvult ?x138 (bvsub ?x138 (_ bv4 32))))))
 (let (($x176 (and (and (and (and (and $x127 $x61) $x71) $x26) $x114) $x75)))
 (let (($x104 (= true $x176)))
 (let (($x161 (not $x11)))
 (let (($x149 (=> $x161 $x104)))
 (let (($x230 (= $x149 true)))
 (let (($x106 (= $x230 true)))
 (let (($x108 (= $x106 true)))
 (let (($x21 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x19 (= $x21 true)))
 (let (($x93 (= $x19 true)))
 (let (($x95 (= $x93 true)))
 (let (($x94 (= $x161 true)))
 (let (($x80 (= $x94 true)))
 (let (($x129 (= $x80 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x98)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x92 $x90)))
 (let (($x229 (and $x24 $x36)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x53 $x229)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x160 $x25)))))))
 (let (($x45 (and $x63 $x97)))
 (let (($x89 (= $x45 true)))
 (let (($x79 (= $x89 true)))
 (let (($x91 (= $x79 true)))
 (let (($x33 (and $x91 $x129)))
 (let (($x103 (and $x33 $x95)))
 (let (($x225 (and $x103 $x108)))
 (let (($x41 (and $x225 $x111)))
 (let (($x151 (and $x41 $x130)))
 (let (($x231 (and $x151 $x179)))
 (let (($x55 (and $x231 $x123)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x183 (and $x6 $x55)))
 (let (($x155 (bvugt ?x138 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd ?x138 (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x131 (=> (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x155)))))))
 (let (($x20 (=> (and $x161 (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x155)))))))
 (let (($x143 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x15 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x15 (or false (or false (and true (or $x150 $x143)))))))
 (let (($x62 (=> (and $x161 $x15) (or false (or false (and true (or $x150 $x143)))))))
 (let (($x58 (and $x62 $x20)))
 (let (($x13 (and $x58 $x183)))
 (let (($x169 (=> $x13 $x166)))
 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x148 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x235 (concat (select input.dst.llvm-mem ?x148) (concat ?x84 (concat ?x168 ?x34)))))
 (let ((?x7 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x235)))
 (let (($x83 (= (_ bv0 32) ?x7)))
 (let (($x166 (= $x83 true)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x112 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x112 (_ bv1 32))))
 (let (($x153 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x88 (= $x153 $x233)))
 (let (($x135 (= ?x112 (_ bv0 32))))
 (let (($x121 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x133 (= $x121 $x135)))
 (let (($x68 (and (and (and (not $x121) (not $x153)) $x133) $x88)))
 (let (($x123 (= $x68 true)))
 (let (($x134 (not $x153)))
 (let (($x118 (not $x121)))
 (let (($x182 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x117 (ite $x182 (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x117 (_ bv1 32))))
 (let (($x124 (= $x153 $x43)))
 (let (($x163 (= ?x117 (_ bv0 32))))
 (let (($x178 (= $x121 $x163)))
 (let (($x152 (and (and (and $x178 $x124) $x118) $x134)))
 (let (($x179 (= $x152 true)))
 (let ((?x115 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x113 (= (_ bv0 3) ?x115)))
 (let (($x116 (= $x113 true)))
 (let (($x130 (= $x116 true)))
 (let (($x132 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x47 (= $x132 true)))
 (let (($x111 (= $x47 true)))
 (let (($x75 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x99) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x99))))
 (let (($x127 (and true $x101)))
 (let (($x114 (and $x101 $x127)))
 (let ((?x138 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem ?x138))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv2 32))) ?x157))))
 (let (($x54 (= (bvand ?x174 (_ bv4294967288 32)) ?x174)))
 (let (($x71 (= (bvand ?x138 (_ bv4294967292 32)) ?x138)))
 (let (($x26 (and $x71 $x54)))
 (let (($x61 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x138 (bvsub ?x138 (_ bv4 32))) (bvult ?x138 (bvsub ?x138 (_ bv4 32))))))
 (let (($x176 (and (and (and (and (and $x127 $x61) $x71) $x26) $x114) $x75)))
 (let (($x104 (= true $x176)))
 (let (($x161 (not $x11)))
 (let (($x149 (=> $x161 $x104)))
 (let (($x230 (= $x149 true)))
 (let (($x106 (= $x230 true)))
 (let (($x108 (= $x106 true)))
 (let (($x21 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x19 (= $x21 true)))
 (let (($x93 (= $x19 true)))
 (let (($x95 (= $x93 true)))
 (let (($x94 (= $x161 true)))
 (let (($x80 (= $x94 true)))
 (let (($x129 (= $x80 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x98)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (and $x92 $x90)))
 (let (($x229 (and $x24 $x36)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x53 $x229)))
 (let (($x25 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x160 $x25)))))))
 (let (($x45 (and $x63 $x97)))
 (let (($x89 (= $x45 true)))
 (let (($x79 (= $x89 true)))
 (let (($x91 (= $x79 true)))
 (let (($x33 (and $x91 $x129)))
 (let (($x103 (and $x33 $x95)))
 (let (($x225 (and $x103 $x108)))
 (let (($x41 (and $x225 $x111)))
 (let (($x151 (and $x41 $x130)))
 (let (($x231 (and $x151 $x179)))
 (let (($x55 (and $x231 $x123)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x183 (and $x6 $x55)))
 (let (($x155 (bvugt ?x138 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd ?x138 (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x131 (=> (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x155)))))))
 (let (($x20 (=> (and $x161 (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x155)))))))
 (let (($x143 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x15 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x18 (=> $x15 (or false (or false (and true (or $x150 $x143)))))))
 (let (($x62 (=> (and $x161 $x15) (or false (or false (and true (or $x150 $x143)))))))
 (let (($x58 (and $x62 $x20)))
 (let (($x13 (and $x58 $x183)))
 (let (($x169 (=> $x13 $x166)))
 (not $x169)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x38 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x7 (concat (select input.dst.llvm-mem ?x28) (concat ?x136 (concat ?x51 ?x38)))))
 (let ((?x83 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x7)))
 (let (($x166 (= (_ bv0 32) ?x83)))
 (let (($x169 (= $x166 true)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x135 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x135 (_ bv1 32))))
 (let (($x159 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x88 (= $x159 $x233)))
 (let (($x133 (= ?x135 (_ bv0 32))))
 (let (($x117 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x128 (= $x117 $x133)))
 (let (($x134 (= false false)))
 (let (($x152 (=> $x117 $x134)))
 (let (($x123 (and (and $x152 $x128) $x88)))
 (let (($x55 (= $x123 true)))
 (let (($x178 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x153 (ite $x178 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x153 (_ bv1 32))))
 (let (($x125 (= $x159 $x118)))
 (let (($x43 (= ?x153 (_ bv0 32))))
 (let (($x124 (= $x117 $x43)))
 (let (($x231 (and (and $x124 $x125) $x152)))
 (let (($x232 (= $x231 true)))
 (let ((?x130 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x151 (= (_ bv0 3) ?x130)))
 (let (($x236 (= $x151 true)))
 (let (($x121 (= $x236 true)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x122 (= $x41 true)))
 (let (($x115 (= $x122 true)))
 (let (($x14 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x66 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x66) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x66))))
 (let (($x162 (and true $x102)))
 (let (($x114 (and $x102 $x162)))
 (let ((?x15 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv1 32))) (select input.dst.llvm-mem ?x15))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv2 32))) ?x175))))
 (let (($x26 (= (bvand ?x32 (_ bv4294967288 32)) ?x32)))
 (let (($x59 (= (bvand ?x15 (_ bv4294967292 32)) ?x15)))
 (let (($x86 (and $x59 $x26)))
 (let (($x120 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x15 (bvsub ?x15 (_ bv4 32))) (bvult ?x15 (bvsub ?x15 (_ bv4 32))))))
 (let (($x230 (and (and (and (and (and $x162 $x120) $x59) $x86) $x114) $x14)))
 (let (($x106 (= true $x230)))
 (let (($x161 (not $x11)))
 (let (($x108 (=> $x161 $x106)))
 (let (($x225 (= $x108 true)))
 (let (($x119 (= $x225 true)))
 (let (($x132 (= $x119 true)))
 (let (($x95 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x103 (= $x95 true)))
 (let (($x227 (= $x103 true)))
 (let (($x99 (= $x227 true)))
 (let (($x33 (= $x161 true)))
 (let (($x81 (= $x33 true)))
 (let (($x21 (= $x81 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x97)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (and $x24 $x36)))
 (let (($x89 (and $x229 $x45)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x160 $x89)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x158)))))))
 (let (($x91 (and $x90 $x79)))
 (let (($x94 (= $x91 true)))
 (let (($x80 (= $x94 true)))
 (let (($x129 (= $x80 true)))
 (let (($x19 (and $x129 $x21)))
 (let (($x140 (and $x19 $x99)))
 (let (($x47 (and $x140 $x132)))
 (let (($x113 (and $x47 $x115)))
 (let (($x177 (and $x113 $x121)))
 (let (($x112 (and $x177 $x232)))
 (let (($x183 (and $x112 $x55)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x13 (and $x12 $x183)))
 (let (($x164 (bvugt ?x15 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd ?x15 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x6 (=> (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x164)))))))
 (let (($x10 (=> (and $x161 (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x9 $x164)))))))
 (let (($x29 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x8 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x142 (=> $x8 (or false (or false (and true (or $x72 $x29)))))))
 (let (($x50 (=> (and $x161 $x8) (or false (or false (and true (or $x72 $x29)))))))
 (let (($x56 (and $x50 $x10)))
 (let (($x46 (and $x56 $x13)))
 (let (($x137 (=> $x46 $x169)))
 (not $x137)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x38 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x7 (concat (select input.dst.llvm-mem ?x28) (concat ?x136 (concat ?x51 ?x38)))))
 (let ((?x83 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x7)))
 (let (($x166 (= (_ bv0 32) ?x83)))
 (let (($x169 (= $x166 true)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x135 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x135 (_ bv1 32))))
 (let (($x159 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x88 (= $x159 $x233)))
 (let (($x133 (= ?x135 (_ bv0 32))))
 (let (($x117 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x128 (= $x117 $x133)))
 (let (($x134 (= false false)))
 (let (($x152 (=> $x117 $x134)))
 (let (($x123 (and (and $x152 $x128) $x88)))
 (let (($x55 (= $x123 true)))
 (let (($x178 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x153 (ite $x178 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x153 (_ bv1 32))))
 (let (($x125 (= $x159 $x118)))
 (let (($x43 (= ?x153 (_ bv0 32))))
 (let (($x124 (= $x117 $x43)))
 (let (($x231 (and (and $x124 $x125) $x152)))
 (let (($x232 (= $x231 true)))
 (let ((?x130 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x151 (= (_ bv0 3) ?x130)))
 (let (($x236 (= $x151 true)))
 (let (($x121 (= $x236 true)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x122 (= $x41 true)))
 (let (($x115 (= $x122 true)))
 (let (($x14 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x66 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x102 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x66) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x66))))
 (let (($x162 (and true $x102)))
 (let (($x114 (and $x102 $x162)))
 (let ((?x15 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv1 32))) (select input.dst.llvm-mem ?x15))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv2 32))) ?x175))))
 (let (($x26 (= (bvand ?x32 (_ bv4294967288 32)) ?x32)))
 (let (($x59 (= (bvand ?x15 (_ bv4294967292 32)) ?x15)))
 (let (($x86 (and $x59 $x26)))
 (let (($x120 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x15 (bvsub ?x15 (_ bv4 32))) (bvult ?x15 (bvsub ?x15 (_ bv4 32))))))
 (let (($x230 (and (and (and (and (and $x162 $x120) $x59) $x86) $x114) $x14)))
 (let (($x106 (= true $x230)))
 (let (($x161 (not $x11)))
 (let (($x108 (=> $x161 $x106)))
 (let (($x225 (= $x108 true)))
 (let (($x119 (= $x225 true)))
 (let (($x132 (= $x119 true)))
 (let (($x95 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x103 (= $x95 true)))
 (let (($x227 (= $x103 true)))
 (let (($x99 (= $x227 true)))
 (let (($x33 (= $x161 true)))
 (let (($x81 (= $x33 true)))
 (let (($x21 (= $x81 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x97)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (and $x24 $x36)))
 (let (($x89 (and $x229 $x45)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x160 $x89)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x158)))))))
 (let (($x91 (and $x90 $x79)))
 (let (($x94 (= $x91 true)))
 (let (($x80 (= $x94 true)))
 (let (($x129 (= $x80 true)))
 (let (($x19 (and $x129 $x21)))
 (let (($x140 (and $x19 $x99)))
 (let (($x47 (and $x140 $x132)))
 (let (($x113 (and $x47 $x115)))
 (let (($x177 (and $x113 $x121)))
 (let (($x112 (and $x177 $x232)))
 (let (($x183 (and $x112 $x55)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x13 (and $x12 $x183)))
 (let (($x164 (bvugt ?x15 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd ?x15 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x6 (=> (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x164)))))))
 (let (($x10 (=> (and $x161 (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x9 $x164)))))))
 (let (($x29 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x8 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x142 (=> $x8 (or false (or false (and true (or $x72 $x29)))))))
 (let (($x50 (=> (and $x161 $x8) (or false (or false (and true (or $x72 $x29)))))))
 (let (($x56 (and $x50 $x10)))
 (let (($x46 (and $x56 $x13)))
 (let (($x137 (=> $x46 $x169)))
 (not $x137)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6110000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xffd1fbf0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #xffd1fbf1 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6110000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6110003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8388600 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8388600 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv16777215 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x110 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x70 (concat (select input.dst.llvm-mem ?x110) (concat ?x169 (concat ?x7 ?x168)))))
 (let ((?x226 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x70)))
 (let (($x49 (= (_ bv0 32) ?x226)))
 (let (($x74 (= $x49 true)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x88 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x88 (_ bv1 32))))
 (let (($x179 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x13 (= $x179 $x183)))
 (let (($x123 (= ?x88 (_ bv0 32))))
 (let (($x153 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x55 (= $x153 $x123)))
 (let (($x34 (and (and (and (not $x179) (=> $x153 (= false false))) $x55) $x13)))
 (let (($x136 (= $x34 true)))
 (let (($x232 (= false false)))
 (let (($x112 (=> $x153 $x232)))
 (let (($x231 (not $x179)))
 (let (($x124 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x159 (ite $x124 (_ bv0 32) (_ bv1 32))))
 (let (($x134 (bvuge ?x159 (_ bv1 32))))
 (let (($x152 (= $x179 $x134)))
 (let (($x118 (= ?x159 (_ bv0 32))))
 (let (($x125 (= $x153 $x118)))
 (let (($x128 (and (and (and $x125 $x152) $x231) $x112)))
 (let (($x68 (= $x128 true)))
 (let ((?x121 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x177 (= (_ bv0 3) ?x121)))
 (let (($x182 (= $x177 true)))
 (let (($x117 (= $x182 true)))
 (let (($x113 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x116 (= $x113 true)))
 (let (($x130 (= $x116 true)))
 (let (($x181 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x100 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x156 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100))))
 (let (($x107 (and true $x156)))
 (let (($x114 (and $x156 $x107)))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x67))))
 (let (($x86 (= (bvand ?x57 (_ bv4294967288 32)) ?x57)))
 (let (($x171 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x104 (and $x171 $x86)))
 (let (($x165 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x225 (and (and (and (and (and $x107 $x165) $x171) $x104) $x114) $x181)))
 (let (($x119 (= true $x225)))
 (let (($x161 (not $x11)))
 (let (($x132 (=> $x161 $x119)))
 (let (($x47 (= $x132 true)))
 (let (($x111 (= $x47 true)))
 (let (($x41 (= $x111 true)))
 (let (($x99 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x140 (= $x99 true)))
 (let (($x101 (= $x140 true)))
 (let (($x66 (= $x101 true)))
 (let (($x19 (= $x161 true)))
 (let (($x93 (= $x19 true)))
 (let (($x95 (= $x93 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x79)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x229 $x45)))
 (let (($x94 (and $x89 $x91)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x96 $x94)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x92)))))))
 (let (($x129 (and $x36 $x80)))
 (let (($x33 (= $x129 true)))
 (let (($x81 (= $x33 true)))
 (let (($x21 (= $x81 true)))
 (let (($x103 (and $x21 $x95)))
 (let (($x127 (and $x103 $x66)))
 (let (($x122 (and $x127 $x41)))
 (let (($x151 (and $x122 $x130)))
 (let (($x163 (and $x151 $x117)))
 (let (($x233 (and $x163 $x68)))
 (let (($x84 (and $x233 $x136)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x51 (and $x30 $x84)))
 (let (($x20 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd ?x8 (_ bv3 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x12 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x20)))))))
 (let (($x64 (=> (and $x161 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x131 $x20)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x22 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x155 (=> $x22 (or false (or false (and true (or $x18 $x62)))))))
 (let (($x148 (=> (and $x161 $x22) (or false (or false (and true (or $x18 $x62)))))))
 (let (($x69 (and $x148 $x64)))
 (let (($x38 (and $x69 $x51)))
 (let (($x146 (=> $x38 $x74)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x110 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x70 (concat (select input.dst.llvm-mem ?x110) (concat ?x169 (concat ?x7 ?x168)))))
 (let ((?x226 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x70)))
 (let (($x49 (= (_ bv0 32) ?x226)))
 (let (($x74 (= $x49 true)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x88 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x88 (_ bv1 32))))
 (let (($x179 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x13 (= $x179 $x183)))
 (let (($x123 (= ?x88 (_ bv0 32))))
 (let (($x153 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x55 (= $x153 $x123)))
 (let (($x34 (and (and (and (not $x179) (=> $x153 (= false false))) $x55) $x13)))
 (let (($x136 (= $x34 true)))
 (let (($x232 (= false false)))
 (let (($x112 (=> $x153 $x232)))
 (let (($x231 (not $x179)))
 (let (($x124 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x159 (ite $x124 (_ bv0 32) (_ bv1 32))))
 (let (($x134 (bvuge ?x159 (_ bv1 32))))
 (let (($x152 (= $x179 $x134)))
 (let (($x118 (= ?x159 (_ bv0 32))))
 (let (($x125 (= $x153 $x118)))
 (let (($x128 (and (and (and $x125 $x152) $x231) $x112)))
 (let (($x68 (= $x128 true)))
 (let ((?x121 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x177 (= (_ bv0 3) ?x121)))
 (let (($x182 (= $x177 true)))
 (let (($x117 (= $x182 true)))
 (let (($x113 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x116 (= $x113 true)))
 (let (($x130 (= $x116 true)))
 (let (($x181 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x100 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x156 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100))))
 (let (($x107 (and true $x156)))
 (let (($x114 (and $x156 $x107)))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x67))))
 (let (($x86 (= (bvand ?x57 (_ bv4294967288 32)) ?x57)))
 (let (($x171 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x104 (and $x171 $x86)))
 (let (($x165 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x225 (and (and (and (and (and $x107 $x165) $x171) $x104) $x114) $x181)))
 (let (($x119 (= true $x225)))
 (let (($x161 (not $x11)))
 (let (($x132 (=> $x161 $x119)))
 (let (($x47 (= $x132 true)))
 (let (($x111 (= $x47 true)))
 (let (($x41 (= $x111 true)))
 (let (($x99 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x140 (= $x99 true)))
 (let (($x101 (= $x140 true)))
 (let (($x66 (= $x101 true)))
 (let (($x19 (= $x161 true)))
 (let (($x93 (= $x19 true)))
 (let (($x95 (= $x93 true)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x79)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x229 $x45)))
 (let (($x94 (and $x89 $x91)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x96 $x94)))
 (let (($x92 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x92)))))))
 (let (($x129 (and $x36 $x80)))
 (let (($x33 (= $x129 true)))
 (let (($x81 (= $x33 true)))
 (let (($x21 (= $x81 true)))
 (let (($x103 (and $x21 $x95)))
 (let (($x127 (and $x103 $x66)))
 (let (($x122 (and $x127 $x41)))
 (let (($x151 (and $x122 $x130)))
 (let (($x163 (and $x151 $x117)))
 (let (($x233 (and $x163 $x68)))
 (let (($x84 (and $x233 $x136)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x51 (and $x30 $x84)))
 (let (($x20 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd ?x8 (_ bv3 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x12 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x20)))))))
 (let (($x64 (=> (and $x161 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x131 $x20)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x22 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x155 (=> $x22 (or false (or false (and true (or $x18 $x62)))))))
 (let (($x148 (=> (and $x161 $x22) (or false (or false (and true (or $x18 $x62)))))))
 (let (($x69 (and $x148 $x64)))
 (let (($x38 (and $x69 $x51)))
 (let (($x146 (=> $x38 $x74)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x220 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x138 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x215 (concat (select input.dst.llvm-mem ?x138) (concat ?x214 (concat ?x272 ?x220)))))
 (let ((?x308 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x215)))
 (let (($x309 (= (_ bv0 32) ?x308)))
 (let (($x310 (= $x309 true)))
 (let ((?x72 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x242))))
 (let ((?x278 (bvadd ?x243 (_ bv4 32))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x139))))
 (let (($x287 (= (_ bv0 32) ?x286)))
 (let ((?x288 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x292 (bvuge ?x288 (_ bv1 32))))
 (let (($x201 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x293 (= $x201 $x292)))
 (let (($x167 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x172 (and $x135 $x167)))
 (let (($x294 (=> $x172 $x293)))
 (let (($x289 (= ?x288 (_ bv0 32))))
 (let (($x267 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x290 (= $x267 $x289)))
 (let (($x291 (=> $x172 $x290)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x85))))
 (let (($x276 (= input.spec-%var-l-1.2.1.2.0 ?x275)))
 (let (($x277 (=> $x172 $x276)))
 (let (($x247 (= (_ bv0 32) ?x243)))
 (let ((?x248 (ite $x247 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (bvuge ?x248 (_ bv1 32))))
 (let (($x254 (= $x167 $x253)))
 (let (($x255 (=> $x135 $x254)))
 (let (($x252 (= ?x248 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x244 (= $x38 $x252)))
 (let (($x246 (=> $x135 $x244)))
 (let (($x218 (= input.spec-%var-l-1.2.0 ?x215)))
 (let (($x216 (=> $x135 $x218)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x205 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x271 (bvuge ?x205 (_ bv1 32))))
 (let (($x262 (= $x135 $x271)))
 (let (($x208 (= ?x205 (_ bv0 32))))
 (let (($x159 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x211 (= $x159 $x208)))
 (let (($x232 (= false false)))
 (let (($x39 (and $x135 $x38)))
 (let (($x126 (=> $x39 $x232)))
 (let (($x112 (=> $x159 $x232)))
 (let (($x300 (and (and (and (and (and (and $x112 $x126) $x211) $x262) $x216) $x246) $x255)))
 (let (($x303 (and (and (and $x300 $x277) $x291) $x294)))
 (let (($x304 (= $x303 true)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x7 (concat ?x76 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x49 (concat ?x226 (concat ?x83 ?x7))))
 (let ((?x188 (bvadd ?x49 (_ bv4 32))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x195))))
 (let (($x190 (= (_ bv0 32) ?x192)))
 (let ((?x187 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x202 (bvuge ?x187 (_ bv1 32))))
 (let (($x270 (= $x201 $x202)))
 (let (($x209 (=> $x172 $x270)))
 (let (($x191 (= ?x187 (_ bv0 32))))
 (let (($x260 (= $x267 $x191)))
 (let (($x204 (=> $x172 $x260)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x37))))
 (let (($x259 (= input.spec-%var-l-1.2.1.2.0 ?x186)))
 (let (($x265 (=> $x172 $x259)))
 (let (($x74 (= (_ bv0 32) ?x49)))
 (let ((?x146 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x234 (bvuge ?x146 (_ bv1 32))))
 (let (($x77 (= $x167 $x234)))
 (let (($x184 (=> $x135 $x77)))
 (let (($x31 (= ?x146 (_ bv0 32))))
 (let (($x82 (= $x38 $x31)))
 (let (($x60 (=> $x135 $x82)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x88)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x235)))
 (let (($x136 (= input.spec-%var-l-1.2.0 ?x34)))
 (let (($x84 (=> $x135 $x136)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x179 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x231 (bvuge ?x179 (_ bv1 32))))
 (let (($x133 (= $x135 $x231)))
 (let (($x134 (= ?x179 (_ bv0 32))))
 (let (($x152 (= $x159 $x134)))
 (let (($x199 (and (and (and (and (and (and $x152 $x133) $x112) $x84) $x60) $x126) $x184)))
 (let (($x206 (and (and (and $x199 $x265) $x204) $x209)))
 (let (($x207 (= $x206 true)))
 (let ((?x117 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x163 (= (_ bv0 3) ?x117)))
 (let (($x178 (= $x163 true)))
 (let (($x153 (= $x178 true)))
 (let (($x151 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x236 (= $x151 true)))
 (let (($x121 (= $x236 true)))
 (let (($x149 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x61 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x61) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x61))))
 (let (($x75 (and true $x16)))
 (let (($x114 (and $x16 $x75)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x105))))
 (let (($x104 (= (bvand ?x54 (_ bv4294967288 32)) ?x54)))
 (let (($x174 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x106 (and $x174 $x104)))
 (let (($x176 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv4 32))) (bvult ?x22 (bvsub ?x22 (_ bv4 32))))))
 (let (($x47 (and (and (and (and (and $x75 $x176) $x174) $x106) $x114) $x149)))
 (let (($x111 (= true $x47)))
 (let (($x161 (not $x11)))
 (let (($x41 (=> $x161 $x111)))
 (let (($x122 (= $x41 true)))
 (let (($x115 (= $x122 true)))
 (let (($x113 (= $x115 true)))
 (let (($x66 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x66 true)))
 (let (($x102 (= $x127 true)))
 (let (($x100 (= $x102 true)))
 (let (($x103 (= $x161 true)))
 (let (($x227 (= $x103 true)))
 (let (($x99 (= $x227 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x80)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x89 $x91)))
 (let (($x33 (and $x94 $x129)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x53 $x33)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x160 $x24)))))))
 (let (($x21 (and $x45 $x81)))
 (let (($x19 (= $x21 true)))
 (let (($x93 (= $x19 true)))
 (let (($x95 (= $x93 true)))
 (let (($x140 (and $x95 $x99)))
 (let (($x162 (and $x140 $x100)))
 (let (($x116 (and $x162 $x113)))
 (let (($x177 (and $x116 $x121)))
 (let (($x43 (and $x177 $x153)))
 (let (($x261 (and $x43 $x207)))
 (let (($x305 (and $x261 $x304)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x306 (and $x63 $x305)))
 (let (($x10 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd ?x22 (_ bv3 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x30 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x10)))))))
 (let (($x35 (=> (and $x161 (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x6 $x10)))))))
 (let (($x50 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x164 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x72 (_ bv1 32))) (or false (or false (and true (or $x142 $x50)))))))
 (let (($x28 (=> (and $x161 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x72 (_ bv1 32)))) (or false (or false (and true (or $x142 $x50)))))))
 (let (($x27 (and $x28 $x35)))
 (let (($x307 (and $x27 $x306)))
 (let (($x311 (=> $x307 $x310)))
 (not $x311))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x220 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x138 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x215 (concat (select input.dst.llvm-mem ?x138) (concat ?x214 (concat ?x272 ?x220)))))
 (let ((?x308 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x215)))
 (let (($x309 (= (_ bv0 32) ?x308)))
 (let (($x310 (= $x309 true)))
 (let ((?x72 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x242))))
 (let ((?x278 (bvadd ?x243 (_ bv4 32))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x139))))
 (let (($x287 (= (_ bv0 32) ?x286)))
 (let ((?x288 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x292 (bvuge ?x288 (_ bv1 32))))
 (let (($x201 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x293 (= $x201 $x292)))
 (let (($x167 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x172 (and $x135 $x167)))
 (let (($x294 (=> $x172 $x293)))
 (let (($x289 (= ?x288 (_ bv0 32))))
 (let (($x267 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x290 (= $x267 $x289)))
 (let (($x291 (=> $x172 $x290)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x85))))
 (let (($x276 (= input.spec-%var-l-1.2.1.2.0 ?x275)))
 (let (($x277 (=> $x172 $x276)))
 (let (($x247 (= (_ bv0 32) ?x243)))
 (let ((?x248 (ite $x247 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (bvuge ?x248 (_ bv1 32))))
 (let (($x254 (= $x167 $x253)))
 (let (($x255 (=> $x135 $x254)))
 (let (($x252 (= ?x248 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x244 (= $x38 $x252)))
 (let (($x246 (=> $x135 $x244)))
 (let (($x218 (= input.spec-%var-l-1.2.0 ?x215)))
 (let (($x216 (=> $x135 $x218)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x205 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x271 (bvuge ?x205 (_ bv1 32))))
 (let (($x262 (= $x135 $x271)))
 (let (($x208 (= ?x205 (_ bv0 32))))
 (let (($x159 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x211 (= $x159 $x208)))
 (let (($x232 (= false false)))
 (let (($x39 (and $x135 $x38)))
 (let (($x126 (=> $x39 $x232)))
 (let (($x112 (=> $x159 $x232)))
 (let (($x300 (and (and (and (and (and (and $x112 $x126) $x211) $x262) $x216) $x246) $x255)))
 (let (($x303 (and (and (and $x300 $x277) $x291) $x294)))
 (let (($x304 (= $x303 true)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x7 (concat ?x76 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x49 (concat ?x226 (concat ?x83 ?x7))))
 (let ((?x188 (bvadd ?x49 (_ bv4 32))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x195))))
 (let (($x190 (= (_ bv0 32) ?x192)))
 (let ((?x187 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x202 (bvuge ?x187 (_ bv1 32))))
 (let (($x270 (= $x201 $x202)))
 (let (($x209 (=> $x172 $x270)))
 (let (($x191 (= ?x187 (_ bv0 32))))
 (let (($x260 (= $x267 $x191)))
 (let (($x204 (=> $x172 $x260)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x37))))
 (let (($x259 (= input.spec-%var-l-1.2.1.2.0 ?x186)))
 (let (($x265 (=> $x172 $x259)))
 (let (($x74 (= (_ bv0 32) ?x49)))
 (let ((?x146 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x234 (bvuge ?x146 (_ bv1 32))))
 (let (($x77 (= $x167 $x234)))
 (let (($x184 (=> $x135 $x77)))
 (let (($x31 (= ?x146 (_ bv0 32))))
 (let (($x82 (= $x38 $x31)))
 (let (($x60 (=> $x135 $x82)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x88)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x235)))
 (let (($x136 (= input.spec-%var-l-1.2.0 ?x34)))
 (let (($x84 (=> $x135 $x136)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x179 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x231 (bvuge ?x179 (_ bv1 32))))
 (let (($x133 (= $x135 $x231)))
 (let (($x134 (= ?x179 (_ bv0 32))))
 (let (($x152 (= $x159 $x134)))
 (let (($x199 (and (and (and (and (and (and $x152 $x133) $x112) $x84) $x60) $x126) $x184)))
 (let (($x206 (and (and (and $x199 $x265) $x204) $x209)))
 (let (($x207 (= $x206 true)))
 (let ((?x117 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x163 (= (_ bv0 3) ?x117)))
 (let (($x178 (= $x163 true)))
 (let (($x153 (= $x178 true)))
 (let (($x151 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x236 (= $x151 true)))
 (let (($x121 (= $x236 true)))
 (let (($x149 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x61 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x16 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x61) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x61))))
 (let (($x75 (and true $x16)))
 (let (($x114 (and $x16 $x75)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x105))))
 (let (($x104 (= (bvand ?x54 (_ bv4294967288 32)) ?x54)))
 (let (($x174 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x106 (and $x174 $x104)))
 (let (($x176 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv4 32))) (bvult ?x22 (bvsub ?x22 (_ bv4 32))))))
 (let (($x47 (and (and (and (and (and $x75 $x176) $x174) $x106) $x114) $x149)))
 (let (($x111 (= true $x47)))
 (let (($x161 (not $x11)))
 (let (($x41 (=> $x161 $x111)))
 (let (($x122 (= $x41 true)))
 (let (($x115 (= $x122 true)))
 (let (($x113 (= $x115 true)))
 (let (($x66 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x66 true)))
 (let (($x102 (= $x127 true)))
 (let (($x100 (= $x102 true)))
 (let (($x103 (= $x161 true)))
 (let (($x227 (= $x103 true)))
 (let (($x99 (= $x227 true)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x80)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x89 $x91)))
 (let (($x33 (and $x94 $x129)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x53 $x33)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x160 $x24)))))))
 (let (($x21 (and $x45 $x81)))
 (let (($x19 (= $x21 true)))
 (let (($x93 (= $x19 true)))
 (let (($x95 (= $x93 true)))
 (let (($x140 (and $x95 $x99)))
 (let (($x162 (and $x140 $x100)))
 (let (($x116 (and $x162 $x113)))
 (let (($x177 (and $x116 $x121)))
 (let (($x43 (and $x177 $x153)))
 (let (($x261 (and $x43 $x207)))
 (let (($x305 (and $x261 $x304)))
 (let (($x63 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x306 (and $x63 $x305)))
 (let (($x10 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd ?x22 (_ bv3 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x30 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x10)))))))
 (let (($x35 (=> (and $x161 (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x6 $x10)))))))
 (let (($x50 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x164 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x72 (_ bv1 32))) (or false (or false (and true (or $x142 $x50)))))))
 (let (($x28 (=> (and $x161 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x72 (_ bv1 32)))) (or false (or false (and true (or $x142 $x50)))))))
 (let (($x27 (and $x28 $x35)))
 (let (($x307 (and $x27 $x306)))
 (let (($x311 (=> $x307 $x310)))
 (not $x311))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2 32) (_ bv1 8)) (_ bv9 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv19 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x15 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem ?x15) (concat ?x298 (concat ?x215 ?x222)))))
 (let ((?x316 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x141)))
 (let (($x317 (= (_ bv0 32) ?x316)))
 (let (($x318 (= $x317 true)))
 (let ((?x18 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x251))))
 (let ((?x285 (bvadd ?x246 (_ bv4 32))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x87))))
 (let (($x289 (= (_ bv0 32) ?x288)))
 (let ((?x290 (ite $x289 (_ bv0 32) (_ bv1 32))))
 (let (($x293 (bvuge ?x290 (_ bv1 32))))
 (let (($x187 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x294 (= $x187 $x293)))
 (let (($x126 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x210 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x77 (and $x210 $x126)))
 (let (($x303 (=> $x77 $x294)))
 (let (($x291 (= ?x290 (_ bv0 32))))
 (let (($x259 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x302 (= $x259 $x291)))
 (let (($x292 (=> $x77 $x302)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x256))))
 (let (($x278 (= input.spec-%var-l-1.2.1.2.0 ?x301)))
 (let (($x284 (=> $x77 $x278)))
 (let (($x299 (= (_ bv0 32) ?x246)))
 (let ((?x253 (ite $x299 (_ bv0 32) (_ bv1 32))))
 (let (($x273 (bvuge ?x253 (_ bv1 32))))
 (let (($x274 (= $x126 $x273)))
 (let (($x258 (=> $x210 $x274)))
 (let (($x254 (= ?x253 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x255 (= $x38 $x254)))
 (let (($x300 (=> $x210 $x255)))
 (let (($x249 (= input.spec-%var-l-1.2.0 ?x141)))
 (let (($x241 (=> $x210 $x249)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x223 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x272 (bvuge ?x223 (_ bv1 32))))
 (let (($x220 (= $x210 $x272)))
 (let (($x214 (= ?x223 (_ bv0 32))))
 (let (($x179 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x221 (= $x179 $x214)))
 (let (($x202 (and $x77 $x259)))
 (let (($x270 (not $x202)))
 (let (($x213 (and $x77 $x187)))
 (let (($x201 (not $x213)))
 (let (($x203 (= false false)))
 (let (($x238 (and $x210 $x38)))
 (let (($x39 (=> $x238 $x203)))
 (let (($x128 (=> $x179 $x203)))
 (let (($x309 (and (and (and (and (and (and $x128 $x39) $x201) $x270) $x221) $x220) $x241)))
 (let (($x145 (and (and (and (and (and $x309 $x300) $x258) $x284) $x292) $x303)))
 (let (($x98 (= $x145 true)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x83 (concat ?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x49 (concat ?x137 (concat ?x76 ?x83))))
 (let ((?x265 (bvadd ?x49 (_ bv4 32))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x188))))
 (let (($x193 (= (_ bv0 32) ?x268)))
 (let ((?x195 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (bvuge ?x195 (_ bv1 32))))
 (let (($x260 (= $x187 $x191)))
 (let (($x204 (=> $x77 $x260)))
 (let (($x239 (= ?x195 (_ bv0 32))))
 (let (($x192 (= $x259 $x239)))
 (let (($x190 (=> $x77 $x192)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x23))))
 (let (($x37 (= input.spec-%var-l-1.2.1.2.0 ?x52)))
 (let (($x170 (=> $x77 $x37)))
 (let (($x74 (= (_ bv0 32) ?x49)))
 (let ((?x146 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x146 (_ bv1 32))))
 (let (($x167 (= $x126 $x198)))
 (let (($x234 (=> $x210 $x167)))
 (let (($x31 (= ?x146 (_ bv0 32))))
 (let (($x82 (= $x38 $x31)))
 (let (($x60 (=> $x210 $x82)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x233)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x88)))
 (let (($x84 (= input.spec-%var-l-1.2.0 ?x136)))
 (let (($x212 (=> $x210 $x84)))
 (let (($x152 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x135 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x135 (_ bv1 32))))
 (let (($x112 (= $x210 $x232)))
 (let (($x231 (= ?x135 (_ bv0 32))))
 (let (($x133 (= $x179 $x231)))
 (let (($x205 (and (and (and (and (and (and $x133 $x112) $x128) $x212) $x60) $x39) $x234)))
 (let (($x262 (and (and (and (and (and $x205 $x170) $x190) $x204) $x201) $x270)))
 (let (($x297 (= $x262 true)))
 (let ((?x153 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x43 (= (_ bv0 3) ?x153)))
 (let (($x124 (= $x43 true)))
 (let (($x159 (= $x124 true)))
 (let (($x177 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x182 (= $x177 true)))
 (let (($x117 (= $x182 true)))
 (let (($x108 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x120 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x71 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x120) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x120))))
 (let (($x14 (and true $x71)))
 (let (($x114 (and $x71 $x14)))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x109))))
 (let (($x106 (= (bvand ?x26 (_ bv4294967288 32)) ?x26)))
 (let (($x32 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x119 (and $x32 $x106)))
 (let (($x230 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x122 (and (and (and (and (and $x14 $x230) $x32) $x119) $x114) $x108)))
 (let (($x115 (= true $x122)))
 (let (($x161 (not $x11)))
 (let (($x113 (=> $x161 $x115)))
 (let (($x116 (= $x113 true)))
 (let (($x130 (= $x116 true)))
 (let (($x151 (= $x130 true)))
 (let (($x100 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x162 (= $x100 true)))
 (let (($x156 (= $x162 true)))
 (let (($x61 (= $x156 true)))
 (let (($x140 (= $x161 true)))
 (let (($x101 (= $x140 true)))
 (let (($x66 (= $x101 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x81)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x94 $x129)))
 (let (($x19 (and $x33 $x21)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x160 $x19)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x229)))))))
 (let (($x95 (and $x91 $x93)))
 (let (($x103 (= $x95 true)))
 (let (($x227 (= $x103 true)))
 (let (($x99 (= $x227 true)))
 (let (($x127 (and $x99 $x66)))
 (let (($x107 (and $x127 $x61)))
 (let (($x236 (and $x107 $x151)))
 (let (($x163 (and $x236 $x117)))
 (let (($x118 (and $x163 $x159)))
 (let (($x219 (and $x118 $x297)))
 (let (($x313 (and $x219 $x98)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x314 (and $x90 $x313)))
 (let (($x64 (bvugt ?x9 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd ?x9 (_ bv3 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x63 (=> (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x64)))))))
 (let (($x25 (=> (and $x161 (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x12 $x64)))))))
 (let (($x148 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x20 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x18 (_ bv1 32))) (or false (or false (and true (or $x155 $x148)))))))
 (let (($x110 (=> (and $x161 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x18 (_ bv1 32)))) (or false (or false (and true (or $x155 $x148)))))))
 (let (($x58 (and $x110 $x25)))
 (let (($x315 (and $x58 $x314)))
 (let (($x319 (=> $x315 $x318)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x15 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem ?x15) (concat ?x298 (concat ?x215 ?x222)))))
 (let ((?x316 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x141)))
 (let (($x317 (= (_ bv0 32) ?x316)))
 (let (($x318 (= $x317 true)))
 (let ((?x18 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x251))))
 (let ((?x285 (bvadd ?x246 (_ bv4 32))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x87))))
 (let (($x289 (= (_ bv0 32) ?x288)))
 (let ((?x290 (ite $x289 (_ bv0 32) (_ bv1 32))))
 (let (($x293 (bvuge ?x290 (_ bv1 32))))
 (let (($x187 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x294 (= $x187 $x293)))
 (let (($x126 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x210 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x77 (and $x210 $x126)))
 (let (($x303 (=> $x77 $x294)))
 (let (($x291 (= ?x290 (_ bv0 32))))
 (let (($x259 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x302 (= $x259 $x291)))
 (let (($x292 (=> $x77 $x302)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x256))))
 (let (($x278 (= input.spec-%var-l-1.2.1.2.0 ?x301)))
 (let (($x284 (=> $x77 $x278)))
 (let (($x299 (= (_ bv0 32) ?x246)))
 (let ((?x253 (ite $x299 (_ bv0 32) (_ bv1 32))))
 (let (($x273 (bvuge ?x253 (_ bv1 32))))
 (let (($x274 (= $x126 $x273)))
 (let (($x258 (=> $x210 $x274)))
 (let (($x254 (= ?x253 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x255 (= $x38 $x254)))
 (let (($x300 (=> $x210 $x255)))
 (let (($x249 (= input.spec-%var-l-1.2.0 ?x141)))
 (let (($x241 (=> $x210 $x249)))
 (let (($x11 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x223 (ite $x11 (_ bv0 32) (_ bv1 32))))
 (let (($x272 (bvuge ?x223 (_ bv1 32))))
 (let (($x220 (= $x210 $x272)))
 (let (($x214 (= ?x223 (_ bv0 32))))
 (let (($x179 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x221 (= $x179 $x214)))
 (let (($x202 (and $x77 $x259)))
 (let (($x270 (not $x202)))
 (let (($x213 (and $x77 $x187)))
 (let (($x201 (not $x213)))
 (let (($x203 (= false false)))
 (let (($x238 (and $x210 $x38)))
 (let (($x39 (=> $x238 $x203)))
 (let (($x128 (=> $x179 $x203)))
 (let (($x309 (and (and (and (and (and (and $x128 $x39) $x201) $x270) $x221) $x220) $x241)))
 (let (($x145 (and (and (and (and (and $x309 $x300) $x258) $x284) $x292) $x303)))
 (let (($x98 (= $x145 true)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x83 (concat ?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x49 (concat ?x137 (concat ?x76 ?x83))))
 (let ((?x265 (bvadd ?x49 (_ bv4 32))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x188))))
 (let (($x193 (= (_ bv0 32) ?x268)))
 (let ((?x195 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (bvuge ?x195 (_ bv1 32))))
 (let (($x260 (= $x187 $x191)))
 (let (($x204 (=> $x77 $x260)))
 (let (($x239 (= ?x195 (_ bv0 32))))
 (let (($x192 (= $x259 $x239)))
 (let (($x190 (=> $x77 $x192)))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x23))))
 (let (($x37 (= input.spec-%var-l-1.2.1.2.0 ?x52)))
 (let (($x170 (=> $x77 $x37)))
 (let (($x74 (= (_ bv0 32) ?x49)))
 (let ((?x146 (ite $x74 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x146 (_ bv1 32))))
 (let (($x167 (= $x126 $x198)))
 (let (($x234 (=> $x210 $x167)))
 (let (($x31 (= ?x146 (_ bv0 32))))
 (let (($x82 (= $x38 $x31)))
 (let (($x60 (=> $x210 $x82)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x233)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x88)))
 (let (($x84 (= input.spec-%var-l-1.2.0 ?x136)))
 (let (($x212 (=> $x210 $x84)))
 (let (($x152 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x135 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x135 (_ bv1 32))))
 (let (($x112 (= $x210 $x232)))
 (let (($x231 (= ?x135 (_ bv0 32))))
 (let (($x133 (= $x179 $x231)))
 (let (($x205 (and (and (and (and (and (and $x133 $x112) $x128) $x212) $x60) $x39) $x234)))
 (let (($x262 (and (and (and (and (and $x205 $x170) $x190) $x204) $x201) $x270)))
 (let (($x297 (= $x262 true)))
 (let ((?x153 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x43 (= (_ bv0 3) ?x153)))
 (let (($x124 (= $x43 true)))
 (let (($x159 (= $x124 true)))
 (let (($x177 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x182 (= $x177 true)))
 (let (($x117 (= $x182 true)))
 (let (($x108 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x120 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x71 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x120) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x120))))
 (let (($x14 (and true $x71)))
 (let (($x114 (and $x71 $x14)))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x109))))
 (let (($x106 (= (bvand ?x26 (_ bv4294967288 32)) ?x26)))
 (let (($x32 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x119 (and $x32 $x106)))
 (let (($x230 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x122 (and (and (and (and (and $x14 $x230) $x32) $x119) $x114) $x108)))
 (let (($x115 (= true $x122)))
 (let (($x161 (not $x11)))
 (let (($x113 (=> $x161 $x115)))
 (let (($x116 (= $x113 true)))
 (let (($x130 (= $x116 true)))
 (let (($x151 (= $x130 true)))
 (let (($x100 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x162 (= $x100 true)))
 (let (($x156 (= $x162 true)))
 (let (($x61 (= $x156 true)))
 (let (($x140 (= $x161 true)))
 (let (($x101 (= $x140 true)))
 (let (($x66 (= $x101 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x81)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x94 $x129)))
 (let (($x19 (and $x33 $x21)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x160 $x19)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x229)))))))
 (let (($x95 (and $x91 $x93)))
 (let (($x103 (= $x95 true)))
 (let (($x227 (= $x103 true)))
 (let (($x99 (= $x227 true)))
 (let (($x127 (and $x99 $x66)))
 (let (($x107 (and $x127 $x61)))
 (let (($x236 (and $x107 $x151)))
 (let (($x163 (and $x236 $x117)))
 (let (($x118 (and $x163 $x159)))
 (let (($x219 (and $x118 $x297)))
 (let (($x313 (and $x219 $x98)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x314 (and $x90 $x313)))
 (let (($x64 (bvugt ?x9 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd ?x9 (_ bv3 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x63 (=> (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x64)))))))
 (let (($x25 (=> (and $x161 (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x12 $x64)))))))
 (let (($x148 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x20 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x18 (_ bv1 32))) (or false (or false (and true (or $x155 $x148)))))))
 (let (($x110 (=> (and $x161 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x18 (_ bv1 32)))) (or false (or false (and true (or $x155 $x148)))))))
 (let (($x58 (and $x110 $x25)))
 (let (($x315 (and $x58 $x314)))
 (let (($x319 (=> $x315 $x318)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4194307 32) (_ bv64 8)) (_ bv2147483651 32) (_ bv64 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2048 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0000000d)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x00000007
                                #xe5)
                         #x00000010
                         #x52)
                  #x00000005
                  #x88)))
  (store (store (store a!1 #x0000000b #x52) #x00000005 #x88) #x00000007 #xe5)))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x52000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x207 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x148 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x226 (concat (select input.dst.llvm-mem ?x148) (concat ?x137 (concat ?x38 ?x207)))))
 (let ((?x168 ((_ extract 24 0) ?x226)))
 (let ((?x70 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x168)))
 (let (($x83 (= (_ bv0 25) ?x70)))
 (let (($x166 (= $x83 true)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x46 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x46 (_ bv1 32))))
 (let (($x203 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x13 (= $x203 $x55)))
 (let (($x68 (= ?x46 (_ bv0 32))))
 (let (($x231 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x123 (= $x231 $x68)))
 (let (($x233 (and $x123 $x13)))
 (let (($x88 (= $x233 true)))
 (let (($x210 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x232 (ite $x210 (_ bv0 32) (_ bv1 32))))
 (let (($x128 (bvuge ?x232 (_ bv1 32))))
 (let (($x206 (= $x203 $x128)))
 (let (($x112 (= ?x232 (_ bv0 32))))
 (let (($x209 (= $x231 $x112)))
 (let (($x183 (and $x209 $x206)))
 (let (($x235 (= $x183 true)))
 (let (($x125 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x179 (= $x125 true)))
 (let (($x134 (= $x179 true)))
 (let ((?x163 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (= (_ bv0 3) ?x163)))
 (let (($x153 (= $x178 true)))
 (let (($x43 (= $x153 true)))
 (let (($x41 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x75 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x75) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x75))))
 (let (($x59 (and true $x176)))
 (let (($x111 (and $x176 $x59)))
 (let ((?x138 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem ?x138))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv2 32))) ?x105))))
 (let (($x106 (= (bvand ?x26 (_ bv4294967288 32)) ?x26)))
 (let (($x47 (= (bvand ?x138 (_ bv4294967292 32)) ?x138)))
 (let (($x119 (and $x47 $x106)))
 (let (($x174 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x138 (bvsub ?x138 (_ bv4 32))) (bvult ?x138 (bvsub ?x138 (_ bv4 32))))))
 (let (($x113 (and (and (and (and (and $x59 $x174) $x47) $x119) $x111) $x41)))
 (let (($x116 (= true $x113)))
 (let (($x42 (not $x121)))
 (let (($x130 (=> $x42 $x116)))
 (let (($x151 (= $x130 true)))
 (let (($x236 (= $x151 true)))
 (let (($x177 (= $x236 true)))
 (let (($x156 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x156 true)))
 (let (($x107 (= $x61 true)))
 (let (($x16 (= $x107 true)))
 (let (($x66 (= $x42 true)))
 (let (($x127 (= $x66 true)))
 (let (($x102 (= $x127 true)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x19)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x129 $x81)))
 (let (($x95 (and $x21 $x93)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x154 $x95)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x53)))))))
 (let (($x227 (and $x80 $x103)))
 (let (($x99 (= $x227 true)))
 (let (($x140 (= $x99 true)))
 (let (($x101 (= $x140 true)))
 (let (($x100 (and $x101 $x102)))
 (let (($x120 (and $x100 $x16)))
 (let (($x182 (and $x120 $x177)))
 (let (($x124 (and $x182 $x43)))
 (let (($x152 (and $x124 $x134)))
 (let (($x34 (and $x152 $x235)))
 (let (($x136 (and $x34 $x88)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x84 (and $x24 $x136)))
 (let (($x30 (bvugt ?x138 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd ?x138 (_ bv3 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x92 (=> (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x30)))))))
 (let (($x10 (=> (and $x42 (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x69 $x30)))))))
 (let (($x164 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x6 (=> $x9 (or false (or false (and true (or $x8 $x164)))))))
 (let (($x62 (=> (and $x42 $x9) (or false (or false (and true (or $x8 $x164)))))))
 (let (($x158 (and $x62 $x10)))
 (let (($x212 (and $x158 $x84)))
 (let (($x49 (=> $x212 $x166)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x207 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x148 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x226 (concat (select input.dst.llvm-mem ?x148) (concat ?x137 (concat ?x38 ?x207)))))
 (let ((?x168 ((_ extract 24 0) ?x226)))
 (let ((?x70 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x168)))
 (let (($x83 (= (_ bv0 25) ?x70)))
 (let (($x166 (= $x83 true)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x46 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x46 (_ bv1 32))))
 (let (($x203 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x13 (= $x203 $x55)))
 (let (($x68 (= ?x46 (_ bv0 32))))
 (let (($x231 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x123 (= $x231 $x68)))
 (let (($x233 (and $x123 $x13)))
 (let (($x88 (= $x233 true)))
 (let (($x210 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x232 (ite $x210 (_ bv0 32) (_ bv1 32))))
 (let (($x128 (bvuge ?x232 (_ bv1 32))))
 (let (($x206 (= $x203 $x128)))
 (let (($x112 (= ?x232 (_ bv0 32))))
 (let (($x209 (= $x231 $x112)))
 (let (($x183 (and $x209 $x206)))
 (let (($x235 (= $x183 true)))
 (let (($x125 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x179 (= $x125 true)))
 (let (($x134 (= $x179 true)))
 (let ((?x163 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (= (_ bv0 3) ?x163)))
 (let (($x153 (= $x178 true)))
 (let (($x43 (= $x153 true)))
 (let (($x41 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x75 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x75) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x75))))
 (let (($x59 (and true $x176)))
 (let (($x111 (and $x176 $x59)))
 (let ((?x138 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem ?x138))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv2 32))) ?x105))))
 (let (($x106 (= (bvand ?x26 (_ bv4294967288 32)) ?x26)))
 (let (($x47 (= (bvand ?x138 (_ bv4294967292 32)) ?x138)))
 (let (($x119 (and $x47 $x106)))
 (let (($x174 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x138 (bvsub ?x138 (_ bv4 32))) (bvult ?x138 (bvsub ?x138 (_ bv4 32))))))
 (let (($x113 (and (and (and (and (and $x59 $x174) $x47) $x119) $x111) $x41)))
 (let (($x116 (= true $x113)))
 (let (($x42 (not $x121)))
 (let (($x130 (=> $x42 $x116)))
 (let (($x151 (= $x130 true)))
 (let (($x236 (= $x151 true)))
 (let (($x177 (= $x236 true)))
 (let (($x156 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x156 true)))
 (let (($x107 (= $x61 true)))
 (let (($x16 (= $x107 true)))
 (let (($x66 (= $x42 true)))
 (let (($x127 (= $x66 true)))
 (let (($x102 (= $x127 true)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x19)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x129 $x81)))
 (let (($x95 (and $x21 $x93)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x154 $x95)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x53)))))))
 (let (($x227 (and $x80 $x103)))
 (let (($x99 (= $x227 true)))
 (let (($x140 (= $x99 true)))
 (let (($x101 (= $x140 true)))
 (let (($x100 (and $x101 $x102)))
 (let (($x120 (and $x100 $x16)))
 (let (($x182 (and $x120 $x177)))
 (let (($x124 (and $x182 $x43)))
 (let (($x152 (and $x124 $x134)))
 (let (($x34 (and $x152 $x235)))
 (let (($x136 (and $x34 $x88)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x84 (and $x24 $x136)))
 (let (($x30 (bvugt ?x138 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd ?x138 (_ bv3 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x92 (=> (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x30)))))))
 (let (($x10 (=> (and $x42 (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x69 $x30)))))))
 (let (($x164 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x6 (=> $x9 (or false (or false (and true (or $x8 $x164)))))))
 (let (($x62 (=> (and $x42 $x9) (or false (or false (and true (or $x8 $x164)))))))
 (let (($x158 (and $x62 $x10)))
 (let (($x212 (and $x158 $x84)))
 (let (($x49 (=> $x212 $x166)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 #b0000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8364024 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8364024 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25) (_ bv0 25))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv16777215 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6110000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xffd1fbf0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #xffd1fbf1 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25)
    #b0000000000000000000000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6110000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6110003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x18 (concat (select input.dst.llvm-mem ?x28) (concat ?x74 (concat ?x83 ?x168)))))
 (let ((?x146 ((_ extract 24 0) ?x18)))
 (let ((?x31 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x146)))
 (let (($x82 (= (_ bv0 25) ?x31)))
 (let (($x60 (= $x82 true)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x136 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x76 (bvuge ?x136 (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (= $x183 $x76)))
 (let (($x84 (= ?x136 (_ bv0 32))))
 (let (($x232 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x212 (= $x232 $x84)))
 (let (($x38 (and (and (and (not $x232) (not $x183)) $x212) $x7)))
 (let (($x207 (= $x38 true)))
 (let (($x68 (not $x183)))
 (let (($x46 (not $x232)))
 (let (($x209 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x203 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x203 (_ bv1 32))))
 (let (($x34 (= $x183 $x235)))
 (let (($x128 (= ?x203 (_ bv0 32))))
 (let (($x206 (= $x232 $x128)))
 (let (($x13 (and (and (and $x206 $x34) $x46) $x68)))
 (let (($x233 (= $x13 true)))
 (let (($x152 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x135 (= $x152 true)))
 (let (($x231 (= $x135 true)))
 (let ((?x43 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x124 (= (_ bv0 3) ?x43)))
 (let (($x159 (= $x124 true)))
 (let (($x118 (= $x159 true)))
 (let (($x114 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x14 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x181 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x14) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x14))))
 (let (($x230 (and true $x181)))
 (let (($x111 (and $x181 $x230)))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x175))))
 (let (($x119 (= (bvand ?x86 (_ bv4294967288 32)) ?x86)))
 (let (($x57 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x122 (and $x57 $x119)))
 (let (($x32 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x151 (and (and (and (and (and $x230 $x32) $x57) $x122) $x111) $x114)))
 (let (($x236 (= true $x151)))
 (let (($x42 (not $x121)))
 (let (($x177 (=> $x42 $x236)))
 (let (($x182 (= $x177 true)))
 (let (($x117 (= $x182 true)))
 (let (($x163 (= $x117 true)))
 (let (($x16 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x120 (= $x16 true)))
 (let (($x165 (= $x120 true)))
 (let (($x75 (= $x165 true)))
 (let (($x100 (= $x42 true)))
 (let (($x162 (= $x100 true)))
 (let (($x156 (= $x162 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x103)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x21 $x93)))
 (let (($x99 (and $x95 $x227)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x65 $x99)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x160)))))))
 (let (($x101 (and $x81 $x140)))
 (let (($x66 (= $x101 true)))
 (let (($x127 (= $x66 true)))
 (let (($x102 (= $x127 true)))
 (let (($x61 (and $x102 $x156)))
 (let (($x71 (and $x61 $x75)))
 (let (($x178 (and $x71 $x163)))
 (let (($x125 (and $x178 $x118)))
 (let (($x133 (and $x125 $x231)))
 (let (($x88 (and $x133 $x233)))
 (let (($x224 (and $x88 $x207)))
 (let (($x229 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x169 (and $x229 $x224)))
 (let (($x63 (bvugt ?x9 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd ?x9 (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x24 (=> (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x63)))))))
 (let (($x58 (=> (and $x42 (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x27 $x63)))))))
 (let (($x20 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x56 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x12 (=> $x56 (or false (or false (and true (or $x22 $x20)))))))
 (let (($x50 (=> (and $x42 $x56) (or false (or false (and true (or $x22 $x20)))))))
 (let (($x64 (and $x50 $x58)))
 (let (($x226 (and $x64 $x169)))
 (let (($x261 (=> $x226 $x60)))
 (not $x261))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x18 (concat (select input.dst.llvm-mem ?x28) (concat ?x74 (concat ?x83 ?x168)))))
 (let ((?x146 ((_ extract 24 0) ?x18)))
 (let ((?x31 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x146)))
 (let (($x82 (= (_ bv0 25) ?x31)))
 (let (($x60 (= $x82 true)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x136 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x76 (bvuge ?x136 (_ bv1 32))))
 (let (($x183 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (= $x183 $x76)))
 (let (($x84 (= ?x136 (_ bv0 32))))
 (let (($x232 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x212 (= $x232 $x84)))
 (let (($x38 (and (and (and (not $x232) (not $x183)) $x212) $x7)))
 (let (($x207 (= $x38 true)))
 (let (($x68 (not $x183)))
 (let (($x46 (not $x232)))
 (let (($x209 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x203 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x203 (_ bv1 32))))
 (let (($x34 (= $x183 $x235)))
 (let (($x128 (= ?x203 (_ bv0 32))))
 (let (($x206 (= $x232 $x128)))
 (let (($x13 (and (and (and $x206 $x34) $x46) $x68)))
 (let (($x233 (= $x13 true)))
 (let (($x152 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x135 (= $x152 true)))
 (let (($x231 (= $x135 true)))
 (let ((?x43 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x124 (= (_ bv0 3) ?x43)))
 (let (($x159 (= $x124 true)))
 (let (($x118 (= $x159 true)))
 (let (($x114 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x14 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x181 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x14) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x14))))
 (let (($x230 (and true $x181)))
 (let (($x111 (and $x181 $x230)))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x175))))
 (let (($x119 (= (bvand ?x86 (_ bv4294967288 32)) ?x86)))
 (let (($x57 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x122 (and $x57 $x119)))
 (let (($x32 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x151 (and (and (and (and (and $x230 $x32) $x57) $x122) $x111) $x114)))
 (let (($x236 (= true $x151)))
 (let (($x42 (not $x121)))
 (let (($x177 (=> $x42 $x236)))
 (let (($x182 (= $x177 true)))
 (let (($x117 (= $x182 true)))
 (let (($x163 (= $x117 true)))
 (let (($x16 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x120 (= $x16 true)))
 (let (($x165 (= $x120 true)))
 (let (($x75 (= $x165 true)))
 (let (($x100 (= $x42 true)))
 (let (($x162 (= $x100 true)))
 (let (($x156 (= $x162 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x103)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x21 $x93)))
 (let (($x99 (and $x95 $x227)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x65 $x99)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x160)))))))
 (let (($x101 (and $x81 $x140)))
 (let (($x66 (= $x101 true)))
 (let (($x127 (= $x66 true)))
 (let (($x102 (= $x127 true)))
 (let (($x61 (and $x102 $x156)))
 (let (($x71 (and $x61 $x75)))
 (let (($x178 (and $x71 $x163)))
 (let (($x125 (and $x178 $x118)))
 (let (($x133 (and $x125 $x231)))
 (let (($x88 (and $x133 $x233)))
 (let (($x224 (and $x88 $x207)))
 (let (($x229 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x169 (and $x229 $x224)))
 (let (($x63 (bvugt ?x9 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd ?x9 (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x24 (=> (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x63)))))))
 (let (($x58 (=> (and $x42 (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x27 $x63)))))))
 (let (($x20 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x56 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x12 (=> $x56 (or false (or false (and true (or $x22 $x20)))))))
 (let (($x50 (=> (and $x42 $x56) (or false (or false (and true (or $x22 $x20)))))))
 (let (($x64 (and $x50 $x58)))
 (let (($x226 (and $x64 $x169)))
 (let (($x261 (=> $x226 $x60)))
 (not $x261))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x110 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x146 (concat (select input.dst.llvm-mem ?x110) (concat ?x166 (concat ?x70 ?x49)))))
 (let ((?x31 ((_ extract 24 0) ?x146)))
 (let ((?x82 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x31)))
 (let (($x60 (= (_ bv0 25) ?x82)))
 (let (($x261 (= $x60 true)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x84 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x76 (bvuge ?x84 (_ bv1 32))))
 (let (($x123 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (= $x123 $x76)))
 (let (($x212 (= ?x84 (_ bv0 32))))
 (let (($x203 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x51 (= $x203 $x212)))
 (let (($x68 (= false false)))
 (let (($x13 (=> $x203 $x68)))
 (let (($x207 (and (and $x13 $x51) $x7)))
 (let (($x224 (= $x207 true)))
 (let (($x206 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x183 (ite $x206 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x183 (_ bv1 32))))
 (let (($x55 (= $x123 $x46)))
 (let (($x235 (= ?x183 (_ bv0 32))))
 (let (($x34 (= $x203 $x235)))
 (let (($x88 (and (and $x34 $x55) $x13)))
 (let (($x137 (= $x88 true)))
 (let (($x133 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x210 (= $x133 true)))
 (let (($x232 (= $x210 true)))
 (let ((?x118 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x125 (= (_ bv0 3) ?x118)))
 (let (($x179 (= $x125 true)))
 (let (($x134 (= $x179 true)))
 (let (($x115 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x171 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x171) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x171))))
 (let (($x132 (and true $x149)))
 (let (($x111 (and $x149 $x132)))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x67))))
 (let (($x122 (= (bvand ?x104 (_ bv4294967288 32)) ?x104)))
 (let (($x48 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x116 (and $x48 $x122)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x182 (and (and (and (and (and $x132 $x108) $x48) $x116) $x111) $x115)))
 (let (($x117 (= true $x182)))
 (let (($x42 (not $x121)))
 (let (($x163 (=> $x42 $x117)))
 (let (($x178 (= $x163 true)))
 (let (($x153 (= $x178 true)))
 (let (($x43 (= $x153 true)))
 (let (($x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x71 (= $x75 true)))
 (let (($x176 (= $x71 true)))
 (let (($x14 (= $x176 true)))
 (let (($x61 (= $x42 true)))
 (let (($x107 (= $x61 true)))
 (let (($x16 (= $x107 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x140)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x227 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x95 $x227)))
 (let (($x66 (and $x99 $x101)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x78 $x66)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x129)))))))
 (let (($x102 (and $x93 $x127)))
 (let (($x100 (= $x102 true)))
 (let (($x162 (= $x100 true)))
 (let (($x156 (= $x162 true)))
 (let (($x120 (and $x156 $x16)))
 (let (($x59 (and $x120 $x14)))
 (let (($x124 (and $x59 $x43)))
 (let (($x152 (and $x124 $x134)))
 (let (($x112 (and $x152 $x232)))
 (let (($x136 (and $x112 $x137)))
 (let (($x169 (and $x136 $x224)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x226 (and $x89 $x169)))
 (let (($x10 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd ?x56 (_ bv3 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x229 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x10)))))))
 (let (($x90 (=> (and $x42 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x92 $x10)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x69 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x30 (=> $x69 (or false (or false (and true (or $x6 $x62)))))))
 (let (($x148 (=> (and $x42 $x69) (or false (or false (and true (or $x6 $x62)))))))
 (let (($x35 (and $x148 $x90)))
 (let (($x36 (and $x35 $x226)))
 (let (($x238 (=> $x36 $x261)))
 (not $x238))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x110 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x146 (concat (select input.dst.llvm-mem ?x110) (concat ?x166 (concat ?x70 ?x49)))))
 (let ((?x31 ((_ extract 24 0) ?x146)))
 (let ((?x82 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x31)))
 (let (($x60 (= (_ bv0 25) ?x82)))
 (let (($x261 (= $x60 true)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x84 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x76 (bvuge ?x84 (_ bv1 32))))
 (let (($x123 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (= $x123 $x76)))
 (let (($x212 (= ?x84 (_ bv0 32))))
 (let (($x203 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x51 (= $x203 $x212)))
 (let (($x68 (= false false)))
 (let (($x13 (=> $x203 $x68)))
 (let (($x207 (and (and $x13 $x51) $x7)))
 (let (($x224 (= $x207 true)))
 (let (($x206 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x183 (ite $x206 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x183 (_ bv1 32))))
 (let (($x55 (= $x123 $x46)))
 (let (($x235 (= ?x183 (_ bv0 32))))
 (let (($x34 (= $x203 $x235)))
 (let (($x88 (and (and $x34 $x55) $x13)))
 (let (($x137 (= $x88 true)))
 (let (($x133 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x210 (= $x133 true)))
 (let (($x232 (= $x210 true)))
 (let ((?x118 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x125 (= (_ bv0 3) ?x118)))
 (let (($x179 (= $x125 true)))
 (let (($x134 (= $x179 true)))
 (let (($x115 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x171 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x171) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x171))))
 (let (($x132 (and true $x149)))
 (let (($x111 (and $x149 $x132)))
 (let ((?x56 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x67))))
 (let (($x122 (= (bvand ?x104 (_ bv4294967288 32)) ?x104)))
 (let (($x48 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x116 (and $x48 $x122)))
 (let (($x108 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 (_ bv4 32))) (bvult ?x56 (bvsub ?x56 (_ bv4 32))))))
 (let (($x182 (and (and (and (and (and $x132 $x108) $x48) $x116) $x111) $x115)))
 (let (($x117 (= true $x182)))
 (let (($x42 (not $x121)))
 (let (($x163 (=> $x42 $x117)))
 (let (($x178 (= $x163 true)))
 (let (($x153 (= $x178 true)))
 (let (($x43 (= $x153 true)))
 (let (($x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x71 (= $x75 true)))
 (let (($x176 (= $x71 true)))
 (let (($x14 (= $x176 true)))
 (let (($x61 (= $x42 true)))
 (let (($x107 (= $x61 true)))
 (let (($x16 (= $x107 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x140)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x227 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x95 $x227)))
 (let (($x66 (and $x99 $x101)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x78 $x66)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x129)))))))
 (let (($x102 (and $x93 $x127)))
 (let (($x100 (= $x102 true)))
 (let (($x162 (= $x100 true)))
 (let (($x156 (= $x162 true)))
 (let (($x120 (and $x156 $x16)))
 (let (($x59 (and $x120 $x14)))
 (let (($x124 (and $x59 $x43)))
 (let (($x152 (and $x124 $x134)))
 (let (($x112 (and $x152 $x232)))
 (let (($x136 (and $x112 $x137)))
 (let (($x169 (and $x136 $x224)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x226 (and $x89 $x169)))
 (let (($x10 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd ?x56 (_ bv3 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x229 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x10)))))))
 (let (($x90 (=> (and $x42 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x92 $x10)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x69 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x30 (=> $x69 (or false (or false (and true (or $x6 $x62)))))))
 (let (($x148 (=> (and $x42 $x69) (or false (or false (and true (or $x6 $x62)))))))
 (let (($x35 (and $x148 $x90)))
 (let (($x36 (and $x35 $x226)))
 (let (($x238 (=> $x36 $x261)))
 (not $x238))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 #b0000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6110000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xffd1fbf0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #xffd1fbf1 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25)
    #b0000000000000000000000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6110000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6110003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8364024 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8364024 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25) (_ bv0 25))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16777212 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv16777215 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x138 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x11 (concat (select input.dst.llvm-mem ?x138) (concat ?x60 (concat ?x146 ?x83)))))
 (let ((?x131 ((_ extract 24 0) ?x11)))
 (let ((?x33 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x131)))
 (let (($x17 (= (_ bv0 25) ?x33)))
 (let (($x94 (= $x17 true)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x7 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge ?x7 (_ bv1 32))))
 (let (($x233 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x226 (= $x233 $x169)))
 (let (($x207 (= ?x7 (_ bv0 32))))
 (let (($x183 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x224 (= $x183 $x207)))
 (let (($x168 (and (and (and (not $x233) (=> $x183 (= false false))) $x224) $x226)))
 (let (($x166 (= $x168 true)))
 (let (($x137 (= false false)))
 (let (($x136 (=> $x183 $x137)))
 (let (($x88 (not $x233)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x123 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x123 (_ bv1 32))))
 (let (($x13 (= $x233 $x68)))
 (let (($x46 (= ?x123 (_ bv0 32))))
 (let (($x55 (= $x183 $x46)))
 (let (($x51 (and (and (and $x55 $x13) $x88) $x136)))
 (let (($x38 (= $x51 true)))
 (let (($x112 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x209 (= $x112 true)))
 (let (($x203 (= $x209 true)))
 (let ((?x134 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x152 (= (_ bv0 3) ?x134)))
 (let (($x135 (= $x152 true)))
 (let (($x231 (= $x135 true)))
 (let (($x130 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x174 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x225 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x174) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x174))))
 (let (($x41 (and true $x225)))
 (let (($x111 (and $x225 $x41)))
 (let ((?x69 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem ?x69))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv2 32))) ?x54))))
 (let (($x116 (= (bvand ?x106 (_ bv4294967288 32)) ?x106)))
 (let (($x26 (= (bvand ?x69 (_ bv4294967292 32)) ?x69)))
 (let (($x236 (and $x26 $x116)))
 (let (($x113 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x69 (bvsub ?x69 (_ bv4 32))) (bvult ?x69 (bvsub ?x69 (_ bv4 32))))))
 (let (($x178 (and (and (and (and (and $x41 $x113) $x26) $x236) $x111) $x130)))
 (let (($x153 (= true $x178)))
 (let (($x42 (not $x121)))
 (let (($x43 (=> $x42 $x153)))
 (let (($x124 (= $x43 true)))
 (let (($x159 (= $x124 true)))
 (let (($x118 (= $x159 true)))
 (let (($x14 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x59 (= $x14 true)))
 (let (($x181 (= $x59 true)))
 (let (($x171 (= $x181 true)))
 (let (($x120 (= $x42 true)))
 (let (($x165 (= $x120 true)))
 (let (($x75 (= $x165 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x127)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x99 $x101)))
 (let (($x100 (and $x66 $x102)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x154 $x100)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x227 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x21)))))))
 (let (($x156 (and $x227 $x162)))
 (let (($x61 (= $x156 true)))
 (let (($x107 (= $x61 true)))
 (let (($x16 (= $x107 true)))
 (let (($x71 (and $x16 $x75)))
 (let (($x230 (and $x71 $x171)))
 (let (($x125 (and $x230 $x118)))
 (let (($x133 (and $x125 $x231)))
 (let (($x128 (and $x133 $x203)))
 (let (($x76 (and $x128 $x38)))
 (let (($x74 (and $x76 $x166)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x70 (and $x80 $x74)))
 (let (($x58 (bvugt ?x69 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd ?x69 (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x89 (=> (bvule ?x69 (bvsub (bvadd ?x69 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x58)))))))
 (let (($x96 (=> (and $x42 (bvule ?x69 (bvsub (bvadd ?x69 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x24 $x58)))))))
 (let (($x50 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x27 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x63 (=> $x27 (or false (or false (and true (or $x12 $x50)))))))
 (let (($x28 (=> (and $x42 $x27) (or false (or false (and true (or $x12 $x50)))))))
 (let (($x25 (and $x28 $x96)))
 (let (($x49 (and $x25 $x70)))
 (let (($x142 (=> $x49 $x94)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x138 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x11 (concat (select input.dst.llvm-mem ?x138) (concat ?x60 (concat ?x146 ?x83)))))
 (let ((?x131 ((_ extract 24 0) ?x11)))
 (let ((?x33 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x131)))
 (let (($x17 (= (_ bv0 25) ?x33)))
 (let (($x94 (= $x17 true)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x7 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge ?x7 (_ bv1 32))))
 (let (($x233 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x226 (= $x233 $x169)))
 (let (($x207 (= ?x7 (_ bv0 32))))
 (let (($x183 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x224 (= $x183 $x207)))
 (let (($x168 (and (and (and (not $x233) (=> $x183 (= false false))) $x224) $x226)))
 (let (($x166 (= $x168 true)))
 (let (($x137 (= false false)))
 (let (($x136 (=> $x183 $x137)))
 (let (($x88 (not $x233)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x123 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x123 (_ bv1 32))))
 (let (($x13 (= $x233 $x68)))
 (let (($x46 (= ?x123 (_ bv0 32))))
 (let (($x55 (= $x183 $x46)))
 (let (($x51 (and (and (and $x55 $x13) $x88) $x136)))
 (let (($x38 (= $x51 true)))
 (let (($x112 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x209 (= $x112 true)))
 (let (($x203 (= $x209 true)))
 (let ((?x134 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x152 (= (_ bv0 3) ?x134)))
 (let (($x135 (= $x152 true)))
 (let (($x231 (= $x135 true)))
 (let (($x130 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x174 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x225 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x174) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x174))))
 (let (($x41 (and true $x225)))
 (let (($x111 (and $x225 $x41)))
 (let ((?x69 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem ?x69))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv2 32))) ?x54))))
 (let (($x116 (= (bvand ?x106 (_ bv4294967288 32)) ?x106)))
 (let (($x26 (= (bvand ?x69 (_ bv4294967292 32)) ?x69)))
 (let (($x236 (and $x26 $x116)))
 (let (($x113 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x69 (bvsub ?x69 (_ bv4 32))) (bvult ?x69 (bvsub ?x69 (_ bv4 32))))))
 (let (($x178 (and (and (and (and (and $x41 $x113) $x26) $x236) $x111) $x130)))
 (let (($x153 (= true $x178)))
 (let (($x42 (not $x121)))
 (let (($x43 (=> $x42 $x153)))
 (let (($x124 (= $x43 true)))
 (let (($x159 (= $x124 true)))
 (let (($x118 (= $x159 true)))
 (let (($x14 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x59 (= $x14 true)))
 (let (($x181 (= $x59 true)))
 (let (($x171 (= $x181 true)))
 (let (($x120 (= $x42 true)))
 (let (($x165 (= $x120 true)))
 (let (($x75 (= $x165 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x127)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x99 $x101)))
 (let (($x100 (and $x66 $x102)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x154 $x100)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x227 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x21)))))))
 (let (($x156 (and $x227 $x162)))
 (let (($x61 (= $x156 true)))
 (let (($x107 (= $x61 true)))
 (let (($x16 (= $x107 true)))
 (let (($x71 (and $x16 $x75)))
 (let (($x230 (and $x71 $x171)))
 (let (($x125 (and $x230 $x118)))
 (let (($x133 (and $x125 $x231)))
 (let (($x128 (and $x133 $x203)))
 (let (($x76 (and $x128 $x38)))
 (let (($x74 (and $x76 $x166)))
 (let (($x80 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x70 (and $x80 $x74)))
 (let (($x58 (bvugt ?x69 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd ?x69 (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x89 (=> (bvule ?x69 (bvsub (bvadd ?x69 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x58)))))))
 (let (($x96 (=> (and $x42 (bvule ?x69 (bvsub (bvadd ?x69 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x24 $x58)))))))
 (let (($x50 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x27 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x63 (=> $x27 (or false (or false (and true (or $x12 $x50)))))))
 (let (($x28 (=> (and $x42 $x27) (or false (or false (and true (or $x12 $x50)))))))
 (let (($x25 (and $x28 $x96)))
 (let (($x49 (and $x25 $x70)))
 (let (($x142 (=> $x49 $x94)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x223 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x9 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x216 (concat (select input.dst.llvm-mem ?x9) (concat ?x220 (concat ?x221 ?x223)))))
 (let ((?x98 ((_ extract 24 0) ?x216)))
 (let ((?x313 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x98)))
 (let (($x314 (= (_ bv0 25) ?x313)))
 (let (($x315 (= $x314 true)))
 (let ((?x6 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem ?x6))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv2 32))) ?x250))))
 (let ((?x85 (bvadd ?x244 (_ bv4 32))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x144))))
 (let (($x285 (= (_ bv0 32) ?x312)))
 (let ((?x286 (ite $x285 (_ bv0 32) (_ bv1 32))))
 (let (($x282 (bvuge ?x286 (_ bv1 32))))
 (let (($x239 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x280 (= $x239 $x282)))
 (let (($x295 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x84 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x234 (and $x84 $x295)))
 (let (($x281 (=> $x234 $x280)))
 (let (($x287 (= ?x286 (_ bv0 32))))
 (let (($x170 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x170 $x287)))
 (let (($x139 (=> $x234 $x279)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x255))))
 (let (($x276 (= input.spec-%var-l-1.2.1.2.0 ?x311)))
 (let (($x277 (=> $x234 $x276)))
 (let (($x243 (= (_ bv0 32) ?x244)))
 (let ((?x247 (ite $x243 (_ bv0 32) (_ bv1 32))))
 (let (($x251 (bvuge ?x247 (_ bv1 32))))
 (let (($x248 (= $x295 $x251)))
 (let (($x246 (=> $x84 $x248)))
 (let (($x240 (= ?x247 (_ bv0 32))))
 (let (($x49 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x242 (= $x49 $x240)))
 (let (($x263 (=> $x84 $x242)))
 (let (($x298 (= input.spec-%var-l-1.2.0 ?x216)))
 (let (($x217 (=> $x84 $x298)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x297 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (bvuge ?x297 (_ bv1 32))))
 (let (($x306 (= $x84 $x305)))
 (let (($x219 (= ?x297 (_ bv0 32))))
 (let (($x123 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x304 (= $x123 $x219)))
 (let (($x137 (= false false)))
 (let (($x19 (and $x84 $x49)))
 (let (($x164 (=> $x19 $x137)))
 (let (($x136 (=> $x123 $x137)))
 (let (($x291 (and (and (and (and (and (and $x136 $x164) $x304) $x306) $x217) $x263) $x246)))
 (let (($x143 (and (and (and $x291 $x277) $x139) $x281)))
 (let (($x293 (= $x143 true)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x146 (concat ?x72 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x33 (concat ?x131 (concat ?x31 ?x146))))
 (let ((?x208 (bvadd ?x33 (_ bv4 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x269))))
 (let (($x188 (= (_ bv0 32) ?x200)))
 (let ((?x196 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x196 (_ bv1 32))))
 (let (($x190 (= $x239 $x192)))
 (let (($x211 (=> $x234 $x190)))
 (let (($x268 (= ?x196 (_ bv0 32))))
 (let (($x193 (= $x170 $x268)))
 (let (($x195 (=> $x234 $x193)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x185))))
 (let (($x5 (= input.spec-%var-l-1.2.1.2.0 ?x23)))
 (let (($x52 (=> $x234 $x5)))
 (let (($x17 (= (_ bv0 32) ?x33)))
 (let ((?x94 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x126 (bvuge ?x94 (_ bv1 32))))
 (let (($x198 (= $x295 $x126)))
 (let (($x167 (=> $x84 $x198)))
 (let (($x142 (= ?x94 (_ bv0 32))))
 (let (($x39 (= $x49 $x142)))
 (let (($x15 (=> $x84 $x39)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x7)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x18)))
 (let (($x166 (= input.spec-%var-l-1.2.0 ?x168)))
 (let (($x74 (=> $x84 $x166)))
 (let (($x55 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x233 (ite $x55 (_ bv0 32) (_ bv1 32))))
 (let (($x88 (bvuge ?x233 (_ bv1 32))))
 (let (($x212 (= $x84 $x88)))
 (let (($x68 (= ?x233 (_ bv0 32))))
 (let (($x13 (= $x123 $x68)))
 (let (($x213 (and (and (and (and (and (and $x13 $x212) $x136) $x74) $x15) $x164) $x167)))
 (let (($x202 (and (and (and $x213 $x52) $x195) $x211)))
 (let (($x270 (= $x202 true)))
 (let (($x128 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x206 (= $x128 true)))
 (let (($x183 (= $x206 true)))
 (let ((?x231 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x133 (= (_ bv0 3) ?x231)))
 (let (($x210 (= $x133 true)))
 (let (($x232 (= $x210 true)))
 (let (($x177 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x32 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x47 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x32) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x32))))
 (let (($x114 (and true $x47)))
 (let (($x111 (and $x47 $x114)))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x44))))
 (let (($x236 (= (bvand ?x119 (_ bv4294967288 32)) ?x119)))
 (let (($x86 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x117 (and $x86 $x236)))
 (let (($x151 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x124 (and (and (and (and (and $x114 $x151) $x86) $x117) $x111) $x177)))
 (let (($x159 (= true $x124)))
 (let (($x42 (not $x121)))
 (let (($x118 (=> $x42 $x159)))
 (let (($x125 (= $x118 true)))
 (let (($x179 (= $x125 true)))
 (let (($x134 (= $x179 true)))
 (let (($x171 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x230 (= $x171 true)))
 (let (($x149 (= $x230 true)))
 (let (($x174 (= $x149 true)))
 (let (($x71 (= $x42 true)))
 (let (($x176 (= $x71 true)))
 (let (($x14 (= $x176 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x162)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x66 $x102)))
 (let (($x61 (and $x100 $x156)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x65 $x61)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x95)))))))
 (let (($x16 (and $x101 $x107)))
 (let (($x120 (= $x16 true)))
 (let (($x165 (= $x120 true)))
 (let (($x75 (= $x165 true)))
 (let (($x59 (and $x75 $x14)))
 (let (($x132 (and $x59 $x174)))
 (let (($x152 (and $x132 $x134)))
 (let (($x112 (and $x152 $x232)))
 (let (($x235 (and $x112 $x183)))
 (let (($x262 (and $x235 $x270)))
 (let (($x294 (and $x262 $x293)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x303 (and $x81 $x294)))
 (let (($x90 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd ?x27 (_ bv3 32))))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x80 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x90)))))))
 (let (($x53 (=> (and $x42 (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x229 $x90)))))))
 (let (($x148 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x10 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x6 (_ bv1 32))) (or false (or false (and true (or $x30 $x148)))))))
 (let (($x110 (=> (and $x42 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x6 (_ bv1 32)))) (or false (or false (and true (or $x30 $x148)))))))
 (let (($x158 (and $x110 $x53)))
 (let (($x145 (and $x158 $x303)))
 (let (($x316 (=> $x145 $x315)))
 (not $x316)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x223 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x9 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x216 (concat (select input.dst.llvm-mem ?x9) (concat ?x220 (concat ?x221 ?x223)))))
 (let ((?x98 ((_ extract 24 0) ?x216)))
 (let ((?x313 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x98)))
 (let (($x314 (= (_ bv0 25) ?x313)))
 (let (($x315 (= $x314 true)))
 (let ((?x6 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem ?x6))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv2 32))) ?x250))))
 (let ((?x85 (bvadd ?x244 (_ bv4 32))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x144))))
 (let (($x285 (= (_ bv0 32) ?x312)))
 (let ((?x286 (ite $x285 (_ bv0 32) (_ bv1 32))))
 (let (($x282 (bvuge ?x286 (_ bv1 32))))
 (let (($x239 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x280 (= $x239 $x282)))
 (let (($x295 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x84 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x234 (and $x84 $x295)))
 (let (($x281 (=> $x234 $x280)))
 (let (($x287 (= ?x286 (_ bv0 32))))
 (let (($x170 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x170 $x287)))
 (let (($x139 (=> $x234 $x279)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x255))))
 (let (($x276 (= input.spec-%var-l-1.2.1.2.0 ?x311)))
 (let (($x277 (=> $x234 $x276)))
 (let (($x243 (= (_ bv0 32) ?x244)))
 (let ((?x247 (ite $x243 (_ bv0 32) (_ bv1 32))))
 (let (($x251 (bvuge ?x247 (_ bv1 32))))
 (let (($x248 (= $x295 $x251)))
 (let (($x246 (=> $x84 $x248)))
 (let (($x240 (= ?x247 (_ bv0 32))))
 (let (($x49 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x242 (= $x49 $x240)))
 (let (($x263 (=> $x84 $x242)))
 (let (($x298 (= input.spec-%var-l-1.2.0 ?x216)))
 (let (($x217 (=> $x84 $x298)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x297 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (bvuge ?x297 (_ bv1 32))))
 (let (($x306 (= $x84 $x305)))
 (let (($x219 (= ?x297 (_ bv0 32))))
 (let (($x123 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x304 (= $x123 $x219)))
 (let (($x137 (= false false)))
 (let (($x19 (and $x84 $x49)))
 (let (($x164 (=> $x19 $x137)))
 (let (($x136 (=> $x123 $x137)))
 (let (($x291 (and (and (and (and (and (and $x136 $x164) $x304) $x306) $x217) $x263) $x246)))
 (let (($x143 (and (and (and $x291 $x277) $x139) $x281)))
 (let (($x293 (= $x143 true)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x146 (concat ?x72 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x33 (concat ?x131 (concat ?x31 ?x146))))
 (let ((?x208 (bvadd ?x33 (_ bv4 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x269))))
 (let (($x188 (= (_ bv0 32) ?x200)))
 (let ((?x196 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x196 (_ bv1 32))))
 (let (($x190 (= $x239 $x192)))
 (let (($x211 (=> $x234 $x190)))
 (let (($x268 (= ?x196 (_ bv0 32))))
 (let (($x193 (= $x170 $x268)))
 (let (($x195 (=> $x234 $x193)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x185))))
 (let (($x5 (= input.spec-%var-l-1.2.1.2.0 ?x23)))
 (let (($x52 (=> $x234 $x5)))
 (let (($x17 (= (_ bv0 32) ?x33)))
 (let ((?x94 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x126 (bvuge ?x94 (_ bv1 32))))
 (let (($x198 (= $x295 $x126)))
 (let (($x167 (=> $x84 $x198)))
 (let (($x142 (= ?x94 (_ bv0 32))))
 (let (($x39 (= $x49 $x142)))
 (let (($x15 (=> $x84 $x39)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x7)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x18)))
 (let (($x166 (= input.spec-%var-l-1.2.0 ?x168)))
 (let (($x74 (=> $x84 $x166)))
 (let (($x55 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x233 (ite $x55 (_ bv0 32) (_ bv1 32))))
 (let (($x88 (bvuge ?x233 (_ bv1 32))))
 (let (($x212 (= $x84 $x88)))
 (let (($x68 (= ?x233 (_ bv0 32))))
 (let (($x13 (= $x123 $x68)))
 (let (($x213 (and (and (and (and (and (and $x13 $x212) $x136) $x74) $x15) $x164) $x167)))
 (let (($x202 (and (and (and $x213 $x52) $x195) $x211)))
 (let (($x270 (= $x202 true)))
 (let (($x128 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x206 (= $x128 true)))
 (let (($x183 (= $x206 true)))
 (let ((?x231 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x133 (= (_ bv0 3) ?x231)))
 (let (($x210 (= $x133 true)))
 (let (($x232 (= $x210 true)))
 (let (($x177 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x32 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x47 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x32) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x32))))
 (let (($x114 (and true $x47)))
 (let (($x111 (and $x47 $x114)))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x44))))
 (let (($x236 (= (bvand ?x119 (_ bv4294967288 32)) ?x119)))
 (let (($x86 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x117 (and $x86 $x236)))
 (let (($x151 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x124 (and (and (and (and (and $x114 $x151) $x86) $x117) $x111) $x177)))
 (let (($x159 (= true $x124)))
 (let (($x42 (not $x121)))
 (let (($x118 (=> $x42 $x159)))
 (let (($x125 (= $x118 true)))
 (let (($x179 (= $x125 true)))
 (let (($x134 (= $x179 true)))
 (let (($x171 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x230 (= $x171 true)))
 (let (($x149 (= $x230 true)))
 (let (($x174 (= $x149 true)))
 (let (($x71 (= $x42 true)))
 (let (($x176 (= $x71 true)))
 (let (($x14 (= $x176 true)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x162)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x66 $x102)))
 (let (($x61 (and $x100 $x156)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x65 $x61)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x95)))))))
 (let (($x16 (and $x101 $x107)))
 (let (($x120 (= $x16 true)))
 (let (($x165 (= $x120 true)))
 (let (($x75 (= $x165 true)))
 (let (($x59 (and $x75 $x14)))
 (let (($x132 (and $x59 $x174)))
 (let (($x152 (and $x132 $x134)))
 (let (($x112 (and $x152 $x232)))
 (let (($x235 (and $x112 $x183)))
 (let (($x262 (and $x235 $x270)))
 (let (($x294 (and $x262 $x293)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x303 (and $x81 $x294)))
 (let (($x90 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd ?x27 (_ bv3 32))))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x80 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x90)))))))
 (let (($x53 (=> (and $x42 (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x229 $x90)))))))
 (let (($x148 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x10 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x6 (_ bv1 32))) (or false (or false (and true (or $x30 $x148)))))))
 (let (($x110 (=> (and $x42 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x6 (_ bv1 32)))) (or false (or false (and true (or $x30 $x148)))))))
 (let (($x158 (and $x110 $x53)))
 (let (($x145 (and $x158 $x303)))
 (let (($x316 (=> $x145 $x315)))
 (not $x316)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 #b0000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000001000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2 32) (_ bv1 8)) (_ bv9 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25) (_ bv0 25))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv19 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xb570f0fd)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xf0f0f0f0)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xb570f0f8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xe7)
                                #xf0e7f0f7
                                #x30)
                         #xb570f102
                         #xf0)
                  #xb570f0f3
                  #xf0)))
(let ((a!2 (store (store (store (store a!1 #xb570f100 #xf0) #xf0e7f0f5 #xf0)
                         #xb570f0fc
                         #xf0)
                  #xb570f0ff
                  #xf0)))
(let ((a!3 (store (store (store (store a!2 #xf0e7f0f3 #xf0) #xb570f0fd #xf0)
                         #xb570f0f4
                         #xf0)
                  #xb570f0fb
                  #xf0)))
(let ((a!4 (store (store (store (store a!3 #xb570f101 #xf0) #xb570f0f5 #xf0)
                         #xb570f104
                         #xb5)
                  #xb570f0f6
                  #x67)))
(let ((a!5 (store (store (store (store a!4 #xb570f0fd #xf0) #xb570f103 #x70)
                         #xb570f0fa
                         #xf0)
                  #xb570f0f2
                  #xf0)))
(let ((a!6 (store (store (store (store a!5 #xb570f0f1 #xf0) #xb570f0f7 #x30)
                         #xf0e7f0f6
                         #xf0)
                  #xf0e7f0f0
                  #xf0)))
(let ((a!7 (store (store (store (store a!6 #xb570f0f8 #xf0) #xf0e7f0f2 #xf0)
                         #xf0e7f0f1
                         #xf0)
                  #xb570f0f0
                  #xf0)))
  (store (store a!7 #xf0e7f0f4 #xf0) #xb570f0ff #xf0)))))))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25)
    #b0000000000000000000000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xf0f0e7f0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x56 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem ?x56) (concat ?x289 (concat ?x216 ?x307)))))
 (let ((?x320 ((_ extract 24 0) ?x141)))
 (let ((?x29 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x320)))
 (let (($x150 (= (_ bv0 25) ?x29)))
 (let (($x97 (= $x150 true)))
 (let ((?x12 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv1 32))) (select input.dst.llvm-mem ?x12))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv2 32))) ?x241))))
 (let ((?x284 (bvadd ?x263 (_ bv4 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x264))))
 (let (($x287 (= (_ bv0 32) ?x286)))
 (let ((?x279 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x279 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x281 (= $x196 $x280)))
 (let (($x164 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x187 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x198 (and $x187 $x164)))
 (let (($x143 (=> $x198 $x281)))
 (let (($x139 (= ?x279 (_ bv0 32))))
 (let (($x5 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x292 (= $x5 $x139)))
 (let (($x282 (=> $x198 $x292)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x299))))
 (let (($x85 (= input.spec-%var-l-1.2.1.2.0 ?x302)))
 (let (($x278 (=> $x198 $x85)))
 (let (($x290 (= (_ bv0 32) ?x263)))
 (let ((?x251 (ite $x290 (_ bv0 32) (_ bv1 32))))
 (let (($x274 (bvuge ?x251 (_ bv1 32))))
 (let (($x258 (= $x164 $x274)))
 (let (($x300 (=> $x187 $x258)))
 (let (($x248 (= ?x251 (_ bv0 32))))
 (let (($x49 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x246 (= $x49 $x248)))
 (let (($x291 (=> $x187 $x246)))
 (let (($x249 (= input.spec-%var-l-1.2.0 ?x141)))
 (let (($x222 (=> $x187 $x249)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x272 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x221 (bvuge ?x272 (_ bv1 32))))
 (let (($x223 (= $x187 $x221)))
 (let (($x220 (= ?x272 (_ bv0 32))))
 (let (($x233 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x214 (= $x233 $x220)))
 (let (($x192 (and $x198 $x5)))
 (let (($x190 (not $x192)))
 (let (($x271 (and $x198 $x196)))
 (let (($x239 (not $x271)))
 (let (($x191 (= false false)))
 (let (($x204 (and $x187 $x49)))
 (let (($x19 (=> $x204 $x191)))
 (let (($x51 (=> $x233 $x191)))
 (let (($x313 (and (and (and (and (and (and $x51 $x19) $x239) $x190) $x214) $x223) $x222)))
 (let (($x20 (and (and (and (and (and $x313 $x291) $x300) $x278) $x282) $x143)))
 (let (($x8 (= $x20 true)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x31 (concat ?x83 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x33 (concat ?x261 (concat ?x72 ?x31))))
 (let ((?x52 (bvadd ?x33 (_ bv4 32))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x208))))
 (let (($x186 (= (_ bv0 32) ?x265)))
 (let ((?x269 (ite $x186 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (bvuge ?x269 (_ bv1 32))))
 (let (($x193 (= $x196 $x268)))
 (let (($x195 (=> $x198 $x193)))
 (let (($x197 (= ?x269 (_ bv0 32))))
 (let (($x200 (= $x5 $x197)))
 (let (($x188 (=> $x198 $x200)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x173))))
 (let (($x185 (= input.spec-%var-l-1.2.1.2.0 ?x77)))
 (let (($x172 (=> $x198 $x185)))
 (let (($x17 (= (_ bv0 32) ?x33)))
 (let ((?x94 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x296 (bvuge ?x94 (_ bv1 32))))
 (let (($x295 (= $x164 $x296)))
 (let (($x126 (=> $x187 $x295)))
 (let (($x142 (= ?x94 (_ bv0 32))))
 (let (($x39 (= $x49 $x142)))
 (let (($x15 (=> $x187 $x39)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x76)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x7)))
 (let (($x74 (= input.spec-%var-l-1.2.0 ?x166)))
 (let (($x260 (=> $x187 $x74)))
 (let (($x13 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x84 (ite $x13 (_ bv0 32) (_ bv1 32))))
 (let (($x137 (bvuge ?x84 (_ bv1 32))))
 (let (($x136 (= $x187 $x137)))
 (let (($x88 (= ?x84 (_ bv0 32))))
 (let (($x212 (= $x233 $x88)))
 (let (($x297 (and (and (and (and (and (and $x212 $x136) $x51) $x260) $x15) $x19) $x126)))
 (let (($x306 (and (and (and (and (and $x297 $x172) $x188) $x195) $x239) $x190)))
 (let (($x288 (= $x306 true)))
 (let (($x235 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x34 (= $x235 true)))
 (let (($x123 (= $x34 true)))
 (let ((?x232 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x112 (= (_ bv0 3) ?x232)))
 (let (($x209 (= $x112 true)))
 (let (($x203 (= $x209 true)))
 (let (($x163 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x108 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x57 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x108) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x108))))
 (let (($x115 (and true $x57)))
 (let (($x111 (and $x57 $x115)))
 (let ((?x92 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x228))))
 (let (($x117 (= (bvand ?x122 (_ bv4294967288 32)) ?x122)))
 (let (($x104 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x153 (and $x104 $x117)))
 (let (($x182 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv4 32))) (bvult ?x92 (bvsub ?x92 (_ bv4 32))))))
 (let (($x125 (and (and (and (and (and $x115 $x182) $x104) $x153) $x111) $x163)))
 (let (($x179 (= true $x125)))
 (let (($x42 (not $x121)))
 (let (($x134 (=> $x42 $x179)))
 (let (($x152 (= $x134 true)))
 (let (($x135 (= $x152 true)))
 (let (($x231 (= $x135 true)))
 (let (($x174 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x132 (= $x174 true)))
 (let (($x225 (= $x132 true)))
 (let (($x32 (= $x225 true)))
 (let (($x59 (= $x42 true)))
 (let (($x181 (= $x59 true)))
 (let (($x171 (= $x181 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x107)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x100 $x156)))
 (let (($x120 (and $x61 $x16)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x78 $x120)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x99)))))))
 (let (($x75 (and $x102 $x165)))
 (let (($x71 (= $x75 true)))
 (let (($x176 (= $x71 true)))
 (let (($x14 (= $x176 true)))
 (let (($x230 (and $x14 $x171)))
 (let (($x41 (and $x230 $x32)))
 (let (($x133 (and $x41 $x231)))
 (let (($x128 (and $x133 $x203)))
 (let (($x46 (and $x128 $x123)))
 (let (($x245 (and $x46 $x288)))
 (let (($x103 (and $x245 $x8)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x318 (and $x93 $x103)))
 (let (($x96 (bvugt ?x92 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd ?x92 (_ bv3 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x81 (=> (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x96)))))))
 (let (($x160 (=> (and $x42 (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x89 $x96)))))))
 (let (($x28 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x58 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x12 (_ bv1 32))) (or false (or false (and true (or $x63 $x28)))))))
 (let (($x138 (=> (and $x42 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x12 (_ bv1 32)))) (or false (or false (and true (or $x63 $x28)))))))
 (let (($x64 (and $x138 $x160)))
 (let (($x319 (and $x64 $x318)))
 (let (($x321 (=> $x319 $x97)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x56 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem ?x56) (concat ?x289 (concat ?x216 ?x307)))))
 (let ((?x320 ((_ extract 24 0) ?x141)))
 (let ((?x29 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x320)))
 (let (($x150 (= (_ bv0 25) ?x29)))
 (let (($x97 (= $x150 true)))
 (let ((?x12 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv1 32))) (select input.dst.llvm-mem ?x12))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv2 32))) ?x241))))
 (let ((?x284 (bvadd ?x263 (_ bv4 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x264))))
 (let (($x287 (= (_ bv0 32) ?x286)))
 (let ((?x279 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x279 (_ bv1 32))))
 (let (($x196 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x281 (= $x196 $x280)))
 (let (($x164 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x187 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x198 (and $x187 $x164)))
 (let (($x143 (=> $x198 $x281)))
 (let (($x139 (= ?x279 (_ bv0 32))))
 (let (($x5 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x292 (= $x5 $x139)))
 (let (($x282 (=> $x198 $x292)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x299))))
 (let (($x85 (= input.spec-%var-l-1.2.1.2.0 ?x302)))
 (let (($x278 (=> $x198 $x85)))
 (let (($x290 (= (_ bv0 32) ?x263)))
 (let ((?x251 (ite $x290 (_ bv0 32) (_ bv1 32))))
 (let (($x274 (bvuge ?x251 (_ bv1 32))))
 (let (($x258 (= $x164 $x274)))
 (let (($x300 (=> $x187 $x258)))
 (let (($x248 (= ?x251 (_ bv0 32))))
 (let (($x49 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x246 (= $x49 $x248)))
 (let (($x291 (=> $x187 $x246)))
 (let (($x249 (= input.spec-%var-l-1.2.0 ?x141)))
 (let (($x222 (=> $x187 $x249)))
 (let (($x121 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x272 (ite $x121 (_ bv0 32) (_ bv1 32))))
 (let (($x221 (bvuge ?x272 (_ bv1 32))))
 (let (($x223 (= $x187 $x221)))
 (let (($x220 (= ?x272 (_ bv0 32))))
 (let (($x233 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x214 (= $x233 $x220)))
 (let (($x192 (and $x198 $x5)))
 (let (($x190 (not $x192)))
 (let (($x271 (and $x198 $x196)))
 (let (($x239 (not $x271)))
 (let (($x191 (= false false)))
 (let (($x204 (and $x187 $x49)))
 (let (($x19 (=> $x204 $x191)))
 (let (($x51 (=> $x233 $x191)))
 (let (($x313 (and (and (and (and (and (and $x51 $x19) $x239) $x190) $x214) $x223) $x222)))
 (let (($x20 (and (and (and (and (and $x313 $x291) $x300) $x278) $x282) $x143)))
 (let (($x8 (= $x20 true)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x31 (concat ?x83 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x33 (concat ?x261 (concat ?x72 ?x31))))
 (let ((?x52 (bvadd ?x33 (_ bv4 32))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x208))))
 (let (($x186 (= (_ bv0 32) ?x265)))
 (let ((?x269 (ite $x186 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (bvuge ?x269 (_ bv1 32))))
 (let (($x193 (= $x196 $x268)))
 (let (($x195 (=> $x198 $x193)))
 (let (($x197 (= ?x269 (_ bv0 32))))
 (let (($x200 (= $x5 $x197)))
 (let (($x188 (=> $x198 $x200)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x173))))
 (let (($x185 (= input.spec-%var-l-1.2.1.2.0 ?x77)))
 (let (($x172 (=> $x198 $x185)))
 (let (($x17 (= (_ bv0 32) ?x33)))
 (let ((?x94 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x296 (bvuge ?x94 (_ bv1 32))))
 (let (($x295 (= $x164 $x296)))
 (let (($x126 (=> $x187 $x295)))
 (let (($x142 (= ?x94 (_ bv0 32))))
 (let (($x39 (= $x49 $x142)))
 (let (($x15 (=> $x187 $x39)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x76)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x7)))
 (let (($x74 (= input.spec-%var-l-1.2.0 ?x166)))
 (let (($x260 (=> $x187 $x74)))
 (let (($x13 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x84 (ite $x13 (_ bv0 32) (_ bv1 32))))
 (let (($x137 (bvuge ?x84 (_ bv1 32))))
 (let (($x136 (= $x187 $x137)))
 (let (($x88 (= ?x84 (_ bv0 32))))
 (let (($x212 (= $x233 $x88)))
 (let (($x297 (and (and (and (and (and (and $x212 $x136) $x51) $x260) $x15) $x19) $x126)))
 (let (($x306 (and (and (and (and (and $x297 $x172) $x188) $x195) $x239) $x190)))
 (let (($x288 (= $x306 true)))
 (let (($x235 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x34 (= $x235 true)))
 (let (($x123 (= $x34 true)))
 (let ((?x232 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x112 (= (_ bv0 3) ?x232)))
 (let (($x209 (= $x112 true)))
 (let (($x203 (= $x209 true)))
 (let (($x163 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x108 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x57 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x108) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x108))))
 (let (($x115 (and true $x57)))
 (let (($x111 (and $x57 $x115)))
 (let ((?x92 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x228))))
 (let (($x117 (= (bvand ?x122 (_ bv4294967288 32)) ?x122)))
 (let (($x104 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x153 (and $x104 $x117)))
 (let (($x182 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv4 32))) (bvult ?x92 (bvsub ?x92 (_ bv4 32))))))
 (let (($x125 (and (and (and (and (and $x115 $x182) $x104) $x153) $x111) $x163)))
 (let (($x179 (= true $x125)))
 (let (($x42 (not $x121)))
 (let (($x134 (=> $x42 $x179)))
 (let (($x152 (= $x134 true)))
 (let (($x135 (= $x152 true)))
 (let (($x231 (= $x135 true)))
 (let (($x174 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x132 (= $x174 true)))
 (let (($x225 (= $x132 true)))
 (let (($x32 (= $x225 true)))
 (let (($x59 (= $x42 true)))
 (let (($x181 (= $x59 true)))
 (let (($x171 (= $x181 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x107)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x100 $x156)))
 (let (($x120 (and $x61 $x16)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x78 $x120)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x99)))))))
 (let (($x75 (and $x102 $x165)))
 (let (($x71 (= $x75 true)))
 (let (($x176 (= $x71 true)))
 (let (($x14 (= $x176 true)))
 (let (($x230 (and $x14 $x171)))
 (let (($x41 (and $x230 $x32)))
 (let (($x133 (and $x41 $x231)))
 (let (($x128 (and $x133 $x203)))
 (let (($x46 (and $x128 $x123)))
 (let (($x245 (and $x46 $x288)))
 (let (($x103 (and $x245 $x8)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x318 (and $x93 $x103)))
 (let (($x96 (bvugt ?x92 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x35 (bvadd ?x92 (_ bv3 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x81 (=> (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x96)))))))
 (let (($x160 (=> (and $x42 (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x89 $x96)))))))
 (let (($x28 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x58 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x12 (_ bv1 32))) (or false (or false (and true (or $x63 $x28)))))))
 (let (($x138 (=> (and $x42 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x12 (_ bv1 32)))) (or false (or false (and true (or $x63 $x28)))))))
 (let (($x64 (and $x138 $x160)))
 (let (($x319 (and $x64 $x318)))
 (let (($x321 (=> $x319 $x97)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 #b0000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000001000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)) (_ bv4194304 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25) (_ bv0 25))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2048 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000ecc)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00004007)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00004000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
              #x0000400a
              #x01)
       #x00004003
       #x01))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25)
    #b0000000000000000000000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000ecc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000ecf)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x44))))
 (let (($x207 (bvule ?x122 (_ bv4294967294 32))))
 (let (($x224 (= $x207 true)))
 (let (($x226 (= $x224 true)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x136 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x51 (bvuge ?x136 (_ bv1 32))))
 (let (($x13 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x202 (= $x13 $x51)))
 (let (($x211 (= ?x136 (_ bv0 32))))
 (let (($x34 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x191 (= $x34 $x211)))
 (let (($x169 (and $x191 $x202)))
 (let (($x18 (= $x169 true)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x55 (ite $x46 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x55 (_ bv1 32))))
 (let (($x88 (= $x13 $x84)))
 (let (($x233 (= ?x55 (_ bv0 32))))
 (let (($x68 (= $x34 $x233)))
 (let (($x212 (and $x68 $x88)))
 (let (($x187 (= $x212 true)))
 (let ((?x209 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x203 (= (_ bv0 3) ?x209)))
 (let (($x128 (= $x203 true)))
 (let (($x206 (= $x128 true)))
 (let (($x118 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x114 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x151 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x114) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x114))))
 (let (($x48 (and true $x151)))
 (let (($x159 (and $x151 $x48)))
 (let (($x117 (= (bvand ?x122 (_ bv4294967288 32)) ?x122)))
 (let (($x124 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x153 (and $x124 $x117)))
 (let (($x86 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x134 (and (and (and (and (and $x48 $x86) $x124) $x153) $x159) $x118)))
 (let (($x152 (= true $x134)))
 (let (($x121 (not $x161)))
 (let (($x135 (=> $x121 $x152)))
 (let (($x231 (= $x135 true)))
 (let (($x133 (= $x231 true)))
 (let (($x210 (= $x133 true)))
 (let (($x225 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x32 (= $x225 true)))
 (let (($x41 (= $x32 true)))
 (let (($x47 (= $x41 true)))
 (let (($x171 (= $x121 true)))
 (let (($x230 (= $x171 true)))
 (let (($x149 (= $x230 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x120)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x156 $x107)))
 (let (($x75 (and $x16 $x165)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x79 $x75)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x65)))))))
 (let (($x176 (and $x162 $x71)))
 (let (($x14 (= $x176 true)))
 (let (($x59 (= $x14 true)))
 (let (($x181 (= $x59 true)))
 (let (($x174 (and $x181 $x149)))
 (let (($x108 (and $x174 $x47)))
 (let (($x232 (and $x108 $x210)))
 (let (($x183 (and $x232 $x206)))
 (let (($x137 (and $x183 $x187)))
 (let (($x168 (and $x137 $x18)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x36 (and $x95 $x168)))
 (let (($x80 (bvugt ?x9 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd ?x9 (_ bv3 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x21 (=> (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x80)))))))
 (let (($x90 (=> (and $x121 (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x25 $x80)))))))
 (let (($x10 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x92 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x229 (=> $x92 (or false (or false (and true (or $x69 $x10)))))))
 (let (($x50 (=> (and $x121 $x92) (or false (or false (and true (or $x69 $x10)))))))
 (let (($x129 (and $x50 $x90)))
 (let (($x38 (and $x129 $x36)))
 (let (($x76 (=> $x38 $x226)))
 (not $x76))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x44))))
 (let (($x207 (bvule ?x122 (_ bv4294967294 32))))
 (let (($x224 (= $x207 true)))
 (let (($x226 (= $x224 true)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x136 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x51 (bvuge ?x136 (_ bv1 32))))
 (let (($x13 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x202 (= $x13 $x51)))
 (let (($x211 (= ?x136 (_ bv0 32))))
 (let (($x34 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x191 (= $x34 $x211)))
 (let (($x169 (and $x191 $x202)))
 (let (($x18 (= $x169 true)))
 (let (($x46 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x55 (ite $x46 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x55 (_ bv1 32))))
 (let (($x88 (= $x13 $x84)))
 (let (($x233 (= ?x55 (_ bv0 32))))
 (let (($x68 (= $x34 $x233)))
 (let (($x212 (and $x68 $x88)))
 (let (($x187 (= $x212 true)))
 (let ((?x209 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x203 (= (_ bv0 3) ?x209)))
 (let (($x128 (= $x203 true)))
 (let (($x206 (= $x128 true)))
 (let (($x118 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x114 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x151 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x114) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x114))))
 (let (($x48 (and true $x151)))
 (let (($x159 (and $x151 $x48)))
 (let (($x117 (= (bvand ?x122 (_ bv4294967288 32)) ?x122)))
 (let (($x124 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x153 (and $x124 $x117)))
 (let (($x86 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x134 (and (and (and (and (and $x48 $x86) $x124) $x153) $x159) $x118)))
 (let (($x152 (= true $x134)))
 (let (($x121 (not $x161)))
 (let (($x135 (=> $x121 $x152)))
 (let (($x231 (= $x135 true)))
 (let (($x133 (= $x231 true)))
 (let (($x210 (= $x133 true)))
 (let (($x225 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x32 (= $x225 true)))
 (let (($x41 (= $x32 true)))
 (let (($x47 (= $x41 true)))
 (let (($x171 (= $x121 true)))
 (let (($x230 (= $x171 true)))
 (let (($x149 (= $x230 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x120)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x156 $x107)))
 (let (($x75 (and $x16 $x165)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x79 $x75)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x162 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x65)))))))
 (let (($x176 (and $x162 $x71)))
 (let (($x14 (= $x176 true)))
 (let (($x59 (= $x14 true)))
 (let (($x181 (= $x59 true)))
 (let (($x174 (and $x181 $x149)))
 (let (($x108 (and $x174 $x47)))
 (let (($x232 (and $x108 $x210)))
 (let (($x183 (and $x232 $x206)))
 (let (($x137 (and $x183 $x187)))
 (let (($x168 (and $x137 $x18)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x36 (and $x95 $x168)))
 (let (($x80 (bvugt ?x9 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd ?x9 (_ bv3 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x21 (=> (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x80)))))))
 (let (($x90 (=> (and $x121 (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x25 $x80)))))))
 (let (($x10 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x92 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x229 (=> $x92 (or false (or false (and true (or $x69 $x10)))))))
 (let (($x50 (=> (and $x121 $x92) (or false (or false (and true (or $x69 $x10)))))))
 (let (($x129 (and $x50 $x90)))
 (let (($x38 (and $x129 $x36)))
 (let (($x76 (=> $x38 $x226)))
 (not $x76))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var931X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var926X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x265 (concat ?x189 (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv4 32))))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x304 (concat ?x188 (concat ?x269 ?x265))))
 (let (($x196 (= ?x304 ?x304)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x18 (bvuge ?x51 (_ bv1 32))))
 (let (($x268 (=> $x18 $x196)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var931X))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv2 32))) ?x219)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv3 32))) ?x52)))
 (let (($x267 (= ?x266 ?x266)))
 (let (($x37 (=> $x18 $x267)))
 (let ((?x92 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x67))))
 (let (($x166 (= (_ bv0 32) ?x116)))
 (let ((?x74 (ite $x166 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x74 (_ bv1 32))))
 (let (($x173 (= $x18 $x70)))
 (let (($x42 (= false false)))
 (let (($x202 (= ?x51 (_ bv0 32))))
 (let (($x213 (=> $x202 $x42)))
 (let (($x260 (= ?x74 (_ bv0 32))))
 (let (($x205 (= $x202 $x260)))
 (let (($x234 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x116)))
 (let (($x239 (and (and (and (and (and $x234 $x205) $x213) $x173) $x37) $x268)))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x204 (concat ?x262 (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv4 32))))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x126 (concat ?x295 (concat ?x87 ?x204))))
 (let (($x297 (= ?x126 ?x126)))
 (let (($x68 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x13 (ite $x68 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x13 (_ bv1 32))))
 (let (($x198 (=> $x187 $x297)))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var926X))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv2 32))) ?x72)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv3 32))) ?x11)))
 (let (($x17 (= ?x33 ?x33)))
 (let (($x94 (=> $x187 $x17)))
 (let (($x49 (= $x187 $x70)))
 (let (($x84 (= ?x13 (_ bv0 32))))
 (let (($x270 (= $x84 $x260)))
 (let (($x147 (and (and (and (=> $x84 $x42) (= input.dst.llvm-%l ?x116)) $x270) $x49)))
 (let (($x237 (and (and $x147 $x94) $x198)))
 (let (($x7 (not true)))
 (let (($x192 (or (or $x7 $x237) $x239)))
 (let (($x76 (= true true)))
 (let (($x190 (and $x76 $x192)))
 (let (($x306 (= $x190 true)))
 (let (($x212 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x168 (= $x212 $x18)))
 (let (($x55 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x169 (= $x55 $x202)))
 (let (($x36 (and $x169 $x168)))
 (let (($x38 (= $x36 true)))
 (let (($x137 (= $x212 $x187)))
 (let (($x88 (= $x55 $x84)))
 (let (($x136 (and $x88 $x137)))
 (let (($x211 (= $x136 true)))
 (let ((?x206 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x206)))
 (let (($x235 (= $x183 true)))
 (let (($x34 (= $x235 true)))
 (let (($x111 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x115 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x130 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x115) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x115))))
 (let (($x182 (and true $x130)))
 (let (($x159 (and $x130 $x182)))
 (let (($x153 (= (bvand ?x116 (_ bv4294967288 32)) ?x116)))
 (let (($x106 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x125 (and $x106 $x153)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv4 32))) (bvult ?x92 (bvsub ?x92 (_ bv4 32))))))
 (let (($x231 (and (and (and (and (and $x182 $x104) $x106) $x125) $x159) $x111)))
 (let (($x133 (= true $x231)))
 (let (($x121 (not $x161)))
 (let (($x210 (=> $x121 $x133)))
 (let (($x232 (= $x210 true)))
 (let (($x112 (= $x232 true)))
 (let (($x209 (= $x112 true)))
 (let (($x47 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x108 (= $x47 true)))
 (let (($x113 (= $x108 true)))
 (let (($x114 (= $x113 true)))
 (let (($x174 (= $x121 true)))
 (let (($x132 (= $x174 true)))
 (let (($x225 (= $x132 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x71)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x16 $x165)))
 (let (($x14 (and $x75 $x176)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x45 $x14)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x78)))))))
 (let (($x181 (and $x107 $x59)))
 (let (($x171 (= $x181 true)))
 (let (($x230 (= $x171 true)))
 (let (($x149 (= $x230 true)))
 (let (($x32 (and $x149 $x225)))
 (let (($x57 (and $x32 $x114)))
 (let (($x203 (and $x57 $x209)))
 (let (($x123 (and $x203 $x34)))
 (let (($x191 (and $x123 $x211)))
 (let (($x207 (and $x191 $x38)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x224 (and $x99 $x207)))
 (let (($x81 (bvugt ?x92 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd ?x92 (_ bv3 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x95 (=> (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x81)))))))
 (let (($x64 (=> (and $x121 (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x158 $x81)))))))
 (let (($x58 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x89 (=> $x35 (or false (or false (and true (or $x27 $x58)))))))
 (let (($x148 (=> (and $x121 $x35) (or false (or false (and true (or $x27 $x58)))))))
 (let (($x96 (and $x148 $x64)))
 (let (($x226 (and $x96 $x224)))
 (let (($x288 (=> $x226 $x306)))
 (not $x288))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var931X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var926X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x265 (concat ?x189 (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv4 32))))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x304 (concat ?x188 (concat ?x269 ?x265))))
 (let (($x196 (= ?x304 ?x304)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x18 (bvuge ?x51 (_ bv1 32))))
 (let (($x268 (=> $x18 $x196)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var931X))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv2 32))) ?x219)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv3 32))) ?x52)))
 (let (($x267 (= ?x266 ?x266)))
 (let (($x37 (=> $x18 $x267)))
 (let ((?x92 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x67))))
 (let (($x166 (= (_ bv0 32) ?x116)))
 (let ((?x74 (ite $x166 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x74 (_ bv1 32))))
 (let (($x173 (= $x18 $x70)))
 (let (($x42 (= false false)))
 (let (($x202 (= ?x51 (_ bv0 32))))
 (let (($x213 (=> $x202 $x42)))
 (let (($x260 (= ?x74 (_ bv0 32))))
 (let (($x205 (= $x202 $x260)))
 (let (($x234 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x116)))
 (let (($x239 (and (and (and (and (and $x234 $x205) $x213) $x173) $x37) $x268)))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x204 (concat ?x262 (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv4 32))))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x126 (concat ?x295 (concat ?x87 ?x204))))
 (let (($x297 (= ?x126 ?x126)))
 (let (($x68 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x13 (ite $x68 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x13 (_ bv1 32))))
 (let (($x198 (=> $x187 $x297)))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var926X))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv2 32))) ?x72)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv3 32))) ?x11)))
 (let (($x17 (= ?x33 ?x33)))
 (let (($x94 (=> $x187 $x17)))
 (let (($x49 (= $x187 $x70)))
 (let (($x84 (= ?x13 (_ bv0 32))))
 (let (($x270 (= $x84 $x260)))
 (let (($x147 (and (and (and (=> $x84 $x42) (= input.dst.llvm-%l ?x116)) $x270) $x49)))
 (let (($x237 (and (and $x147 $x94) $x198)))
 (let (($x7 (not true)))
 (let (($x192 (or (or $x7 $x237) $x239)))
 (let (($x76 (= true true)))
 (let (($x190 (and $x76 $x192)))
 (let (($x306 (= $x190 true)))
 (let (($x212 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x168 (= $x212 $x18)))
 (let (($x55 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x169 (= $x55 $x202)))
 (let (($x36 (and $x169 $x168)))
 (let (($x38 (= $x36 true)))
 (let (($x137 (= $x212 $x187)))
 (let (($x88 (= $x55 $x84)))
 (let (($x136 (and $x88 $x137)))
 (let (($x211 (= $x136 true)))
 (let ((?x206 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x206)))
 (let (($x235 (= $x183 true)))
 (let (($x34 (= $x235 true)))
 (let (($x111 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x115 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x130 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x115) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x115))))
 (let (($x182 (and true $x130)))
 (let (($x159 (and $x130 $x182)))
 (let (($x153 (= (bvand ?x116 (_ bv4294967288 32)) ?x116)))
 (let (($x106 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x125 (and $x106 $x153)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv4 32))) (bvult ?x92 (bvsub ?x92 (_ bv4 32))))))
 (let (($x231 (and (and (and (and (and $x182 $x104) $x106) $x125) $x159) $x111)))
 (let (($x133 (= true $x231)))
 (let (($x121 (not $x161)))
 (let (($x210 (=> $x121 $x133)))
 (let (($x232 (= $x210 true)))
 (let (($x112 (= $x232 true)))
 (let (($x209 (= $x112 true)))
 (let (($x47 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x108 (= $x47 true)))
 (let (($x113 (= $x108 true)))
 (let (($x114 (= $x113 true)))
 (let (($x174 (= $x121 true)))
 (let (($x132 (= $x174 true)))
 (let (($x225 (= $x132 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x71)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x16 $x165)))
 (let (($x14 (and $x75 $x176)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x45 $x14)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x78)))))))
 (let (($x181 (and $x107 $x59)))
 (let (($x171 (= $x181 true)))
 (let (($x230 (= $x171 true)))
 (let (($x149 (= $x230 true)))
 (let (($x32 (and $x149 $x225)))
 (let (($x57 (and $x32 $x114)))
 (let (($x203 (and $x57 $x209)))
 (let (($x123 (and $x203 $x34)))
 (let (($x191 (and $x123 $x211)))
 (let (($x207 (and $x191 $x38)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x224 (and $x99 $x207)))
 (let (($x81 (bvugt ?x92 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd ?x92 (_ bv3 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x95 (=> (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x81)))))))
 (let (($x64 (=> (and $x121 (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x158 $x81)))))))
 (let (($x58 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x89 (=> $x35 (or false (or false (and true (or $x27 $x58)))))))
 (let (($x148 (=> (and $x121 $x35) (or false (or false (and true (or $x27 $x58)))))))
 (let (($x96 (and $x148 $x64)))
 (let (($x226 (and $x96 $x224)))
 (let (($x288 (=> $x226 $x306)))
 (not $x288))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3ffff000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000920)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xcfa48d20)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x8d)
                     #xcfa48d24
                     #x20)
              #xcfa48d27
              #x4f)
       #xcfa48d26
       #xa4))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3ffff000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3ffff003)
  (define-fun input.ind-%var926X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var931X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var931X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var926X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var931X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var926X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x208 (concat ?x269 (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv4 32))))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x304 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x196 (concat ?x304 (concat ?x201 ?x208))))
 (let (($x268 (= ?x196 ?x196)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x38 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x226 (bvuge ?x38 (_ bv1 32))))
 (let (($x239 (=> $x226 $x268)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var931X))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv2 32))) ?x172)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv3 32))) ?x52)))
 (let (($x271 (= ?x37 ?x37)))
 (let (($x170 (=> $x226 $x271)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x54))))
 (let (($x70 (= (_ bv0 32) ?x236)))
 (let ((?x49 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x31 (bvuge ?x49 (_ bv1 32))))
 (let (($x194 (= $x226 $x31)))
 (let (($x51 (= false false)))
 (let (($x207 (= ?x38 (_ bv0 32))))
 (let (($x180 (=> $x207 $x51)))
 (let (($x147 (= ?x49 (_ bv0 32))))
 (let (($x283 (= $x207 $x147)))
 (let (($x173 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x236)))
 (let (($x245 (and (and (and (and (and $x173 $x283) $x180) $x194) $x170) $x239)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x262 (concat ?x15 (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv4 32))))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x297 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x198 (concat ?x297 (concat ?x204 ?x262))))
 (let (($x237 (= ?x198 ?x198)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x212 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x211 (bvuge ?x212 (_ bv1 32))))
 (let (($x305 (=> $x211 $x237)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var926X))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv2 32))) ?x146)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv3 32))) ?x33)))
 (let (($x142 (= ?x199 ?x199)))
 (let (($x296 (=> $x211 $x142)))
 (let (($x82 (= $x211 $x31)))
 (let (($x187 (= ?x212 (_ bv0 32))))
 (let (($x238 (= $x187 $x147)))
 (let (($x193 (and (and (and (=> $x187 $x51) (= input.dst.llvm-%l ?x236)) $x238) $x82)))
 (let (($x195 (and (and $x193 $x296) $x305)))
 (let (($x260 (not true)))
 (let (($x6 (or (or $x260 $x195) $x245)))
 (let (($x74 (= true true)))
 (let (($x100 (and $x74 $x6)))
 (let (($x293 (= $x100 true)))
 (let (($x136 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x76 (= $x136 $x226)))
 (let (($x13 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x224 (= $x13 $x207)))
 (let (($x202 (=> $x13 $x51)))
 (let (($x42 (and (and $x202 $x224) $x76)))
 (let (($x227 (= $x42 true)))
 (let (($x18 (and (and (= $x13 $x187) (= $x136 $x211)) $x202)))
 (let (($x168 (= $x18 true)))
 (let ((?x34 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (= (_ bv0 3) ?x34)))
 (let (($x46 (= $x123 true)))
 (let (($x55 (= $x46 true)))
 (let (($x179 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x26 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x177 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x26) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x26))))
 (let (($x43 (and true $x177)))
 (let (($x159 (and $x177 $x43)))
 (let (($x125 (= (bvand ?x236 (_ bv4294967288 32)) ?x236)))
 (let (($x109 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x152 (and $x109 $x125)))
 (let (($x163 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x232 (and (and (and (and (and $x43 $x163) $x109) $x152) $x159) $x179)))
 (let (($x112 (= true $x232)))
 (let (($x121 (not $x161)))
 (let (($x209 (=> $x121 $x112)))
 (let (($x203 (= $x209 true)))
 (let (($x128 (= $x203 true)))
 (let (($x206 (= $x128 true)))
 (let (($x114 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x57 (= $x114 true)))
 (let (($x151 (= $x57 true)))
 (let (($x115 (= $x151 true)))
 (let (($x32 (= $x121 true)))
 (let (($x41 (= $x32 true)))
 (let (($x47 (= $x41 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x59)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x75 $x176)))
 (let (($x171 (and $x14 $x181)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x91 $x171)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x156)))))))
 (let (($x149 (and $x165 $x230)))
 (let (($x174 (= $x149 true)))
 (let (($x132 (= $x174 true)))
 (let (($x225 (= $x132 true)))
 (let (($x108 (and $x225 $x47)))
 (let (($x48 (and $x108 $x115)))
 (let (($x183 (and $x48 $x206)))
 (let (($x233 (and $x183 $x55)))
 (let (($x36 (and $x233 $x168)))
 (let (($x12 (and $x36 $x227)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x167 (and $x66 $x12)))
 (let (($x90 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd ?x35 (_ bv3 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x99 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x90)))))))
 (let (($x93 (=> (and $x121 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x21 $x90)))))))
 (let (($x50 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x25 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x25 (or false (or false (and true (or $x229 $x50)))))))
 (let (($x28 (=> (and $x121 $x25) (or false (or false (and true (or $x229 $x50)))))))
 (let (($x53 (and $x28 $x93)))
 (let (($x166 (and $x53 $x167)))
 (let (($x294 (=> $x166 $x293)))
 (not $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var931X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var926X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x208 (concat ?x269 (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv4 32))))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x304 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x196 (concat ?x304 (concat ?x201 ?x208))))
 (let (($x268 (= ?x196 ?x196)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x38 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x226 (bvuge ?x38 (_ bv1 32))))
 (let (($x239 (=> $x226 $x268)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var931X))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv2 32))) ?x172)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv3 32))) ?x52)))
 (let (($x271 (= ?x37 ?x37)))
 (let (($x170 (=> $x226 $x271)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x54))))
 (let (($x70 (= (_ bv0 32) ?x236)))
 (let ((?x49 (ite $x70 (_ bv0 32) (_ bv1 32))))
 (let (($x31 (bvuge ?x49 (_ bv1 32))))
 (let (($x194 (= $x226 $x31)))
 (let (($x51 (= false false)))
 (let (($x207 (= ?x38 (_ bv0 32))))
 (let (($x180 (=> $x207 $x51)))
 (let (($x147 (= ?x49 (_ bv0 32))))
 (let (($x283 (= $x207 $x147)))
 (let (($x173 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x236)))
 (let (($x245 (and (and (and (and (and $x173 $x283) $x180) $x194) $x170) $x239)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x262 (concat ?x15 (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv4 32))))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x297 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x198 (concat ?x297 (concat ?x204 ?x262))))
 (let (($x237 (= ?x198 ?x198)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x212 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x211 (bvuge ?x212 (_ bv1 32))))
 (let (($x305 (=> $x211 $x237)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var926X))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv2 32))) ?x146)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv3 32))) ?x33)))
 (let (($x142 (= ?x199 ?x199)))
 (let (($x296 (=> $x211 $x142)))
 (let (($x82 (= $x211 $x31)))
 (let (($x187 (= ?x212 (_ bv0 32))))
 (let (($x238 (= $x187 $x147)))
 (let (($x193 (and (and (and (=> $x187 $x51) (= input.dst.llvm-%l ?x236)) $x238) $x82)))
 (let (($x195 (and (and $x193 $x296) $x305)))
 (let (($x260 (not true)))
 (let (($x6 (or (or $x260 $x195) $x245)))
 (let (($x74 (= true true)))
 (let (($x100 (and $x74 $x6)))
 (let (($x293 (= $x100 true)))
 (let (($x136 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x76 (= $x136 $x226)))
 (let (($x13 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x224 (= $x13 $x207)))
 (let (($x202 (=> $x13 $x51)))
 (let (($x42 (and (and $x202 $x224) $x76)))
 (let (($x227 (= $x42 true)))
 (let (($x18 (and (and (= $x13 $x187) (= $x136 $x211)) $x202)))
 (let (($x168 (= $x18 true)))
 (let ((?x34 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (= (_ bv0 3) ?x34)))
 (let (($x46 (= $x123 true)))
 (let (($x55 (= $x46 true)))
 (let (($x179 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x26 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x177 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x26) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x26))))
 (let (($x43 (and true $x177)))
 (let (($x159 (and $x177 $x43)))
 (let (($x125 (= (bvand ?x236 (_ bv4294967288 32)) ?x236)))
 (let (($x109 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x152 (and $x109 $x125)))
 (let (($x163 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x232 (and (and (and (and (and $x43 $x163) $x109) $x152) $x159) $x179)))
 (let (($x112 (= true $x232)))
 (let (($x121 (not $x161)))
 (let (($x209 (=> $x121 $x112)))
 (let (($x203 (= $x209 true)))
 (let (($x128 (= $x203 true)))
 (let (($x206 (= $x128 true)))
 (let (($x114 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x57 (= $x114 true)))
 (let (($x151 (= $x57 true)))
 (let (($x115 (= $x151 true)))
 (let (($x32 (= $x121 true)))
 (let (($x41 (= $x32 true)))
 (let (($x47 (= $x41 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x59)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x75 $x176)))
 (let (($x171 (and $x14 $x181)))
 (let (($x91 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x91 $x171)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x156)))))))
 (let (($x149 (and $x165 $x230)))
 (let (($x174 (= $x149 true)))
 (let (($x132 (= $x174 true)))
 (let (($x225 (= $x132 true)))
 (let (($x108 (and $x225 $x47)))
 (let (($x48 (and $x108 $x115)))
 (let (($x183 (and $x48 $x206)))
 (let (($x233 (and $x183 $x55)))
 (let (($x36 (and $x233 $x168)))
 (let (($x12 (and $x36 $x227)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x167 (and $x66 $x12)))
 (let (($x90 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x160 (bvadd ?x35 (_ bv3 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x160)))
 (let (($x99 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x90)))))))
 (let (($x93 (=> (and $x121 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x21 $x90)))))))
 (let (($x50 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x25 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x80 (=> $x25 (or false (or false (and true (or $x229 $x50)))))))
 (let (($x28 (=> (and $x121 $x25) (or false (or false (and true (or $x229 $x50)))))))
 (let (($x53 (and $x28 $x93)))
 (let (($x166 (and $x53 $x167)))
 (let (($x294 (=> $x166 $x293)))
 (not $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3ffff000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000920)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xcfa48d20)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x8d)
                     #xcfa48d24
                     #x20)
              #xcfa48d27
              #x4f)
       #xcfa48d26
       #xa4))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3ffff000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3ffff003)
  (define-fun input.ind-%var926X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var931X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var931X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var926X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var931X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var926X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x364 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x365 (concat ?x364 (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv4 32))))))
 (let ((?x367 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x371 (concat ?x370 (concat ?x367 ?x365))))
 (let (($x372 (= ?x371 ?x371)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x239 (bvuge ?x265 (_ bv1 32))))
 (let (($x373 (=> $x239 $x372)))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var931X))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv2 32))) ?x352)))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv3 32))) ?x355)))
 (let (($x359 (= ?x358 ?x358)))
 (let (($x360 (=> $x239 $x359)))
 (let ((?x25 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x119))))
 (let (($x280 (= (_ bv0 32) ?x117)))
 (let ((?x281 (ite $x280 (_ bv0 32) (_ bv1 32))))
 (let (($x8 (bvuge ?x281 (_ bv1 32))))
 (let (($x347 (= $x239 $x8)))
 (let (($x18 (= false false)))
 (let (($x196 (= ?x265 (_ bv0 32))))
 (let (($x346 (=> $x196 $x18)))
 (let (($x143 (= ?x281 (_ bv0 32))))
 (let (($x345 (= $x196 $x143)))
 (let (($x344 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x117)))
 (let (($x378 (and (and (and (and (and $x344 $x345) $x346) $x347) $x360) $x373)))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x330 (concat ?x329 (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv4 32))))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x336 (concat ?x335 (concat ?x332 ?x330))))
 (let (($x337 (= ?x336 ?x336)))
 (let (($x137 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x136 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x51 (bvuge ?x136 (_ bv1 32))))
 (let (($x338 (=> $x51 $x337)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var926X))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv2 32))) ?x150)))
 (let ((?x323 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv3 32))) ?x322)))
 (let (($x324 (= ?x323 ?x323)))
 (let (($x325 (=> $x51 $x324)))
 (let (($x103 (= $x51 $x8)))
 (let (($x211 (= ?x136 (_ bv0 32))))
 (let (($x20 (= $x211 $x143)))
 (let (($x341 (and (and (and (=> $x211 $x18) (= input.dst.llvm-%l ?x117)) $x20) $x103)))
 (let (($x343 (and (and $x341 $x325) $x338)))
 (let (($x292 (not true)))
 (let (($x380 (or (or $x292 $x343) $x378)))
 (let (($x139 (= true true)))
 (let (($x381 (and $x139 $x380)))
 (let (($x382 (= $x381 true)))
 (let ((?x27 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x98))))
 (let ((?x291 (bvadd ?x307 (_ bv4 32))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x300))))
 (let (($x254 (= (_ bv0 32) ?x253)))
 (let ((?x310 (ite $x254 (_ bv0 32) (_ bv1 32))))
 (let (($x85 (bvuge ?x310 (_ bv1 32))))
 (let (($x172 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x278 (= $x172 $x85)))
 (let (($x146 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x296 (and $x169 $x146)))
 (let (($x316 (=> $x296 $x278)))
 (let (($x299 (= ?x310 (_ bv0 32))))
 (let (($x195 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x311 (= $x195 $x299)))
 (let (($x302 (=> $x296 $x311)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem ?x307))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv2 32))) ?x250))))
 (let (($x248 (= input.spec-%var-l-1.2.1.2.0 ?x251)))
 (let (($x246 (=> $x296 $x248)))
 (let (($x298 (= (_ bv0 32) ?x307)))
 (let ((?x309 (ite $x298 (_ bv0 32) (_ bv1 32))))
 (let (($x313 (bvuge ?x309 (_ bv1 32))))
 (let (($x240 (= $x146 $x313)))
 (let (($x242 (=> $x169 $x240)))
 (let (($x141 (= ?x309 (_ bv0 32))))
 (let (($x270 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x249 (= $x270 $x141)))
 (let (($x222 (=> $x169 $x249)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x293 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x9 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x272 (concat (select input.dst.llvm-mem ?x9) (concat ?x155 (concat ?x293 ?x6)))))
 (let (($x220 (= input.spec-%var-l-1.2.0 ?x272)))
 (let (($x214 (=> $x169 $x220)))
 (let (($x245 (= $x169 $x239)))
 (let (($x212 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x268 (= $x212 $x196)))
 (let (($x285 (and (and (and (=> $x212 $x18) (=> (and $x169 $x270) $x18)) $x268) $x245)))
 (let (($x264 (and (and (and (and (and (and $x285 $x214) $x222) $x242) $x246) $x302) $x316)))
 (let (($x301 (= $x264 true)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x147 (concat ?x49 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x131 (concat ?x193 (concat ?x205 ?x147))))
 (let ((?x30 (bvadd ?x131 (_ bv4 32))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x180))))
 (let (($x77 (= (_ bv0 32) ?x267)))
 (let ((?x219 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x219 (_ bv1 32))))
 (let (($x37 (= $x172 $x52)))
 (let (($x271 (=> $x296 $x37)))
 (let (($x5 (= ?x219 (_ bv0 32))))
 (let (($x185 (= $x195 $x5)))
 (let (($x23 (=> $x296 $x185)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x39))))
 (let (($x198 (= input.spec-%var-l-1.2.1.2.0 ?x164)))
 (let (($x237 (=> $x296 $x198)))
 (let (($x17 (= (_ bv0 32) ?x131)))
 (let ((?x94 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x33 (bvuge ?x94 (_ bv1 32))))
 (let (($x199 (= $x146 $x33)))
 (let (($x142 (=> $x169 $x199)))
 (let (($x60 (and $x169 $x270)))
 (let (($x83 (=> $x60 $x18)))
 (let (($x72 (= ?x94 (_ bv0 32))))
 (let (($x11 (= $x270 $x72)))
 (let (($x261 (=> $x169 $x11)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x7)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x42)))
 (let (($x166 (= input.spec-%var-l-1.2.0 ?x167)))
 (let (($x74 (=> $x169 $x166)))
 (let (($x197 (and (and (and (and (= $x212 $x211) (= $x169 $x51)) (=> $x212 $x18)) $x74) $x261)))
 (let (($x269 (and (and (and (and (and $x197 $x83) $x142) $x237) $x23) $x271)))
 (let (($x188 (= $x269 true)))
 (let ((?x55 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x233 (= (_ bv0 3) ?x55)))
 (let (($x68 (= $x233 true)))
 (let (($x13 (= $x68 true)))
 (let (($x135 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x86 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x86) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x86))))
 (let (($x118 (and true $x178)))
 (let (($x159 (and $x178 $x118)))
 (let (($x152 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x122 (= (bvand ?x25 (_ bv4294967292 32)) ?x25)))
 (let (($x133 (and $x122 $x152)))
 (let (($x134 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x25 (bvsub ?x25 (_ bv4 32))) (bvult ?x25 (bvsub ?x25 (_ bv4 32))))))
 (let (($x203 (and (and (and (and (and $x118 $x134) $x122) $x133) $x159) $x135)))
 (let (($x128 (= true $x203)))
 (let (($x121 (not $x161)))
 (let (($x206 (=> $x121 $x128)))
 (let (($x183 (= $x206 true)))
 (let (($x235 (= $x183 true)))
 (let (($x34 (= $x235 true)))
 (let (($x115 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x48 (= $x115 true)))
 (let (($x130 (= $x48 true)))
 (let (($x26 (= $x130 true)))
 (let (($x108 (= $x121 true)))
 (let (($x113 (= $x108 true)))
 (let (($x114 (= $x113 true)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x230)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x14 $x181)))
 (let (($x174 (and $x171 $x149)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x79 $x174)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x16)))))))
 (let (($x225 (and $x176 $x132)))
 (let (($x32 (= $x225 true)))
 (let (($x41 (= $x32 true)))
 (let (($x47 (= $x41 true)))
 (let (($x57 (and $x47 $x114)))
 (let (($x182 (and $x57 $x26)))
 (let (($x123 (and $x182 $x34)))
 (let (($x84 (and $x123 $x13)))
 (let (($x208 (and $x84 $x188)))
 (let (($x286 (and $x208 $x301)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x287 (and $x162 $x286)))
 (let (($x64 (bvugt ?x25 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd ?x25 (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x66 (=> (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x64)))))))
 (let (($x154 (=> (and $x121 (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x95 $x64)))))))
 (let (($x148 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x81 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x27 (_ bv1 32))) (or false (or false (and true (or $x89 $x148)))))))
 (let (($x110 (=> (and $x121 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x27 (_ bv1 32)))) (or false (or false (and true (or $x89 $x148)))))))
 (let (($x160 (and $x110 $x154)))
 (let (($x279 (and $x160 $x287)))
 (let (($x383 (=> $x279 $x382)))
 (not $x383))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var931X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var926X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x364 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x365 (concat ?x364 (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv4 32))))))
 (let ((?x367 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x371 (concat ?x370 (concat ?x367 ?x365))))
 (let (($x372 (= ?x371 ?x371)))
 (let (($x161 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (ite $x161 (_ bv0 32) (_ bv1 32))))
 (let (($x239 (bvuge ?x265 (_ bv1 32))))
 (let (($x373 (=> $x239 $x372)))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var931X))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv2 32))) ?x352)))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv3 32))) ?x355)))
 (let (($x359 (= ?x358 ?x358)))
 (let (($x360 (=> $x239 $x359)))
 (let ((?x25 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x119))))
 (let (($x280 (= (_ bv0 32) ?x117)))
 (let ((?x281 (ite $x280 (_ bv0 32) (_ bv1 32))))
 (let (($x8 (bvuge ?x281 (_ bv1 32))))
 (let (($x347 (= $x239 $x8)))
 (let (($x18 (= false false)))
 (let (($x196 (= ?x265 (_ bv0 32))))
 (let (($x346 (=> $x196 $x18)))
 (let (($x143 (= ?x281 (_ bv0 32))))
 (let (($x345 (= $x196 $x143)))
 (let (($x344 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x117)))
 (let (($x378 (and (and (and (and (and $x344 $x345) $x346) $x347) $x360) $x373)))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x330 (concat ?x329 (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv4 32))))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x336 (concat ?x335 (concat ?x332 ?x330))))
 (let (($x337 (= ?x336 ?x336)))
 (let (($x137 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x136 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x51 (bvuge ?x136 (_ bv1 32))))
 (let (($x338 (=> $x51 $x337)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var926X))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv2 32))) ?x150)))
 (let ((?x323 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv3 32))) ?x322)))
 (let (($x324 (= ?x323 ?x323)))
 (let (($x325 (=> $x51 $x324)))
 (let (($x103 (= $x51 $x8)))
 (let (($x211 (= ?x136 (_ bv0 32))))
 (let (($x20 (= $x211 $x143)))
 (let (($x341 (and (and (and (=> $x211 $x18) (= input.dst.llvm-%l ?x117)) $x20) $x103)))
 (let (($x343 (and (and $x341 $x325) $x338)))
 (let (($x292 (not true)))
 (let (($x380 (or (or $x292 $x343) $x378)))
 (let (($x139 (= true true)))
 (let (($x381 (and $x139 $x380)))
 (let (($x382 (= $x381 true)))
 (let ((?x27 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x98))))
 (let ((?x291 (bvadd ?x307 (_ bv4 32))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x300))))
 (let (($x254 (= (_ bv0 32) ?x253)))
 (let ((?x310 (ite $x254 (_ bv0 32) (_ bv1 32))))
 (let (($x85 (bvuge ?x310 (_ bv1 32))))
 (let (($x172 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x278 (= $x172 $x85)))
 (let (($x146 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x296 (and $x169 $x146)))
 (let (($x316 (=> $x296 $x278)))
 (let (($x299 (= ?x310 (_ bv0 32))))
 (let (($x195 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x311 (= $x195 $x299)))
 (let (($x302 (=> $x296 $x311)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem ?x307))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv2 32))) ?x250))))
 (let (($x248 (= input.spec-%var-l-1.2.1.2.0 ?x251)))
 (let (($x246 (=> $x296 $x248)))
 (let (($x298 (= (_ bv0 32) ?x307)))
 (let ((?x309 (ite $x298 (_ bv0 32) (_ bv1 32))))
 (let (($x313 (bvuge ?x309 (_ bv1 32))))
 (let (($x240 (= $x146 $x313)))
 (let (($x242 (=> $x169 $x240)))
 (let (($x141 (= ?x309 (_ bv0 32))))
 (let (($x270 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x249 (= $x270 $x141)))
 (let (($x222 (=> $x169 $x249)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x293 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x9 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x272 (concat (select input.dst.llvm-mem ?x9) (concat ?x155 (concat ?x293 ?x6)))))
 (let (($x220 (= input.spec-%var-l-1.2.0 ?x272)))
 (let (($x214 (=> $x169 $x220)))
 (let (($x245 (= $x169 $x239)))
 (let (($x212 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x268 (= $x212 $x196)))
 (let (($x285 (and (and (and (=> $x212 $x18) (=> (and $x169 $x270) $x18)) $x268) $x245)))
 (let (($x264 (and (and (and (and (and (and $x285 $x214) $x222) $x242) $x246) $x302) $x316)))
 (let (($x301 (= $x264 true)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x147 (concat ?x49 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x131 (concat ?x193 (concat ?x205 ?x147))))
 (let ((?x30 (bvadd ?x131 (_ bv4 32))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x180))))
 (let (($x77 (= (_ bv0 32) ?x267)))
 (let ((?x219 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x219 (_ bv1 32))))
 (let (($x37 (= $x172 $x52)))
 (let (($x271 (=> $x296 $x37)))
 (let (($x5 (= ?x219 (_ bv0 32))))
 (let (($x185 (= $x195 $x5)))
 (let (($x23 (=> $x296 $x185)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x39))))
 (let (($x198 (= input.spec-%var-l-1.2.1.2.0 ?x164)))
 (let (($x237 (=> $x296 $x198)))
 (let (($x17 (= (_ bv0 32) ?x131)))
 (let ((?x94 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x33 (bvuge ?x94 (_ bv1 32))))
 (let (($x199 (= $x146 $x33)))
 (let (($x142 (=> $x169 $x199)))
 (let (($x60 (and $x169 $x270)))
 (let (($x83 (=> $x60 $x18)))
 (let (($x72 (= ?x94 (_ bv0 32))))
 (let (($x11 (= $x270 $x72)))
 (let (($x261 (=> $x169 $x11)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x7)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x42)))
 (let (($x166 (= input.spec-%var-l-1.2.0 ?x167)))
 (let (($x74 (=> $x169 $x166)))
 (let (($x197 (and (and (and (and (= $x212 $x211) (= $x169 $x51)) (=> $x212 $x18)) $x74) $x261)))
 (let (($x269 (and (and (and (and (and $x197 $x83) $x142) $x237) $x23) $x271)))
 (let (($x188 (= $x269 true)))
 (let ((?x55 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x233 (= (_ bv0 3) ?x55)))
 (let (($x68 (= $x233 true)))
 (let (($x13 (= $x68 true)))
 (let (($x135 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x86 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x86) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x86))))
 (let (($x118 (and true $x178)))
 (let (($x159 (and $x178 $x118)))
 (let (($x152 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x122 (= (bvand ?x25 (_ bv4294967292 32)) ?x25)))
 (let (($x133 (and $x122 $x152)))
 (let (($x134 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x25 (bvsub ?x25 (_ bv4 32))) (bvult ?x25 (bvsub ?x25 (_ bv4 32))))))
 (let (($x203 (and (and (and (and (and $x118 $x134) $x122) $x133) $x159) $x135)))
 (let (($x128 (= true $x203)))
 (let (($x121 (not $x161)))
 (let (($x206 (=> $x121 $x128)))
 (let (($x183 (= $x206 true)))
 (let (($x235 (= $x183 true)))
 (let (($x34 (= $x235 true)))
 (let (($x115 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x48 (= $x115 true)))
 (let (($x130 (= $x48 true)))
 (let (($x26 (= $x130 true)))
 (let (($x108 (= $x121 true)))
 (let (($x113 (= $x108 true)))
 (let (($x114 (= $x113 true)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x230)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x14 $x181)))
 (let (($x174 (and $x171 $x149)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x79 $x174)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x16)))))))
 (let (($x225 (and $x176 $x132)))
 (let (($x32 (= $x225 true)))
 (let (($x41 (= $x32 true)))
 (let (($x47 (= $x41 true)))
 (let (($x57 (and $x47 $x114)))
 (let (($x182 (and $x57 $x26)))
 (let (($x123 (and $x182 $x34)))
 (let (($x84 (and $x123 $x13)))
 (let (($x208 (and $x84 $x188)))
 (let (($x286 (and $x208 $x301)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x287 (and $x162 $x286)))
 (let (($x64 (bvugt ?x25 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd ?x25 (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x66 (=> (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x64)))))))
 (let (($x154 (=> (and $x121 (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x95 $x64)))))))
 (let (($x148 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x81 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x27 (_ bv1 32))) (or false (or false (and true (or $x89 $x148)))))))
 (let (($x110 (=> (and $x121 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x27 (_ bv1 32)))) (or false (or false (and true (or $x89 $x148)))))))
 (let (($x160 (and $x110 $x154)))
 (let (($x279 (and $x160 $x287)))
 (let (($x383 (=> $x279 $x382)))
 (not $x383))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var931X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var926X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffff00)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x5170f0fd)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xf0f0f0f0)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x5170f0f8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x70)
                                #x5170f0f9
                                #x3b)
                         #x5170f102
                         #xf0)
                  #x5170f0f3
                  #xf0)))
(let ((a!2 (store (store (store (store a!1 #x5170f100 #xf0) #xf03bf0f5 #xf0)
                         #x5170f0fe
                         #x3b)
                  #x5170f0fc
                  #xf0)))
(let ((a!3 (store (store (store (store a!2 #x5170f0ff #xf0) #xf03bf0f3 #xf0)
                         #x5170f0fd
                         #xf0)
                  #x5170f0f4
                  #xf0)))
(let ((a!4 (store (store (store (store a!3 #x5170f101 #xf0) #x5170f0fb #xf0)
                         #x5170f0f5
                         #xf0)
                  #x5170f104
                  #x51)))
(let ((a!5 (store (store (store (store a!4 #x5170f0f6 #x3a) #x5170f0fd #xf0)
                         #x5170f0f2
                         #xf0)
                  #x5170f0f1
                  #xf0)))
(let ((a!6 (store (store (store (store a!5 #xf03bf0f6 #xf2) #x5170f0fa #xf0)
                         #xf03bf0f0
                         #xf0)
                  #x5170f0fe
                  #x3b)))
(let ((a!7 (store (store (store (store a!6 #x5170f0f8 #xf0) #xf03bf0f2 #xf0)
                         #xf03bf0f1
                         #xf0)
                  #x5170f0f0
                  #xf0)))
  (store (store a!7 #xf03bf0f4 #xf0) #x5170f0ff #xf0)))))))))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xf0f03bf0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffff03)
  (define-fun input.ind-%var931X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var926X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var931X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var926X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x522 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x523 (concat ?x522 (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv4 32))))))
 (let ((?x525 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x528 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x529 (concat ?x528 (concat ?x525 ?x523))))
 (let (($x530 (= ?x529 ?x529)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x103 (ite $x27 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x103 (_ bv1 32))))
 (let (($x531 (=> $x22 $x530)))
 (let ((?x510 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var931X))))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv2 32))) ?x510)))
 (let ((?x516 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv3 32))) ?x513)))
 (let (($x517 (= ?x516 ?x516)))
 (let (($x518 (=> $x22 $x517)))
 (let ((?x10 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem ?x10))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv2 32))) ?x54))))
 (let (($x465 (= (_ bv0 32) ?x117)))
 (let ((?x466 (ite $x465 (_ bv0 32) (_ bv1 32))))
 (let (($x469 (bvuge ?x466 (_ bv1 32))))
 (let (($x505 (= $x22 $x469)))
 (let (($x168 (= false false)))
 (let (($x341 (= ?x103 (_ bv0 32))))
 (let (($x504 (=> $x341 $x168)))
 (let (($x467 (= ?x466 (_ bv0 32))))
 (let (($x503 (= $x341 $x467)))
 (let (($x502 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x117)))
 (let (($x536 (and (and (and (and (and $x502 $x503) $x504) $x505) $x518) $x531)))
 (let ((?x487 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x488 (concat ?x487 (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv4 32))))))
 (let ((?x490 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x493 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x494 (concat ?x493 (concat ?x490 ?x488))))
 (let (($x495 (= ?x494 ?x494)))
 (let (($x211 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x191 (ite $x211 (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge ?x191 (_ bv1 32))))
 (let (($x496 (=> $x170 $x495)))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var926X))))
 (let ((?x478 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv2 32))) ?x475)))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv3 32))) ?x478)))
 (let (($x482 (= ?x481 ?x481)))
 (let (($x483 (=> $x170 $x482)))
 (let (($x470 (= $x170 $x469)))
 (let (($x169 (= ?x191 (_ bv0 32))))
 (let (($x468 (= $x169 $x467)))
 (let (($x499 (and (and (and (=> $x169 $x168) (= input.dst.llvm-%l ?x117)) $x468) $x470)))
 (let (($x501 (and (and $x499 $x483) $x496)))
 (let (($x462 (not true)))
 (let (($x538 (or (or $x462 $x501) $x536)))
 (let (($x461 (= true true)))
 (let (($x539 (and $x461 $x538)))
 (let (($x540 (= $x539 true)))
 (let ((?x158 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x331))))
 (let ((?x352 (bvadd ?x333 (_ bv4 32))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem ?x352))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv2 32))) ?x360))))
 (let ((?x389 (bvadd ?x367 (_ bv4 32))))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv1 32))) (select input.dst.llvm-mem ?x389))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv2 32))) ?x393))))
 (let ((?x408 (bvadd ?x399 (_ bv4 32))))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv1 32))) (select input.dst.llvm-mem ?x408))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv2 32))) ?x412))))
 (let (($x419 (= (_ bv0 32) ?x418)))
 (let ((?x420 (ite $x419 (_ bv0 32) (_ bv1 32))))
 (let (($x436 (= ?x420 (_ bv0 32))))
 (let (($x244 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x437 (= $x244 $x436)))
 (let (($x98 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x77 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x60 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x202 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x33 (and $x202 $x60)))
 (let (($x172 (and $x33 $x77)))
 (let (($x309 (and $x172 $x98)))
 (let (($x438 (=> $x309 $x437)))
 (let ((?x427 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem ?x399))))
 (let ((?x433 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv2 32))) ?x427))))
 (let (($x434 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x433)))
 (let (($x435 (=> $x309 $x434)))
 (let (($x421 (bvuge ?x420 (_ bv1 32))))
 (let (($x310 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x422 (= $x310 $x421)))
 (let (($x423 (=> $x309 $x422)))
 (let (($x400 (= (_ bv0 32) ?x399)))
 (let ((?x401 (ite $x400 (_ bv0 32) (_ bv1 32))))
 (let (($x405 (bvuge ?x401 (_ bv1 32))))
 (let (($x406 (= $x98 $x405)))
 (let (($x407 (=> $x172 $x406)))
 (let (($x402 (= ?x401 (_ bv0 32))))
 (let (($x61 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x403 (= $x61 $x402)))
 (let (($x404 (=> $x172 $x403)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv1 32))) (select input.dst.llvm-mem ?x367))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv2 32))) ?x382))))
 (let (($x387 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x386)))
 (let (($x388 (=> $x172 $x387)))
 (let (($x363 (= (_ bv0 32) ?x367)))
 (let ((?x364 (ite $x363 (_ bv0 32) (_ bv1 32))))
 (let (($x371 (bvuge ?x364 (_ bv1 32))))
 (let (($x372 (= $x77 $x371)))
 (let (($x373 (=> $x33 $x372)))
 (let (($x362 (= ?x364 (_ bv0 32))))
 (let (($x164 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x365 (= $x164 $x362)))
 (let (($x368 (=> $x33 $x365)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem ?x333))))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv2 32))) ?x376))))
 (let (($x351 (= input.spec-%var-l-1.2.1.2.0 ?x350)))
 (let (($x349 (=> $x33 $x351)))
 (let (($x336 (= (_ bv0 32) ?x333)))
 (let ((?x337 (ite $x336 (_ bv0 32) (_ bv1 32))))
 (let (($x344 (bvuge ?x337 (_ bv1 32))))
 (let (($x345 (= $x60 $x344)))
 (let (($x374 (=> $x202 $x345)))
 (let (($x338 (= ?x337 (_ bv0 32))))
 (let (($x260 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x343 (= $x260 $x338)))
 (let (($x379 (=> $x202 $x343)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x320 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x148 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x324 (concat (select input.dst.llvm-mem ?x148) (concat ?x150 (concat ?x320 ?x97)))))
 (let (($x325 (= input.spec-%var-l-1.2.0 ?x324)))
 (let (($x342 (=> $x202 $x325)))
 (let (($x140 (= $x202 $x22)))
 (let (($x137 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x318 (= $x137 $x341)))
 (let (($x250 (and $x309 $x244)))
 (let (($x247 (=> $x250 $x168)))
 (let (($x223 (and $x172 $x61)))
 (let (($x145 (=> $x223 $x168)))
 (let (($x23 (and $x33 $x164)))
 (let (($x186 (=> $x23 $x168)))
 (let (($x441 (and (and (and (=> $x137 $x168) (=> (and $x202 $x260) $x168)) $x186) $x145)))
 (let (($x447 (and (and (and (and (and (and $x441 $x247) $x318) $x140) $x342) $x379) $x374)))
 (let (($x453 (and (and (and (and (and (and $x447 $x349) $x368) $x373) $x388) $x404) $x407)))
 (let (($x456 (and (and (and $x453 $x423) $x435) $x438)))
 (let (($x457 (= $x456 true)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x238 (concat ?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x31 (concat ?x147 (concat ?x70 ?x238))))
 (let ((?x198 (bvadd ?x31 (_ bv4 32))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x195))))
 (let ((?x303 (bvadd ?x283 (_ bv4 32))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x6))))
 (let ((?x251 (bvadd ?x40 (_ bv4 32))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x291))))
 (let (($x314 (= (_ bv0 32) ?x258)))
 (let ((?x300 (ite $x314 (_ bv0 32) (_ bv1 32))))
 (let (($x299 (bvuge ?x300 (_ bv1 32))))
 (let (($x311 (= $x310 $x299)))
 (let (($x302 (=> $x309 $x311)))
 (let (($x277 (= ?x300 (_ bv0 32))))
 (let (($x253 (= $x244 $x277)))
 (let (($x254 (=> $x309 $x253)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv1 32))) (select input.dst.llvm-mem ?x40))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv2 32))) ?x313))))
 (let (($x241 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x218)))
 (let (($x243 (=> $x309 $x241)))
 (let (($x308 (= (_ bv0 32) ?x40)))
 (let ((?x216 (ite $x308 (_ bv0 32) (_ bv1 32))))
 (let (($x289 (bvuge ?x216 (_ bv1 32))))
 (let (($x307 (= $x98 $x289)))
 (let (($x298 (=> $x172 $x307)))
 (let (($x252 (= ?x216 (_ bv0 32))))
 (let (($x217 (= $x61 $x252)))
 (let (($x221 (=> $x172 $x217)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem ?x283))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv2 32))) ?x188))))
 (let (($x239 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x312)))
 (let (($x245 (=> $x172 $x239)))
 (let (($x192 (= (_ bv0 32) ?x283)))
 (let ((?x173 (ite $x192 (_ bv0 32) (_ bv1 32))))
 (let (($x219 (bvuge ?x173 (_ bv1 32))))
 (let (($x5 (= $x77 $x219)))
 (let (($x185 (=> $x33 $x5)))
 (let (($x180 (= ?x173 (_ bv0 32))))
 (let (($x306 (= $x164 $x180)))
 (let (($x267 (=> $x33 $x306)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x213))))
 (let (($x295 (= input.spec-%var-l-1.2.1.2.0 ?x297)))
 (let (($x39 (=> $x33 $x295)))
 (let (($x131 (= (_ bv0 32) ?x31)))
 (let ((?x17 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x83 (bvuge ?x17 (_ bv1 32))))
 (let (($x304 (= $x60 $x83)))
 (let (($x146 (=> $x202 $x304)))
 (let (($x261 (and $x202 $x260)))
 (let (($x197 (=> $x261 $x168)))
 (let (($x94 (= ?x17 (_ bv0 32))))
 (let (($x72 (= $x260 $x94)))
 (let (($x11 (=> $x202 $x72)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x76)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x38)))
 (let (($x166 (= input.spec-%var-l-1.2.0 ?x167)))
 (let (($x74 (=> $x202 $x166)))
 (let (($x316 (and (and (and (and (= $x137 $x169) (= $x202 $x170)) (=> $x137 $x168)) $x74) $x11)))
 (let (($x139 (and (and (and (and (and (and $x316 $x197) $x146) $x39) $x267) $x185) $x186)))
 (let (($x281 (and (and (and (and (and (and $x139 $x245) $x221) $x145) $x298) $x243) $x247)))
 (let (($x20 (and (and $x281 $x254) $x302)))
 (let (($x340 (= $x20 true)))
 (let ((?x68 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x13 (= (_ bv0 3) ?x68)))
 (let (($x84 (= $x13 true)))
 (let (($x88 (= $x84 true)))
 (let (($x209 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x43 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x163 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43))))
 (let (($x124 (and true $x163)))
 (let (($x112 (and $x163 $x124)))
 (let (($x152 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x232 (= (bvand ?x10 (_ bv4294967292 32)) ?x10)))
 (let (($x133 (and $x232 $x152)))
 (let (($x109 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x10 (bvsub ?x10 (_ bv4 32))) (bvult ?x10 (bvsub ?x10 (_ bv4 32))))))
 (let (($x206 (and (and (and (and (and $x124 $x109) $x232) $x133) $x112) $x209)))
 (let (($x183 (= true $x206)))
 (let (($x161 (not $x27)))
 (let (($x235 (=> $x161 $x183)))
 (let (($x34 (= $x235 true)))
 (let (($x123 (= $x34 true)))
 (let (($x46 (= $x123 true)))
 (let (($x130 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x26 (= $x130 true)))
 (let (($x182 (= $x26 true)))
 (let (($x177 (= $x182 true)))
 (let (($x114 (= $x161 true)))
 (let (($x57 (= $x114 true)))
 (let (($x151 (= $x57 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x174)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x181 $x230)))
 (let (($x225 (and $x149 $x132)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x162 $x225)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x101 $x45)))))))
 (let (($x41 (and $x59 $x32)))
 (let (($x47 (= $x41 true)))
 (let (($x108 (= $x47 true)))
 (let (($x113 (= $x108 true)))
 (let (($x115 (and $x113 $x151)))
 (let (($x86 (and $x115 $x177)))
 (let (($x55 (and $x86 $x46)))
 (let (($x212 (and $x55 $x88)))
 (let (($x8 (and $x212 $x340)))
 (let (($x458 (and $x8 $x457)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x459 (and $x154 $x458)))
 (let (($x96 (bvugt ?x10 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd ?x10 (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x53 (=> (bvule ?x10 (bvsub (bvadd ?x10 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x96)))))))
 (let (($x90 (=> (and $x161 (bvule ?x10 (bvsub (bvadd ?x10 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x64 $x96)))))))
 (let (($x80 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x21 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x158 (_ bv1 32))) (or false (or false (and true (or $x92 $x80)))))))
 (let (($x69 (=> (and $x161 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x158 (_ bv1 32)))) (or false (or false (and true (or $x92 $x80)))))))
 (let (($x65 (and $x69 $x90)))
 (let (($x460 (and $x65 $x459)))
 (let (($x541 (=> $x460 $x540)))
 (not $x541))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var931X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var926X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x522 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x523 (concat ?x522 (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv4 32))))))
 (let ((?x525 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x528 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var931X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x529 (concat ?x528 (concat ?x525 ?x523))))
 (let (($x530 (= ?x529 ?x529)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x103 (ite $x27 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x103 (_ bv1 32))))
 (let (($x531 (=> $x22 $x530)))
 (let ((?x510 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var931X))))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv2 32))) ?x510)))
 (let ((?x516 (concat (select input.dst.llvm-mem (bvadd input.ind-%var931X (_ bv3 32))) ?x513)))
 (let (($x517 (= ?x516 ?x516)))
 (let (($x518 (=> $x22 $x517)))
 (let ((?x10 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem ?x10))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv2 32))) ?x54))))
 (let (($x465 (= (_ bv0 32) ?x117)))
 (let ((?x466 (ite $x465 (_ bv0 32) (_ bv1 32))))
 (let (($x469 (bvuge ?x466 (_ bv1 32))))
 (let (($x505 (= $x22 $x469)))
 (let (($x168 (= false false)))
 (let (($x341 (= ?x103 (_ bv0 32))))
 (let (($x504 (=> $x341 $x168)))
 (let (($x467 (= ?x466 (_ bv0 32))))
 (let (($x503 (= $x341 $x467)))
 (let (($x502 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x117)))
 (let (($x536 (and (and (and (and (and $x502 $x503) $x504) $x505) $x518) $x531)))
 (let ((?x487 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x488 (concat ?x487 (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv4 32))))))
 (let ((?x490 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x493 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var926X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x494 (concat ?x493 (concat ?x490 ?x488))))
 (let (($x495 (= ?x494 ?x494)))
 (let (($x211 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x191 (ite $x211 (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge ?x191 (_ bv1 32))))
 (let (($x496 (=> $x170 $x495)))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var926X))))
 (let ((?x478 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv2 32))) ?x475)))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd input.ind-%var926X (_ bv3 32))) ?x478)))
 (let (($x482 (= ?x481 ?x481)))
 (let (($x483 (=> $x170 $x482)))
 (let (($x470 (= $x170 $x469)))
 (let (($x169 (= ?x191 (_ bv0 32))))
 (let (($x468 (= $x169 $x467)))
 (let (($x499 (and (and (and (=> $x169 $x168) (= input.dst.llvm-%l ?x117)) $x468) $x470)))
 (let (($x501 (and (and $x499 $x483) $x496)))
 (let (($x462 (not true)))
 (let (($x538 (or (or $x462 $x501) $x536)))
 (let (($x461 (= true true)))
 (let (($x539 (and $x461 $x538)))
 (let (($x540 (= $x539 true)))
 (let ((?x158 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x331))))
 (let ((?x352 (bvadd ?x333 (_ bv4 32))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem ?x352))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv2 32))) ?x360))))
 (let ((?x389 (bvadd ?x367 (_ bv4 32))))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv1 32))) (select input.dst.llvm-mem ?x389))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv2 32))) ?x393))))
 (let ((?x408 (bvadd ?x399 (_ bv4 32))))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv1 32))) (select input.dst.llvm-mem ?x408))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv2 32))) ?x412))))
 (let (($x419 (= (_ bv0 32) ?x418)))
 (let ((?x420 (ite $x419 (_ bv0 32) (_ bv1 32))))
 (let (($x436 (= ?x420 (_ bv0 32))))
 (let (($x244 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x437 (= $x244 $x436)))
 (let (($x98 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x77 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x60 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x202 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x33 (and $x202 $x60)))
 (let (($x172 (and $x33 $x77)))
 (let (($x309 (and $x172 $x98)))
 (let (($x438 (=> $x309 $x437)))
 (let ((?x427 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem ?x399))))
 (let ((?x433 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv2 32))) ?x427))))
 (let (($x434 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x433)))
 (let (($x435 (=> $x309 $x434)))
 (let (($x421 (bvuge ?x420 (_ bv1 32))))
 (let (($x310 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x422 (= $x310 $x421)))
 (let (($x423 (=> $x309 $x422)))
 (let (($x400 (= (_ bv0 32) ?x399)))
 (let ((?x401 (ite $x400 (_ bv0 32) (_ bv1 32))))
 (let (($x405 (bvuge ?x401 (_ bv1 32))))
 (let (($x406 (= $x98 $x405)))
 (let (($x407 (=> $x172 $x406)))
 (let (($x402 (= ?x401 (_ bv0 32))))
 (let (($x61 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x403 (= $x61 $x402)))
 (let (($x404 (=> $x172 $x403)))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv1 32))) (select input.dst.llvm-mem ?x367))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv2 32))) ?x382))))
 (let (($x387 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x386)))
 (let (($x388 (=> $x172 $x387)))
 (let (($x363 (= (_ bv0 32) ?x367)))
 (let ((?x364 (ite $x363 (_ bv0 32) (_ bv1 32))))
 (let (($x371 (bvuge ?x364 (_ bv1 32))))
 (let (($x372 (= $x77 $x371)))
 (let (($x373 (=> $x33 $x372)))
 (let (($x362 (= ?x364 (_ bv0 32))))
 (let (($x164 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x365 (= $x164 $x362)))
 (let (($x368 (=> $x33 $x365)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem ?x333))))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv2 32))) ?x376))))
 (let (($x351 (= input.spec-%var-l-1.2.1.2.0 ?x350)))
 (let (($x349 (=> $x33 $x351)))
 (let (($x336 (= (_ bv0 32) ?x333)))
 (let ((?x337 (ite $x336 (_ bv0 32) (_ bv1 32))))
 (let (($x344 (bvuge ?x337 (_ bv1 32))))
 (let (($x345 (= $x60 $x344)))
 (let (($x374 (=> $x202 $x345)))
 (let (($x338 (= ?x337 (_ bv0 32))))
 (let (($x260 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x343 (= $x260 $x338)))
 (let (($x379 (=> $x202 $x343)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x320 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x148 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x324 (concat (select input.dst.llvm-mem ?x148) (concat ?x150 (concat ?x320 ?x97)))))
 (let (($x325 (= input.spec-%var-l-1.2.0 ?x324)))
 (let (($x342 (=> $x202 $x325)))
 (let (($x140 (= $x202 $x22)))
 (let (($x137 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x318 (= $x137 $x341)))
 (let (($x250 (and $x309 $x244)))
 (let (($x247 (=> $x250 $x168)))
 (let (($x223 (and $x172 $x61)))
 (let (($x145 (=> $x223 $x168)))
 (let (($x23 (and $x33 $x164)))
 (let (($x186 (=> $x23 $x168)))
 (let (($x441 (and (and (and (=> $x137 $x168) (=> (and $x202 $x260) $x168)) $x186) $x145)))
 (let (($x447 (and (and (and (and (and (and $x441 $x247) $x318) $x140) $x342) $x379) $x374)))
 (let (($x453 (and (and (and (and (and (and $x447 $x349) $x368) $x373) $x388) $x404) $x407)))
 (let (($x456 (and (and (and $x453 $x423) $x435) $x438)))
 (let (($x457 (= $x456 true)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x238 (concat ?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x31 (concat ?x147 (concat ?x70 ?x238))))
 (let ((?x198 (bvadd ?x31 (_ bv4 32))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x195))))
 (let ((?x303 (bvadd ?x283 (_ bv4 32))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x6))))
 (let ((?x251 (bvadd ?x40 (_ bv4 32))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x291))))
 (let (($x314 (= (_ bv0 32) ?x258)))
 (let ((?x300 (ite $x314 (_ bv0 32) (_ bv1 32))))
 (let (($x299 (bvuge ?x300 (_ bv1 32))))
 (let (($x311 (= $x310 $x299)))
 (let (($x302 (=> $x309 $x311)))
 (let (($x277 (= ?x300 (_ bv0 32))))
 (let (($x253 (= $x244 $x277)))
 (let (($x254 (=> $x309 $x253)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv1 32))) (select input.dst.llvm-mem ?x40))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv2 32))) ?x313))))
 (let (($x241 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x218)))
 (let (($x243 (=> $x309 $x241)))
 (let (($x308 (= (_ bv0 32) ?x40)))
 (let ((?x216 (ite $x308 (_ bv0 32) (_ bv1 32))))
 (let (($x289 (bvuge ?x216 (_ bv1 32))))
 (let (($x307 (= $x98 $x289)))
 (let (($x298 (=> $x172 $x307)))
 (let (($x252 (= ?x216 (_ bv0 32))))
 (let (($x217 (= $x61 $x252)))
 (let (($x221 (=> $x172 $x217)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem ?x283))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv2 32))) ?x188))))
 (let (($x239 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x312)))
 (let (($x245 (=> $x172 $x239)))
 (let (($x192 (= (_ bv0 32) ?x283)))
 (let ((?x173 (ite $x192 (_ bv0 32) (_ bv1 32))))
 (let (($x219 (bvuge ?x173 (_ bv1 32))))
 (let (($x5 (= $x77 $x219)))
 (let (($x185 (=> $x33 $x5)))
 (let (($x180 (= ?x173 (_ bv0 32))))
 (let (($x306 (= $x164 $x180)))
 (let (($x267 (=> $x33 $x306)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x213))))
 (let (($x295 (= input.spec-%var-l-1.2.1.2.0 ?x297)))
 (let (($x39 (=> $x33 $x295)))
 (let (($x131 (= (_ bv0 32) ?x31)))
 (let ((?x17 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x83 (bvuge ?x17 (_ bv1 32))))
 (let (($x304 (= $x60 $x83)))
 (let (($x146 (=> $x202 $x304)))
 (let (($x261 (and $x202 $x260)))
 (let (($x197 (=> $x261 $x168)))
 (let (($x94 (= ?x17 (_ bv0 32))))
 (let (($x72 (= $x260 $x94)))
 (let (($x11 (=> $x202 $x72)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x76)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x38)))
 (let (($x166 (= input.spec-%var-l-1.2.0 ?x167)))
 (let (($x74 (=> $x202 $x166)))
 (let (($x316 (and (and (and (and (= $x137 $x169) (= $x202 $x170)) (=> $x137 $x168)) $x74) $x11)))
 (let (($x139 (and (and (and (and (and (and $x316 $x197) $x146) $x39) $x267) $x185) $x186)))
 (let (($x281 (and (and (and (and (and (and $x139 $x245) $x221) $x145) $x298) $x243) $x247)))
 (let (($x20 (and (and $x281 $x254) $x302)))
 (let (($x340 (= $x20 true)))
 (let ((?x68 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x13 (= (_ bv0 3) ?x68)))
 (let (($x84 (= $x13 true)))
 (let (($x88 (= $x84 true)))
 (let (($x209 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x43 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x163 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43))))
 (let (($x124 (and true $x163)))
 (let (($x112 (and $x163 $x124)))
 (let (($x152 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x232 (= (bvand ?x10 (_ bv4294967292 32)) ?x10)))
 (let (($x133 (and $x232 $x152)))
 (let (($x109 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x10 (bvsub ?x10 (_ bv4 32))) (bvult ?x10 (bvsub ?x10 (_ bv4 32))))))
 (let (($x206 (and (and (and (and (and $x124 $x109) $x232) $x133) $x112) $x209)))
 (let (($x183 (= true $x206)))
 (let (($x161 (not $x27)))
 (let (($x235 (=> $x161 $x183)))
 (let (($x34 (= $x235 true)))
 (let (($x123 (= $x34 true)))
 (let (($x46 (= $x123 true)))
 (let (($x130 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x26 (= $x130 true)))
 (let (($x182 (= $x26 true)))
 (let (($x177 (= $x182 true)))
 (let (($x114 (= $x161 true)))
 (let (($x57 (= $x114 true)))
 (let (($x151 (= $x57 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x174)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x181 $x230)))
 (let (($x225 (and $x149 $x132)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x162 $x225)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x101 $x45)))))))
 (let (($x41 (and $x59 $x32)))
 (let (($x47 (= $x41 true)))
 (let (($x108 (= $x47 true)))
 (let (($x113 (= $x108 true)))
 (let (($x115 (and $x113 $x151)))
 (let (($x86 (and $x115 $x177)))
 (let (($x55 (and $x86 $x46)))
 (let (($x212 (and $x55 $x88)))
 (let (($x8 (and $x212 $x340)))
 (let (($x458 (and $x8 $x457)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x459 (and $x154 $x458)))
 (let (($x96 (bvugt ?x10 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd ?x10 (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x53 (=> (bvule ?x10 (bvsub (bvadd ?x10 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x96)))))))
 (let (($x90 (=> (and $x161 (bvule ?x10 (bvsub (bvadd ?x10 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x64 $x96)))))))
 (let (($x80 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x21 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x158 (_ bv1 32))) (or false (or false (and true (or $x92 $x80)))))))
 (let (($x69 (=> (and $x161 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x158 (_ bv1 32)))) (or false (or false (and true (or $x92 $x80)))))))
 (let (($x65 (and $x69 $x90)))
 (let (($x460 (and $x65 $x459)))
 (let (($x541 (=> $x460 $x540)))
 (not $x541))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff9)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.ind-%var931X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var926X () (_ BitVec 32)
    #x00000000)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffd) #x01
    (ite (= x!0 #x98000106) #x00
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #x98000101) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00010107) #x00
    (ite (= x!0 #x98000104) #x00
    (ite (= x!0 #x00000000) #x98
    (ite (= x!0 #x00010106) #x00
    (ite (= x!0 #x00010105) #x00
    (ite (= x!0 #x00010102) #x00
    (ite (= x!0 #x98000103) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00010104) #x00
    (ite (= x!0 #x00000006) #xff
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #x98000102) #x00
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #x00010101) #x00
    (ite (= x!0 #x98000107) #x00
    (ite (= x!0 #x00010100) #x00
    (ite (= x!0 #x98000105) #x00
    (ite (= x!0 #xfffffffe) #x01
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #x00000004) #xf8
    (ite (= x!0 #x00000007) #xff
    (ite (= x!0 #x00010103) #x00
    (ite (= x!0 #x98000108) #x00
    (ite (= x!0 #xfffffff8) #x00
      #x00)))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00040000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00800000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var931X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var926X () (_ BitVec 32)
    #x00000000)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000020) #x00
    (ite (= x!0 #x04200005) #x00
    (ite (= x!0 #x00004004) #x00
    (ite (= x!0 #x0000400b) #x00
    (ite (= x!0 #x0000400a) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x04200000) #x00
    (ite (= x!0 #x00000023) #x00
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x00000022) #x00
    (ite (= x!0 #x0000001c) #x00
    (ite (= x!0 #x00000011) #x00
    (ite (= x!0 #x00004005) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x0000000c) #x10
    (ite (= x!0 #x00000013) #x00
    (ite (= x!0 #x00000017) #x04
    (ite (= x!0 #x04200001) #x00
    (ite (= x!0 #x00004006) #x00
    (ite (= x!0 #x00000004) #x02
    (ite (= x!0 #x00004008) #x1c
    (ite (= x!0 #x00000006) #x04
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000010) #x00
    (ite (= x!0 #x00000015) #x00
    (ite (= x!0 #x04200002) #x00
    (ite (= x!0 #x00000012) #x00
    (ite (= x!0 #x00000007) #x40
    (ite (= x!0 #x00000021) #x00
    (ite (= x!0 #x00000014) #x00
    (ite (= x!0 #x04200006) #x00
    (ite (= x!0 #x04200003) #x00
    (ite (= x!0 #x04200007) #x00
    (ite (= x!0 #x00000009) #x00
    (ite (= x!0 #x0000000a) #x02
    (ite (= x!0 #x0000001f) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x00004007) #x00
    (ite (= x!0 #x0000000d) #x00
    (ite (= x!0 #x04200004) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x0000001e) #x00
    (ite (= x!0 #x00004009) #x00
    (ite (= x!0 #x0000001d) #x00
    (ite (= x!0 #x00000016) #x20
      #x00)))))))))))))))))))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x44))))
 (let ((?x224 ((_ extract 2 0) ?x153)))
 (let (($x12 (= (_ bv0 3) ?x224)))
 (let (($x226 (= $x12 true)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x202 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x168 (bvuge ?x202 (_ bv1 32))))
 (let (($x256 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x288 (= $x256 $x168)))
 (let (($x170 (= ?x202 (_ bv0 32))))
 (let (($x191 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x18 (= $x191 $x170)))
 (let (($x85 (and $x18 $x288)))
 (let (($x36 (= $x85 true)))
 (let ((?x88 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x212 (= (_ bv0 3) ?x88)))
 (let (($x187 (= $x212 true)))
 (let (($x137 (= $x187 true)))
 (let (($x159 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x118 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118))))
 (let (($x134 (and true $x111)))
 (let (($x112 (and $x111 $x134)))
 (let (($x133 (= (bvand ?x153 (_ bv4294967288 32)) ?x153)))
 (let (($x116 (= (bvand ?x25 (_ bv4294967292 32)) ?x25)))
 (let (($x203 (and $x116 $x133)))
 (let (($x122 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x25 (bvsub ?x25 (_ bv4 32))) (bvult ?x25 (bvsub ?x25 (_ bv4 32))))))
 (let (($x34 (and (and (and (and (and $x134 $x122) $x116) $x203) $x112) $x159)))
 (let (($x123 (= true $x34)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x161 (not $x27)))
 (let (($x46 (=> $x161 $x123)))
 (let (($x55 (= $x46 true)))
 (let (($x233 (= $x55 true)))
 (let (($x68 (= $x233 true)))
 (let (($x177 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x86 (= $x177 true)))
 (let (($x104 (= $x86 true)))
 (let (($x43 (= $x104 true)))
 (let (($x115 (= $x161 true)))
 (let (($x48 (= $x115 true)))
 (let (($x130 (= $x48 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x32)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (and $x149 $x132)))
 (let (($x47 (and $x225 $x41)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x101 $x47)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x230 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x79)))))))
 (let (($x113 (and $x230 $x108)))
 (let (($x114 (= $x113 true)))
 (let (($x57 (= $x114 true)))
 (let (($x151 (= $x57 true)))
 (let (($x26 (and $x151 $x130)))
 (let (($x178 (and $x26 $x43)))
 (let (($x13 (and $x178 $x68)))
 (let (($x136 (and $x13 $x137)))
 (let (($x7 (and $x136 $x36)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x42 (and $x107 $x7)))
 (let (($x9 (bvugt ?x25 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x25 (_ bv3 32))))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x154 (=> (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x9)))))))
 (let (($x93 (=> (and $x161 (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x229 $x9)))))))
 (let (($x81 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x129 (=> $x75 (or false (or false (and true (or $x35 $x81)))))))
 (let (($x50 (=> (and $x161 $x75) (or false (or false (and true (or $x35 $x81)))))))
 (let (($x95 (and $x50 $x93)))
 (let (($x207 (and $x95 $x42)))
 (let (($x227 (=> $x207 $x226)))
 (not $x227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x25 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x44))))
 (let ((?x224 ((_ extract 2 0) ?x153)))
 (let (($x12 (= (_ bv0 3) ?x224)))
 (let (($x226 (= $x12 true)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x202 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x168 (bvuge ?x202 (_ bv1 32))))
 (let (($x256 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x288 (= $x256 $x168)))
 (let (($x170 (= ?x202 (_ bv0 32))))
 (let (($x191 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x18 (= $x191 $x170)))
 (let (($x85 (and $x18 $x288)))
 (let (($x36 (= $x85 true)))
 (let ((?x88 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x212 (= (_ bv0 3) ?x88)))
 (let (($x187 (= $x212 true)))
 (let (($x137 (= $x187 true)))
 (let (($x159 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x118 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118))))
 (let (($x134 (and true $x111)))
 (let (($x112 (and $x111 $x134)))
 (let (($x133 (= (bvand ?x153 (_ bv4294967288 32)) ?x153)))
 (let (($x116 (= (bvand ?x25 (_ bv4294967292 32)) ?x25)))
 (let (($x203 (and $x116 $x133)))
 (let (($x122 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x25 (bvsub ?x25 (_ bv4 32))) (bvult ?x25 (bvsub ?x25 (_ bv4 32))))))
 (let (($x34 (and (and (and (and (and $x134 $x122) $x116) $x203) $x112) $x159)))
 (let (($x123 (= true $x34)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x161 (not $x27)))
 (let (($x46 (=> $x161 $x123)))
 (let (($x55 (= $x46 true)))
 (let (($x233 (= $x55 true)))
 (let (($x68 (= $x233 true)))
 (let (($x177 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x86 (= $x177 true)))
 (let (($x104 (= $x86 true)))
 (let (($x43 (= $x104 true)))
 (let (($x115 (= $x161 true)))
 (let (($x48 (= $x115 true)))
 (let (($x130 (= $x48 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x32)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (and $x149 $x132)))
 (let (($x47 (and $x225 $x41)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x101 $x47)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x230 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x79)))))))
 (let (($x113 (and $x230 $x108)))
 (let (($x114 (= $x113 true)))
 (let (($x57 (= $x114 true)))
 (let (($x151 (= $x57 true)))
 (let (($x26 (and $x151 $x130)))
 (let (($x178 (and $x26 $x43)))
 (let (($x13 (and $x178 $x68)))
 (let (($x136 (and $x13 $x137)))
 (let (($x7 (and $x136 $x36)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x42 (and $x107 $x7)))
 (let (($x9 (bvugt ?x25 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x25 (_ bv3 32))))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x154 (=> (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x9)))))))
 (let (($x93 (=> (and $x161 (bvule ?x25 (bvsub (bvadd ?x25 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x229 $x9)))))))
 (let (($x81 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x129 (=> $x75 (or false (or false (and true (or $x35 $x81)))))))
 (let (($x50 (=> (and $x161 $x75) (or false (or false (and true (or $x35 $x81)))))))
 (let (($x95 (and $x50 $x93)))
 (let (($x207 (and $x95 $x42)))
 (let (($x227 (=> $x207 $x226)))
 (not $x227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem ?x75))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv2 32))) ?x67))))
 (let (($x227 (bvule ?x125 (_ bv4294967294 32))))
 (let (($x76 (= $x227 true)))
 (let (($x73 (= $x76 true)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x256 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x256 (_ bv1 32))))
 (let (($x85 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (= $x85 $x36)))
 (let (($x168 (= ?x256 (_ bv0 32))))
 (let (($x202 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x288 (= $x202 $x168)))
 (let (($x42 (and $x288 $x7)))
 (let (($x207 (= $x42 true)))
 (let ((?x137 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x136 (= (_ bv0 3) ?x137)))
 (let (($x211 (= $x136 true)))
 (let (($x191 (= $x211 true)))
 (let (($x128 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x106 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x106) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x106))))
 (let (($x210 (and true $x179)))
 (let (($x112 (and $x179 $x210)))
 (let (($x203 (= (bvand ?x125 (_ bv4294967288 32)) ?x125)))
 (let (($x228 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x183 (and $x228 $x203)))
 (let (($x135 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv4 32))) (bvult ?x75 (bvsub ?x75 (_ bv4 32))))))
 (let (($x55 (and (and (and (and (and $x210 $x135) $x228) $x183) $x112) $x128)))
 (let (($x233 (= true $x55)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x161 (not $x27)))
 (let (($x68 (=> $x161 $x233)))
 (let (($x13 (= $x68 true)))
 (let (($x84 (= $x13 true)))
 (let (($x88 (= $x84 true)))
 (let (($x43 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x43 true)))
 (let (($x163 (= $x178 true)))
 (let (($x118 (= $x163 true)))
 (let (($x26 (= $x161 true)))
 (let (($x182 (= $x26 true)))
 (let (($x177 (= $x182 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x108)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x225 $x41)))
 (let (($x114 (and $x47 $x113)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x127 $x114)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x162 $x181)))))))
 (let (($x151 (and $x132 $x57)))
 (let (($x115 (= $x151 true)))
 (let (($x48 (= $x115 true)))
 (let (($x130 (= $x48 true)))
 (let (($x86 (and $x130 $x177)))
 (let (($x124 (and $x86 $x118)))
 (let (($x212 (and $x124 $x88)))
 (let (($x169 (and $x212 $x191)))
 (let (($x224 (and $x169 $x207)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x12 (and $x16 $x224)))
 (let (($x90 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd ?x75 (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x107 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x90)))))))
 (let (($x66 (=> (and $x161 (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x53 $x90)))))))
 (let (($x69 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x64 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x96 (=> $x64 (or false (or false (and true (or $x21 $x69)))))))
 (let (($x148 (=> (and $x161 $x64) (or false (or false (and true (or $x21 $x69)))))))
 (let (($x99 (and $x148 $x66)))
 (let (($x226 (and $x99 $x12)))
 (let (($x14 (=> $x226 $x73)))
 (not $x14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem ?x75))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv2 32))) ?x67))))
 (let (($x227 (bvule ?x125 (_ bv4294967294 32))))
 (let (($x76 (= $x227 true)))
 (let (($x73 (= $x76 true)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x256 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x256 (_ bv1 32))))
 (let (($x85 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x7 (= $x85 $x36)))
 (let (($x168 (= ?x256 (_ bv0 32))))
 (let (($x202 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x288 (= $x202 $x168)))
 (let (($x42 (and $x288 $x7)))
 (let (($x207 (= $x42 true)))
 (let ((?x137 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x136 (= (_ bv0 3) ?x137)))
 (let (($x211 (= $x136 true)))
 (let (($x191 (= $x211 true)))
 (let (($x128 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x106 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x106) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x106))))
 (let (($x210 (and true $x179)))
 (let (($x112 (and $x179 $x210)))
 (let (($x203 (= (bvand ?x125 (_ bv4294967288 32)) ?x125)))
 (let (($x228 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x183 (and $x228 $x203)))
 (let (($x135 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv4 32))) (bvult ?x75 (bvsub ?x75 (_ bv4 32))))))
 (let (($x55 (and (and (and (and (and $x210 $x135) $x228) $x183) $x112) $x128)))
 (let (($x233 (= true $x55)))
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x161 (not $x27)))
 (let (($x68 (=> $x161 $x233)))
 (let (($x13 (= $x68 true)))
 (let (($x84 (= $x13 true)))
 (let (($x88 (= $x84 true)))
 (let (($x43 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x43 true)))
 (let (($x163 (= $x178 true)))
 (let (($x118 (= $x163 true)))
 (let (($x26 (= $x161 true)))
 (let (($x182 (= $x26 true)))
 (let (($x177 (= $x182 true)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x108)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x225 $x41)))
 (let (($x114 (and $x47 $x113)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x127 $x114)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x162 $x181)))))))
 (let (($x151 (and $x132 $x57)))
 (let (($x115 (= $x151 true)))
 (let (($x48 (= $x115 true)))
 (let (($x130 (= $x48 true)))
 (let (($x86 (and $x130 $x177)))
 (let (($x124 (and $x86 $x118)))
 (let (($x212 (and $x124 $x88)))
 (let (($x169 (and $x212 $x191)))
 (let (($x224 (and $x169 $x207)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x12 (and $x16 $x224)))
 (let (($x90 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd ?x75 (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x107 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x90)))))))
 (let (($x66 (=> (and $x161 (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x53 $x90)))))))
 (let (($x69 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x64 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x96 (=> $x64 (or false (or false (and true (or $x21 $x69)))))))
 (let (($x148 (=> (and $x161 $x64) (or false (or false (and true (or $x21 $x69)))))))
 (let (($x99 (and $x148 $x66)))
 (let (($x226 (and $x99 $x12)))
 (let (($x14 (=> $x226 $x73)))
 (not $x14))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var1066X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1066X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x54 (concat ?x236 (select input.dst.llvm-mem (bvadd input.ind-%var1066X (_ bv4 32))))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1066X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1066X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x133 (concat ?x152 (concat ?x67 ?x54))))
 (let (($x203 (= ?x133 ?x133)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x151 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x151 (_ bv1 32))))
 (let (($x183 (=> $x26 $x203)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1066X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var1066X))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1066X (_ bv2 32))) ?x209)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1066X (_ bv3 32))) ?x159)))
 (let (($x34 (= ?x228 ?x228)))
 (let (($x117 (=> $x26 $x34)))
 (let (($x134 (= $x26 $x26)))
 (let (($x115 (= ?x151 (_ bv0 32))))
 (let (($x106 (= $x115 $x115)))
 (let (($x111 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x118 (= false false)))
 (let (($x124 (=> $x115 $x118)))
 (let (($x128 (and (and (and (and (and $x124 $x111) $x106) $x134) $x117) $x183)))
 (let (($x163 (not true)))
 (let (($x55 (or $x163 $x128)))
 (let (($x178 (= true true)))
 (let (($x233 (and $x178 $x55)))
 (let (($x68 (= $x233 true)))
 (let (($x130 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x182 (= $x130 $x26)))
 (let (($x114 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x48 (= $x114 $x115)))
 (let (($x177 (and $x48 $x182)))
 (let (($x86 (= $x177 true)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x101 (concat ?x181 (concat ?x59 ?x16)))))
 (let (($x132 (= input.dst.llvm-%l ?x149)))
 (let (($x66 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x176 (and $x66 $x132)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x53)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x75 $x156)))
 (let (($x65 (and $x89 $x90)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x28 $x65)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x69)))))))
 (let (($x32 (and (and (and $x148 true) $x154) $x176)))
 (let (($x41 (= $x32 true)))
 (let (($x47 (= $x41 true)))
 (let (($x108 (= $x47 true)))
 (let (($x104 (and $x108 $x86)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x43 (and $x27 $x104)))
 (let (($x13 (=> $x43 $x68)))
 (not $x13)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var1066X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1066X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x54 (concat ?x236 (select input.dst.llvm-mem (bvadd input.ind-%var1066X (_ bv4 32))))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1066X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1066X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x133 (concat ?x152 (concat ?x67 ?x54))))
 (let (($x203 (= ?x133 ?x133)))
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x151 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x151 (_ bv1 32))))
 (let (($x183 (=> $x26 $x203)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1066X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var1066X))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1066X (_ bv2 32))) ?x209)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1066X (_ bv3 32))) ?x159)))
 (let (($x34 (= ?x228 ?x228)))
 (let (($x117 (=> $x26 $x34)))
 (let (($x134 (= $x26 $x26)))
 (let (($x115 (= ?x151 (_ bv0 32))))
 (let (($x106 (= $x115 $x115)))
 (let (($x111 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x118 (= false false)))
 (let (($x124 (=> $x115 $x118)))
 (let (($x128 (and (and (and (and (and $x124 $x111) $x106) $x134) $x117) $x183)))
 (let (($x163 (not true)))
 (let (($x55 (or $x163 $x128)))
 (let (($x178 (= true true)))
 (let (($x233 (and $x178 $x55)))
 (let (($x68 (= $x233 true)))
 (let (($x130 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x182 (= $x130 $x26)))
 (let (($x114 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x48 (= $x114 $x115)))
 (let (($x177 (and $x48 $x182)))
 (let (($x86 (= $x177 true)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x101 (concat ?x181 (concat ?x59 ?x16)))))
 (let (($x132 (= input.dst.llvm-%l ?x149)))
 (let (($x66 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x176 (and $x66 $x132)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x53)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x75 $x156)))
 (let (($x65 (and $x89 $x90)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x28 $x65)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x69)))))))
 (let (($x32 (and (and (and $x148 true) $x154) $x176)))
 (let (($x41 (= $x32 true)))
 (let (($x47 (= $x41 true)))
 (let (($x108 (= $x47 true)))
 (let (($x104 (and $x108 $x86)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x43 (and $x27 $x104)))
 (let (($x13 (=> $x43 $x68)))
 (not $x13)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var1083X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1083X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x67 (concat ?x105 (select input.dst.llvm-mem (bvadd input.ind-%var1083X (_ bv4 32))))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1083X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1083X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x133 (concat ?x119 (concat ?x236 ?x67))))
 (let (($x203 (= ?x133 ?x133)))
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x130 (ite $x48 (_ bv0 32) (_ bv1 32))))
 (let (($x86 (bvuge ?x130 (_ bv1 32))))
 (let (($x183 (=> $x86 $x203)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1083X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var1083X))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1083X (_ bv2 32))) ?x122)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1083X (_ bv3 32))) ?x209)))
 (let (($x117 (= ?x34 ?x34)))
 (let (($x235 (=> $x86 $x117)))
 (let (($x46 (= $x86 $x86)))
 (let (($x26 (= ?x130 (_ bv0 32))))
 (let (($x134 (= $x26 $x26)))
 (let (($x112 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x123 (= false false)))
 (let (($x106 (=> $x26 $x123)))
 (let (($x13 (and (and (and (and (and $x106 $x112) $x134) $x46) $x235) $x183)))
 (let (($x111 (not true)))
 (let (($x84 (or $x111 $x13)))
 (let (($x124 (= true true)))
 (let (($x109 (and $x124 $x84)))
 (let (($x161 (= $x109 true)))
 (let (($x177 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x104 (= $x177 $x86)))
 (let (($x115 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x182 (= $x115 $x26)))
 (let (($x43 (and $x182 $x104)))
 (let (($x178 (= $x43 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x149 (concat ?x16 (concat ?x162 ?x101)))))
 (let (($x176 (= input.dst.llvm-%l ?x132)))
 (let (($x66 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x32 (and $x66 $x176)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x90)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x156)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x229 $x89)))
 (let (($x154 (and $x53 $x65)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x81 $x154)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x50)))))))
 (let (($x108 (and (and (and $x75 true) $x225) $x32)))
 (let (($x113 (= $x108 true)))
 (let (($x114 (= $x113 true)))
 (let (($x57 (= $x114 true)))
 (let (($x163 (and $x57 $x178)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x118 (and $x27 $x163)))
 (let (($x92 (=> $x118 $x161)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var1083X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1083X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x67 (concat ?x105 (select input.dst.llvm-mem (bvadd input.ind-%var1083X (_ bv4 32))))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1083X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1083X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x133 (concat ?x119 (concat ?x236 ?x67))))
 (let (($x203 (= ?x133 ?x133)))
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x130 (ite $x48 (_ bv0 32) (_ bv1 32))))
 (let (($x86 (bvuge ?x130 (_ bv1 32))))
 (let (($x183 (=> $x86 $x203)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1083X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var1083X))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1083X (_ bv2 32))) ?x122)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1083X (_ bv3 32))) ?x209)))
 (let (($x117 (= ?x34 ?x34)))
 (let (($x235 (=> $x86 $x117)))
 (let (($x46 (= $x86 $x86)))
 (let (($x26 (= ?x130 (_ bv0 32))))
 (let (($x134 (= $x26 $x26)))
 (let (($x112 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x123 (= false false)))
 (let (($x106 (=> $x26 $x123)))
 (let (($x13 (and (and (and (and (and $x106 $x112) $x134) $x46) $x235) $x183)))
 (let (($x111 (not true)))
 (let (($x84 (or $x111 $x13)))
 (let (($x124 (= true true)))
 (let (($x109 (and $x124 $x84)))
 (let (($x161 (= $x109 true)))
 (let (($x177 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x104 (= $x177 $x86)))
 (let (($x115 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x182 (= $x115 $x26)))
 (let (($x43 (and $x182 $x104)))
 (let (($x178 (= $x43 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x149 (concat ?x16 (concat ?x162 ?x101)))))
 (let (($x176 (= input.dst.llvm-%l ?x132)))
 (let (($x66 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x32 (and $x66 $x176)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x90)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x156)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x229 $x89)))
 (let (($x154 (and $x53 $x65)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x81 $x154)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x50)))))))
 (let (($x108 (and (and (and $x75 true) $x225) $x32)))
 (let (($x113 (= $x108 true)))
 (let (($x114 (= $x113 true)))
 (let (($x57 (= $x114 true)))
 (let (($x163 (and $x57 $x178)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x118 (and $x27 $x163)))
 (let (($x92 (=> $x118 $x161)))
 (not $x92)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var1100X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1100X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x236 (concat ?x44 (select input.dst.llvm-mem (bvadd input.ind-%var1100X (_ bv4 32))))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1100X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1100X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x133 (concat ?x157 (concat ?x105 ?x236))))
 (let (($x203 (= ?x133 ?x133)))
 (let (($x182 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x177 (ite $x182 (_ bv0 32) (_ bv1 32))))
 (let (($x178 (bvuge ?x177 (_ bv1 32))))
 (let (($x183 (=> $x178 $x203)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1100X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var1100X))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1100X (_ bv2 32))) ?x232)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1100X (_ bv3 32))) ?x122)))
 (let (($x235 (= ?x117 ?x117)))
 (let (($x68 (=> $x178 $x235)))
 (let (($x233 (= $x178 $x178)))
 (let (($x86 (= ?x177 (_ bv0 32))))
 (let (($x46 (= $x86 $x86)))
 (let (($x55 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x128 (= false false)))
 (let (($x134 (=> $x86 $x128)))
 (let (($x92 (and (and (and (and (and $x134 $x55) $x46) $x233) $x68) $x183)))
 (let (($x112 (not true)))
 (let (($x45 (or $x112 $x92)))
 (let (($x106 (= true true)))
 (let (($x179 (and $x106 $x45)))
 (let (($x102 (= $x179 true)))
 (let (($x43 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x163 (= $x43 $x178)))
 (let (($x26 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x104 (= $x26 $x86)))
 (let (($x118 (and $x104 $x163)))
 (let (($x124 (= $x118 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x176 (concat ?x132 (concat ?x101 (concat ?x59 ?x149)))))
 (let (($x32 (= input.dst.llvm-%l ?x176)))
 (let (($x66 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x108 (and $x66 $x32)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x65)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x9 $x53)))
 (let (($x225 (and $x90 $x154)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x110 $x225)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x127)))))))
 (let (($x57 (and (and (and $x229 true) $x47) $x108)))
 (let (($x151 (= $x57 true)))
 (let (($x115 (= $x151 true)))
 (let (($x48 (= $x115 true)))
 (let (($x111 (and $x48 $x124)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x123 (and $x27 $x111)))
 (let (($x35 (=> $x123 $x102)))
 (not $x35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var1100X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1100X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x236 (concat ?x44 (select input.dst.llvm-mem (bvadd input.ind-%var1100X (_ bv4 32))))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1100X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1100X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x133 (concat ?x157 (concat ?x105 ?x236))))
 (let (($x203 (= ?x133 ?x133)))
 (let (($x182 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x177 (ite $x182 (_ bv0 32) (_ bv1 32))))
 (let (($x178 (bvuge ?x177 (_ bv1 32))))
 (let (($x183 (=> $x178 $x203)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1100X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var1100X))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1100X (_ bv2 32))) ?x232)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1100X (_ bv3 32))) ?x122)))
 (let (($x235 (= ?x117 ?x117)))
 (let (($x68 (=> $x178 $x235)))
 (let (($x233 (= $x178 $x178)))
 (let (($x86 (= ?x177 (_ bv0 32))))
 (let (($x46 (= $x86 $x86)))
 (let (($x55 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x128 (= false false)))
 (let (($x134 (=> $x86 $x128)))
 (let (($x92 (and (and (and (and (and $x134 $x55) $x46) $x233) $x68) $x183)))
 (let (($x112 (not true)))
 (let (($x45 (or $x112 $x92)))
 (let (($x106 (= true true)))
 (let (($x179 (and $x106 $x45)))
 (let (($x102 (= $x179 true)))
 (let (($x43 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x163 (= $x43 $x178)))
 (let (($x26 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x104 (= $x26 $x86)))
 (let (($x118 (and $x104 $x163)))
 (let (($x124 (= $x118 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x176 (concat ?x132 (concat ?x101 (concat ?x59 ?x149)))))
 (let (($x32 (= input.dst.llvm-%l ?x176)))
 (let (($x66 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x108 (and $x66 $x32)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x65)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x9 $x53)))
 (let (($x225 (and $x90 $x154)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x110 $x225)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x127)))))))
 (let (($x57 (and (and (and $x229 true) $x47) $x108)))
 (let (($x151 (= $x57 true)))
 (let (($x115 (= $x151 true)))
 (let (($x48 (= $x115 true)))
 (let (($x111 (and $x48 $x124)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x123 (and $x27 $x111)))
 (let (($x35 (=> $x123 $x102)))
 (not $x35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var1117X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1117X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x105 (concat ?x152 (select input.dst.llvm-mem (bvadd input.ind-%var1117X (_ bv4 32))))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1117X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1117X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x133 (concat ?x125 (concat ?x44 ?x105))))
 (let (($x203 (= ?x133 ?x133)))
 (let (($x104 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x43 (ite $x104 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (bvuge ?x43 (_ bv1 32))))
 (let (($x183 (=> $x124 $x203)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1117X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var1117X))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1117X (_ bv2 32))) ?x231)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1117X (_ bv3 32))) ?x232)))
 (let (($x68 (= ?x235 ?x235)))
 (let (($x161 (=> $x124 $x68)))
 (let (($x109 (= $x124 $x124)))
 (let (($x178 (= ?x43 (_ bv0 32))))
 (let (($x233 (= $x178 $x178)))
 (let (($x84 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x13 (= false false)))
 (let (($x46 (=> $x178 $x13)))
 (let (($x35 (and (and (and (and (and $x46 $x84) $x233) $x109) $x161) $x183)))
 (let (($x55 (not true)))
 (let (($x71 (or $x55 $x35)))
 (let (($x134 (= true true)))
 (let (($x116 (and $x134 $x71)))
 (let (($x64 (= $x116 true)))
 (let (($x118 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x111 (= $x118 $x124)))
 (let (($x86 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x163 (= $x86 $x178)))
 (let (($x123 (and $x163 $x111)))
 (let (($x106 (= $x123 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x176 (concat ?x149 (concat ?x162 ?x132)))))
 (let (($x108 (= input.dst.llvm-%l ?x32)))
 (let (($x66 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x57 (and $x66 $x108)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x225 (= (_ bv0 32) ?x154)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x156 $x90)))
 (let (($x47 (and $x65 $x225)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x69 $x47)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x41)))))))
 (let (($x48 (and (and (and $x9 true) $x114) $x57)))
 (let (($x130 (= $x48 true)))
 (let (($x26 (= $x130 true)))
 (let (($x182 (= $x26 true)))
 (let (($x112 (and $x182 $x106)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x128 (and $x27 $x112)))
 (let (($x91 (=> $x128 $x64)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var1117X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1117X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x105 (concat ?x152 (select input.dst.llvm-mem (bvadd input.ind-%var1117X (_ bv4 32))))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1117X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1117X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x133 (concat ?x125 (concat ?x44 ?x105))))
 (let (($x203 (= ?x133 ?x133)))
 (let (($x104 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x43 (ite $x104 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (bvuge ?x43 (_ bv1 32))))
 (let (($x183 (=> $x124 $x203)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1117X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var1117X))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1117X (_ bv2 32))) ?x231)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1117X (_ bv3 32))) ?x232)))
 (let (($x68 (= ?x235 ?x235)))
 (let (($x161 (=> $x124 $x68)))
 (let (($x109 (= $x124 $x124)))
 (let (($x178 (= ?x43 (_ bv0 32))))
 (let (($x233 (= $x178 $x178)))
 (let (($x84 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x13 (= false false)))
 (let (($x46 (=> $x178 $x13)))
 (let (($x35 (and (and (and (and (and $x46 $x84) $x233) $x109) $x161) $x183)))
 (let (($x55 (not true)))
 (let (($x71 (or $x55 $x35)))
 (let (($x134 (= true true)))
 (let (($x116 (and $x134 $x71)))
 (let (($x64 (= $x116 true)))
 (let (($x118 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x111 (= $x118 $x124)))
 (let (($x86 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x163 (= $x86 $x178)))
 (let (($x123 (and $x163 $x111)))
 (let (($x106 (= $x123 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x176 (concat ?x149 (concat ?x162 ?x132)))))
 (let (($x108 (= input.dst.llvm-%l ?x32)))
 (let (($x66 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x57 (and $x66 $x108)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x225 (= (_ bv0 32) ?x154)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x156 $x90)))
 (let (($x47 (and $x65 $x225)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x69 $x47)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x41)))))))
 (let (($x48 (and (and (and $x9 true) $x114) $x57)))
 (let (($x130 (= $x48 true)))
 (let (($x26 (= $x130 true)))
 (let (($x182 (= $x26 true)))
 (let (($x112 (and $x182 $x106)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x128 (and $x27 $x112)))
 (let (($x91 (=> $x128 $x64)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x108 (not $x32)))
 (let (($x36 (= $x108 false)))
 (let (($x7 (= $x36 true)))
 (let ((?x187 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x211 (bvuge ?x187 (_ bv1 32))))
 (let (($x203 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (= $x203 $x211)))
 (let (($x137 (= ?x187 (_ bv0 32))))
 (let (($x157 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x170 (= $x157 $x137)))
 (let (($x256 (and $x170 $x18)))
 (let (($x168 (= $x256 true)))
 (let (($x21 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x191 (= $x21 $x211)))
 (let (($x230 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x136 (= $x230 $x137)))
 (let (($x169 (and $x136 $x191)))
 (let (($x51 (= $x169 true)))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x105 (ite $x67 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x105 (_ bv1 32))))
 (let (($x129 (= $x21 $x183)))
 (let (($x54 (= ?x105 (_ bv0 32))))
 (let (($x159 (= $x230 $x54)))
 (let (($x174 (and $x159 $x129)))
 (let (($x88 (= $x174 true)))
 (let (($x35 (= $x203 $x183)))
 (let (($x133 (= $x157 $x54)))
 (let (($x71 (and $x133 $x35)))
 (let (($x116 (= $x71 true)))
 (let ((?x153 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x175 (= (_ bv0 3) ?x153)))
 (let (($x236 (= $x175 true)))
 (let (($x125 (= $x236 true)))
 (let (($x231 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x231 true)))
 (let (($x235 (= $x232 true)))
 (let (($x68 (= $x235 true)))
 (let (($x45 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x117 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x210 (=> $x117 (or false (or false (and true (or $x233 $x45)))))))
 (let (($x55 (=> (and $x108 $x117) (or false (or false (and true (or $x233 $x45)))))))
 (let (($x13 (= $x55 true)))
 (let (($x228 (= $x13 true)))
 (let (($x135 (= $x228 true)))
 (let ((?x48 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x48 (_ bv3 32)))))
 (let (($x106 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x178)))))))
 (let (($x26 (=> (and $x108 (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x43 $x178)))))))
 (let (($x182 (= $x26 true)))
 (let (($x112 (= $x182 true)))
 (let (($x128 (= $x112 true)))
 (let (($x78 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x162 (= $x78 true)))
 (let (($x132 (= $x162 true)))
 (let (($x181 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x176 (= $x181 true)))
 (let (($x79 (= $x176 true)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x225)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x89 $x65)))
 (let (($x114 (and $x154 $x47)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x41 $x114)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x113)))))))
 (let (($x93 (and $x156 $x115)))
 (let (($x95 (= $x93 true)))
 (let (($x107 (= $x95 true)))
 (let (($x66 (= $x107 true)))
 (let (($x59 (and $x66 $x79)))
 (let (($x101 (and $x59 $x132)))
 (let (($x134 (and $x101 $x128)))
 (let (($x206 (and $x134 $x135)))
 (let (($x161 (and $x206 $x68)))
 (let (($x119 (and $x161 $x125)))
 (let (($x64 (and $x119 $x116)))
 (let (($x212 (and $x64 $x88)))
 (let (($x202 (and $x212 $x51)))
 (let (($x288 (and $x202 $x168)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x85 (and $x10 $x288)))
 (let (($x42 (=> $x85 $x7)))
 (not $x42))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x32 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x108 (not $x32)))
 (let (($x36 (= $x108 false)))
 (let (($x7 (= $x36 true)))
 (let ((?x187 (ite $x32 (_ bv0 32) (_ bv1 32))))
 (let (($x211 (bvuge ?x187 (_ bv1 32))))
 (let (($x203 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (= $x203 $x211)))
 (let (($x137 (= ?x187 (_ bv0 32))))
 (let (($x157 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x170 (= $x157 $x137)))
 (let (($x256 (and $x170 $x18)))
 (let (($x168 (= $x256 true)))
 (let (($x21 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x191 (= $x21 $x211)))
 (let (($x230 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x136 (= $x230 $x137)))
 (let (($x169 (and $x136 $x191)))
 (let (($x51 (= $x169 true)))
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x105 (ite $x67 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x105 (_ bv1 32))))
 (let (($x129 (= $x21 $x183)))
 (let (($x54 (= ?x105 (_ bv0 32))))
 (let (($x159 (= $x230 $x54)))
 (let (($x174 (and $x159 $x129)))
 (let (($x88 (= $x174 true)))
 (let (($x35 (= $x203 $x183)))
 (let (($x133 (= $x157 $x54)))
 (let (($x71 (and $x133 $x35)))
 (let (($x116 (= $x71 true)))
 (let ((?x153 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x175 (= (_ bv0 3) ?x153)))
 (let (($x236 (= $x175 true)))
 (let (($x125 (= $x236 true)))
 (let (($x231 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x231 true)))
 (let (($x235 (= $x232 true)))
 (let (($x68 (= $x235 true)))
 (let (($x45 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x117 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x210 (=> $x117 (or false (or false (and true (or $x233 $x45)))))))
 (let (($x55 (=> (and $x108 $x117) (or false (or false (and true (or $x233 $x45)))))))
 (let (($x13 (= $x55 true)))
 (let (($x228 (= $x13 true)))
 (let (($x135 (= $x228 true)))
 (let ((?x48 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x48 (_ bv3 32)))))
 (let (($x106 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x178)))))))
 (let (($x26 (=> (and $x108 (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x43 $x178)))))))
 (let (($x182 (= $x26 true)))
 (let (($x112 (= $x182 true)))
 (let (($x128 (= $x112 true)))
 (let (($x78 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x162 (= $x78 true)))
 (let (($x132 (= $x162 true)))
 (let (($x181 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x176 (= $x181 true)))
 (let (($x79 (= $x176 true)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x225)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x89 $x65)))
 (let (($x114 (and $x154 $x47)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x41 $x114)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x113)))))))
 (let (($x93 (and $x156 $x115)))
 (let (($x95 (= $x93 true)))
 (let (($x107 (= $x95 true)))
 (let (($x66 (= $x107 true)))
 (let (($x59 (and $x66 $x79)))
 (let (($x101 (and $x59 $x132)))
 (let (($x134 (and $x101 $x128)))
 (let (($x206 (and $x134 $x135)))
 (let (($x161 (and $x206 $x68)))
 (let (($x119 (and $x161 $x125)))
 (let (($x64 (and $x119 $x116)))
 (let (($x212 (and $x64 $x88)))
 (let (($x202 (and $x212 $x51)))
 (let (($x288 (and $x202 $x168)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x85 (and $x10 $x288)))
 (let (($x42 (=> $x85 $x7)))
 (not $x42))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b11010000000000011111100000001000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000001111111010000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000001111111010000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000001111111010000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x356af0e8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x356af0eb)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x4ae3f0e8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x356af0e8)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv16777216 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x48 (not $x57)))
 (let (($x158 (= $x48 false)))
 (let (($x171 (= $x158 true)))
 (let ((?x168 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x168 (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x12 (= $x71 $x36)))
 (let (($x288 (= ?x168 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x224 (= $x105 $x288)))
 (let (($x76 (and (and (and (not $x105) (not $x71)) $x224) $x12)))
 (let (($x73 (= $x76 true)))
 (let (($x136 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x169 (not $x136)))
 (let (($x187 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x191 (not $x187)))
 (let (($x110 (and (and (and (= $x187 $x288) (= $x136 $x36)) $x191) $x169)))
 (let (($x50 (= $x110 true)))
 (let (($x133 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x203 (ite $x133 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x203 (_ bv1 32))))
 (let (($x211 (= $x136 $x116)))
 (let (($x183 (= ?x203 (_ bv0 32))))
 (let (($x137 (= $x187 $x183)))
 (let (($x170 (and (and (and $x137 $x211) $x191) $x169)))
 (let (($x18 (= $x170 true)))
 (let (($x230 (not $x71)))
 (let (($x129 (and (and (and (= $x105 $x183) (= $x71 $x116)) (not $x105)) $x230)))
 (let (($x174 (= $x129 true)))
 (let ((?x125 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x119 (= (_ bv0 3) ?x125)))
 (let (($x44 (= $x119 true)))
 (let (($x157 (= $x44 true)))
 (let (($x68 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x161 (= $x68 true)))
 (let (($x102 (= $x161 true)))
 (let (($x153 (= $x102 true)))
 (let (($x122 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x135 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x206 (=> $x135 (or false (or false (and true (or $x209 $x122)))))))
 (let (($x92 (=> (and $x48 $x135) (or false (or false (and true (or $x209 $x122)))))))
 (let (($x233 (= $x92 true)))
 (let (($x34 (= $x233 true)))
 (let (($x231 (= $x34 true)))
 (let ((?x86 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x111 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x86 (_ bv3 32)))))
 (let (($x134 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x111)))))))
 (let (($x104 (=> (and $x48 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x124 $x111)))))))
 (let (($x43 (= $x104 true)))
 (let (($x46 (= $x43 true)))
 (let (($x84 (= $x46 true)))
 (let (($x132 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x101 (= $x132 true)))
 (let (($x16 (= $x101 true)))
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x59 (= $x79 true)))
 (let (($x149 (= $x59 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x114)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x225 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x90 $x225)))
 (let (($x93 (and $x47 $x115)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x62 $x93)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x156)))))))
 (let (($x107 (and $x53 $x95)))
 (let (($x66 (= $x107 true)))
 (let (($x99 (= $x66 true)))
 (let (($x181 (= $x99 true)))
 (let (($x78 (and $x181 $x149)))
 (let (($x32 (and $x78 $x16)))
 (let (($x117 (and $x32 $x84)))
 (let (($x232 (and $x117 $x231)))
 (let (($x175 (and $x232 $x153)))
 (let (($x152 (and $x175 $x157)))
 (let (($x88 (and $x152 $x174)))
 (let (($x256 (and $x88 $x18)))
 (let (($x130 (and $x256 $x50)))
 (let (($x14 (and $x130 $x73)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x165 (and $x25 $x14)))
 (let (($x63 (=> $x165 $x171)))
 (not $x63)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x57 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x48 (not $x57)))
 (let (($x158 (= $x48 false)))
 (let (($x171 (= $x158 true)))
 (let ((?x168 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x168 (_ bv1 32))))
 (let (($x71 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x12 (= $x71 $x36)))
 (let (($x288 (= ?x168 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x224 (= $x105 $x288)))
 (let (($x76 (and (and (and (not $x105) (not $x71)) $x224) $x12)))
 (let (($x73 (= $x76 true)))
 (let (($x136 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x169 (not $x136)))
 (let (($x187 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x191 (not $x187)))
 (let (($x110 (and (and (and (= $x187 $x288) (= $x136 $x36)) $x191) $x169)))
 (let (($x50 (= $x110 true)))
 (let (($x133 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x203 (ite $x133 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x203 (_ bv1 32))))
 (let (($x211 (= $x136 $x116)))
 (let (($x183 (= ?x203 (_ bv0 32))))
 (let (($x137 (= $x187 $x183)))
 (let (($x170 (and (and (and $x137 $x211) $x191) $x169)))
 (let (($x18 (= $x170 true)))
 (let (($x230 (not $x71)))
 (let (($x129 (and (and (and (= $x105 $x183) (= $x71 $x116)) (not $x105)) $x230)))
 (let (($x174 (= $x129 true)))
 (let ((?x125 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x119 (= (_ bv0 3) ?x125)))
 (let (($x44 (= $x119 true)))
 (let (($x157 (= $x44 true)))
 (let (($x68 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x161 (= $x68 true)))
 (let (($x102 (= $x161 true)))
 (let (($x153 (= $x102 true)))
 (let (($x122 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x135 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x206 (=> $x135 (or false (or false (and true (or $x209 $x122)))))))
 (let (($x92 (=> (and $x48 $x135) (or false (or false (and true (or $x209 $x122)))))))
 (let (($x233 (= $x92 true)))
 (let (($x34 (= $x233 true)))
 (let (($x231 (= $x34 true)))
 (let ((?x86 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x111 (bvugt ?x86 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x86 (_ bv3 32)))))
 (let (($x134 (=> (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x111)))))))
 (let (($x104 (=> (and $x48 (bvule ?x86 (bvsub (bvadd ?x86 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x124 $x111)))))))
 (let (($x43 (= $x104 true)))
 (let (($x46 (= $x43 true)))
 (let (($x84 (= $x46 true)))
 (let (($x132 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x101 (= $x132 true)))
 (let (($x16 (= $x101 true)))
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x59 (= $x79 true)))
 (let (($x149 (= $x59 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x114)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x225 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x90 $x225)))
 (let (($x93 (and $x47 $x115)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x62 $x93)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x156)))))))
 (let (($x107 (and $x53 $x95)))
 (let (($x66 (= $x107 true)))
 (let (($x99 (= $x66 true)))
 (let (($x181 (= $x99 true)))
 (let (($x78 (and $x181 $x149)))
 (let (($x32 (and $x78 $x16)))
 (let (($x117 (and $x32 $x84)))
 (let (($x232 (and $x117 $x231)))
 (let (($x175 (and $x232 $x153)))
 (let (($x152 (and $x175 $x157)))
 (let (($x88 (and $x152 $x174)))
 (let (($x256 (and $x88 $x18)))
 (let (($x130 (and $x256 $x50)))
 (let (($x14 (and $x130 $x73)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x165 (and $x25 $x14)))
 (let (($x63 (=> $x165 $x171)))
 (not $x63)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x177 (not $x48)))
 (let (($x73 (= $x177 false)))
 (let (($x14 (= $x73 true)))
 (let ((?x256 (ite $x48 (_ bv0 32) (_ bv1 32))))
 (let (($x85 (bvuge ?x256 (_ bv1 32))))
 (let (($x64 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x130 (= $x64 $x85)))
 (let (($x168 (= ?x256 (_ bv0 32))))
 (let (($x133 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x50 (= $x133 $x168)))
 (let (($x21 (= false false)))
 (let (($x230 (=> $x133 $x21)))
 (let (($x224 (and (and $x230 $x50) $x130)))
 (let (($x227 (= $x224 true)))
 (let (($x137 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x191 (=> $x137 $x21)))
 (let (($x211 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x36 (= $x211 $x85)))
 (let (($x288 (= $x137 $x168)))
 (let (($x42 (and (and $x288 $x36) $x191)))
 (let (($x207 (= $x42 true)))
 (let (($x183 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x35 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x35 (_ bv1 32))))
 (let (($x51 (= $x211 $x159)))
 (let (($x71 (= ?x35 (_ bv0 32))))
 (let (($x136 (= $x137 $x71)))
 (let (($x169 (and (and $x136 $x51) $x191)))
 (let (($x170 (= $x169 true)))
 (let (($x174 (and (and (= $x133 $x71) (= $x64 $x159)) $x230)))
 (let (($x88 (= $x174 true)))
 (let ((?x44 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x157 (= (_ bv0 3) ?x44)))
 (let (($x152 (= $x157 true)))
 (let (($x67 (= $x152 true)))
 (let (($x102 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x153 (= $x102 true)))
 (let (($x175 (= $x153 true)))
 (let (($x236 (= $x175 true)))
 (let (($x13 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x34 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x231 (=> $x34 (or false (or false (and true (or $x55 $x13)))))))
 (let (($x135 (=> (and $x177 $x34) (or false (or false (and true (or $x55 $x13)))))))
 (let (($x179 (= $x135 true)))
 (let (($x232 (= $x179 true)))
 (let (($x235 (= $x232 true)))
 (let ((?x178 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x182 (bvugt ?x178 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x178 (_ bv3 32)))))
 (let (($x84 (=> (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x182)))))))
 (let (($x128 (=> (and $x177 (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x26 $x182)))))))
 (let (($x118 (= $x128 true)))
 (let (($x117 (= $x118 true)))
 (let (($x45 (= $x117 true)))
 (let (($x101 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x16 (= $x101 true)))
 (let (($x32 (= $x16 true)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x149 (= $x59 true)))
 (let (($x78 (= $x149 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x115)))
 (let ((?x225 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x225)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x65 $x47)))
 (let (($x95 (and $x114 $x93)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x89 $x95)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x148)))))))
 (let (($x66 (and $x90 $x107)))
 (let (($x99 (= $x66 true)))
 (let (($x181 (= $x99 true)))
 (let (($x176 (= $x181 true)))
 (let (($x162 (and $x176 $x78)))
 (let (($x108 (and $x162 $x32)))
 (let (($x109 (and $x108 $x45)))
 (let (($x68 (and $x109 $x235)))
 (let (($x125 (and $x68 $x236)))
 (let (($x105 (and $x125 $x67)))
 (let (($x212 (and $x105 $x88)))
 (let (($x18 (and $x212 $x170)))
 (let (($x110 (and $x18 $x207)))
 (let (($x12 (and $x110 $x227)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x76 (and $x113 $x12)))
 (let (($x165 (=> $x76 $x14)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x177 (not $x48)))
 (let (($x73 (= $x177 false)))
 (let (($x14 (= $x73 true)))
 (let ((?x256 (ite $x48 (_ bv0 32) (_ bv1 32))))
 (let (($x85 (bvuge ?x256 (_ bv1 32))))
 (let (($x64 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x130 (= $x64 $x85)))
 (let (($x168 (= ?x256 (_ bv0 32))))
 (let (($x133 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x50 (= $x133 $x168)))
 (let (($x21 (= false false)))
 (let (($x230 (=> $x133 $x21)))
 (let (($x224 (and (and $x230 $x50) $x130)))
 (let (($x227 (= $x224 true)))
 (let (($x137 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x191 (=> $x137 $x21)))
 (let (($x211 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x36 (= $x211 $x85)))
 (let (($x288 (= $x137 $x168)))
 (let (($x42 (and (and $x288 $x36) $x191)))
 (let (($x207 (= $x42 true)))
 (let (($x183 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x35 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x35 (_ bv1 32))))
 (let (($x51 (= $x211 $x159)))
 (let (($x71 (= ?x35 (_ bv0 32))))
 (let (($x136 (= $x137 $x71)))
 (let (($x169 (and (and $x136 $x51) $x191)))
 (let (($x170 (= $x169 true)))
 (let (($x174 (and (and (= $x133 $x71) (= $x64 $x159)) $x230)))
 (let (($x88 (= $x174 true)))
 (let ((?x44 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x157 (= (_ bv0 3) ?x44)))
 (let (($x152 (= $x157 true)))
 (let (($x67 (= $x152 true)))
 (let (($x102 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x153 (= $x102 true)))
 (let (($x175 (= $x153 true)))
 (let (($x236 (= $x175 true)))
 (let (($x13 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x34 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x231 (=> $x34 (or false (or false (and true (or $x55 $x13)))))))
 (let (($x135 (=> (and $x177 $x34) (or false (or false (and true (or $x55 $x13)))))))
 (let (($x179 (= $x135 true)))
 (let (($x232 (= $x179 true)))
 (let (($x235 (= $x232 true)))
 (let ((?x178 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x182 (bvugt ?x178 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x178 (_ bv3 32)))))
 (let (($x84 (=> (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x182)))))))
 (let (($x128 (=> (and $x177 (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x26 $x182)))))))
 (let (($x118 (= $x128 true)))
 (let (($x117 (= $x118 true)))
 (let (($x45 (= $x117 true)))
 (let (($x101 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x16 (= $x101 true)))
 (let (($x32 (= $x16 true)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x149 (= $x59 true)))
 (let (($x78 (= $x149 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x115)))
 (let ((?x225 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x225)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x65 $x47)))
 (let (($x95 (and $x114 $x93)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x89 $x95)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x148)))))))
 (let (($x66 (and $x90 $x107)))
 (let (($x99 (= $x66 true)))
 (let (($x181 (= $x99 true)))
 (let (($x176 (= $x181 true)))
 (let (($x162 (and $x176 $x78)))
 (let (($x108 (and $x162 $x32)))
 (let (($x109 (and $x108 $x45)))
 (let (($x68 (and $x109 $x235)))
 (let (($x125 (and $x68 $x236)))
 (let (($x105 (and $x125 $x67)))
 (let (($x212 (and $x105 $x88)))
 (let (($x18 (and $x212 $x170)))
 (let (($x110 (and $x18 $x207)))
 (let (($x12 (and $x110 $x227)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x76 (and $x113 $x12)))
 (let (($x165 (=> $x76 $x14)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b11010000000000011111100000001000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000001111111010000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000001111111010000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000001111111010000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x356af0e8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x356af0eb)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x4ae3f0e8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x356af0e8)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv128 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x86 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (not $x86)))
 (let (($x38 (= $x178 false)))
 (let (($x28 (= $x38 true)))
 (let ((?x207 (ite $x86 (_ bv0 32) (_ bv1 32))))
 (let (($x226 (bvuge ?x207 (_ bv1 32))))
 (let (($x129 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x165 (= $x129 $x226)))
 (let (($x110 (= ?x207 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x14 (= $x35 $x110)))
 (let (($x81 (and (and (and (not $x129) (=> $x35 (= false false))) $x14) $x165)))
 (let (($x163 (= $x81 true)))
 (let (($x88 (= false false)))
 (let (($x191 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x168 (=> $x191 $x88)))
 (let (($x170 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x256 (not $x170)))
 (let (($x12 (and (and (and (= $x191 $x110) (= $x170 $x226)) $x256) $x168)))
 (let (($x76 (= $x12 true)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x64 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x21 (bvuge ?x64 (_ bv1 32))))
 (let (($x18 (= $x170 $x21)))
 (let (($x159 (= ?x64 (_ bv0 32))))
 (let (($x169 (= $x191 $x159)))
 (let (($x36 (and (and (and $x169 $x18) $x256) $x168)))
 (let (($x7 (= $x36 true)))
 (let (($x212 (=> $x35 $x88)))
 (let (($x136 (and (and (and (= $x35 $x159) (= $x129 $x21)) (not $x129)) $x212)))
 (let (($x211 (= $x136 true)))
 (let ((?x67 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x105 (= (_ bv0 3) ?x67)))
 (let (($x54 (= $x105 true)))
 (let (($x133 (= $x54 true)))
 (let (($x236 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x125 (= $x236 true)))
 (let (($x119 (= $x125 true)))
 (let (($x44 (= $x119 true)))
 (let (($x233 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x235 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x68 (=> $x235 (or false (or false (and true (or $x92 $x233)))))))
 (let (($x210 (=> (and $x178 $x235) (or false (or false (and true (or $x92 $x233)))))))
 (let (($x55 (= $x210 true)))
 (let (($x161 (= $x55 true)))
 (let (($x102 (= $x161 true)))
 (let ((?x111 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x43 (bvugt ?x111 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x111 (_ bv3 32)))))
 (let (($x109 (=> (bvule ?x111 (bvsub (bvadd ?x111 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x43)))))))
 (let (($x106 (=> (and $x178 (bvule ?x111 (bvsub (bvadd ?x111 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x104 $x43)))))))
 (let (($x26 (= $x106 true)))
 (let (($x209 (= $x26 true)))
 (let (($x122 (= $x209 true)))
 (let (($x32 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x108 (= $x32 true)))
 (let (($x57 (= $x108 true)))
 (let (($x78 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x162 (= $x78 true)))
 (let (($x132 (= $x162 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x95)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x225 $x115)))
 (let (($x66 (and $x93 $x107)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x9 $x66)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x90)))))))
 (let (($x181 (and $x154 $x99)))
 (let (($x176 (= $x181 true)))
 (let (($x79 (= $x176 true)))
 (let (($x59 (= $x79 true)))
 (let (($x101 (and $x59 $x132)))
 (let (($x48 (and $x101 $x57)))
 (let (($x34 (and $x48 $x122)))
 (let (($x153 (and $x34 $x102)))
 (let (($x157 (and $x153 $x44)))
 (let (($x203 (and $x157 $x133)))
 (let (($x51 (and $x203 $x211)))
 (let (($x42 (and $x51 $x7)))
 (let (($x73 (and $x42 $x76)))
 (let (($x171 (and $x73 $x163)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x63 (and $x151 $x171)))
 (let (($x123 (=> $x63 $x28)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x86 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (not $x86)))
 (let (($x38 (= $x178 false)))
 (let (($x28 (= $x38 true)))
 (let ((?x207 (ite $x86 (_ bv0 32) (_ bv1 32))))
 (let (($x226 (bvuge ?x207 (_ bv1 32))))
 (let (($x129 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x165 (= $x129 $x226)))
 (let (($x110 (= ?x207 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x14 (= $x35 $x110)))
 (let (($x81 (and (and (and (not $x129) (=> $x35 (= false false))) $x14) $x165)))
 (let (($x163 (= $x81 true)))
 (let (($x88 (= false false)))
 (let (($x191 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x168 (=> $x191 $x88)))
 (let (($x170 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x256 (not $x170)))
 (let (($x12 (and (and (and (= $x191 $x110) (= $x170 $x226)) $x256) $x168)))
 (let (($x76 (= $x12 true)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x64 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x21 (bvuge ?x64 (_ bv1 32))))
 (let (($x18 (= $x170 $x21)))
 (let (($x159 (= ?x64 (_ bv0 32))))
 (let (($x169 (= $x191 $x159)))
 (let (($x36 (and (and (and $x169 $x18) $x256) $x168)))
 (let (($x7 (= $x36 true)))
 (let (($x212 (=> $x35 $x88)))
 (let (($x136 (and (and (and (= $x35 $x159) (= $x129 $x21)) (not $x129)) $x212)))
 (let (($x211 (= $x136 true)))
 (let ((?x67 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x105 (= (_ bv0 3) ?x67)))
 (let (($x54 (= $x105 true)))
 (let (($x133 (= $x54 true)))
 (let (($x236 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x125 (= $x236 true)))
 (let (($x119 (= $x125 true)))
 (let (($x44 (= $x119 true)))
 (let (($x233 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x235 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x68 (=> $x235 (or false (or false (and true (or $x92 $x233)))))))
 (let (($x210 (=> (and $x178 $x235) (or false (or false (and true (or $x92 $x233)))))))
 (let (($x55 (= $x210 true)))
 (let (($x161 (= $x55 true)))
 (let (($x102 (= $x161 true)))
 (let ((?x111 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x43 (bvugt ?x111 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x111 (_ bv3 32)))))
 (let (($x109 (=> (bvule ?x111 (bvsub (bvadd ?x111 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x43)))))))
 (let (($x106 (=> (and $x178 (bvule ?x111 (bvsub (bvadd ?x111 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x104 $x43)))))))
 (let (($x26 (= $x106 true)))
 (let (($x209 (= $x26 true)))
 (let (($x122 (= $x209 true)))
 (let (($x32 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x108 (= $x32 true)))
 (let (($x57 (= $x108 true)))
 (let (($x78 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x162 (= $x78 true)))
 (let (($x132 (= $x162 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x95)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x225 $x115)))
 (let (($x66 (and $x93 $x107)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x9 $x66)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x90)))))))
 (let (($x181 (and $x154 $x99)))
 (let (($x176 (= $x181 true)))
 (let (($x79 (= $x176 true)))
 (let (($x59 (= $x79 true)))
 (let (($x101 (and $x59 $x132)))
 (let (($x48 (and $x101 $x57)))
 (let (($x34 (and $x48 $x122)))
 (let (($x153 (and $x34 $x102)))
 (let (($x157 (and $x153 $x44)))
 (let (($x203 (and $x157 $x133)))
 (let (($x51 (and $x203 $x211)))
 (let (($x42 (and $x51 $x7)))
 (let (($x73 (and $x42 $x76)))
 (let (($x171 (and $x73 $x163)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x63 (and $x151 $x171)))
 (let (($x123 (=> $x63 $x28)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x178 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x124 (not $x178)))
 (let (($x331 (= $x124 false)))
 (let (($x329 (= $x331 true)))
 (let ((?x92 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x282))))
 (let ((?x247 (bvadd ?x307 (_ bv4 32))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x274))))
 (let (($x315 (= (_ bv0 32) ?x291)))
 (let ((?x258 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x314 (bvuge ?x258 (_ bv1 32))))
 (let (($x199 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x97 (= $x199 $x314)))
 (let (($x28 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x230 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x46 (and $x230 $x28)))
 (let (($x29 (=> $x46 $x97)))
 (let (($x253 (= ?x258 (_ bv0 32))))
 (let (($x49 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x49 $x253)))
 (let (($x320 (=> $x46 $x321)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem ?x307))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv2 32))) ?x313))))
 (let (($x319 (= input.spec-%var-l-1.2.1.2.0 ?x215)))
 (let (($x150 (=> $x46 $x319)))
 (let (($x298 (= (_ bv0 32) ?x307)))
 (let ((?x339 (ite $x298 (_ bv0 32) (_ bv1 32))))
 (let (($x290 (bvuge ?x339 (_ bv1 32))))
 (let (($x444 (= $x28 $x290)))
 (let (($x323 (=> $x230 $x444)))
 (let (($x309 (= ?x339 (_ bv0 32))))
 (let (($x207 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x22 (= $x207 $x309)))
 (let (($x140 (=> $x230 $x22)))
 (let ((?x214 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x231 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x40 (concat (select input.dst.llvm-mem ?x231) (concat ?x155 (concat ?x24 ?x214)))))
 (let (($x318 (= input.spec-%var-l-1.2.0 ?x40)))
 (let (($x443 (=> $x230 $x318)))
 (let ((?x292 (ite $x178 (_ bv0 32) (_ bv1 32))))
 (let (($x303 (bvuge ?x292 (_ bv1 32))))
 (let (($x341 (= $x230 $x303)))
 (let (($x285 (= ?x292 (_ bv0 32))))
 (let (($x116 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x103 (= $x116 $x285)))
 (let (($x137 (= false false)))
 (let (($x63 (and $x230 $x207)))
 (let (($x38 (=> $x63 $x137)))
 (let (($x88 (=> $x116 $x137)))
 (let (($x327 (and (and (and (and (and (and $x88 $x38) $x103) $x341) $x443) $x140) $x323)))
 (let (($x328 (and (and (and $x327 $x150) $x320) $x29)))
 (let (($x334 (= $x328 true)))
 (let (($x172 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x254 (= $x172 $x253)))
 (let (($x306 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x194 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x77 (and $x194 $x306)))
 (let (($x143 (=> $x77 $x254)))
 (let (($x23 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x300 (= $x23 $x314)))
 (let (($x277 (=> $x77 $x300)))
 (let (($x244 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x215)))
 (let (($x250 (=> $x77 $x244)))
 (let (($x240 (= $x306 $x290)))
 (let (($x242 (=> $x194 $x240)))
 (let (($x266 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x141 (= $x266 $x309)))
 (let (($x263 (=> $x194 $x141)))
 (let (($x308 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x40)))
 (let (($x216 (=> $x194 $x308)))
 (let (($x173 (and $x194 $x266)))
 (let (($x180 (=> $x173 $x137)))
 (let (($x198 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x259 (=> $x198 $x137)))
 (let (($x20 (and (and (and (and (and (= $x198 $x285) (= $x194 $x303)) $x259) $x180) $x216) $x263)))
 (let (($x440 (and (and (and (and $x20 $x242) $x250) $x277) $x143)))
 (let (($x441 (= $x440 true)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x224 (concat ?x130 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x14 (concat ?x158 (concat ?x12 ?x224))))
 (let ((?x31 (bvadd ?x14 (_ bv4 32))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x72))))
 (let (($x83 (= (_ bv0 32) ?x60)))
 (let ((?x304 (ite $x83 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (= ?x304 (_ bv0 32))))
 (let (($x52 (= $x172 $x146)))
 (let (($x196 (=> $x77 $x52)))
 (let (($x87 (bvuge ?x304 (_ bv1 32))))
 (let (($x186 (= $x23 $x87)))
 (let (($x139 (=> $x77 $x186)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem ?x14))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv2 32))) ?x260))))
 (let (($x5 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x82)))
 (let (($x185 (=> $x77 $x5)))
 (let (($x25 (= (_ bv0 32) ?x14)))
 (let ((?x165 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (bvuge ?x165 (_ bv1 32))))
 (let (($x267 (= $x306 $x123)))
 (let (($x287 (=> $x194 $x267)))
 (let (($x81 (= ?x165 (_ bv0 32))))
 (let (($x283 (= $x266 $x81)))
 (let (($x192 (=> $x194 $x283)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x191)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x288)))
 (let (($x305 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x168)))
 (let (($x237 (=> $x194 $x305)))
 (let (($x159 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x91 (ite $x159 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x91 (_ bv1 32))))
 (let (($x30 (= $x194 $x187)))
 (let (($x129 (= ?x91 (_ bv0 32))))
 (let (($x190 (= $x198 $x129)))
 (let (($x37 (and (and (and (and (and (and $x190 $x30) $x259) $x237) $x192) $x180) $x287)))
 (let (($x312 (and (and (and $x37 $x185) $x139) $x196)))
 (let (($x239 (= $x312 true)))
 (let (($x126 (= $x199 $x87)))
 (let (($x19 (=> $x46 $x126)))
 (let (($x301 (= $x49 $x146)))
 (let (($x33 (=> $x46 $x301)))
 (let (($x193 (= input.spec-%var-l-1.2.1.2.0 ?x82)))
 (let (($x184 (=> $x46 $x193)))
 (let (($x167 (= $x28 $x123)))
 (let (($x10 (=> $x230 $x167)))
 (let (($x163 (= $x207 $x81)))
 (let (($x171 (=> $x230 $x163)))
 (let (($x36 (= input.spec-%var-l-1.2.0 ?x168)))
 (let (($x7 (=> $x230 $x36)))
 (let (($x213 (and (and (and (and (and (= $x116 $x129) (= $x230 $x187)) $x88) $x7) $x171) $x38)))
 (let (($x39 (and (and (and (and $x213 $x10) $x184) $x33) $x19)))
 (let (($x286 (= $x39 true)))
 (let ((?x54 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x133 (= (_ bv0 3) ?x54)))
 (let (($x203 (= $x133 true)))
 (let (($x183 (= $x203 true)))
 (let (($x119 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x44 (= $x119 true)))
 (let (($x157 (= $x44 true)))
 (let (($x152 (= $x157 true)))
 (let (($x179 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x231)))
 (let (($x102 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x92 (_ bv1 32))) (or false (or false (and true (or $x135 $x179)))))))
 (let (($x235 (=> (and $x124 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x92 (_ bv1 32)))) (or false (or false (and true (or $x135 $x179)))))))
 (let (($x206 (= $x235 true)))
 (let (($x153 (= $x206 true)))
 (let (($x175 (= $x153 true)))
 (let ((?x182 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x118 (bvugt ?x182 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x182 (_ bv3 32)))))
 (let (($x122 (=> (bvule ?x182 (bvsub (bvadd ?x182 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x118)))))))
 (let (($x45 (=> (and $x124 (bvule ?x182 (bvsub (bvadd ?x182 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x128 $x118)))))))
 (let (($x134 (= $x45 true)))
 (let (($x34 (= $x134 true)))
 (let (($x13 (= $x34 true)))
 (let (($x108 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x57 (= $x108 true)))
 (let (($x48 (= $x57 true)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x132 (= $x162 true)))
 (let (($x101 (= $x132 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x62)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x89 $x148)))
 (let (($x225 (and $x154 $x9)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x96 $x225)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x229)))))))
 (let (($x176 (and $x80 $x47)))
 (let (($x79 (= $x176 true)))
 (let (($x59 (= $x79 true)))
 (let (($x149 (= $x59 true)))
 (let (($x16 (and $x149 $x101)))
 (let (($x177 (and $x16 $x48)))
 (let (($x228 (and $x177 $x13)))
 (let (($x236 (and $x228 $x175)))
 (let (($x67 (and $x236 $x152)))
 (let (($x35 (and $x67 $x183)))
 (let (($x15 (and $x35 $x286)))
 (let (($x245 (and $x15 $x239)))
 (let (($x442 (and $x245 $x441)))
 (let (($x335 (and $x442 $x334)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x326 (and $x114 $x335)))
 (let (($x333 (=> $x326 $x329)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x178 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x124 (not $x178)))
 (let (($x331 (= $x124 false)))
 (let (($x329 (= $x331 true)))
 (let ((?x92 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x282))))
 (let ((?x247 (bvadd ?x307 (_ bv4 32))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x274))))
 (let (($x315 (= (_ bv0 32) ?x291)))
 (let ((?x258 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x314 (bvuge ?x258 (_ bv1 32))))
 (let (($x199 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x97 (= $x199 $x314)))
 (let (($x28 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x230 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x46 (and $x230 $x28)))
 (let (($x29 (=> $x46 $x97)))
 (let (($x253 (= ?x258 (_ bv0 32))))
 (let (($x49 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (= $x49 $x253)))
 (let (($x320 (=> $x46 $x321)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem ?x307))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv2 32))) ?x313))))
 (let (($x319 (= input.spec-%var-l-1.2.1.2.0 ?x215)))
 (let (($x150 (=> $x46 $x319)))
 (let (($x298 (= (_ bv0 32) ?x307)))
 (let ((?x339 (ite $x298 (_ bv0 32) (_ bv1 32))))
 (let (($x290 (bvuge ?x339 (_ bv1 32))))
 (let (($x444 (= $x28 $x290)))
 (let (($x323 (=> $x230 $x444)))
 (let (($x309 (= ?x339 (_ bv0 32))))
 (let (($x207 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x22 (= $x207 $x309)))
 (let (($x140 (=> $x230 $x22)))
 (let ((?x214 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x231 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x40 (concat (select input.dst.llvm-mem ?x231) (concat ?x155 (concat ?x24 ?x214)))))
 (let (($x318 (= input.spec-%var-l-1.2.0 ?x40)))
 (let (($x443 (=> $x230 $x318)))
 (let ((?x292 (ite $x178 (_ bv0 32) (_ bv1 32))))
 (let (($x303 (bvuge ?x292 (_ bv1 32))))
 (let (($x341 (= $x230 $x303)))
 (let (($x285 (= ?x292 (_ bv0 32))))
 (let (($x116 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x103 (= $x116 $x285)))
 (let (($x137 (= false false)))
 (let (($x63 (and $x230 $x207)))
 (let (($x38 (=> $x63 $x137)))
 (let (($x88 (=> $x116 $x137)))
 (let (($x327 (and (and (and (and (and (and $x88 $x38) $x103) $x341) $x443) $x140) $x323)))
 (let (($x328 (and (and (and $x327 $x150) $x320) $x29)))
 (let (($x334 (= $x328 true)))
 (let (($x172 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x254 (= $x172 $x253)))
 (let (($x306 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x194 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x77 (and $x194 $x306)))
 (let (($x143 (=> $x77 $x254)))
 (let (($x23 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x300 (= $x23 $x314)))
 (let (($x277 (=> $x77 $x300)))
 (let (($x244 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x215)))
 (let (($x250 (=> $x77 $x244)))
 (let (($x240 (= $x306 $x290)))
 (let (($x242 (=> $x194 $x240)))
 (let (($x266 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x141 (= $x266 $x309)))
 (let (($x263 (=> $x194 $x141)))
 (let (($x308 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x40)))
 (let (($x216 (=> $x194 $x308)))
 (let (($x173 (and $x194 $x266)))
 (let (($x180 (=> $x173 $x137)))
 (let (($x198 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x259 (=> $x198 $x137)))
 (let (($x20 (and (and (and (and (and (= $x198 $x285) (= $x194 $x303)) $x259) $x180) $x216) $x263)))
 (let (($x440 (and (and (and (and $x20 $x242) $x250) $x277) $x143)))
 (let (($x441 (= $x440 true)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x224 (concat ?x130 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x14 (concat ?x158 (concat ?x12 ?x224))))
 (let ((?x31 (bvadd ?x14 (_ bv4 32))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x72))))
 (let (($x83 (= (_ bv0 32) ?x60)))
 (let ((?x304 (ite $x83 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (= ?x304 (_ bv0 32))))
 (let (($x52 (= $x172 $x146)))
 (let (($x196 (=> $x77 $x52)))
 (let (($x87 (bvuge ?x304 (_ bv1 32))))
 (let (($x186 (= $x23 $x87)))
 (let (($x139 (=> $x77 $x186)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem ?x14))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv2 32))) ?x260))))
 (let (($x5 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x82)))
 (let (($x185 (=> $x77 $x5)))
 (let (($x25 (= (_ bv0 32) ?x14)))
 (let ((?x165 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (bvuge ?x165 (_ bv1 32))))
 (let (($x267 (= $x306 $x123)))
 (let (($x287 (=> $x194 $x267)))
 (let (($x81 (= ?x165 (_ bv0 32))))
 (let (($x283 (= $x266 $x81)))
 (let (($x192 (=> $x194 $x283)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x191)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x288)))
 (let (($x305 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x168)))
 (let (($x237 (=> $x194 $x305)))
 (let (($x159 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x91 (ite $x159 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x91 (_ bv1 32))))
 (let (($x30 (= $x194 $x187)))
 (let (($x129 (= ?x91 (_ bv0 32))))
 (let (($x190 (= $x198 $x129)))
 (let (($x37 (and (and (and (and (and (and $x190 $x30) $x259) $x237) $x192) $x180) $x287)))
 (let (($x312 (and (and (and $x37 $x185) $x139) $x196)))
 (let (($x239 (= $x312 true)))
 (let (($x126 (= $x199 $x87)))
 (let (($x19 (=> $x46 $x126)))
 (let (($x301 (= $x49 $x146)))
 (let (($x33 (=> $x46 $x301)))
 (let (($x193 (= input.spec-%var-l-1.2.1.2.0 ?x82)))
 (let (($x184 (=> $x46 $x193)))
 (let (($x167 (= $x28 $x123)))
 (let (($x10 (=> $x230 $x167)))
 (let (($x163 (= $x207 $x81)))
 (let (($x171 (=> $x230 $x163)))
 (let (($x36 (= input.spec-%var-l-1.2.0 ?x168)))
 (let (($x7 (=> $x230 $x36)))
 (let (($x213 (and (and (and (and (and (= $x116 $x129) (= $x230 $x187)) $x88) $x7) $x171) $x38)))
 (let (($x39 (and (and (and (and $x213 $x10) $x184) $x33) $x19)))
 (let (($x286 (= $x39 true)))
 (let ((?x54 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x133 (= (_ bv0 3) ?x54)))
 (let (($x203 (= $x133 true)))
 (let (($x183 (= $x203 true)))
 (let (($x119 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x44 (= $x119 true)))
 (let (($x157 (= $x44 true)))
 (let (($x152 (= $x157 true)))
 (let (($x179 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x231)))
 (let (($x102 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x92 (_ bv1 32))) (or false (or false (and true (or $x135 $x179)))))))
 (let (($x235 (=> (and $x124 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x92 (_ bv1 32)))) (or false (or false (and true (or $x135 $x179)))))))
 (let (($x206 (= $x235 true)))
 (let (($x153 (= $x206 true)))
 (let (($x175 (= $x153 true)))
 (let ((?x182 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x118 (bvugt ?x182 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x182 (_ bv3 32)))))
 (let (($x122 (=> (bvule ?x182 (bvsub (bvadd ?x182 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x118)))))))
 (let (($x45 (=> (and $x124 (bvule ?x182 (bvsub (bvadd ?x182 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x128 $x118)))))))
 (let (($x134 (= $x45 true)))
 (let (($x34 (= $x134 true)))
 (let (($x13 (= $x34 true)))
 (let (($x108 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x57 (= $x108 true)))
 (let (($x48 (= $x57 true)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x132 (= $x162 true)))
 (let (($x101 (= $x132 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x62)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x27)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x89 $x148)))
 (let (($x225 (and $x154 $x9)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x96 $x225)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x229)))))))
 (let (($x176 (and $x80 $x47)))
 (let (($x79 (= $x176 true)))
 (let (($x59 (= $x79 true)))
 (let (($x149 (= $x59 true)))
 (let (($x16 (and $x149 $x101)))
 (let (($x177 (and $x16 $x48)))
 (let (($x228 (and $x177 $x13)))
 (let (($x236 (and $x228 $x175)))
 (let (($x67 (and $x236 $x152)))
 (let (($x35 (and $x67 $x183)))
 (let (($x15 (and $x35 $x286)))
 (let (($x245 (and $x15 $x239)))
 (let (($x442 (and $x245 $x441)))
 (let (($x335 (and $x442 $x334)))
 (let (($x114 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x326 (and $x114 $x335)))
 (let (($x333 (=> $x326 $x329)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00111001101011111111111111100000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11011101101011111111111111100111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11011101101011111111111111100100)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11011101101011111111111111100100)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_50)
(function @fun_50
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x111 (not $x78)))
 (let (($x356 (= $x111 false)))
 (let (($x375 (= $x356 true)))
 (let ((?x135 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x141))))
 (let ((?x281 (bvadd ?x340 (_ bv4 32))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x315))))
 (let (($x254 (= (_ bv0 32) ?x253)))
 (let ((?x143 (ite $x254 (_ bv0 32) (_ bv1 32))))
 (let (($x440 (bvuge ?x143 (_ bv1 32))))
 (let (($x83 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x333 (= $x83 $x440)))
 (let (($x63 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x174 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x123 (and $x174 $x63)))
 (let (($x336 (=> $x123 $x333)))
 (let (($x322 (= ?x143 (_ bv0 32))))
 (let (($x82 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x331 (= $x82 $x322)))
 (let (($x329 (=> $x123 $x331)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x250))))
 (let (($x335 (= input.spec-%var-l-1.2.1.2.0 ?x273)))
 (let (($x326 (=> $x123 $x335)))
 (let (($x243 (= (_ bv0 32) ?x340)))
 (let ((?x280 (ite $x243 (_ bv0 32) (_ bv1 32))))
 (let (($x249 (bvuge ?x280 (_ bv1 32))))
 (let (($x328 (= $x63 $x249)))
 (let (($x334 (=> $x174 $x328)))
 (let (($x275 (= ?x280 (_ bv0 32))))
 (let (($x42 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x97 (= $x42 $x275)))
 (let (($x29 (=> $x174 $x97)))
 (let ((?x302 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x232 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x282 (concat (select input.dst.llvm-mem ?x232) (concat ?x217 (concat ?x289 ?x302)))))
 (let (($x320 (= input.spec-%var-l-1.2.0 ?x282)))
 (let (($x332 (=> $x174 $x320)))
 (let ((?x100 (ite $x78 (_ bv0 32) (_ bv1 32))))
 (let (($x308 (bvuge ?x100 (_ bv1 32))))
 (let (($x321 (= $x174 $x308)))
 (let (($x6 (= ?x100 (_ bv0 32))))
 (let (($x159 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x330 (= $x159 $x6)))
 (let (($x199 (and $x123 $x82)))
 (let (($x87 (not $x199)))
 (let (($x33 (and $x123 $x83)))
 (let (($x295 (not $x33)))
 (let (($x88 (= false false)))
 (let (($x171 (and $x174 $x42)))
 (let (($x142 (=> $x171 $x88)))
 (let (($x189 (=> $x159 $x88)))
 (let (($x379 (and (and (and (and (and (and $x189 $x142) $x295) $x87) $x330) $x321) $x332)))
 (let (($x447 (and (and (and (and (and $x379 $x29) $x334) $x326) $x329) $x336)))
 (let (($x353 (= $x447 true)))
 (let (($x186 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x37 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x284 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x5 (and $x284 $x37)))
 (let (($x245 (and $x5 $x186)))
 (let (($x292 (not $x245)))
 (let (($x172 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x312 (and $x5 $x172)))
 (let (($x239 (not $x312)))
 (let (($x103 (= $x172 $x322)))
 (let (($x324 (=> $x5 $x103)))
 (let (($x441 (= $x186 $x440)))
 (let (($x442 (=> $x5 $x441)))
 (let (($x251 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x273)))
 (let (($x276 (=> $x5 $x251)))
 (let (($x222 (= $x37 $x249)))
 (let (($x313 (=> $x284 $x222)))
 (let (($x180 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x218 (= $x180 $x275)))
 (let (($x144 (=> $x284 $x218)))
 (let (($x317 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x282)))
 (let (($x307 (=> $x284 $x317)))
 (let (($x267 (and $x284 $x180)))
 (let (($x287 (=> $x267 $x88)))
 (let (($x305 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x266 (=> $x305 $x88)))
 (let (($x342 (and (and (and (and (and (= $x305 $x6) (= $x284 $x308)) $x266) $x287) $x307) $x144)))
 (let (($x327 (and (and (and (and (and (and $x342 $x313) $x276) $x442) $x324) $x239) $x292)))
 (let (($x319 (= $x327 true)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x227 (concat ?x158 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x76 (concat ?x224 (concat ?x226 ?x227))))
 (let ((?x193 (bvadd ?x76 (_ bv4 32))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x49))))
 (let (($x94 (= (_ bv0 32) ?x17)))
 (let ((?x131 (ite $x94 (_ bv0 32) (_ bv1 32))))
 (let (($x72 (= ?x131 (_ bv0 32))))
 (let (($x52 (= $x172 $x72)))
 (let (($x196 (=> $x5 $x52)))
 (let (($x304 (bvuge ?x131 (_ bv1 32))))
 (let (($x139 (= $x186 $x304)))
 (let (($x265 (=> $x5 $x139)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem ?x76))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv2 32))) ?x166))))
 (let (($x188 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x200)))
 (let (($x279 (=> $x5 $x188)))
 (let (($x14 (= (_ bv0 32) ?x76)))
 (let ((?x25 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge ?x25 (_ bv1 32))))
 (let (($x77 (= $x37 $x38)))
 (let (($x219 (=> $x284 $x77)))
 (let (($x165 (= ?x25 (_ bv0 32))))
 (let (($x269 (= $x180 $x165)))
 (let (($x306 (=> $x284 $x269)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x170)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x211)))
 (let (($x192 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x168)))
 (let (($x271 (=> $x284 $x192)))
 (let (($x129 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x21 (ite $x129 (_ bv0 32) (_ bv1 32))))
 (let (($x262 (bvuge ?x21 (_ bv1 32))))
 (let (($x195 (= $x284 $x262)))
 (let (($x230 (= ?x21 (_ bv0 32))))
 (let (($x237 (= $x305 $x230)))
 (let (($x299 (and (and (and (and (and (and $x237 $x195) $x266) $x271) $x306) $x287) $x219)))
 (let (($x294 (and (and (and (and (and $x299 $x279) $x265) $x196) $x239) $x292)))
 (let (($x24 (= $x294 true)))
 (let (($x146 (= $x83 $x304)))
 (let (($x301 (=> $x123 $x146)))
 (let (($x261 (= $x82 $x72)))
 (let (($x60 (=> $x123 $x261)))
 (let (($x74 (= input.spec-%var-l-1.2.1.2.0 ?x200)))
 (let (($x260 (=> $x123 $x74)))
 (let (($x213 (= $x63 $x38)))
 (let (($x28 (=> $x174 $x213)))
 (let (($x81 (= $x42 $x165)))
 (let (($x163 (=> $x174 $x81)))
 (let (($x36 (= input.spec-%var-l-1.2.0 ?x168)))
 (let (($x7 (=> $x174 $x36)))
 (let (($x15 (and (and (and (and (and (= $x159 $x230) (= $x174 $x262)) $x189) $x7) $x163) $x142)))
 (let (($x268 (and (and (and (and (and (and $x15 $x28) $x260) $x60) $x301) $x295) $x87)))
 (let (($x259 (= $x268 true)))
 (let ((?x203 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x203)))
 (let (($x35 (= $x183 true)))
 (let (($x71 (= $x35 true)))
 (let (($x157 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x152 (= $x157 true)))
 (let (($x67 (= $x152 true)))
 (let (($x105 (= $x67 true)))
 (let (($x210 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x175 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x135 (_ bv1 32))) (or false (or false (and true (or $x68 $x210)))))))
 (let (($x161 (=> (and $x111 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x135 (_ bv1 32)))) (or false (or false (and true (or $x68 $x210)))))))
 (let (($x231 (= $x161 true)))
 (let (($x236 (= $x231 true)))
 (let (($x125 (= $x236 true)))
 (let ((?x104 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x106 (bvugt ?x104 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x104 (_ bv3 32)))))
 (let (($x13 (=> (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x106)))))))
 (let (($x209 (=> (and $x111 (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x109 $x106)))))))
 (let (($x84 (= $x209 true)))
 (let (($x228 (= $x84 true)))
 (let (($x92 (= $x228 true)))
 (let (($x27 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x149 (= $x27 true)))
 (let (($x86 (= $x149 true)))
 (let (($x176 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x79 (= $x176 true)))
 (let (($x59 (= $x79 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x16)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x177 $x62)))
 (let (($x108 (and $x101 $x32)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x127 $x108)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x58)))))))
 (let (($x75 (and $x132 $x99)))
 (let (($x90 (= $x75 true)))
 (let (($x9 (= $x90 true)))
 (let (($x225 (= $x9 true)))
 (let (($x57 (and $x225 $x59)))
 (let (($x178 (and $x57 $x86)))
 (let (($x233 (and $x178 $x92)))
 (let (($x119 (and $x233 $x125)))
 (let (($x54 (and $x119 $x105)))
 (let (($x116 (and $x54 $x71)))
 (let (($x208 (and $x116 $x259)))
 (let (($x214 (and $x208 $x24)))
 (let (($x150 (and $x214 $x319)))
 (let (($x354 (and $x150 $x353)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x348 (and $x162 $x354)))
 (let (($x347 (=> $x348 $x375)))
 (not $x347))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x111 (not $x78)))
 (let (($x356 (= $x111 false)))
 (let (($x375 (= $x356 true)))
 (let ((?x135 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x141))))
 (let ((?x281 (bvadd ?x340 (_ bv4 32))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x315))))
 (let (($x254 (= (_ bv0 32) ?x253)))
 (let ((?x143 (ite $x254 (_ bv0 32) (_ bv1 32))))
 (let (($x440 (bvuge ?x143 (_ bv1 32))))
 (let (($x83 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x333 (= $x83 $x440)))
 (let (($x63 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x174 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x123 (and $x174 $x63)))
 (let (($x336 (=> $x123 $x333)))
 (let (($x322 (= ?x143 (_ bv0 32))))
 (let (($x82 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x331 (= $x82 $x322)))
 (let (($x329 (=> $x123 $x331)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x250))))
 (let (($x335 (= input.spec-%var-l-1.2.1.2.0 ?x273)))
 (let (($x326 (=> $x123 $x335)))
 (let (($x243 (= (_ bv0 32) ?x340)))
 (let ((?x280 (ite $x243 (_ bv0 32) (_ bv1 32))))
 (let (($x249 (bvuge ?x280 (_ bv1 32))))
 (let (($x328 (= $x63 $x249)))
 (let (($x334 (=> $x174 $x328)))
 (let (($x275 (= ?x280 (_ bv0 32))))
 (let (($x42 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x97 (= $x42 $x275)))
 (let (($x29 (=> $x174 $x97)))
 (let ((?x302 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x232 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x282 (concat (select input.dst.llvm-mem ?x232) (concat ?x217 (concat ?x289 ?x302)))))
 (let (($x320 (= input.spec-%var-l-1.2.0 ?x282)))
 (let (($x332 (=> $x174 $x320)))
 (let ((?x100 (ite $x78 (_ bv0 32) (_ bv1 32))))
 (let (($x308 (bvuge ?x100 (_ bv1 32))))
 (let (($x321 (= $x174 $x308)))
 (let (($x6 (= ?x100 (_ bv0 32))))
 (let (($x159 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x330 (= $x159 $x6)))
 (let (($x199 (and $x123 $x82)))
 (let (($x87 (not $x199)))
 (let (($x33 (and $x123 $x83)))
 (let (($x295 (not $x33)))
 (let (($x88 (= false false)))
 (let (($x171 (and $x174 $x42)))
 (let (($x142 (=> $x171 $x88)))
 (let (($x189 (=> $x159 $x88)))
 (let (($x379 (and (and (and (and (and (and $x189 $x142) $x295) $x87) $x330) $x321) $x332)))
 (let (($x447 (and (and (and (and (and $x379 $x29) $x334) $x326) $x329) $x336)))
 (let (($x353 (= $x447 true)))
 (let (($x186 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x37 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x284 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x5 (and $x284 $x37)))
 (let (($x245 (and $x5 $x186)))
 (let (($x292 (not $x245)))
 (let (($x172 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x312 (and $x5 $x172)))
 (let (($x239 (not $x312)))
 (let (($x103 (= $x172 $x322)))
 (let (($x324 (=> $x5 $x103)))
 (let (($x441 (= $x186 $x440)))
 (let (($x442 (=> $x5 $x441)))
 (let (($x251 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x273)))
 (let (($x276 (=> $x5 $x251)))
 (let (($x222 (= $x37 $x249)))
 (let (($x313 (=> $x284 $x222)))
 (let (($x180 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x218 (= $x180 $x275)))
 (let (($x144 (=> $x284 $x218)))
 (let (($x317 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x282)))
 (let (($x307 (=> $x284 $x317)))
 (let (($x267 (and $x284 $x180)))
 (let (($x287 (=> $x267 $x88)))
 (let (($x305 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x266 (=> $x305 $x88)))
 (let (($x342 (and (and (and (and (and (= $x305 $x6) (= $x284 $x308)) $x266) $x287) $x307) $x144)))
 (let (($x327 (and (and (and (and (and (and $x342 $x313) $x276) $x442) $x324) $x239) $x292)))
 (let (($x319 (= $x327 true)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x227 (concat ?x158 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x76 (concat ?x224 (concat ?x226 ?x227))))
 (let ((?x193 (bvadd ?x76 (_ bv4 32))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x49))))
 (let (($x94 (= (_ bv0 32) ?x17)))
 (let ((?x131 (ite $x94 (_ bv0 32) (_ bv1 32))))
 (let (($x72 (= ?x131 (_ bv0 32))))
 (let (($x52 (= $x172 $x72)))
 (let (($x196 (=> $x5 $x52)))
 (let (($x304 (bvuge ?x131 (_ bv1 32))))
 (let (($x139 (= $x186 $x304)))
 (let (($x265 (=> $x5 $x139)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem ?x76))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv2 32))) ?x166))))
 (let (($x188 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x200)))
 (let (($x279 (=> $x5 $x188)))
 (let (($x14 (= (_ bv0 32) ?x76)))
 (let ((?x25 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge ?x25 (_ bv1 32))))
 (let (($x77 (= $x37 $x38)))
 (let (($x219 (=> $x284 $x77)))
 (let (($x165 (= ?x25 (_ bv0 32))))
 (let (($x269 (= $x180 $x165)))
 (let (($x306 (=> $x284 $x269)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x170)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x211)))
 (let (($x192 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x168)))
 (let (($x271 (=> $x284 $x192)))
 (let (($x129 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x21 (ite $x129 (_ bv0 32) (_ bv1 32))))
 (let (($x262 (bvuge ?x21 (_ bv1 32))))
 (let (($x195 (= $x284 $x262)))
 (let (($x230 (= ?x21 (_ bv0 32))))
 (let (($x237 (= $x305 $x230)))
 (let (($x299 (and (and (and (and (and (and $x237 $x195) $x266) $x271) $x306) $x287) $x219)))
 (let (($x294 (and (and (and (and (and $x299 $x279) $x265) $x196) $x239) $x292)))
 (let (($x24 (= $x294 true)))
 (let (($x146 (= $x83 $x304)))
 (let (($x301 (=> $x123 $x146)))
 (let (($x261 (= $x82 $x72)))
 (let (($x60 (=> $x123 $x261)))
 (let (($x74 (= input.spec-%var-l-1.2.1.2.0 ?x200)))
 (let (($x260 (=> $x123 $x74)))
 (let (($x213 (= $x63 $x38)))
 (let (($x28 (=> $x174 $x213)))
 (let (($x81 (= $x42 $x165)))
 (let (($x163 (=> $x174 $x81)))
 (let (($x36 (= input.spec-%var-l-1.2.0 ?x168)))
 (let (($x7 (=> $x174 $x36)))
 (let (($x15 (and (and (and (and (and (= $x159 $x230) (= $x174 $x262)) $x189) $x7) $x163) $x142)))
 (let (($x268 (and (and (and (and (and (and $x15 $x28) $x260) $x60) $x301) $x295) $x87)))
 (let (($x259 (= $x268 true)))
 (let ((?x203 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x203)))
 (let (($x35 (= $x183 true)))
 (let (($x71 (= $x35 true)))
 (let (($x157 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x152 (= $x157 true)))
 (let (($x67 (= $x152 true)))
 (let (($x105 (= $x67 true)))
 (let (($x210 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x175 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x135 (_ bv1 32))) (or false (or false (and true (or $x68 $x210)))))))
 (let (($x161 (=> (and $x111 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x135 (_ bv1 32)))) (or false (or false (and true (or $x68 $x210)))))))
 (let (($x231 (= $x161 true)))
 (let (($x236 (= $x231 true)))
 (let (($x125 (= $x236 true)))
 (let ((?x104 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x106 (bvugt ?x104 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x104 (_ bv3 32)))))
 (let (($x13 (=> (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x106)))))))
 (let (($x209 (=> (and $x111 (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x109 $x106)))))))
 (let (($x84 (= $x209 true)))
 (let (($x228 (= $x84 true)))
 (let (($x92 (= $x228 true)))
 (let (($x27 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x149 (= $x27 true)))
 (let (($x86 (= $x149 true)))
 (let (($x176 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x79 (= $x176 true)))
 (let (($x59 (= $x79 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x16)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x177 $x62)))
 (let (($x108 (and $x101 $x32)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x127 $x108)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x58)))))))
 (let (($x75 (and $x132 $x99)))
 (let (($x90 (= $x75 true)))
 (let (($x9 (= $x90 true)))
 (let (($x225 (= $x9 true)))
 (let (($x57 (and $x225 $x59)))
 (let (($x178 (and $x57 $x86)))
 (let (($x233 (and $x178 $x92)))
 (let (($x119 (and $x233 $x125)))
 (let (($x54 (and $x119 $x105)))
 (let (($x116 (and $x54 $x71)))
 (let (($x208 (and $x116 $x259)))
 (let (($x214 (and $x208 $x24)))
 (let (($x150 (and $x214 $x319)))
 (let (($x354 (and $x150 $x353)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x348 (and $x162 $x354)))
 (let (($x347 (=> $x348 $x375)))
 (not $x347))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00111001101011111111111111100000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11011101101011111111111111100111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11011101101011111111111111100100)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11011101101011111111111111100100)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_50)
(function @fun_50
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv524288 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x213 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x193 (or $x213 $x114)))
 (let (($x11 (= $x193 true)))
 (let (($x316 (= $x11 true)))
 (let ((?x234 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x234 (_ bv1 32))))
 (let (($x165 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x200 (= $x165 $x70)))
 (let (($x278 (= ?x234 (_ bv0 32))))
 (let (($x110 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x270 (= $x110 $x278)))
 (let (($x74 (and $x270 $x200)))
 (let (($x260 (= $x74 true)))
 (let (($x204 (= $x213 $x70)))
 (let (($x63 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x205 (= $x63 $x278)))
 (let (($x46 (and $x205 $x204)))
 (let (($x10 (= $x46 true)))
 (let (($x130 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x76 (ite $x130 (_ bv0 32) (_ bv1 32))))
 (let (($x81 (bvuge ?x76 (_ bv1 32))))
 (let (($x28 (= $x213 $x81)))
 (let (($x14 (= ?x76 (_ bv0 32))))
 (let (($x38 (= $x63 $x14)))
 (let (($x164 (and $x38 $x28)))
 (let (($x123 (= $x164 true)))
 (let (($x163 (= $x165 $x81)))
 (let (($x25 (= $x110 $x14)))
 (let (($x286 (and $x25 $x163)))
 (let (($x171 (= $x286 true)))
 (let ((?x50 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x224 (= (_ bv0 3) ?x50)))
 (let (($x12 (= $x224 true)))
 (let (($x226 (= $x12 true)))
 (let (($x202 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x157 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x54 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x157) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x157))))
 (let (($x133 (and true $x54)))
 (let (($x18 (and $x54 $x133)))
 (let ((?x115 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x174))))
 (let (($x191 (= (bvand ?x19 (_ bv4294967288 32)) ?x19)))
 (let (($x91 (= (bvand ?x115 (_ bv4294967292 32)) ?x115)))
 (let (($x288 (and $x91 $x191)))
 (let (($x116 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x115 (bvsub ?x115 (_ bv4 32))) (bvult ?x115 (bvsub ?x115 (_ bv4 32))))))
 (let (($x211 (and (and (and (and (and $x133 $x116) $x91) $x288) $x18) $x202)))
 (let (($x168 (= true $x211)))
 (let (($x151 (not $x114)))
 (let (($x36 (=> $x151 $x168)))
 (let (($x7 (= $x36 true)))
 (let (($x39 (= $x7 true)))
 (let (($x296 (= $x39 true)))
 (let (($x231 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x236 (= $x231 true)))
 (let (($x125 (= $x236 true)))
 (let (($x119 (= $x125 true)))
 (let (($x102 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x235 (= $x102 true)))
 (let (($x206 (= $x235 true)))
 (let (($x153 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x232 (= $x153 true)))
 (let (($x68 (= $x232 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x134)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x106 $x122)))
 (let (($x209 (and $x45 $x13)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x86 $x209)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x111 $x182)))))))
 (let (($x228 (and $x109 $x84)))
 (let (($x92 (= $x228 true)))
 (let (($x233 (= $x92 true)))
 (let (($x135 (= $x233 true)))
 (let (($x210 (and $x135 $x68)))
 (let (($x175 (and $x210 $x206)))
 (let (($x44 (and $x175 $x119)))
 (let (($x42 (and $x44 $x296)))
 (let (($x73 (and $x42 $x226)))
 (let (($x142 (and $x73 $x171)))
 (let (($x167 (and $x142 $x123)))
 (let (($x166 (and $x167 $x10)))
 (let (($x198 (and $x166 $x260)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x147 (and $x48 $x198)))
 (let (($x90 (bvugt ?x115 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x115 (_ bv3 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x59 (=> (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x90)))))))
 (let (($x101 (=> (and $x151 (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x75 $x90)))))))
 (let (($x132 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x154 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x62 (=> $x154 (or false (or false (and true (or $x66 $x132)))))))
 (let (($x181 (=> (and $x151 $x154) (or false (or false (and true (or $x66 $x132)))))))
 (let (($x16 (and $x181 $x101)))
 (let (($x82 (and $x16 $x147)))
 (let (($x31 (=> $x82 $x316)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x213 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x193 (or $x213 $x114)))
 (let (($x11 (= $x193 true)))
 (let (($x316 (= $x11 true)))
 (let ((?x234 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x234 (_ bv1 32))))
 (let (($x165 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x200 (= $x165 $x70)))
 (let (($x278 (= ?x234 (_ bv0 32))))
 (let (($x110 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x270 (= $x110 $x278)))
 (let (($x74 (and $x270 $x200)))
 (let (($x260 (= $x74 true)))
 (let (($x204 (= $x213 $x70)))
 (let (($x63 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x205 (= $x63 $x278)))
 (let (($x46 (and $x205 $x204)))
 (let (($x10 (= $x46 true)))
 (let (($x130 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x76 (ite $x130 (_ bv0 32) (_ bv1 32))))
 (let (($x81 (bvuge ?x76 (_ bv1 32))))
 (let (($x28 (= $x213 $x81)))
 (let (($x14 (= ?x76 (_ bv0 32))))
 (let (($x38 (= $x63 $x14)))
 (let (($x164 (and $x38 $x28)))
 (let (($x123 (= $x164 true)))
 (let (($x163 (= $x165 $x81)))
 (let (($x25 (= $x110 $x14)))
 (let (($x286 (and $x25 $x163)))
 (let (($x171 (= $x286 true)))
 (let ((?x50 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x224 (= (_ bv0 3) ?x50)))
 (let (($x12 (= $x224 true)))
 (let (($x226 (= $x12 true)))
 (let (($x202 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x157 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x54 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x157) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x157))))
 (let (($x133 (and true $x54)))
 (let (($x18 (and $x54 $x133)))
 (let ((?x115 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x174))))
 (let (($x191 (= (bvand ?x19 (_ bv4294967288 32)) ?x19)))
 (let (($x91 (= (bvand ?x115 (_ bv4294967292 32)) ?x115)))
 (let (($x288 (and $x91 $x191)))
 (let (($x116 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x115 (bvsub ?x115 (_ bv4 32))) (bvult ?x115 (bvsub ?x115 (_ bv4 32))))))
 (let (($x211 (and (and (and (and (and $x133 $x116) $x91) $x288) $x18) $x202)))
 (let (($x168 (= true $x211)))
 (let (($x151 (not $x114)))
 (let (($x36 (=> $x151 $x168)))
 (let (($x7 (= $x36 true)))
 (let (($x39 (= $x7 true)))
 (let (($x296 (= $x39 true)))
 (let (($x231 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x236 (= $x231 true)))
 (let (($x125 (= $x236 true)))
 (let (($x119 (= $x125 true)))
 (let (($x102 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x235 (= $x102 true)))
 (let (($x206 (= $x235 true)))
 (let (($x153 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x232 (= $x153 true)))
 (let (($x68 (= $x232 true)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x134)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x26)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x106 $x122)))
 (let (($x209 (and $x45 $x13)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x86 $x209)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x111 $x182)))))))
 (let (($x228 (and $x109 $x84)))
 (let (($x92 (= $x228 true)))
 (let (($x233 (= $x92 true)))
 (let (($x135 (= $x233 true)))
 (let (($x210 (and $x135 $x68)))
 (let (($x175 (and $x210 $x206)))
 (let (($x44 (and $x175 $x119)))
 (let (($x42 (and $x44 $x296)))
 (let (($x73 (and $x42 $x226)))
 (let (($x142 (and $x73 $x171)))
 (let (($x167 (and $x142 $x123)))
 (let (($x166 (and $x167 $x10)))
 (let (($x198 (and $x166 $x260)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x147 (and $x48 $x198)))
 (let (($x90 (bvugt ?x115 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x115 (_ bv3 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x59 (=> (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x90)))))))
 (let (($x101 (=> (and $x151 (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x75 $x90)))))))
 (let (($x132 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x154 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x62 (=> $x154 (or false (or false (and true (or $x66 $x132)))))))
 (let (($x181 (=> (and $x151 $x154) (or false (or false (and true (or $x66 $x132)))))))
 (let (($x16 (and $x181 $x101)))
 (let (($x82 (and $x16 $x147)))
 (let (($x31 (=> $x82 $x316)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x154 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem ?x154))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv2 32))) ?x212))))
 (let ((?x297 ((_ extract 2 0) ?x170)))
 (let (($x238 (= (_ bv0 3) ?x297)))
 (let (($x184 (= $x238 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x166 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x74 (bvuge ?x166 (_ bv1 32))))
 (let (($x213 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x11 (= $x213 $x74)))
 (let (($x270 (= ?x166 (_ bv0 32))))
 (let (($x286 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x193 (= $x286 $x270)))
 (let (($x316 (and $x193 $x11)))
 (let (($x31 (= $x316 true)))
 (let (($x78 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x260 (= $x78 $x74)))
 (let (($x278 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x200 (= $x278 $x270)))
 (let (($x198 (and $x200 $x260)))
 (let (($x147 (= $x198 true)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x15 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x28 (bvuge ?x15 (_ bv1 32))))
 (let (($x70 (= $x78 $x28)))
 (let (($x63 (= ?x15 (_ bv0 32))))
 (let (($x205 (= $x278 $x63)))
 (let (($x204 (and $x205 $x70)))
 (let (($x46 (= $x204 true)))
 (let (($x164 (= $x213 $x28)))
 (let (($x38 (= $x286 $x63)))
 (let (($x123 (and $x38 $x164)))
 (let (($x167 (= $x123 true)))
 (let ((?x76 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x14 (= (_ bv0 3) ?x76)))
 (let (($x25 (= $x14 true)))
 (let (($x165 (= $x25 true)))
 (let (($x39 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x71 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x71) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x71))))
 (let (($x91 (and true $x159)))
 (let (($x36 (and $x159 $x91)))
 (let (($x211 (= (bvand ?x170 (_ bv4294967288 32)) ?x170)))
 (let (($x187 (= (bvand ?x154 (_ bv4294967292 32)) ?x154)))
 (let (($x168 (and $x187 $x211)))
 (let (($x137 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x154 (bvsub ?x154 (_ bv4 32))) (bvult ?x154 (bvsub ?x154 (_ bv4 32))))))
 (let (($x224 (and (and (and (and (and $x91 $x137) $x187) $x168) $x36) $x39)))
 (let (($x12 (= true $x224)))
 (let (($x151 (not $x114)))
 (let (($x226 (=> $x151 $x12)))
 (let (($x73 (= $x226 true)))
 (let (($x158 (= $x73 true)))
 (let (($x110 (= $x158 true)))
 (let (($x54 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x133 (= $x54 true)))
 (let (($x183 (= $x133 true)))
 (let (($x203 (= $x183 true)))
 (let (($x44 (= $x151 true)))
 (let (($x152 (= $x44 true)))
 (let (($x157 (= $x152 true)))
 (let (($x231 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x236 (= $x231 true)))
 (let (($x125 (= $x236 true)))
 (let (($x102 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x235 (= $x102 true)))
 (let (($x206 (= $x235 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x233 (= (_ bv0 32) ?x92)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (and $x13 $x84)))
 (let (($x135 (and $x228 $x233)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x104 $x135)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x149)))))))
 (let (($x153 (and $x134 $x179)))
 (let (($x232 (= $x153 true)))
 (let (($x68 (= $x232 true)))
 (let (($x210 (= $x68 true)))
 (let (($x175 (and $x210 $x206)))
 (let (($x119 (and $x175 $x125)))
 (let (($x67 (and $x119 $x157)))
 (let (($x35 (and $x67 $x203)))
 (let (($x227 (and $x35 $x110)))
 (let (($x81 (and $x227 $x165)))
 (let (($x234 (and $x81 $x167)))
 (let (($x10 (and $x234 $x46)))
 (let (($x82 (and $x10 $x147)))
 (let (($x197 (and $x82 $x31)))
 (let (($x53 (and $x78 $x197)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x27 (and $x124 $x53)))
 (let (($x47 (bvugt ?x154 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd ?x154 (_ bv3 32))))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x48 (=> (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x47)))))))
 (let (($x79 (=> (and $x151 (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x225 $x47)))))))
 (let (($x177 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x32 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x108 (=> $x32 (or false (or false (and true (or $x127 $x177)))))))
 (let (($x69 (=> (and $x151 $x32) (or false (or false (and true (or $x127 $x177)))))))
 (let (($x99 (and $x69 $x79)))
 (let (($x96 (and $x99 $x27)))
 (let (($x49 (=> $x96 $x184)))
 (not $x49)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x154 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem ?x154))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv2 32))) ?x212))))
 (let ((?x297 ((_ extract 2 0) ?x170)))
 (let (($x238 (= (_ bv0 3) ?x297)))
 (let (($x184 (= $x238 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x166 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x74 (bvuge ?x166 (_ bv1 32))))
 (let (($x213 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x11 (= $x213 $x74)))
 (let (($x270 (= ?x166 (_ bv0 32))))
 (let (($x286 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x193 (= $x286 $x270)))
 (let (($x316 (and $x193 $x11)))
 (let (($x31 (= $x316 true)))
 (let (($x78 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x260 (= $x78 $x74)))
 (let (($x278 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x200 (= $x278 $x270)))
 (let (($x198 (and $x200 $x260)))
 (let (($x147 (= $x198 true)))
 (let (($x142 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x15 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x28 (bvuge ?x15 (_ bv1 32))))
 (let (($x70 (= $x78 $x28)))
 (let (($x63 (= ?x15 (_ bv0 32))))
 (let (($x205 (= $x278 $x63)))
 (let (($x204 (and $x205 $x70)))
 (let (($x46 (= $x204 true)))
 (let (($x164 (= $x213 $x28)))
 (let (($x38 (= $x286 $x63)))
 (let (($x123 (and $x38 $x164)))
 (let (($x167 (= $x123 true)))
 (let ((?x76 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x14 (= (_ bv0 3) ?x76)))
 (let (($x25 (= $x14 true)))
 (let (($x165 (= $x25 true)))
 (let (($x39 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x71 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x71) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x71))))
 (let (($x91 (and true $x159)))
 (let (($x36 (and $x159 $x91)))
 (let (($x211 (= (bvand ?x170 (_ bv4294967288 32)) ?x170)))
 (let (($x187 (= (bvand ?x154 (_ bv4294967292 32)) ?x154)))
 (let (($x168 (and $x187 $x211)))
 (let (($x137 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x154 (bvsub ?x154 (_ bv4 32))) (bvult ?x154 (bvsub ?x154 (_ bv4 32))))))
 (let (($x224 (and (and (and (and (and $x91 $x137) $x187) $x168) $x36) $x39)))
 (let (($x12 (= true $x224)))
 (let (($x151 (not $x114)))
 (let (($x226 (=> $x151 $x12)))
 (let (($x73 (= $x226 true)))
 (let (($x158 (= $x73 true)))
 (let (($x110 (= $x158 true)))
 (let (($x54 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x133 (= $x54 true)))
 (let (($x183 (= $x133 true)))
 (let (($x203 (= $x183 true)))
 (let (($x44 (= $x151 true)))
 (let (($x152 (= $x44 true)))
 (let (($x157 (= $x152 true)))
 (let (($x231 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x236 (= $x231 true)))
 (let (($x125 (= $x236 true)))
 (let (($x102 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x235 (= $x102 true)))
 (let (($x206 (= $x235 true)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x233 (= (_ bv0 32) ?x92)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (and $x13 $x84)))
 (let (($x135 (and $x228 $x233)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x104 $x135)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x149)))))))
 (let (($x153 (and $x134 $x179)))
 (let (($x232 (= $x153 true)))
 (let (($x68 (= $x232 true)))
 (let (($x210 (= $x68 true)))
 (let (($x175 (and $x210 $x206)))
 (let (($x119 (and $x175 $x125)))
 (let (($x67 (and $x119 $x157)))
 (let (($x35 (and $x67 $x203)))
 (let (($x227 (and $x35 $x110)))
 (let (($x81 (and $x227 $x165)))
 (let (($x234 (and $x81 $x167)))
 (let (($x10 (and $x234 $x46)))
 (let (($x82 (and $x10 $x147)))
 (let (($x197 (and $x82 $x31)))
 (let (($x53 (and $x78 $x197)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x27 (and $x124 $x53)))
 (let (($x47 (bvugt ?x154 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd ?x154 (_ bv3 32))))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x48 (=> (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x47)))))))
 (let (($x79 (=> (and $x151 (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x225 $x47)))))))
 (let (($x177 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x32 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x108 (=> $x32 (or false (or false (and true (or $x127 $x177)))))))
 (let (($x69 (=> (and $x151 $x32) (or false (or false (and true (or $x127 $x177)))))))
 (let (($x99 (and $x69 $x79)))
 (let (($x96 (and $x99 $x27)))
 (let (($x49 (=> $x96 $x184)))
 (not $x49)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x148 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x72 (concat (select input.dst.llvm-mem ?x148) (concat ?x17 (concat ?x162 ?x49)))))
 (let ((?x261 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x72)))
 (let (($x60 (= (_ bv0 32) ?x261)))
 (let (($x190 (= $x60 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x74 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x74 (_ bv1 32))))
 (let (($x234 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x197 (= $x234 $x147)))
 (let (($x260 (= ?x74 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x31 (= $x38 $x260)))
 (let (($x53 (and $x31 $x197)))
 (let (($x27 (= $x53 true)))
 (let (($x34 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x82 (= $x34 $x147)))
 (let (($x204 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x198 (= $x204 $x260)))
 (let (($x193 (and $x198 $x82)))
 (let (($x11 (= $x193 true)))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x164 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x164 (_ bv1 32))))
 (let (($x10 (= $x34 $x117)))
 (let (($x123 (= ?x164 (_ bv0 32))))
 (let (($x46 (= $x204 $x123)))
 (let (($x166 (and $x46 $x10)))
 (let (($x270 (= $x166 true)))
 (let (($x278 (= $x234 $x117)))
 (let (($x167 (= $x38 $x123)))
 (let (($x205 (and $x167 $x278)))
 (let (($x78 (= $x205 true)))
 (let ((?x163 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x286 (= (_ bv0 3) ?x163)))
 (let (($x171 (= $x286 true)))
 (let (($x142 (= $x171 true)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x14 (= $x76 true)))
 (let (($x25 (= $x14 true)))
 (let (($x207 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x116 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x116) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x116))))
 (let (($x91 (and true $x159)))
 (let (($x211 (and $x159 $x91)))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x136))))
 (let (($x51 (= (bvand ?x212 (_ bv4294967288 32)) ?x212)))
 (let (($x230 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x202 (and $x230 $x51)))
 (let (($x137 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x224 (and (and (and (and (and $x91 $x137) $x230) $x202) $x211) $x207)))
 (let (($x12 (= true $x224)))
 (let (($x151 (not $x114)))
 (let (($x226 (=> $x151 $x12)))
 (let (($x73 (= $x226 true)))
 (let (($x158 (= $x73 true)))
 (let (($x110 (= $x158 true)))
 (let (($x54 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x133 (= $x54 true)))
 (let (($x183 (= $x133 true)))
 (let (($x203 (= $x183 true)))
 (let (($x44 (= $x151 true)))
 (let (($x152 (= $x44 true)))
 (let (($x157 (= $x152 true)))
 (let (($x231 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x236 (= $x231 true)))
 (let (($x125 (= $x236 true)))
 (let ((?x232 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x232)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x135)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x233 $x179)))
 (let (($x210 (and $x153 $x68)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x86 $x210)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x134 $x182)))))))
 (let (($x102 (and $x92 $x55)))
 (let (($x235 (= $x102 true)))
 (let (($x206 (= $x235 true)))
 (let (($x175 (= $x206 true)))
 (let (($x119 (and $x175 $x125)))
 (let (($x67 (and $x119 $x157)))
 (let (($x35 (and $x67 $x203)))
 (let (($x227 (and $x35 $x110)))
 (let (($x165 (and $x227 $x25)))
 (let (($x15 (and $x165 $x142)))
 (let (($x70 (and $x15 $x78)))
 (let (($x200 (and $x70 $x270)))
 (let (($x316 (and $x200 $x11)))
 (let (($x96 (and $x316 $x27)))
 (let (($x297 (and $x34 $x96)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x238 (and $x118 $x297)))
 (let (($x101 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd ?x32 (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x124 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x101)))))))
 (let (($x57 (=> (and $x151 (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x59 $x101)))))))
 (let (($x181 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x90 (=> $x75 (or false (or false (and true (or $x62 $x181)))))))
 (let (($x80 (=> (and $x151 $x75) (or false (or false (and true (or $x62 $x181)))))))
 (let (($x9 (and $x80 $x57)))
 (let (($x184 (and $x9 $x238)))
 (let (($x83 (=> $x184 $x190)))
 (not $x83))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x49 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x148 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x72 (concat (select input.dst.llvm-mem ?x148) (concat ?x17 (concat ?x162 ?x49)))))
 (let ((?x261 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x72)))
 (let (($x60 (= (_ bv0 32) ?x261)))
 (let (($x190 (= $x60 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x74 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x74 (_ bv1 32))))
 (let (($x234 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x197 (= $x234 $x147)))
 (let (($x260 (= ?x74 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x31 (= $x38 $x260)))
 (let (($x53 (and $x31 $x197)))
 (let (($x27 (= $x53 true)))
 (let (($x34 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x82 (= $x34 $x147)))
 (let (($x204 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x198 (= $x204 $x260)))
 (let (($x193 (and $x198 $x82)))
 (let (($x11 (= $x193 true)))
 (let (($x28 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x164 (ite $x28 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x164 (_ bv1 32))))
 (let (($x10 (= $x34 $x117)))
 (let (($x123 (= ?x164 (_ bv0 32))))
 (let (($x46 (= $x204 $x123)))
 (let (($x166 (and $x46 $x10)))
 (let (($x270 (= $x166 true)))
 (let (($x278 (= $x234 $x117)))
 (let (($x167 (= $x38 $x123)))
 (let (($x205 (and $x167 $x278)))
 (let (($x78 (= $x205 true)))
 (let ((?x163 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x286 (= (_ bv0 3) ?x163)))
 (let (($x171 (= $x286 true)))
 (let (($x142 (= $x171 true)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x14 (= $x76 true)))
 (let (($x25 (= $x14 true)))
 (let (($x207 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x116 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x116) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x116))))
 (let (($x91 (and true $x159)))
 (let (($x211 (and $x159 $x91)))
 (let ((?x32 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x136))))
 (let (($x51 (= (bvand ?x212 (_ bv4294967288 32)) ?x212)))
 (let (($x230 (= (bvand ?x32 (_ bv4294967292 32)) ?x32)))
 (let (($x202 (and $x230 $x51)))
 (let (($x137 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x32 (bvsub ?x32 (_ bv4 32))) (bvult ?x32 (bvsub ?x32 (_ bv4 32))))))
 (let (($x224 (and (and (and (and (and $x91 $x137) $x230) $x202) $x211) $x207)))
 (let (($x12 (= true $x224)))
 (let (($x151 (not $x114)))
 (let (($x226 (=> $x151 $x12)))
 (let (($x73 (= $x226 true)))
 (let (($x158 (= $x73 true)))
 (let (($x110 (= $x158 true)))
 (let (($x54 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x133 (= $x54 true)))
 (let (($x183 (= $x133 true)))
 (let (($x203 (= $x183 true)))
 (let (($x44 (= $x151 true)))
 (let (($x152 (= $x44 true)))
 (let (($x157 (= $x152 true)))
 (let (($x231 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x236 (= $x231 true)))
 (let (($x125 (= $x236 true)))
 (let ((?x232 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x232)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x135)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x233 $x179)))
 (let (($x210 (and $x153 $x68)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x86 $x210)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x134 $x182)))))))
 (let (($x102 (and $x92 $x55)))
 (let (($x235 (= $x102 true)))
 (let (($x206 (= $x235 true)))
 (let (($x175 (= $x206 true)))
 (let (($x119 (and $x175 $x125)))
 (let (($x67 (and $x119 $x157)))
 (let (($x35 (and $x67 $x203)))
 (let (($x227 (and $x35 $x110)))
 (let (($x165 (and $x227 $x25)))
 (let (($x15 (and $x165 $x142)))
 (let (($x70 (and $x15 $x78)))
 (let (($x200 (and $x70 $x270)))
 (let (($x316 (and $x200 $x11)))
 (let (($x96 (and $x316 $x27)))
 (let (($x297 (and $x34 $x96)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x238 (and $x118 $x297)))
 (let (($x101 (bvugt ?x32 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd ?x32 (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x124 (=> (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x101)))))))
 (let (($x57 (=> (and $x151 (bvule ?x32 (bvsub (bvadd ?x32 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x59 $x101)))))))
 (let (($x181 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x75 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x90 (=> $x75 (or false (or false (and true (or $x62 $x181)))))))
 (let (($x80 (=> (and $x151 $x75) (or false (or false (and true (or $x62 $x181)))))))
 (let (($x9 (and $x80 $x57)))
 (let (($x184 (and $x9 $x238)))
 (let (($x83 (=> $x184 $x190)))
 (not $x83))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x41c00000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x65fffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x65fffff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x41c00000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x41c00003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1048536 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1048536 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x109 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x115 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x199 (concat (select input.dst.llvm-mem ?x115) (concat ?x33 (concat ?x146 ?x109)))))
 (let ((?x87 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x199)))
 (let (($x268 (= (_ bv0 32) ?x87)))
 (let (($x259 (= $x268 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x27 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x238 (bvuge ?x27 (_ bv1 32))))
 (let (($x70 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x111 (= $x70 $x238)))
 (let (($x96 (= ?x27 (_ bv0 32))))
 (let (($x167 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x49 (= $x167 $x96)))
 (let (($x261 (and (and (and (not $x167) (not $x70)) $x49) $x111)))
 (let (($x60 (= $x261 true)))
 (let (($x122 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x193 (not $x122)))
 (let (($x260 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x82 (not $x260)))
 (let (($x17 (and (and (and (= $x260 $x96) (= $x122 $x238)) $x82) $x193)))
 (let (($x264 (= $x17 true)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x278 (ite $x117 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x278 (_ bv1 32))))
 (let (($x147 (= $x122 $x45)))
 (let (($x205 (= ?x278 (_ bv0 32))))
 (let (($x198 (= $x260 $x205)))
 (let (($x31 (and (and (and $x198 $x147) $x82) $x193)))
 (let (($x197 (= $x31 true)))
 (let (($x34 (not $x70)))
 (let (($x270 (and (and (and (= $x167 $x205) (= $x70 $x45)) (not $x167)) $x34)))
 (let (($x200 (= $x270 true)))
 (let ((?x63 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x38 (= (_ bv0 3) ?x63)))
 (let (($x213 (= $x38 true)))
 (let (($x28 (= $x213 true)))
 (let (($x163 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x286 (= $x163 true)))
 (let (($x171 (= $x286 true)))
 (let (($x224 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x91 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x262 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x91) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x91))))
 (let (($x137 (and true $x262)))
 (let (($x168 (and $x262 $x137)))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem ?x75))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv2 32))) ?x42))))
 (let (($x211 (= (bvand ?x51 (_ bv4294967288 32)) ?x51)))
 (let (($x191 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x39 (and $x191 $x211)))
 (let (($x50 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv4 32))) (bvult ?x75 (bvsub ?x75 (_ bv4 32))))))
 (let (($x110 (and (and (and (and (and $x137 $x50) $x191) $x39) $x168) $x224)))
 (let (($x227 (= true $x110)))
 (let (($x151 (not $x114)))
 (let (($x130 (=> $x151 $x227)))
 (let (($x76 (= $x130 true)))
 (let (($x14 (= $x76 true)))
 (let (($x25 (= $x14 true)))
 (let (($x71 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x116 (= $x71 true)))
 (let (($x85 (= $x116 true)))
 (let (($x64 (= $x85 true)))
 (let (($x54 (= $x151 true)))
 (let (($x133 (= $x54 true)))
 (let (($x183 (= $x133 true)))
 (let (($x152 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x157 (= $x152 true)))
 (let (($x67 (= $x157 true)))
 (let ((?x235 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x235)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x210)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x68 $x55)))
 (let (($x175 (and $x102 $x206)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x104 $x175)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x232 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x149)))))))
 (let (($x231 (and $x232 $x161)))
 (let (($x236 (= $x231 true)))
 (let (($x125 (= $x236 true)))
 (let (($x119 (= $x125 true)))
 (let (($x105 (and $x119 $x67)))
 (let (($x203 (and $x105 $x183)))
 (let (($x159 (and $x203 $x64)))
 (let (($x165 (and $x159 $x25)))
 (let (($x142 (and $x165 $x171)))
 (let (($x164 (and $x142 $x28)))
 (let (($x74 (and $x164 $x200)))
 (let (($x53 (and $x74 $x197)))
 (let (($x162 (and $x53 $x264)))
 (let (($x190 (and $x162 $x60)))
 (let (($x83 (and $x122 $x190)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x304 (and $x26 $x83)))
 (let (($x79 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd ?x75 (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x118 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x79)))))))
 (let (($x178 (=> (and $x151 (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x48 $x79)))))))
 (let (($x69 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x225 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x47 (=> $x225 (or false (or false (and true (or $x108 $x69)))))))
 (let (($x156 (=> (and $x151 $x225) (or false (or false (and true (or $x108 $x69)))))))
 (let (($x176 (and $x156 $x178)))
 (let (($x229 (and $x176 $x304)))
 (let (($x208 (=> $x229 $x259)))
 (not $x208)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x109 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x115 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x199 (concat (select input.dst.llvm-mem ?x115) (concat ?x33 (concat ?x146 ?x109)))))
 (let ((?x87 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x199)))
 (let (($x268 (= (_ bv0 32) ?x87)))
 (let (($x259 (= $x268 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x27 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x238 (bvuge ?x27 (_ bv1 32))))
 (let (($x70 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x111 (= $x70 $x238)))
 (let (($x96 (= ?x27 (_ bv0 32))))
 (let (($x167 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x49 (= $x167 $x96)))
 (let (($x261 (and (and (and (not $x167) (not $x70)) $x49) $x111)))
 (let (($x60 (= $x261 true)))
 (let (($x122 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x193 (not $x122)))
 (let (($x260 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x82 (not $x260)))
 (let (($x17 (and (and (and (= $x260 $x96) (= $x122 $x238)) $x82) $x193)))
 (let (($x264 (= $x17 true)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x278 (ite $x117 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x278 (_ bv1 32))))
 (let (($x147 (= $x122 $x45)))
 (let (($x205 (= ?x278 (_ bv0 32))))
 (let (($x198 (= $x260 $x205)))
 (let (($x31 (and (and (and $x198 $x147) $x82) $x193)))
 (let (($x197 (= $x31 true)))
 (let (($x34 (not $x70)))
 (let (($x270 (and (and (and (= $x167 $x205) (= $x70 $x45)) (not $x167)) $x34)))
 (let (($x200 (= $x270 true)))
 (let ((?x63 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x38 (= (_ bv0 3) ?x63)))
 (let (($x213 (= $x38 true)))
 (let (($x28 (= $x213 true)))
 (let (($x163 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x286 (= $x163 true)))
 (let (($x171 (= $x286 true)))
 (let (($x224 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x91 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x262 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x91) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x91))))
 (let (($x137 (and true $x262)))
 (let (($x168 (and $x262 $x137)))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem ?x75))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv2 32))) ?x42))))
 (let (($x211 (= (bvand ?x51 (_ bv4294967288 32)) ?x51)))
 (let (($x191 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x39 (and $x191 $x211)))
 (let (($x50 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv4 32))) (bvult ?x75 (bvsub ?x75 (_ bv4 32))))))
 (let (($x110 (and (and (and (and (and $x137 $x50) $x191) $x39) $x168) $x224)))
 (let (($x227 (= true $x110)))
 (let (($x151 (not $x114)))
 (let (($x130 (=> $x151 $x227)))
 (let (($x76 (= $x130 true)))
 (let (($x14 (= $x76 true)))
 (let (($x25 (= $x14 true)))
 (let (($x71 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x116 (= $x71 true)))
 (let (($x85 (= $x116 true)))
 (let (($x64 (= $x85 true)))
 (let (($x54 (= $x151 true)))
 (let (($x133 (= $x54 true)))
 (let (($x183 (= $x133 true)))
 (let (($x152 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x157 (= $x152 true)))
 (let (($x67 (= $x157 true)))
 (let ((?x235 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x235)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x210)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x68 $x55)))
 (let (($x175 (and $x102 $x206)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x104 $x175)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x232 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x149)))))))
 (let (($x231 (and $x232 $x161)))
 (let (($x236 (= $x231 true)))
 (let (($x125 (= $x236 true)))
 (let (($x119 (= $x125 true)))
 (let (($x105 (and $x119 $x67)))
 (let (($x203 (and $x105 $x183)))
 (let (($x159 (and $x203 $x64)))
 (let (($x165 (and $x159 $x25)))
 (let (($x142 (and $x165 $x171)))
 (let (($x164 (and $x142 $x28)))
 (let (($x74 (and $x164 $x200)))
 (let (($x53 (and $x74 $x197)))
 (let (($x162 (and $x53 $x264)))
 (let (($x190 (and $x162 $x60)))
 (let (($x83 (and $x122 $x190)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x304 (and $x26 $x83)))
 (let (($x79 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd ?x75 (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x118 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x79)))))))
 (let (($x178 (=> (and $x151 (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x48 $x79)))))))
 (let (($x69 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x225 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x47 (=> $x225 (or false (or false (and true (or $x108 $x69)))))))
 (let (($x156 (=> (and $x151 $x225) (or false (or false (and true (or $x108 $x69)))))))
 (let (($x176 (and $x156 $x178)))
 (let (($x229 (and $x176 $x304)))
 (let (($x208 (=> $x229 $x259)))
 (not $x208)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x304 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x154 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x301 (concat (select input.dst.llvm-mem ?x154) (concat ?x107 (concat ?x30 ?x304)))))
 (let ((?x295 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x301)))
 (let (($x199 (= (_ bv0 32) ?x295)))
 (let (($x87 (= $x199 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x27 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x238 (bvuge ?x27 (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x94 (= $x166 $x238)))
 (let (($x96 (= ?x27 (_ bv0 32))))
 (let (($x78 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x162 (= $x78 $x96)))
 (let (($x200 (= false false)))
 (let (($x74 (=> $x78 $x200)))
 (let (($x72 (and (and $x74 $x162) $x94)))
 (let (($x111 (= $x72 true)))
 (let (($x147 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x316 (=> $x147 $x200)))
 (let (($x84 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x184 (= $x84 $x238)))
 (let (($x297 (= $x147 $x96)))
 (let (($x113 (and (and $x297 $x184) $x316)))
 (let (($x17 (= $x113 true)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x204 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x34 (bvuge ?x204 (_ bv1 32))))
 (let (($x82 (= $x84 $x34)))
 (let (($x10 (= ?x204 (_ bv0 32))))
 (let (($x11 (= $x147 $x10)))
 (let (($x31 (and (and $x11 $x82) $x316)))
 (let (($x197 (= $x31 true)))
 (let (($x260 (and (and (= $x78 $x10) (= $x166 $x34)) $x74)))
 (let (($x198 (= $x260 true)))
 (let ((?x123 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x167 (= (_ bv0 3) ?x123)))
 (let (($x234 (= $x167 true)))
 (let (($x117 (= $x234 true)))
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x38 (= $x63 true)))
 (let (($x213 (= $x38 true)))
 (let (($x110 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x137 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x230 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x137) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x137))))
 (let (($x50 (and true $x230)))
 (let (($x207 (and $x230 $x50)))
 (let ((?x225 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x88))))
 (let (($x168 (= (bvand ?x211 (_ bv4294967288 32)) ?x211)))
 (let (($x136 (= (bvand ?x225 (_ bv4294967292 32)) ?x225)))
 (let (($x158 (and $x136 $x168)))
 (let (($x226 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x225 (bvsub ?x225 (_ bv4 32))) (bvult ?x225 (bvsub ?x225 (_ bv4 32))))))
 (let (($x25 (and (and (and (and (and $x50 $x226) $x136) $x158) $x207) $x110)))
 (let (($x165 (= true $x25)))
 (let (($x151 (not $x114)))
 (let (($x81 (=> $x151 $x165)))
 (let (($x163 (= $x81 true)))
 (let (($x286 (= $x163 true)))
 (let (($x171 (= $x286 true)))
 (let (($x169 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x91 (= $x169 true)))
 (let (($x129 (= $x91 true)))
 (let (($x189 (= $x129 true)))
 (let (($x71 (= $x151 true)))
 (let (($x116 (= $x71 true)))
 (let (($x85 (= $x116 true)))
 (let (($x133 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x183 (= $x133 true)))
 (let (($x203 (= $x183 true)))
 (let ((?x236 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x236)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (and $x206 $x161)))
 (let (($x119 (and $x231 $x125)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x86 $x119)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x232 $x182)))))))
 (let (($x152 (and $x235 $x44)))
 (let (($x157 (= $x152 true)))
 (let (($x67 (= $x157 true)))
 (let (($x105 (= $x67 true)))
 (let (($x35 (and $x105 $x203)))
 (let (($x64 (and $x35 $x85)))
 (let (($x262 (and $x64 $x189)))
 (let (($x142 (and $x262 $x171)))
 (let (($x28 (and $x142 $x213)))
 (let (($x278 (and $x28 $x117)))
 (let (($x122 (and $x278 $x198)))
 (let (($x53 (and $x122 $x197)))
 (let (($x264 (and $x53 $x17)))
 (let (($x261 (and $x264 $x111)))
 (let (($x60 (and $x84 $x261)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x190 (and $x209 $x60)))
 (let (($x57 (bvugt ?x225 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x225 (_ bv3 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x26 (=> (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x57)))))))
 (let (($x128 (=> (and $x151 (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x124 $x57)))))))
 (let (($x80 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x59 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x101 (=> $x59 (or false (or false (and true (or $x90 $x80)))))))
 (let (($x148 (=> (and $x151 $x59) (or false (or false (and true (or $x90 $x80)))))))
 (let (($x16 (and $x148 $x128)))
 (let (($x83 (and $x16 $x190)))
 (let (($x268 (=> $x83 $x87)))
 (not $x268)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x304 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x154 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x301 (concat (select input.dst.llvm-mem ?x154) (concat ?x107 (concat ?x30 ?x304)))))
 (let ((?x295 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x301)))
 (let (($x199 (= (_ bv0 32) ?x295)))
 (let (($x87 (= $x199 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x27 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x238 (bvuge ?x27 (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x94 (= $x166 $x238)))
 (let (($x96 (= ?x27 (_ bv0 32))))
 (let (($x78 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x162 (= $x78 $x96)))
 (let (($x200 (= false false)))
 (let (($x74 (=> $x78 $x200)))
 (let (($x72 (and (and $x74 $x162) $x94)))
 (let (($x111 (= $x72 true)))
 (let (($x147 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x316 (=> $x147 $x200)))
 (let (($x84 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x184 (= $x84 $x238)))
 (let (($x297 (= $x147 $x96)))
 (let (($x113 (and (and $x297 $x184) $x316)))
 (let (($x17 (= $x113 true)))
 (let (($x45 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x204 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x34 (bvuge ?x204 (_ bv1 32))))
 (let (($x82 (= $x84 $x34)))
 (let (($x10 (= ?x204 (_ bv0 32))))
 (let (($x11 (= $x147 $x10)))
 (let (($x31 (and (and $x11 $x82) $x316)))
 (let (($x197 (= $x31 true)))
 (let (($x260 (and (and (= $x78 $x10) (= $x166 $x34)) $x74)))
 (let (($x198 (= $x260 true)))
 (let ((?x123 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x167 (= (_ bv0 3) ?x123)))
 (let (($x234 (= $x167 true)))
 (let (($x117 (= $x234 true)))
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x38 (= $x63 true)))
 (let (($x213 (= $x38 true)))
 (let (($x110 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x137 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x230 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x137) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x137))))
 (let (($x50 (and true $x230)))
 (let (($x207 (and $x230 $x50)))
 (let ((?x225 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x88))))
 (let (($x168 (= (bvand ?x211 (_ bv4294967288 32)) ?x211)))
 (let (($x136 (= (bvand ?x225 (_ bv4294967292 32)) ?x225)))
 (let (($x158 (and $x136 $x168)))
 (let (($x226 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x225 (bvsub ?x225 (_ bv4 32))) (bvult ?x225 (bvsub ?x225 (_ bv4 32))))))
 (let (($x25 (and (and (and (and (and $x50 $x226) $x136) $x158) $x207) $x110)))
 (let (($x165 (= true $x25)))
 (let (($x151 (not $x114)))
 (let (($x81 (=> $x151 $x165)))
 (let (($x163 (= $x81 true)))
 (let (($x286 (= $x163 true)))
 (let (($x171 (= $x286 true)))
 (let (($x169 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x91 (= $x169 true)))
 (let (($x129 (= $x91 true)))
 (let (($x189 (= $x129 true)))
 (let (($x71 (= $x151 true)))
 (let (($x116 (= $x71 true)))
 (let (($x85 (= $x116 true)))
 (let (($x133 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x183 (= $x133 true)))
 (let (($x203 (= $x183 true)))
 (let ((?x236 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x236)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (and $x206 $x161)))
 (let (($x119 (and $x231 $x125)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x86 $x119)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x232 $x182)))))))
 (let (($x152 (and $x235 $x44)))
 (let (($x157 (= $x152 true)))
 (let (($x67 (= $x157 true)))
 (let (($x105 (= $x67 true)))
 (let (($x35 (and $x105 $x203)))
 (let (($x64 (and $x35 $x85)))
 (let (($x262 (and $x64 $x189)))
 (let (($x142 (and $x262 $x171)))
 (let (($x28 (and $x142 $x213)))
 (let (($x278 (and $x28 $x117)))
 (let (($x122 (and $x278 $x198)))
 (let (($x53 (and $x122 $x197)))
 (let (($x264 (and $x53 $x17)))
 (let (($x261 (and $x264 $x111)))
 (let (($x60 (and $x84 $x261)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x190 (and $x209 $x60)))
 (let (($x57 (bvugt ?x225 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd ?x225 (_ bv3 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x26 (=> (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x124 $x57)))))))
 (let (($x128 (=> (and $x151 (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x124 $x57)))))))
 (let (($x80 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x59 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x101 (=> $x59 (or false (or false (and true (or $x90 $x80)))))))
 (let (($x148 (=> (and $x151 $x59) (or false (or false (and true (or $x90 $x80)))))))
 (let (($x16 (and $x148 $x128)))
 (let (($x83 (and $x16 $x190)))
 (let (($x268 (=> $x83 $x87)))
 (not $x268)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x41c00000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x65fffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x65fffff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x41c00000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x41c00003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1048536 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1048536 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x295 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x32 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x208 (concat (select input.dst.llvm-mem ?x32) (concat ?x66 (concat ?x87 ?x295)))))
 (let ((?x201 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x208)))
 (let (($x58 (= (_ bv0 32) ?x201)))
 (let (($x134 (= $x58 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x17 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x49 (bvuge ?x17 (_ bv1 32))))
 (let (($x74 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (= $x74 $x49)))
 (let (($x264 (= ?x17 (_ bv0 32))))
 (let (($x46 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x83 (= $x46 $x264)))
 (let (($x229 (and (and (and (not $x74) (=> $x46 (= false false))) $x83) $x109)))
 (let (($x30 (= $x229 true)))
 (let (($x153 (= false false)))
 (let (($x31 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x96 (=> $x31 $x153)))
 (let (($x179 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x27 (not $x179)))
 (let (($x261 (and (and (and (= $x31 $x264) (= $x179 $x49)) $x27) $x96)))
 (let (($x60 (= $x261 true)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x270 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x260 (bvuge ?x270 (_ bv1 32))))
 (let (($x53 (= $x179 $x260)))
 (let (($x228 (= ?x270 (_ bv0 32))))
 (let (($x197 (= $x31 $x228)))
 (let (($x184 (and (and (and $x197 $x53) $x27) $x96)))
 (let (($x131 (= $x184 true)))
 (let (($x147 (=> $x46 $x153)))
 (let (($x82 (and (and (and (= $x46 $x228) (= $x74 $x260)) (not $x74)) $x147)))
 (let (($x193 (= $x82 true)))
 (let ((?x205 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x78 (= (_ bv0 3) ?x205)))
 (let (($x70 (= $x78 true)))
 (let (($x45 (= $x70 true)))
 (let (($x123 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x167 (= $x123 true)))
 (let (($x234 (= $x167 true)))
 (let (($x25 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x50 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x191 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x50) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x50))))
 (let (($x226 (and true $x191)))
 (let (($x224 (and $x191 $x226)))
 (let ((?x59 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv1 32))) (select input.dst.llvm-mem ?x59))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv2 32))) ?x212))))
 (let (($x207 (= (bvand ?x168 (_ bv4294967288 32)) ?x168)))
 (let (($x42 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x14 (and $x42 $x207)))
 (let (($x130 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv4 32))) (bvult ?x59 (bvsub ?x59 (_ bv4 32))))))
 (let (($x171 (and (and (and (and (and $x226 $x130) $x42) $x14) $x224) $x25)))
 (let (($x142 (= true $x171)))
 (let (($x151 (not $x114)))
 (let (($x15 (=> $x151 $x142)))
 (let (($x63 (= $x15 true)))
 (let (($x38 (= $x63 true)))
 (let (($x213 (= $x38 true)))
 (let (($x296 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x137 (= $x296 true)))
 (let (($x36 (= $x137 true)))
 (let (($x126 (= $x36 true)))
 (let (($x169 (= $x151 true)))
 (let (($x91 (= $x169 true)))
 (let (($x129 (= $x91 true)))
 (let (($x116 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x85 (= $x116 true)))
 (let (($x64 (= $x85 true)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x157)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x125 $x44)))
 (let (($x105 (and $x152 $x67)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x104 $x105)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x236 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x235 $x149)))))))
 (let (($x133 (and $x236 $x54)))
 (let (($x183 (= $x133 true)))
 (let (($x203 (= $x183 true)))
 (let (($x35 (= $x203 true)))
 (let (($x159 (and $x35 $x64)))
 (let (($x189 (and $x159 $x129)))
 (let (($x230 (and $x189 $x126)))
 (let (($x28 (and $x230 $x213)))
 (let (($x117 (and $x28 $x234)))
 (let (($x204 (and $x117 $x45)))
 (let (($x316 (and $x204 $x193)))
 (let (($x113 (and $x316 $x131)))
 (let (($x190 (and $x113 $x60)))
 (let (($x304 (and $x190 $x30)))
 (let (($x194 (and $x179 $x304)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x146 (and $x135 $x194)))
 (let (($x178 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd ?x59 (_ bv3 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x209 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x178)))))))
 (let (($x106 (=> (and $x151 (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x118 $x178)))))))
 (let (($x156 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x79 (=> $x48 (or false (or false (and true (or $x47 $x156)))))))
 (let (($x115 (=> (and $x151 $x48) (or false (or false (and true (or $x47 $x156)))))))
 (let (($x99 (and $x115 $x106)))
 (let (($x301 (and $x99 $x146)))
 (let (($x132 (=> $x301 $x134)))
 (not $x132))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x295 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x32 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x208 (concat (select input.dst.llvm-mem ?x32) (concat ?x66 (concat ?x87 ?x295)))))
 (let ((?x201 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x208)))
 (let (($x58 (= (_ bv0 32) ?x201)))
 (let (($x134 (= $x58 true)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x17 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x49 (bvuge ?x17 (_ bv1 32))))
 (let (($x74 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (= $x74 $x49)))
 (let (($x264 (= ?x17 (_ bv0 32))))
 (let (($x46 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x83 (= $x46 $x264)))
 (let (($x229 (and (and (and (not $x74) (=> $x46 (= false false))) $x83) $x109)))
 (let (($x30 (= $x229 true)))
 (let (($x153 (= false false)))
 (let (($x31 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x96 (=> $x31 $x153)))
 (let (($x179 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x27 (not $x179)))
 (let (($x261 (and (and (and (= $x31 $x264) (= $x179 $x49)) $x27) $x96)))
 (let (($x60 (= $x261 true)))
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x270 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x260 (bvuge ?x270 (_ bv1 32))))
 (let (($x53 (= $x179 $x260)))
 (let (($x228 (= ?x270 (_ bv0 32))))
 (let (($x197 (= $x31 $x228)))
 (let (($x184 (and (and (and $x197 $x53) $x27) $x96)))
 (let (($x131 (= $x184 true)))
 (let (($x147 (=> $x46 $x153)))
 (let (($x82 (and (and (and (= $x46 $x228) (= $x74 $x260)) (not $x74)) $x147)))
 (let (($x193 (= $x82 true)))
 (let ((?x205 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x78 (= (_ bv0 3) ?x205)))
 (let (($x70 (= $x78 true)))
 (let (($x45 (= $x70 true)))
 (let (($x123 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x167 (= $x123 true)))
 (let (($x234 (= $x167 true)))
 (let (($x25 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x50 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x191 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x50) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x50))))
 (let (($x226 (and true $x191)))
 (let (($x224 (and $x191 $x226)))
 (let ((?x59 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv1 32))) (select input.dst.llvm-mem ?x59))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv2 32))) ?x212))))
 (let (($x207 (= (bvand ?x168 (_ bv4294967288 32)) ?x168)))
 (let (($x42 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x14 (and $x42 $x207)))
 (let (($x130 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv4 32))) (bvult ?x59 (bvsub ?x59 (_ bv4 32))))))
 (let (($x171 (and (and (and (and (and $x226 $x130) $x42) $x14) $x224) $x25)))
 (let (($x142 (= true $x171)))
 (let (($x151 (not $x114)))
 (let (($x15 (=> $x151 $x142)))
 (let (($x63 (= $x15 true)))
 (let (($x38 (= $x63 true)))
 (let (($x213 (= $x38 true)))
 (let (($x296 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x137 (= $x296 true)))
 (let (($x36 (= $x137 true)))
 (let (($x126 (= $x36 true)))
 (let (($x169 (= $x151 true)))
 (let (($x91 (= $x169 true)))
 (let (($x129 (= $x91 true)))
 (let (($x116 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x85 (= $x116 true)))
 (let (($x64 (= $x85 true)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x157)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x125 $x44)))
 (let (($x105 (and $x152 $x67)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x104 $x105)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x236 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x235 $x149)))))))
 (let (($x133 (and $x236 $x54)))
 (let (($x183 (= $x133 true)))
 (let (($x203 (= $x183 true)))
 (let (($x35 (= $x203 true)))
 (let (($x159 (and $x35 $x64)))
 (let (($x189 (and $x159 $x129)))
 (let (($x230 (and $x189 $x126)))
 (let (($x28 (and $x230 $x213)))
 (let (($x117 (and $x28 $x234)))
 (let (($x204 (and $x117 $x45)))
 (let (($x316 (and $x204 $x193)))
 (let (($x113 (and $x316 $x131)))
 (let (($x190 (and $x113 $x60)))
 (let (($x304 (and $x190 $x30)))
 (let (($x194 (and $x179 $x304)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x146 (and $x135 $x194)))
 (let (($x178 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd ?x59 (_ bv3 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x209 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x178)))))))
 (let (($x106 (=> (and $x151 (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x118 $x178)))))))
 (let (($x156 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x79 (=> $x48 (or false (or false (and true (or $x47 $x156)))))))
 (let (($x115 (=> (and $x151 $x48) (or false (or false (and true (or $x47 $x156)))))))
 (let (($x99 (and $x115 $x106)))
 (let (($x301 (and $x99 $x146)))
 (let (($x132 (=> $x301 $x134)))
 (not $x132))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x342 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x75 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem ?x75) (concat ?x313 (concat ?x342 ?x218)))))
 (let ((?x365 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x255)))
 (let (($x368 (= (_ bv0 32) ?x365)))
 (let (($x449 (= $x368 true)))
 (let ((?x90 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x250))))
 (let ((?x323 (bvadd ?x281 (_ bv4 32))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv1 32))) (select input.dst.llvm-mem ?x323))))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv2 32))) ?x65))))
 (let (($x320 (= (_ bv0 32) ?x343)))
 (let ((?x332 (ite $x320 (_ bv0 32) (_ bv1 32))))
 (let (($x379 (bvuge ?x332 (_ bv1 32))))
 (let (($x77 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x349 (= $x77 $x379)))
 (let (($x177 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x84 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x87 (and $x84 $x177)))
 (let (($x448 (=> $x87 $x349)))
 (let (($x446 (= ?x332 (_ bv0 32))))
 (let (($x195 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x350 (= $x195 $x446)))
 (let (($x351 (=> $x87 $x350)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x143))))
 (let (($x376 (= input.spec-%var-l-1.2.1.2.0 ?x103)))
 (let (($x357 (=> $x87 $x376)))
 (let (($x277 (= (_ bv0 32) ?x281)))
 (let ((?x439 (ite $x277 (_ bv0 32) (_ bv1 32))))
 (let (($x291 (bvuge ?x439 (_ bv1 32))))
 (let (($x41 (= $x177 $x291)))
 (let (($x89 (=> $x84 $x41)))
 (let (($x258 (= ?x439 (_ bv0 32))))
 (let (($x264 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x347 (= $x264 $x258)))
 (let (($x346 (=> $x84 $x347)))
 (let (($x356 (= input.spec-%var-l-1.2.0 ?x255)))
 (let (($x375 (=> $x84 $x356)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x290 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x290 (_ bv1 32))))
 (let (($x348 (= $x84 $x280)))
 (let (($x340 (= ?x290 (_ bv0 32))))
 (let (($x200 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x354 (= $x200 $x340)))
 (let (($x82 (= false false)))
 (let (($x146 (and $x84 $x264)))
 (let (($x301 (=> $x146 $x82)))
 (let (($x193 (=> $x200 $x82)))
 (let (($x358 (and (and (and (and (and (and $x193 $x301) $x354) $x348) $x375) $x346) $x89)))
 (let (($x360 (and (and (and $x358 $x357) $x351) $x448)))
 (let (($x369 (= $x360 true)))
 (let (($x223 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x328 (= $x223 $x446)))
 (let (($x308 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x55 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x325 (and $x55 $x308)))
 (let (($x334 (=> $x325 $x328)))
 (let (($x98 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x97 (= $x98 $x379)))
 (let (($x29 (=> $x325 $x97)))
 (let (($x324 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x103)))
 (let (($x444 (=> $x325 $x324)))
 (let (($x274 (= $x308 $x291)))
 (let (($x315 (=> $x55 $x274)))
 (let (($x24 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x314 (= $x24 $x258)))
 (let (($x246 (=> $x55 $x314)))
 (let (($x8 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x255)))
 (let (($x247 (=> $x55 $x8)))
 (let (($x6 (and $x55 $x24)))
 (let (($x40 (=> $x6 $x82)))
 (let (($x196 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x239 (=> $x196 $x82)))
 (let (($x331 (and (and (and (and (and (= $x196 $x340) (= $x55 $x280)) $x239) $x40) $x247) $x246)))
 (let (($x336 (and (and (and (and $x331 $x315) $x444) $x29) $x334)))
 (let (($x447 (= $x336 true)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x111 (concat ?x72 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x107 (concat ?x83 (concat ?x60 ?x111))))
 (let ((?x285 (bvadd ?x107 (_ bv4 32))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x192))))
 (let (($x220 (= (_ bv0 32) ?x306)))
 (let ((?x267 (ite $x220 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (= ?x267 (_ bv0 32))))
 (let (($x221 (= $x223 $x287)))
 (let (($x282 (=> $x325 $x221)))
 (let (($x219 (bvuge ?x267 (_ bv1 32))))
 (let (($x289 (= $x98 $x219)))
 (let (($x302 (=> $x325 $x289)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x201))))
 (let (($x252 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x232)))
 (let (($x145 (=> $x325 $x252)))
 (let (($x109 (= (_ bv0 32) ?x107)))
 (let ((?x229 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x259 (bvuge ?x229 (_ bv1 32))))
 (let (($x216 (= $x308 $x259)))
 (let (($x341 (=> $x55 $x216)))
 (let (($x30 (= ?x229 (_ bv0 32))))
 (let (($x214 (= $x24 $x30)))
 (let (($x100 (=> $x55 $x214)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x179)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x27)))
 (let (($x245 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x184)))
 (let (($x292 (=> $x55 $x245)))
 (let (($x260 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x198 (ite $x260 (_ bv0 32) (_ bv1 32))))
 (let (($x153 (bvuge ?x198 (_ bv1 32))))
 (let (($x312 (= $x55 $x153)))
 (let (($x11 (= ?x198 (_ bv0 32))))
 (let (($x293 (= $x196 $x11)))
 (let (($x263 (and (and (and (and (and (and $x293 $x312) $x239) $x292) $x100) $x40) $x341)))
 (let (($x309 (and (and (and $x263 $x145) $x302) $x282)))
 (let (($x298 (= $x309 true)))
 (let (($x299 (= $x77 $x219)))
 (let (($x5 (=> $x87 $x299)))
 (let (($x310 (= $x195 $x287)))
 (let (($x37 (=> $x87 $x310)))
 (let (($x181 (= input.spec-%var-l-1.2.1.2.0 ?x232)))
 (let (($x237 (=> $x87 $x181)))
 (let (($x66 (= $x177 $x259)))
 (let (($x199 (=> $x84 $x66)))
 (let (($x304 (= $x264 $x30)))
 (let (($x194 (=> $x84 $x304)))
 (let (($x131 (= input.spec-%var-l-1.2.0 ?x184)))
 (let (($x113 (=> $x84 $x131)))
 (let (($x23 (and (and (and (and (and (= $x200 $x11) (= $x84 $x153)) $x193) $x113) $x194) $x301)))
 (let (($x272 (and (and (and (and $x23 $x199) $x237) $x37) $x5)))
 (let (($x172 (= $x272 true)))
 (let ((?x10 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x46 (= (_ bv0 3) ?x10)))
 (let (($x166 (= $x46 true)))
 (let (($x34 (= $x166 true)))
 (let (($x205 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x78 (= $x205 true)))
 (let (($x70 (= $x78 true)))
 (let (($x171 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x226 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x136 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226))))
 (let (($x130 (and true $x136)))
 (let (($x110 (and $x136 $x130)))
 (let ((?x48 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x51))))
 (let (($x224 (= (bvand ?x207 (_ bv4294967288 32)) ?x207)))
 (let (($x88 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x286 (and $x88 $x224)))
 (let (($x81 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x48 (bvsub ?x48 (_ bv4 32))) (bvult ?x48 (bvsub ?x48 (_ bv4 32))))))
 (let (($x213 (and (and (and (and (and $x130 $x81) $x88) $x286) $x110) $x171)))
 (let (($x28 (= true $x213)))
 (let (($x151 (not $x114)))
 (let (($x164 (=> $x151 $x28)))
 (let (($x123 (= $x164 true)))
 (let (($x167 (= $x123 true)))
 (let (($x234 (= $x167 true)))
 (let (($x187 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x50 (= $x187 true)))
 (let (($x12 (= $x50 true)))
 (let (($x174 (= $x12 true)))
 (let (($x296 (= $x151 true)))
 (let (($x137 (= $x296 true)))
 (let (($x36 (= $x137 true)))
 (let (($x91 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x129 (= $x91 true)))
 (let (($x189 (= $x129 true)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x183)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x67 $x54)))
 (let (($x35 (and $x133 $x203)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x86 $x35)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x236 $x182)))))))
 (let (($x116 (and $x157 $x71)))
 (let (($x85 (= $x116 true)))
 (let (($x64 (= $x85 true)))
 (let (($x159 (= $x64 true)))
 (let (($x262 (and $x159 $x189)))
 (let (($x126 (and $x262 $x36)))
 (let (($x191 (and $x126 $x174)))
 (let (($x117 (and $x191 $x234)))
 (let (($x45 (and $x117 $x70)))
 (let (($x270 (and $x45 $x34)))
 (let (($x52 (and $x270 $x172)))
 (let (($x141 (and $x52 $x298)))
 (let (($x353 (and $x141 $x447)))
 (let (($x367 (and $x353 $x369)))
 (let (($x363 (and $x55 $x367)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x364 (and $x210 $x363)))
 (let (($x128 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd ?x48 (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x135 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x128)))))))
 (let (($x13 (=> (and $x151 (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x26 $x128)))))))
 (let (($x148 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x57 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x90 (_ bv1 32))) (or false (or false (and true (or $x101 $x148)))))))
 (let (($x154 (=> (and $x151 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x90 (_ bv1 32)))) (or false (or false (and true (or $x101 $x148)))))))
 (let (($x9 (and $x154 $x13)))
 (let (($x362 (and $x9 $x364)))
 (let (($x371 (=> $x362 $x449)))
 (not $x371)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x342 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x75 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem ?x75) (concat ?x313 (concat ?x342 ?x218)))))
 (let ((?x365 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x255)))
 (let (($x368 (= (_ bv0 32) ?x365)))
 (let (($x449 (= $x368 true)))
 (let ((?x90 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x250))))
 (let ((?x323 (bvadd ?x281 (_ bv4 32))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv1 32))) (select input.dst.llvm-mem ?x323))))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv2 32))) ?x65))))
 (let (($x320 (= (_ bv0 32) ?x343)))
 (let ((?x332 (ite $x320 (_ bv0 32) (_ bv1 32))))
 (let (($x379 (bvuge ?x332 (_ bv1 32))))
 (let (($x77 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x349 (= $x77 $x379)))
 (let (($x177 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x84 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x87 (and $x84 $x177)))
 (let (($x448 (=> $x87 $x349)))
 (let (($x446 (= ?x332 (_ bv0 32))))
 (let (($x195 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x350 (= $x195 $x446)))
 (let (($x351 (=> $x87 $x350)))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x143))))
 (let (($x376 (= input.spec-%var-l-1.2.1.2.0 ?x103)))
 (let (($x357 (=> $x87 $x376)))
 (let (($x277 (= (_ bv0 32) ?x281)))
 (let ((?x439 (ite $x277 (_ bv0 32) (_ bv1 32))))
 (let (($x291 (bvuge ?x439 (_ bv1 32))))
 (let (($x41 (= $x177 $x291)))
 (let (($x89 (=> $x84 $x41)))
 (let (($x258 (= ?x439 (_ bv0 32))))
 (let (($x264 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x347 (= $x264 $x258)))
 (let (($x346 (=> $x84 $x347)))
 (let (($x356 (= input.spec-%var-l-1.2.0 ?x255)))
 (let (($x375 (=> $x84 $x356)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x290 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x290 (_ bv1 32))))
 (let (($x348 (= $x84 $x280)))
 (let (($x340 (= ?x290 (_ bv0 32))))
 (let (($x200 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x354 (= $x200 $x340)))
 (let (($x82 (= false false)))
 (let (($x146 (and $x84 $x264)))
 (let (($x301 (=> $x146 $x82)))
 (let (($x193 (=> $x200 $x82)))
 (let (($x358 (and (and (and (and (and (and $x193 $x301) $x354) $x348) $x375) $x346) $x89)))
 (let (($x360 (and (and (and $x358 $x357) $x351) $x448)))
 (let (($x369 (= $x360 true)))
 (let (($x223 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x328 (= $x223 $x446)))
 (let (($x308 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x55 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x325 (and $x55 $x308)))
 (let (($x334 (=> $x325 $x328)))
 (let (($x98 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x97 (= $x98 $x379)))
 (let (($x29 (=> $x325 $x97)))
 (let (($x324 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x103)))
 (let (($x444 (=> $x325 $x324)))
 (let (($x274 (= $x308 $x291)))
 (let (($x315 (=> $x55 $x274)))
 (let (($x24 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x314 (= $x24 $x258)))
 (let (($x246 (=> $x55 $x314)))
 (let (($x8 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x255)))
 (let (($x247 (=> $x55 $x8)))
 (let (($x6 (and $x55 $x24)))
 (let (($x40 (=> $x6 $x82)))
 (let (($x196 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x239 (=> $x196 $x82)))
 (let (($x331 (and (and (and (and (and (= $x196 $x340) (= $x55 $x280)) $x239) $x40) $x247) $x246)))
 (let (($x336 (and (and (and (and $x331 $x315) $x444) $x29) $x334)))
 (let (($x447 (= $x336 true)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x111 (concat ?x72 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x107 (concat ?x83 (concat ?x60 ?x111))))
 (let ((?x285 (bvadd ?x107 (_ bv4 32))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x192))))
 (let (($x220 (= (_ bv0 32) ?x306)))
 (let ((?x267 (ite $x220 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (= ?x267 (_ bv0 32))))
 (let (($x221 (= $x223 $x287)))
 (let (($x282 (=> $x325 $x221)))
 (let (($x219 (bvuge ?x267 (_ bv1 32))))
 (let (($x289 (= $x98 $x219)))
 (let (($x302 (=> $x325 $x289)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x201))))
 (let (($x252 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x232)))
 (let (($x145 (=> $x325 $x252)))
 (let (($x109 (= (_ bv0 32) ?x107)))
 (let ((?x229 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x259 (bvuge ?x229 (_ bv1 32))))
 (let (($x216 (= $x308 $x259)))
 (let (($x341 (=> $x55 $x216)))
 (let (($x30 (= ?x229 (_ bv0 32))))
 (let (($x214 (= $x24 $x30)))
 (let (($x100 (=> $x55 $x214)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x179)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x27)))
 (let (($x245 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x184)))
 (let (($x292 (=> $x55 $x245)))
 (let (($x260 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x198 (ite $x260 (_ bv0 32) (_ bv1 32))))
 (let (($x153 (bvuge ?x198 (_ bv1 32))))
 (let (($x312 (= $x55 $x153)))
 (let (($x11 (= ?x198 (_ bv0 32))))
 (let (($x293 (= $x196 $x11)))
 (let (($x263 (and (and (and (and (and (and $x293 $x312) $x239) $x292) $x100) $x40) $x341)))
 (let (($x309 (and (and (and $x263 $x145) $x302) $x282)))
 (let (($x298 (= $x309 true)))
 (let (($x299 (= $x77 $x219)))
 (let (($x5 (=> $x87 $x299)))
 (let (($x310 (= $x195 $x287)))
 (let (($x37 (=> $x87 $x310)))
 (let (($x181 (= input.spec-%var-l-1.2.1.2.0 ?x232)))
 (let (($x237 (=> $x87 $x181)))
 (let (($x66 (= $x177 $x259)))
 (let (($x199 (=> $x84 $x66)))
 (let (($x304 (= $x264 $x30)))
 (let (($x194 (=> $x84 $x304)))
 (let (($x131 (= input.spec-%var-l-1.2.0 ?x184)))
 (let (($x113 (=> $x84 $x131)))
 (let (($x23 (and (and (and (and (and (= $x200 $x11) (= $x84 $x153)) $x193) $x113) $x194) $x301)))
 (let (($x272 (and (and (and (and $x23 $x199) $x237) $x37) $x5)))
 (let (($x172 (= $x272 true)))
 (let ((?x10 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x46 (= (_ bv0 3) ?x10)))
 (let (($x166 (= $x46 true)))
 (let (($x34 (= $x166 true)))
 (let (($x205 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x78 (= $x205 true)))
 (let (($x70 (= $x78 true)))
 (let (($x171 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x226 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x136 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226))))
 (let (($x130 (and true $x136)))
 (let (($x110 (and $x136 $x130)))
 (let ((?x48 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x51))))
 (let (($x224 (= (bvand ?x207 (_ bv4294967288 32)) ?x207)))
 (let (($x88 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x286 (and $x88 $x224)))
 (let (($x81 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x48 (bvsub ?x48 (_ bv4 32))) (bvult ?x48 (bvsub ?x48 (_ bv4 32))))))
 (let (($x213 (and (and (and (and (and $x130 $x81) $x88) $x286) $x110) $x171)))
 (let (($x28 (= true $x213)))
 (let (($x151 (not $x114)))
 (let (($x164 (=> $x151 $x28)))
 (let (($x123 (= $x164 true)))
 (let (($x167 (= $x123 true)))
 (let (($x234 (= $x167 true)))
 (let (($x187 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x50 (= $x187 true)))
 (let (($x12 (= $x50 true)))
 (let (($x174 (= $x12 true)))
 (let (($x296 (= $x151 true)))
 (let (($x137 (= $x296 true)))
 (let (($x36 (= $x137 true)))
 (let (($x91 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x129 (= $x91 true)))
 (let (($x189 (= $x129 true)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x183)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x67 $x54)))
 (let (($x35 (and $x133 $x203)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x86 $x35)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x236 $x182)))))))
 (let (($x116 (and $x157 $x71)))
 (let (($x85 (= $x116 true)))
 (let (($x64 (= $x85 true)))
 (let (($x159 (= $x64 true)))
 (let (($x262 (and $x159 $x189)))
 (let (($x126 (and $x262 $x36)))
 (let (($x191 (and $x126 $x174)))
 (let (($x117 (and $x191 $x234)))
 (let (($x45 (and $x117 $x70)))
 (let (($x270 (and $x45 $x34)))
 (let (($x52 (and $x270 $x172)))
 (let (($x141 (and $x52 $x298)))
 (let (($x353 (and $x141 $x447)))
 (let (($x367 (and $x353 $x369)))
 (let (($x363 (and $x55 $x367)))
 (let (($x210 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x364 (and $x210 $x363)))
 (let (($x128 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd ?x48 (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x135 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x128)))))))
 (let (($x13 (=> (and $x151 (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x26 $x128)))))))
 (let (($x148 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x57 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x90 (_ bv1 32))) (or false (or false (and true (or $x101 $x148)))))))
 (let (($x154 (=> (and $x151 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x90 (_ bv1 32)))) (or false (or false (and true (or $x101 $x148)))))))
 (let (($x9 (and $x154 $x13)))
 (let (($x362 (and $x9 $x364)))
 (let (($x371 (=> $x362 $x449)))
 (not $x371)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)) (_ bv1024 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xc8c8c8c8)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xc86ec8d5)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xc8c8c8c8)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xc86ec8d0)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x6e)
                                #xc86ec8cf
                                #x5d)
                         #xc86ec8da
                         #xc8)
                  #xc86ec8ce
                  #xc8)))
(let ((a!2 (store (store (store (store a!1 #xc86ec8d8 #xc8) #xc86ec8cd #xc8)
                         #xc86ec8d4
                         #xc8)
                  #xc86ec8d7
                  #xc8)))
(let ((a!3 (store (store (store (store a!2 #xc86ec8cb #xc8) #xc86ec8d5 #xc8)
                         #xc86ec8cf
                         #x5d)
                  #xc86ec8d3
                  #xc8)))
(let ((a!4 (store (store (store (store a!3 #xc86ec8d9 #xcb) #xc86ec8d0 #xc8)
                         #xc86ec8dc
                         #xc8)
                  #xc86ec8d5
                  #xc8)))
(let ((a!5 (store (store (store (store a!4 #xc86ec8d2 #xc8) #xc86ec8cd #xc8)
                         #xc86ec8cc
                         #xc8)
                  #xc86ec8d2
                  #xc8)))
(let ((a!6 (store (store (store (store a!5 #xc86ec8c8 #xc8) #xc86ec8ce #xc8)
                         #xc86ec8d0
                         #xc8)
                  #xc86ec8ca
                  #xc8)))
  (store (store (store (store a!6 #xc86ec8c9 #xc8) #xc86ec8cb #xc8)
                #xc86ec8cc
                #xc8)
         #xc86ec8d7
         #xc8))))))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xc8c86ec8)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xc8c86ec8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x225 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x251 (concat (select input.dst.llvm-mem ?x225) (concat ?x241 (concat ?x257 ?x276)))))
 (let ((?x386 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x251)))
 (let (($x387 (= (_ bv0 32) ?x386)))
 (let (($x388 (= $x387 true)))
 (let ((?x47 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv1 32))) (select input.dst.llvm-mem ?x47))))
 (let ((?x445 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv2 32))) ?x246))))
 (let ((?x65 (bvadd ?x445 (_ bv4 32))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x332))))
 (let (($x334 (= (_ bv0 32) ?x328)))
 (let ((?x336 (ite $x334 (_ bv0 32) (_ bv1 32))))
 (let (($x447 (bvuge ?x336 (_ bv1 32))))
 (let (($x310 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x368 (= $x310 $x447)))
 (let (($x177 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x193 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x186 (and $x193 $x177)))
 (let (($x449 (=> $x186 $x368)))
 (let (($x354 (= ?x336 (_ bv0 32))))
 (let (($x139 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x362 (= $x139 $x354)))
 (let (($x365 (=> $x186 $x362)))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv1 32))) (select input.dst.llvm-mem ?x445))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv2 32))) ?x374))))
 (let (($x363 (= input.spec-%var-l-1.2.1.2.0 ?x319)))
 (let (($x364 (=> $x186 $x363)))
 (let (($x322 (= (_ bv0 32) ?x445)))
 (let ((?x440 (ite $x322 (_ bv0 32) (_ bv1 32))))
 (let (($x300 (bvuge ?x440 (_ bv1 32))))
 (let (($x369 (= $x177 $x300)))
 (let (($x367 (=> $x193 $x369)))
 (let (($x441 (= ?x440 (_ bv0 32))))
 (let (($x33 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x448 (= $x33 $x441)))
 (let (($x360 (=> $x193 $x448)))
 (let (($x355 (= input.spec-%var-l-1.2.0 ?x251)))
 (let (($x349 (=> $x193 $x355)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x22 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x247 (bvuge ?x22 (_ bv1 32))))
 (let (($x351 (= $x193 $x247)))
 (let (($x255 (= ?x22 (_ bv0 32))))
 (let (($x122 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x350 (= $x122 $x255)))
 (let (($x5 (and $x186 $x139)))
 (let (($x272 (not $x5)))
 (let (($x219 (and $x186 $x310)))
 (let (($x299 (not $x219)))
 (let (($x238 (= false false)))
 (let (($x301 (and $x193 $x33)))
 (let (($x23 (=> $x301 $x238)))
 (let (($x96 (=> $x122 $x238)))
 (let (($x373 (and (and (and (and (and (and $x96 $x23) $x299) $x272) $x350) $x351) $x349)))
 (let (($x384 (and (and (and (and (and $x373 $x360) $x367) $x364) $x365) $x449)))
 (let (($x380 (= $x384 true)))
 (let (($x302 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x325 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x161 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x145 (and $x161 $x325)))
 (let (($x290 (and $x145 $x302)))
 (let (($x340 (not $x290)))
 (let (($x221 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x298 (and $x145 $x221)))
 (let (($x141 (not $x298)))
 (let (($x370 (= $x221 $x354)))
 (let (($x348 (=> $x145 $x370)))
 (let (($x353 (= $x302 $x447)))
 (let (($x352 (=> $x145 $x353)))
 (let (($x150 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x319)))
 (let (($x327 (=> $x145 $x150)))
 (let (($x143 (= $x325 $x300)))
 (let (($x442 (=> $x161 $x143)))
 (let (($x242 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x253 (= $x242 $x441)))
 (let (($x254 (=> $x161 $x253)))
 (let (($x281 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x251)))
 (let (($x277 (=> $x161 $x281)))
 (let (($x341 (and $x161 $x242)))
 (let (($x263 (=> $x341 $x238)))
 (let (($x443 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x214 (=> $x443 $x238)))
 (let (($x347 (and (and (and (and (and (= $x443 $x255) (= $x161 $x247)) $x214) $x263) $x277) $x254)))
 (let (($x376 (and (and (and (and (and (and $x347 $x442) $x327) $x352) $x348) $x141) $x340)))
 (let (($x357 (= $x376 true)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x72 (concat ?x94 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x229 (concat ?x109 (concat ?x111 ?x72))))
 (let ((?x284 (bvadd ?x229 (_ bv4 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x269))))
 (let (($x173 (= (_ bv0 32) ?x192)))
 (let ((?x306 (ite $x173 (_ bv0 32) (_ bv1 32))))
 (let (($x220 (= ?x306 (_ bv0 32))))
 (let (($x282 (= $x221 $x220)))
 (let (($x309 (=> $x145 $x282)))
 (let (($x37 (bvuge ?x306 (_ bv1 32))))
 (let (($x339 (= $x302 $x37)))
 (let (($x223 (=> $x145 $x339)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x58))))
 (let (($x217 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x132)))
 (let (($x98 (=> $x145 $x217)))
 (let (($x30 (= (_ bv0 32) ?x229)))
 (let ((?x304 (ite $x30 (_ bv0 32) (_ bv1 32))))
 (let (($x259 (bvuge ?x304 (_ bv1 32))))
 (let (($x318 (= $x325 $x259)))
 (let (($x252 (=> $x161 $x318)))
 (let (($x194 (= ?x304 (_ bv0 32))))
 (let (($x308 (= $x242 $x194)))
 (let (($x216 (=> $x161 $x308)))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x102)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x184)))
 (let (($x240 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x279)))
 (let (($x6 (=> $x161 $x240)))
 (let (($x153 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x147 (ite $x153 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x147 (_ bv1 32))))
 (let (($x24 (= $x161 $x188)))
 (let (($x185 (= ?x147 (_ bv0 32))))
 (let (($x294 (= $x443 $x185)))
 (let (($x326 (and (and (and (and (and (and $x294 $x24) $x214) $x6) $x216) $x263) $x252)))
 (let (($x342 (and (and (and (and (and $x326 $x98) $x223) $x309) $x141) $x340)))
 (let (($x218 (= $x342 true)))
 (let (($x265 (= $x310 $x37)))
 (let (($x77 (=> $x186 $x265)))
 (let (($x267 (= $x139 $x220)))
 (let (($x287 (=> $x186 $x267)))
 (let (($x232 (= input.spec-%var-l-1.2.1.2.0 ?x132)))
 (let (($x181 (=> $x186 $x232)))
 (let (($x66 (= $x177 $x259)))
 (let (($x199 (=> $x193 $x66)))
 (let (($x311 (= $x33 $x194)))
 (let (($x146 (=> $x193 $x311)))
 (let (($x17 (= input.spec-%var-l-1.2.0 ?x279)))
 (let (($x264 (=> $x193 $x17)))
 (let (($x293 (and (and (and (and (and (= $x122 $x185) (= $x193 $x188)) $x96) $x264) $x146) $x23)))
 (let (($x155 (and (and (and (and (and (and $x293 $x199) $x181) $x287) $x77) $x299) $x272)))
 (let (($x245 (= $x155 true)))
 (let ((?x228 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x200 (= (_ bv0 3) ?x228)))
 (let (($x74 (= $x200 true)))
 (let (($x260 (= $x74 true)))
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x46 (= $x10 true)))
 (let (($x166 (= $x46 true)))
 (let (($x213 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x130 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x130) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x130))))
 (let (($x81 (and true $x42)))
 (let (($x25 (and $x42 $x81)))
 (let ((?x124 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x211))))
 (let (($x110 (= (bvand ?x224 (_ bv4294967288 32)) ?x224)))
 (let (($x212 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x38 (and $x212 $x110)))
 (let (($x15 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv4 32))) (bvult ?x124 (bvsub ?x124 (_ bv4 32))))))
 (let (($x234 (and (and (and (and (and $x81 $x15) $x212) $x38) $x25) $x213)))
 (let (($x117 (= true $x234)))
 (let (($x151 (not $x114)))
 (let (($x278 (=> $x151 $x117)))
 (let (($x205 (= $x278 true)))
 (let (($x78 (= $x205 true)))
 (let (($x70 (= $x78 true)))
 (let (($x288 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x288 true)))
 (let (($x227 (= $x226 true)))
 (let (($x170 (= $x227 true)))
 (let (($x187 (= $x151 true)))
 (let (($x50 (= $x187 true)))
 (let (($x12 (= $x50 true)))
 (let (($x137 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x36 (= $x137 true)))
 (let (($x126 (= $x36 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x85)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x203 $x71)))
 (let (($x159 (and $x116 $x64)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x104 $x159)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x183 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x157 $x149)))))))
 (let (($x91 (and $x183 $x169)))
 (let (($x129 (= $x91 true)))
 (let (($x189 (= $x129 true)))
 (let (($x262 (= $x189 true)))
 (let (($x230 (and $x262 $x126)))
 (let (($x174 (and $x230 $x12)))
 (let (($x136 (and $x174 $x170)))
 (let (($x45 (and $x136 $x70)))
 (let (($x34 (and $x45 $x166)))
 (let (($x198 (and $x34 $x260)))
 (let (($x292 (and $x198 $x245)))
 (let (($x249 (and $x292 $x218)))
 (let (($x359 (and $x249 $x357)))
 (let (($x381 (and $x359 $x380)))
 (let (($x378 (and $x161 $x381)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x382 (and $x175 $x378)))
 (let (($x106 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd ?x124 (_ bv3 32))))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x210 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x209 $x106)))))))
 (let (($x233 (=> (and $x151 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x209 $x106)))))))
 (let (($x115 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x178 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x47 (_ bv1 32))) (or false (or false (and true (or $x79 $x115)))))))
 (let (($x32 (=> (and $x151 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x47 (_ bv1 32)))) (or false (or false (and true (or $x79 $x115)))))))
 (let (($x176 (and $x32 $x233)))
 (let (($x56 (and $x176 $x382)))
 (let (($x451 (=> $x56 $x388)))
 (not $x451)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x225 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x251 (concat (select input.dst.llvm-mem ?x225) (concat ?x241 (concat ?x257 ?x276)))))
 (let ((?x386 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x251)))
 (let (($x387 (= (_ bv0 32) ?x386)))
 (let (($x388 (= $x387 true)))
 (let ((?x47 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv1 32))) (select input.dst.llvm-mem ?x47))))
 (let ((?x445 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv2 32))) ?x246))))
 (let ((?x65 (bvadd ?x445 (_ bv4 32))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x332))))
 (let (($x334 (= (_ bv0 32) ?x328)))
 (let ((?x336 (ite $x334 (_ bv0 32) (_ bv1 32))))
 (let (($x447 (bvuge ?x336 (_ bv1 32))))
 (let (($x310 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x368 (= $x310 $x447)))
 (let (($x177 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x193 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x186 (and $x193 $x177)))
 (let (($x449 (=> $x186 $x368)))
 (let (($x354 (= ?x336 (_ bv0 32))))
 (let (($x139 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x362 (= $x139 $x354)))
 (let (($x365 (=> $x186 $x362)))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv1 32))) (select input.dst.llvm-mem ?x445))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x445 (_ bv2 32))) ?x374))))
 (let (($x363 (= input.spec-%var-l-1.2.1.2.0 ?x319)))
 (let (($x364 (=> $x186 $x363)))
 (let (($x322 (= (_ bv0 32) ?x445)))
 (let ((?x440 (ite $x322 (_ bv0 32) (_ bv1 32))))
 (let (($x300 (bvuge ?x440 (_ bv1 32))))
 (let (($x369 (= $x177 $x300)))
 (let (($x367 (=> $x193 $x369)))
 (let (($x441 (= ?x440 (_ bv0 32))))
 (let (($x33 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x448 (= $x33 $x441)))
 (let (($x360 (=> $x193 $x448)))
 (let (($x355 (= input.spec-%var-l-1.2.0 ?x251)))
 (let (($x349 (=> $x193 $x355)))
 (let (($x114 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x22 (ite $x114 (_ bv0 32) (_ bv1 32))))
 (let (($x247 (bvuge ?x22 (_ bv1 32))))
 (let (($x351 (= $x193 $x247)))
 (let (($x255 (= ?x22 (_ bv0 32))))
 (let (($x122 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x350 (= $x122 $x255)))
 (let (($x5 (and $x186 $x139)))
 (let (($x272 (not $x5)))
 (let (($x219 (and $x186 $x310)))
 (let (($x299 (not $x219)))
 (let (($x238 (= false false)))
 (let (($x301 (and $x193 $x33)))
 (let (($x23 (=> $x301 $x238)))
 (let (($x96 (=> $x122 $x238)))
 (let (($x373 (and (and (and (and (and (and $x96 $x23) $x299) $x272) $x350) $x351) $x349)))
 (let (($x384 (and (and (and (and (and $x373 $x360) $x367) $x364) $x365) $x449)))
 (let (($x380 (= $x384 true)))
 (let (($x302 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x325 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x161 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x145 (and $x161 $x325)))
 (let (($x290 (and $x145 $x302)))
 (let (($x340 (not $x290)))
 (let (($x221 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x298 (and $x145 $x221)))
 (let (($x141 (not $x298)))
 (let (($x370 (= $x221 $x354)))
 (let (($x348 (=> $x145 $x370)))
 (let (($x353 (= $x302 $x447)))
 (let (($x352 (=> $x145 $x353)))
 (let (($x150 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x319)))
 (let (($x327 (=> $x145 $x150)))
 (let (($x143 (= $x325 $x300)))
 (let (($x442 (=> $x161 $x143)))
 (let (($x242 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x253 (= $x242 $x441)))
 (let (($x254 (=> $x161 $x253)))
 (let (($x281 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x251)))
 (let (($x277 (=> $x161 $x281)))
 (let (($x341 (and $x161 $x242)))
 (let (($x263 (=> $x341 $x238)))
 (let (($x443 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x214 (=> $x443 $x238)))
 (let (($x347 (and (and (and (and (and (= $x443 $x255) (= $x161 $x247)) $x214) $x263) $x277) $x254)))
 (let (($x376 (and (and (and (and (and (and $x347 $x442) $x327) $x352) $x348) $x141) $x340)))
 (let (($x357 (= $x376 true)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x72 (concat ?x94 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x229 (concat ?x109 (concat ?x111 ?x72))))
 (let ((?x284 (bvadd ?x229 (_ bv4 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x269))))
 (let (($x173 (= (_ bv0 32) ?x192)))
 (let ((?x306 (ite $x173 (_ bv0 32) (_ bv1 32))))
 (let (($x220 (= ?x306 (_ bv0 32))))
 (let (($x282 (= $x221 $x220)))
 (let (($x309 (=> $x145 $x282)))
 (let (($x37 (bvuge ?x306 (_ bv1 32))))
 (let (($x339 (= $x302 $x37)))
 (let (($x223 (=> $x145 $x339)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x58))))
 (let (($x217 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x132)))
 (let (($x98 (=> $x145 $x217)))
 (let (($x30 (= (_ bv0 32) ?x229)))
 (let ((?x304 (ite $x30 (_ bv0 32) (_ bv1 32))))
 (let (($x259 (bvuge ?x304 (_ bv1 32))))
 (let (($x318 (= $x325 $x259)))
 (let (($x252 (=> $x161 $x318)))
 (let (($x194 (= ?x304 (_ bv0 32))))
 (let (($x308 (= $x242 $x194)))
 (let (($x216 (=> $x161 $x308)))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x102)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x184)))
 (let (($x240 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x279)))
 (let (($x6 (=> $x161 $x240)))
 (let (($x153 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x147 (ite $x153 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x147 (_ bv1 32))))
 (let (($x24 (= $x161 $x188)))
 (let (($x185 (= ?x147 (_ bv0 32))))
 (let (($x294 (= $x443 $x185)))
 (let (($x326 (and (and (and (and (and (and $x294 $x24) $x214) $x6) $x216) $x263) $x252)))
 (let (($x342 (and (and (and (and (and $x326 $x98) $x223) $x309) $x141) $x340)))
 (let (($x218 (= $x342 true)))
 (let (($x265 (= $x310 $x37)))
 (let (($x77 (=> $x186 $x265)))
 (let (($x267 (= $x139 $x220)))
 (let (($x287 (=> $x186 $x267)))
 (let (($x232 (= input.spec-%var-l-1.2.1.2.0 ?x132)))
 (let (($x181 (=> $x186 $x232)))
 (let (($x66 (= $x177 $x259)))
 (let (($x199 (=> $x193 $x66)))
 (let (($x311 (= $x33 $x194)))
 (let (($x146 (=> $x193 $x311)))
 (let (($x17 (= input.spec-%var-l-1.2.0 ?x279)))
 (let (($x264 (=> $x193 $x17)))
 (let (($x293 (and (and (and (and (and (= $x122 $x185) (= $x193 $x188)) $x96) $x264) $x146) $x23)))
 (let (($x155 (and (and (and (and (and (and $x293 $x199) $x181) $x287) $x77) $x299) $x272)))
 (let (($x245 (= $x155 true)))
 (let ((?x228 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x200 (= (_ bv0 3) ?x228)))
 (let (($x74 (= $x200 true)))
 (let (($x260 (= $x74 true)))
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x46 (= $x10 true)))
 (let (($x166 (= $x46 true)))
 (let (($x213 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x130 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x130) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x130))))
 (let (($x81 (and true $x42)))
 (let (($x25 (and $x42 $x81)))
 (let ((?x124 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x211))))
 (let (($x110 (= (bvand ?x224 (_ bv4294967288 32)) ?x224)))
 (let (($x212 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x38 (and $x212 $x110)))
 (let (($x15 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv4 32))) (bvult ?x124 (bvsub ?x124 (_ bv4 32))))))
 (let (($x234 (and (and (and (and (and $x81 $x15) $x212) $x38) $x25) $x213)))
 (let (($x117 (= true $x234)))
 (let (($x151 (not $x114)))
 (let (($x278 (=> $x151 $x117)))
 (let (($x205 (= $x278 true)))
 (let (($x78 (= $x205 true)))
 (let (($x70 (= $x78 true)))
 (let (($x288 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x288 true)))
 (let (($x227 (= $x226 true)))
 (let (($x170 (= $x227 true)))
 (let (($x187 (= $x151 true)))
 (let (($x50 (= $x187 true)))
 (let (($x12 (= $x50 true)))
 (let (($x137 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x36 (= $x137 true)))
 (let (($x126 (= $x36 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x85)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x203 $x71)))
 (let (($x159 (and $x116 $x64)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x104 $x159)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x183 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x157 $x149)))))))
 (let (($x91 (and $x183 $x169)))
 (let (($x129 (= $x91 true)))
 (let (($x189 (= $x129 true)))
 (let (($x262 (= $x189 true)))
 (let (($x230 (and $x262 $x126)))
 (let (($x174 (and $x230 $x12)))
 (let (($x136 (and $x174 $x170)))
 (let (($x45 (and $x136 $x70)))
 (let (($x34 (and $x45 $x166)))
 (let (($x198 (and $x34 $x260)))
 (let (($x292 (and $x198 $x245)))
 (let (($x249 (and $x292 $x218)))
 (let (($x359 (and $x249 $x357)))
 (let (($x381 (and $x359 $x380)))
 (let (($x378 (and $x161 $x381)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x382 (and $x175 $x378)))
 (let (($x106 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd ?x124 (_ bv3 32))))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x210 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x209 $x106)))))))
 (let (($x233 (=> (and $x151 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x209 $x106)))))))
 (let (($x115 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x178 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x47 (_ bv1 32))) (or false (or false (and true (or $x79 $x115)))))))
 (let (($x32 (=> (and $x151 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x47 (_ bv1 32)))) (or false (or false (and true (or $x79 $x115)))))))
 (let (($x176 (and $x32 $x233)))
 (let (($x56 (and $x176 $x382)))
 (let (($x451 (=> $x56 $x388)))
 (not $x451)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)) (_ bv131072 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv131072 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfff00000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00100001)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x000ffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
              #x00100004
              #x6d)
       #x000ffffb
       #x6d))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x6d000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x6d000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfff00000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfff00003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x194 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x115 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x259 (concat (select input.dst.llvm-mem ?x115) (concat ?x23 (concat ?x146 ?x194)))))
 (let ((?x66 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x259)))
 (let ((?x229 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x30 (bvmul (_ bv4294967295 32) ?x229)))
 (let ((?x304 (bvneg ?x30)))
 (let (($x199 (= ?x304 ?x66)))
 (let (($x55 (= $x199 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x184 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x264 (bvuge ?x184 (_ bv1 32))))
 (let (($x238 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (= $x238 $x264)))
 (let (($x279 (= ?x184 (_ bv0 32))))
 (let (($x185 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x107 (= $x185 $x279)))
 (let (($x49 (and $x107 $x109)))
 (let (($x111 (= $x49 true)))
 (let (($x133 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x231 (= $x133 $x264)))
 (let (($x179 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x17 (= $x179 $x279)))
 (let (($x162 (and $x17 $x231)))
 (let (($x33 (= $x162 true)))
 (let (($x193 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x188 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x96 (bvuge ?x188 (_ bv1 32))))
 (let (($x31 (= $x133 $x96)))
 (let (($x316 (= ?x188 (_ bv0 32))))
 (let (($x27 (= $x179 $x316)))
 (let (($x197 (and $x27 $x31)))
 (let (($x297 (= $x197 true)))
 (let (($x52 (= $x238 $x96)))
 (let (($x172 (= $x185 $x316)))
 (let (($x53 (and $x172 $x52)))
 (let (($x131 (= $x53 true)))
 (let ((?x74 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x260 (bvneg ?x74)))
 (let (($x11 (= ?x260 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x122 (= $x11 true)))
 (let (($x84 (= $x122 true)))
 (let ((?x10 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x46 (= (_ bv0 3) ?x10)))
 (let (($x166 (= $x46 true)))
 (let (($x34 (= $x166 true)))
 (let (($x123 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x19) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x19))))
 (let (($x81 (and true $x42)))
 (let (($x110 (and $x42 $x81)))
 (let ((?x296 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x51))))
 (let (($x286 (= (bvand ?x211 (_ bv4294967288 32)) ?x211)))
 (let (($x76 (= (bvand ?x296 (_ bv4294967292 32)) ?x296)))
 (let (($x63 (and $x76 $x286)))
 (let (($x15 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x296 (bvsub ?x296 (_ bv4 32))) (bvult ?x296 (bvsub ?x296 (_ bv4 32))))))
 (let (($x234 (and (and (and (and (and $x81 $x15) $x76) $x63) $x110) $x123)))
 (let (($x117 (= true $x234)))
 (let (($x101 (not $x112)))
 (let (($x278 (=> $x101 $x117)))
 (let (($x205 (= $x278 true)))
 (let (($x78 (= $x205 true)))
 (let (($x70 (= $x78 true)))
 (let (($x288 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x288 true)))
 (let (($x227 (= $x226 true)))
 (let (($x170 (= $x227 true)))
 (let (($x187 (= $x101 true)))
 (let (($x50 (= $x187 true)))
 (let (($x12 (= $x50 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x91)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x85 $x159)))
 (let (($x189 (and $x169 $x129)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x262 (and $x149 $x189)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x183)))))))
 (let (($x137 (and $x116 $x262)))
 (let (($x36 (= $x137 true)))
 (let (($x126 (= $x36 true)))
 (let (($x230 (= $x126 true)))
 (let (($x174 (and $x230 $x12)))
 (let (($x136 (and $x174 $x170)))
 (let (($x45 (and $x136 $x70)))
 (let (($x270 (and $x45 $x34)))
 (let (($x153 (and $x270 $x84)))
 (let (($x113 (and $x153 $x131)))
 (let (($x102 (and $x113 $x297)))
 (let (($x83 (and $x102 $x33)))
 (let (($x60 (and $x83 $x111)))
 (let (($x94 (and $x133 $x60)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x261 (and $x125 $x94)))
 (let (($x135 (bvugt ?x296 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x296 (_ bv3 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x206 (=> (bvule ?x296 (bvsub (bvadd ?x296 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x135)))))))
 (let (($x128 (=> (and $x101 (bvule ?x296 (bvsub (bvadd ?x296 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x99 $x135)))))))
 (let (($x57 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x124 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x26 (=> $x124 (or false (or false (and true (or $x59 $x57)))))))
 (let (($x156 (=> (and $x101 $x124) (or false (or false (and true (or $x59 $x57)))))))
 (let (($x68 (and $x156 $x128)))
 (let (($x72 (and $x68 $x261)))
 (let (($x186 (=> $x72 $x55)))
 (not $x186)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x194 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x115 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x259 (concat (select input.dst.llvm-mem ?x115) (concat ?x23 (concat ?x146 ?x194)))))
 (let ((?x66 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x259)))
 (let ((?x229 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x30 (bvmul (_ bv4294967295 32) ?x229)))
 (let ((?x304 (bvneg ?x30)))
 (let (($x199 (= ?x304 ?x66)))
 (let (($x55 (= $x199 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x184 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x264 (bvuge ?x184 (_ bv1 32))))
 (let (($x238 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (= $x238 $x264)))
 (let (($x279 (= ?x184 (_ bv0 32))))
 (let (($x185 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x107 (= $x185 $x279)))
 (let (($x49 (and $x107 $x109)))
 (let (($x111 (= $x49 true)))
 (let (($x133 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x231 (= $x133 $x264)))
 (let (($x179 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x17 (= $x179 $x279)))
 (let (($x162 (and $x17 $x231)))
 (let (($x33 (= $x162 true)))
 (let (($x193 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x188 (ite $x193 (_ bv0 32) (_ bv1 32))))
 (let (($x96 (bvuge ?x188 (_ bv1 32))))
 (let (($x31 (= $x133 $x96)))
 (let (($x316 (= ?x188 (_ bv0 32))))
 (let (($x27 (= $x179 $x316)))
 (let (($x197 (and $x27 $x31)))
 (let (($x297 (= $x197 true)))
 (let (($x52 (= $x238 $x96)))
 (let (($x172 (= $x185 $x316)))
 (let (($x53 (and $x172 $x52)))
 (let (($x131 (= $x53 true)))
 (let ((?x74 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x260 (bvneg ?x74)))
 (let (($x11 (= ?x260 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x122 (= $x11 true)))
 (let (($x84 (= $x122 true)))
 (let ((?x10 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x46 (= (_ bv0 3) ?x10)))
 (let (($x166 (= $x46 true)))
 (let (($x34 (= $x166 true)))
 (let (($x123 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x42 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x19) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x19))))
 (let (($x81 (and true $x42)))
 (let (($x110 (and $x42 $x81)))
 (let ((?x296 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x51))))
 (let (($x286 (= (bvand ?x211 (_ bv4294967288 32)) ?x211)))
 (let (($x76 (= (bvand ?x296 (_ bv4294967292 32)) ?x296)))
 (let (($x63 (and $x76 $x286)))
 (let (($x15 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x296 (bvsub ?x296 (_ bv4 32))) (bvult ?x296 (bvsub ?x296 (_ bv4 32))))))
 (let (($x234 (and (and (and (and (and $x81 $x15) $x76) $x63) $x110) $x123)))
 (let (($x117 (= true $x234)))
 (let (($x101 (not $x112)))
 (let (($x278 (=> $x101 $x117)))
 (let (($x205 (= $x278 true)))
 (let (($x78 (= $x205 true)))
 (let (($x70 (= $x78 true)))
 (let (($x288 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x288 true)))
 (let (($x227 (= $x226 true)))
 (let (($x170 (= $x227 true)))
 (let (($x187 (= $x101 true)))
 (let (($x50 (= $x187 true)))
 (let (($x12 (= $x50 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x91)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (and $x85 $x159)))
 (let (($x189 (and $x169 $x129)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x262 (and $x149 $x189)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x183)))))))
 (let (($x137 (and $x116 $x262)))
 (let (($x36 (= $x137 true)))
 (let (($x126 (= $x36 true)))
 (let (($x230 (= $x126 true)))
 (let (($x174 (and $x230 $x12)))
 (let (($x136 (and $x174 $x170)))
 (let (($x45 (and $x136 $x70)))
 (let (($x270 (and $x45 $x34)))
 (let (($x153 (and $x270 $x84)))
 (let (($x113 (and $x153 $x131)))
 (let (($x102 (and $x113 $x297)))
 (let (($x83 (and $x102 $x33)))
 (let (($x60 (and $x83 $x111)))
 (let (($x94 (and $x133 $x60)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x261 (and $x125 $x94)))
 (let (($x135 (bvugt ?x296 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x296 (_ bv3 32))))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x206 (=> (bvule ?x296 (bvsub (bvadd ?x296 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x135)))))))
 (let (($x128 (=> (and $x101 (bvule ?x296 (bvsub (bvadd ?x296 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x99 $x135)))))))
 (let (($x57 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x124 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x26 (=> $x124 (or false (or false (and true (or $x59 $x57)))))))
 (let (($x156 (=> (and $x101 $x124) (or false (or false (and true (or $x59 $x57)))))))
 (let (($x68 (and $x156 $x128)))
 (let (($x72 (and $x68 $x261)))
 (let (($x186 (=> $x72 $x55)))
 (not $x186)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x41c00000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x65fffff0)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x41c00000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x41c00003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv458712 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv458712 32) (_ bv255 8)) (_ bv458713 32) (_ bv255 8)) (_ bv458714 32) (_ bv255 8)) (_ bv458715 32) (_ bv255 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x44 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x154 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x295 (concat (select input.dst.llvm-mem ?x154) (concat ?x92 (concat ?x268 ?x44)))))
 (let ((?x58 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x295)))
 (let ((?x186 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x87 (bvmul (_ bv4294967295 32) ?x186)))
 (let ((?x114 (bvneg ?x87)))
 (let (($x208 (= ?x114 ?x58)))
 (let (($x132 (= $x208 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x261 (bvuge ?x111 (_ bv1 32))))
 (let (($x113 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x23 (= $x113 $x261)))
 (let (($x60 (= ?x111 (_ bv0 32))))
 (let (($x172 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x301 (= $x172 $x60)))
 (let (($x194 (and (and (and (not $x172) (not $x113)) $x301) $x23)))
 (let (($x196 (= $x194 true)))
 (let (($x105 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x162 (not $x105)))
 (let (($x279 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x231 (not $x279)))
 (let (($x30 (and (and (and (= $x279 $x60) (= $x105 $x261)) $x231) $x162)))
 (let (($x304 (= $x30 true)))
 (let (($x96 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x52 (ite $x96 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x52 (_ bv1 32))))
 (let (($x264 (= $x105 $x119)))
 (let (($x53 (= ?x52 (_ bv0 32))))
 (let (($x17 (= $x279 $x53)))
 (let (($x107 (and (and (and $x17 $x264) $x231) $x162)))
 (let (($x109 (= $x107 true)))
 (let (($x133 (not $x113)))
 (let (($x297 (and (and (and (= $x172 $x53) (= $x113 $x119)) (not $x172)) $x133)))
 (let (($x102 (= $x297 true)))
 (let ((?x84 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x84)))
 (let (($x185 (= ?x153 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x82 (= $x185 true)))
 (let (($x193 (= $x82 true)))
 (let ((?x228 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x200 (= (_ bv0 3) ?x228)))
 (let (($x74 (= $x200 true)))
 (let (($x260 (= $x74 true)))
 (let (($x234 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x81 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x88 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x81) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x81))))
 (let (($x15 (and true $x88)))
 (let (($x38 (and $x88 $x15)))
 (let ((?x124 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x164))))
 (let (($x110 (= (bvand ?x286 (_ bv4294967288 32)) ?x286)))
 (let (($x158 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x213 (and $x158 $x110)))
 (let (($x167 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv4 32))) (bvult ?x124 (bvsub ?x124 (_ bv4 32))))))
 (let (($x70 (and (and (and (and (and $x15 $x167) $x158) $x213) $x38) $x234)))
 (let (($x45 (= true $x70)))
 (let (($x101 (not $x112)))
 (let (($x204 (=> $x101 $x45)))
 (let (($x10 (= $x204 true)))
 (let (($x46 (= $x10 true)))
 (let (($x166 (= $x46 true)))
 (let (($x130 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x19 (= $x130 true)))
 (let (($x165 (= $x19 true)))
 (let (($x7 (= $x165 true)))
 (let (($x288 (= $x101 true)))
 (let (($x226 (= $x288 true)))
 (let (($x227 (= $x226 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x36)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x262 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x129 $x262)))
 (let (($x230 (and $x137 $x126)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (and $x182 $x230)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x157)))))))
 (let (($x50 (and $x91 $x187)))
 (let (($x12 (= $x50 true)))
 (let (($x174 (= $x12 true)))
 (let (($x191 (= $x174 true)))
 (let (($x170 (and $x191 $x227)))
 (let (($x42 (and $x170 $x7)))
 (let (($x34 (and $x42 $x166)))
 (let (($x198 (and $x34 $x260)))
 (let (($x188 (and $x198 $x193)))
 (let (($x184 (and $x188 $x102)))
 (let (($x49 (and $x184 $x109)))
 (let (($x177 (and $x49 $x304)))
 (let (($x293 (and $x177 $x196)))
 (let (($x259 (and $x105 $x293)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x66 (and $x67 $x259)))
 (let (($x210 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x124 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x125 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x210)))))))
 (let (($x176 (=> (and $x101 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x9 $x210)))))))
 (let (($x178 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x16 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x209 (=> $x16 (or false (or false (and true (or $x48 $x178)))))))
 (let (($x225 (=> (and $x101 $x16) (or false (or false (and true (or $x48 $x178)))))))
 (let (($x106 (and $x225 $x176)))
 (let (($x199 (and $x106 $x66)))
 (let (($x232 (=> $x199 $x132)))
 (not $x232))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x44 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x154 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x295 (concat (select input.dst.llvm-mem ?x154) (concat ?x92 (concat ?x268 ?x44)))))
 (let ((?x58 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x295)))
 (let ((?x186 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x87 (bvmul (_ bv4294967295 32) ?x186)))
 (let ((?x114 (bvneg ?x87)))
 (let (($x208 (= ?x114 ?x58)))
 (let (($x132 (= $x208 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x261 (bvuge ?x111 (_ bv1 32))))
 (let (($x113 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x23 (= $x113 $x261)))
 (let (($x60 (= ?x111 (_ bv0 32))))
 (let (($x172 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x301 (= $x172 $x60)))
 (let (($x194 (and (and (and (not $x172) (not $x113)) $x301) $x23)))
 (let (($x196 (= $x194 true)))
 (let (($x105 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x162 (not $x105)))
 (let (($x279 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x231 (not $x279)))
 (let (($x30 (and (and (and (= $x279 $x60) (= $x105 $x261)) $x231) $x162)))
 (let (($x304 (= $x30 true)))
 (let (($x96 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x52 (ite $x96 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x52 (_ bv1 32))))
 (let (($x264 (= $x105 $x119)))
 (let (($x53 (= ?x52 (_ bv0 32))))
 (let (($x17 (= $x279 $x53)))
 (let (($x107 (and (and (and $x17 $x264) $x231) $x162)))
 (let (($x109 (= $x107 true)))
 (let (($x133 (not $x113)))
 (let (($x297 (and (and (and (= $x172 $x53) (= $x113 $x119)) (not $x172)) $x133)))
 (let (($x102 (= $x297 true)))
 (let ((?x84 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x84)))
 (let (($x185 (= ?x153 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x82 (= $x185 true)))
 (let (($x193 (= $x82 true)))
 (let ((?x228 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x200 (= (_ bv0 3) ?x228)))
 (let (($x74 (= $x200 true)))
 (let (($x260 (= $x74 true)))
 (let (($x234 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x81 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x88 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x81) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x81))))
 (let (($x15 (and true $x88)))
 (let (($x38 (and $x88 $x15)))
 (let ((?x124 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x164))))
 (let (($x110 (= (bvand ?x286 (_ bv4294967288 32)) ?x286)))
 (let (($x158 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x213 (and $x158 $x110)))
 (let (($x167 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv4 32))) (bvult ?x124 (bvsub ?x124 (_ bv4 32))))))
 (let (($x70 (and (and (and (and (and $x15 $x167) $x158) $x213) $x38) $x234)))
 (let (($x45 (= true $x70)))
 (let (($x101 (not $x112)))
 (let (($x204 (=> $x101 $x45)))
 (let (($x10 (= $x204 true)))
 (let (($x46 (= $x10 true)))
 (let (($x166 (= $x46 true)))
 (let (($x130 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x19 (= $x130 true)))
 (let (($x165 (= $x19 true)))
 (let (($x7 (= $x165 true)))
 (let (($x288 (= $x101 true)))
 (let (($x226 (= $x288 true)))
 (let (($x227 (= $x226 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x36)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x262 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x129 $x262)))
 (let (($x230 (and $x137 $x126)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (and $x182 $x230)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x91 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x157)))))))
 (let (($x50 (and $x91 $x187)))
 (let (($x12 (= $x50 true)))
 (let (($x174 (= $x12 true)))
 (let (($x191 (= $x174 true)))
 (let (($x170 (and $x191 $x227)))
 (let (($x42 (and $x170 $x7)))
 (let (($x34 (and $x42 $x166)))
 (let (($x198 (and $x34 $x260)))
 (let (($x188 (and $x198 $x193)))
 (let (($x184 (and $x188 $x102)))
 (let (($x49 (and $x184 $x109)))
 (let (($x177 (and $x49 $x304)))
 (let (($x293 (and $x177 $x196)))
 (let (($x259 (and $x105 $x293)))
 (let (($x67 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x66 (and $x67 $x259)))
 (let (($x210 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x124 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x125 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x210)))))))
 (let (($x176 (=> (and $x101 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x9 $x210)))))))
 (let (($x178 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x16 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x209 (=> $x16 (or false (or false (and true (or $x48 $x178)))))))
 (let (($x225 (=> (and $x101 $x16) (or false (or false (and true (or $x48 $x178)))))))
 (let (($x106 (and $x225 $x176)))
 (let (($x199 (and $x106 $x66)))
 (let (($x232 (=> $x199 $x132)))
 (not $x232))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x87 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x32 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x32) (concat ?x151 (concat ?x127 ?x87)))))
 (let ((?x305 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x201)))
 (let ((?x199 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x55 (bvmul (_ bv4294967295 32) ?x199)))
 (let ((?x186 (bvneg ?x55)))
 (let (($x295 (= ?x186 ?x305)))
 (let (($x58 (= $x295 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x261 (bvuge ?x111 (_ bv1 32))))
 (let (($x197 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x311 (= $x197 $x261)))
 (let (($x60 (= ?x111 (_ bv0 32))))
 (let (($x131 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x177 (= $x131 $x60)))
 (let (($x102 (= false false)))
 (let (($x184 (=> $x131 $x102)))
 (let (($x146 (and (and $x184 $x177) $x311)))
 (let (($x23 (= $x146 true)))
 (let (($x264 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x83 (=> $x264 $x102)))
 (let (($x35 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x72 (= $x35 $x261)))
 (let (($x94 (= $x264 $x60)))
 (let (($x229 (and (and $x94 $x72) $x83)))
 (let (($x30 (= $x229 true)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x179 (ite $x119 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x179 (_ bv1 32))))
 (let (($x231 (= $x35 $x133)))
 (let (($x31 (= ?x179 (_ bv0 32))))
 (let (($x33 (= $x264 $x31)))
 (let (($x107 (and (and $x33 $x231) $x83)))
 (let (($x109 (= $x107 true)))
 (let (($x279 (and (and (= $x131 $x31) (= $x197 $x133)) $x184)))
 (let (($x17 (= $x279 true)))
 (let ((?x193 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x188 (bvneg ?x193)))
 (let (($x172 (= ?x188 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x238 (= $x172 true)))
 (let (($x96 (= $x238 true)))
 (let ((?x11 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x122 (= (_ bv0 3) ?x11)))
 (let (($x84 (= $x122 true)))
 (let (($x153 (= $x84 true)))
 (let (($x70 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x15 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x76 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x15) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x15))))
 (let (($x167 (and true $x76)))
 (let (($x123 (and $x76 $x167)))
 (let ((?x16 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x21))))
 (let (($x38 (= (bvand ?x110 (_ bv4294967288 32)) ?x110)))
 (let (($x51 (= (bvand ?x16 (_ bv4294967292 32)) ?x16)))
 (let (($x78 (and $x51 $x38)))
 (let (($x278 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x16 (bvsub ?x16 (_ bv4 32))) (bvult ?x16 (bvsub ?x16 (_ bv4 32))))))
 (let (($x166 (and (and (and (and (and $x167 $x278) $x51) $x78) $x123) $x70)))
 (let (($x34 (= true $x166)))
 (let (($x101 (not $x112)))
 (let (($x270 (=> $x101 $x34)))
 (let (($x228 (= $x270 true)))
 (let (($x200 (= $x228 true)))
 (let (($x74 (= $x200 true)))
 (let (($x142 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x142 true)))
 (let (($x256 (= $x81 true)))
 (let (($x73 (= $x256 true)))
 (let (($x130 (= $x101 true)))
 (let (($x19 (= $x130 true)))
 (let (($x165 (= $x19 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x12)))
 (let ((?x230 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x230)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x126 $x187)))
 (let (($x191 (and $x50 $x174)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x149 $x191)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x183)))))))
 (let (($x226 (and $x36 $x288)))
 (let (($x227 (= $x226 true)))
 (let (($x170 (= $x227 true)))
 (let (($x136 (= $x170 true)))
 (let (($x7 (and $x136 $x165)))
 (let (($x88 (and $x7 $x73)))
 (let (($x260 (and $x88 $x74)))
 (let (($x147 (and $x260 $x153)))
 (let (($x52 (and $x147 $x96)))
 (let (($x105 (and $x52 $x17)))
 (let (($x49 (and $x105 $x109)))
 (let (($x304 (and $x49 $x30)))
 (let (($x194 (and $x304 $x23)))
 (let (($x196 (and $x35 $x194)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x293 (and $x203 $x196)))
 (let (($x128 (bvugt ?x16 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x233 (bvadd ?x16 (_ bv3 32))))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x233)))
 (let (($x67 (=> (bvule ?x16 (bvsub (bvadd ?x16 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x206 $x128)))))))
 (let (($x175 (=> (and $x101 (bvule ?x16 (bvsub (bvadd ?x16 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x206 $x128)))))))
 (let (($x156 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x99 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x135 (=> $x99 (or false (or false (and true (or $x26 $x156)))))))
 (let (($x115 (=> (and $x101 $x99) (or false (or false (and true (or $x26 $x156)))))))
 (let (($x13 (and $x115 $x175)))
 (let (($x259 (and $x13 $x293)))
 (let (($x208 (=> $x259 $x58)))
 (not $x208))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x87 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x32 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x32) (concat ?x151 (concat ?x127 ?x87)))))
 (let ((?x305 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x201)))
 (let ((?x199 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x55 (bvmul (_ bv4294967295 32) ?x199)))
 (let ((?x186 (bvneg ?x55)))
 (let (($x295 (= ?x186 ?x305)))
 (let (($x58 (= $x295 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x261 (bvuge ?x111 (_ bv1 32))))
 (let (($x197 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x311 (= $x197 $x261)))
 (let (($x60 (= ?x111 (_ bv0 32))))
 (let (($x131 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x177 (= $x131 $x60)))
 (let (($x102 (= false false)))
 (let (($x184 (=> $x131 $x102)))
 (let (($x146 (and (and $x184 $x177) $x311)))
 (let (($x23 (= $x146 true)))
 (let (($x264 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x83 (=> $x264 $x102)))
 (let (($x35 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x72 (= $x35 $x261)))
 (let (($x94 (= $x264 $x60)))
 (let (($x229 (and (and $x94 $x72) $x83)))
 (let (($x30 (= $x229 true)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x179 (ite $x119 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x179 (_ bv1 32))))
 (let (($x231 (= $x35 $x133)))
 (let (($x31 (= ?x179 (_ bv0 32))))
 (let (($x33 (= $x264 $x31)))
 (let (($x107 (and (and $x33 $x231) $x83)))
 (let (($x109 (= $x107 true)))
 (let (($x279 (and (and (= $x131 $x31) (= $x197 $x133)) $x184)))
 (let (($x17 (= $x279 true)))
 (let ((?x193 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x188 (bvneg ?x193)))
 (let (($x172 (= ?x188 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x238 (= $x172 true)))
 (let (($x96 (= $x238 true)))
 (let ((?x11 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x122 (= (_ bv0 3) ?x11)))
 (let (($x84 (= $x122 true)))
 (let (($x153 (= $x84 true)))
 (let (($x70 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x15 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x76 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x15) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x15))))
 (let (($x167 (and true $x76)))
 (let (($x123 (and $x76 $x167)))
 (let ((?x16 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x21))))
 (let (($x38 (= (bvand ?x110 (_ bv4294967288 32)) ?x110)))
 (let (($x51 (= (bvand ?x16 (_ bv4294967292 32)) ?x16)))
 (let (($x78 (and $x51 $x38)))
 (let (($x278 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x16 (bvsub ?x16 (_ bv4 32))) (bvult ?x16 (bvsub ?x16 (_ bv4 32))))))
 (let (($x166 (and (and (and (and (and $x167 $x278) $x51) $x78) $x123) $x70)))
 (let (($x34 (= true $x166)))
 (let (($x101 (not $x112)))
 (let (($x270 (=> $x101 $x34)))
 (let (($x228 (= $x270 true)))
 (let (($x200 (= $x228 true)))
 (let (($x74 (= $x200 true)))
 (let (($x142 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x142 true)))
 (let (($x256 (= $x81 true)))
 (let (($x73 (= $x256 true)))
 (let (($x130 (= $x101 true)))
 (let (($x19 (= $x130 true)))
 (let (($x165 (= $x19 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x12)))
 (let ((?x230 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x230)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x126 $x187)))
 (let (($x191 (and $x50 $x174)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x149 $x191)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x183)))))))
 (let (($x226 (and $x36 $x288)))
 (let (($x227 (= $x226 true)))
 (let (($x170 (= $x227 true)))
 (let (($x136 (= $x170 true)))
 (let (($x7 (and $x136 $x165)))
 (let (($x88 (and $x7 $x73)))
 (let (($x260 (and $x88 $x74)))
 (let (($x147 (and $x260 $x153)))
 (let (($x52 (and $x147 $x96)))
 (let (($x105 (and $x52 $x17)))
 (let (($x49 (and $x105 $x109)))
 (let (($x304 (and $x49 $x30)))
 (let (($x194 (and $x304 $x23)))
 (let (($x196 (and $x35 $x194)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x293 (and $x203 $x196)))
 (let (($x128 (bvugt ?x16 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x233 (bvadd ?x16 (_ bv3 32))))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x233)))
 (let (($x67 (=> (bvule ?x16 (bvsub (bvadd ?x16 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x206 $x128)))))))
 (let (($x175 (=> (and $x101 (bvule ?x16 (bvsub (bvadd ?x16 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x206 $x128)))))))
 (let (($x156 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x99 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x135 (=> $x99 (or false (or false (and true (or $x26 $x156)))))))
 (let (($x115 (=> (and $x101 $x99) (or false (or false (and true (or $x26 $x156)))))))
 (let (($x13 (and $x115 $x175)))
 (let (($x259 (and $x13 $x293)))
 (let (($x208 (=> $x259 $x58)))
 (not $x208))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x41c00000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x65fffff0)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x41c00000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x41c00003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv458712 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv458712 32) (_ bv255 8)) (_ bv458713 32) (_ bv255 8)) (_ bv458714 32) (_ bv255 8)) (_ bv458715 32) (_ bv255 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x296 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x232 (concat (select input.dst.llvm-mem ?x296) (concat ?x47 (concat ?x58 ?x305)))))
 (let ((?x181 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x232)))
 (let ((?x134 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x268 (bvmul (_ bv4294967295 32) ?x134)))
 (let ((?x201 (bvneg ?x268)))
 (let (($x43 (= ?x201 ?x181)))
 (let (($x54 (= $x43 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x30 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x301 (bvuge ?x30 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x66 (= $x184 $x301)))
 (let (($x304 (= ?x30 (_ bv0 32))))
 (let (($x27 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x259 (= $x27 $x304)))
 (let (($x186 (and (and (and (not $x184) (=> $x27 (= false false))) $x259) $x66)))
 (let (($x44 (= $x186 true)))
 (let (($x169 (= false false)))
 (let (($x107 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x60 (=> $x107 $x169)))
 (let (($x159 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x111 (not $x159)))
 (let (($x194 (and (and (and (= $x107 $x304) (= $x159 $x301)) $x111) $x60)))
 (let (($x196 (= $x194 true)))
 (let (($x133 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x297 (ite $x133 (_ bv0 32) (_ bv1 32))))
 (let (($x279 (bvuge ?x297 (_ bv1 32))))
 (let (($x49 (= $x159 $x279)))
 (let (($x71 (= ?x297 (_ bv0 32))))
 (let (($x109 (= $x107 $x71)))
 (let (($x72 (and (and (and $x109 $x49) $x111) $x60)))
 (let (($x190 (= $x72 true)))
 (let (($x264 (=> $x27 $x169)))
 (let (($x231 (and (and (and (= $x27 $x71) (= $x184 $x279)) (not $x184)) $x264)))
 (let (($x162 (= $x231 true)))
 (let ((?x96 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x96)))
 (let (($x131 (= ?x52 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x113 (= $x131 true)))
 (let (($x119 (= $x113 true)))
 (let ((?x185 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x82 (= (_ bv0 3) ?x185)))
 (let (($x193 (= $x82 true)))
 (let (($x188 (= $x193 true)))
 (let (($x166 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x167 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x158 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x167) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x167))))
 (let (($x278 (and true $x158)))
 (let (($x234 (and $x158 $x278)))
 (let ((?x99 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x211))))
 (let (($x123 (= (bvand ?x38 (_ bv4294967288 32)) ?x38)))
 (let (($x164 (= (bvand ?x99 (_ bv4294967292 32)) ?x99)))
 (let (($x46 (and $x164 $x123)))
 (let (($x204 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x99 (bvsub ?x99 (_ bv4 32))) (bvult ?x99 (bvsub ?x99 (_ bv4 32))))))
 (let (($x74 (and (and (and (and (and $x278 $x204) $x164) $x46) $x234) $x166)))
 (let (($x260 (= true $x74)))
 (let (($x101 (not $x112)))
 (let (($x198 (=> $x101 $x260)))
 (let (($x11 (= $x198 true)))
 (let (($x122 (= $x11 true)))
 (let (($x84 (= $x122 true)))
 (let (($x28 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x15 (= $x28 true)))
 (let (($x25 (= $x15 true)))
 (let (($x202 (= $x25 true)))
 (let (($x142 (= $x101 true)))
 (let (($x81 (= $x142 true)))
 (let (($x256 (= $x81 true)))
 (let ((?x227 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x227)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x288 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x174 $x288)))
 (let (($x136 (and $x226 $x170)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x182 $x136)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x157)))))))
 (let (($x19 (and $x12 $x130)))
 (let (($x165 (= $x19 true)))
 (let (($x7 (= $x165 true)))
 (let (($x42 (= $x7 true)))
 (let (($x73 (and $x42 $x256)))
 (let (($x76 (and $x73 $x202)))
 (let (($x153 (and $x76 $x84)))
 (let (($x316 (and $x153 $x188)))
 (let (($x179 (and $x316 $x119)))
 (let (($x83 (and $x179 $x162)))
 (let (($x229 (and $x83 $x190)))
 (let (($x293 (and $x229 $x196)))
 (let (($x92 (and $x293 $x44)))
 (let (($x151 (and $x159 $x92)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x114 (and $x64 $x151)))
 (let (($x176 (bvugt ?x99 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd ?x99 (_ bv3 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x203 (=> (bvule ?x99 (bvsub (bvadd ?x99 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x176)))))))
 (let (($x86 (=> (and $x101 (bvule ?x99 (bvsub (bvadd ?x99 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x125 $x176)))))))
 (let (($x225 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x296)))
 (let (($x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x210 (=> $x9 (or false (or false (and true (or $x209 $x225)))))))
 (let (($x154 (=> (and $x101 $x9) (or false (or false (and true (or $x209 $x225)))))))
 (let (($x233 (and $x154 $x86)))
 (let (($x127 (and $x233 $x114)))
 (let (($x148 (=> $x127 $x54)))
 (not $x148)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x296 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x232 (concat (select input.dst.llvm-mem ?x296) (concat ?x47 (concat ?x58 ?x305)))))
 (let ((?x181 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x232)))
 (let ((?x134 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x268 (bvmul (_ bv4294967295 32) ?x134)))
 (let ((?x201 (bvneg ?x268)))
 (let (($x43 (= ?x201 ?x181)))
 (let (($x54 (= $x43 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x30 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x301 (bvuge ?x30 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x66 (= $x184 $x301)))
 (let (($x304 (= ?x30 (_ bv0 32))))
 (let (($x27 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x259 (= $x27 $x304)))
 (let (($x186 (and (and (and (not $x184) (=> $x27 (= false false))) $x259) $x66)))
 (let (($x44 (= $x186 true)))
 (let (($x169 (= false false)))
 (let (($x107 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x60 (=> $x107 $x169)))
 (let (($x159 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x111 (not $x159)))
 (let (($x194 (and (and (and (= $x107 $x304) (= $x159 $x301)) $x111) $x60)))
 (let (($x196 (= $x194 true)))
 (let (($x133 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x297 (ite $x133 (_ bv0 32) (_ bv1 32))))
 (let (($x279 (bvuge ?x297 (_ bv1 32))))
 (let (($x49 (= $x159 $x279)))
 (let (($x71 (= ?x297 (_ bv0 32))))
 (let (($x109 (= $x107 $x71)))
 (let (($x72 (and (and (and $x109 $x49) $x111) $x60)))
 (let (($x190 (= $x72 true)))
 (let (($x264 (=> $x27 $x169)))
 (let (($x231 (and (and (and (= $x27 $x71) (= $x184 $x279)) (not $x184)) $x264)))
 (let (($x162 (= $x231 true)))
 (let ((?x96 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x96)))
 (let (($x131 (= ?x52 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x113 (= $x131 true)))
 (let (($x119 (= $x113 true)))
 (let ((?x185 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x82 (= (_ bv0 3) ?x185)))
 (let (($x193 (= $x82 true)))
 (let (($x188 (= $x193 true)))
 (let (($x166 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x167 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x158 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x167) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x167))))
 (let (($x278 (and true $x158)))
 (let (($x234 (and $x158 $x278)))
 (let ((?x99 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x211))))
 (let (($x123 (= (bvand ?x38 (_ bv4294967288 32)) ?x38)))
 (let (($x164 (= (bvand ?x99 (_ bv4294967292 32)) ?x99)))
 (let (($x46 (and $x164 $x123)))
 (let (($x204 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x99 (bvsub ?x99 (_ bv4 32))) (bvult ?x99 (bvsub ?x99 (_ bv4 32))))))
 (let (($x74 (and (and (and (and (and $x278 $x204) $x164) $x46) $x234) $x166)))
 (let (($x260 (= true $x74)))
 (let (($x101 (not $x112)))
 (let (($x198 (=> $x101 $x260)))
 (let (($x11 (= $x198 true)))
 (let (($x122 (= $x11 true)))
 (let (($x84 (= $x122 true)))
 (let (($x28 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x15 (= $x28 true)))
 (let (($x25 (= $x15 true)))
 (let (($x202 (= $x25 true)))
 (let (($x142 (= $x101 true)))
 (let (($x81 (= $x142 true)))
 (let (($x256 (= $x81 true)))
 (let ((?x227 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x227)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x288 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x174 $x288)))
 (let (($x136 (and $x226 $x170)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x182 $x136)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x157)))))))
 (let (($x19 (and $x12 $x130)))
 (let (($x165 (= $x19 true)))
 (let (($x7 (= $x165 true)))
 (let (($x42 (= $x7 true)))
 (let (($x73 (and $x42 $x256)))
 (let (($x76 (and $x73 $x202)))
 (let (($x153 (and $x76 $x84)))
 (let (($x316 (and $x153 $x188)))
 (let (($x179 (and $x316 $x119)))
 (let (($x83 (and $x179 $x162)))
 (let (($x229 (and $x83 $x190)))
 (let (($x293 (and $x229 $x196)))
 (let (($x92 (and $x293 $x44)))
 (let (($x151 (and $x159 $x92)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x114 (and $x64 $x151)))
 (let (($x176 (bvugt ?x99 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd ?x99 (_ bv3 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x203 (=> (bvule ?x99 (bvsub (bvadd ?x99 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x176)))))))
 (let (($x86 (=> (and $x101 (bvule ?x99 (bvsub (bvadd ?x99 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x125 $x176)))))))
 (let (($x225 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x296)))
 (let (($x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x210 (=> $x9 (or false (or false (and true (or $x209 $x225)))))))
 (let (($x154 (=> (and $x101 $x9) (or false (or false (and true (or $x209 $x225)))))))
 (let (($x233 (and $x154 $x86)))
 (let (($x127 (and $x233 $x114)))
 (let (($x148 (=> $x127 $x54)))
 (not $x148)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 82
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x290 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x342 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x124 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem ?x124) (concat ?x22 (concat ?x342 ?x290)))))
 (let ((?x362 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x247)))
 (let ((?x363 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x364 (bvmul (_ bv4294967295 32) ?x363)))
 (let ((?x385 (bvneg ?x364)))
 (let (($x365 (= ?x385 ?x362)))
 (let (($x383 (= $x365 true)))
 (let ((?x26 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv1 32))) (select input.dst.llvm-mem ?x26))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv2 32))) ?x244))))
 (let ((?x300 (bvadd ?x215 (_ bv4 32))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem ?x300))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv2 32))) ?x93))))
 (let (($x374 (= (_ bv0 32) ?x103)))
 (let ((?x321 (ite $x374 (_ bv0 32) (_ bv1 32))))
 (let (($x319 (bvuge ?x321 (_ bv1 32))))
 (let (($x220 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x371 (= $x220 $x319)))
 (let (($x87 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x35 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x95 (and $x35 $x87)))
 (let (($x372 (=> $x95 $x371)))
 (let (($x361 (= ?x321 (_ bv0 32))))
 (let (($x91 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x357 (= $x91 $x361)))
 (let (($x359 (=> $x95 $x357)))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv1 32))) (select input.dst.llvm-mem ?x215))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv2 32))) ?x246))))
 (let (($x358 (= input.spec-%var-l-1.2.1.2.0 ?x253)))
 (let (($x376 (=> $x95 $x358)))
 (let (($x251 (= (_ bv0 32) ?x215)))
 (let ((?x281 (ite $x251 (_ bv0 32) (_ bv1 32))))
 (let (($x329 (bvuge ?x281 (_ bv1 32))))
 (let (($x348 (= $x87 $x329)))
 (let (($x89 (=> $x35 $x348)))
 (let (($x277 (= ?x281 (_ bv0 32))))
 (let (($x304 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x354 (= $x304 $x277)))
 (let (($x370 (=> $x35 $x354)))
 (let (($x352 (= input.spec-%var-l-1.2.0 ?x247)))
 (let (($x41 (=> $x35 $x352)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x309 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x141 (bvuge ?x309 (_ bv1 32))))
 (let (($x353 (= $x35 $x141)))
 (let (($x313 (= ?x309 (_ bv0 32))))
 (let (($x102 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x447 (= $x102 $x313)))
 (let (($x231 (= false false)))
 (let (($x114 (and $x35 $x304)))
 (let (($x127 (=> $x114 $x231)))
 (let (($x162 (=> $x102 $x231)))
 (let (($x355 (and (and (and (and (and (and $x162 $x127) $x447) $x353) $x41) $x370) $x89)))
 (let (($x448 (and (and (and $x355 $x376) $x359) $x372)))
 (let (($x360 (= $x448 true)))
 (let (($x252 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x65 (= $x252 $x361)))
 (let (($x275 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x262 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x308 (and $x262 $x275)))
 (let (($x333 (=> $x308 $x65)))
 (let (($x335 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x150 (= $x335 $x319)))
 (let (($x327 (=> $x308 $x150)))
 (let (($x254 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x253)))
 (let (($x347 (=> $x308 $x254)))
 (let (($x331 (= $x275 $x329)))
 (let (($x291 (=> $x262 $x331)))
 (let (($x214 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x377 (= $x214 $x277)))
 (let (($x315 (=> $x262 $x377)))
 (let (($x345 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x247)))
 (let (($x366 (=> $x262 $x345)))
 (let (($x240 (and $x262 $x214)))
 (let (($x6 (=> $x240 $x231)))
 (let (($x245 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x443 (=> $x245 $x231)))
 (let (($x320 (and (and (and (and (and (= $x245 $x313) (= $x262 $x141)) $x443) $x6) $x366) $x315)))
 (let (($x328 (and (and (and (and $x320 $x291) $x347) $x327) $x333)))
 (let (($x334 (= $x328 true)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x23 (concat ?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x55 (concat ?x259 (concat ?x196 ?x23))))
 (let ((?x57 (bvadd ?x55 (_ bv4 32))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem ?x57))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv2 32))) ?x283))))
 (let (($x269 (= (_ bv0 32) ?x195)))
 (let ((?x61 (ite $x269 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (= ?x61 (_ bv0 32))))
 (let (($x326 (= $x252 $x192)))
 (let (($x145 (=> $x308 $x326)))
 (let (($x267 (bvuge ?x61 (_ bv1 32))))
 (let (($x325 (= $x335 $x267)))
 (let (($x318 (=> $x308 $x325)))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem ?x55))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv2 32))) ?x305))))
 (let (($x344 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x54)))
 (let (($x341 (=> $x308 $x344)))
 (let (($x66 (= (_ bv0 32) ?x55)))
 (let ((?x186 (ite $x66 (_ bv0 32) (_ bv1 32))))
 (let (($x134 (bvuge ?x186 (_ bv1 32))))
 (let (($x40 (= $x275 $x134)))
 (let (($x242 (=> $x262 $x40)))
 (let (($x44 (= ?x186 (_ bv0 32))))
 (let (($x280 (= $x214 $x44)))
 (let (($x100 (=> $x262 $x280)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x159)))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x111)))
 (let (($x161 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x72)))
 (let (($x24 (=> $x262 $x161)))
 (let (($x279 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x17 (ite $x279 (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge ?x17 (_ bv1 32))))
 (let (($x152 (= $x262 $x169)))
 (let (($x33 (= ?x17 (_ bv0 32))))
 (let (($x292 (= $x245 $x33)))
 (let (($x302 (and (and (and (and (and (and $x292 $x152) $x443) $x24) $x100) $x6) $x242)))
 (let (($x222 (and (and (and $x302 $x341) $x318) $x145)))
 (let (($x221 (= $x222 true)))
 (let (($x287 (= $x220 $x267)))
 (let (($x317 (=> $x95 $x287)))
 (let (($x173 (= $x91 $x192)))
 (let (($x306 (=> $x95 $x173)))
 (let (($x148 (= input.spec-%var-l-1.2.1.2.0 ?x54)))
 (let (($x312 (=> $x95 $x148)))
 (let (($x268 (= $x87 $x134)))
 (let (($x201 (=> $x35 $x268)))
 (let (($x92 (= $x304 $x44)))
 (let (($x151 (=> $x35 $x92)))
 (let (($x190 (= input.spec-%var-l-1.2.0 ?x72)))
 (let (($x229 (=> $x35 $x190)))
 (let (($x239 (and (and (and (and (and (= $x102 $x33) (= $x35 $x169)) $x162) $x229) $x151) $x127)))
 (let (($x5 (and (and (and (and $x239 $x201) $x312) $x306) $x317)))
 (let (($x272 (= $x5 true)))
 (let ((?x119 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x179 (bvneg ?x119)))
 (let (($x27 (= ?x179 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x197 (= $x27 true)))
 (let (($x133 (= $x197 true)))
 (let ((?x172 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x238 (= (_ bv0 3) ?x172)))
 (let (($x96 (= $x238 true)))
 (let (($x52 (= $x96 true)))
 (let (($x74 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x278 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x51 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x278) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x278))))
 (let (($x204 (and true $x51)))
 (let (($x70 (and $x51 $x204)))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x286))))
 (let (($x234 (= (bvand ?x123 (_ bv4294967288 32)) ?x123)))
 (let (($x21 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x200 (and $x21 $x234)))
 (let (($x270 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x84 (and (and (and (and (and $x204 $x270) $x21) $x200) $x70) $x74)))
 (let (($x153 (= true $x84)))
 (let (($x101 (not $x112)))
 (let (($x147 (=> $x101 $x153)))
 (let (($x185 (= $x147 true)))
 (let (($x82 (= $x185 true)))
 (let (($x193 (= $x82 true)))
 (let (($x212 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x167 (= $x212 true)))
 (let (($x117 (= $x167 true)))
 (let (($x168 (= $x117 true)))
 (let (($x28 (= $x101 true)))
 (let (($x15 (= $x28 true)))
 (let (($x25 (= $x15 true)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x165)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x136)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x170 $x130)))
 (let (($x42 (and $x19 $x7)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x149 $x42)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x227 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x183)))))))
 (let (($x81 (and $x227 $x142)))
 (let (($x256 (= $x81 true)))
 (let (($x73 (= $x256 true)))
 (let (($x88 (= $x73 true)))
 (let (($x202 (and $x88 $x25)))
 (let (($x158 (and $x202 $x168)))
 (let (($x188 (and $x158 $x193)))
 (let (($x53 (and $x188 $x52)))
 (let (($x297 (and $x53 $x133)))
 (let (($x155 (and $x297 $x272)))
 (let (($x282 (and $x155 $x221)))
 (let (($x336 (and $x282 $x334)))
 (let (($x450 (and $x336 $x360)))
 (let (($x369 (and $x262 $x450)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x367 (and $x189 $x369)))
 (let (($x175 (bvugt ?x9 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x9 (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x64 (=> (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x175)))))))
 (let (($x104 (=> (and $x101 (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x67 $x175)))))))
 (let (($x115 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x128 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x26 (_ bv1 32))) (or false (or false (and true (or $x135 $x115)))))))
 (let (($x32 (=> (and $x101 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x26 (_ bv1 32)))) (or false (or false (and true (or $x135 $x115)))))))
 (let (($x68 (and $x32 $x104)))
 (let (($x120 (and $x68 $x367)))
 (let (($x368 (=> $x120 $x383)))
 (not $x368))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x290 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x342 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x124 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem ?x124) (concat ?x22 (concat ?x342 ?x290)))))
 (let ((?x362 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x247)))
 (let ((?x363 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x364 (bvmul (_ bv4294967295 32) ?x363)))
 (let ((?x385 (bvneg ?x364)))
 (let (($x365 (= ?x385 ?x362)))
 (let (($x383 (= $x365 true)))
 (let ((?x26 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv1 32))) (select input.dst.llvm-mem ?x26))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv2 32))) ?x244))))
 (let ((?x300 (bvadd ?x215 (_ bv4 32))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem ?x300))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv2 32))) ?x93))))
 (let (($x374 (= (_ bv0 32) ?x103)))
 (let ((?x321 (ite $x374 (_ bv0 32) (_ bv1 32))))
 (let (($x319 (bvuge ?x321 (_ bv1 32))))
 (let (($x220 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x371 (= $x220 $x319)))
 (let (($x87 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x35 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x95 (and $x35 $x87)))
 (let (($x372 (=> $x95 $x371)))
 (let (($x361 (= ?x321 (_ bv0 32))))
 (let (($x91 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x357 (= $x91 $x361)))
 (let (($x359 (=> $x95 $x357)))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv1 32))) (select input.dst.llvm-mem ?x215))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv2 32))) ?x246))))
 (let (($x358 (= input.spec-%var-l-1.2.1.2.0 ?x253)))
 (let (($x376 (=> $x95 $x358)))
 (let (($x251 (= (_ bv0 32) ?x215)))
 (let ((?x281 (ite $x251 (_ bv0 32) (_ bv1 32))))
 (let (($x329 (bvuge ?x281 (_ bv1 32))))
 (let (($x348 (= $x87 $x329)))
 (let (($x89 (=> $x35 $x348)))
 (let (($x277 (= ?x281 (_ bv0 32))))
 (let (($x304 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x354 (= $x304 $x277)))
 (let (($x370 (=> $x35 $x354)))
 (let (($x352 (= input.spec-%var-l-1.2.0 ?x247)))
 (let (($x41 (=> $x35 $x352)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x309 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x141 (bvuge ?x309 (_ bv1 32))))
 (let (($x353 (= $x35 $x141)))
 (let (($x313 (= ?x309 (_ bv0 32))))
 (let (($x102 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x447 (= $x102 $x313)))
 (let (($x231 (= false false)))
 (let (($x114 (and $x35 $x304)))
 (let (($x127 (=> $x114 $x231)))
 (let (($x162 (=> $x102 $x231)))
 (let (($x355 (and (and (and (and (and (and $x162 $x127) $x447) $x353) $x41) $x370) $x89)))
 (let (($x448 (and (and (and $x355 $x376) $x359) $x372)))
 (let (($x360 (= $x448 true)))
 (let (($x252 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x65 (= $x252 $x361)))
 (let (($x275 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x262 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x308 (and $x262 $x275)))
 (let (($x333 (=> $x308 $x65)))
 (let (($x335 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x150 (= $x335 $x319)))
 (let (($x327 (=> $x308 $x150)))
 (let (($x254 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x253)))
 (let (($x347 (=> $x308 $x254)))
 (let (($x331 (= $x275 $x329)))
 (let (($x291 (=> $x262 $x331)))
 (let (($x214 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x377 (= $x214 $x277)))
 (let (($x315 (=> $x262 $x377)))
 (let (($x345 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x247)))
 (let (($x366 (=> $x262 $x345)))
 (let (($x240 (and $x262 $x214)))
 (let (($x6 (=> $x240 $x231)))
 (let (($x245 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x443 (=> $x245 $x231)))
 (let (($x320 (and (and (and (and (and (= $x245 $x313) (= $x262 $x141)) $x443) $x6) $x366) $x315)))
 (let (($x328 (and (and (and (and $x320 $x291) $x347) $x327) $x333)))
 (let (($x334 (= $x328 true)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x23 (concat ?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x55 (concat ?x259 (concat ?x196 ?x23))))
 (let ((?x57 (bvadd ?x55 (_ bv4 32))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem ?x57))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv2 32))) ?x283))))
 (let (($x269 (= (_ bv0 32) ?x195)))
 (let ((?x61 (ite $x269 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (= ?x61 (_ bv0 32))))
 (let (($x326 (= $x252 $x192)))
 (let (($x145 (=> $x308 $x326)))
 (let (($x267 (bvuge ?x61 (_ bv1 32))))
 (let (($x325 (= $x335 $x267)))
 (let (($x318 (=> $x308 $x325)))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem ?x55))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv2 32))) ?x305))))
 (let (($x344 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x54)))
 (let (($x341 (=> $x308 $x344)))
 (let (($x66 (= (_ bv0 32) ?x55)))
 (let ((?x186 (ite $x66 (_ bv0 32) (_ bv1 32))))
 (let (($x134 (bvuge ?x186 (_ bv1 32))))
 (let (($x40 (= $x275 $x134)))
 (let (($x242 (=> $x262 $x40)))
 (let (($x44 (= ?x186 (_ bv0 32))))
 (let (($x280 (= $x214 $x44)))
 (let (($x100 (=> $x262 $x280)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x159)))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x111)))
 (let (($x161 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x72)))
 (let (($x24 (=> $x262 $x161)))
 (let (($x279 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x17 (ite $x279 (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge ?x17 (_ bv1 32))))
 (let (($x152 (= $x262 $x169)))
 (let (($x33 (= ?x17 (_ bv0 32))))
 (let (($x292 (= $x245 $x33)))
 (let (($x302 (and (and (and (and (and (and $x292 $x152) $x443) $x24) $x100) $x6) $x242)))
 (let (($x222 (and (and (and $x302 $x341) $x318) $x145)))
 (let (($x221 (= $x222 true)))
 (let (($x287 (= $x220 $x267)))
 (let (($x317 (=> $x95 $x287)))
 (let (($x173 (= $x91 $x192)))
 (let (($x306 (=> $x95 $x173)))
 (let (($x148 (= input.spec-%var-l-1.2.1.2.0 ?x54)))
 (let (($x312 (=> $x95 $x148)))
 (let (($x268 (= $x87 $x134)))
 (let (($x201 (=> $x35 $x268)))
 (let (($x92 (= $x304 $x44)))
 (let (($x151 (=> $x35 $x92)))
 (let (($x190 (= input.spec-%var-l-1.2.0 ?x72)))
 (let (($x229 (=> $x35 $x190)))
 (let (($x239 (and (and (and (and (and (= $x102 $x33) (= $x35 $x169)) $x162) $x229) $x151) $x127)))
 (let (($x5 (and (and (and (and $x239 $x201) $x312) $x306) $x317)))
 (let (($x272 (= $x5 true)))
 (let ((?x119 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x179 (bvneg ?x119)))
 (let (($x27 (= ?x179 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x197 (= $x27 true)))
 (let (($x133 (= $x197 true)))
 (let ((?x172 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x238 (= (_ bv0 3) ?x172)))
 (let (($x96 (= $x238 true)))
 (let (($x52 (= $x96 true)))
 (let (($x74 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x278 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x51 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x278) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x278))))
 (let (($x204 (and true $x51)))
 (let (($x70 (and $x51 $x204)))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x286))))
 (let (($x234 (= (bvand ?x123 (_ bv4294967288 32)) ?x123)))
 (let (($x21 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x200 (and $x21 $x234)))
 (let (($x270 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x84 (and (and (and (and (and $x204 $x270) $x21) $x200) $x70) $x74)))
 (let (($x153 (= true $x84)))
 (let (($x101 (not $x112)))
 (let (($x147 (=> $x101 $x153)))
 (let (($x185 (= $x147 true)))
 (let (($x82 (= $x185 true)))
 (let (($x193 (= $x82 true)))
 (let (($x212 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x167 (= $x212 true)))
 (let (($x117 (= $x167 true)))
 (let (($x168 (= $x117 true)))
 (let (($x28 (= $x101 true)))
 (let (($x15 (= $x28 true)))
 (let (($x25 (= $x15 true)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x165)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x136)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x170 $x130)))
 (let (($x42 (and $x19 $x7)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x149 $x42)))
 (let (($x183 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x227 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x183)))))))
 (let (($x81 (and $x227 $x142)))
 (let (($x256 (= $x81 true)))
 (let (($x73 (= $x256 true)))
 (let (($x88 (= $x73 true)))
 (let (($x202 (and $x88 $x25)))
 (let (($x158 (and $x202 $x168)))
 (let (($x188 (and $x158 $x193)))
 (let (($x53 (and $x188 $x52)))
 (let (($x297 (and $x53 $x133)))
 (let (($x155 (and $x297 $x272)))
 (let (($x282 (and $x155 $x221)))
 (let (($x336 (and $x282 $x334)))
 (let (($x450 (and $x336 $x360)))
 (let (($x369 (and $x262 $x450)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x367 (and $x189 $x369)))
 (let (($x175 (bvugt ?x9 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x9 (_ bv3 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x64 (=> (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x67 $x175)))))))
 (let (($x104 (=> (and $x101 (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x67 $x175)))))))
 (let (($x115 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x128 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x26 (_ bv1 32))) (or false (or false (and true (or $x135 $x115)))))))
 (let (($x32 (=> (and $x101 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x26 (_ bv1 32)))) (or false (or false (and true (or $x135 $x115)))))))
 (let (($x68 (and $x32 $x104)))
 (let (($x120 (and $x68 $x367)))
 (let (($x368 (=> $x120 $x383)))
 (not $x368))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 83
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x70))))
 (let (($x55 (bvule ?x147 (_ bv4294967294 32))))
 (let (($x66 (= $x55 true)))
 (let (($x186 (= $x66 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x72 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x265 (bvuge ?x72 (_ bv1 32))))
 (let (($x162 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x194 (= $x162 $x265)))
 (let (($x190 (= ?x72 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x259 (= $x105 $x190)))
 (let (($x196 (and $x259 $x194)))
 (let (($x311 (= $x196 true)))
 (let (($x187 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x30 (= $x187 $x265)))
 (let (($x94 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x229 (= $x94 $x190)))
 (let (($x304 (and $x229 $x30)))
 (let (($x177 (= $x304 true)))
 (let (($x169 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x264 (ite $x169 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x264 (_ bv1 32))))
 (let (($x109 (= $x187 $x37)))
 (let (($x310 (= ?x264 (_ bv0 32))))
 (let (($x107 (= $x94 $x310)))
 (let (($x137 (and $x107 $x109)))
 (let (($x159 (= $x137 true)))
 (let (($x83 (= $x162 $x37)))
 (let (($x231 (= $x105 $x310)))
 (let (($x261 (and $x231 $x83)))
 (let (($x60 (= $x261 true)))
 (let ((?x71 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x102 (= (_ bv0 3) ?x71)))
 (let (($x184 (= $x102 true)))
 (let (($x279 (= $x184 true)))
 (let (($x238 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x21 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x21) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x21))))
 (let (($x213 (and true $x211)))
 (let (($x316 (and $x211 $x213)))
 (let (($x193 (= (bvand ?x147 (_ bv4294967288 32)) ?x147)))
 (let (($x46 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x188 (and $x46 $x193)))
 (let (($x286 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv4 32))) (bvult ?x206 (bvsub ?x206 (_ bv4 32))))))
 (let (($x113 (and (and (and (and (and $x213 $x286) $x46) $x188) $x316) $x238)))
 (let (($x119 (= true $x113)))
 (let (($x101 (not $x112)))
 (let (($x179 (=> $x101 $x119)))
 (let (($x31 (= $x179 true)))
 (let (($x27 (= $x31 true)))
 (let (($x197 (= $x27 true)))
 (let (($x164 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x270 (= $x164 true)))
 (let (($x260 (= $x270 true)))
 (let (($x14 (= $x260 true)))
 (let (($x51 (= $x101 true)))
 (let (($x204 (= $x51 true)))
 (let (($x18 (= $x204 true)))
 (let ((?x212 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x212)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x15 $x202)))
 (let (($x117 (and $x76 $x167)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x136 $x117)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x42)))))))
 (let (($x158 (and $x28 $x168)))
 (let (($x207 (= $x158 true)))
 (let (($x278 (= $x207 true)))
 (let (($x45 (= $x278 true)))
 (let ((?x182 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x182)))
 (let (($x288 (= ?x174 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x227 (= $x288 true)))
 (let (($x157 (= $x227 true)))
 (let (($x224 (and $x157 $x45)))
 (let (($x34 (and $x224 $x18)))
 (let (($x205 (and $x34 $x14)))
 (let (($x133 (and $x205 $x197)))
 (let (($x17 (and $x133 $x279)))
 (let (($x49 (and $x17 $x60)))
 (let (($x111 (and $x49 $x159)))
 (let (($x199 (and $x111 $x177)))
 (let (($x146 (and $x199 $x311)))
 (let (($x301 (and $x187 $x146)))
 (let (($x230 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x23 (and $x230 $x301)))
 (let (($x86 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x206 (_ bv3 32))))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x189 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x86)))))))
 (let (($x85 (=> (and $x101 (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x203 $x86)))))))
 (let (($x154 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x125 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x176 (=> $x125 (or false (or false (and true (or $x210 $x154)))))))
 (let (($x296 (=> (and $x101 $x125) (or false (or false (and true (or $x210 $x154)))))))
 (let (($x106 (and $x296 $x85)))
 (let (($x293 (and $x106 $x23)))
 (let (($x44 (=> $x293 $x186)))
 (not $x44)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x70))))
 (let (($x55 (bvule ?x147 (_ bv4294967294 32))))
 (let (($x66 (= $x55 true)))
 (let (($x186 (= $x66 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x72 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x265 (bvuge ?x72 (_ bv1 32))))
 (let (($x162 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x194 (= $x162 $x265)))
 (let (($x190 (= ?x72 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x259 (= $x105 $x190)))
 (let (($x196 (and $x259 $x194)))
 (let (($x311 (= $x196 true)))
 (let (($x187 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x30 (= $x187 $x265)))
 (let (($x94 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x229 (= $x94 $x190)))
 (let (($x304 (and $x229 $x30)))
 (let (($x177 (= $x304 true)))
 (let (($x169 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x264 (ite $x169 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x264 (_ bv1 32))))
 (let (($x109 (= $x187 $x37)))
 (let (($x310 (= ?x264 (_ bv0 32))))
 (let (($x107 (= $x94 $x310)))
 (let (($x137 (and $x107 $x109)))
 (let (($x159 (= $x137 true)))
 (let (($x83 (= $x162 $x37)))
 (let (($x231 (= $x105 $x310)))
 (let (($x261 (and $x231 $x83)))
 (let (($x60 (= $x261 true)))
 (let ((?x71 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x102 (= (_ bv0 3) ?x71)))
 (let (($x184 (= $x102 true)))
 (let (($x279 (= $x184 true)))
 (let (($x238 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x21 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x21) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x21))))
 (let (($x213 (and true $x211)))
 (let (($x316 (and $x211 $x213)))
 (let (($x193 (= (bvand ?x147 (_ bv4294967288 32)) ?x147)))
 (let (($x46 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x188 (and $x46 $x193)))
 (let (($x286 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv4 32))) (bvult ?x206 (bvsub ?x206 (_ bv4 32))))))
 (let (($x113 (and (and (and (and (and $x213 $x286) $x46) $x188) $x316) $x238)))
 (let (($x119 (= true $x113)))
 (let (($x101 (not $x112)))
 (let (($x179 (=> $x101 $x119)))
 (let (($x31 (= $x179 true)))
 (let (($x27 (= $x31 true)))
 (let (($x197 (= $x27 true)))
 (let (($x164 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x270 (= $x164 true)))
 (let (($x260 (= $x270 true)))
 (let (($x14 (= $x260 true)))
 (let (($x51 (= $x101 true)))
 (let (($x204 (= $x51 true)))
 (let (($x18 (= $x204 true)))
 (let ((?x212 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x212)))
 (let ((?x25 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x25)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x15 $x202)))
 (let (($x117 (and $x76 $x167)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x136 $x117)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x42)))))))
 (let (($x158 (and $x28 $x168)))
 (let (($x207 (= $x158 true)))
 (let (($x278 (= $x207 true)))
 (let (($x45 (= $x278 true)))
 (let ((?x182 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x174 (bvneg ?x182)))
 (let (($x288 (= ?x174 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x227 (= $x288 true)))
 (let (($x157 (= $x227 true)))
 (let (($x224 (and $x157 $x45)))
 (let (($x34 (and $x224 $x18)))
 (let (($x205 (and $x34 $x14)))
 (let (($x133 (and $x205 $x197)))
 (let (($x17 (and $x133 $x279)))
 (let (($x49 (and $x17 $x60)))
 (let (($x111 (and $x49 $x159)))
 (let (($x199 (and $x111 $x177)))
 (let (($x146 (and $x199 $x311)))
 (let (($x301 (and $x187 $x146)))
 (let (($x230 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x23 (and $x230 $x301)))
 (let (($x86 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x206 (_ bv3 32))))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x189 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x86)))))))
 (let (($x85 (=> (and $x101 (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x203 $x86)))))))
 (let (($x154 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x125 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x176 (=> $x125 (or false (or false (and true (or $x210 $x154)))))))
 (let (($x296 (=> (and $x101 $x125) (or false (or false (and true (or $x210 $x154)))))))
 (let (($x106 (and $x296 $x85)))
 (let (($x293 (and $x106 $x23)))
 (let (($x44 (=> $x293 $x186)))
 (not $x44)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 84
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2214X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2204X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2214X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x145 (concat ?x326 (select input.dst.llvm-mem (bvadd input.ind-%var2214X (_ bv4 32))))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2214X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2214X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x298 (concat ?x313 (concat ?x221 ?x145))))
 (let (($x141 (= ?x298 ?x298)))
 (let ((?x135 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x152))))
 (let (($x243 (= (_ bv0 32) ?x24)))
 (let ((?x214 (ite $x243 (_ bv0 32) (_ bv1 32))))
 (let (($x240 (bvuge ?x214 (_ bv1 32))))
 (let (($x144 (=> $x240 $x141)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2214X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2214X))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2214X (_ bv2 32))) ?x302)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2214X (_ bv3 32))) ?x344)))
 (let (($x335 (= ?x263 ?x263)))
 (let (($x325 (=> $x240 $x335)))
 (let ((?x125 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x234))))
 (let (($x208 (= (_ bv0 32) ?x193)))
 (let ((?x116 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (bvuge ?x116 (_ bv1 32))))
 (let (($x6 (= $x240 $x305)))
 (let (($x295 (= ?x116 (_ bv0 32))))
 (let (($x280 (= ?x214 (_ bv0 32))))
 (let (($x248 (= $x280 $x295)))
 (let (($x97 (and (and (and (= ?x24 ?x193) (=> $x280 (= false false))) $x248) $x6)))
 (let (($x249 (and (and $x97 $x325) $x144)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2204X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x269 (concat ?x195 (select input.dst.llvm-mem (bvadd input.ind-%var2204X (_ bv4 32))))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2204X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2204X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x220 (concat ?x307 (concat ?x192 ?x269))))
 (let (($x267 (= ?x220 ?x220)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x77 (concat ?x151 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x268 (concat ?x134 (concat ?x127 ?x77))))
 (let (($x219 (= (_ bv0 32) ?x268)))
 (let ((?x95 (ite $x219 (_ bv0 32) (_ bv1 32))))
 (let (($x47 (bvuge ?x95 (_ bv1 32))))
 (let (($x287 (=> $x47 $x267)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2204X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2204X))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2204X (_ bv2 32))) ?x118)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2204X (_ bv3 32))) ?x285)))
 (let (($x139 (= ?x271 ?x271)))
 (let (($x284 (=> $x47 $x139)))
 (let (($x232 (= $x47 $x305)))
 (let (($x132 (= ?x95 (_ bv0 32))))
 (let (($x58 (= $x132 $x295)))
 (let (($x272 (and (and (and (= ?x268 ?x193) (=> $x132 (= false false))) $x58) $x232)))
 (let (($x50 (and (and $x272 $x284) $x287)))
 (let (($x92 (not true)))
 (let (($x340 (or (or $x92 $x50) $x249)))
 (let (($x44 (= true true)))
 (let (($x342 (and $x44 $x340)))
 (let (($x290 (= $x342 true)))
 (let (($x37 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x83 (ite $x37 (_ bv0 32) (_ bv1 32))))
 (let (($x226 (bvuge ?x83 (_ bv1 32))))
 (let (($x174 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x146 (= $x174 $x226)))
 (let (($x261 (= ?x83 (_ bv0 32))))
 (let (($x137 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x311 (= $x137 $x261)))
 (let (($x301 (and $x311 $x146)))
 (let (($x23 (= $x301 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x159 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x159 (_ bv1 32))))
 (let (($x49 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x199 (= $x49 $x190)))
 (let (($x111 (= ?x159 (_ bv0 32))))
 (let (($x231 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x177 (= $x231 $x111)))
 (let (($x259 (and $x177 $x199)))
 (let (($x194 (= $x259 true)))
 (let (($x229 (= $x174 $x190)))
 (let (($x72 (= $x137 $x111)))
 (let (($x265 (and $x72 $x229)))
 (let (($x30 (= $x265 true)))
 (let (($x94 (= $x49 $x226)))
 (let (($x60 (= $x231 $x261)))
 (let (($x107 (and $x60 $x94)))
 (let (($x187 (= $x107 true)))
 (let ((?x33 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x105 (= (_ bv0 3) ?x33)))
 (let (($x35 (= $x105 true)))
 (let (($x169 (= $x35 true)))
 (let (($x113 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x213 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x110 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x213) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x213))))
 (let (($x286 (and true $x110)))
 (let (($x172 (and $x110 $x286)))
 (let (($x316 (= (bvand ?x193 (_ bv4294967288 32)) ?x193)))
 (let (($x122 (= (bvand ?x125 (_ bv4294967292 32)) ?x125)))
 (let (($x131 (and $x122 $x316)))
 (let (($x52 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x125 (bvsub ?x125 (_ bv4 32))) (bvult ?x125 (bvsub ?x125 (_ bv4 32))))))
 (let (($x197 (and (and (and (and (and $x286 $x52) $x122) $x131) $x172) $x113)))
 (let (($x133 (= true $x197)))
 (let (($x101 (not $x112)))
 (let (($x297 (=> $x101 $x133)))
 (let (($x71 (= $x297 true)))
 (let (($x102 (= $x71 true)))
 (let (($x184 (= $x102 true)))
 (let (($x198 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x21 (= $x198 true)))
 (let (($x63 (= $x21 true)))
 (let (($x10 (= $x63 true)))
 (let (($x164 (= $x101 true)))
 (let (($x270 (= $x164 true)))
 (let (($x260 (= $x270 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x207)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x167 $x168)))
 (let (($x45 (and $x158 $x278)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x142 $x45)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x170)))))))
 (let (($x51 (and $x212 $x224)))
 (let (($x204 (= $x51 true)))
 (let (($x18 (= $x204 true)))
 (let (($x34 (= $x18 true)))
 (let ((?x227 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x227)))
 (let (($x19 (= ?x157 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x88 (= $x19 true)))
 (let (($x165 (= $x88 true)))
 (let (($x171 (and $x165 $x34)))
 (let (($x14 (and $x171 $x260)))
 (let (($x211 (and $x14 $x10)))
 (let (($x279 (and $x211 $x184)))
 (let (($x264 (and $x279 $x169)))
 (let (($x109 (and $x264 $x187)))
 (let (($x304 (and $x109 $x30)))
 (let (($x196 (and $x304 $x194)))
 (let (($x293 (and $x196 $x23)))
 (let (($x55 (and $x174 $x293)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x66 (and $x183 $x55)))
 (let (($x104 (bvugt ?x125 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x233 (bvadd ?x125 (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x233)))
 (let (($x230 (=> (bvule ?x125 (bvsub (bvadd ?x125 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x104)))))))
 (let (($x129 (=> (and $x101 (bvule ?x125 (bvsub (bvadd ?x125 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x64 $x104)))))))
 (let (($x32 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x175 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x135 (_ bv1 32))) (or false (or false (and true (or $x128 $x32)))))))
 (let (($x124 (=> (and $x101 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x135 (_ bv1 32)))) (or false (or false (and true (or $x128 $x32)))))))
 (let (($x13 (and $x124 $x129)))
 (let (($x186 (and $x13 $x66)))
 (let (($x218 (=> $x186 $x290)))
 (not $x218))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2214X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2204X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2214X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x145 (concat ?x326 (select input.dst.llvm-mem (bvadd input.ind-%var2214X (_ bv4 32))))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2214X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2214X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x298 (concat ?x313 (concat ?x221 ?x145))))
 (let (($x141 (= ?x298 ?x298)))
 (let ((?x135 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x152))))
 (let (($x243 (= (_ bv0 32) ?x24)))
 (let ((?x214 (ite $x243 (_ bv0 32) (_ bv1 32))))
 (let (($x240 (bvuge ?x214 (_ bv1 32))))
 (let (($x144 (=> $x240 $x141)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2214X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2214X))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2214X (_ bv2 32))) ?x302)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2214X (_ bv3 32))) ?x344)))
 (let (($x335 (= ?x263 ?x263)))
 (let (($x325 (=> $x240 $x335)))
 (let ((?x125 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x234))))
 (let (($x208 (= (_ bv0 32) ?x193)))
 (let ((?x116 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (bvuge ?x116 (_ bv1 32))))
 (let (($x6 (= $x240 $x305)))
 (let (($x295 (= ?x116 (_ bv0 32))))
 (let (($x280 (= ?x214 (_ bv0 32))))
 (let (($x248 (= $x280 $x295)))
 (let (($x97 (and (and (and (= ?x24 ?x193) (=> $x280 (= false false))) $x248) $x6)))
 (let (($x249 (and (and $x97 $x325) $x144)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2204X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x269 (concat ?x195 (select input.dst.llvm-mem (bvadd input.ind-%var2204X (_ bv4 32))))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2204X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2204X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x220 (concat ?x307 (concat ?x192 ?x269))))
 (let (($x267 (= ?x220 ?x220)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x77 (concat ?x151 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x268 (concat ?x134 (concat ?x127 ?x77))))
 (let (($x219 (= (_ bv0 32) ?x268)))
 (let ((?x95 (ite $x219 (_ bv0 32) (_ bv1 32))))
 (let (($x47 (bvuge ?x95 (_ bv1 32))))
 (let (($x287 (=> $x47 $x267)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2204X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2204X))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2204X (_ bv2 32))) ?x118)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2204X (_ bv3 32))) ?x285)))
 (let (($x139 (= ?x271 ?x271)))
 (let (($x284 (=> $x47 $x139)))
 (let (($x232 (= $x47 $x305)))
 (let (($x132 (= ?x95 (_ bv0 32))))
 (let (($x58 (= $x132 $x295)))
 (let (($x272 (and (and (and (= ?x268 ?x193) (=> $x132 (= false false))) $x58) $x232)))
 (let (($x50 (and (and $x272 $x284) $x287)))
 (let (($x92 (not true)))
 (let (($x340 (or (or $x92 $x50) $x249)))
 (let (($x44 (= true true)))
 (let (($x342 (and $x44 $x340)))
 (let (($x290 (= $x342 true)))
 (let (($x37 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x83 (ite $x37 (_ bv0 32) (_ bv1 32))))
 (let (($x226 (bvuge ?x83 (_ bv1 32))))
 (let (($x174 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x146 (= $x174 $x226)))
 (let (($x261 (= ?x83 (_ bv0 32))))
 (let (($x137 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x311 (= $x137 $x261)))
 (let (($x301 (and $x311 $x146)))
 (let (($x23 (= $x301 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x159 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x159 (_ bv1 32))))
 (let (($x49 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x199 (= $x49 $x190)))
 (let (($x111 (= ?x159 (_ bv0 32))))
 (let (($x231 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x177 (= $x231 $x111)))
 (let (($x259 (and $x177 $x199)))
 (let (($x194 (= $x259 true)))
 (let (($x229 (= $x174 $x190)))
 (let (($x72 (= $x137 $x111)))
 (let (($x265 (and $x72 $x229)))
 (let (($x30 (= $x265 true)))
 (let (($x94 (= $x49 $x226)))
 (let (($x60 (= $x231 $x261)))
 (let (($x107 (and $x60 $x94)))
 (let (($x187 (= $x107 true)))
 (let ((?x33 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x105 (= (_ bv0 3) ?x33)))
 (let (($x35 (= $x105 true)))
 (let (($x169 (= $x35 true)))
 (let (($x113 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x213 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x110 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x213) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x213))))
 (let (($x286 (and true $x110)))
 (let (($x172 (and $x110 $x286)))
 (let (($x316 (= (bvand ?x193 (_ bv4294967288 32)) ?x193)))
 (let (($x122 (= (bvand ?x125 (_ bv4294967292 32)) ?x125)))
 (let (($x131 (and $x122 $x316)))
 (let (($x52 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x125 (bvsub ?x125 (_ bv4 32))) (bvult ?x125 (bvsub ?x125 (_ bv4 32))))))
 (let (($x197 (and (and (and (and (and $x286 $x52) $x122) $x131) $x172) $x113)))
 (let (($x133 (= true $x197)))
 (let (($x101 (not $x112)))
 (let (($x297 (=> $x101 $x133)))
 (let (($x71 (= $x297 true)))
 (let (($x102 (= $x71 true)))
 (let (($x184 (= $x102 true)))
 (let (($x198 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x21 (= $x198 true)))
 (let (($x63 (= $x21 true)))
 (let (($x10 (= $x63 true)))
 (let (($x164 (= $x101 true)))
 (let (($x270 (= $x164 true)))
 (let (($x260 (= $x270 true)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x207)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x167 $x168)))
 (let (($x45 (and $x158 $x278)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x142 $x45)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x170)))))))
 (let (($x51 (and $x212 $x224)))
 (let (($x204 (= $x51 true)))
 (let (($x18 (= $x204 true)))
 (let (($x34 (= $x18 true)))
 (let ((?x227 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x157 (bvneg ?x227)))
 (let (($x19 (= ?x157 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x88 (= $x19 true)))
 (let (($x165 (= $x88 true)))
 (let (($x171 (and $x165 $x34)))
 (let (($x14 (and $x171 $x260)))
 (let (($x211 (and $x14 $x10)))
 (let (($x279 (and $x211 $x184)))
 (let (($x264 (and $x279 $x169)))
 (let (($x109 (and $x264 $x187)))
 (let (($x304 (and $x109 $x30)))
 (let (($x196 (and $x304 $x194)))
 (let (($x293 (and $x196 $x23)))
 (let (($x55 (and $x174 $x293)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x66 (and $x183 $x55)))
 (let (($x104 (bvugt ?x125 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x233 (bvadd ?x125 (_ bv3 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x233)))
 (let (($x230 (=> (bvule ?x125 (bvsub (bvadd ?x125 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x104)))))))
 (let (($x129 (=> (and $x101 (bvule ?x125 (bvsub (bvadd ?x125 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x64 $x104)))))))
 (let (($x32 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x175 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x135 (_ bv1 32))) (or false (or false (and true (or $x128 $x32)))))))
 (let (($x124 (=> (and $x101 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x135 (_ bv1 32)))) (or false (or false (and true (or $x128 $x32)))))))
 (let (($x13 (and $x124 $x129)))
 (let (($x186 (and $x13 $x66)))
 (let (($x218 (=> $x186 $x290)))
 (not $x218))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 85
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2257X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2252X () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x325 (concat ?x335 (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv4 32))))))
 (let ((?x318 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x221 (concat ?x222 (concat ?x318 ?x325))))
 (let (($x252 (= ?x221 ?x221)))
 (let ((?x210 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x161))))
 (let (($x217 (= (_ bv0 32) ?x152)))
 (let ((?x24 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x24 (_ bv1 32))))
 (let (($x326 (=> $x280 $x252)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2257X))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv2 32))) ?x97)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv3 32))) ?x339)))
 (let (($x242 (= ?x40 ?x40)))
 (let (($x275 (=> $x280 $x242)))
 (let (($x226 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x94 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (= ?x94 (_ bv0 32))))
 (let (($x98 (= ?x24 (_ bv0 32))))
 (let (($x446 (= $x98 $x107)))
 (let (($x182 (bvuge ?x94 (_ bv1 32))))
 (let (($x100 (= $x280 $x182)))
 (let (($x145 (and (and (=> $x98 (= false false)) (= ?x152 input.dst.llvm-%l)) $x100)))
 (let (($x141 (and (and (and $x145 $x446) $x275) $x326)))
 (let ((?x284 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x155 (concat ?x284 (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv4 32))))))
 (let ((?x306 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x303 (concat ?x192 (concat ?x306 ?x155))))
 (let (($x195 (= ?x303 ?x303)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x149 (concat ?x151 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x95 (concat ?x219 (concat ?x239 ?x149))))
 (let (($x132 (= (_ bv0 32) ?x95)))
 (let ((?x181 (ite $x132 (_ bv0 32) (_ bv1 32))))
 (let (($x295 (bvuge ?x181 (_ bv1 32))))
 (let (($x283 (=> $x295 $x195)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2252X))))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv2 32))) ?x54)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv3 32))) ?x91)))
 (let (($x148 (= ?x299 ?x299)))
 (let (($x118 (=> $x295 $x148)))
 (let (($x43 (= ?x181 (_ bv0 32))))
 (let (($x5 (= $x43 $x107)))
 (let (($x58 (= $x295 $x182)))
 (let (($x173 (and (and (=> $x43 (= false false)) (= ?x95 input.dst.llvm-%l)) $x58)))
 (let (($x287 (and (and (and $x173 $x5) $x118) $x283)))
 (let (($x134 (not true)))
 (let (($x249 (or (or $x134 $x287) $x141)))
 (let (($x87 (= true true)))
 (let (($x340 (and $x87 $x249)))
 (let (($x342 (= $x340 true)))
 (let (($x157 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x293 (= $x157 $x182)))
 (let (($x174 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x23 (= $x174 $x107)))
 (let (($x55 (and $x23 $x293)))
 (let (($x66 (= $x55 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x190 (_ bv1 32))))
 (let (($x109 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x196 (= $x109 $x30)))
 (let (($x229 (= ?x190 (_ bv0 32))))
 (let (($x60 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x194 (= $x60 $x229)))
 (let (($x311 (and $x194 $x196)))
 (let (($x146 (= $x311 true)))
 (let (($x304 (= $x157 $x30)))
 (let (($x265 (= $x174 $x229)))
 (let (($x177 (and $x265 $x304)))
 (let (($x199 (= $x177 true)))
 (let (($x137 (= $x109 $x182)))
 (let (($x187 (= $x60 $x107)))
 (let (($x159 (and $x187 $x137)))
 (let (($x111 (= $x159 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x105)))
 (let ((?x279 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x279)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x184 $x17)))
 (let (($x169 (and $x33 $x35)))
 (let (($x316 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x316 $x169)))
 (let (($x238 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x238)))))))
 (let (($x310 (and $x102 $x264)))
 (let (($x231 (= $x310 true)))
 (let (($x162 (= $x231 true)))
 (let (($x37 (= $x162 true)))
 (let (($x179 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x224 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x34 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x224) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x224))))
 (let (($x171 (and true $x34)))
 (let (($x153 (and $x34 $x171)))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem ?x67))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv2 32))) ?x38))))
 (let (($x119 (= (bvand ?x123 (_ bv4294967288 32)) ?x123)))
 (let (($x63 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x228 (and $x63 $x119)))
 (let (($x205 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x147 (and (and (and (and (and $x171 $x205) $x63) $x228) $x153) $x179)))
 (let (($x200 (= true $x147)))
 (let (($x101 (not $x112)))
 (let (($x11 (=> $x101 $x200)))
 (let (($x74 (= $x11 true)))
 (let (($x234 (= $x74 true)))
 (let (($x185 (= $x234 true)))
 (let ((?x168 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x158 (= (_ bv0 3) ?x168)))
 (let (($x207 (= $x158 true)))
 (let (($x278 (= $x207 true)))
 (let (($x202 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x212 (= $x202 true)))
 (let (($x42 (= $x212 true)))
 (let (($x142 (= $x42 true)))
 (let ((?x256 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x256)))
 (let (($x28 (= ?x76 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x170 (= $x28 true)))
 (let (($x136 (= $x170 true)))
 (let (($x130 (= $x101 true)))
 (let (($x19 (= $x130 true)))
 (let (($x88 (= $x19 true)))
 (let (($x15 (and $x88 $x136)))
 (let (($x167 (and $x15 $x142)))
 (let (($x45 (and $x167 $x278)))
 (let (($x193 (and $x45 $x185)))
 (let (($x83 (and $x193 $x37)))
 (let (($x72 (and $x83 $x111)))
 (let (($x259 (and $x72 $x199)))
 (let (($x301 (and $x259 $x146)))
 (let (($x186 (and $x301 $x66)))
 (let (($x44 (and $x157 $x186)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x92 (and $x288 $x44)))
 (let (($x85 (bvugt ?x67 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd ?x67 (_ bv3 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x183 (=> (bvule ?x67 (bvsub (bvadd ?x67 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x189 $x85)))))))
 (let (($x126 (=> (and $x101 (bvule ?x67 (bvsub (bvadd ?x67 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x189 $x85)))))))
 (let (($x296 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x86 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x210 (_ bv1 32))) (or false (or false (and true (or $x176 $x296)))))))
 (let (($x16 (=> (and $x101 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x210 (_ bv1 32)))) (or false (or false (and true (or $x176 $x296)))))))
 (let (($x233 (and $x16 $x126)))
 (let (($x48 (and $x233 $x92)))
 (let (($x290 (=> $x48 $x342)))
 (not $x290))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2257X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2252X () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x325 (concat ?x335 (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv4 32))))))
 (let ((?x318 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x221 (concat ?x222 (concat ?x318 ?x325))))
 (let (($x252 (= ?x221 ?x221)))
 (let ((?x210 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x161))))
 (let (($x217 (= (_ bv0 32) ?x152)))
 (let ((?x24 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x24 (_ bv1 32))))
 (let (($x326 (=> $x280 $x252)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2257X))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv2 32))) ?x97)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv3 32))) ?x339)))
 (let (($x242 (= ?x40 ?x40)))
 (let (($x275 (=> $x280 $x242)))
 (let (($x226 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x94 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x107 (= ?x94 (_ bv0 32))))
 (let (($x98 (= ?x24 (_ bv0 32))))
 (let (($x446 (= $x98 $x107)))
 (let (($x182 (bvuge ?x94 (_ bv1 32))))
 (let (($x100 (= $x280 $x182)))
 (let (($x145 (and (and (=> $x98 (= false false)) (= ?x152 input.dst.llvm-%l)) $x100)))
 (let (($x141 (and (and (and $x145 $x446) $x275) $x326)))
 (let ((?x284 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x155 (concat ?x284 (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv4 32))))))
 (let ((?x306 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x303 (concat ?x192 (concat ?x306 ?x155))))
 (let (($x195 (= ?x303 ?x303)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x149 (concat ?x151 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x95 (concat ?x219 (concat ?x239 ?x149))))
 (let (($x132 (= (_ bv0 32) ?x95)))
 (let ((?x181 (ite $x132 (_ bv0 32) (_ bv1 32))))
 (let (($x295 (bvuge ?x181 (_ bv1 32))))
 (let (($x283 (=> $x295 $x195)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2252X))))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv2 32))) ?x54)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv3 32))) ?x91)))
 (let (($x148 (= ?x299 ?x299)))
 (let (($x118 (=> $x295 $x148)))
 (let (($x43 (= ?x181 (_ bv0 32))))
 (let (($x5 (= $x43 $x107)))
 (let (($x58 (= $x295 $x182)))
 (let (($x173 (and (and (=> $x43 (= false false)) (= ?x95 input.dst.llvm-%l)) $x58)))
 (let (($x287 (and (and (and $x173 $x5) $x118) $x283)))
 (let (($x134 (not true)))
 (let (($x249 (or (or $x134 $x287) $x141)))
 (let (($x87 (= true true)))
 (let (($x340 (and $x87 $x249)))
 (let (($x342 (= $x340 true)))
 (let (($x157 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x293 (= $x157 $x182)))
 (let (($x174 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x23 (= $x174 $x107)))
 (let (($x55 (and $x23 $x293)))
 (let (($x66 (= $x55 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x190 (_ bv1 32))))
 (let (($x109 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x196 (= $x109 $x30)))
 (let (($x229 (= ?x190 (_ bv0 32))))
 (let (($x60 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x194 (= $x60 $x229)))
 (let (($x311 (and $x194 $x196)))
 (let (($x146 (= $x311 true)))
 (let (($x304 (= $x157 $x30)))
 (let (($x265 (= $x174 $x229)))
 (let (($x177 (and $x265 $x304)))
 (let (($x199 (= $x177 true)))
 (let (($x137 (= $x109 $x182)))
 (let (($x187 (= $x60 $x107)))
 (let (($x159 (and $x187 $x137)))
 (let (($x111 (= $x159 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x105)))
 (let ((?x279 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x279)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x184 $x17)))
 (let (($x169 (and $x33 $x35)))
 (let (($x316 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x316 $x169)))
 (let (($x238 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x238)))))))
 (let (($x310 (and $x102 $x264)))
 (let (($x231 (= $x310 true)))
 (let (($x162 (= $x231 true)))
 (let (($x37 (= $x162 true)))
 (let (($x179 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x224 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x34 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x224) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x224))))
 (let (($x171 (and true $x34)))
 (let (($x153 (and $x34 $x171)))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem ?x67))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv2 32))) ?x38))))
 (let (($x119 (= (bvand ?x123 (_ bv4294967288 32)) ?x123)))
 (let (($x63 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x228 (and $x63 $x119)))
 (let (($x205 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x147 (and (and (and (and (and $x171 $x205) $x63) $x228) $x153) $x179)))
 (let (($x200 (= true $x147)))
 (let (($x101 (not $x112)))
 (let (($x11 (=> $x101 $x200)))
 (let (($x74 (= $x11 true)))
 (let (($x234 (= $x74 true)))
 (let (($x185 (= $x234 true)))
 (let ((?x168 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x158 (= (_ bv0 3) ?x168)))
 (let (($x207 (= $x158 true)))
 (let (($x278 (= $x207 true)))
 (let (($x202 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x212 (= $x202 true)))
 (let (($x42 (= $x212 true)))
 (let (($x142 (= $x42 true)))
 (let ((?x256 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x256)))
 (let (($x28 (= ?x76 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x170 (= $x28 true)))
 (let (($x136 (= $x170 true)))
 (let (($x130 (= $x101 true)))
 (let (($x19 (= $x130 true)))
 (let (($x88 (= $x19 true)))
 (let (($x15 (and $x88 $x136)))
 (let (($x167 (and $x15 $x142)))
 (let (($x45 (and $x167 $x278)))
 (let (($x193 (and $x45 $x185)))
 (let (($x83 (and $x193 $x37)))
 (let (($x72 (and $x83 $x111)))
 (let (($x259 (and $x72 $x199)))
 (let (($x301 (and $x259 $x146)))
 (let (($x186 (and $x301 $x66)))
 (let (($x44 (and $x157 $x186)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x92 (and $x288 $x44)))
 (let (($x85 (bvugt ?x67 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd ?x67 (_ bv3 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x183 (=> (bvule ?x67 (bvsub (bvadd ?x67 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x189 $x85)))))))
 (let (($x126 (=> (and $x101 (bvule ?x67 (bvsub (bvadd ?x67 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x189 $x85)))))))
 (let (($x296 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x86 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x210 (_ bv1 32))) (or false (or false (and true (or $x176 $x296)))))))
 (let (($x16 (=> (and $x101 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x210 (_ bv1 32)))) (or false (or false (and true (or $x176 $x296)))))))
 (let (($x233 (and $x16 $x126)))
 (let (($x48 (and $x233 $x92)))
 (let (($x290 (=> $x48 $x342)))
 (not $x290))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var2257X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2 32) (_ bv1 8)) (_ bv2818044 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2818040 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967294 32))
(define-fun input.ind-%var2252X () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv16777216 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffc0)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffc3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffffc0)
  (define-fun input.ind-%var2257X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2252X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 86
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2257X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2252X () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x344 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x325 (concat ?x344 (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv4 32))))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x249 (concat ?x141 (concat ?x221 ?x325))))
 (let (($x340 (= ?x249 ?x249)))
 (let ((?x128 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x24))))
 (let (($x145 (= (_ bv0 32) ?x100)))
 (let ((?x446 (ite $x145 (_ bv0 32) (_ bv1 32))))
 (let (($x216 (bvuge ?x446 (_ bv1 32))))
 (let (($x342 (=> $x216 $x340)))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2257X))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv2 32))) ?x339)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv3 32))) ?x275)))
 (let (($x222 (= ?x313 ?x313)))
 (let (($x8 (=> $x216 $x222)))
 (let (($x182 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x137 (ite $x182 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (= ?x137 (_ bv0 32))))
 (let (($x282 (= ?x446 (_ bv0 32))))
 (let (($x341 (= $x282 $x159)))
 (let (($x227 (bvuge ?x137 (_ bv1 32))))
 (let (($x289 (= $x216 $x227)))
 (let (($x218 (and (and (=> $x282 (= false false)) (= ?x100 input.dst.llvm-%l)) $x289)))
 (let (($x188 (and (and (and $x218 $x341) $x8) $x342)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x307 (concat ?x155 (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv4 32))))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x262 (concat ?x144 (concat ?x195 ?x307))))
 (let (($x245 (= ?x262 ?x262)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x317 (concat ?x43 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x173 (concat ?x58 (concat ?x116 ?x317))))
 (let (($x5 (= (_ bv0 32) ?x173)))
 (let ((?x220 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge ?x220 (_ bv1 32))))
 (let (($x20 (=> $x180 $x245)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2252X))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv2 32))) ?x299)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv3 32))) ?x267)))
 (let (($x237 (= ?x192 ?x192)))
 (let (($x306 (=> $x180 $x237)))
 (let (($x47 (= ?x220 (_ bv0 32))))
 (let (($x232 (= $x47 $x159)))
 (let (($x266 (= $x180 $x227)))
 (let (($x22 (and (and (=> $x47 (= false false)) (= ?x173 input.dst.llvm-%l)) $x266)))
 (let (($x161 (and (and (and $x22 $x232) $x306) $x20)))
 (let (($x268 (not true)))
 (let (($x225 (or (or $x268 $x161) $x188)))
 (let (($x149 (= true true)))
 (let (($x26 (and $x149 $x225)))
 (let (($x7 (= $x26 true)))
 (let (($x190 (= false false)))
 (let (($x177 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x146 (=> $x177 $x190)))
 (let (($x165 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x114 (= $x165 $x227)))
 (let (($x134 (= $x177 $x159)))
 (let (($x219 (and (and $x134 $x114) $x146)))
 (let (($x77 (= $x219 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x199 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge ?x199 (_ bv1 32))))
 (let (($x72 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x186 (= $x72 $x196)))
 (let (($x259 (= ?x199 (_ bv0 32))))
 (let (($x187 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x66 (= $x187 $x259)))
 (let (($x229 (=> $x187 $x190)))
 (let (($x92 (and (and $x229 $x66) $x186)))
 (let (($x48 (= $x92 true)))
 (let (($x23 (and (and (= $x177 $x259) (= $x165 $x196)) $x146)))
 (let (($x293 (= $x23 true)))
 (let (($x157 (and (and (= $x187 $x159) (= $x72 $x227)) $x229)))
 (let (($x30 (= $x157 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x231)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x310 (and $x35 $x264)))
 (let (($x37 (and $x310 $x162)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x113 $x37)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x53)))))))
 (let (($x261 (and $x105 $x83)))
 (let (($x60 (= $x261 true)))
 (let (($x49 (= $x60 true)))
 (let (($x226 (= $x49 true)))
 (let (($x179 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x34 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x260 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x34) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x34))))
 (let (($x14 (and true $x260)))
 (let (($x84 (and $x260 $x14)))
 (let ((?x203 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x213))))
 (let (($x70 (= (bvand ?x52 (_ bv4294967288 32)) ?x52)))
 (let (($x96 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x153 (and $x96 $x70)))
 (let (($x63 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x203 (bvsub ?x203 (_ bv4 32))) (bvult ?x203 (bvsub ?x203 (_ bv4 32))))))
 (let (($x234 (and (and (and (and (and $x14 $x63) $x96) $x153) $x84) $x179)))
 (let (($x185 (= true $x234)))
 (let (($x101 (not $x112)))
 (let (($x193 (=> $x101 $x185)))
 (let (($x131 (= $x193 true)))
 (let (($x31 (= $x131 true)))
 (let (($x71 (= $x31 true)))
 (let ((?x45 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x51 (= (_ bv0 3) ?x45)))
 (let (($x224 (= $x51 true)))
 (let (($x204 (= $x224 true)))
 (let (($x167 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x167 true)))
 (let (($x168 (= $x117 true)))
 (let (($x158 (= $x168 true)))
 (let ((?x170 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x170)))
 (let (($x25 (= ?x136 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x202 (= $x25 true)))
 (let (($x212 (= $x202 true)))
 (let (($x81 (= $x101 true)))
 (let (($x256 (= $x81 true)))
 (let (($x76 (= $x256 true)))
 (let (($x42 (and $x76 $x212)))
 (let (($x207 (and $x42 $x158)))
 (let (($x18 (and $x207 $x204)))
 (let (($x172 (and $x18 $x71)))
 (let (($x94 (and $x172 $x226)))
 (let (($x304 (and $x94 $x30)))
 (let (($x55 (and $x304 $x293)))
 (let (($x87 (and $x55 $x48)))
 (let (($x239 (and $x87 $x77)))
 (let (($x156 (and $x165 $x239)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x151 (and $x19 $x156)))
 (let (($x129 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x203 (_ bv3 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x288 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x129)))))))
 (let (($x12 (=> (and $x101 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x230 $x129)))))))
 (let (($x124 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x104 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x128 (_ bv1 32))) (or false (or false (and true (or $x175 $x124)))))))
 (let (($x99 (=> (and $x101 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x128 (_ bv1 32)))) (or false (or false (and true (or $x175 $x124)))))))
 (let (($x68 (and $x99 $x12)))
 (let (($x127 (and $x68 $x151)))
 (let (($x247 (=> $x127 $x7)))
 (not $x247)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2257X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2252X () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x344 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x325 (concat ?x344 (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv4 32))))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x249 (concat ?x141 (concat ?x221 ?x325))))
 (let (($x340 (= ?x249 ?x249)))
 (let ((?x128 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x24))))
 (let (($x145 (= (_ bv0 32) ?x100)))
 (let ((?x446 (ite $x145 (_ bv0 32) (_ bv1 32))))
 (let (($x216 (bvuge ?x446 (_ bv1 32))))
 (let (($x342 (=> $x216 $x340)))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2257X))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv2 32))) ?x339)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv3 32))) ?x275)))
 (let (($x222 (= ?x313 ?x313)))
 (let (($x8 (=> $x216 $x222)))
 (let (($x182 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x137 (ite $x182 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (= ?x137 (_ bv0 32))))
 (let (($x282 (= ?x446 (_ bv0 32))))
 (let (($x341 (= $x282 $x159)))
 (let (($x227 (bvuge ?x137 (_ bv1 32))))
 (let (($x289 (= $x216 $x227)))
 (let (($x218 (and (and (=> $x282 (= false false)) (= ?x100 input.dst.llvm-%l)) $x289)))
 (let (($x188 (and (and (and $x218 $x341) $x8) $x342)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x307 (concat ?x155 (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv4 32))))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x262 (concat ?x144 (concat ?x195 ?x307))))
 (let (($x245 (= ?x262 ?x262)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x317 (concat ?x43 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x173 (concat ?x58 (concat ?x116 ?x317))))
 (let (($x5 (= (_ bv0 32) ?x173)))
 (let ((?x220 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge ?x220 (_ bv1 32))))
 (let (($x20 (=> $x180 $x245)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2252X))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv2 32))) ?x299)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv3 32))) ?x267)))
 (let (($x237 (= ?x192 ?x192)))
 (let (($x306 (=> $x180 $x237)))
 (let (($x47 (= ?x220 (_ bv0 32))))
 (let (($x232 (= $x47 $x159)))
 (let (($x266 (= $x180 $x227)))
 (let (($x22 (and (and (=> $x47 (= false false)) (= ?x173 input.dst.llvm-%l)) $x266)))
 (let (($x161 (and (and (and $x22 $x232) $x306) $x20)))
 (let (($x268 (not true)))
 (let (($x225 (or (or $x268 $x161) $x188)))
 (let (($x149 (= true true)))
 (let (($x26 (and $x149 $x225)))
 (let (($x7 (= $x26 true)))
 (let (($x190 (= false false)))
 (let (($x177 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x146 (=> $x177 $x190)))
 (let (($x165 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x114 (= $x165 $x227)))
 (let (($x134 (= $x177 $x159)))
 (let (($x219 (and (and $x134 $x114) $x146)))
 (let (($x77 (= $x219 true)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x199 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x196 (bvuge ?x199 (_ bv1 32))))
 (let (($x72 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x186 (= $x72 $x196)))
 (let (($x259 (= ?x199 (_ bv0 32))))
 (let (($x187 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x66 (= $x187 $x259)))
 (let (($x229 (=> $x187 $x190)))
 (let (($x92 (and (and $x229 $x66) $x186)))
 (let (($x48 (= $x92 true)))
 (let (($x23 (and (and (= $x177 $x259) (= $x165 $x196)) $x146)))
 (let (($x293 (= $x23 true)))
 (let (($x157 (and (and (= $x187 $x159) (= $x72 $x227)) $x229)))
 (let (($x30 (= $x157 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x231)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x310 (and $x35 $x264)))
 (let (($x37 (and $x310 $x162)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x113 $x37)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x53)))))))
 (let (($x261 (and $x105 $x83)))
 (let (($x60 (= $x261 true)))
 (let (($x49 (= $x60 true)))
 (let (($x226 (= $x49 true)))
 (let (($x179 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x34 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x260 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x34) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x34))))
 (let (($x14 (and true $x260)))
 (let (($x84 (and $x260 $x14)))
 (let ((?x203 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x213))))
 (let (($x70 (= (bvand ?x52 (_ bv4294967288 32)) ?x52)))
 (let (($x96 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x153 (and $x96 $x70)))
 (let (($x63 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x203 (bvsub ?x203 (_ bv4 32))) (bvult ?x203 (bvsub ?x203 (_ bv4 32))))))
 (let (($x234 (and (and (and (and (and $x14 $x63) $x96) $x153) $x84) $x179)))
 (let (($x185 (= true $x234)))
 (let (($x101 (not $x112)))
 (let (($x193 (=> $x101 $x185)))
 (let (($x131 (= $x193 true)))
 (let (($x31 (= $x131 true)))
 (let (($x71 (= $x31 true)))
 (let ((?x45 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x51 (= (_ bv0 3) ?x45)))
 (let (($x224 (= $x51 true)))
 (let (($x204 (= $x224 true)))
 (let (($x167 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x167 true)))
 (let (($x168 (= $x117 true)))
 (let (($x158 (= $x168 true)))
 (let ((?x170 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x170)))
 (let (($x25 (= ?x136 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x202 (= $x25 true)))
 (let (($x212 (= $x202 true)))
 (let (($x81 (= $x101 true)))
 (let (($x256 (= $x81 true)))
 (let (($x76 (= $x256 true)))
 (let (($x42 (and $x76 $x212)))
 (let (($x207 (and $x42 $x158)))
 (let (($x18 (and $x207 $x204)))
 (let (($x172 (and $x18 $x71)))
 (let (($x94 (and $x172 $x226)))
 (let (($x304 (and $x94 $x30)))
 (let (($x55 (and $x304 $x293)))
 (let (($x87 (and $x55 $x48)))
 (let (($x239 (and $x87 $x77)))
 (let (($x156 (and $x165 $x239)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x151 (and $x19 $x156)))
 (let (($x129 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x203 (_ bv3 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x288 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x129)))))))
 (let (($x12 (=> (and $x101 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x230 $x129)))))))
 (let (($x124 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x104 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x128 (_ bv1 32))) (or false (or false (and true (or $x175 $x124)))))))
 (let (($x99 (=> (and $x101 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x128 (_ bv1 32)))) (or false (or false (and true (or $x175 $x124)))))))
 (let (($x68 (and $x99 $x12)))
 (let (($x127 (and $x68 $x151)))
 (let (($x247 (=> $x127 $x7)))
 (not $x247)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffc0)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffc3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffffc0)
  (define-fun input.ind-%var2257X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2252X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var2257X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2 32) (_ bv1 8)) (_ bv2818044 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2818040 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967294 32))
(define-fun input.ind-%var2252X () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv128 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 87
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2257X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2252X () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x423 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x454 (concat ?x423 (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv4 32))))))
 (let ((?x432 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x425 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x426 (concat ?x425 (concat ?x432 ?x454))))
 (let (($x424 (= ?x426 ?x426)))
 (let ((?x176 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x275))))
 (let (($x141 (= (_ bv0 32) ?x326)))
 (let ((?x309 (ite $x141 (_ bv0 32) (_ bv1 32))))
 (let (($x325 (bvuge ?x309 (_ bv1 32))))
 (let (($x427 (=> $x325 $x424)))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2257X))))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv2 32))) ?x413)))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv3 32))) ?x411)))
 (let (($x418 (= ?x415 ?x415)))
 (let (($x419 (=> $x325 $x418)))
 (let (($x227 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x174 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x265 (= ?x174 (_ bv0 32))))
 (let (($x221 (= ?x309 (_ bv0 32))))
 (let (($x407 (= $x221 $x265)))
 (let (($x157 (bvuge ?x174 (_ bv1 32))))
 (let (($x406 (= $x325 $x157)))
 (let (($x433 (and (and (=> $x221 (= false false)) (= ?x326 input.dst.llvm-%l)) $x406)))
 (let (($x455 (and (and (and $x433 $x407) $x419) $x427)))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x398 (concat ?x397 (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv4 32))))))
 (let ((?x395 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x390 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x393 (concat ?x390 (concat ?x395 ?x398))))
 (let (($x396 (= ?x393 ?x393)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x114 (concat ?x134 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x151 (concat ?x156 (concat ?x219 ?x114))))
 (let (($x127 (= (_ bv0 32) ?x151)))
 (let ((?x149 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x149 (_ bv1 32))))
 (let (($x399 (=> $x181 $x396)))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2252X))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv2 32))) ?x381)))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv3 32))) ?x56)))
 (let (($x451 (= ?x388 ?x388)))
 (let (($x389 (=> $x181 $x451)))
 (let (($x268 (= ?x149 (_ bv0 32))))
 (let (($x178 (= $x268 $x265)))
 (let (($x449 (= $x181 $x157)))
 (let (($x401 (and (and (=> $x268 (= false false)) (= ?x151 input.dst.llvm-%l)) $x449)))
 (let (($x404 (and (and (and $x401 $x178) $x389) $x399)))
 (let (($x365 (not true)))
 (let (($x437 (or (or $x365 $x404) $x455)))
 (let (($x362 (= true true)))
 (let (($x438 (and $x362 $x437)))
 (let (($x456 (= $x438 true)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x151 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x151 (_ bv4 32))))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x151 (_ bv4 32)) (_ bv2 32))) ?x91)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x151 (_ bv4 32)) (_ bv3 32))) ?x267)))
 (let (($x50 (= (_ bv0 32) ?x306)))
 (let ((?x139 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (= ?x139 (_ bv0 32))))
 (let (($x330 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x376 (= $x330 $x287)))
 (let (($x263 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x73 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x340 (and $x73 $x263)))
 (let (($x349 (=> $x340 $x376)))
 (let (($x271 (bvuge ?x139 (_ bv1 32))))
 (let (($x241 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x355 (= $x241 $x271)))
 (let (($x358 (=> $x340 $x355)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x47))))
 (let (($x348 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x22)))
 (let (($x89 (=> $x340 $x348)))
 (let (($x370 (= $x263 $x181)))
 (let (($x235 (=> $x73 $x370)))
 (let (($x304 (= false false)))
 (let (($x282 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x248 (and $x73 $x282)))
 (let (($x308 (=> $x248 $x304)))
 (let (($x351 (= $x282 $x268)))
 (let (($x354 (=> $x73 $x351)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x165)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x301)))
 (let (($x352 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x293)))
 (let (($x41 (=> $x73 $x352)))
 (let (($x152 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x145 (=> $x152 $x304)))
 (let (($x372 (and (and (and (and (and (= $x152 $x265) (= $x73 $x157)) $x145) $x41) $x354) $x308)))
 (let (($x369 (and (and (and (and $x372 $x235) $x89) $x358) $x349)))
 (let (($x367 (= $x369 true)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x326 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x326 (_ bv4 32))))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x326 (_ bv4 32)) (_ bv2 32))) ?x244)))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x326 (_ bv4 32)) (_ bv3 32))) ?x251)))
 (let (($x315 (= (_ bv0 32) ?x377)))
 (let ((?x320 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x329 (bvuge ?x320 (_ bv1 32))))
 (let (($x195 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x319 (= $x195 $x329)))
 (let (($x116 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x229 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x317 (and $x229 $x116)))
 (let (($x150 (=> $x317 $x319)))
 (let (($x440 (= ?x320 (_ bv0 32))))
 (let (($x285 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x374 (= $x285 $x440)))
 (let (($x321 (=> $x317 $x374)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x326 (_ bv1 32))) (select input.dst.llvm-mem ?x326))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd ?x326 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x326 (_ bv2 32))) ?x7))))
 (let (($x338 (= input.spec-%var-l-1.2.1.2.0 ?x366)))
 (let (($x103 (=> $x317 $x338)))
 (let (($x143 (= $x116 $x325)))
 (let (($x93 (=> $x229 $x143)))
 (let (($x186 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x442 (= $x186 $x221)))
 (let (($x346 (=> $x229 $x442)))
 (let ((?x216 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x125 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x40 (concat (select input.dst.llvm-mem ?x125) (concat ?x240 (concat ?x218 ?x216)))))
 (let (($x337 (= input.spec-%var-l-1.2.0 ?x40)))
 (let (($x323 (=> $x229 $x337)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x217 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x214 (bvuge ?x217 (_ bv1 32))))
 (let (($x444 (= $x229 $x214)))
 (let (($x292 (= ?x217 (_ bv0 32))))
 (let (($x111 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x324 (= $x111 $x292)))
 (let (($x361 (and (and (and (=> $x111 $x304) (=> (and $x229 $x186) $x304)) $x324) $x444)))
 (let (($x69 (and (and (and (and (and (and $x361 $x323) $x346) $x93) $x103) $x321) $x150)))
 (let (($x447 (= $x69 true)))
 (let (($x441 (= $x330 $x440)))
 (let (($x274 (=> $x340 $x441)))
 (let (($x331 (= $x241 $x329)))
 (let (($x291 (=> $x340 $x331)))
 (let (($x343 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x366)))
 (let (($x276 (=> $x340 $x343)))
 (let (($x252 (= $x263 $x325)))
 (let (($x249 (=> $x73 $x252)))
 (let (($x335 (= $x282 $x221)))
 (let (($x344 (=> $x73 $x335)))
 (let (($x242 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x40)))
 (let (($x379 (=> $x73 $x242)))
 (let (($x246 (and (and (and (and (and (= $x152 $x292) (= $x73 $x214)) $x145) $x308) $x379) $x344)))
 (let (($x347 (and (and (and (and $x246 $x249) $x276) $x291) $x274)))
 (let (($x332 (= $x347 true)))
 (let (($x155 (= $x195 $x271)))
 (let (($x284 (=> $x317 $x155)))
 (let (($x144 (= $x285 $x287)))
 (let (($x303 (=> $x317 $x144)))
 (let (($x232 (= input.spec-%var-l-1.2.1.2.0 ?x22)))
 (let (($x294 (=> $x317 $x232)))
 (let (($x43 (= $x116 $x181)))
 (let (($x132 (=> $x229 $x43)))
 (let (($x58 (and $x229 $x186)))
 (let (($x208 (=> $x58 $x304)))
 (let (($x95 (= $x186 $x268)))
 (let (($x295 (=> $x229 $x95)))
 (let (($x55 (= input.spec-%var-l-1.2.0 ?x293)))
 (let (($x66 (=> $x229 $x55)))
 (let (($x245 (and (and (and (and (= $x111 $x265) (= $x229 $x157)) (=> $x111 $x304)) $x66) $x295)))
 (let (($x280 (and (and (and (and (and $x245 $x208) $x132) $x294) $x303) $x284)))
 (let (($x98 (= $x280 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x60)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (and $x162 $x83)))
 (let (($x226 (and $x261 $x49)))
 (let (($x316 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x316 $x226)))
 (let (($x238 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x231 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x238)))))))
 (let (($x107 (and $x231 $x94)))
 (let (($x187 (= $x107 true)))
 (let (($x109 (= $x187 true)))
 (let (($x182 (= $x109 true)))
 (let (($x179 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x260 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x198 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x260) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x260))))
 (let (($x21 (and true $x198)))
 (let (($x74 (and $x198 $x21)))
 (let ((?x64 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem ?x64))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv2 32))) ?x39))))
 (let (($x11 (= (bvand ?x228 (_ bv4294967288 32)) ?x228)))
 (let (($x46 (= (bvand ?x64 (_ bv4294967292 32)) ?x64)))
 (let (($x84 (and $x46 $x11)))
 (let (($x96 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x64 (bvsub ?x64 (_ bv4 32))) (bvult ?x64 (bvsub ?x64 (_ bv4 32))))))
 (let (($x31 (and (and (and (and (and $x21 $x96) $x46) $x84) $x74) $x179)))
 (let (($x71 (= true $x31)))
 (let (($x101 (not $x112)))
 (let (($x172 (=> $x101 $x71)))
 (let (($x197 (= $x172 true)))
 (let (($x133 (= $x197 true)))
 (let (($x33 (= $x133 true)))
 (let ((?x18 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x171 (= (_ bv0 3) ?x18)))
 (let (($x34 (= $x171 true)))
 (let (($x270 (= $x34 true)))
 (let (($x207 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x278 (= $x207 true)))
 (let (($x45 (= $x278 true)))
 (let (($x51 (= $x45 true)))
 (let ((?x202 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x202)))
 (let (($x142 (= ?x212 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x167 (= $x142 true)))
 (let (($x117 (= $x167 true)))
 (let (($x28 (= $x101 true)))
 (let (($x170 (= $x28 true)))
 (let (($x136 (= $x170 true)))
 (let (($x168 (and $x136 $x117)))
 (let (($x224 (and $x168 $x51)))
 (let (($x164 (and $x224 $x270)))
 (let (($x297 (and $x164 $x33)))
 (let (($x137 (and $x297 $x182)))
 (let (($x243 (and $x137 $x98)))
 (let (($x300 (and $x243 $x332)))
 (let (($x350 (and $x300 $x447)))
 (let (($x120 (and $x350 $x367)))
 (let (($x363 (and $x73 $x120)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x364 (and $x256 $x363)))
 (let (($x126 (bvugt ?x64 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x64 (_ bv3 32))))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (=> (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x183 $x126)))))))
 (let (($x191 (=> (and $x101 (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x183 $x126)))))))
 (let (($x16 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x85 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x176 (_ bv1 32))) (or false (or false (and true (or $x86 $x16)))))))
 (let (($x9 (=> (and $x101 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x176 (_ bv1 32)))) (or false (or false (and true (or $x86 $x16)))))))
 (let (($x106 (and $x9 $x191)))
 (let (($x385 (and $x106 $x364)))
 (let (($x457 (=> $x385 $x456)))
 (not $x457))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2257X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2252X () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x423 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x454 (concat ?x423 (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv4 32))))))
 (let ((?x432 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x425 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x426 (concat ?x425 (concat ?x432 ?x454))))
 (let (($x424 (= ?x426 ?x426)))
 (let ((?x176 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x275))))
 (let (($x141 (= (_ bv0 32) ?x326)))
 (let ((?x309 (ite $x141 (_ bv0 32) (_ bv1 32))))
 (let (($x325 (bvuge ?x309 (_ bv1 32))))
 (let (($x427 (=> $x325 $x424)))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2257X))))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv2 32))) ?x413)))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv3 32))) ?x411)))
 (let (($x418 (= ?x415 ?x415)))
 (let (($x419 (=> $x325 $x418)))
 (let (($x227 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x174 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x265 (= ?x174 (_ bv0 32))))
 (let (($x221 (= ?x309 (_ bv0 32))))
 (let (($x407 (= $x221 $x265)))
 (let (($x157 (bvuge ?x174 (_ bv1 32))))
 (let (($x406 (= $x325 $x157)))
 (let (($x433 (and (and (=> $x221 (= false false)) (= ?x326 input.dst.llvm-%l)) $x406)))
 (let (($x455 (and (and (and $x433 $x407) $x419) $x427)))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x398 (concat ?x397 (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv4 32))))))
 (let ((?x395 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x390 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x393 (concat ?x390 (concat ?x395 ?x398))))
 (let (($x396 (= ?x393 ?x393)))
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x114 (concat ?x134 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x151 (concat ?x156 (concat ?x219 ?x114))))
 (let (($x127 (= (_ bv0 32) ?x151)))
 (let ((?x149 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x149 (_ bv1 32))))
 (let (($x399 (=> $x181 $x396)))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2252X))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv2 32))) ?x381)))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv3 32))) ?x56)))
 (let (($x451 (= ?x388 ?x388)))
 (let (($x389 (=> $x181 $x451)))
 (let (($x268 (= ?x149 (_ bv0 32))))
 (let (($x178 (= $x268 $x265)))
 (let (($x449 (= $x181 $x157)))
 (let (($x401 (and (and (=> $x268 (= false false)) (= ?x151 input.dst.llvm-%l)) $x449)))
 (let (($x404 (and (and (and $x401 $x178) $x389) $x399)))
 (let (($x365 (not true)))
 (let (($x437 (or (or $x365 $x404) $x455)))
 (let (($x362 (= true true)))
 (let (($x438 (and $x362 $x437)))
 (let (($x456 (= $x438 true)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x151 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x151 (_ bv4 32))))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x151 (_ bv4 32)) (_ bv2 32))) ?x91)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x151 (_ bv4 32)) (_ bv3 32))) ?x267)))
 (let (($x50 (= (_ bv0 32) ?x306)))
 (let ((?x139 (ite $x50 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (= ?x139 (_ bv0 32))))
 (let (($x330 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x376 (= $x330 $x287)))
 (let (($x263 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x73 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x340 (and $x73 $x263)))
 (let (($x349 (=> $x340 $x376)))
 (let (($x271 (bvuge ?x139 (_ bv1 32))))
 (let (($x241 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x355 (= $x241 $x271)))
 (let (($x358 (=> $x340 $x355)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x47))))
 (let (($x348 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x22)))
 (let (($x89 (=> $x340 $x348)))
 (let (($x370 (= $x263 $x181)))
 (let (($x235 (=> $x73 $x370)))
 (let (($x304 (= false false)))
 (let (($x282 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x248 (and $x73 $x282)))
 (let (($x308 (=> $x248 $x304)))
 (let (($x351 (= $x282 $x268)))
 (let (($x354 (=> $x73 $x351)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x165)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x301)))
 (let (($x352 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x293)))
 (let (($x41 (=> $x73 $x352)))
 (let (($x152 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x145 (=> $x152 $x304)))
 (let (($x372 (and (and (and (and (and (= $x152 $x265) (= $x73 $x157)) $x145) $x41) $x354) $x308)))
 (let (($x369 (and (and (and (and $x372 $x235) $x89) $x358) $x349)))
 (let (($x367 (= $x369 true)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x326 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x326 (_ bv4 32))))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x326 (_ bv4 32)) (_ bv2 32))) ?x244)))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x326 (_ bv4 32)) (_ bv3 32))) ?x251)))
 (let (($x315 (= (_ bv0 32) ?x377)))
 (let ((?x320 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x329 (bvuge ?x320 (_ bv1 32))))
 (let (($x195 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x319 (= $x195 $x329)))
 (let (($x116 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x229 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x317 (and $x229 $x116)))
 (let (($x150 (=> $x317 $x319)))
 (let (($x440 (= ?x320 (_ bv0 32))))
 (let (($x285 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x374 (= $x285 $x440)))
 (let (($x321 (=> $x317 $x374)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x326 (_ bv1 32))) (select input.dst.llvm-mem ?x326))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd ?x326 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x326 (_ bv2 32))) ?x7))))
 (let (($x338 (= input.spec-%var-l-1.2.1.2.0 ?x366)))
 (let (($x103 (=> $x317 $x338)))
 (let (($x143 (= $x116 $x325)))
 (let (($x93 (=> $x229 $x143)))
 (let (($x186 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x442 (= $x186 $x221)))
 (let (($x346 (=> $x229 $x442)))
 (let ((?x216 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x125 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x40 (concat (select input.dst.llvm-mem ?x125) (concat ?x240 (concat ?x218 ?x216)))))
 (let (($x337 (= input.spec-%var-l-1.2.0 ?x40)))
 (let (($x323 (=> $x229 $x337)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x217 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x214 (bvuge ?x217 (_ bv1 32))))
 (let (($x444 (= $x229 $x214)))
 (let (($x292 (= ?x217 (_ bv0 32))))
 (let (($x111 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x324 (= $x111 $x292)))
 (let (($x361 (and (and (and (=> $x111 $x304) (=> (and $x229 $x186) $x304)) $x324) $x444)))
 (let (($x69 (and (and (and (and (and (and $x361 $x323) $x346) $x93) $x103) $x321) $x150)))
 (let (($x447 (= $x69 true)))
 (let (($x441 (= $x330 $x440)))
 (let (($x274 (=> $x340 $x441)))
 (let (($x331 (= $x241 $x329)))
 (let (($x291 (=> $x340 $x331)))
 (let (($x343 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x366)))
 (let (($x276 (=> $x340 $x343)))
 (let (($x252 (= $x263 $x325)))
 (let (($x249 (=> $x73 $x252)))
 (let (($x335 (= $x282 $x221)))
 (let (($x344 (=> $x73 $x335)))
 (let (($x242 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x40)))
 (let (($x379 (=> $x73 $x242)))
 (let (($x246 (and (and (and (and (and (= $x152 $x292) (= $x73 $x214)) $x145) $x308) $x379) $x344)))
 (let (($x347 (and (and (and (and $x246 $x249) $x276) $x291) $x274)))
 (let (($x332 (= $x347 true)))
 (let (($x155 (= $x195 $x271)))
 (let (($x284 (=> $x317 $x155)))
 (let (($x144 (= $x285 $x287)))
 (let (($x303 (=> $x317 $x144)))
 (let (($x232 (= input.spec-%var-l-1.2.1.2.0 ?x22)))
 (let (($x294 (=> $x317 $x232)))
 (let (($x43 (= $x116 $x181)))
 (let (($x132 (=> $x229 $x43)))
 (let (($x58 (and $x229 $x186)))
 (let (($x208 (=> $x58 $x304)))
 (let (($x95 (= $x186 $x268)))
 (let (($x295 (=> $x229 $x95)))
 (let (($x55 (= input.spec-%var-l-1.2.0 ?x293)))
 (let (($x66 (=> $x229 $x55)))
 (let (($x245 (and (and (and (and (= $x111 $x265) (= $x229 $x157)) (=> $x111 $x304)) $x66) $x295)))
 (let (($x280 (and (and (and (and (and $x245 $x208) $x132) $x294) $x303) $x284)))
 (let (($x98 (= $x280 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x60)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (and $x162 $x83)))
 (let (($x226 (and $x261 $x49)))
 (let (($x316 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x316 $x226)))
 (let (($x238 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x231 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x238)))))))
 (let (($x107 (and $x231 $x94)))
 (let (($x187 (= $x107 true)))
 (let (($x109 (= $x187 true)))
 (let (($x182 (= $x109 true)))
 (let (($x179 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x260 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x198 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x260) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x260))))
 (let (($x21 (and true $x198)))
 (let (($x74 (and $x198 $x21)))
 (let ((?x64 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem ?x64))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv2 32))) ?x39))))
 (let (($x11 (= (bvand ?x228 (_ bv4294967288 32)) ?x228)))
 (let (($x46 (= (bvand ?x64 (_ bv4294967292 32)) ?x64)))
 (let (($x84 (and $x46 $x11)))
 (let (($x96 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x64 (bvsub ?x64 (_ bv4 32))) (bvult ?x64 (bvsub ?x64 (_ bv4 32))))))
 (let (($x31 (and (and (and (and (and $x21 $x96) $x46) $x84) $x74) $x179)))
 (let (($x71 (= true $x31)))
 (let (($x101 (not $x112)))
 (let (($x172 (=> $x101 $x71)))
 (let (($x197 (= $x172 true)))
 (let (($x133 (= $x197 true)))
 (let (($x33 (= $x133 true)))
 (let ((?x18 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x171 (= (_ bv0 3) ?x18)))
 (let (($x34 (= $x171 true)))
 (let (($x270 (= $x34 true)))
 (let (($x207 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x278 (= $x207 true)))
 (let (($x45 (= $x278 true)))
 (let (($x51 (= $x45 true)))
 (let ((?x202 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x212 (bvneg ?x202)))
 (let (($x142 (= ?x212 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x167 (= $x142 true)))
 (let (($x117 (= $x167 true)))
 (let (($x28 (= $x101 true)))
 (let (($x170 (= $x28 true)))
 (let (($x136 (= $x170 true)))
 (let (($x168 (and $x136 $x117)))
 (let (($x224 (and $x168 $x51)))
 (let (($x164 (and $x224 $x270)))
 (let (($x297 (and $x164 $x33)))
 (let (($x137 (and $x297 $x182)))
 (let (($x243 (and $x137 $x98)))
 (let (($x300 (and $x243 $x332)))
 (let (($x350 (and $x300 $x447)))
 (let (($x120 (and $x350 $x367)))
 (let (($x363 (and $x73 $x120)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x364 (and $x256 $x363)))
 (let (($x126 (bvugt ?x64 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x64 (_ bv3 32))))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (=> (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x183 $x126)))))))
 (let (($x191 (=> (and $x101 (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x183 $x126)))))))
 (let (($x16 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x85 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x176 (_ bv1 32))) (or false (or false (and true (or $x86 $x16)))))))
 (let (($x9 (=> (and $x101 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x176 (_ bv1 32)))) (or false (or false (and true (or $x86 $x16)))))))
 (let (($x106 (and $x9 $x191)))
 (let (($x385 (and $x106 $x364)))
 (let (($x457 (=> $x385 $x456)))
 (not $x457))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var2257X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.ind-%var2252X () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffe4)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x79000001)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x7851db98)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xff)
                                #x7851db99
                                #x78)
                         #x78ffff7a
                         #x78)
                  #x78ffff7d
                  #x78)))
(let ((a!2 (store (store (store (store a!1 #x79000004 #x78) #x7978787b #x78)
                         #x7851db9e
                         #x78)
                  #x7851db9c
                  #x78)))
(let ((a!3 (store (store (store (store a!2 #x7851db9f #x79) #x79000005 #x78)
                         #x79000001
                         #x78)
                  #x78ffff7c
                  #x78)))
(let ((a!4 (store (store (store (store a!3 #x7978787d #x78) #x7851db9b #x78)
                         #x78ffff7b
                         #x78)
                  #x79000008
                  #x78)))
(let ((a!5 (store (store (store (store a!4 #x7978787a #x78) #x7851db9d #x78)
                         #x78ffff7f
                         #x78)
                  #x78ffff79
                  #x78)))
(let ((a!6 (store (store (store (store a!5 #x7978787e #x78) #x7978787f #x78)
                         #x79787878
                         #x78)
                  #x7851db9a
                  #x78)))
(let ((a!7 (store (store (store (store a!6 #x79000002 #x78) #x7851db98 #x78)
                         #x78ffff7e
                         #x78)
                  #x79787879
                  #x78)))
  (store (store (store a!7 #x78ffff78 #x78) #x7978787c #x78) #x79000003 #x78)))))))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffe7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffffe4)
  (define-fun input.ind-%var2257X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2252X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 88
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2257X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2252X () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x651 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x652 (concat ?x651 (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv4 32))))))
 (let ((?x654 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x657 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x658 (concat ?x657 (concat ?x654 ?x652))))
 (let (($x659 (= ?x658 ?x658)))
 (let ((?x101 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x351 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x62))))
 (let (($x354 (= (_ bv0 32) ?x351)))
 (let ((?x371 (ite $x354 (_ bv0 32) (_ bv1 32))))
 (let (($x348 (bvuge ?x371 (_ bv1 32))))
 (let (($x660 (=> $x348 $x659)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2257X))))
 (let ((?x642 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv2 32))) ?x639)))
 (let ((?x645 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv3 32))) ?x642)))
 (let (($x646 (= ?x645 ?x645)))
 (let (($x647 (=> $x348 $x646)))
 (let (($x229 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x157 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (= ?x157 (_ bv0 32))))
 (let (($x372 (= ?x371 (_ bv0 32))))
 (let (($x634 (= $x372 $x30)))
 (let (($x88 (bvuge ?x157 (_ bv1 32))))
 (let (($x633 (= $x348 $x88)))
 (let (($x662 (and (and (=> $x372 (= false false)) (= ?x351 input.dst.llvm-%l)) $x633)))
 (let (($x665 (and (and (and $x662 $x634) $x647) $x660)))
 (let ((?x616 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x617 (concat ?x616 (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv4 32))))))
 (let ((?x619 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x623 (concat ?x622 (concat ?x619 ?x617))))
 (let (($x624 (= ?x623 ?x623)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x87 (concat ?x219 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x127 (concat ?x151 (concat ?x48 ?x87))))
 (let (($x149 (= (_ bv0 32) ?x127)))
 (let ((?x268 (ite $x149 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x268 (_ bv1 32))))
 (let (($x625 (=> $x116 $x624)))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2252X))))
 (let ((?x607 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv2 32))) ?x604)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv3 32))) ?x607)))
 (let (($x611 (= ?x610 ?x610)))
 (let (($x612 (=> $x116 $x611)))
 (let (($x95 (= ?x268 (_ bv0 32))))
 (let (($x599 (= $x95 $x30)))
 (let (($x598 (= $x116 $x88)))
 (let (($x627 (and (and (=> $x95 (= false false)) (= ?x127 input.dst.llvm-%l)) $x598)))
 (let (($x630 (and (and (and $x627 $x599) $x612) $x625)))
 (let (($x595 (not true)))
 (let (($x667 (or (or $x595 $x630) $x665)))
 (let (($x594 (= true true)))
 (let (($x668 (and $x594 $x667)))
 (let (($x669 (= $x668 true)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x127 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x127 (_ bv4 32))))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x127 (_ bv4 32)) (_ bv2 32))) ?x192)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x127 (_ bv4 32)) (_ bv3 32))) ?x299)))
 (let ((?x446 (bvadd ?x148 (_ bv4 32))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv1 32))) (select input.dst.llvm-mem ?x446))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv2 32))) ?x439))))
 (let ((?x342 (bvadd ?x218 (_ bv4 32))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv1 32))) (select input.dst.llvm-mem ?x342))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv2 32))) ?x345))))
 (let (($x343 (= (_ bv0 32) ?x366)))
 (let ((?x276 (ite $x343 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (= ?x276 (_ bv0 32))))
 (let (($x459 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x569 (= $x459 $x253)))
 (let (($x425 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x400 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x448 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x355 (and $x68 $x448)))
 (let (($x390 (and $x355 $x400)))
 (let (($x423 (and $x390 $x425)))
 (let (($x570 (=> $x423 $x569)))
 (let (($x281 (bvuge ?x276 (_ bv1 32))))
 (let (($x477 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x567 (= $x477 $x281)))
 (let (($x568 (=> $x423 $x567)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x326))))
 (let (($x565 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x246)))
 (let (($x566 (=> $x423 $x565)))
 (let (($x216 (= (_ bv0 32) ?x218)))
 (let ((?x341 (ite $x216 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x341 (_ bv1 32))))
 (let (($x563 (= $x425 $x318)))
 (let (($x564 (=> $x390 $x563)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x76))))
 (let (($x561 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x214)))
 (let (($x562 (=> $x390 $x561)))
 (let (($x298 (= ?x341 (_ bv0 32))))
 (let (($x433 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x559 (= $x433 $x298)))
 (let (($x560 (=> $x390 $x559)))
 (let (($x177 (= false false)))
 (let (($x460 (and $x423 $x459)))
 (let (($x461 (=> $x460 $x177)))
 (let (($x420 (and $x390 $x433)))
 (let (($x429 (=> $x420 $x177)))
 (let (($x389 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x405 (and $x355 $x389)))
 (let (($x430 (=> $x405 $x177)))
 (let (($x91 (= (_ bv0 32) ?x148)))
 (let ((?x267 (ite $x91 (_ bv0 32) (_ bv1 32))))
 (let (($x306 (= ?x267 (_ bv0 32))))
 (let (($x557 (= $x389 $x306)))
 (let (($x558 (=> $x355 $x557)))
 (let (($x144 (bvuge ?x267 (_ bv1 32))))
 (let (($x555 (= $x400 $x144)))
 (let (($x556 (=> $x355 $x555)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x266))))
 (let (($x553 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x47)))
 (let (($x554 (=> $x355 $x553)))
 (let (($x551 (= $x448 $x116)))
 (let (($x552 (=> $x68 $x551)))
 (let (($x442 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x346 (and $x68 $x442)))
 (let (($x333 (=> $x346 $x177)))
 (let (($x549 (= $x442 $x95)))
 (let (($x550 (=> $x68 $x549)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x194)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x301)))
 (let (($x547 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x66)))
 (let (($x548 (=> $x68 $x547)))
 (let (($x327 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x323 (=> $x327 $x177)))
 (let (($x575 (and (and (and (and (and (= $x327 $x30) (= $x68 $x88)) $x323) $x548) $x550) $x333)))
 (let (($x581 (and (and (and (and (and (and $x575 $x552) $x554) $x556) $x558) $x430) $x429)))
 (let (($x587 (and (and (and (and (and (and $x581 $x461) $x560) $x562) $x564) $x566) $x568)))
 (let (($x588 (and $x587 $x570)))
 (let (($x589 (= $x588 true)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x351 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x351 (_ bv4 32))))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x351 (_ bv4 32)) (_ bv2 32))) ?x59)))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x351 (_ bv4 32)) (_ bv3 32))) ?x378)))
 (let ((?x407 (bvadd ?x380 (_ bv4 32))))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x412))))
 (let ((?x462 (bvadd ?x413 (_ bv4 32))))
 (let ((?x465 (concat (select input.dst.llvm-mem (bvadd ?x462 (_ bv1 32))) (select input.dst.llvm-mem ?x462))))
 (let ((?x470 (concat (select input.dst.llvm-mem (bvadd ?x462 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x462 (_ bv2 32))) ?x465))))
 (let (($x499 (= (_ bv0 32) ?x470)))
 (let ((?x471 (ite $x499 (_ bv0 32) (_ bv1 32))))
 (let (($x479 (= ?x471 (_ bv0 32))))
 (let (($x249 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x528 (= $x249 $x479)))
 (let (($x209 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x287 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x20 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x304 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x132 (and $x304 $x20)))
 (let (($x155 (and $x132 $x287)))
 (let (($x6 (and $x155 $x209)))
 (let (($x524 (=> $x6 $x528)))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem ?x413))))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv2 32))) ?x424))))
 (let (($x519 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x457)))
 (let (($x527 (=> $x6 $x519)))
 (let (($x473 (bvuge ?x471 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x518 (= $x140 $x473)))
 (let (($x535 (=> $x6 $x518)))
 (let (($x411 (= (_ bv0 32) ?x413)))
 (let ((?x415 (ite $x411 (_ bv0 32) (_ bv1 32))))
 (let (($x431 (bvuge ?x415 (_ bv1 32))))
 (let (($x516 (= $x209 $x431)))
 (let (($x517 (=> $x155 $x516)))
 (let (($x418 (= ?x415 (_ bv0 32))))
 (let (($x314 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x510 (= $x314 $x418)))
 (let (($x513 (=> $x155 $x510)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv1 32))) (select input.dst.llvm-mem ?x380))))
 (let ((?x404 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv2 32))) ?x108))))
 (let (($x509 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x404)))
 (let (($x507 (=> $x155 $x509)))
 (let (($x36 (= (_ bv0 32) ?x380)))
 (let ((?x381 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x56 (bvuge ?x381 (_ bv1 32))))
 (let (($x512 (= $x287 $x56)))
 (let (($x508 (=> $x132 $x512)))
 (let (($x403 (= ?x381 (_ bv0 32))))
 (let (($x294 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x515 (= $x294 $x403)))
 (let (($x511 (=> $x132 $x515)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv1 32))) (select input.dst.llvm-mem ?x351))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv2 32))) ?x369))))
 (let (($x506 (= input.spec-%var-l-1.2.1.2.0 ?x362)))
 (let (($x514 (=> $x132 $x506)))
 (let (($x505 (= $x20 $x348)))
 (let (($x534 (=> $x304 $x505)))
 (let (($x92 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x504 (= $x92 $x372)))
 (let (($x533 (=> $x304 $x504)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x338 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x374 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x16 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x319 (concat (select input.dst.llvm-mem ?x16) (concat ?x374 (concat ?x338 ?x93)))))
 (let (($x503 (= input.spec-%var-l-1.2.0 ?x319)))
 (let (($x532 (=> $x304 $x503)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x324 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x361 (bvuge ?x324 (_ bv1 32))))
 (let (($x502 (= $x304 $x361)))
 (let (($x29 (= ?x324 (_ bv0 32))))
 (let (($x265 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x537 (= $x265 $x29)))
 (let (($x322 (and $x6 $x249)))
 (let (($x340 (=> $x322 $x177)))
 (let (($x379 (and $x155 $x314)))
 (let (($x258 (=> $x379 $x177)))
 (let (($x195 (and $x132 $x294)))
 (let (($x271 (=> $x195 $x177)))
 (let (($x522 (and (and (and (=> $x265 $x177) (=> (and $x304 $x92) $x177)) $x271) $x258)))
 (let (($x531 (and (and (and (and (and (and $x522 $x340) $x537) $x502) $x532) $x533) $x534)))
 (let (($x542 (and (and (and (and (and (and $x531 $x514) $x511) $x508) $x507) $x513) $x517)))
 (let (($x160 (and (and (and $x542 $x535) $x527) $x524)))
 (let (($x543 (= $x160 true)))
 (let (($x474 (= $x477 $x473)))
 (let (($x472 (=> $x423 $x474)))
 (let (($x480 (= $x459 $x479)))
 (let (($x476 (=> $x423 $x480)))
 (let (($x458 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x457)))
 (let (($x210 (=> $x423 $x458)))
 (let (($x432 (= $x425 $x431)))
 (let (($x422 (=> $x390 $x432)))
 (let (($x419 (= $x433 $x418)))
 (let (($x435 (=> $x390 $x419)))
 (let (($x436 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x404)))
 (let (($x452 (=> $x390 $x436)))
 (let (($x80 (= $x389 $x403)))
 (let (($x392 (=> $x355 $x80)))
 (let (($x388 (= $x400 $x56)))
 (let (($x451 (=> $x355 $x388)))
 (let (($x365 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x362)))
 (let (($x383 (=> $x355 $x365)))
 (let (($x89 (= $x448 $x348)))
 (let (($x360 (=> $x68 $x89)))
 (let (($x370 (= $x442 $x372)))
 (let (($x235 (=> $x68 $x370)))
 (let (($x150 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x319)))
 (let (($x69 (=> $x68 $x150)))
 (let (($x483 (and (and (and (and (and (= $x327 $x29) (= $x68 $x361)) $x323) $x333) $x69) $x235)))
 (let (($x490 (and (and (and (and (and (and $x483 $x360) $x383) $x451) $x392) $x452) $x430)))
 (let (($x494 (and (and (and (and (and (and $x490 $x435) $x429) $x422) $x210) $x461) $x476)))
 (let (($x495 (and $x494 $x472)))
 (let (($x496 (= $x495 true)))
 (let (($x277 (= $x140 $x281)))
 (let (($x257 (=> $x6 $x277)))
 (let (($x273 (= $x249 $x253)))
 (let (($x241 (=> $x6 $x273)))
 (let (($x263 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x246)))
 (let (($x325 (=> $x6 $x263)))
 (let (($x313 (= $x209 $x318)))
 (let (($x222 (=> $x155 $x313)))
 (let (($x40 (= $x314 $x298)))
 (let (($x242 (=> $x155 $x40)))
 (let (($x100 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x214)))
 (let (($x445 (=> $x155 $x100)))
 (let (($x303 (= $x287 $x144)))
 (let (($x223 (=> $x132 $x303)))
 (let (($x50 (= $x294 $x306)))
 (let (($x139 (=> $x132 $x50)))
 (let (($x443 (= input.spec-%var-l-1.2.1.2.0 ?x47)))
 (let (($x22 (=> $x132 $x443)))
 (let (($x181 (= $x20 $x116)))
 (let (($x43 (=> $x304 $x181)))
 (let (($x58 (and $x304 $x92)))
 (let (($x208 (=> $x58 $x177)))
 (let (($x295 (= $x92 $x95)))
 (let (($x245 (=> $x304 $x295)))
 (let (($x262 (= input.spec-%var-l-1.2.0 ?x66)))
 (let (($x44 (=> $x304 $x262)))
 (let (($x375 (and (and (and (and (= $x265 $x30) (= $x304 $x88)) (=> $x265 $x177)) $x44) $x245)))
 (let (($x329 (and (and (and (and (and (and $x375 $x208) $x43) $x22) $x139) $x223) $x271)))
 (let (($x441 (and (and (and (and (and (and $x329 $x445) $x242) $x258) $x222) $x325) $x340)))
 (let (($x347 (and (and $x441 $x241) $x257)))
 (let (($x332 (= $x347 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x107)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x60 $x226)))
 (let (($x109 (and $x94 $x187)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x238 $x109)))
 (let (($x231 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x261 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x264 $x231)))))))
 (let (($x137 (and $x261 $x182)))
 (let (($x159 (= $x137 true)))
 (let (($x111 (= $x159 true)))
 (let (($x72 (= $x111 true)))
 (let (($x122 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x205 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x63 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x205) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x205))))
 (let (($x82 (and true $x63)))
 (let (($x74 (and $x63 $x82)))
 (let ((?x112 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv1 32))) (select input.dst.llvm-mem ?x112))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv2 32))) ?x78))))
 (let (($x84 (= (bvand ?x70 (_ bv4294967288 32)) ?x70)))
 (let (($x211 (= (bvand ?x112 (_ bv4294967292 32)) ?x112)))
 (let (($x193 (and $x211 $x84)))
 (let (($x163 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x112 (bvsub ?x112 (_ bv4 32))) (bvult ?x112 (bvsub ?x112 (_ bv4 32))))))
 (let (($x197 (and (and (and (and (and $x82 $x163) $x211) $x193) $x74) $x122)))
 (let (($x133 (= true $x197)))
 (let (($x175 (not $x136)))
 (let (($x33 (=> $x175 $x133)))
 (let (($x297 (= $x33 true)))
 (let (($x184 (= $x297 true)))
 (let (($x279 (= $x184 true)))
 (let ((?x270 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x164 (= (_ bv0 3) ?x270)))
 (let (($x14 (= $x164 true)))
 (let (($x260 (= $x14 true)))
 (let (($x51 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x224 (= $x51 true)))
 (let (($x204 (= $x224 true)))
 (let (($x18 (= $x204 true)))
 (let ((?x28 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x28)))
 (let (($x168 (= ?x170 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x158 (= $x168 true)))
 (let (($x207 (= $x158 true)))
 (let (($x19 (= $x175 true)))
 (let (($x191 (= $x19 true)))
 (let (($x106 (= $x191 true)))
 (let (($x278 (and $x106 $x207)))
 (let (($x171 (and $x278 $x18)))
 (let (($x166 (and $x171 $x260)))
 (let (($x310 (and $x166 $x279)))
 (let (($x227 (and $x310 $x72)))
 (let (($x300 (and $x227 $x332)))
 (let (($x501 (and $x300 $x496)))
 (let (($x544 (and $x501 $x543)))
 (let (($x590 (and $x544 $x589)))
 (let (($x591 (and $x68 $x590)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x592 (and $x288 $x591)))
 (let (($x167 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x112 (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x126 (=> (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x167)))))))
 (let (($x129 (=> (and $x175 (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x42 $x167)))))))
 (let (($x104 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x230 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x101 (_ bv1 32))) (or false (or false (and true (or $x67 $x104)))))))
 (let (($x206 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x101 (_ bv1 32)))) (or false (or false (and true (or $x67 $x104)))))))
 (let (($x130 (and $x206 $x129)))
 (let (($x593 (and $x130 $x592)))
 (let (($x670 (=> $x593 $x669)))
 (not $x670))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2257X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var2252X () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x651 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x652 (concat ?x651 (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv4 32))))))
 (let ((?x654 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x657 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2257X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x658 (concat ?x657 (concat ?x654 ?x652))))
 (let (($x659 (= ?x658 ?x658)))
 (let ((?x101 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x351 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x62))))
 (let (($x354 (= (_ bv0 32) ?x351)))
 (let ((?x371 (ite $x354 (_ bv0 32) (_ bv1 32))))
 (let (($x348 (bvuge ?x371 (_ bv1 32))))
 (let (($x660 (=> $x348 $x659)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2257X))))
 (let ((?x642 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv2 32))) ?x639)))
 (let ((?x645 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2257X (_ bv3 32))) ?x642)))
 (let (($x646 (= ?x645 ?x645)))
 (let (($x647 (=> $x348 $x646)))
 (let (($x229 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x157 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (= ?x157 (_ bv0 32))))
 (let (($x372 (= ?x371 (_ bv0 32))))
 (let (($x634 (= $x372 $x30)))
 (let (($x88 (bvuge ?x157 (_ bv1 32))))
 (let (($x633 (= $x348 $x88)))
 (let (($x662 (and (and (=> $x372 (= false false)) (= ?x351 input.dst.llvm-%l)) $x633)))
 (let (($x665 (and (and (and $x662 $x634) $x647) $x660)))
 (let ((?x616 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x617 (concat ?x616 (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv4 32))))))
 (let ((?x619 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2252X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x623 (concat ?x622 (concat ?x619 ?x617))))
 (let (($x624 (= ?x623 ?x623)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x87 (concat ?x219 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x127 (concat ?x151 (concat ?x48 ?x87))))
 (let (($x149 (= (_ bv0 32) ?x127)))
 (let ((?x268 (ite $x149 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x268 (_ bv1 32))))
 (let (($x625 (=> $x116 $x624)))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2252X))))
 (let ((?x607 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv2 32))) ?x604)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2252X (_ bv3 32))) ?x607)))
 (let (($x611 (= ?x610 ?x610)))
 (let (($x612 (=> $x116 $x611)))
 (let (($x95 (= ?x268 (_ bv0 32))))
 (let (($x599 (= $x95 $x30)))
 (let (($x598 (= $x116 $x88)))
 (let (($x627 (and (and (=> $x95 (= false false)) (= ?x127 input.dst.llvm-%l)) $x598)))
 (let (($x630 (and (and (and $x627 $x599) $x612) $x625)))
 (let (($x595 (not true)))
 (let (($x667 (or (or $x595 $x630) $x665)))
 (let (($x594 (= true true)))
 (let (($x668 (and $x594 $x667)))
 (let (($x669 (= $x668 true)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x127 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x127 (_ bv4 32))))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x127 (_ bv4 32)) (_ bv2 32))) ?x192)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x127 (_ bv4 32)) (_ bv3 32))) ?x299)))
 (let ((?x446 (bvadd ?x148 (_ bv4 32))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv1 32))) (select input.dst.llvm-mem ?x446))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv2 32))) ?x439))))
 (let ((?x342 (bvadd ?x218 (_ bv4 32))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv1 32))) (select input.dst.llvm-mem ?x342))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv2 32))) ?x345))))
 (let (($x343 (= (_ bv0 32) ?x366)))
 (let ((?x276 (ite $x343 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (= ?x276 (_ bv0 32))))
 (let (($x459 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x569 (= $x459 $x253)))
 (let (($x425 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x400 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x448 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x355 (and $x68 $x448)))
 (let (($x390 (and $x355 $x400)))
 (let (($x423 (and $x390 $x425)))
 (let (($x570 (=> $x423 $x569)))
 (let (($x281 (bvuge ?x276 (_ bv1 32))))
 (let (($x477 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x567 (= $x477 $x281)))
 (let (($x568 (=> $x423 $x567)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x326))))
 (let (($x565 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x246)))
 (let (($x566 (=> $x423 $x565)))
 (let (($x216 (= (_ bv0 32) ?x218)))
 (let ((?x341 (ite $x216 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x341 (_ bv1 32))))
 (let (($x563 (= $x425 $x318)))
 (let (($x564 (=> $x390 $x563)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x76))))
 (let (($x561 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x214)))
 (let (($x562 (=> $x390 $x561)))
 (let (($x298 (= ?x341 (_ bv0 32))))
 (let (($x433 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x559 (= $x433 $x298)))
 (let (($x560 (=> $x390 $x559)))
 (let (($x177 (= false false)))
 (let (($x460 (and $x423 $x459)))
 (let (($x461 (=> $x460 $x177)))
 (let (($x420 (and $x390 $x433)))
 (let (($x429 (=> $x420 $x177)))
 (let (($x389 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x405 (and $x355 $x389)))
 (let (($x430 (=> $x405 $x177)))
 (let (($x91 (= (_ bv0 32) ?x148)))
 (let ((?x267 (ite $x91 (_ bv0 32) (_ bv1 32))))
 (let (($x306 (= ?x267 (_ bv0 32))))
 (let (($x557 (= $x389 $x306)))
 (let (($x558 (=> $x355 $x557)))
 (let (($x144 (bvuge ?x267 (_ bv1 32))))
 (let (($x555 (= $x400 $x144)))
 (let (($x556 (=> $x355 $x555)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x266))))
 (let (($x553 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x47)))
 (let (($x554 (=> $x355 $x553)))
 (let (($x551 (= $x448 $x116)))
 (let (($x552 (=> $x68 $x551)))
 (let (($x442 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x346 (and $x68 $x442)))
 (let (($x333 (=> $x346 $x177)))
 (let (($x549 (= $x442 $x95)))
 (let (($x550 (=> $x68 $x549)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x194)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x301)))
 (let (($x547 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x66)))
 (let (($x548 (=> $x68 $x547)))
 (let (($x327 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x323 (=> $x327 $x177)))
 (let (($x575 (and (and (and (and (and (= $x327 $x30) (= $x68 $x88)) $x323) $x548) $x550) $x333)))
 (let (($x581 (and (and (and (and (and (and $x575 $x552) $x554) $x556) $x558) $x430) $x429)))
 (let (($x587 (and (and (and (and (and (and $x581 $x461) $x560) $x562) $x564) $x566) $x568)))
 (let (($x588 (and $x587 $x570)))
 (let (($x589 (= $x588 true)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x351 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x351 (_ bv4 32))))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x351 (_ bv4 32)) (_ bv2 32))) ?x59)))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x351 (_ bv4 32)) (_ bv3 32))) ?x378)))
 (let ((?x407 (bvadd ?x380 (_ bv4 32))))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x412))))
 (let ((?x462 (bvadd ?x413 (_ bv4 32))))
 (let ((?x465 (concat (select input.dst.llvm-mem (bvadd ?x462 (_ bv1 32))) (select input.dst.llvm-mem ?x462))))
 (let ((?x470 (concat (select input.dst.llvm-mem (bvadd ?x462 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x462 (_ bv2 32))) ?x465))))
 (let (($x499 (= (_ bv0 32) ?x470)))
 (let ((?x471 (ite $x499 (_ bv0 32) (_ bv1 32))))
 (let (($x479 (= ?x471 (_ bv0 32))))
 (let (($x249 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x528 (= $x249 $x479)))
 (let (($x209 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x287 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x20 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x304 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x132 (and $x304 $x20)))
 (let (($x155 (and $x132 $x287)))
 (let (($x6 (and $x155 $x209)))
 (let (($x524 (=> $x6 $x528)))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem ?x413))))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv2 32))) ?x424))))
 (let (($x519 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x457)))
 (let (($x527 (=> $x6 $x519)))
 (let (($x473 (bvuge ?x471 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x518 (= $x140 $x473)))
 (let (($x535 (=> $x6 $x518)))
 (let (($x411 (= (_ bv0 32) ?x413)))
 (let ((?x415 (ite $x411 (_ bv0 32) (_ bv1 32))))
 (let (($x431 (bvuge ?x415 (_ bv1 32))))
 (let (($x516 (= $x209 $x431)))
 (let (($x517 (=> $x155 $x516)))
 (let (($x418 (= ?x415 (_ bv0 32))))
 (let (($x314 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x510 (= $x314 $x418)))
 (let (($x513 (=> $x155 $x510)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv1 32))) (select input.dst.llvm-mem ?x380))))
 (let ((?x404 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv2 32))) ?x108))))
 (let (($x509 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x404)))
 (let (($x507 (=> $x155 $x509)))
 (let (($x36 (= (_ bv0 32) ?x380)))
 (let ((?x381 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x56 (bvuge ?x381 (_ bv1 32))))
 (let (($x512 (= $x287 $x56)))
 (let (($x508 (=> $x132 $x512)))
 (let (($x403 (= ?x381 (_ bv0 32))))
 (let (($x294 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x515 (= $x294 $x403)))
 (let (($x511 (=> $x132 $x515)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv1 32))) (select input.dst.llvm-mem ?x351))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv2 32))) ?x369))))
 (let (($x506 (= input.spec-%var-l-1.2.1.2.0 ?x362)))
 (let (($x514 (=> $x132 $x506)))
 (let (($x505 (= $x20 $x348)))
 (let (($x534 (=> $x304 $x505)))
 (let (($x92 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x504 (= $x92 $x372)))
 (let (($x533 (=> $x304 $x504)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x338 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x374 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x16 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x319 (concat (select input.dst.llvm-mem ?x16) (concat ?x374 (concat ?x338 ?x93)))))
 (let (($x503 (= input.spec-%var-l-1.2.0 ?x319)))
 (let (($x532 (=> $x304 $x503)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x324 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x361 (bvuge ?x324 (_ bv1 32))))
 (let (($x502 (= $x304 $x361)))
 (let (($x29 (= ?x324 (_ bv0 32))))
 (let (($x265 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x537 (= $x265 $x29)))
 (let (($x322 (and $x6 $x249)))
 (let (($x340 (=> $x322 $x177)))
 (let (($x379 (and $x155 $x314)))
 (let (($x258 (=> $x379 $x177)))
 (let (($x195 (and $x132 $x294)))
 (let (($x271 (=> $x195 $x177)))
 (let (($x522 (and (and (and (=> $x265 $x177) (=> (and $x304 $x92) $x177)) $x271) $x258)))
 (let (($x531 (and (and (and (and (and (and $x522 $x340) $x537) $x502) $x532) $x533) $x534)))
 (let (($x542 (and (and (and (and (and (and $x531 $x514) $x511) $x508) $x507) $x513) $x517)))
 (let (($x160 (and (and (and $x542 $x535) $x527) $x524)))
 (let (($x543 (= $x160 true)))
 (let (($x474 (= $x477 $x473)))
 (let (($x472 (=> $x423 $x474)))
 (let (($x480 (= $x459 $x479)))
 (let (($x476 (=> $x423 $x480)))
 (let (($x458 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x457)))
 (let (($x210 (=> $x423 $x458)))
 (let (($x432 (= $x425 $x431)))
 (let (($x422 (=> $x390 $x432)))
 (let (($x419 (= $x433 $x418)))
 (let (($x435 (=> $x390 $x419)))
 (let (($x436 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x404)))
 (let (($x452 (=> $x390 $x436)))
 (let (($x80 (= $x389 $x403)))
 (let (($x392 (=> $x355 $x80)))
 (let (($x388 (= $x400 $x56)))
 (let (($x451 (=> $x355 $x388)))
 (let (($x365 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x362)))
 (let (($x383 (=> $x355 $x365)))
 (let (($x89 (= $x448 $x348)))
 (let (($x360 (=> $x68 $x89)))
 (let (($x370 (= $x442 $x372)))
 (let (($x235 (=> $x68 $x370)))
 (let (($x150 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x319)))
 (let (($x69 (=> $x68 $x150)))
 (let (($x483 (and (and (and (and (and (= $x327 $x29) (= $x68 $x361)) $x323) $x333) $x69) $x235)))
 (let (($x490 (and (and (and (and (and (and $x483 $x360) $x383) $x451) $x392) $x452) $x430)))
 (let (($x494 (and (and (and (and (and (and $x490 $x435) $x429) $x422) $x210) $x461) $x476)))
 (let (($x495 (and $x494 $x472)))
 (let (($x496 (= $x495 true)))
 (let (($x277 (= $x140 $x281)))
 (let (($x257 (=> $x6 $x277)))
 (let (($x273 (= $x249 $x253)))
 (let (($x241 (=> $x6 $x273)))
 (let (($x263 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x246)))
 (let (($x325 (=> $x6 $x263)))
 (let (($x313 (= $x209 $x318)))
 (let (($x222 (=> $x155 $x313)))
 (let (($x40 (= $x314 $x298)))
 (let (($x242 (=> $x155 $x40)))
 (let (($x100 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x214)))
 (let (($x445 (=> $x155 $x100)))
 (let (($x303 (= $x287 $x144)))
 (let (($x223 (=> $x132 $x303)))
 (let (($x50 (= $x294 $x306)))
 (let (($x139 (=> $x132 $x50)))
 (let (($x443 (= input.spec-%var-l-1.2.1.2.0 ?x47)))
 (let (($x22 (=> $x132 $x443)))
 (let (($x181 (= $x20 $x116)))
 (let (($x43 (=> $x304 $x181)))
 (let (($x58 (and $x304 $x92)))
 (let (($x208 (=> $x58 $x177)))
 (let (($x295 (= $x92 $x95)))
 (let (($x245 (=> $x304 $x295)))
 (let (($x262 (= input.spec-%var-l-1.2.0 ?x66)))
 (let (($x44 (=> $x304 $x262)))
 (let (($x375 (and (and (and (and (= $x265 $x30) (= $x304 $x88)) (=> $x265 $x177)) $x44) $x245)))
 (let (($x329 (and (and (and (and (and (and $x375 $x208) $x43) $x22) $x139) $x223) $x271)))
 (let (($x441 (and (and (and (and (and (and $x329 $x445) $x242) $x258) $x222) $x325) $x340)))
 (let (($x347 (and (and $x441 $x241) $x257)))
 (let (($x332 (= $x347 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x107)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x60 $x226)))
 (let (($x109 (and $x94 $x187)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x238 $x109)))
 (let (($x231 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x261 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x264 $x231)))))))
 (let (($x137 (and $x261 $x182)))
 (let (($x159 (= $x137 true)))
 (let (($x111 (= $x159 true)))
 (let (($x72 (= $x111 true)))
 (let (($x122 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x205 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x63 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x205) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x205))))
 (let (($x82 (and true $x63)))
 (let (($x74 (and $x63 $x82)))
 (let ((?x112 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv1 32))) (select input.dst.llvm-mem ?x112))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv2 32))) ?x78))))
 (let (($x84 (= (bvand ?x70 (_ bv4294967288 32)) ?x70)))
 (let (($x211 (= (bvand ?x112 (_ bv4294967292 32)) ?x112)))
 (let (($x193 (and $x211 $x84)))
 (let (($x163 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x112 (bvsub ?x112 (_ bv4 32))) (bvult ?x112 (bvsub ?x112 (_ bv4 32))))))
 (let (($x197 (and (and (and (and (and $x82 $x163) $x211) $x193) $x74) $x122)))
 (let (($x133 (= true $x197)))
 (let (($x175 (not $x136)))
 (let (($x33 (=> $x175 $x133)))
 (let (($x297 (= $x33 true)))
 (let (($x184 (= $x297 true)))
 (let (($x279 (= $x184 true)))
 (let ((?x270 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x164 (= (_ bv0 3) ?x270)))
 (let (($x14 (= $x164 true)))
 (let (($x260 (= $x14 true)))
 (let (($x51 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x224 (= $x51 true)))
 (let (($x204 (= $x224 true)))
 (let (($x18 (= $x204 true)))
 (let ((?x28 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x170 (bvneg ?x28)))
 (let (($x168 (= ?x170 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x158 (= $x168 true)))
 (let (($x207 (= $x158 true)))
 (let (($x19 (= $x175 true)))
 (let (($x191 (= $x19 true)))
 (let (($x106 (= $x191 true)))
 (let (($x278 (and $x106 $x207)))
 (let (($x171 (and $x278 $x18)))
 (let (($x166 (and $x171 $x260)))
 (let (($x310 (and $x166 $x279)))
 (let (($x227 (and $x310 $x72)))
 (let (($x300 (and $x227 $x332)))
 (let (($x501 (and $x300 $x496)))
 (let (($x544 (and $x501 $x543)))
 (let (($x590 (and $x544 $x589)))
 (let (($x591 (and $x68 $x590)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x592 (and $x288 $x591)))
 (let (($x167 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x112 (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x126 (=> (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x167)))))))
 (let (($x129 (=> (and $x175 (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x42 $x167)))))))
 (let (($x104 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x230 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x101 (_ bv1 32))) (or false (or false (and true (or $x67 $x104)))))))
 (let (($x206 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x101 (_ bv1 32)))) (or false (or false (and true (or $x67 $x104)))))))
 (let (($x130 (and $x206 $x129)))
 (let (($x593 (and $x130 $x592)))
 (let (($x670 (=> $x593 $x669)))
 (not $x670))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var2252X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2257X () (_ BitVec 32)
    #x00000000)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x01002005) #xfc
    (ite (= x!0 #x10801000) #x00
    (ite (= x!0 #x0080000b) #x01
    (ite (= x!0 #x0080000a) #x00
    (ite (= x!0 #x00000016) #x00
    (ite (= x!0 #x00100000) #x00
    (ite (= x!0 #x10800ffd) #x00
    (ite (= x!0 #x00000109) #x00
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x0000000c) #x08
    (ite (= x!0 #x00100007) #x00
    (ite (= x!0 #x0000010f) #x00
    (ite (= x!0 #x10800ffe) #x00
    (ite (= x!0 #x00800008) #x01
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x0000010d) #x00
    (ite (= x!0 #x00000011) #x00
    (ite (= x!0 #x00100002) #x00
    (ite (= x!0 #x00000012) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000007) #x80
    (ite (= x!0 #x10801001) #x00
    (ite (= x!0 #x0000010c) #x00
    (ite (= x!0 #x00000017) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x0000000d) #x01
    (ite (= x!0 #x00100004) #x11
    (ite (= x!0 #x10800ffc) #x00
    (ite (= x!0 #x00800009) #x20
    (ite (= x!0 #x00000018) #x00
    (ite (= x!0 #x00100005) #x00
    (ite (= x!0 #x00800004) #x00
    (ite (= x!0 #x00000014) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x01002008) #x10
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x10801002) #x00
    (ite (= x!0 #x01002007) #x80
    (ite (= x!0 #x01002001) #x00
    (ite (= x!0 #x10801003) #x00
    (ite (= x!0 #x00800005) #x00
    (ite (= x!0 #x00000005) #x04
    (ite (= x!0 #x0000010b) #x00
    (ite (= x!0 #x00000015) #x00
    (ite (= x!0 #x00100001) #x00
    (ite (= x!0 #x00800006) #x00
    (ite (= x!0 #x00000108) #x00
    (ite (= x!0 #x00100006) #x00
    (ite (= x!0 #x10800fff) #x00
    (ite (= x!0 #x0000010a) #x00
    (ite (= x!0 #x01002006) #x0f
    (ite (= x!0 #x00000013) #x00
    (ite (= x!0 #x00100003) #x00
    (ite (= x!0 #x01002004) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00800007) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x01002003) #x00
    (ite (= x!0 #x0000010e) #x10
    (ite (= x!0 #x01002002) #x00
    (ite (= x!0 #x00000009) #x00
      #x00))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00800000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00002000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.ind-%var2252X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2257X () (_ BitVec 32)
    #x00000000)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffff7) #xff
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #x00000006) #xff
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #xfffffff2) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #xfffffff6) #xff
    (ite (= x!0 #xfffffff3) #x00
    (ite (= x!0 #xfffffff0) #x00
    (ite (= x!0 #xfffffff4) #xf8
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #xfffffff5) #xff
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000004) #xf0
    (ite (= x!0 #x00000007) #xff
    (ite (= x!0 #xfffffff1) #x01
    (ite (= x!0 #xfffffffd) #x00
    (ite (= x!0 #xfffffff8) #x00
      #x00)))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 89
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2443X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2438X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x284 (concat ?x155 (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv4 32))))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x243 (concat ?x98 (concat ?x73 ?x284))))
 (let (($x280 (= ?x243 ?x243)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x311 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge ?x311 (_ bv1 32))))
 (let (($x76 (=> $x194 $x280)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2443X))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv2 32))) ?x306)))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv3 32))) ?x315)))
 (let (($x223 (= ?x303 ?x303)))
 (let (($x320 (=> $x194 $x223)))
 (let ((?x64 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem ?x64))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv2 32))) ?x113))))
 (let (($x127 (= (_ bv0 32) ?x53)))
 (let ((?x149 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x295 (bvuge ?x149 (_ bv1 32))))
 (let (($x192 (= $x194 $x295)))
 (let (($x156 (= false false)))
 (let (($x259 (= ?x311 (_ bv0 32))))
 (let (($x272 (=> $x259 $x156)))
 (let (($x268 (= ?x149 (_ bv0 32))))
 (let (($x61 (= $x259 $x268)))
 (let (($x285 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x53)))
 (let (($x331 (and (and (and (and (and $x285 $x61) $x272) $x192) $x320) $x76)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x317 (concat ?x180 (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv4 32))))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x377 (concat ?x22 (concat ?x5 ?x317))))
 (let (($x232 (= ?x377 ?x377)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x283 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x250 (bvuge ?x283 (_ bv1 32))))
 (let (($x294 (=> $x250 $x232)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2438X))))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv2 32))) ?x20)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv3 32))) ?x43)))
 (let (($x220 (= ?x161 ?x161)))
 (let (($x173 (=> $x250 $x220)))
 (let (($x245 (= $x250 $x295)))
 (let (($x215 (= ?x283 (_ bv0 32))))
 (let (($x95 (= $x215 $x268)))
 (let (($x54 (and (and (and (=> $x215 $x156) (= input.dst.llvm-%l ?x53)) $x95) $x245)))
 (let (($x305 (and (and $x54 $x173) $x294)))
 (let (($x219 (not true)))
 (let (($x314 (or (or $x219 $x305) $x331)))
 (let (($x201 (= true true)))
 (let (($x446 (and $x201 $x314)))
 (let (($x240 (= $x446 true)))
 (let (($x146 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x186 (= $x146 $x194)))
 (let (($x307 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x356 (= $x307 $x259)))
 (let (($x92 (and $x356 $x186)))
 (let (($x239 (= $x92 true)))
 (let (($x81 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x301 (= $x81 $x194)))
 (let (($x165 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x196 (= $x165 $x259)))
 (let (($x66 (and $x196 $x301)))
 (let (($x262 (= $x66 true)))
 (let (($x23 (= $x146 $x250)))
 (let (($x177 (= $x307 $x215)))
 (let (($x293 (and $x177 $x23)))
 (let (($x55 (= $x293 true)))
 (let ((?x174 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x265 (= (_ bv0 3) ?x174)))
 (let (($x190 (= $x265 true)))
 (let (($x229 (= $x190 true)))
 (let (($x60 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x52 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x84 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x52) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x52))))
 (let (($x193 (and true $x84)))
 (let (($x105 (and $x84 $x193)))
 (let (($x37 (= (bvand ?x53 (_ bv4294967288 32)) ?x53)))
 (let (($x33 (= (bvand ?x64 (_ bv4294967292 32)) ?x64)))
 (let (($x261 (and $x33 $x37)))
 (let (($x122 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x64 (bvsub ?x64 (_ bv4 32))) (bvult ?x64 (bvsub ?x64 (_ bv4 32))))))
 (let (($x187 (and (and (and (and (and $x193 $x122) $x33) $x261) $x105) $x60)))
 (let (($x109 (= true $x187)))
 (let (($x175 (not $x136)))
 (let (($x182 (=> $x175 $x109)))
 (let (($x137 (= $x182 true)))
 (let (($x159 (= $x137 true)))
 (let (($x111 (= $x159 true)))
 (let (($x39 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x213 (= $x39 true)))
 (let (($x123 (= $x213 true)))
 (let (($x110 (= $x123 true)))
 (let (($x31 (= $x175 true)))
 (let (($x119 (= $x31 true)))
 (let (($x228 (= $x119 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x96)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x21 $x63)))
 (let (($x234 (and $x82 $x10)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x224 $x234)))
 (let (($x270 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x205 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x34 $x270)))))))
 (let (($x163 (and $x205 $x200)))
 (let (($x179 (= $x163 true)))
 (let (($x46 (= $x179 true)))
 (let (($x185 (= $x46 true)))
 (let ((?x170 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x170)))
 (let (($x158 (= ?x117 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x207 (= $x158 true)))
 (let (($x278 (= $x207 true)))
 (let (($x211 (and $x278 $x185)))
 (let (($x286 (and $x211 $x228)))
 (let (($x78 (and $x286 $x110)))
 (let (($x72 (and $x78 $x111)))
 (let (($x157 (and $x72 $x229)))
 (let (($x199 (and $x157 $x55)))
 (let (($x44 (and $x199 $x262)))
 (let (($x77 (and $x44 $x239)))
 (let (($x151 (and $x81 $x77)))
 (let (($x191 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x134 (and $x191 $x151)))
 (let (($x124 (bvugt ?x64 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x64 (_ bv3 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x288 (=> (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x124)))))))
 (let (($x183 (=> (and $x175 (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x75 $x124)))))))
 (let (($x85 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x202 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x90 (=> $x202 (or false (or false (and true (or $x203 $x85)))))))
 (let (($x176 (=> (and $x175 $x202) (or false (or false (and true (or $x203 $x85)))))))
 (let (($x32 (and $x176 $x183)))
 (let (($x48 (and $x32 $x134)))
 (let (($x289 (=> $x48 $x240)))
 (not $x289))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2443X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2438X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x284 (concat ?x155 (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv4 32))))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x243 (concat ?x98 (concat ?x73 ?x284))))
 (let (($x280 (= ?x243 ?x243)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x311 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge ?x311 (_ bv1 32))))
 (let (($x76 (=> $x194 $x280)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2443X))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv2 32))) ?x306)))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv3 32))) ?x315)))
 (let (($x223 (= ?x303 ?x303)))
 (let (($x320 (=> $x194 $x223)))
 (let ((?x64 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem ?x64))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv2 32))) ?x113))))
 (let (($x127 (= (_ bv0 32) ?x53)))
 (let ((?x149 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x295 (bvuge ?x149 (_ bv1 32))))
 (let (($x192 (= $x194 $x295)))
 (let (($x156 (= false false)))
 (let (($x259 (= ?x311 (_ bv0 32))))
 (let (($x272 (=> $x259 $x156)))
 (let (($x268 (= ?x149 (_ bv0 32))))
 (let (($x61 (= $x259 $x268)))
 (let (($x285 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x53)))
 (let (($x331 (and (and (and (and (and $x285 $x61) $x272) $x192) $x320) $x76)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x317 (concat ?x180 (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv4 32))))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x377 (concat ?x22 (concat ?x5 ?x317))))
 (let (($x232 (= ?x377 ?x377)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x283 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x250 (bvuge ?x283 (_ bv1 32))))
 (let (($x294 (=> $x250 $x232)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2438X))))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv2 32))) ?x20)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv3 32))) ?x43)))
 (let (($x220 (= ?x161 ?x161)))
 (let (($x173 (=> $x250 $x220)))
 (let (($x245 (= $x250 $x295)))
 (let (($x215 (= ?x283 (_ bv0 32))))
 (let (($x95 (= $x215 $x268)))
 (let (($x54 (and (and (and (=> $x215 $x156) (= input.dst.llvm-%l ?x53)) $x95) $x245)))
 (let (($x305 (and (and $x54 $x173) $x294)))
 (let (($x219 (not true)))
 (let (($x314 (or (or $x219 $x305) $x331)))
 (let (($x201 (= true true)))
 (let (($x446 (and $x201 $x314)))
 (let (($x240 (= $x446 true)))
 (let (($x146 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x186 (= $x146 $x194)))
 (let (($x307 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x356 (= $x307 $x259)))
 (let (($x92 (and $x356 $x186)))
 (let (($x239 (= $x92 true)))
 (let (($x81 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x301 (= $x81 $x194)))
 (let (($x165 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x196 (= $x165 $x259)))
 (let (($x66 (and $x196 $x301)))
 (let (($x262 (= $x66 true)))
 (let (($x23 (= $x146 $x250)))
 (let (($x177 (= $x307 $x215)))
 (let (($x293 (and $x177 $x23)))
 (let (($x55 (= $x293 true)))
 (let ((?x174 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x265 (= (_ bv0 3) ?x174)))
 (let (($x190 (= $x265 true)))
 (let (($x229 (= $x190 true)))
 (let (($x60 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x52 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x84 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x52) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x52))))
 (let (($x193 (and true $x84)))
 (let (($x105 (and $x84 $x193)))
 (let (($x37 (= (bvand ?x53 (_ bv4294967288 32)) ?x53)))
 (let (($x33 (= (bvand ?x64 (_ bv4294967292 32)) ?x64)))
 (let (($x261 (and $x33 $x37)))
 (let (($x122 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x64 (bvsub ?x64 (_ bv4 32))) (bvult ?x64 (bvsub ?x64 (_ bv4 32))))))
 (let (($x187 (and (and (and (and (and $x193 $x122) $x33) $x261) $x105) $x60)))
 (let (($x109 (= true $x187)))
 (let (($x175 (not $x136)))
 (let (($x182 (=> $x175 $x109)))
 (let (($x137 (= $x182 true)))
 (let (($x159 (= $x137 true)))
 (let (($x111 (= $x159 true)))
 (let (($x39 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x213 (= $x39 true)))
 (let (($x123 (= $x213 true)))
 (let (($x110 (= $x123 true)))
 (let (($x31 (= $x175 true)))
 (let (($x119 (= $x31 true)))
 (let (($x228 (= $x119 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x96)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x21 $x63)))
 (let (($x234 (and $x82 $x10)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x224 $x234)))
 (let (($x270 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x205 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x34 $x270)))))))
 (let (($x163 (and $x205 $x200)))
 (let (($x179 (= $x163 true)))
 (let (($x46 (= $x179 true)))
 (let (($x185 (= $x46 true)))
 (let ((?x170 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x170)))
 (let (($x158 (= ?x117 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x207 (= $x158 true)))
 (let (($x278 (= $x207 true)))
 (let (($x211 (and $x278 $x185)))
 (let (($x286 (and $x211 $x228)))
 (let (($x78 (and $x286 $x110)))
 (let (($x72 (and $x78 $x111)))
 (let (($x157 (and $x72 $x229)))
 (let (($x199 (and $x157 $x55)))
 (let (($x44 (and $x199 $x262)))
 (let (($x77 (and $x44 $x239)))
 (let (($x151 (and $x81 $x77)))
 (let (($x191 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x134 (and $x191 $x151)))
 (let (($x124 (bvugt ?x64 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x64 (_ bv3 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x288 (=> (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x124)))))))
 (let (($x183 (=> (and $x175 (bvule ?x64 (bvsub (bvadd ?x64 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x75 $x124)))))))
 (let (($x85 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x202 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x90 (=> $x202 (or false (or false (and true (or $x203 $x85)))))))
 (let (($x176 (=> (and $x175 $x202) (or false (or false (and true (or $x203 $x85)))))))
 (let (($x32 (and $x176 $x183)))
 (let (($x48 (and $x32 $x134)))
 (let (($x289 (=> $x48 $x240)))
 (not $x289))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000870)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x396c48f8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xf8)
                     #x396c48fd
                     #x48)
              #x396c48ff
              #xb9)
       #x396c48fe
       #x6c))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var2443X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2438X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var2443X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var2438X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 90
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2443X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2438X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x271 (concat ?x155 (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv4 32))))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x331 (concat ?x76 (concat ?x152 ?x271))))
 (let (($x314 (= ?x331 ?x331)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x262 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x186 (bvuge ?x262 (_ bv1 32))))
 (let (($x446 (=> $x186 $x314)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2443X))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv2 32))) ?x306)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv3 32))) ?x223)))
 (let (($x217 (= ?x195 ?x195)))
 (let (($x98 (=> $x186 $x217)))
 (let ((?x202 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x184))))
 (let (($x54 (= (_ bv0 32) ?x37)))
 (let ((?x375 (ite $x54 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x375 (_ bv1 32))))
 (let (($x50 (= $x186 $x116)))
 (let (($x311 (= false false)))
 (let (($x44 (= ?x262 (_ bv0 32))))
 (let (($x144 (=> $x44 $x311)))
 (let (($x251 (= ?x375 (_ bv0 32))))
 (let (($x287 (= $x44 $x251)))
 (let (($x299 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x37)))
 (let (($x25 (and (and (and (and (and $x299 $x287) $x144) $x50) $x98) $x446)))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x317 (concat ?x312 (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv4 32))))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x145 (concat ?x305 (concat ?x377 ?x317))))
 (let (($x285 (= ?x145 ?x145)))
 (let (($x250 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x23 (ite $x250 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x23 (_ bv1 32))))
 (let (($x61 (=> $x106 $x285)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2438X))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv2 32))) ?x43)))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv3 32))) ?x173)))
 (let (($x22 (= ?x443 ?x443)))
 (let (($x266 (=> $x106 $x22)))
 (let (($x181 (= $x106 $x116)))
 (let (($x293 (= ?x23 (_ bv0 32))))
 (let (($x132 (= $x293 $x251)))
 (let (($x214 (and (and (and (=> $x293 $x311) (= input.dst.llvm-%l ?x37)) $x132) $x181)))
 (let (($x100 (and (and $x214 $x266) $x61)))
 (let (($x118 (not true)))
 (let (($x302 (or (or $x118 $x100) $x25)))
 (let (($x95 (= true true)))
 (let (($x248 (and $x95 $x302)))
 (let (($x308 (= $x248 true)))
 (let (($x199 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x219 (= $x199 $x186)))
 (let (($x177 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x201 (= $x177 $x44)))
 (let (($x259 (=> $x177 $x311)))
 (let (($x87 (and (and $x259 $x201) $x219)))
 (let (($x114 (= $x87 true)))
 (let (($x66 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x239 (=> $x66 $x311)))
 (let (($x117 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x92 (= $x117 $x186)))
 (let (($x356 (= $x66 $x44)))
 (let (($x151 (and (and $x356 $x92) $x239)))
 (let (($x134 (= $x151 true)))
 (let (($x81 (and (and (= $x177 $x293) (= $x199 $x106)) $x259)))
 (let (($x194 (= $x81 true)))
 (let ((?x30 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x307 (= (_ bv0 3) ?x30)))
 (let (($x304 (= $x307 true)))
 (let (($x88 (= $x304 true)))
 (let (($x187 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x193 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x131 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x193) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x193))))
 (let (($x122 (and true $x131)))
 (let (($x238 (and $x131 $x122)))
 (let (($x105 (= (bvand ?x37 (_ bv4294967288 32)) ?x37)))
 (let (($x35 (= (bvand ?x202 (_ bv4294967292 32)) ?x202)))
 (let (($x107 (and $x35 $x105)))
 (let (($x226 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x202 (bvsub ?x202 (_ bv4 32))) (bvult ?x202 (bvsub ?x202 (_ bv4 32))))))
 (let (($x111 (and (and (and (and (and $x122 $x226) $x35) $x107) $x238) $x187)))
 (let (($x72 (= true $x111)))
 (let (($x175 (not $x136)))
 (let (($x227 (=> $x175 $x72)))
 (let (($x174 (= $x227 true)))
 (let (($x265 (= $x174 true)))
 (let (($x190 (= $x265 true)))
 (let (($x70 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x52 (= $x70 true)))
 (let (($x153 (= $x52 true)))
 (let (($x11 (= $x153 true)))
 (let (($x39 (= $x175 true)))
 (let (($x213 (= $x39 true)))
 (let (($x123 (= $x213 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x179)))
 (let ((?x234 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x234)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x10 $x200)))
 (let (($x185 (and $x163 $x46)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x164 $x185)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x205 $x51)))))))
 (let (($x31 (and $x96 $x211)))
 (let (($x119 (= $x31 true)))
 (let (($x228 (= $x119 true)))
 (let (($x286 (= $x228 true)))
 (let ((?x207 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x278 (bvneg ?x207)))
 (let (($x18 (= ?x278 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x198 (= $x18 true)))
 (let (($x171 (= $x198 true)))
 (let (($x38 (and $x171 $x286)))
 (let (($x110 (and $x38 $x123)))
 (let (($x84 (and $x110 $x11)))
 (let (($x229 (and $x84 $x190)))
 (let (($x283 (and $x229 $x88)))
 (let (($x301 (and $x283 $x194)))
 (let (($x48 (and $x301 $x134)))
 (let (($x255 (and $x48 $x114)))
 (let (($x127 (and $x117 $x255)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x149 (and $x28 $x127)))
 (let (($x129 (bvugt ?x202 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x202 (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x191 (=> (bvule ?x202 (bvsub (bvadd ?x202 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x129)))))))
 (let (($x233 (=> (and $x175 (bvule ?x202 (bvsub (bvadd ?x202 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x126 $x129)))))))
 (let (($x206 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x42 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x167 (=> $x42 (or false (or false (and true (or $x230 $x206)))))))
 (let (($x16 (=> (and $x175 $x42) (or false (or false (and true (or $x230 $x206)))))))
 (let (($x189 (and $x16 $x233)))
 (let (($x268 (and $x189 $x149)))
 (let (($x282 (=> $x268 $x308)))
 (not $x282))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2443X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2438X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x271 (concat ?x155 (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv4 32))))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x331 (concat ?x76 (concat ?x152 ?x271))))
 (let (($x314 (= ?x331 ?x331)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x262 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x186 (bvuge ?x262 (_ bv1 32))))
 (let (($x446 (=> $x186 $x314)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2443X))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv2 32))) ?x306)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv3 32))) ?x223)))
 (let (($x217 (= ?x195 ?x195)))
 (let (($x98 (=> $x186 $x217)))
 (let ((?x202 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x184))))
 (let (($x54 (= (_ bv0 32) ?x37)))
 (let ((?x375 (ite $x54 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x375 (_ bv1 32))))
 (let (($x50 (= $x186 $x116)))
 (let (($x311 (= false false)))
 (let (($x44 (= ?x262 (_ bv0 32))))
 (let (($x144 (=> $x44 $x311)))
 (let (($x251 (= ?x375 (_ bv0 32))))
 (let (($x287 (= $x44 $x251)))
 (let (($x299 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x37)))
 (let (($x25 (and (and (and (and (and $x299 $x287) $x144) $x50) $x98) $x446)))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x317 (concat ?x312 (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv4 32))))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x145 (concat ?x305 (concat ?x377 ?x317))))
 (let (($x285 (= ?x145 ?x145)))
 (let (($x250 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x23 (ite $x250 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x23 (_ bv1 32))))
 (let (($x61 (=> $x106 $x285)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2438X))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv2 32))) ?x43)))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv3 32))) ?x173)))
 (let (($x22 (= ?x443 ?x443)))
 (let (($x266 (=> $x106 $x22)))
 (let (($x181 (= $x106 $x116)))
 (let (($x293 (= ?x23 (_ bv0 32))))
 (let (($x132 (= $x293 $x251)))
 (let (($x214 (and (and (and (=> $x293 $x311) (= input.dst.llvm-%l ?x37)) $x132) $x181)))
 (let (($x100 (and (and $x214 $x266) $x61)))
 (let (($x118 (not true)))
 (let (($x302 (or (or $x118 $x100) $x25)))
 (let (($x95 (= true true)))
 (let (($x248 (and $x95 $x302)))
 (let (($x308 (= $x248 true)))
 (let (($x199 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x219 (= $x199 $x186)))
 (let (($x177 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x201 (= $x177 $x44)))
 (let (($x259 (=> $x177 $x311)))
 (let (($x87 (and (and $x259 $x201) $x219)))
 (let (($x114 (= $x87 true)))
 (let (($x66 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x239 (=> $x66 $x311)))
 (let (($x117 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x92 (= $x117 $x186)))
 (let (($x356 (= $x66 $x44)))
 (let (($x151 (and (and $x356 $x92) $x239)))
 (let (($x134 (= $x151 true)))
 (let (($x81 (and (and (= $x177 $x293) (= $x199 $x106)) $x259)))
 (let (($x194 (= $x81 true)))
 (let ((?x30 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x307 (= (_ bv0 3) ?x30)))
 (let (($x304 (= $x307 true)))
 (let (($x88 (= $x304 true)))
 (let (($x187 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x193 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x131 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x193) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x193))))
 (let (($x122 (and true $x131)))
 (let (($x238 (and $x131 $x122)))
 (let (($x105 (= (bvand ?x37 (_ bv4294967288 32)) ?x37)))
 (let (($x35 (= (bvand ?x202 (_ bv4294967292 32)) ?x202)))
 (let (($x107 (and $x35 $x105)))
 (let (($x226 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x202 (bvsub ?x202 (_ bv4 32))) (bvult ?x202 (bvsub ?x202 (_ bv4 32))))))
 (let (($x111 (and (and (and (and (and $x122 $x226) $x35) $x107) $x238) $x187)))
 (let (($x72 (= true $x111)))
 (let (($x175 (not $x136)))
 (let (($x227 (=> $x175 $x72)))
 (let (($x174 (= $x227 true)))
 (let (($x265 (= $x174 true)))
 (let (($x190 (= $x265 true)))
 (let (($x70 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x52 (= $x70 true)))
 (let (($x153 (= $x52 true)))
 (let (($x11 (= $x153 true)))
 (let (($x39 (= $x175 true)))
 (let (($x213 (= $x39 true)))
 (let (($x123 (= $x213 true)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x179)))
 (let ((?x234 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x234)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x10 $x200)))
 (let (($x185 (and $x163 $x46)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x164 $x185)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x205 $x51)))))))
 (let (($x31 (and $x96 $x211)))
 (let (($x119 (= $x31 true)))
 (let (($x228 (= $x119 true)))
 (let (($x286 (= $x228 true)))
 (let ((?x207 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x278 (bvneg ?x207)))
 (let (($x18 (= ?x278 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x198 (= $x18 true)))
 (let (($x171 (= $x198 true)))
 (let (($x38 (and $x171 $x286)))
 (let (($x110 (and $x38 $x123)))
 (let (($x84 (and $x110 $x11)))
 (let (($x229 (and $x84 $x190)))
 (let (($x283 (and $x229 $x88)))
 (let (($x301 (and $x283 $x194)))
 (let (($x48 (and $x301 $x134)))
 (let (($x255 (and $x48 $x114)))
 (let (($x127 (and $x117 $x255)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x149 (and $x28 $x127)))
 (let (($x129 (bvugt ?x202 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x202 (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x191 (=> (bvule ?x202 (bvsub (bvadd ?x202 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x129)))))))
 (let (($x233 (=> (and $x175 (bvule ?x202 (bvsub (bvadd ?x202 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x126 $x129)))))))
 (let (($x206 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x42 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x167 (=> $x42 (or false (or false (and true (or $x230 $x206)))))))
 (let (($x16 (=> (and $x175 $x42) (or false (or false (and true (or $x230 $x206)))))))
 (let (($x189 (and $x16 $x233)))
 (let (($x268 (and $x189 $x149)))
 (let (($x282 (=> $x268 $x308)))
 (not $x282))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000870)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x396c48f8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xf8)
                     #x396c48fd
                     #x48)
              #x396c48ff
              #xb9)
       #x396c48fe
       #x6c))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var2443X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2438X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var2443X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var2438X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 91
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2443X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2438X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x395 (concat ?x397 (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv4 32))))))
 (let ((?x393 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x452 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x489 (concat ?x452 (concat ?x393 ?x395))))
 (let (($x405 (= ?x489 ?x489)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x280 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x280 (_ bv1 32))))
 (let (($x430 (=> $x152 $x405)))
 (let ((?x389 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2443X))))
 (let ((?x392 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv2 32))) ?x389)))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv3 32))) ?x392)))
 (let (($x396 (= ?x394 ?x394)))
 (let (($x399 (=> $x152 $x396)))
 (let ((?x42 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x169))))
 (let (($x354 (= (_ bv0 32) ?x105)))
 (let ((?x371 (ite $x354 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x371 (_ bv1 32))))
 (let (($x381 (= $x152 $x235)))
 (let (($x301 (= false false)))
 (let (($x76 (= ?x280 (_ bv0 32))))
 (let (($x36 (=> $x76 $x301)))
 (let (($x372 (= ?x371 (_ bv0 32))))
 (let (($x380 (= $x76 $x372)))
 (let (($x378 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x105)))
 (let (($x417 (and (and (and (and (and $x378 $x380) $x36) $x381) $x399) $x430)))
 (let ((?x362 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x365 (concat ?x362 (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv4 32))))))
 (let ((?x484 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x449 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x382 (concat ?x449 (concat ?x484 ?x365))))
 (let (($x384 (= ?x382 ?x382)))
 (let (($x106 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x165 (ite $x106 (_ bv0 32) (_ bv1 32))))
 (let (($x81 (bvuge ?x165 (_ bv1 32))))
 (let (($x386 (=> $x81 $x384)))
 (let ((?x500 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2438X))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv2 32))) ?x500)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv3 32))) ?x364)))
 (let (($x376 (= ?x120 ?x120)))
 (let (($x349 (=> $x81 $x376)))
 (let (($x483 (= $x81 $x235)))
 (let (($x196 (= ?x165 (_ bv0 32))))
 (let (($x370 (= $x196 $x372)))
 (let (($x402 (and (and (and (=> $x196 $x301) (= input.dst.llvm-%l ?x105)) $x370) $x483)))
 (let (($x59 (and (and $x402 $x349) $x386)))
 (let (($x62 (not true)))
 (let (($x414 (or (or $x62 $x59) $x417)))
 (let (($x447 (= true true)))
 (let (($x410 (and $x447 $x414)))
 (let (($x453 (= $x410 true)))
 (let ((?x203 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x298))))
 (let ((?x342 (bvadd ?x254 (_ bv4 32))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv1 32))) (select input.dst.llvm-mem ?x342))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv2 32))) ?x26))))
 (let (($x343 (= (_ bv0 32) ?x366)))
 (let ((?x276 (ite $x343 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (bvuge ?x276 (_ bv1 32))))
 (let (($x290 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x374 (= $x290 $x253)))
 (let (($x214 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x259 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x161 (and $x259 $x214)))
 (let (($x328 (=> $x161 $x374)))
 (let (($x140 (= ?x276 (_ bv0 32))))
 (let (($x377 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x336 (= $x377 $x140)))
 (let (($x334 (=> $x161 $x336)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x326))))
 (let (($x481 (= input.spec-%var-l-1.2.1.2.0 ?x252)))
 (let (($x143 (=> $x161 $x481)))
 (let (($x209 (= (_ bv0 32) ?x254)))
 (let ((?x318 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x339 (bvuge ?x318 (_ bv1 32))))
 (let (($x346 (= $x214 $x339)))
 (let (($x333 (=> $x259 $x346)))
 (let (($x313 (= ?x318 (_ bv0 32))))
 (let (($x219 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x65 (= $x219 $x313)))
 (let (($x442 (=> $x259 $x65)))
 (let ((?x446 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x282 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x112 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x101 (concat (select input.dst.llvm-mem ?x112) (concat ?x282 (concat ?x302 ?x446)))))
 (let (($x323 (= input.spec-%var-l-1.2.0 ?x101)))
 (let (($x478 (=> $x259 $x323)))
 (let (($x475 (= $x259 $x152)))
 (let (($x55 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x337 (= $x55 $x76)))
 (let (($x103 (and (and (and (=> $x55 $x301) (=> (and $x259 $x219) $x301)) $x337) $x475)))
 (let (($x41 (and (and (and (and (and (and $x103 $x478) $x442) $x333) $x143) $x334) $x328)))
 (let (($x373 (= $x41 true)))
 (let (($x274 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x281 (= $x274 $x140)))
 (let (($x6 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x278 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x141 (and $x278 $x6)))
 (let (($x277 (=> $x141 $x281)))
 (let (($x441 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x273 (= $x441 $x253)))
 (let (($x241 (=> $x141 $x273)))
 (let (($x249 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x252)))
 (let (($x322 (=> $x141 $x249)))
 (let (($x335 (= $x6 $x339)))
 (let (($x344 (=> $x278 $x335)))
 (let (($x271 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x222 (= $x271 $x313)))
 (let (($x330 (=> $x278 $x222)))
 (let (($x34 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x101)))
 (let (($x115 (=> $x278 $x34)))
 (let (($x243 (and $x278 $x271)))
 (let (($x331 (=> $x243 $x301)))
 (let (($x24 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x155 (=> $x24 $x301)))
 (let (($x12 (and (and (and (and (and (= $x24 $x76) (= $x278 $x152)) $x155) $x331) $x115) $x330)))
 (let (($x444 (and (and (and (and $x12 $x344) $x322) $x241) $x277)))
 (let (($x68 (= $x444 true)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x149 (concat ?x127 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x292 (concat ?x245 (concat ?x95 ?x149))))
 (let ((?x180 (bvadd ?x292 (_ bv4 32))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x232))))
 (let (($x287 (= (_ bv0 32) ?x299)))
 (let ((?x240 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x240 (_ bv1 32))))
 (let (($x320 (= $x290 $x139)))
 (let (($x445 (=> $x161 $x320)))
 (let (($x144 (= ?x240 (_ bv0 32))))
 (let (($x289 (= $x377 $x144)))
 (let (($x50 (=> $x161 $x289)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x43))))
 (let (($x294 (= input.spec-%var-l-1.2.1.2.0 ?x5)))
 (let (($x305 (=> $x161 $x294)))
 (let (($x54 (= (_ bv0 32) ?x292)))
 (let ((?x375 (ite $x54 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x375 (_ bv1 32))))
 (let (($x237 (= $x214 $x208)))
 (let (($x57 (=> $x259 $x237)))
 (let (($x116 (and $x259 $x219)))
 (let (($x181 (=> $x116 $x301)))
 (let (($x251 (= ?x375 (_ bv0 32))))
 (let (($x132 (= $x219 $x251)))
 (let (($x272 (=> $x259 $x132)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x117)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x77)))
 (let (($x48 (= input.spec-%var-l-1.2.0 ?x134)))
 (let (($x201 (=> $x259 $x48)))
 (let (($x148 (and (and (and (and (= $x55 $x196) (= $x259 $x81)) (=> $x55 $x301)) $x201) $x272)))
 (let (($x217 (and (and (and (and (and $x148 $x181) $x57) $x305) $x50) $x445)))
 (let (($x98 (= $x217 true)))
 (let ((?x215 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x177 (= (_ bv0 3) ?x215)))
 (let (($x146 (= $x177 true)))
 (let (($x250 (= $x146 true)))
 (let (($x111 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x122 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x33 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122))))
 (let (($x226 (and true $x33)))
 (let (($x60 (and $x33 $x226)))
 (let (($x238 (= (bvand ?x105 (_ bv4294967288 32)) ?x105)))
 (let (($x113 (= (bvand ?x42 (_ bv4294967292 32)) ?x42)))
 (let (($x159 (and $x113 $x238)))
 (let (($x182 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x42 (bvsub ?x42 (_ bv4 32))) (bvult ?x42 (bvsub ?x42 (_ bv4 32))))))
 (let (($x190 (and (and (and (and (and $x226 $x182) $x113) $x159) $x60) $x111)))
 (let (($x229 (= true $x190)))
 (let (($x175 (not $x136)))
 (let (($x157 (=> $x175 $x229)))
 (let (($x30 (= $x157 true)))
 (let (($x307 (= $x30 true)))
 (let (($x304 (= $x307 true)))
 (let (($x74 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x193 (= $x74 true)))
 (let (($x71 (= $x193 true)))
 (let (($x172 (= $x71 true)))
 (let (($x70 (= $x175 true)))
 (let (($x52 (= $x70 true)))
 (let (($x153 (= $x52 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x119)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x185)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x46 $x211)))
 (let (($x286 (and $x31 $x228)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x224 $x286)))
 (let (($x270 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x270)))))))
 (let (($x39 (and $x179 $x38)))
 (let (($x213 (= $x39 true)))
 (let (($x123 (= $x213 true)))
 (let (($x110 (= $x123 true)))
 (let ((?x198 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x171 (bvneg ?x198)))
 (let (($x260 (= ?x171 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x82 (= $x260 true)))
 (let (($x166 (= $x82 true)))
 (let (($x78 (and $x166 $x110)))
 (let (($x11 (and $x78 $x153)))
 (let (($x131 (and $x11 $x172)))
 (let (($x88 (and $x131 $x304)))
 (let (($x23 (and $x88 $x250)))
 (let (($x296 (and $x23 $x98)))
 (let (($x361 (and $x296 $x68)))
 (let (($x357 (and $x361 $x373)))
 (let (($x359 (and $x278 $x357)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x350 (and $x158 $x359)))
 (let (($x183 (bvugt ?x42 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x42 (_ bv3 32))))
 (let (($x288 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x28 (=> (bvule ?x42 (bvsub (bvadd ?x42 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x288 $x183)))))))
 (let (($x19 (=> (and $x175 (bvule ?x42 (bvsub (bvadd ?x42 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x288 $x183)))))))
 (let (($x176 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x124 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x203 (_ bv1 32))) (or false (or false (and true (or $x90 $x176)))))))
 (let (($x99 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x203 (_ bv1 32)))) (or false (or false (and true (or $x90 $x176)))))))
 (let (($x13 (and $x99 $x19)))
 (let (($x353 (and $x13 $x350)))
 (let (($x409 (=> $x353 $x453)))
 (not $x409)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2443X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2438X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x395 (concat ?x397 (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv4 32))))))
 (let ((?x393 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x452 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x489 (concat ?x452 (concat ?x393 ?x395))))
 (let (($x405 (= ?x489 ?x489)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x280 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x152 (bvuge ?x280 (_ bv1 32))))
 (let (($x430 (=> $x152 $x405)))
 (let ((?x389 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2443X))))
 (let ((?x392 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv2 32))) ?x389)))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv3 32))) ?x392)))
 (let (($x396 (= ?x394 ?x394)))
 (let (($x399 (=> $x152 $x396)))
 (let ((?x42 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x169))))
 (let (($x354 (= (_ bv0 32) ?x105)))
 (let ((?x371 (ite $x354 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x371 (_ bv1 32))))
 (let (($x381 (= $x152 $x235)))
 (let (($x301 (= false false)))
 (let (($x76 (= ?x280 (_ bv0 32))))
 (let (($x36 (=> $x76 $x301)))
 (let (($x372 (= ?x371 (_ bv0 32))))
 (let (($x380 (= $x76 $x372)))
 (let (($x378 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x105)))
 (let (($x417 (and (and (and (and (and $x378 $x380) $x36) $x381) $x399) $x430)))
 (let ((?x362 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x365 (concat ?x362 (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv4 32))))))
 (let ((?x484 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x449 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x382 (concat ?x449 (concat ?x484 ?x365))))
 (let (($x384 (= ?x382 ?x382)))
 (let (($x106 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x165 (ite $x106 (_ bv0 32) (_ bv1 32))))
 (let (($x81 (bvuge ?x165 (_ bv1 32))))
 (let (($x386 (=> $x81 $x384)))
 (let ((?x500 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2438X))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv2 32))) ?x500)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv3 32))) ?x364)))
 (let (($x376 (= ?x120 ?x120)))
 (let (($x349 (=> $x81 $x376)))
 (let (($x483 (= $x81 $x235)))
 (let (($x196 (= ?x165 (_ bv0 32))))
 (let (($x370 (= $x196 $x372)))
 (let (($x402 (and (and (and (=> $x196 $x301) (= input.dst.llvm-%l ?x105)) $x370) $x483)))
 (let (($x59 (and (and $x402 $x349) $x386)))
 (let (($x62 (not true)))
 (let (($x414 (or (or $x62 $x59) $x417)))
 (let (($x447 (= true true)))
 (let (($x410 (and $x447 $x414)))
 (let (($x453 (= $x410 true)))
 (let ((?x203 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x298))))
 (let ((?x342 (bvadd ?x254 (_ bv4 32))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv1 32))) (select input.dst.llvm-mem ?x342))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv2 32))) ?x26))))
 (let (($x343 (= (_ bv0 32) ?x366)))
 (let ((?x276 (ite $x343 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (bvuge ?x276 (_ bv1 32))))
 (let (($x290 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x374 (= $x290 $x253)))
 (let (($x214 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x259 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x161 (and $x259 $x214)))
 (let (($x328 (=> $x161 $x374)))
 (let (($x140 (= ?x276 (_ bv0 32))))
 (let (($x377 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x336 (= $x377 $x140)))
 (let (($x334 (=> $x161 $x336)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x326))))
 (let (($x481 (= input.spec-%var-l-1.2.1.2.0 ?x252)))
 (let (($x143 (=> $x161 $x481)))
 (let (($x209 (= (_ bv0 32) ?x254)))
 (let ((?x318 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x339 (bvuge ?x318 (_ bv1 32))))
 (let (($x346 (= $x214 $x339)))
 (let (($x333 (=> $x259 $x346)))
 (let (($x313 (= ?x318 (_ bv0 32))))
 (let (($x219 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x65 (= $x219 $x313)))
 (let (($x442 (=> $x259 $x65)))
 (let ((?x446 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x282 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x112 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x101 (concat (select input.dst.llvm-mem ?x112) (concat ?x282 (concat ?x302 ?x446)))))
 (let (($x323 (= input.spec-%var-l-1.2.0 ?x101)))
 (let (($x478 (=> $x259 $x323)))
 (let (($x475 (= $x259 $x152)))
 (let (($x55 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x337 (= $x55 $x76)))
 (let (($x103 (and (and (and (=> $x55 $x301) (=> (and $x259 $x219) $x301)) $x337) $x475)))
 (let (($x41 (and (and (and (and (and (and $x103 $x478) $x442) $x333) $x143) $x334) $x328)))
 (let (($x373 (= $x41 true)))
 (let (($x274 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x281 (= $x274 $x140)))
 (let (($x6 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x278 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x141 (and $x278 $x6)))
 (let (($x277 (=> $x141 $x281)))
 (let (($x441 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x273 (= $x441 $x253)))
 (let (($x241 (=> $x141 $x273)))
 (let (($x249 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x252)))
 (let (($x322 (=> $x141 $x249)))
 (let (($x335 (= $x6 $x339)))
 (let (($x344 (=> $x278 $x335)))
 (let (($x271 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x222 (= $x271 $x313)))
 (let (($x330 (=> $x278 $x222)))
 (let (($x34 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x101)))
 (let (($x115 (=> $x278 $x34)))
 (let (($x243 (and $x278 $x271)))
 (let (($x331 (=> $x243 $x301)))
 (let (($x24 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x155 (=> $x24 $x301)))
 (let (($x12 (and (and (and (and (and (= $x24 $x76) (= $x278 $x152)) $x155) $x331) $x115) $x330)))
 (let (($x444 (and (and (and (and $x12 $x344) $x322) $x241) $x277)))
 (let (($x68 (= $x444 true)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x149 (concat ?x127 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x292 (concat ?x245 (concat ?x95 ?x149))))
 (let ((?x180 (bvadd ?x292 (_ bv4 32))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x232))))
 (let (($x287 (= (_ bv0 32) ?x299)))
 (let ((?x240 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x240 (_ bv1 32))))
 (let (($x320 (= $x290 $x139)))
 (let (($x445 (=> $x161 $x320)))
 (let (($x144 (= ?x240 (_ bv0 32))))
 (let (($x289 (= $x377 $x144)))
 (let (($x50 (=> $x161 $x289)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x43))))
 (let (($x294 (= input.spec-%var-l-1.2.1.2.0 ?x5)))
 (let (($x305 (=> $x161 $x294)))
 (let (($x54 (= (_ bv0 32) ?x292)))
 (let ((?x375 (ite $x54 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x375 (_ bv1 32))))
 (let (($x237 (= $x214 $x208)))
 (let (($x57 (=> $x259 $x237)))
 (let (($x116 (and $x259 $x219)))
 (let (($x181 (=> $x116 $x301)))
 (let (($x251 (= ?x375 (_ bv0 32))))
 (let (($x132 (= $x219 $x251)))
 (let (($x272 (=> $x259 $x132)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x117)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x77)))
 (let (($x48 (= input.spec-%var-l-1.2.0 ?x134)))
 (let (($x201 (=> $x259 $x48)))
 (let (($x148 (and (and (and (and (= $x55 $x196) (= $x259 $x81)) (=> $x55 $x301)) $x201) $x272)))
 (let (($x217 (and (and (and (and (and $x148 $x181) $x57) $x305) $x50) $x445)))
 (let (($x98 (= $x217 true)))
 (let ((?x215 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x177 (= (_ bv0 3) ?x215)))
 (let (($x146 (= $x177 true)))
 (let (($x250 (= $x146 true)))
 (let (($x111 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x122 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x33 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x122))))
 (let (($x226 (and true $x33)))
 (let (($x60 (and $x33 $x226)))
 (let (($x238 (= (bvand ?x105 (_ bv4294967288 32)) ?x105)))
 (let (($x113 (= (bvand ?x42 (_ bv4294967292 32)) ?x42)))
 (let (($x159 (and $x113 $x238)))
 (let (($x182 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x42 (bvsub ?x42 (_ bv4 32))) (bvult ?x42 (bvsub ?x42 (_ bv4 32))))))
 (let (($x190 (and (and (and (and (and $x226 $x182) $x113) $x159) $x60) $x111)))
 (let (($x229 (= true $x190)))
 (let (($x175 (not $x136)))
 (let (($x157 (=> $x175 $x229)))
 (let (($x30 (= $x157 true)))
 (let (($x307 (= $x30 true)))
 (let (($x304 (= $x307 true)))
 (let (($x74 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x193 (= $x74 true)))
 (let (($x71 (= $x193 true)))
 (let (($x172 (= $x71 true)))
 (let (($x70 (= $x175 true)))
 (let (($x52 (= $x70 true)))
 (let (($x153 (= $x52 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x119)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x185)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x46 $x211)))
 (let (($x286 (and $x31 $x228)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x224 $x286)))
 (let (($x270 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x96 $x270)))))))
 (let (($x39 (and $x179 $x38)))
 (let (($x213 (= $x39 true)))
 (let (($x123 (= $x213 true)))
 (let (($x110 (= $x123 true)))
 (let ((?x198 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x171 (bvneg ?x198)))
 (let (($x260 (= ?x171 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x82 (= $x260 true)))
 (let (($x166 (= $x82 true)))
 (let (($x78 (and $x166 $x110)))
 (let (($x11 (and $x78 $x153)))
 (let (($x131 (and $x11 $x172)))
 (let (($x88 (and $x131 $x304)))
 (let (($x23 (and $x88 $x250)))
 (let (($x296 (and $x23 $x98)))
 (let (($x361 (and $x296 $x68)))
 (let (($x357 (and $x361 $x373)))
 (let (($x359 (and $x278 $x357)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x350 (and $x158 $x359)))
 (let (($x183 (bvugt ?x42 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x42 (_ bv3 32))))
 (let (($x288 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x28 (=> (bvule ?x42 (bvsub (bvadd ?x42 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x288 $x183)))))))
 (let (($x19 (=> (and $x175 (bvule ?x42 (bvsub (bvadd ?x42 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x288 $x183)))))))
 (let (($x176 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x124 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x203 (_ bv1 32))) (or false (or false (and true (or $x90 $x176)))))))
 (let (($x99 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x203 (_ bv1 32)))) (or false (or false (and true (or $x90 $x176)))))))
 (let (($x13 (and $x99 $x19)))
 (let (($x353 (and $x13 $x350)))
 (let (($x409 (=> $x353 $x453)))
 (not $x409)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var2443X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var2438X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x78)
                                #x00000004
                                #xff)
                         #x00000005
                         #xfd)
                  #x00000006
                  #xff)))
  (store (store (store (store a!1 #x00000004 #xff) #x00000008 #xff)
                #x00000007
                #xff)
         #xfffffffb
         #xff)))
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xff787878)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xff787878)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var2443X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2438X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 92
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2443X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2438X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x607 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x610 (concat ?x607 (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv4 32))))))
 (let ((?x612 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x621 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x622 (concat ?x621 (concat ?x612 ?x610))))
 (let (($x618 (= ?x622 ?x622)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x93 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x323 (bvuge ?x93 (_ bv1 32))))
 (let (($x619 (=> $x323 $x618)))
 (let ((?x627 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2443X))))
 (let ((?x600 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv2 32))) ?x627)))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv3 32))) ?x600)))
 (let (($x606 (= ?x605 ?x605)))
 (let (($x602 (=> $x323 $x606)))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem ?x75))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv2 32))) ?x53))))
 (let (($x575 (= (_ bv0 32) ?x238)))
 (let ((?x551 (ite $x575 (_ bv0 32) (_ bv1 32))))
 (let (($x553 (bvuge ?x551 (_ bv1 32))))
 (let (($x595 (= $x323 $x553)))
 (let (($x239 (= false false)))
 (let (($x475 (= ?x93 (_ bv0 32))))
 (let (($x594 (=> $x475 $x239)))
 (let (($x552 (= ?x551 (_ bv0 32))))
 (let (($x593 (= $x475 $x552)))
 (let (($x592 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x238)))
 (let (($x620 (and (and (and (and (and $x592 $x593) $x594) $x595) $x602) $x619)))
 (let ((?x563 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x564 (concat ?x563 (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv4 32))))))
 (let ((?x565 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x567 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x568 (concat ?x567 (concat ?x565 ?x564))))
 (let (($x587 (= ?x568 ?x568)))
 (let (($x81 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x194 (ite $x81 (_ bv0 32) (_ bv1 32))))
 (let (($x303 (bvuge ?x194 (_ bv1 32))))
 (let (($x569 (=> $x303 $x587)))
 (let ((?x557 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2438X))))
 (let ((?x580 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv2 32))) ?x557)))
 (let ((?x559 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv3 32))) ?x580)))
 (let (($x560 (= ?x559 ?x559)))
 (let (($x583 (=> $x303 $x560)))
 (let (($x554 (= $x303 $x553)))
 (let (($x315 (= ?x194 (_ bv0 32))))
 (let (($x576 (= $x315 $x552)))
 (let (($x589 (and (and (and (=> $x315 $x239) (= input.dst.llvm-%l ?x238)) $x576) $x554)))
 (let (($x591 (and (and $x589 $x583) $x569)))
 (let (($x549 (not true)))
 (let (($x624 (or (or $x549 $x591) $x620)))
 (let (($x573 (= true true)))
 (let (($x625 (and $x573 $x624)))
 (let (($x630 (= $x625 true)))
 (let ((?x230 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem ?x230))))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv2 32))) ?x353))))
 (let ((?x484 (bvadd ?x354 (_ bv4 32))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x484 (_ bv1 32))) (select input.dst.llvm-mem ?x484))))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x484 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x484 (_ bv2 32))) ?x365))))
 (let ((?x397 (bvadd ?x408 (_ bv4 32))))
 (let ((?x489 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv1 32))) (select input.dst.llvm-mem ?x397))))
 (let ((?x453 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv2 32))) ?x489))))
 (let ((?x426 (bvadd ?x453 (_ bv4 32))))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x426 (_ bv1 32))) (select input.dst.llvm-mem ?x426))))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x426 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x426 (_ bv2 32))) ?x457))))
 (let (($x461 (= (_ bv0 32) ?x460)))
 (let ((?x491 (ite $x461 (_ bv0 32) (_ bv1 32))))
 (let (($x462 (= ?x491 (_ bv0 32))))
 (let (($x327 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x507 (= $x327 $x462)))
 (let (($x258 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x289 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x214 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x170 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x306 (and $x170 $x214)))
 (let (($x445 (and $x306 $x289)))
 (let (($x341 (and $x445 $x258)))
 (let (($x540 (=> $x341 $x507)))
 (let ((?x487 (concat (select input.dst.llvm-mem (bvadd ?x453 (_ bv1 32))) (select input.dst.llvm-mem ?x453))))
 (let ((?x423 (concat (select input.dst.llvm-mem (bvadd ?x453 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x453 (_ bv2 32))) ?x487))))
 (let (($x539 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x423)))
 (let (($x509 (=> $x341 $x539)))
 (let (($x467 (bvuge ?x491 (_ bv1 32))))
 (let (($x345 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x512 (= $x345 $x467)))
 (let (($x508 (=> $x341 $x512)))
 (let (($x409 (= (_ bv0 32) ?x453)))
 (let ((?x434 (ite $x409 (_ bv0 32) (_ bv1 32))))
 (let (($x411 (bvuge ?x434 (_ bv1 32))))
 (let (($x511 (= $x258 $x411)))
 (let (($x538 (=> $x445 $x511)))
 (let (($x104 (= ?x434 (_ bv0 32))))
 (let (($x73 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x536 (= $x73 $x104)))
 (let (($x515 (=> $x445 $x536)))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv1 32))) (select input.dst.llvm-mem ?x408))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv2 32))) ?x388))))
 (let (($x506 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x407)))
 (let (($x514 (=> $x445 $x506)))
 (let (($x378 (= (_ bv0 32) ?x408)))
 (let ((?x380 (ite $x378 (_ bv0 32) (_ bv1 32))))
 (let (($x490 (bvuge ?x380 (_ bv1 32))))
 (let (($x534 (= $x289 $x490)))
 (let (($x531 (=> $x306 $x534)))
 (let (($x433 (= ?x380 (_ bv0 32))))
 (let (($x223 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x530 (= $x223 $x433)))
 (let (($x505 (=> $x306 $x530)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv1 32))) (select input.dst.llvm-mem ?x354))))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv2 32))) ?x348))))
 (let (($x504 (= input.spec-%var-l-1.2.1.2.0 ?x401)))
 (let (($x533 (=> $x306 $x504)))
 (let (($x371 (= (_ bv0 32) ?x354)))
 (let ((?x372 (ite $x371 (_ bv0 32) (_ bv1 32))))
 (let (($x402 (bvuge ?x372 (_ bv1 32))))
 (let (($x532 (= $x214 $x402)))
 (let (($x529 (=> $x170 $x532)))
 (let (($x370 (= ?x372 (_ bv0 32))))
 (let (($x295 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x526 (= $x295 $x370)))
 (let (($x503 (=> $x170 $x526)))
 (let ((?x150 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x64 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x328 (concat (select input.dst.llvm-mem ?x64) (concat ?x334 (concat ?x143 ?x150)))))
 (let (($x523 (= input.spec-%var-l-1.2.0 ?x328)))
 (let (($x502 (=> $x170 $x523)))
 (let (($x537 (= $x170 $x323)))
 (let (($x311 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x520 (= $x311 $x475)))
 (let (($x141 (and $x341 $x327)))
 (let (($x309 (=> $x141 $x239)))
 (let (($x300 (and $x445 $x73)))
 (let (($x379 (=> $x300 $x239)))
 (let (($x139 (and $x306 $x223)))
 (let (($x320 (=> $x139 $x239)))
 (let (($x541 (and (and (and (=> $x311 $x239) (=> (and $x170 $x295) $x239)) $x320) $x379)))
 (let (($x121 (and (and (and (and (and (and $x541 $x309) $x520) $x537) $x502) $x503) $x529)))
 (let (($x160 (and (and (and (and (and (and $x121 $x533) $x505) $x531) $x514) $x515) $x538)))
 (let (($x545 (and (and (and $x160 $x508) $x509) $x540)))
 (let (($x546 (= $x545 true)))
 (let (($x466 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x464 (= $x466 $x467)))
 (let (($x413 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x383 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x483 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x171 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x367 (and $x171 $x483)))
 (let (($x390 (and $x367 $x383)))
 (let (($x419 (and $x390 $x413)))
 (let (($x497 (=> $x419 $x464)))
 (let (($x427 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x498 (= $x427 $x462)))
 (let (($x469 (=> $x419 $x498)))
 (let (($x455 (and $x419 $x427)))
 (let (($x428 (=> $x455 $x239)))
 (let (($x421 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x423)))
 (let (($x438 (=> $x419 $x421)))
 (let (($x415 (= $x413 $x411)))
 (let (($x418 (=> $x390 $x415)))
 (let (($x236 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x412 (and $x390 $x236)))
 (let (($x416 (=> $x412 $x239)))
 (let (($x128 (= $x236 $x104)))
 (let (($x205 (=> $x390 $x128)))
 (let (($x381 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x452 (and $x367 $x381)))
 (let (($x108 (=> $x452 $x239)))
 (let (($x398 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x407)))
 (let (($x436 (=> $x390 $x398)))
 (let (($x56 (= $x381 $x433)))
 (let (($x493 (=> $x367 $x56)))
 (let (($x36 (= $x383 $x490)))
 (let (($x406 (=> $x367 $x36)))
 (let (($x450 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x401)))
 (let (($x400 (=> $x367 $x450)))
 (let (($x448 (= $x483 $x402)))
 (let (($x385 (=> $x171 $x448)))
 (let (($x442 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x178 (= $x442 $x370)))
 (let (($x235 (=> $x171 $x178)))
 (let (($x41 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x328)))
 (let (($x373 (=> $x171 $x41)))
 (let (($x319 (and $x171 $x442)))
 (let (($x346 (=> $x319 $x239)))
 (let (($x337 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x321 (=> $x337 $x239)))
 (let (($x499 (and (and (and (and (and (= $x337 $x475) (= $x171 $x323)) $x321) $x346) $x373) $x235)))
 (let (($x477 (and (and (and (and (and (and $x499 $x385) $x400) $x406) $x493) $x436) $x108)))
 (let (($x501 (and (and (and (and (and (and $x477 $x205) $x416) $x418) $x438) $x428) $x469)))
 (let (($x525 (and $x501 $x497)))
 (let (($x521 (= $x525 true)))
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x127 (concat ?x255 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x375 (concat ?x54 (concat ?x149 ?x127))))
 (let ((?x47 (bvadd ?x375 (_ bv4 32))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv1 32))) (select input.dst.llvm-mem ?x47))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv2 32))) ?x45))))
 (let ((?x271 (bvadd ?x232 (_ bv4 32))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem ?x271))))
 (let ((?x446 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv2 32))) ?x314))))
 (let ((?x325 (bvadd ?x446 (_ bv4 32))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv1 32))) (select input.dst.llvm-mem ?x325))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv2 32))) ?x8))))
 (let (($x322 (= (_ bv0 32) ?x249)))
 (let ((?x324 (ite $x322 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x324 (_ bv1 32))))
 (let (($x27 (= $x345 $x188)))
 (let (($x247 (=> $x341 $x27)))
 (let (($x340 (= ?x324 (_ bv0 32))))
 (let (($x441 (= $x327 $x340)))
 (let (($x342 (=> $x341 $x441)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv1 32))) (select input.dst.llvm-mem ?x446))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv2 32))) ?x209))))
 (let (($x339 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x6)))
 (let (($x335 (=> $x341 $x339)))
 (let (($x248 (= (_ bv0 32) ?x446)))
 (let ((?x439 (ite $x248 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x439 (_ bv1 32))))
 (let (($x242 (= $x258 $x40)))
 (let (($x216 (=> $x445 $x242)))
 (let (($x101 (= ?x439 (_ bv0 32))))
 (let (($x34 (= $x73 $x101)))
 (let (($x115 (=> $x445 $x34)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x24))))
 (let (($x257 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x329)))
 (let (($x155 (=> $x445 $x257)))
 (let (($x61 (= (_ bv0 32) ?x232)))
 (let ((?x299 (ite $x61 (_ bv0 32) (_ bv1 32))))
 (let (($x50 (bvuge ?x299 (_ bv1 32))))
 (let (($x195 (= $x289 $x50)))
 (let (($x290 (=> $x306 $x195)))
 (let (($x287 (= ?x299 (_ bv0 32))))
 (let (($x240 (= $x223 $x287)))
 (let (($x144 (=> $x306 $x240)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x375 (_ bv1 32))) (select input.dst.llvm-mem ?x375))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x375 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x375 (_ bv2 32))) ?x173))))
 (let (($x5 (= input.spec-%var-l-1.2.1.2.0 ?x22)))
 (let (($x294 (=> $x306 $x5)))
 (let (($x251 (= (_ bv0 32) ?x375)))
 (let ((?x132 (ite $x251 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x132 (_ bv1 32))))
 (let (($x237 (= $x214 $x208)))
 (let (($x57 (=> $x170 $x237)))
 (let (($x181 (and $x170 $x295)))
 (let (($x91 (=> $x181 $x239)))
 (let (($x272 (= ?x132 (_ bv0 32))))
 (let (($x148 (= $x295 $x272)))
 (let (($x116 (=> $x170 $x148)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x262)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x134)))
 (let (($x156 (= input.spec-%var-l-1.2.0 ?x267)))
 (let (($x219 (=> $x170 $x156)))
 (let (($x26 (and (and (and (and (= $x311 $x315) (= $x170 $x303)) (=> $x311 $x239)) $x219) $x116)))
 (let (($x273 (and (and (and (and (and (and $x26 $x91) $x57) $x294) $x144) $x290) $x320)))
 (let (($x277 (and (and (and (and (and (and $x273 $x155) $x115) $x379) $x216) $x335) $x309)))
 (let (($x68 (and (and $x277 $x342) $x247)))
 (let (($x361 (= $x68 true)))
 (let ((?x293 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x55 (= (_ bv0 3) ?x293)))
 (let (($x199 (= $x55 true)))
 (let (($x106 (= $x199 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x226 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x35 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226))))
 (let (($x182 (and true $x35)))
 (let (($x187 (and $x35 $x182)))
 (let (($x60 (= (bvand ?x238 (_ bv4294967288 32)) ?x238)))
 (let (($x184 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x265 (and $x184 $x60)))
 (let (($x227 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv4 32))) (bvult ?x75 (bvsub ?x75 (_ bv4 32))))))
 (let (($x304 (and (and (and (and (and $x182 $x227) $x184) $x265) $x187) $x190)))
 (let (($x88 (= true $x304)))
 (let (($x175 (not $x136)))
 (let (($x283 (=> $x175 $x88)))
 (let (($x215 (= $x283 true)))
 (let (($x177 (= $x215 true)))
 (let (($x146 (= $x177 true)))
 (let (($x197 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x122 (= $x197 true)))
 (let (($x49 (= $x122 true)))
 (let (($x133 (= $x49 true)))
 (let (($x74 (= $x175 true)))
 (let (($x193 (= $x74 true)))
 (let (($x71 (= $x193 true)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x213)))
 (let ((?x286 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x286)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x228 $x38)))
 (let (($x110 (and $x39 $x123)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x164 $x110)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x51)))))))
 (let (($x70 (and $x119 $x78)))
 (let (($x52 (= $x70 true)))
 (let (($x153 (= $x52 true)))
 (let (($x11 (= $x153 true)))
 (let ((?x82 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x166 (bvneg ?x82)))
 (let (($x147 (= ?x166 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x163 (= $x147 true)))
 (let (($x63 (= $x163 true)))
 (let (($x84 (and $x63 $x11)))
 (let (($x172 (and $x84 $x71)))
 (let (($x33 (and $x172 $x133)))
 (let (($x250 (and $x33 $x146)))
 (let (($x165 (and $x250 $x106)))
 (let (($x338 (and $x165 $x361)))
 (let (($x522 (and $x338 $x521)))
 (let (($x571 (and $x522 $x546)))
 (let (($x572 (and $x171 $x571)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x547 (and $x18 $x572)))
 (let (($x233 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x75 (_ bv3 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x158 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x191 $x233)))))))
 (let (($x256 (=> (and $x175 (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x191 $x233)))))))
 (let (($x16 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x129 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x230 (_ bv1 32))) (or false (or false (and true (or $x167 $x16)))))))
 (let (($x9 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x230 (_ bv1 32)))) (or false (or false (and true (or $x167 $x16)))))))
 (let (($x130 (and $x9 $x256)))
 (let (($x548 (and $x130 $x547)))
 (let (($x666 (=> $x548 $x630)))
 (not $x666)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2443X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var2438X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x607 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x610 (concat ?x607 (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv4 32))))))
 (let ((?x612 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x621 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2443X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x622 (concat ?x621 (concat ?x612 ?x610))))
 (let (($x618 (= ?x622 ?x622)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x93 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x323 (bvuge ?x93 (_ bv1 32))))
 (let (($x619 (=> $x323 $x618)))
 (let ((?x627 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2443X))))
 (let ((?x600 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv2 32))) ?x627)))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2443X (_ bv3 32))) ?x600)))
 (let (($x606 (= ?x605 ?x605)))
 (let (($x602 (=> $x323 $x606)))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem ?x75))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv2 32))) ?x53))))
 (let (($x575 (= (_ bv0 32) ?x238)))
 (let ((?x551 (ite $x575 (_ bv0 32) (_ bv1 32))))
 (let (($x553 (bvuge ?x551 (_ bv1 32))))
 (let (($x595 (= $x323 $x553)))
 (let (($x239 (= false false)))
 (let (($x475 (= ?x93 (_ bv0 32))))
 (let (($x594 (=> $x475 $x239)))
 (let (($x552 (= ?x551 (_ bv0 32))))
 (let (($x593 (= $x475 $x552)))
 (let (($x592 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x238)))
 (let (($x620 (and (and (and (and (and $x592 $x593) $x594) $x595) $x602) $x619)))
 (let ((?x563 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x564 (concat ?x563 (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv4 32))))))
 (let ((?x565 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x567 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2438X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x568 (concat ?x567 (concat ?x565 ?x564))))
 (let (($x587 (= ?x568 ?x568)))
 (let (($x81 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x194 (ite $x81 (_ bv0 32) (_ bv1 32))))
 (let (($x303 (bvuge ?x194 (_ bv1 32))))
 (let (($x569 (=> $x303 $x587)))
 (let ((?x557 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2438X))))
 (let ((?x580 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv2 32))) ?x557)))
 (let ((?x559 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2438X (_ bv3 32))) ?x580)))
 (let (($x560 (= ?x559 ?x559)))
 (let (($x583 (=> $x303 $x560)))
 (let (($x554 (= $x303 $x553)))
 (let (($x315 (= ?x194 (_ bv0 32))))
 (let (($x576 (= $x315 $x552)))
 (let (($x589 (and (and (and (=> $x315 $x239) (= input.dst.llvm-%l ?x238)) $x576) $x554)))
 (let (($x591 (and (and $x589 $x583) $x569)))
 (let (($x549 (not true)))
 (let (($x624 (or (or $x549 $x591) $x620)))
 (let (($x573 (= true true)))
 (let (($x625 (and $x573 $x624)))
 (let (($x630 (= $x625 true)))
 (let ((?x230 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem ?x230))))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv2 32))) ?x353))))
 (let ((?x484 (bvadd ?x354 (_ bv4 32))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x484 (_ bv1 32))) (select input.dst.llvm-mem ?x484))))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x484 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x484 (_ bv2 32))) ?x365))))
 (let ((?x397 (bvadd ?x408 (_ bv4 32))))
 (let ((?x489 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv1 32))) (select input.dst.llvm-mem ?x397))))
 (let ((?x453 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv2 32))) ?x489))))
 (let ((?x426 (bvadd ?x453 (_ bv4 32))))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x426 (_ bv1 32))) (select input.dst.llvm-mem ?x426))))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd ?x426 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x426 (_ bv2 32))) ?x457))))
 (let (($x461 (= (_ bv0 32) ?x460)))
 (let ((?x491 (ite $x461 (_ bv0 32) (_ bv1 32))))
 (let (($x462 (= ?x491 (_ bv0 32))))
 (let (($x327 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x507 (= $x327 $x462)))
 (let (($x258 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x289 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x214 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x170 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x306 (and $x170 $x214)))
 (let (($x445 (and $x306 $x289)))
 (let (($x341 (and $x445 $x258)))
 (let (($x540 (=> $x341 $x507)))
 (let ((?x487 (concat (select input.dst.llvm-mem (bvadd ?x453 (_ bv1 32))) (select input.dst.llvm-mem ?x453))))
 (let ((?x423 (concat (select input.dst.llvm-mem (bvadd ?x453 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x453 (_ bv2 32))) ?x487))))
 (let (($x539 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x423)))
 (let (($x509 (=> $x341 $x539)))
 (let (($x467 (bvuge ?x491 (_ bv1 32))))
 (let (($x345 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x512 (= $x345 $x467)))
 (let (($x508 (=> $x341 $x512)))
 (let (($x409 (= (_ bv0 32) ?x453)))
 (let ((?x434 (ite $x409 (_ bv0 32) (_ bv1 32))))
 (let (($x411 (bvuge ?x434 (_ bv1 32))))
 (let (($x511 (= $x258 $x411)))
 (let (($x538 (=> $x445 $x511)))
 (let (($x104 (= ?x434 (_ bv0 32))))
 (let (($x73 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x536 (= $x73 $x104)))
 (let (($x515 (=> $x445 $x536)))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv1 32))) (select input.dst.llvm-mem ?x408))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv2 32))) ?x388))))
 (let (($x506 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x407)))
 (let (($x514 (=> $x445 $x506)))
 (let (($x378 (= (_ bv0 32) ?x408)))
 (let ((?x380 (ite $x378 (_ bv0 32) (_ bv1 32))))
 (let (($x490 (bvuge ?x380 (_ bv1 32))))
 (let (($x534 (= $x289 $x490)))
 (let (($x531 (=> $x306 $x534)))
 (let (($x433 (= ?x380 (_ bv0 32))))
 (let (($x223 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x530 (= $x223 $x433)))
 (let (($x505 (=> $x306 $x530)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv1 32))) (select input.dst.llvm-mem ?x354))))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv2 32))) ?x348))))
 (let (($x504 (= input.spec-%var-l-1.2.1.2.0 ?x401)))
 (let (($x533 (=> $x306 $x504)))
 (let (($x371 (= (_ bv0 32) ?x354)))
 (let ((?x372 (ite $x371 (_ bv0 32) (_ bv1 32))))
 (let (($x402 (bvuge ?x372 (_ bv1 32))))
 (let (($x532 (= $x214 $x402)))
 (let (($x529 (=> $x170 $x532)))
 (let (($x370 (= ?x372 (_ bv0 32))))
 (let (($x295 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x526 (= $x295 $x370)))
 (let (($x503 (=> $x170 $x526)))
 (let ((?x150 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x64 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x328 (concat (select input.dst.llvm-mem ?x64) (concat ?x334 (concat ?x143 ?x150)))))
 (let (($x523 (= input.spec-%var-l-1.2.0 ?x328)))
 (let (($x502 (=> $x170 $x523)))
 (let (($x537 (= $x170 $x323)))
 (let (($x311 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x520 (= $x311 $x475)))
 (let (($x141 (and $x341 $x327)))
 (let (($x309 (=> $x141 $x239)))
 (let (($x300 (and $x445 $x73)))
 (let (($x379 (=> $x300 $x239)))
 (let (($x139 (and $x306 $x223)))
 (let (($x320 (=> $x139 $x239)))
 (let (($x541 (and (and (and (=> $x311 $x239) (=> (and $x170 $x295) $x239)) $x320) $x379)))
 (let (($x121 (and (and (and (and (and (and $x541 $x309) $x520) $x537) $x502) $x503) $x529)))
 (let (($x160 (and (and (and (and (and (and $x121 $x533) $x505) $x531) $x514) $x515) $x538)))
 (let (($x545 (and (and (and $x160 $x508) $x509) $x540)))
 (let (($x546 (= $x545 true)))
 (let (($x466 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x464 (= $x466 $x467)))
 (let (($x413 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x383 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x483 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x171 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x367 (and $x171 $x483)))
 (let (($x390 (and $x367 $x383)))
 (let (($x419 (and $x390 $x413)))
 (let (($x497 (=> $x419 $x464)))
 (let (($x427 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x498 (= $x427 $x462)))
 (let (($x469 (=> $x419 $x498)))
 (let (($x455 (and $x419 $x427)))
 (let (($x428 (=> $x455 $x239)))
 (let (($x421 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x423)))
 (let (($x438 (=> $x419 $x421)))
 (let (($x415 (= $x413 $x411)))
 (let (($x418 (=> $x390 $x415)))
 (let (($x236 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x412 (and $x390 $x236)))
 (let (($x416 (=> $x412 $x239)))
 (let (($x128 (= $x236 $x104)))
 (let (($x205 (=> $x390 $x128)))
 (let (($x381 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x452 (and $x367 $x381)))
 (let (($x108 (=> $x452 $x239)))
 (let (($x398 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x407)))
 (let (($x436 (=> $x390 $x398)))
 (let (($x56 (= $x381 $x433)))
 (let (($x493 (=> $x367 $x56)))
 (let (($x36 (= $x383 $x490)))
 (let (($x406 (=> $x367 $x36)))
 (let (($x450 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x401)))
 (let (($x400 (=> $x367 $x450)))
 (let (($x448 (= $x483 $x402)))
 (let (($x385 (=> $x171 $x448)))
 (let (($x442 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x178 (= $x442 $x370)))
 (let (($x235 (=> $x171 $x178)))
 (let (($x41 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x328)))
 (let (($x373 (=> $x171 $x41)))
 (let (($x319 (and $x171 $x442)))
 (let (($x346 (=> $x319 $x239)))
 (let (($x337 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x321 (=> $x337 $x239)))
 (let (($x499 (and (and (and (and (and (= $x337 $x475) (= $x171 $x323)) $x321) $x346) $x373) $x235)))
 (let (($x477 (and (and (and (and (and (and $x499 $x385) $x400) $x406) $x493) $x436) $x108)))
 (let (($x501 (and (and (and (and (and (and $x477 $x205) $x416) $x418) $x438) $x428) $x469)))
 (let (($x525 (and $x501 $x497)))
 (let (($x521 (= $x525 true)))
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x127 (concat ?x255 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x375 (concat ?x54 (concat ?x149 ?x127))))
 (let ((?x47 (bvadd ?x375 (_ bv4 32))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv1 32))) (select input.dst.llvm-mem ?x47))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv2 32))) ?x45))))
 (let ((?x271 (bvadd ?x232 (_ bv4 32))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem ?x271))))
 (let ((?x446 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv2 32))) ?x314))))
 (let ((?x325 (bvadd ?x446 (_ bv4 32))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv1 32))) (select input.dst.llvm-mem ?x325))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv2 32))) ?x8))))
 (let (($x322 (= (_ bv0 32) ?x249)))
 (let ((?x324 (ite $x322 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x324 (_ bv1 32))))
 (let (($x27 (= $x345 $x188)))
 (let (($x247 (=> $x341 $x27)))
 (let (($x340 (= ?x324 (_ bv0 32))))
 (let (($x441 (= $x327 $x340)))
 (let (($x342 (=> $x341 $x441)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv1 32))) (select input.dst.llvm-mem ?x446))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv2 32))) ?x209))))
 (let (($x339 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x6)))
 (let (($x335 (=> $x341 $x339)))
 (let (($x248 (= (_ bv0 32) ?x446)))
 (let ((?x439 (ite $x248 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x439 (_ bv1 32))))
 (let (($x242 (= $x258 $x40)))
 (let (($x216 (=> $x445 $x242)))
 (let (($x101 (= ?x439 (_ bv0 32))))
 (let (($x34 (= $x73 $x101)))
 (let (($x115 (=> $x445 $x34)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x24))))
 (let (($x257 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x329)))
 (let (($x155 (=> $x445 $x257)))
 (let (($x61 (= (_ bv0 32) ?x232)))
 (let ((?x299 (ite $x61 (_ bv0 32) (_ bv1 32))))
 (let (($x50 (bvuge ?x299 (_ bv1 32))))
 (let (($x195 (= $x289 $x50)))
 (let (($x290 (=> $x306 $x195)))
 (let (($x287 (= ?x299 (_ bv0 32))))
 (let (($x240 (= $x223 $x287)))
 (let (($x144 (=> $x306 $x240)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x375 (_ bv1 32))) (select input.dst.llvm-mem ?x375))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x375 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x375 (_ bv2 32))) ?x173))))
 (let (($x5 (= input.spec-%var-l-1.2.1.2.0 ?x22)))
 (let (($x294 (=> $x306 $x5)))
 (let (($x251 (= (_ bv0 32) ?x375)))
 (let ((?x132 (ite $x251 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x132 (_ bv1 32))))
 (let (($x237 (= $x214 $x208)))
 (let (($x57 (=> $x170 $x237)))
 (let (($x181 (and $x170 $x295)))
 (let (($x91 (=> $x181 $x239)))
 (let (($x272 (= ?x132 (_ bv0 32))))
 (let (($x148 (= $x295 $x272)))
 (let (($x116 (=> $x170 $x148)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x262)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x134)))
 (let (($x156 (= input.spec-%var-l-1.2.0 ?x267)))
 (let (($x219 (=> $x170 $x156)))
 (let (($x26 (and (and (and (and (= $x311 $x315) (= $x170 $x303)) (=> $x311 $x239)) $x219) $x116)))
 (let (($x273 (and (and (and (and (and (and $x26 $x91) $x57) $x294) $x144) $x290) $x320)))
 (let (($x277 (and (and (and (and (and (and $x273 $x155) $x115) $x379) $x216) $x335) $x309)))
 (let (($x68 (and (and $x277 $x342) $x247)))
 (let (($x361 (= $x68 true)))
 (let ((?x293 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x55 (= (_ bv0 3) ?x293)))
 (let (($x199 (= $x55 true)))
 (let (($x106 (= $x199 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x226 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x35 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226))))
 (let (($x182 (and true $x35)))
 (let (($x187 (and $x35 $x182)))
 (let (($x60 (= (bvand ?x238 (_ bv4294967288 32)) ?x238)))
 (let (($x184 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x265 (and $x184 $x60)))
 (let (($x227 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv4 32))) (bvult ?x75 (bvsub ?x75 (_ bv4 32))))))
 (let (($x304 (and (and (and (and (and $x182 $x227) $x184) $x265) $x187) $x190)))
 (let (($x88 (= true $x304)))
 (let (($x175 (not $x136)))
 (let (($x283 (=> $x175 $x88)))
 (let (($x215 (= $x283 true)))
 (let (($x177 (= $x215 true)))
 (let (($x146 (= $x177 true)))
 (let (($x197 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x122 (= $x197 true)))
 (let (($x49 (= $x122 true)))
 (let (($x133 (= $x49 true)))
 (let (($x74 (= $x175 true)))
 (let (($x193 (= $x74 true)))
 (let (($x71 (= $x193 true)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x213)))
 (let ((?x286 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x286)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x228 $x38)))
 (let (($x110 (and $x39 $x123)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x164 $x110)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x119 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x51)))))))
 (let (($x70 (and $x119 $x78)))
 (let (($x52 (= $x70 true)))
 (let (($x153 (= $x52 true)))
 (let (($x11 (= $x153 true)))
 (let ((?x82 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x166 (bvneg ?x82)))
 (let (($x147 (= ?x166 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x163 (= $x147 true)))
 (let (($x63 (= $x163 true)))
 (let (($x84 (and $x63 $x11)))
 (let (($x172 (and $x84 $x71)))
 (let (($x33 (and $x172 $x133)))
 (let (($x250 (and $x33 $x146)))
 (let (($x165 (and $x250 $x106)))
 (let (($x338 (and $x165 $x361)))
 (let (($x522 (and $x338 $x521)))
 (let (($x571 (and $x522 $x546)))
 (let (($x572 (and $x171 $x571)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x547 (and $x18 $x572)))
 (let (($x233 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x75 (_ bv3 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x158 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x191 $x233)))))))
 (let (($x256 (=> (and $x175 (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x191 $x233)))))))
 (let (($x16 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x129 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x230 (_ bv1 32))) (or false (or false (and true (or $x167 $x16)))))))
 (let (($x9 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x230 (_ bv1 32)))) (or false (or false (and true (or $x167 $x16)))))))
 (let (($x130 (and $x9 $x256)))
 (let (($x548 (and $x130 $x547)))
 (let (($x666 (=> $x548 $x630)))
 (not $x666)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00800000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!67))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.ind-%var2443X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2438X () (_ BitVec 32)
    #x00000000)
  (define-fun k!67 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #xff000004) #xf8
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #xff000000) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #xff000003) #x00
    (ite (= x!0 #xff000002) #x00
    (ite (= x!0 #xff000006) #xff
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #xff000001) #x00
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #xff000005) #xff
    (ite (= x!0 #xff000007) #xff
    (ite (= x!0 #x00000007) #xff
    (ite (= x!0 #xfffffffd) #x00
    (ite (= x!0 #xfffffff8) #x00
      #x00)))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!67))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00400000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var2443X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var2438X () (_ BitVec 32)
    #x00000000)
  (define-fun k!67 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001005) #x00
    (ite (= x!0 #x08000004) #x01
    (ite (= x!0 #x00000047) #x00
    (ite (= x!0 #x00000046) #x00
    (ite (= x!0 #x80000005) #x00
    (ite (= x!0 #x02000001) #x00
    (ite (= x!0 #x08000001) #x00
    (ite (= x!0 #x00004001) #x00
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x0000000c) #x00
    (ite (= x!0 #x02000008) #x80
    (ite (= x!0 #x00004007) #x02
    (ite (= x!0 #x08000002) #x00
    (ite (= x!0 #x00000044) #x01
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00004005) #x00
    (ite (= x!0 #x80000000) #x00
    (ite (= x!0 #x02000003) #x00
    (ite (= x!0 #x80000001) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x08000005) #x00
    (ite (= x!0 #x00004004) #x01
    (ite (= x!0 #x80000006) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x0000000d) #x40
    (ite (= x!0 #x02000005) #x00
    (ite (= x!0 #x08000000) #x00
    (ite (= x!0 #x00000045) #x10
    (ite (= x!0 #x80000007) #x00
    (ite (= x!0 #x02000006) #x00
    (ite (= x!0 #x00000040) #x00
    (ite (= x!0 #x80000003) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x00001008) #x08
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x08000006) #x00
    (ite (= x!0 #x00001007) #x00
    (ite (= x!0 #x00001001) #x00
    (ite (= x!0 #x08000007) #x00
    (ite (= x!0 #x00000041) #x00
    (ite (= x!0 #x00000005) #x40
    (ite (= x!0 #x80000004) #x01
    (ite (= x!0 #x00004003) #x00
    (ite (= x!0 #x02000002) #x00
    (ite (= x!0 #x00000042) #x00
    (ite (= x!0 #x00004000) #x00
    (ite (= x!0 #x02000007) #x00
    (ite (= x!0 #x08000003) #x00
    (ite (= x!0 #x00004002) #x00
    (ite (= x!0 #x00001006) #x00
    (ite (= x!0 #x80000002) #x00
    (ite (= x!0 #x02000004) #x01
    (ite (= x!0 #x00001004) #x01
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000043) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x00001003) #x00
    (ite (= x!0 #x00004006) #x00
    (ite (= x!0 #x00001002) #x00
    (ite (= x!0 #x00000009) #x00
      #x00))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 93
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x126 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x37))))
 (let ((?x245 ((_ extract 2 0) ?x60)))
 (let (($x292 (= (_ bv0 3) ?x245)))
 (let (($x54 (= $x292 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x262 (bvuge ?x44 (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x134 (= $x166 $x262)))
 (let (($x356 (= ?x44 (_ bv0 32))))
 (let (($x77 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x92 (= $x77 $x356)))
 (let (($x267 (and $x92 $x134)))
 (let (($x156 (= $x267 true)))
 (let (($x303 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x66 (ite $x303 (_ bv0 32) (_ bv1 32))))
 (let (($x225 (bvuge ?x66 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x186 (= $x151 $x225)))
 (let (($x154 (= ?x66 (_ bv0 32))))
 (let (($x301 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x239 (= $x301 $x154)))
 (let (($x48 (and $x239 $x186)))
 (let (($x201 (= $x48 true)))
 (let ((?x196 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x311 (= (_ bv0 3) ?x196)))
 (let (($x259 (= $x311 true)))
 (let (($x81 (= $x259 true)))
 (let (($x304 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x182 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x113 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x182) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x182))))
 (let (($x227 (and true $x113)))
 (let (($x111 (and $x113 $x227)))
 (let (($x187 (= (bvand ?x60 (_ bv4294967288 32)) ?x60)))
 (let (($x169 (= (bvand ?x126 (_ bv4294967292 32)) ?x126)))
 (let (($x307 (and $x169 $x187)))
 (let (($x157 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x126 (bvsub ?x126 (_ bv4 32))) (bvult ?x126 (bvsub ?x126 (_ bv4 32))))))
 (let (($x146 (and (and (and (and (and $x227 $x157) $x169) $x307) $x111) $x304)))
 (let (($x250 (= true $x146)))
 (let (($x175 (not $x136)))
 (let (($x23 (=> $x175 $x250)))
 (let (($x293 (= $x23 true)))
 (let (($x55 (= $x293 true)))
 (let (($x199 (= $x55 true)))
 (let (($x297 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x297 true)))
 (let (($x109 (= $x226 true)))
 (let (($x231 (= $x109 true)))
 (let (($x197 (= $x175 true)))
 (let (($x122 (= $x197 true)))
 (let (($x49 (= $x122 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x52)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x123 $x78)))
 (let (($x11 (and $x70 $x153)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x224 $x11)))
 (let (($x270 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x213 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x270)))))))
 (let (($x74 (and $x213 $x84)))
 (let (($x193 (= $x74 true)))
 (let (($x71 (= $x193 true)))
 (let (($x172 (= $x71 true)))
 (let ((?x163 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x163)))
 (let (($x234 (= ?x63 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x31 (= $x234 true)))
 (let (($x200 (= $x31 true)))
 (let (($x131 (and $x200 $x172)))
 (let (($x133 (and $x131 $x49)))
 (let (($x35 (and $x133 $x231)))
 (let (($x106 (and $x35 $x199)))
 (let (($x194 (and $x106 $x81)))
 (let (($x117 (and $x194 $x201)))
 (let (($x219 (and $x117 $x156)))
 (let (($x7 (and $x166 $x219)))
 (let (($x260 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x87 (and $x260 $x7)))
 (let (($x19 (bvugt ?x126 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x126 (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x18 (=> (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x19)))))))
 (let (($x168 (=> (and $x175 (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x28 $x19)))))))
 (let (($x99 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x288 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x183 (=> $x288 (or false (or false (and true (or $x124 $x99)))))))
 (let (($x112 (=> (and $x175 $x288) (or false (or false (and true (or $x124 $x99)))))))
 (let (($x32 (and $x112 $x168)))
 (let (($x295 (and $x32 $x87)))
 (let (($x114 (=> $x295 $x54)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x126 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x37))))
 (let ((?x245 ((_ extract 2 0) ?x60)))
 (let (($x292 (= (_ bv0 3) ?x245)))
 (let (($x54 (= $x292 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x262 (bvuge ?x44 (_ bv1 32))))
 (let (($x166 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x134 (= $x166 $x262)))
 (let (($x356 (= ?x44 (_ bv0 32))))
 (let (($x77 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x92 (= $x77 $x356)))
 (let (($x267 (and $x92 $x134)))
 (let (($x156 (= $x267 true)))
 (let (($x303 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x66 (ite $x303 (_ bv0 32) (_ bv1 32))))
 (let (($x225 (bvuge ?x66 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x186 (= $x151 $x225)))
 (let (($x154 (= ?x66 (_ bv0 32))))
 (let (($x301 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x239 (= $x301 $x154)))
 (let (($x48 (and $x239 $x186)))
 (let (($x201 (= $x48 true)))
 (let ((?x196 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x311 (= (_ bv0 3) ?x196)))
 (let (($x259 (= $x311 true)))
 (let (($x81 (= $x259 true)))
 (let (($x304 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x182 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x113 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x182) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x182))))
 (let (($x227 (and true $x113)))
 (let (($x111 (and $x113 $x227)))
 (let (($x187 (= (bvand ?x60 (_ bv4294967288 32)) ?x60)))
 (let (($x169 (= (bvand ?x126 (_ bv4294967292 32)) ?x126)))
 (let (($x307 (and $x169 $x187)))
 (let (($x157 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x126 (bvsub ?x126 (_ bv4 32))) (bvult ?x126 (bvsub ?x126 (_ bv4 32))))))
 (let (($x146 (and (and (and (and (and $x227 $x157) $x169) $x307) $x111) $x304)))
 (let (($x250 (= true $x146)))
 (let (($x175 (not $x136)))
 (let (($x23 (=> $x175 $x250)))
 (let (($x293 (= $x23 true)))
 (let (($x55 (= $x293 true)))
 (let (($x199 (= $x55 true)))
 (let (($x297 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x297 true)))
 (let (($x109 (= $x226 true)))
 (let (($x231 (= $x109 true)))
 (let (($x197 (= $x175 true)))
 (let (($x122 (= $x197 true)))
 (let (($x49 (= $x122 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x52)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x123 $x78)))
 (let (($x11 (and $x70 $x153)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x224 $x11)))
 (let (($x270 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x213 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x270)))))))
 (let (($x74 (and $x213 $x84)))
 (let (($x193 (= $x74 true)))
 (let (($x71 (= $x193 true)))
 (let (($x172 (= $x71 true)))
 (let ((?x163 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x163)))
 (let (($x234 (= ?x63 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x31 (= $x234 true)))
 (let (($x200 (= $x31 true)))
 (let (($x131 (and $x200 $x172)))
 (let (($x133 (and $x131 $x49)))
 (let (($x35 (and $x133 $x231)))
 (let (($x106 (and $x35 $x199)))
 (let (($x194 (and $x106 $x81)))
 (let (($x117 (and $x194 $x201)))
 (let (($x219 (and $x117 $x156)))
 (let (($x7 (and $x166 $x219)))
 (let (($x260 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x87 (and $x260 $x7)))
 (let (($x19 (bvugt ?x126 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x126 (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x18 (=> (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x19)))))))
 (let (($x168 (=> (and $x175 (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x28 $x19)))))))
 (let (($x99 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x288 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x183 (=> $x288 (or false (or false (and true (or $x124 $x99)))))))
 (let (($x112 (=> (and $x175 $x288) (or false (or false (and true (or $x124 $x99)))))))
 (let (($x32 (and $x112 $x168)))
 (let (($x295 (and $x32 $x87)))
 (let (($x114 (=> $x295 $x54)))
 (not $x114)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 94
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x42 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x132 (concat (select input.dst.llvm-mem ?x42) (concat ?x118 (concat ?x255 ?x206)))))
 (let ((?x272 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x132)))
 (let ((?x149 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x203 (bvmul (_ bv4294967295 32) ?x149)))
 (let ((?x179 (bvneg ?x203)))
 (let (($x148 (= ?x179 ?x272)))
 (let (($x116 (= $x148 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x262 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x262 (_ bv1 32))))
 (let (($x63 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x219 (= $x63 $x156)))
 (let (($x134 (= ?x262 (_ bv0 32))))
 (let (($x166 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x267 (= $x166 $x134)))
 (let (($x7 (and $x267 $x219)))
 (let (($x87 (= $x7 true)))
 (let (($x225 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x186 (ite $x225 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x186 (_ bv1 32))))
 (let (($x117 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x77 (= $x117 $x82)))
 (let (($x48 (= ?x186 (_ bv0 32))))
 (let (($x239 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x201 (= $x239 $x48)))
 (let (($x44 (and $x201 $x77)))
 (let (($x356 (= $x44 true)))
 (let ((?x81 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x81)))
 (let (($x301 (= ?x194 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x170 (= $x301 true)))
 (let (($x303 (= $x170 true)))
 (let ((?x55 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x199 (= (_ bv0 3) ?x55)))
 (let (($x106 (= $x199 true)))
 (let (($x165 (= $x106 true)))
 (let (($x265 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x226 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226))))
 (let (($x182 (and true $x83)))
 (let (($x159 (and $x83 $x182)))
 (let ((?x288 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x169))))
 (let (($x105 (= (bvand ?x238 (_ bv4294967288 32)) ?x238)))
 (let (($x184 (= (bvand ?x288 (_ bv4294967292 32)) ?x288)))
 (let (($x37 (and $x184 $x105)))
 (let (($x264 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x288 (bvsub ?x288 (_ bv4 32))) (bvult ?x288 (bvsub ?x288 (_ bv4 32))))))
 (let (($x111 (and (and (and (and (and $x182 $x264) $x184) $x37) $x159) $x265)))
 (let (($x177 (= true $x111)))
 (let (($x175 (not $x136)))
 (let (($x190 (=> $x175 $x177)))
 (let (($x304 (= $x190 true)))
 (let (($x146 (= $x304 true)))
 (let (($x250 (= $x146 true)))
 (let (($x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x49 (= $x122 true)))
 (let (($x133 (= $x49 true)))
 (let (($x33 (= $x133 true)))
 (let (($x193 (= $x175 true)))
 (let (($x71 (= $x193 true)))
 (let (($x172 (= $x71 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x110)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x213 $x224)))
 (let (($x70 (and $x123 $x78)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x31 $x70)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x211)))))))
 (let (($x153 (and $x38 $x52)))
 (let (($x11 (= $x153 true)))
 (let (($x84 (= $x11 true)))
 (let (($x74 (= $x84 true)))
 (let (($x131 (and $x74 $x172)))
 (let (($x297 (and $x131 $x33)))
 (let (($x23 (and $x297 $x250)))
 (let (($x196 (and $x23 $x165)))
 (let (($x66 (and $x196 $x303)))
 (let (($x92 (and $x66 $x356)))
 (let (($x295 (and $x92 $x87)))
 (let (($x245 (and $x63 $x295)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x292 (and $x147 $x245)))
 (let (($x256 (bvugt ?x288 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x288 (_ bv3 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x260 (=> (bvule ?x288 (bvsub (bvadd ?x288 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x256)))))))
 (let (($x204 (=> (and $x175 (bvule ?x288 (bvsub (bvadd ?x288 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x158 $x256)))))))
 (let (($x9 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x191 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x233 (=> $x191 (or false (or false (and true (or $x129 $x9)))))))
 (let (($x64 (=> (and $x175 $x191) (or false (or false (and true (or $x129 $x9)))))))
 (let (($x189 (and $x64 $x204)))
 (let (($x54 (and $x189 $x292)))
 (let (($x26 (=> $x54 $x116)))
 (not $x26)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x42 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x132 (concat (select input.dst.llvm-mem ?x42) (concat ?x118 (concat ?x255 ?x206)))))
 (let ((?x272 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x132)))
 (let ((?x149 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x203 (bvmul (_ bv4294967295 32) ?x149)))
 (let ((?x179 (bvneg ?x203)))
 (let (($x148 (= ?x179 ?x272)))
 (let (($x116 (= $x148 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x262 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x262 (_ bv1 32))))
 (let (($x63 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x219 (= $x63 $x156)))
 (let (($x134 (= ?x262 (_ bv0 32))))
 (let (($x166 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x267 (= $x166 $x134)))
 (let (($x7 (and $x267 $x219)))
 (let (($x87 (= $x7 true)))
 (let (($x225 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x186 (ite $x225 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x186 (_ bv1 32))))
 (let (($x117 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x77 (= $x117 $x82)))
 (let (($x48 (= ?x186 (_ bv0 32))))
 (let (($x239 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x201 (= $x239 $x48)))
 (let (($x44 (and $x201 $x77)))
 (let (($x356 (= $x44 true)))
 (let ((?x81 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x81)))
 (let (($x301 (= ?x194 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x170 (= $x301 true)))
 (let (($x303 (= $x170 true)))
 (let ((?x55 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x199 (= (_ bv0 3) ?x55)))
 (let (($x106 (= $x199 true)))
 (let (($x165 (= $x106 true)))
 (let (($x265 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x226 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x83 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226))))
 (let (($x182 (and true $x83)))
 (let (($x159 (and $x83 $x182)))
 (let ((?x288 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x169))))
 (let (($x105 (= (bvand ?x238 (_ bv4294967288 32)) ?x238)))
 (let (($x184 (= (bvand ?x288 (_ bv4294967292 32)) ?x288)))
 (let (($x37 (and $x184 $x105)))
 (let (($x264 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x288 (bvsub ?x288 (_ bv4 32))) (bvult ?x288 (bvsub ?x288 (_ bv4 32))))))
 (let (($x111 (and (and (and (and (and $x182 $x264) $x184) $x37) $x159) $x265)))
 (let (($x177 (= true $x111)))
 (let (($x175 (not $x136)))
 (let (($x190 (=> $x175 $x177)))
 (let (($x304 (= $x190 true)))
 (let (($x146 (= $x304 true)))
 (let (($x250 (= $x146 true)))
 (let (($x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x49 (= $x122 true)))
 (let (($x133 (= $x49 true)))
 (let (($x33 (= $x133 true)))
 (let (($x193 (= $x175 true)))
 (let (($x71 (= $x193 true)))
 (let (($x172 (= $x71 true)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x110)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x213 $x224)))
 (let (($x70 (and $x123 $x78)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x31 $x70)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x211)))))))
 (let (($x153 (and $x38 $x52)))
 (let (($x11 (= $x153 true)))
 (let (($x84 (= $x11 true)))
 (let (($x74 (= $x84 true)))
 (let (($x131 (and $x74 $x172)))
 (let (($x297 (and $x131 $x33)))
 (let (($x23 (and $x297 $x250)))
 (let (($x196 (and $x23 $x165)))
 (let (($x66 (and $x196 $x303)))
 (let (($x92 (and $x66 $x356)))
 (let (($x295 (and $x92 $x87)))
 (let (($x245 (and $x63 $x295)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x292 (and $x147 $x245)))
 (let (($x256 (bvugt ?x288 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x288 (_ bv3 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x260 (=> (bvule ?x288 (bvsub (bvadd ?x288 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x256)))))))
 (let (($x204 (=> (and $x175 (bvule ?x288 (bvsub (bvadd ?x288 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x158 $x256)))))))
 (let (($x9 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x191 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x233 (=> $x191 (or false (or false (and true (or $x129 $x9)))))))
 (let (($x64 (=> (and $x175 $x191) (or false (or false (and true (or $x129 $x9)))))))
 (let (($x189 (and $x64 $x204)))
 (let (($x54 (and $x189 $x292)))
 (let (($x26 (=> $x54 $x116)))
 (not $x26)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6110000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xffd1fbf0)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6110000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6110003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x7baae400)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7b96a404)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7b96a404)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7b96a407)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 95
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x75 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x214 (concat (select input.dst.llvm-mem ?x75) (concat ?x176 (concat ?x181 ?x116)))))
 (let ((?x208 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x214)))
 (let ((?x132 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x272 (bvmul (_ bv4294967295 32) ?x132)))
 (let ((?x148 (bvneg ?x272)))
 (let (($x237 (= ?x148 ?x208)))
 (let (($x57 (= $x237 true)))
 (let (($x185 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x203 (not $x185)))
 (let (($x87 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x149 (not $x87)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x295 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x54 (bvuge ?x295 (_ bv1 32))))
 (let (($x114 (= $x185 $x54)))
 (let (($x245 (= ?x295 (_ bv0 32))))
 (let (($x292 (= $x87 $x245)))
 (let (($x127 (and (and (and $x292 $x114) $x149) $x203)))
 (let (($x118 (= $x127 true)))
 (let (($x92 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x134 (not $x92)))
 (let (($x201 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x262 (not $x201)))
 (let (($x82 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x77 (ite $x82 (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x77 (_ bv1 32))))
 (let (($x166 (= $x92 $x163)))
 (let (($x44 (= ?x77 (_ bv0 32))))
 (let (($x356 (= $x201 $x44)))
 (let (($x156 (and (and (and $x356 $x166) $x262) $x134)))
 (let (($x219 (= $x156 true)))
 (let ((?x303 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x303)))
 (let (($x239 (= ?x66 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x151 (= $x239 true)))
 (let (($x225 (= $x151 true)))
 (let ((?x311 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x259 (= (_ bv0 3) ?x311)))
 (let (($x81 (= $x259 true)))
 (let (($x194 (= $x81 true)))
 (let (($x111 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x182 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x227 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x182) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x182))))
 (let (($x264 (and true $x227)))
 (let (($x60 (and $x227 $x264)))
 (let ((?x191 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x88))))
 (let (($x159 (= (bvand ?x105 (_ bv4294967288 32)) ?x105)))
 (let (($x283 (= (bvand ?x191 (_ bv4294967292 32)) ?x191)))
 (let (($x215 (and $x283 $x159)))
 (let (($x187 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x191 (bvsub ?x191 (_ bv4 32))) (bvult ?x191 (bvsub ?x191 (_ bv4 32))))))
 (let (($x250 (and (and (and (and (and $x264 $x187) $x283) $x215) $x60) $x111)))
 (let (($x23 (= true $x250)))
 (let (($x175 (not $x136)))
 (let (($x293 (=> $x175 $x23)))
 (let (($x55 (= $x293 true)))
 (let (($x199 (= $x55 true)))
 (let (($x106 (= $x199 true)))
 (let (($x109 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x109 true)))
 (let (($x231 (= $x226 true)))
 (let (($x35 (= $x231 true)))
 (let (($x122 (= $x175 true)))
 (let (($x49 (= $x122 true)))
 (let (($x133 (= $x49 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x11)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x78 $x52)))
 (let (($x74 (and $x153 $x84)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x119 $x74)))
 (let (($x234 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x234)))))))
 (let (($x71 (and $x110 $x193)))
 (let (($x172 (= $x71 true)))
 (let (($x131 (= $x172 true)))
 (let (($x197 (= $x131 true)))
 (let (($x33 (and $x197 $x133)))
 (let (($x83 (and $x33 $x35)))
 (let (($x165 (and $x83 $x106)))
 (let (($x315 (and $x165 $x194)))
 (let (($x186 (and $x315 $x225)))
 (let (($x7 (and $x186 $x219)))
 (let (($x95 (and $x7 $x118)))
 (let (($x255 (and $x185 $x95)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x206 (and $x46 $x255)))
 (let (($x168 (bvugt ?x191 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x191 (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x147 (=> (bvule ?x191 (bvsub (bvadd ?x191 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x168)))))))
 (let (($x14 (=> (and $x175 (bvule ?x191 (bvsub (bvadd ?x191 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x18 $x168)))))))
 (let (($x112 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x28 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x19 (=> $x28 (or false (or false (and true (or $x183 $x112)))))))
 (let (($x202 (=> (and $x175 $x28) (or false (or false (and true (or $x183 $x112)))))))
 (let (($x13 (and $x202 $x14)))
 (let (($x268 (and $x13 $x206)))
 (let (($x366 (=> $x268 $x57)))
 (not $x366)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x75 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x214 (concat (select input.dst.llvm-mem ?x75) (concat ?x176 (concat ?x181 ?x116)))))
 (let ((?x208 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x214)))
 (let ((?x132 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x272 (bvmul (_ bv4294967295 32) ?x132)))
 (let ((?x148 (bvneg ?x272)))
 (let (($x237 (= ?x148 ?x208)))
 (let (($x57 (= $x237 true)))
 (let (($x185 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x203 (not $x185)))
 (let (($x87 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x149 (not $x87)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x295 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x54 (bvuge ?x295 (_ bv1 32))))
 (let (($x114 (= $x185 $x54)))
 (let (($x245 (= ?x295 (_ bv0 32))))
 (let (($x292 (= $x87 $x245)))
 (let (($x127 (and (and (and $x292 $x114) $x149) $x203)))
 (let (($x118 (= $x127 true)))
 (let (($x92 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x134 (not $x92)))
 (let (($x201 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x262 (not $x201)))
 (let (($x82 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x77 (ite $x82 (_ bv0 32) (_ bv1 32))))
 (let (($x163 (bvuge ?x77 (_ bv1 32))))
 (let (($x166 (= $x92 $x163)))
 (let (($x44 (= ?x77 (_ bv0 32))))
 (let (($x356 (= $x201 $x44)))
 (let (($x156 (and (and (and $x356 $x166) $x262) $x134)))
 (let (($x219 (= $x156 true)))
 (let ((?x303 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x66 (bvneg ?x303)))
 (let (($x239 (= ?x66 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x151 (= $x239 true)))
 (let (($x225 (= $x151 true)))
 (let ((?x311 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x259 (= (_ bv0 3) ?x311)))
 (let (($x81 (= $x259 true)))
 (let (($x194 (= $x81 true)))
 (let (($x111 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x182 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x227 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x182) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x182))))
 (let (($x264 (and true $x227)))
 (let (($x60 (and $x227 $x264)))
 (let ((?x191 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x88))))
 (let (($x159 (= (bvand ?x105 (_ bv4294967288 32)) ?x105)))
 (let (($x283 (= (bvand ?x191 (_ bv4294967292 32)) ?x191)))
 (let (($x215 (and $x283 $x159)))
 (let (($x187 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x191 (bvsub ?x191 (_ bv4 32))) (bvult ?x191 (bvsub ?x191 (_ bv4 32))))))
 (let (($x250 (and (and (and (and (and $x264 $x187) $x283) $x215) $x60) $x111)))
 (let (($x23 (= true $x250)))
 (let (($x175 (not $x136)))
 (let (($x293 (=> $x175 $x23)))
 (let (($x55 (= $x293 true)))
 (let (($x199 (= $x55 true)))
 (let (($x106 (= $x199 true)))
 (let (($x109 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x109 true)))
 (let (($x231 (= $x226 true)))
 (let (($x35 (= $x231 true)))
 (let (($x122 (= $x175 true)))
 (let (($x49 (= $x122 true)))
 (let (($x133 (= $x49 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x11)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x78 $x52)))
 (let (($x74 (and $x153 $x84)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x119 $x74)))
 (let (($x234 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x110 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x234)))))))
 (let (($x71 (and $x110 $x193)))
 (let (($x172 (= $x71 true)))
 (let (($x131 (= $x172 true)))
 (let (($x197 (= $x131 true)))
 (let (($x33 (and $x197 $x133)))
 (let (($x83 (and $x33 $x35)))
 (let (($x165 (and $x83 $x106)))
 (let (($x315 (and $x165 $x194)))
 (let (($x186 (and $x315 $x225)))
 (let (($x7 (and $x186 $x219)))
 (let (($x95 (and $x7 $x118)))
 (let (($x255 (and $x185 $x95)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x206 (and $x46 $x255)))
 (let (($x168 (bvugt ?x191 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x191 (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x147 (=> (bvule ?x191 (bvsub (bvadd ?x191 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x168)))))))
 (let (($x14 (=> (and $x175 (bvule ?x191 (bvsub (bvadd ?x191 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x18 $x168)))))))
 (let (($x112 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x28 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x19 (=> $x28 (or false (or false (and true (or $x183 $x112)))))))
 (let (($x202 (=> (and $x175 $x28) (or false (or false (and true (or $x183 $x112)))))))
 (let (($x13 (and $x202 $x14)))
 (let (($x268 (and $x13 $x206)))
 (let (($x366 (=> $x268 $x57)))
 (not $x366)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 96
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x126 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x214 (concat (select input.dst.llvm-mem ?x126) (concat ?x116 (concat ?x176 ?x135)))))
 (let ((?x208 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x214)))
 (let ((?x132 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x272 (bvmul (_ bv4294967295 32) ?x132)))
 (let ((?x148 (bvneg ?x272)))
 (let (($x237 (= ?x148 ?x208)))
 (let (($x57 (= $x237 true)))
 (let (($x219 (= false false)))
 (let (($x292 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x251 (=> $x292 $x219)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x185 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x179 (bvuge ?x185 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x149 (= $x228 $x179)))
 (let (($x54 (= ?x185 (_ bv0 32))))
 (let (($x114 (= $x292 $x54)))
 (let (($x127 (and (and $x114 $x149) $x251)))
 (let (($x118 (= $x127 true)))
 (let (($x356 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x7 (=> $x356 $x219)))
 (let (($x163 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x166 (ite $x163 (_ bv0 32) (_ bv1 32))))
 (let (($x134 (bvuge ?x166 (_ bv1 32))))
 (let (($x63 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (= $x63 $x134)))
 (let (($x267 (= ?x166 (_ bv0 32))))
 (let (($x262 (= $x356 $x267)))
 (let (($x87 (and (and $x262 $x156) $x7)))
 (let (($x295 (= $x87 true)))
 (let ((?x225 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x225)))
 (let (($x201 (= ?x186 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x117 (= $x201 true)))
 (let (($x82 (= $x117 true)))
 (let ((?x301 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x170 (= (_ bv0 3) ?x301)))
 (let (($x303 (= $x170 true)))
 (let (($x66 (= $x303 true)))
 (let (($x250 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x264 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x184 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x264) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x264))))
 (let (($x187 (and true $x184)))
 (let (($x265 (and $x184 $x187)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x174))))
 (let (($x60 (= (bvand ?x159 (_ bv4294967288 32)) ?x159)))
 (let (($x169 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x146 (and $x169 $x60)))
 (let (($x190 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x106 (and (and (and (and (and $x187 $x190) $x169) $x146) $x265) $x250)))
 (let (($x165 (= true $x106)))
 (let (($x175 (not $x136)))
 (let (($x196 (=> $x175 $x165)))
 (let (($x311 (= $x196 true)))
 (let (($x259 (= $x311 true)))
 (let (($x81 (= $x259 true)))
 (let (($x162 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x182 (= $x162 true)))
 (let (($x72 (= $x182 true)))
 (let (($x113 (= $x72 true)))
 (let (($x109 (= $x175 true)))
 (let (($x226 (= $x109 true)))
 (let (($x231 (= $x226 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x172)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x84 $x193)))
 (let (($x197 (and $x71 $x131)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x31 $x197)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x211)))))))
 (let (($x49 (and $x11 $x122)))
 (let (($x133 (= $x49 true)))
 (let (($x33 (= $x133 true)))
 (let (($x297 (= $x33 true)))
 (let (($x35 (and $x297 $x231)))
 (let (($x227 (and $x35 $x113)))
 (let (($x194 (and $x227 $x81)))
 (let (($x154 (and $x194 $x66)))
 (let (($x77 (and $x154 $x82)))
 (let (($x245 (and $x77 $x295)))
 (let (($x95 (and $x245 $x118)))
 (let (($x255 (and $x228 $x95)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x206 (and $x164 $x255)))
 (let (($x204 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x28 (_ bv3 32))))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x46 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x260 $x204)))))))
 (let (($x21 (=> (and $x175 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x260 $x204)))))))
 (let (($x64 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x158 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x256 (=> $x158 (or false (or false (and true (or $x233 $x64)))))))
 (let (($x42 (=> (and $x175 $x158) (or false (or false (and true (or $x233 $x64)))))))
 (let (($x130 (and $x42 $x21)))
 (let (($x268 (and $x130 $x206)))
 (let (($x366 (=> $x268 $x57)))
 (not $x366))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x126 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x214 (concat (select input.dst.llvm-mem ?x126) (concat ?x116 (concat ?x176 ?x135)))))
 (let ((?x208 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x214)))
 (let ((?x132 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x272 (bvmul (_ bv4294967295 32) ?x132)))
 (let ((?x148 (bvneg ?x272)))
 (let (($x237 (= ?x148 ?x208)))
 (let (($x57 (= $x237 true)))
 (let (($x219 (= false false)))
 (let (($x292 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x251 (=> $x292 $x219)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x185 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x179 (bvuge ?x185 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x149 (= $x228 $x179)))
 (let (($x54 (= ?x185 (_ bv0 32))))
 (let (($x114 (= $x292 $x54)))
 (let (($x127 (and (and $x114 $x149) $x251)))
 (let (($x118 (= $x127 true)))
 (let (($x356 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x7 (=> $x356 $x219)))
 (let (($x163 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x166 (ite $x163 (_ bv0 32) (_ bv1 32))))
 (let (($x134 (bvuge ?x166 (_ bv1 32))))
 (let (($x63 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (= $x63 $x134)))
 (let (($x267 (= ?x166 (_ bv0 32))))
 (let (($x262 (= $x356 $x267)))
 (let (($x87 (and (and $x262 $x156) $x7)))
 (let (($x295 (= $x87 true)))
 (let ((?x225 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x225)))
 (let (($x201 (= ?x186 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x117 (= $x201 true)))
 (let (($x82 (= $x117 true)))
 (let ((?x301 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x170 (= (_ bv0 3) ?x301)))
 (let (($x303 (= $x170 true)))
 (let (($x66 (= $x303 true)))
 (let (($x250 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x264 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x184 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x264) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x264))))
 (let (($x187 (and true $x184)))
 (let (($x265 (and $x184 $x187)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x174))))
 (let (($x60 (= (bvand ?x159 (_ bv4294967288 32)) ?x159)))
 (let (($x169 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x146 (and $x169 $x60)))
 (let (($x190 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x106 (and (and (and (and (and $x187 $x190) $x169) $x146) $x265) $x250)))
 (let (($x165 (= true $x106)))
 (let (($x175 (not $x136)))
 (let (($x196 (=> $x175 $x165)))
 (let (($x311 (= $x196 true)))
 (let (($x259 (= $x311 true)))
 (let (($x81 (= $x259 true)))
 (let (($x162 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x182 (= $x162 true)))
 (let (($x72 (= $x182 true)))
 (let (($x113 (= $x72 true)))
 (let (($x109 (= $x175 true)))
 (let (($x226 (= $x109 true)))
 (let (($x231 (= $x226 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x172)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x84 $x193)))
 (let (($x197 (and $x71 $x131)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x31 $x197)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x211)))))))
 (let (($x49 (and $x11 $x122)))
 (let (($x133 (= $x49 true)))
 (let (($x33 (= $x133 true)))
 (let (($x297 (= $x33 true)))
 (let (($x35 (and $x297 $x231)))
 (let (($x227 (and $x35 $x113)))
 (let (($x194 (and $x227 $x81)))
 (let (($x154 (and $x194 $x66)))
 (let (($x77 (and $x154 $x82)))
 (let (($x245 (and $x77 $x295)))
 (let (($x95 (and $x245 $x118)))
 (let (($x255 (and $x228 $x95)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x206 (and $x164 $x255)))
 (let (($x204 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x28 (_ bv3 32))))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x46 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x260 $x204)))))))
 (let (($x21 (=> (and $x175 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x260 $x204)))))))
 (let (($x64 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x158 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x256 (=> $x158 (or false (or false (and true (or $x233 $x64)))))))
 (let (($x42 (=> (and $x175 $x158) (or false (or false (and true (or $x233 $x64)))))))
 (let (($x130 (and $x42 $x21)))
 (let (($x268 (and $x130 $x206)))
 (let (($x366 (=> $x268 $x57)))
 (not $x366))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6110000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xffd1fbf0)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6110000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6110003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv458712 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv458712 32) (_ bv255 8)) (_ bv458713 32) (_ bv255 8)) (_ bv458714 32) (_ bv255 8)) (_ bv458715 32) (_ bv255 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv16777216 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 97
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x288 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x38 (concat (select input.dst.llvm-mem ?x288) (concat ?x366 (concat ?x208 ?x230)))))
 (let ((?x99 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x38)))
 (let ((?x176 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x135 (bvmul (_ bv4294967295 32) ?x176)))
 (let ((?x26 (bvneg ?x135)))
 (let (($x90 (= ?x26 ?x99)))
 (let (($x39 (= $x90 true)))
 (let (($x123 (= false false)))
 (let (($x149 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x206 (=> $x149 $x123)))
 (let (($x224 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x255 (not $x224)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x203 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x203 (_ bv1 32))))
 (let (($x95 (= $x224 $x118)))
 (let (($x251 (= ?x203 (_ bv0 32))))
 (let (($x127 (= $x149 $x251)))
 (let (($x132 (and (and (and $x127 $x95) $x255) $x206)))
 (let (($x272 (= $x132 true)))
 (let (($x262 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x292 (=> $x262 $x123)))
 (let (($x7 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x245 (not $x7)))
 (let (($x134 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x156 (ite $x134 (_ bv0 32) (_ bv1 32))))
 (let (($x87 (bvuge ?x156 (_ bv1 32))))
 (let (($x295 (= $x7 $x87)))
 (let (($x286 (= ?x156 (_ bv0 32))))
 (let (($x219 (= $x262 $x286)))
 (let (($x114 (and (and (and $x219 $x295) $x245) $x292)))
 (let (($x228 (= $x114 true)))
 (let ((?x82 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x82)))
 (let (($x356 (= ?x77 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x92 (= $x356 true)))
 (let (($x163 (= $x92 true)))
 (let ((?x239 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x151 (= (_ bv0 3) ?x239)))
 (let (($x225 (= $x151 true)))
 (let (($x186 (= $x225 true)))
 (let (($x106 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x187 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x283 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x187) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x187))))
 (let (($x190 (and true $x283)))
 (let (($x111 (and $x283 $x190)))
 (let ((?x158 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x238))))
 (let (($x265 (= (bvand ?x60 (_ bv4294967288 32)) ?x60)))
 (let (($x88 (= (bvand ?x158 (_ bv4294967292 32)) ?x158)))
 (let (($x199 (and $x88 $x265)))
 (let (($x293 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x158 (bvsub ?x158 (_ bv4 32))) (bvult ?x158 (bvsub ?x158 (_ bv4 32))))))
 (let (($x81 (and (and (and (and (and $x190 $x293) $x88) $x199) $x111) $x106)))
 (let (($x194 (= true $x81)))
 (let (($x175 (not $x136)))
 (let (($x315 (=> $x175 $x194)))
 (let (($x301 (= $x315 true)))
 (let (($x170 (= $x301 true)))
 (let (($x303 (= $x170 true)))
 (let (($x229 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x264 (= $x229 true)))
 (let (($x30 (= $x264 true)))
 (let (($x94 (= $x30 true)))
 (let (($x162 (= $x175 true)))
 (let (($x182 (= $x162 true)))
 (let (($x72 (= $x182 true)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x133)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x197)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x131 $x122)))
 (let (($x297 (and $x49 $x33)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x119 $x297)))
 (let (($x234 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x234)))))))
 (let (($x226 (and $x172 $x109)))
 (let (($x231 (= $x226 true)))
 (let (($x35 (= $x231 true)))
 (let (($x83 (= $x35 true)))
 (let (($x113 (and $x83 $x72)))
 (let (($x184 (and $x113 $x94)))
 (let (($x66 (and $x184 $x303)))
 (let (($x48 (and $x66 $x186)))
 (let (($x166 (and $x48 $x163)))
 (let (($x179 (and $x166 $x228)))
 (let (($x148 (and $x179 $x272)))
 (let (($x91 (and $x224 $x148)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x181 (and $x51 $x91)))
 (let (($x14 (bvugt ?x158 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x158 (_ bv3 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x164 (=> (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x14)))))))
 (let (($x200 (=> (and $x175 (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x147 $x14)))))))
 (let (($x202 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x288)))
 (let (($x18 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x168 (=> $x18 (or false (or false (and true (or $x19 $x202)))))))
 (let (($x75 (=> (and $x175 $x18) (or false (or false (and true (or $x19 $x202)))))))
 (let (($x32 (and $x75 $x200)))
 (let (($x116 (and $x32 $x181)))
 (let (($x16 (=> $x116 $x39)))
 (not $x16))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x288 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x38 (concat (select input.dst.llvm-mem ?x288) (concat ?x366 (concat ?x208 ?x230)))))
 (let ((?x99 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x38)))
 (let ((?x176 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x135 (bvmul (_ bv4294967295 32) ?x176)))
 (let ((?x26 (bvneg ?x135)))
 (let (($x90 (= ?x26 ?x99)))
 (let (($x39 (= $x90 true)))
 (let (($x123 (= false false)))
 (let (($x149 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x206 (=> $x149 $x123)))
 (let (($x224 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x255 (not $x224)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x203 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x203 (_ bv1 32))))
 (let (($x95 (= $x224 $x118)))
 (let (($x251 (= ?x203 (_ bv0 32))))
 (let (($x127 (= $x149 $x251)))
 (let (($x132 (and (and (and $x127 $x95) $x255) $x206)))
 (let (($x272 (= $x132 true)))
 (let (($x262 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x292 (=> $x262 $x123)))
 (let (($x7 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x245 (not $x7)))
 (let (($x134 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x156 (ite $x134 (_ bv0 32) (_ bv1 32))))
 (let (($x87 (bvuge ?x156 (_ bv1 32))))
 (let (($x295 (= $x7 $x87)))
 (let (($x286 (= ?x156 (_ bv0 32))))
 (let (($x219 (= $x262 $x286)))
 (let (($x114 (and (and (and $x219 $x295) $x245) $x292)))
 (let (($x228 (= $x114 true)))
 (let ((?x82 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x82)))
 (let (($x356 (= ?x77 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x92 (= $x356 true)))
 (let (($x163 (= $x92 true)))
 (let ((?x239 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x151 (= (_ bv0 3) ?x239)))
 (let (($x225 (= $x151 true)))
 (let (($x186 (= $x225 true)))
 (let (($x106 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x187 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x283 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x187) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x187))))
 (let (($x190 (and true $x283)))
 (let (($x111 (and $x283 $x190)))
 (let ((?x158 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x238))))
 (let (($x265 (= (bvand ?x60 (_ bv4294967288 32)) ?x60)))
 (let (($x88 (= (bvand ?x158 (_ bv4294967292 32)) ?x158)))
 (let (($x199 (and $x88 $x265)))
 (let (($x293 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x158 (bvsub ?x158 (_ bv4 32))) (bvult ?x158 (bvsub ?x158 (_ bv4 32))))))
 (let (($x81 (and (and (and (and (and $x190 $x293) $x88) $x199) $x111) $x106)))
 (let (($x194 (= true $x81)))
 (let (($x175 (not $x136)))
 (let (($x315 (=> $x175 $x194)))
 (let (($x301 (= $x315 true)))
 (let (($x170 (= $x301 true)))
 (let (($x303 (= $x170 true)))
 (let (($x229 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x264 (= $x229 true)))
 (let (($x30 (= $x264 true)))
 (let (($x94 (= $x30 true)))
 (let (($x162 (= $x175 true)))
 (let (($x182 (= $x162 true)))
 (let (($x72 (= $x182 true)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x133)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x197)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x131 $x122)))
 (let (($x297 (and $x49 $x33)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x119 $x297)))
 (let (($x234 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x234)))))))
 (let (($x226 (and $x172 $x109)))
 (let (($x231 (= $x226 true)))
 (let (($x35 (= $x231 true)))
 (let (($x83 (= $x35 true)))
 (let (($x113 (and $x83 $x72)))
 (let (($x184 (and $x113 $x94)))
 (let (($x66 (and $x184 $x303)))
 (let (($x48 (and $x66 $x186)))
 (let (($x166 (and $x48 $x163)))
 (let (($x179 (and $x166 $x228)))
 (let (($x148 (and $x179 $x272)))
 (let (($x91 (and $x224 $x148)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x181 (and $x51 $x91)))
 (let (($x14 (bvugt ?x158 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x158 (_ bv3 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x164 (=> (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x14)))))))
 (let (($x200 (=> (and $x175 (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x147 $x14)))))))
 (let (($x202 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x288)))
 (let (($x18 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x168 (=> $x18 (or false (or false (and true (or $x19 $x202)))))))
 (let (($x75 (=> (and $x175 $x18) (or false (or false (and true (or $x19 $x202)))))))
 (let (($x32 (and $x75 $x200)))
 (let (($x116 (and $x32 $x181)))
 (let (($x16 (=> $x116 $x39)))
 (not $x16))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 98
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x191 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x243 (concat (select input.dst.llvm-mem ?x191) (concat ?x308 (concat ?x25 ?x73)))))
 (let ((?x319 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x243)))
 (let ((?x465 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x65 (bvmul (_ bv4294967295 32) ?x465)))
 (let ((?x442 (bvneg ?x65)))
 (let (($x346 (= ?x442 ?x319)))
 (let (($x468 (= $x346 true)))
 (let ((?x233 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x101))))
 (let ((?x325 (bvadd ?x274 (_ bv4 32))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv1 32))) (select input.dst.llvm-mem ?x325))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv2 32))) ?x275))))
 (let (($x322 (= (_ bv0 32) ?x249)))
 (let ((?x324 (ite $x322 (_ bv0 32) (_ bv1 32))))
 (let (($x345 (= ?x324 (_ bv0 32))))
 (let (($x444 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x188 (= $x444 $x345)))
 (let (($x341 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x52 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x318 (and $x52 $x341)))
 (let (($x27 (=> $x318 $x188)))
 (let (($x340 (bvuge ?x324 (_ bv1 32))))
 (let (($x277 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x441 (= $x277 $x340)))
 (let (($x342 (=> $x318 $x441)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem ?x274))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv2 32))) ?x209))))
 (let (($x327 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x344)))
 (let (($x141 (=> $x318 $x327)))
 (let (($x258 (= (_ bv0 32) ?x274)))
 (let ((?x40 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x218 (bvuge ?x40 (_ bv1 32))))
 (let (($x330 (= $x341 $x218)))
 (let (($x12 (=> $x52 $x330)))
 (let (($x242 (= ?x40 (_ bv0 32))))
 (let (($x257 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x216 (= $x257 $x242)))
 (let (($x140 (=> $x52 $x216)))
 (let (($x314 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x243)))
 (let (($x282 (=> $x52 $x314)))
 (let (($x114 (= false false)))
 (let (($x155 (and $x52 $x257)))
 (let (($x241 (=> $x155 $x114)))
 (let (($x280 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x284 (=> $x280 $x114)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x76 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x98 (bvuge ?x76 (_ bv1 32))))
 (let (($x24 (= $x52 $x98)))
 (let (($x296 (= ?x76 (_ bv0 32))))
 (let (($x207 (= $x280 $x296)))
 (let (($x337 (and (and (and (and (and (and $x207 $x24) $x284) $x241) $x282) $x140) $x12)))
 (let (($x103 (and (and (and $x337 $x141) $x342) $x27)))
 (let (($x171 (= $x103 true)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x10 (concat ?x116 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x366 (concat ?x57 (concat ?x135 ?x10))))
 (let ((?x305 (bvadd ?x366 (_ bv4 32))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem ?x305))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv2 32))) ?x312))))
 (let (($x269 (= (_ bv0 32) ?x45)))
 (let ((?x232 (ite $x269 (_ bv0 32) (_ bv1 32))))
 (let (($x144 (bvuge ?x232 (_ bv1 32))))
 (let (($x240 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x276 (= $x240 $x144)))
 (let (($x90 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x54 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x124 (and $x54 $x90)))
 (let (($x289 (=> $x124 $x276)))
 (let (($x61 (= ?x232 (_ bv0 32))))
 (let (($x343 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x299 (= $x343 $x61)))
 (let (($x287 (=> $x124 $x299)))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x443))))
 (let (($x22 (= input.spec-%var-l-1.2.1.2.0 ?x244)))
 (let (($x5 (=> $x124 $x22)))
 (let (($x214 (= (_ bv0 32) ?x366)))
 (let ((?x208 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x39 (bvuge ?x208 (_ bv1 32))))
 (let (($x16 (= $x90 $x39)))
 (let (($x161 (=> $x54 $x16)))
 (let (($x272 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x38 (and $x54 $x272)))
 (let (($x99 (=> $x38 $x114)))
 (let (($x230 (= ?x208 (_ bv0 32))))
 (let (($x237 (= $x272 $x230)))
 (let (($x306 (=> $x54 $x237)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x251)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x118)))
 (let (($x375 (= input.spec-%var-l-1.2.0 ?x255)))
 (let (($x206 (=> $x54 $x375)))
 (let (($x219 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x228 (=> $x219 $x114)))
 (let (($x87 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x295 (ite $x87 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (bvuge ?x295 (_ bv1 32))))
 (let (($x292 (= $x54 $x123)))
 (let (($x185 (= ?x295 (_ bv0 32))))
 (let (($x245 (= $x219 $x185)))
 (let (($x320 (and (and (and (and (and (and $x245 $x292) $x228) $x206) $x306) $x99) $x161)))
 (let (($x217 (and (and (and $x320 $x5) $x287) $x289)))
 (let (($x278 (= $x217 true)))
 (let ((?x163 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x166 (bvneg ?x163)))
 (let (($x262 (= ?x166 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x63 (= $x262 true)))
 (let (($x134 (= $x63 true)))
 (let ((?x201 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x117 (= (_ bv0 3) ?x201)))
 (let (($x82 (= $x117 true)))
 (let (($x77 (= $x82 true)))
 (let (($x81 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x190) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x190))))
 (let (($x293 (and true $x169)))
 (let (($x250 (and $x169 $x293)))
 (let ((?x18 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x105))))
 (let (($x111 (= (bvand ?x265 (_ bv4294967288 32)) ?x265)))
 (let (($x174 (= (bvand ?x18 (_ bv4294967292 32)) ?x18)))
 (let (($x259 (and $x174 $x111)))
 (let (($x196 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x18 (bvsub ?x18 (_ bv4 32))) (bvult ?x18 (bvsub ?x18 (_ bv4 32))))))
 (let (($x303 (and (and (and (and (and $x293 $x196) $x174) $x259) $x250) $x81)))
 (let (($x66 (= true $x303)))
 (let (($x175 (not $x136)))
 (let (($x154 (=> $x175 $x66)))
 (let (($x239 (= $x154 true)))
 (let (($x151 (= $x239 true)))
 (let (($x225 (= $x151 true)))
 (let (($x157 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x187 (= $x157 true)))
 (let (($x177 (= $x187 true)))
 (let (($x107 (= $x177 true)))
 (let (($x229 (= $x175 true)))
 (let (($x264 (= $x229 true)))
 (let (($x30 (= $x264 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x231)))
 (let ((?x297 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x297)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x33 $x109)))
 (let (($x83 (and $x226 $x35)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x31 $x83)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x172 $x211)))))))
 (let (($x182 (and $x133 $x162)))
 (let (($x72 (= $x182 true)))
 (let (($x113 (= $x72 true)))
 (let (($x227 (= $x113 true)))
 (let (($x94 (and $x227 $x30)))
 (let (($x283 (and $x94 $x107)))
 (let (($x186 (and $x283 $x225)))
 (let (($x44 (and $x186 $x77)))
 (let (($x156 (and $x44 $x134)))
 (let (($x152 (and $x156 $x278)))
 (let (($x323 (and $x152 $x171)))
 (let (($x478 (and $x52 $x323)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x463 (and $x70 $x478)))
 (let (($x21 (bvugt ?x18 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x18 (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x51 (=> (bvule ?x18 (bvsub (bvadd ?x18 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x21)))))))
 (let (($x270 (=> (and $x175 (bvule ?x18 (bvsub (bvadd ?x18 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x46 $x21)))))))
 (let (($x42 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x204 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x233 (_ bv1 32))) (or false (or false (and true (or $x256 $x42)))))))
 (let (($x126 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x233 (_ bv1 32)))) (or false (or false (and true (or $x256 $x42)))))))
 (let (($x189 (and $x126 $x270)))
 (let (($x321 (and $x189 $x463)))
 (let (($x333 (=> $x321 $x468)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x191 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x243 (concat (select input.dst.llvm-mem ?x191) (concat ?x308 (concat ?x25 ?x73)))))
 (let ((?x319 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x243)))
 (let ((?x465 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x65 (bvmul (_ bv4294967295 32) ?x465)))
 (let ((?x442 (bvneg ?x65)))
 (let (($x346 (= ?x442 ?x319)))
 (let (($x468 (= $x346 true)))
 (let ((?x233 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x101))))
 (let ((?x325 (bvadd ?x274 (_ bv4 32))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv1 32))) (select input.dst.llvm-mem ?x325))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv2 32))) ?x275))))
 (let (($x322 (= (_ bv0 32) ?x249)))
 (let ((?x324 (ite $x322 (_ bv0 32) (_ bv1 32))))
 (let (($x345 (= ?x324 (_ bv0 32))))
 (let (($x444 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x188 (= $x444 $x345)))
 (let (($x341 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x52 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x318 (and $x52 $x341)))
 (let (($x27 (=> $x318 $x188)))
 (let (($x340 (bvuge ?x324 (_ bv1 32))))
 (let (($x277 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x441 (= $x277 $x340)))
 (let (($x342 (=> $x318 $x441)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem ?x274))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv2 32))) ?x209))))
 (let (($x327 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x344)))
 (let (($x141 (=> $x318 $x327)))
 (let (($x258 (= (_ bv0 32) ?x274)))
 (let ((?x40 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x218 (bvuge ?x40 (_ bv1 32))))
 (let (($x330 (= $x341 $x218)))
 (let (($x12 (=> $x52 $x330)))
 (let (($x242 (= ?x40 (_ bv0 32))))
 (let (($x257 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x216 (= $x257 $x242)))
 (let (($x140 (=> $x52 $x216)))
 (let (($x314 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x243)))
 (let (($x282 (=> $x52 $x314)))
 (let (($x114 (= false false)))
 (let (($x155 (and $x52 $x257)))
 (let (($x241 (=> $x155 $x114)))
 (let (($x280 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x284 (=> $x280 $x114)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x76 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x98 (bvuge ?x76 (_ bv1 32))))
 (let (($x24 (= $x52 $x98)))
 (let (($x296 (= ?x76 (_ bv0 32))))
 (let (($x207 (= $x280 $x296)))
 (let (($x337 (and (and (and (and (and (and $x207 $x24) $x284) $x241) $x282) $x140) $x12)))
 (let (($x103 (and (and (and $x337 $x141) $x342) $x27)))
 (let (($x171 (= $x103 true)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x10 (concat ?x116 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x366 (concat ?x57 (concat ?x135 ?x10))))
 (let ((?x305 (bvadd ?x366 (_ bv4 32))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem ?x305))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv2 32))) ?x312))))
 (let (($x269 (= (_ bv0 32) ?x45)))
 (let ((?x232 (ite $x269 (_ bv0 32) (_ bv1 32))))
 (let (($x144 (bvuge ?x232 (_ bv1 32))))
 (let (($x240 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x276 (= $x240 $x144)))
 (let (($x90 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x54 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x124 (and $x54 $x90)))
 (let (($x289 (=> $x124 $x276)))
 (let (($x61 (= ?x232 (_ bv0 32))))
 (let (($x343 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x299 (= $x343 $x61)))
 (let (($x287 (=> $x124 $x299)))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x443))))
 (let (($x22 (= input.spec-%var-l-1.2.1.2.0 ?x244)))
 (let (($x5 (=> $x124 $x22)))
 (let (($x214 (= (_ bv0 32) ?x366)))
 (let ((?x208 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x39 (bvuge ?x208 (_ bv1 32))))
 (let (($x16 (= $x90 $x39)))
 (let (($x161 (=> $x54 $x16)))
 (let (($x272 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x38 (and $x54 $x272)))
 (let (($x99 (=> $x38 $x114)))
 (let (($x230 (= ?x208 (_ bv0 32))))
 (let (($x237 (= $x272 $x230)))
 (let (($x306 (=> $x54 $x237)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x251)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x118)))
 (let (($x375 (= input.spec-%var-l-1.2.0 ?x255)))
 (let (($x206 (=> $x54 $x375)))
 (let (($x219 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x228 (=> $x219 $x114)))
 (let (($x87 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x295 (ite $x87 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (bvuge ?x295 (_ bv1 32))))
 (let (($x292 (= $x54 $x123)))
 (let (($x185 (= ?x295 (_ bv0 32))))
 (let (($x245 (= $x219 $x185)))
 (let (($x320 (and (and (and (and (and (and $x245 $x292) $x228) $x206) $x306) $x99) $x161)))
 (let (($x217 (and (and (and $x320 $x5) $x287) $x289)))
 (let (($x278 (= $x217 true)))
 (let ((?x163 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x166 (bvneg ?x163)))
 (let (($x262 (= ?x166 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x63 (= $x262 true)))
 (let (($x134 (= $x63 true)))
 (let ((?x201 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x117 (= (_ bv0 3) ?x201)))
 (let (($x82 (= $x117 true)))
 (let (($x77 (= $x82 true)))
 (let (($x81 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x190) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x190))))
 (let (($x293 (and true $x169)))
 (let (($x250 (and $x169 $x293)))
 (let ((?x18 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x105))))
 (let (($x111 (= (bvand ?x265 (_ bv4294967288 32)) ?x265)))
 (let (($x174 (= (bvand ?x18 (_ bv4294967292 32)) ?x18)))
 (let (($x259 (and $x174 $x111)))
 (let (($x196 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x18 (bvsub ?x18 (_ bv4 32))) (bvult ?x18 (bvsub ?x18 (_ bv4 32))))))
 (let (($x303 (and (and (and (and (and $x293 $x196) $x174) $x259) $x250) $x81)))
 (let (($x66 (= true $x303)))
 (let (($x175 (not $x136)))
 (let (($x154 (=> $x175 $x66)))
 (let (($x239 (= $x154 true)))
 (let (($x151 (= $x239 true)))
 (let (($x225 (= $x151 true)))
 (let (($x157 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x187 (= $x157 true)))
 (let (($x177 (= $x187 true)))
 (let (($x107 (= $x177 true)))
 (let (($x229 (= $x175 true)))
 (let (($x264 (= $x229 true)))
 (let (($x30 (= $x264 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x231)))
 (let ((?x297 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x297)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x33 $x109)))
 (let (($x83 (and $x226 $x35)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x31 $x83)))
 (let (($x211 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x172 $x211)))))))
 (let (($x182 (and $x133 $x162)))
 (let (($x72 (= $x182 true)))
 (let (($x113 (= $x72 true)))
 (let (($x227 (= $x113 true)))
 (let (($x94 (and $x227 $x30)))
 (let (($x283 (and $x94 $x107)))
 (let (($x186 (and $x283 $x225)))
 (let (($x44 (and $x186 $x77)))
 (let (($x156 (and $x44 $x134)))
 (let (($x152 (and $x156 $x278)))
 (let (($x323 (and $x152 $x171)))
 (let (($x478 (and $x52 $x323)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x463 (and $x70 $x478)))
 (let (($x21 (bvugt ?x18 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x18 (_ bv3 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x51 (=> (bvule ?x18 (bvsub (bvadd ?x18 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x21)))))))
 (let (($x270 (=> (and $x175 (bvule ?x18 (bvsub (bvadd ?x18 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x46 $x21)))))))
 (let (($x42 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x191)))
 (let (($x204 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x233 (_ bv1 32))) (or false (or false (and true (or $x256 $x42)))))))
 (let (($x126 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x233 (_ bv1 32)))) (or false (or false (and true (or $x256 $x42)))))))
 (let (($x189 (and $x126 $x270)))
 (let (($x321 (and $x189 $x463)))
 (let (($x333 (=> $x321 $x468)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 99
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x250))))
 (let (($x148 (bvule ?x154 (_ bv4294967294 32))))
 (let (($x167 (= $x148 true)))
 (let (($x57 (= $x167 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x149 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x251 (bvuge ?x149 (_ bv1 32))))
 (let (($x193 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x118 (= $x193 $x251)))
 (let (($x203 (= ?x149 (_ bv0 32))))
 (let (($x224 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x153 (= $x224 $x203)))
 (let (($x255 (and $x153 $x118)))
 (let (($x375 (= $x255 true)))
 (let (($x123 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x292 (ite $x123 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x292 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x179 (= $x228 $x195)))
 (let (($x50 (= ?x292 (_ bv0 32))))
 (let (($x245 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x114 (= $x245 $x50)))
 (let (($x95 (and $x114 $x179)))
 (let (($x268 (= $x95 true)))
 (let ((?x286 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x219 (= (_ bv0 3) ?x286)))
 (let (($x7 (= $x219 true)))
 (let (($x87 (= $x7 true)))
 (let (($x117 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x174 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x238 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x174) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x174))))
 (let (($x215 (and true $x238)))
 (let (($x48 (and $x238 $x215)))
 (let (($x225 (= (bvand ?x154 (_ bv4294967288 32)) ?x154)))
 (let (($x199 (= (bvand ?x260 (_ bv4294967292 32)) ?x260)))
 (let (($x186 (and $x199 $x225)))
 (let (($x105 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x260 (bvsub ?x260 (_ bv4 32))) (bvult ?x260 (bvsub ?x260 (_ bv4 32))))))
 (let (($x92 (and (and (and (and (and $x215 $x105) $x199) $x186) $x48) $x117)))
 (let (($x163 (= true $x92)))
 (let (($x175 (not $x136)))
 (let (($x166 (=> $x175 $x163)))
 (let (($x267 (= $x166 true)))
 (let (($x262 (= $x267 true)))
 (let (($x63 (= $x262 true)))
 (let (($x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x196 (= $x88 true)))
 (let (($x194 (= $x196 true)))
 (let (($x279 (= $x194 true)))
 (let (($x169 (= $x175 true)))
 (let (($x293 (= $x169 true)))
 (let (($x53 (= $x293 true)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x157)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (and $x264 $x94)))
 (let (($x177 (and $x184 $x187)))
 (let (($x297 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x297 $x177)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x83)))))))
 (let (($x283 (and $x229 $x107)))
 (let (($x261 (= $x283 true)))
 (let (($x190 (= $x261 true)))
 (let (($x23 (= $x190 true)))
 (let ((?x119 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x119)))
 (let (($x122 (= ?x131 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x133 (= $x122 true)))
 (let (($x234 (= $x133 true)))
 (let (($x310 (and $x234 $x23)))
 (let (($x165 (and $x310 $x53)))
 (let (($x304 (and $x165 $x279)))
 (let (($x134 (and $x304 $x63)))
 (let (($x295 (and $x134 $x87)))
 (let (($x127 (and $x295 $x268)))
 (let (($x206 (and $x127 $x375)))
 (let (($x290 (and $x193 $x206)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x132 (and $x74 $x290)))
 (let (($x200 (bvugt ?x260 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x260 (_ bv3 32))))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x70 (=> (bvule ?x260 (bvsub (bvadd ?x260 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x164 $x200)))))))
 (let (($x213 (=> (and $x175 (bvule ?x260 (bvsub (bvadd ?x260 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x164 $x200)))))))
 (let (($x75 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x147 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x14 (=> $x147 (or false (or false (and true (or $x168 $x75)))))))
 (let (($x288 (=> (and $x175 $x147) (or false (or false (and true (or $x168 $x75)))))))
 (let (($x13 (and $x288 $x213)))
 (let (($x272 (and $x13 $x132)))
 (let (($x176 (=> $x272 $x57)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x260 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x250))))
 (let (($x148 (bvule ?x154 (_ bv4294967294 32))))
 (let (($x167 (= $x148 true)))
 (let (($x57 (= $x167 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x149 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x251 (bvuge ?x149 (_ bv1 32))))
 (let (($x193 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x118 (= $x193 $x251)))
 (let (($x203 (= ?x149 (_ bv0 32))))
 (let (($x224 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x153 (= $x224 $x203)))
 (let (($x255 (and $x153 $x118)))
 (let (($x375 (= $x255 true)))
 (let (($x123 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x292 (ite $x123 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x292 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x179 (= $x228 $x195)))
 (let (($x50 (= ?x292 (_ bv0 32))))
 (let (($x245 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x114 (= $x245 $x50)))
 (let (($x95 (and $x114 $x179)))
 (let (($x268 (= $x95 true)))
 (let ((?x286 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x219 (= (_ bv0 3) ?x286)))
 (let (($x7 (= $x219 true)))
 (let (($x87 (= $x7 true)))
 (let (($x117 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x174 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x238 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x174) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x174))))
 (let (($x215 (and true $x238)))
 (let (($x48 (and $x238 $x215)))
 (let (($x225 (= (bvand ?x154 (_ bv4294967288 32)) ?x154)))
 (let (($x199 (= (bvand ?x260 (_ bv4294967292 32)) ?x260)))
 (let (($x186 (and $x199 $x225)))
 (let (($x105 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x260 (bvsub ?x260 (_ bv4 32))) (bvult ?x260 (bvsub ?x260 (_ bv4 32))))))
 (let (($x92 (and (and (and (and (and $x215 $x105) $x199) $x186) $x48) $x117)))
 (let (($x163 (= true $x92)))
 (let (($x175 (not $x136)))
 (let (($x166 (=> $x175 $x163)))
 (let (($x267 (= $x166 true)))
 (let (($x262 (= $x267 true)))
 (let (($x63 (= $x262 true)))
 (let (($x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x196 (= $x88 true)))
 (let (($x194 (= $x196 true)))
 (let (($x279 (= $x194 true)))
 (let (($x169 (= $x175 true)))
 (let (($x293 (= $x169 true)))
 (let (($x53 (= $x293 true)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x157)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (and $x264 $x94)))
 (let (($x177 (and $x184 $x187)))
 (let (($x297 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x297 $x177)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x83)))))))
 (let (($x283 (and $x229 $x107)))
 (let (($x261 (= $x283 true)))
 (let (($x190 (= $x261 true)))
 (let (($x23 (= $x190 true)))
 (let ((?x119 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x119)))
 (let (($x122 (= ?x131 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x133 (= $x122 true)))
 (let (($x234 (= $x133 true)))
 (let (($x310 (and $x234 $x23)))
 (let (($x165 (and $x310 $x53)))
 (let (($x304 (and $x165 $x279)))
 (let (($x134 (and $x304 $x63)))
 (let (($x295 (and $x134 $x87)))
 (let (($x127 (and $x295 $x268)))
 (let (($x206 (and $x127 $x375)))
 (let (($x290 (and $x193 $x206)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x132 (and $x74 $x290)))
 (let (($x200 (bvugt ?x260 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x260 (_ bv3 32))))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x70 (=> (bvule ?x260 (bvsub (bvadd ?x260 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x164 $x200)))))))
 (let (($x213 (=> (and $x175 (bvule ?x260 (bvsub (bvadd ?x260 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x164 $x200)))))))
 (let (($x75 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x147 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x14 (=> $x147 (or false (or false (and true (or $x168 $x75)))))))
 (let (($x288 (=> (and $x175 $x147) (or false (or false (and true (or $x168 $x75)))))))
 (let (($x13 (and $x288 $x213)))
 (let (($x272 (and $x13 $x132)))
 (let (($x176 (=> $x272 $x57)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 100
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2753X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x343 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2753X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x305 (concat ?x343 (select input.dst.llvm-mem (bvadd input.ind-%var2753X (_ bv4 32))))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2753X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2753X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x317 (concat ?x47 (concat ?x377 ?x305))))
 (let (($x223 (= ?x317 ?x317)))
 (let ((?x256 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv1 32))) (select input.dst.llvm-mem ?x256))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv2 32))) ?x181))))
 (let (($x230 (= (_ bv0 32) ?x214)))
 (let ((?x237 (ite $x230 (_ bv0 32) (_ bv1 32))))
 (let (($x16 (bvuge ?x237 (_ bv1 32))))
 (let (($x312 (=> $x16 $x223)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2753X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2753X))))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2753X (_ bv2 32))) ?x20)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2753X (_ bv3 32))) ?x43)))
 (let (($x244 (= ?x192 ?x192)))
 (let (($x22 (=> $x16 $x244)))
 (let ((?x147 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x111))))
 (let (($x99 (= (_ bv0 32) ?x225)))
 (let ((?x139 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x139 (_ bv1 32))))
 (let (($x320 (= $x16 $x161)))
 (let (($x90 (= ?x139 (_ bv0 32))))
 (let (($x306 (= ?x237 (_ bv0 32))))
 (let (($x39 (= $x306 $x90)))
 (let (($x269 (and (and (and (= ?x214 ?x225) (=> $x306 (= false false))) $x39) $x320)))
 (let (($x61 (and (and $x269 $x22) $x312)))
 (let (($x135 (not true)))
 (let (($x299 (or $x135 $x61)))
 (let (($x176 (= true true)))
 (let (($x287 (and $x176 $x299)))
 (let (($x445 (= $x287 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x251 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x375 (bvuge ?x251 (_ bv1 32))))
 (let (($x131 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x206 (= $x131 $x375)))
 (let (($x118 (= ?x251 (_ bv0 32))))
 (let (($x193 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x255 (= $x193 $x118)))
 (let (($x290 (and $x255 $x206)))
 (let (($x132 (= $x290 true)))
 (let (($x195 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x179 (ite $x195 (_ bv0 32) (_ bv1 32))))
 (let (($x49 (bvuge ?x179 (_ bv1 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x224 (= $x127 $x49)))
 (let (($x95 (= ?x179 (_ bv0 32))))
 (let (($x114 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x268 (= $x114 $x95)))
 (let (($x149 (and $x268 $x224)))
 (let (($x203 (= $x149 true)))
 (let ((?x185 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x245 (= (_ bv0 3) ?x185)))
 (let (($x54 (= $x245 true)))
 (let (($x123 (= $x54 true)))
 (let (($x92 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x215 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x215) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x215))))
 (let (($x105 (and true $x159)))
 (let (($x201 (and $x159 $x105)))
 (let (($x48 (= (bvand ?x225 (_ bv4294967288 32)) ?x225)))
 (let (($x170 (= (bvand ?x147 (_ bv4294967292 32)) ?x147)))
 (let (($x356 (and $x170 $x48)))
 (let (($x77 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x147 (bvsub ?x147 (_ bv4 32))) (bvult ?x147 (bvsub ?x147 (_ bv4 32))))))
 (let (($x63 (and (and (and (and (and $x105 $x77) $x170) $x356) $x201) $x92)))
 (let (($x134 (= true $x63)))
 (let (($x175 (not $x136)))
 (let (($x156 (=> $x175 $x134)))
 (let (($x286 (= $x156 true)))
 (let (($x219 (= $x286 true)))
 (let (($x7 (= $x219 true)))
 (let (($x315 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x174 (= $x315 true)))
 (let (($x37 (= $x174 true)))
 (let (($x55 (= $x37 true)))
 (let (($x88 (= $x175 true)))
 (let (($x196 (= $x88 true)))
 (let (($x194 (= $x196 true)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x261)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x283 (and $x187 $x107)))
 (let (($x23 (and $x283 $x190)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (and $x162 $x23)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x33)))))))
 (let (($x169 (and $x157 $x310)))
 (let (($x293 (= $x169 true)))
 (let (($x53 (= $x293 true)))
 (let (($x165 (= $x53 true)))
 (let ((?x133 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x133)))
 (let (($x226 (= ?x234 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x227 (= $x226 true)))
 (let (($x231 (= $x227 true)))
 (let (($x307 (and $x231 $x165)))
 (let (($x279 (and $x307 $x194)))
 (let (($x238 (and $x279 $x55)))
 (let (($x87 (and $x238 $x7)))
 (let (($x292 (and $x87 $x123)))
 (let (($x153 (and $x292 $x203)))
 (let (($x272 (and $x153 $x132)))
 (let (($x148 (and $x131 $x272)))
 (let (($x211 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x167 (and $x211 $x148)))
 (let (($x270 (bvugt ?x147 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x147 (_ bv3 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x74 (=> (bvule ?x147 (bvsub (bvadd ?x147 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x270)))))))
 (let (($x78 (=> (and $x175 (bvule ?x147 (bvsub (bvadd ?x147 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x51 $x270)))))))
 (let (($x126 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x21 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x256 (_ bv1 32))) (or false (or false (and true (or $x204 $x126)))))))
 (let (($x191 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x256 (_ bv1 32)))) (or false (or false (and true (or $x204 $x126)))))))
 (let (($x130 (and $x191 $x78)))
 (let (($x57 (and $x130 $x167)))
 (let (($x240 (=> $x57 $x445)))
 (not $x240)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2753X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x343 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2753X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x305 (concat ?x343 (select input.dst.llvm-mem (bvadd input.ind-%var2753X (_ bv4 32))))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2753X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2753X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x317 (concat ?x47 (concat ?x377 ?x305))))
 (let (($x223 (= ?x317 ?x317)))
 (let ((?x256 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv1 32))) (select input.dst.llvm-mem ?x256))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv2 32))) ?x181))))
 (let (($x230 (= (_ bv0 32) ?x214)))
 (let ((?x237 (ite $x230 (_ bv0 32) (_ bv1 32))))
 (let (($x16 (bvuge ?x237 (_ bv1 32))))
 (let (($x312 (=> $x16 $x223)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2753X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2753X))))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2753X (_ bv2 32))) ?x20)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2753X (_ bv3 32))) ?x43)))
 (let (($x244 (= ?x192 ?x192)))
 (let (($x22 (=> $x16 $x244)))
 (let ((?x147 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x111))))
 (let (($x99 (= (_ bv0 32) ?x225)))
 (let ((?x139 (ite $x99 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x139 (_ bv1 32))))
 (let (($x320 (= $x16 $x161)))
 (let (($x90 (= ?x139 (_ bv0 32))))
 (let (($x306 (= ?x237 (_ bv0 32))))
 (let (($x39 (= $x306 $x90)))
 (let (($x269 (and (and (and (= ?x214 ?x225) (=> $x306 (= false false))) $x39) $x320)))
 (let (($x61 (and (and $x269 $x22) $x312)))
 (let (($x135 (not true)))
 (let (($x299 (or $x135 $x61)))
 (let (($x176 (= true true)))
 (let (($x287 (and $x176 $x299)))
 (let (($x445 (= $x287 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x251 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x375 (bvuge ?x251 (_ bv1 32))))
 (let (($x131 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x206 (= $x131 $x375)))
 (let (($x118 (= ?x251 (_ bv0 32))))
 (let (($x193 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x255 (= $x193 $x118)))
 (let (($x290 (and $x255 $x206)))
 (let (($x132 (= $x290 true)))
 (let (($x195 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x179 (ite $x195 (_ bv0 32) (_ bv1 32))))
 (let (($x49 (bvuge ?x179 (_ bv1 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x224 (= $x127 $x49)))
 (let (($x95 (= ?x179 (_ bv0 32))))
 (let (($x114 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x268 (= $x114 $x95)))
 (let (($x149 (and $x268 $x224)))
 (let (($x203 (= $x149 true)))
 (let ((?x185 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x245 (= (_ bv0 3) ?x185)))
 (let (($x54 (= $x245 true)))
 (let (($x123 (= $x54 true)))
 (let (($x92 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x215 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x215) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x215))))
 (let (($x105 (and true $x159)))
 (let (($x201 (and $x159 $x105)))
 (let (($x48 (= (bvand ?x225 (_ bv4294967288 32)) ?x225)))
 (let (($x170 (= (bvand ?x147 (_ bv4294967292 32)) ?x147)))
 (let (($x356 (and $x170 $x48)))
 (let (($x77 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x147 (bvsub ?x147 (_ bv4 32))) (bvult ?x147 (bvsub ?x147 (_ bv4 32))))))
 (let (($x63 (and (and (and (and (and $x105 $x77) $x170) $x356) $x201) $x92)))
 (let (($x134 (= true $x63)))
 (let (($x175 (not $x136)))
 (let (($x156 (=> $x175 $x134)))
 (let (($x286 (= $x156 true)))
 (let (($x219 (= $x286 true)))
 (let (($x7 (= $x219 true)))
 (let (($x315 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x174 (= $x315 true)))
 (let (($x37 (= $x174 true)))
 (let (($x55 (= $x37 true)))
 (let (($x88 (= $x175 true)))
 (let (($x196 (= $x88 true)))
 (let (($x194 (= $x196 true)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x261)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x283 (and $x187 $x107)))
 (let (($x23 (and $x283 $x190)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (and $x162 $x23)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x33)))))))
 (let (($x169 (and $x157 $x310)))
 (let (($x293 (= $x169 true)))
 (let (($x53 (= $x293 true)))
 (let (($x165 (= $x53 true)))
 (let ((?x133 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x133)))
 (let (($x226 (= ?x234 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x227 (= $x226 true)))
 (let (($x231 (= $x227 true)))
 (let (($x307 (and $x231 $x165)))
 (let (($x279 (and $x307 $x194)))
 (let (($x238 (and $x279 $x55)))
 (let (($x87 (and $x238 $x7)))
 (let (($x292 (and $x87 $x123)))
 (let (($x153 (and $x292 $x203)))
 (let (($x272 (and $x153 $x132)))
 (let (($x148 (and $x131 $x272)))
 (let (($x211 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x167 (and $x211 $x148)))
 (let (($x270 (bvugt ?x147 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x147 (_ bv3 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x74 (=> (bvule ?x147 (bvsub (bvadd ?x147 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x51 $x270)))))))
 (let (($x78 (=> (and $x175 (bvule ?x147 (bvsub (bvadd ?x147 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x51 $x270)))))))
 (let (($x126 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x21 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x256 (_ bv1 32))) (or false (or false (and true (or $x204 $x126)))))))
 (let (($x191 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x256 (_ bv1 32)))) (or false (or false (and true (or $x204 $x126)))))))
 (let (($x130 (and $x191 $x78)))
 (let (($x57 (and $x130 $x167)))
 (let (($x240 (=> $x57 $x445)))
 (not $x240)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 101
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x255 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x167 (or $x255 $x136)))
 (let (($x57 (= $x167 true)))
 (let (($x176 (= $x57 true)))
 (let ((?x193 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x193 (_ bv1 32))))
 (let (($x375 (= $x255 $x131)))
 (let (($x251 (= ?x193 (_ bv0 32))))
 (let (($x119 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x118 (= $x119 $x251)))
 (let (($x206 (and $x118 $x375)))
 (let (($x290 (= $x206 true)))
 (let (($x228 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x195 (ite $x228 (_ bv0 32) (_ bv1 32))))
 (let (($x127 (bvuge ?x195 (_ bv1 32))))
 (let (($x268 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x49 (= $x268 $x127)))
 (let (($x179 (= ?x195 (_ bv0 32))))
 (let (($x50 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x95 (= $x50 $x179)))
 (let (($x224 (and $x95 $x49)))
 (let (($x149 (= $x224 true)))
 (let ((?x295 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x185 (= (_ bv0 3) ?x295)))
 (let (($x245 (= $x185 true)))
 (let (($x54 (= $x245 true)))
 (let (($x356 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x137 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x238) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x238))))
 (let (($x159 (and true $x137)))
 (let (($x44 (and $x137 $x159)))
 (let ((?x46 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem ?x46))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv2 32))) ?x151))))
 (let (($x225 (= (bvand ?x81 (_ bv4294967288 32)) ?x81)))
 (let (($x311 (= (bvand ?x46 (_ bv4294967292 32)) ?x46)))
 (let (($x186 (and $x311 $x225)))
 (let (($x199 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x46 (bvsub ?x46 (_ bv4 32))) (bvult ?x46 (bvsub ?x46 (_ bv4 32))))))
 (let (($x92 (and (and (and (and (and $x159 $x199) $x311) $x186) $x44) $x356)))
 (let (($x63 (= true $x92)))
 (let (($x175 (not $x136)))
 (let (($x134 (=> $x175 $x63)))
 (let (($x156 (= $x134 true)))
 (let (($x286 (= $x156 true)))
 (let (($x219 (= $x286 true)))
 (let (($x304 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x315 (= $x304 true)))
 (let (($x174 (= $x315 true)))
 (let (($x37 (= $x174 true)))
 (let ((?x310 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x310)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x261)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x283 $x190)))
 (let (($x293 (and $x23 $x169)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x229 $x293)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x94)))))))
 (let (($x165 (and $x107 $x53)))
 (let (($x307 (= $x165 true)))
 (let (($x88 (= $x307 true)))
 (let (($x196 (= $x88 true)))
 (let ((?x109 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x109)))
 (let (($x231 (= ?x226 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x182 (= $x231 true)))
 (let (($x72 (= $x182 true)))
 (let (($x194 (and $x72 $x196)))
 (let (($x55 (and $x194 $x37)))
 (let (($x7 (and $x55 $x219)))
 (let (($x123 (and $x7 $x54)))
 (let (($x203 (and $x123 $x149)))
 (let (($x132 (and $x203 $x290)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x272 (and $x122 $x132)))
 (let (($x213 (bvugt ?x46 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x46 (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x211 (=> (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x213)))))))
 (let (($x84 (=> (and $x175 (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x70 $x213)))))))
 (let (($x288 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x164 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x200 (=> $x164 (or false (or false (and true (or $x14 $x288)))))))
 (let (($x28 (=> (and $x175 $x164) (or false (or false (and true (or $x14 $x288)))))))
 (let (($x32 (and $x28 $x84)))
 (let (($x148 (and $x32 $x272)))
 (let (($x135 (=> $x148 $x176)))
 (not $x135))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x255 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x167 (or $x255 $x136)))
 (let (($x57 (= $x167 true)))
 (let (($x176 (= $x57 true)))
 (let ((?x193 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x193 (_ bv1 32))))
 (let (($x375 (= $x255 $x131)))
 (let (($x251 (= ?x193 (_ bv0 32))))
 (let (($x119 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x118 (= $x119 $x251)))
 (let (($x206 (and $x118 $x375)))
 (let (($x290 (= $x206 true)))
 (let (($x228 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x195 (ite $x228 (_ bv0 32) (_ bv1 32))))
 (let (($x127 (bvuge ?x195 (_ bv1 32))))
 (let (($x268 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x49 (= $x268 $x127)))
 (let (($x179 (= ?x195 (_ bv0 32))))
 (let (($x50 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x95 (= $x50 $x179)))
 (let (($x224 (and $x95 $x49)))
 (let (($x149 (= $x224 true)))
 (let ((?x295 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x185 (= (_ bv0 3) ?x295)))
 (let (($x245 (= $x185 true)))
 (let (($x54 (= $x245 true)))
 (let (($x356 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x238 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x137 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x238) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x238))))
 (let (($x159 (and true $x137)))
 (let (($x44 (and $x137 $x159)))
 (let ((?x46 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem ?x46))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv2 32))) ?x151))))
 (let (($x225 (= (bvand ?x81 (_ bv4294967288 32)) ?x81)))
 (let (($x311 (= (bvand ?x46 (_ bv4294967292 32)) ?x46)))
 (let (($x186 (and $x311 $x225)))
 (let (($x199 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x46 (bvsub ?x46 (_ bv4 32))) (bvult ?x46 (bvsub ?x46 (_ bv4 32))))))
 (let (($x92 (and (and (and (and (and $x159 $x199) $x311) $x186) $x44) $x356)))
 (let (($x63 (= true $x92)))
 (let (($x175 (not $x136)))
 (let (($x134 (=> $x175 $x63)))
 (let (($x156 (= $x134 true)))
 (let (($x286 (= $x156 true)))
 (let (($x219 (= $x286 true)))
 (let (($x304 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x315 (= $x304 true)))
 (let (($x174 (= $x315 true)))
 (let (($x37 (= $x174 true)))
 (let ((?x310 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x310)))
 (let ((?x261 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x261)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x283 $x190)))
 (let (($x293 (and $x23 $x169)))
 (let (($x229 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x229 $x293)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x94)))))))
 (let (($x165 (and $x107 $x53)))
 (let (($x307 (= $x165 true)))
 (let (($x88 (= $x307 true)))
 (let (($x196 (= $x88 true)))
 (let ((?x109 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x226 (bvneg ?x109)))
 (let (($x231 (= ?x226 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x182 (= $x231 true)))
 (let (($x72 (= $x182 true)))
 (let (($x194 (and $x72 $x196)))
 (let (($x55 (and $x194 $x37)))
 (let (($x7 (and $x55 $x219)))
 (let (($x123 (and $x7 $x54)))
 (let (($x203 (and $x123 $x149)))
 (let (($x132 (and $x203 $x290)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x272 (and $x122 $x132)))
 (let (($x213 (bvugt ?x46 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x46 (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x211 (=> (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x213)))))))
 (let (($x84 (=> (and $x175 (bvule ?x46 (bvsub (bvadd ?x46 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x70 $x213)))))))
 (let (($x288 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x164 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x200 (=> $x164 (or false (or false (and true (or $x14 $x288)))))))
 (let (($x28 (=> (and $x175 $x164) (or false (or false (and true (or $x14 $x288)))))))
 (let (($x32 (and $x28 $x84)))
 (let (($x148 (and $x32 $x272)))
 (let (($x135 (=> $x148 $x176)))
 (not $x135))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 102
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2829X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2829X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x100 (concat ?x47 (select input.dst.llvm-mem (bvadd input.ind-%var2829X (_ bv4 32))))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2829X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2829X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x145 (concat ?x305 (concat ?x294 ?x100))))
 (let (($x317 (= ?x145 ?x145)))
 (let ((?x204 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x183))))
 (let (($x253 (= (_ bv0 32) ?x237)))
 (let ((?x38 (ite $x253 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x38 (_ bv1 32))))
 (let (($x223 (=> $x161 $x317)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2829X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2829X))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2829X (_ bv2 32))) ?x58)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2829X (_ bv3 32))) ?x110)))
 (let (($x244 (= ?x192 ?x192)))
 (let (($x22 (=> $x161 $x244)))
 (let ((?x164 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x111))))
 (let (($x90 (= (_ bv0 32) ?x117)))
 (let ((?x39 (ite $x90 (_ bv0 32) (_ bv1 32))))
 (let (($x320 (bvuge ?x39 (_ bv1 32))))
 (let (($x269 (= $x161 $x320)))
 (let (($x45 (= ?x39 (_ bv0 32))))
 (let (($x180 (= ?x38 (_ bv0 32))))
 (let (($x16 (= $x180 $x45)))
 (let (($x299 (and (and (and (= ?x237 ?x117) (=> $x180 (= false false))) $x16) $x269)))
 (let (($x445 (and (and $x299 $x22) $x223)))
 (let (($x116 (not true)))
 (let (($x240 (or $x116 $x445)))
 (let (($x366 (= true true)))
 (let (($x144 (and $x366 $x240)))
 (let (($x202 (= $x144 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x132 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge ?x132 (_ bv1 32))))
 (let (($x226 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x57 (= $x226 $x167)))
 (let (($x272 (= ?x132 (_ bv0 32))))
 (let (($x290 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x148 (= $x290 $x272)))
 (let (($x176 (and $x148 $x57)))
 (let (($x135 (= $x176 true)))
 (let (($x203 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x153 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x153 (_ bv1 32))))
 (let (($x251 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x255 (= $x251 $x118)))
 (let (($x119 (= ?x153 (_ bv0 32))))
 (let (($x224 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x193 (= $x224 $x119)))
 (let (($x131 (and $x193 $x255)))
 (let (($x375 (= $x131 true)))
 (let ((?x195 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x179 (= (_ bv0 3) ?x195)))
 (let (($x95 (= $x179 true)))
 (let (($x268 (= $x95 true)))
 (let (($x286 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x163 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x265) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x265))))
 (let (($x311 (and true $x163)))
 (let (($x134 (and $x163 $x311)))
 (let (($x92 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x106 (= (bvand ?x164 (_ bv4294967292 32)) ?x164)))
 (let (($x63 (and $x106 $x92)))
 (let (($x303 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x164 (bvsub ?x164 (_ bv4 32))) (bvult ?x164 (bvsub ?x164 (_ bv4 32))))))
 (let (($x185 (and (and (and (and (and $x311 $x303) $x106) $x63) $x134) $x286)))
 (let (($x245 (= true $x185)))
 (let (($x175 (not $x136)))
 (let (($x54 (=> $x175 $x245)))
 (let (($x123 (= $x54 true)))
 (let (($x292 (= $x123 true)))
 (let (($x50 (= $x292 true)))
 (let (($x137 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x137 true)))
 (let (($x146 (= $x159 true)))
 (let (($x105 (= $x146 true)))
 (let (($x55 (= $x175 true)))
 (let (($x316 (= $x55 true)))
 (let (($x238 (= $x316 true)))
 (let ((?x307 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x307)))
 (let ((?x293 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x293)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x169 $x53)))
 (let (($x196 (and $x165 $x88)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x157 $x196)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x310 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x113)))))))
 (let (($x279 (and $x310 $x194)))
 (let (($x304 (= $x279 true)))
 (let (($x315 (= $x304 true)))
 (let (($x174 (= $x315 true)))
 (let ((?x182 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x182)))
 (let (($x297 (= ?x72 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x177 (= $x297 true)))
 (let (($x264 (= $x177 true)))
 (let (($x37 (and $x264 $x174)))
 (let (($x215 (and $x37 $x238)))
 (let (($x82 (and $x215 $x105)))
 (let (($x114 (and $x82 $x50)))
 (let (($x127 (and $x114 $x268)))
 (let (($x206 (and $x127 $x375)))
 (let (($x26 (and $x206 $x135)))
 (let (($x19 (and $x226 $x26)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x184 (and $x234 $x19)))
 (let (($x78 (bvugt ?x164 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x164 (_ bv3 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x122 (=> (bvule ?x164 (bvsub (bvadd ?x164 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x78)))))))
 (let (($x172 (=> (and $x175 (bvule ?x164 (bvsub (bvadd ?x164 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x74 $x78)))))))
 (let (($x191 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x270 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x204 (_ bv1 32))) (or false (or false (and true (or $x21 $x191)))))))
 (let (($x158 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x204 (_ bv1 32)))) (or false (or false (and true (or $x21 $x191)))))))
 (let (($x189 (and $x158 $x172)))
 (let (($x42 (and $x189 $x184)))
 (let (($x233 (=> $x42 $x202)))
 (not $x233)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var2829X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2829X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x100 (concat ?x47 (select input.dst.llvm-mem (bvadd input.ind-%var2829X (_ bv4 32))))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2829X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var2829X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x145 (concat ?x305 (concat ?x294 ?x100))))
 (let (($x317 (= ?x145 ?x145)))
 (let ((?x204 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x183))))
 (let (($x253 (= (_ bv0 32) ?x237)))
 (let ((?x38 (ite $x253 (_ bv0 32) (_ bv1 32))))
 (let (($x161 (bvuge ?x38 (_ bv1 32))))
 (let (($x223 (=> $x161 $x317)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2829X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var2829X))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2829X (_ bv2 32))) ?x58)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.ind-%var2829X (_ bv3 32))) ?x110)))
 (let (($x244 (= ?x192 ?x192)))
 (let (($x22 (=> $x161 $x244)))
 (let ((?x164 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x111))))
 (let (($x90 (= (_ bv0 32) ?x117)))
 (let ((?x39 (ite $x90 (_ bv0 32) (_ bv1 32))))
 (let (($x320 (bvuge ?x39 (_ bv1 32))))
 (let (($x269 (= $x161 $x320)))
 (let (($x45 (= ?x39 (_ bv0 32))))
 (let (($x180 (= ?x38 (_ bv0 32))))
 (let (($x16 (= $x180 $x45)))
 (let (($x299 (and (and (and (= ?x237 ?x117) (=> $x180 (= false false))) $x16) $x269)))
 (let (($x445 (and (and $x299 $x22) $x223)))
 (let (($x116 (not true)))
 (let (($x240 (or $x116 $x445)))
 (let (($x366 (= true true)))
 (let (($x144 (and $x366 $x240)))
 (let (($x202 (= $x144 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x132 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge ?x132 (_ bv1 32))))
 (let (($x226 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x57 (= $x226 $x167)))
 (let (($x272 (= ?x132 (_ bv0 32))))
 (let (($x290 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x148 (= $x290 $x272)))
 (let (($x176 (and $x148 $x57)))
 (let (($x135 (= $x176 true)))
 (let (($x203 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x153 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x118 (bvuge ?x153 (_ bv1 32))))
 (let (($x251 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x255 (= $x251 $x118)))
 (let (($x119 (= ?x153 (_ bv0 32))))
 (let (($x224 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x193 (= $x224 $x119)))
 (let (($x131 (and $x193 $x255)))
 (let (($x375 (= $x131 true)))
 (let ((?x195 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x179 (= (_ bv0 3) ?x195)))
 (let (($x95 (= $x179 true)))
 (let (($x268 (= $x95 true)))
 (let (($x286 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x163 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x265) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x265))))
 (let (($x311 (and true $x163)))
 (let (($x134 (and $x163 $x311)))
 (let (($x92 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x106 (= (bvand ?x164 (_ bv4294967292 32)) ?x164)))
 (let (($x63 (and $x106 $x92)))
 (let (($x303 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x164 (bvsub ?x164 (_ bv4 32))) (bvult ?x164 (bvsub ?x164 (_ bv4 32))))))
 (let (($x185 (and (and (and (and (and $x311 $x303) $x106) $x63) $x134) $x286)))
 (let (($x245 (= true $x185)))
 (let (($x175 (not $x136)))
 (let (($x54 (=> $x175 $x245)))
 (let (($x123 (= $x54 true)))
 (let (($x292 (= $x123 true)))
 (let (($x50 (= $x292 true)))
 (let (($x137 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x137 true)))
 (let (($x146 (= $x159 true)))
 (let (($x105 (= $x146 true)))
 (let (($x55 (= $x175 true)))
 (let (($x316 (= $x55 true)))
 (let (($x238 (= $x316 true)))
 (let ((?x307 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x307)))
 (let ((?x293 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x293)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x169 $x53)))
 (let (($x196 (and $x165 $x88)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x157 $x196)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x310 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x113)))))))
 (let (($x279 (and $x310 $x194)))
 (let (($x304 (= $x279 true)))
 (let (($x315 (= $x304 true)))
 (let (($x174 (= $x315 true)))
 (let ((?x182 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x182)))
 (let (($x297 (= ?x72 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x177 (= $x297 true)))
 (let (($x264 (= $x177 true)))
 (let (($x37 (and $x264 $x174)))
 (let (($x215 (and $x37 $x238)))
 (let (($x82 (and $x215 $x105)))
 (let (($x114 (and $x82 $x50)))
 (let (($x127 (and $x114 $x268)))
 (let (($x206 (and $x127 $x375)))
 (let (($x26 (and $x206 $x135)))
 (let (($x19 (and $x226 $x26)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x184 (and $x234 $x19)))
 (let (($x78 (bvugt ?x164 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x164 (_ bv3 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x122 (=> (bvule ?x164 (bvsub (bvadd ?x164 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x78)))))))
 (let (($x172 (=> (and $x175 (bvule ?x164 (bvsub (bvadd ?x164 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x74 $x78)))))))
 (let (($x191 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x270 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x204 (_ bv1 32))) (or false (or false (and true (or $x21 $x191)))))))
 (let (($x158 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x204 (_ bv1 32)))) (or false (or false (and true (or $x21 $x191)))))))
 (let (($x189 (and $x158 $x172)))
 (let (($x42 (and $x189 $x184)))
 (let (($x233 (=> $x42 $x202)))
 (not $x233)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 103
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem ?x51))))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv2 32))) ?x81))))
 (let ((?x253 ((_ extract 2 0) ?x356)))
 (let (($x38 (= (_ bv0 3) ?x253)))
 (let (($x180 (= $x38 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x184 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x184 (_ bv1 32))))
 (let (($x375 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x64 (= $x375 $x116)))
 (let (($x42 (= ?x184 (_ bv0 32))))
 (let (($x119 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x31 (= $x119 $x42)))
 (let (($x91 (and $x31 $x64)))
 (let (($x183 (= $x91 true)))
 (let (($x57 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x208 (= $x57 $x116)))
 (let (($x226 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x366 (= $x226 $x42)))
 (let (($x230 (and $x366 $x208)))
 (let (($x181 (= $x230 true)))
 (let (($x251 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x118 (ite $x251 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x118 (_ bv1 32))))
 (let (($x176 (= $x57 $x206)))
 (let (($x255 (= ?x118 (_ bv0 32))))
 (let (($x167 (= $x226 $x255)))
 (let (($x135 (and $x167 $x176)))
 (let (($x26 (= $x135 true)))
 (let (($x109 (= $x375 $x206)))
 (let (($x131 (= $x119 $x255)))
 (let (($x290 (and $x131 $x109)))
 (let (($x132 (= $x290 true)))
 (let ((?x127 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x49 (= (_ bv0 3) ?x127)))
 (let (($x224 (= $x49 true)))
 (let (($x149 (= $x224 true)))
 (let (($x286 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x163 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x301 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x163) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x163))))
 (let (($x250 (and true $x301)))
 (let (($x295 (and $x301 $x250)))
 (let (($x87 (= (bvand ?x356 (_ bv4294967288 32)) ?x356)))
 (let (($x44 (= (bvand ?x51 (_ bv4294967292 32)) ?x51)))
 (let (($x134 (and $x44 $x87)))
 (let (($x106 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x51 (bvsub ?x51 (_ bv4 32))) (bvult ?x51 (bvsub ?x51 (_ bv4 32))))))
 (let (($x292 (and (and (and (and (and $x250 $x106) $x44) $x134) $x295) $x286)))
 (let (($x50 (= true $x292)))
 (let (($x175 (not $x136)))
 (let (($x114 (=> $x175 $x50)))
 (let (($x228 (= $x114 true)))
 (let (($x195 (= $x228 true)))
 (let (($x179 (= $x195 true)))
 (let (($x82 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x199 (= $x82 true)))
 (let (($x265 (= $x199 true)))
 (let (($x267 (= $x265 true)))
 (let (($x60 (= $x175 true)))
 (let (($x137 (= $x60 true)))
 (let (($x159 (= $x137 true)))
 (let (($x55 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x316 (= $x55 true)))
 (let (($x238 (= $x316 true)))
 (let (($x279 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x304 (= $x279 true)))
 (let (($x315 (= $x304 true)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x157)))
 (let ((?x190 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x310 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x190)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x261 $x310)))
 (let (($x293 (and $x94 $x169)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x33 $x293)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x283 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x162)))))))
 (let (($x165 (and $x283 $x53)))
 (let (($x307 (= $x165 true)))
 (let (($x88 (= $x307 true)))
 (let (($x196 (= $x88 true)))
 (let (($x174 (and $x196 $x315)))
 (let (($x215 (and $x174 $x238)))
 (let (($x146 (and $x215 $x159)))
 (let (($x77 (and $x146 $x267)))
 (let (($x95 (and $x77 $x179)))
 (let (($x203 (and $x95 $x149)))
 (let (($x272 (and $x203 $x132)))
 (let (($x19 (and $x272 $x26)))
 (let (($x10 (and $x19 $x181)))
 (let (($x214 (and $x10 $x183)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x237 (and $x231 $x214)))
 (let (($x84 (bvugt ?x51 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x51 (_ bv3 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x234 (=> (bvule ?x51 (bvsub (bvadd ?x51 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x211 $x84)))))))
 (let (($x197 (=> (and $x175 (bvule ?x51 (bvsub (bvadd ?x51 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x211 $x84)))))))
 (let (($x28 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x70 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x213 (=> $x70 (or false (or false (and true (or $x200 $x28)))))))
 (let (($x18 (=> (and $x175 $x70) (or false (or false (and true (or $x200 $x28)))))))
 (let (($x13 (and $x18 $x197)))
 (let (($x306 (and $x13 $x237)))
 (let (($x99 (=> $x306 $x180)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem ?x51))))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv2 32))) ?x81))))
 (let ((?x253 ((_ extract 2 0) ?x356)))
 (let (($x38 (= (_ bv0 3) ?x253)))
 (let (($x180 (= $x38 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x184 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x184 (_ bv1 32))))
 (let (($x375 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x64 (= $x375 $x116)))
 (let (($x42 (= ?x184 (_ bv0 32))))
 (let (($x119 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x31 (= $x119 $x42)))
 (let (($x91 (and $x31 $x64)))
 (let (($x183 (= $x91 true)))
 (let (($x57 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x208 (= $x57 $x116)))
 (let (($x226 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x366 (= $x226 $x42)))
 (let (($x230 (and $x366 $x208)))
 (let (($x181 (= $x230 true)))
 (let (($x251 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x118 (ite $x251 (_ bv0 32) (_ bv1 32))))
 (let (($x206 (bvuge ?x118 (_ bv1 32))))
 (let (($x176 (= $x57 $x206)))
 (let (($x255 (= ?x118 (_ bv0 32))))
 (let (($x167 (= $x226 $x255)))
 (let (($x135 (and $x167 $x176)))
 (let (($x26 (= $x135 true)))
 (let (($x109 (= $x375 $x206)))
 (let (($x131 (= $x119 $x255)))
 (let (($x290 (and $x131 $x109)))
 (let (($x132 (= $x290 true)))
 (let ((?x127 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x49 (= (_ bv0 3) ?x127)))
 (let (($x224 (= $x49 true)))
 (let (($x149 (= $x224 true)))
 (let (($x286 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x163 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x301 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x163) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x163))))
 (let (($x250 (and true $x301)))
 (let (($x295 (and $x301 $x250)))
 (let (($x87 (= (bvand ?x356 (_ bv4294967288 32)) ?x356)))
 (let (($x44 (= (bvand ?x51 (_ bv4294967292 32)) ?x51)))
 (let (($x134 (and $x44 $x87)))
 (let (($x106 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x51 (bvsub ?x51 (_ bv4 32))) (bvult ?x51 (bvsub ?x51 (_ bv4 32))))))
 (let (($x292 (and (and (and (and (and $x250 $x106) $x44) $x134) $x295) $x286)))
 (let (($x50 (= true $x292)))
 (let (($x175 (not $x136)))
 (let (($x114 (=> $x175 $x50)))
 (let (($x228 (= $x114 true)))
 (let (($x195 (= $x228 true)))
 (let (($x179 (= $x195 true)))
 (let (($x82 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x199 (= $x82 true)))
 (let (($x265 (= $x199 true)))
 (let (($x267 (= $x265 true)))
 (let (($x60 (= $x175 true)))
 (let (($x137 (= $x60 true)))
 (let (($x159 (= $x137 true)))
 (let (($x55 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x316 (= $x55 true)))
 (let (($x238 (= $x316 true)))
 (let (($x279 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x304 (= $x279 true)))
 (let (($x315 (= $x304 true)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x157)))
 (let ((?x190 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x310 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x190)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x261 $x310)))
 (let (($x293 (and $x94 $x169)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x33 $x293)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x283 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x162)))))))
 (let (($x165 (and $x283 $x53)))
 (let (($x307 (= $x165 true)))
 (let (($x88 (= $x307 true)))
 (let (($x196 (= $x88 true)))
 (let (($x174 (and $x196 $x315)))
 (let (($x215 (and $x174 $x238)))
 (let (($x146 (and $x215 $x159)))
 (let (($x77 (and $x146 $x267)))
 (let (($x95 (and $x77 $x179)))
 (let (($x203 (and $x95 $x149)))
 (let (($x272 (and $x203 $x132)))
 (let (($x19 (and $x272 $x26)))
 (let (($x10 (and $x19 $x181)))
 (let (($x214 (and $x10 $x183)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x237 (and $x231 $x214)))
 (let (($x84 (bvugt ?x51 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x51 (_ bv3 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x234 (=> (bvule ?x51 (bvsub (bvadd ?x51 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x211 $x84)))))))
 (let (($x197 (=> (and $x175 (bvule ?x51 (bvsub (bvadd ?x51 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x211 $x84)))))))
 (let (($x28 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x70 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x213 (=> $x70 (or false (or false (and true (or $x200 $x28)))))))
 (let (($x18 (=> (and $x175 $x70) (or false (or false (and true (or $x200 $x28)))))))
 (let (($x13 (and $x18 $x197)))
 (let (($x306 (and $x13 $x237)))
 (let (($x99 (=> $x306 $x180)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 104
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x46 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x45 (concat (select input.dst.llvm-mem ?x46) (concat ?x312 (concat ?x168 ?x99)))))
 (let ((?x16 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x45)))
 (let (($x61 (= (_ bv0 32) ?x16)))
 (let (($x161 (= $x61 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x116 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x116 (_ bv1 32))))
 (let (($x290 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x214 (= $x290 $x181)))
 (let (($x208 (= ?x116 (_ bv0 32))))
 (let (($x118 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x183 (= $x118 $x208)))
 (let (($x237 (and $x183 $x214)))
 (let (($x306 (= $x237 true)))
 (let (($x26 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x10 (= $x26 $x181)))
 (let (($x176 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x230 (= $x176 $x208)))
 (let (($x31 (and $x230 $x10)))
 (let (($x64 (= $x31 true)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x375 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x132 (bvuge ?x375 (_ bv1 32))))
 (let (($x19 (= $x26 $x132)))
 (let (($x206 (= ?x375 (_ bv0 32))))
 (let (($x135 (= $x176 $x206)))
 (let (($x184 (and $x135 $x19)))
 (let (($x42 (= $x184 true)))
 (let (($x272 (= $x290 $x132)))
 (let (($x109 (= $x118 $x206)))
 (let (($x148 (and $x109 $x272)))
 (let (($x226 (= $x148 true)))
 (let ((?x149 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x203 (= (_ bv0 3) ?x149)))
 (let (($x153 (= $x203 true)))
 (let (($x119 (= $x153 true)))
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x268 (= $x95 true)))
 (let (($x127 (= $x268 true)))
 (let (($x87 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x267 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x66 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x267) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x267))))
 (let (($x201 (and true $x66)))
 (let (($x92 (and $x66 $x201)))
 (let ((?x70 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x239))))
 (let (($x117 (= (bvand ?x259 (_ bv4294967288 32)) ?x259)))
 (let (($x185 (= (bvand ?x70 (_ bv4294967292 32)) ?x70)))
 (let (($x356 (and $x185 $x117)))
 (let (($x154 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x70 (bvsub ?x70 (_ bv4 32))) (bvult ?x70 (bvsub ?x70 (_ bv4 32))))))
 (let (($x156 (and (and (and (and (and $x201 $x154) $x185) $x356) $x92) $x87)))
 (let (($x286 (= true $x156)))
 (let (($x175 (not $x136)))
 (let (($x292 (=> $x175 $x286)))
 (let (($x50 (= $x292 true)))
 (let (($x114 (= $x50 true)))
 (let (($x228 (= $x114 true)))
 (let (($x146 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x105 (= $x146 true)))
 (let (($x82 (= $x105 true)))
 (let (($x199 (= $x82 true)))
 (let (($x238 (= $x175 true)))
 (let (($x215 (= $x238 true)))
 (let (($x60 (= $x215 true)))
 (let (($x174 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x37 (= $x174 true)))
 (let (($x55 (= $x37 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x53)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x94 $x169)))
 (let (($x307 (and $x293 $x165)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x83 $x307)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x310 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x113)))))))
 (let (($x196 (and $x310 $x88)))
 (let (($x194 (= $x196 true)))
 (let (($x279 (= $x194 true)))
 (let (($x304 (= $x279 true)))
 (let (($x316 (and $x304 $x55)))
 (let (($x137 (and $x316 $x60)))
 (let (($x265 (and $x137 $x199)))
 (let (($x195 (and $x265 $x228)))
 (let (($x49 (and $x195 $x127)))
 (let (($x193 (and $x49 $x119)))
 (let (($x167 (and $x193 $x226)))
 (let (($x366 (and $x167 $x42)))
 (let (($x91 (and $x366 $x64)))
 (let (($x253 (and $x91 $x306)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x38 (and $x177 $x253)))
 (let (($x172 (bvugt ?x70 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x70 (_ bv3 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x231 (=> (bvule ?x70 (bvsub (bvadd ?x70 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x172)))))))
 (let (($x133 (=> (and $x175 (bvule ?x70 (bvsub (bvadd ?x70 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x122 $x172)))))))
 (let (($x158 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x74 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x78 (=> $x74 (or false (or false (and true (or $x270 $x158)))))))
 (let (($x260 (=> (and $x175 $x74) (or false (or false (and true (or $x270 $x158)))))))
 (let (($x130 (and $x260 $x133)))
 (let (($x180 (and $x130 $x38)))
 (let (($x320 (=> $x180 $x161)))
 (not $x320)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x46 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x45 (concat (select input.dst.llvm-mem ?x46) (concat ?x312 (concat ?x168 ?x99)))))
 (let ((?x16 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x45)))
 (let (($x61 (= (_ bv0 32) ?x16)))
 (let (($x161 (= $x61 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x116 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x116 (_ bv1 32))))
 (let (($x290 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x214 (= $x290 $x181)))
 (let (($x208 (= ?x116 (_ bv0 32))))
 (let (($x118 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x183 (= $x118 $x208)))
 (let (($x237 (and $x183 $x214)))
 (let (($x306 (= $x237 true)))
 (let (($x26 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x10 (= $x26 $x181)))
 (let (($x176 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x230 (= $x176 $x208)))
 (let (($x31 (and $x230 $x10)))
 (let (($x64 (= $x31 true)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x375 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x132 (bvuge ?x375 (_ bv1 32))))
 (let (($x19 (= $x26 $x132)))
 (let (($x206 (= ?x375 (_ bv0 32))))
 (let (($x135 (= $x176 $x206)))
 (let (($x184 (and $x135 $x19)))
 (let (($x42 (= $x184 true)))
 (let (($x272 (= $x290 $x132)))
 (let (($x109 (= $x118 $x206)))
 (let (($x148 (and $x109 $x272)))
 (let (($x226 (= $x148 true)))
 (let ((?x149 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x203 (= (_ bv0 3) ?x149)))
 (let (($x153 (= $x203 true)))
 (let (($x119 (= $x153 true)))
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x268 (= $x95 true)))
 (let (($x127 (= $x268 true)))
 (let (($x87 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x267 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x66 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x267) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x267))))
 (let (($x201 (and true $x66)))
 (let (($x92 (and $x66 $x201)))
 (let ((?x70 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x239))))
 (let (($x117 (= (bvand ?x259 (_ bv4294967288 32)) ?x259)))
 (let (($x185 (= (bvand ?x70 (_ bv4294967292 32)) ?x70)))
 (let (($x356 (and $x185 $x117)))
 (let (($x154 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x70 (bvsub ?x70 (_ bv4 32))) (bvult ?x70 (bvsub ?x70 (_ bv4 32))))))
 (let (($x156 (and (and (and (and (and $x201 $x154) $x185) $x356) $x92) $x87)))
 (let (($x286 (= true $x156)))
 (let (($x175 (not $x136)))
 (let (($x292 (=> $x175 $x286)))
 (let (($x50 (= $x292 true)))
 (let (($x114 (= $x50 true)))
 (let (($x228 (= $x114 true)))
 (let (($x146 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x105 (= $x146 true)))
 (let (($x82 (= $x105 true)))
 (let (($x199 (= $x82 true)))
 (let (($x238 (= $x175 true)))
 (let (($x215 (= $x238 true)))
 (let (($x60 (= $x215 true)))
 (let (($x174 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x37 (= $x174 true)))
 (let (($x55 (= $x37 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x165 (= (_ bv0 32) ?x53)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x157)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x94 $x169)))
 (let (($x307 (and $x293 $x165)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x83 $x307)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x310 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x113)))))))
 (let (($x196 (and $x310 $x88)))
 (let (($x194 (= $x196 true)))
 (let (($x279 (= $x194 true)))
 (let (($x304 (= $x279 true)))
 (let (($x316 (and $x304 $x55)))
 (let (($x137 (and $x316 $x60)))
 (let (($x265 (and $x137 $x199)))
 (let (($x195 (and $x265 $x228)))
 (let (($x49 (and $x195 $x127)))
 (let (($x193 (and $x49 $x119)))
 (let (($x167 (and $x193 $x226)))
 (let (($x366 (and $x167 $x42)))
 (let (($x91 (and $x366 $x64)))
 (let (($x253 (and $x91 $x306)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x38 (and $x177 $x253)))
 (let (($x172 (bvugt ?x70 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x70 (_ bv3 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x231 (=> (bvule ?x70 (bvsub (bvadd ?x70 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x172)))))))
 (let (($x133 (=> (and $x175 (bvule ?x70 (bvsub (bvadd ?x70 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x122 $x172)))))))
 (let (($x158 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x74 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x78 (=> $x74 (or false (or false (and true (or $x270 $x158)))))))
 (let (($x260 (=> (and $x175 $x74) (or false (or false (and true (or $x270 $x158)))))))
 (let (($x130 (and $x260 $x133)))
 (let (($x180 (and $x130 $x38)))
 (let (($x320 (=> $x180 $x161)))
 (not $x320)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x41c00000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x65fffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x65fffff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x41c00000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x41c00003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x45f44000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6df577fc)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x45f44003 #xff))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6df577fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6df577ff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 105
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x299 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x164 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x443 (concat (select input.dst.llvm-mem ?x164) (concat ?x43 (concat ?x299 ?x229)))))
 (let ((?x266 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x443)))
 (let (($x9 (= (_ bv0 32) ?x266)))
 (let (($x58 (= $x9 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x306 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge ?x306 (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x90 (= $x148 $x180)))
 (let (($x253 (= ?x306 (_ bv0 32))))
 (let (($x375 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x182 (= $x375 $x253)))
 (let (($x61 (and (and (and (not $x375) (not $x148)) $x182) $x90)))
 (let (($x161 (= $x61 true)))
 (let (($x230 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x31 (not $x230)))
 (let (($x116 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x10 (not $x116)))
 (let (($x139 (and (and (and (= $x116 $x253) (= $x230 $x180)) $x10) $x31)))
 (let (($x168 (= $x139 true)))
 (let (($x109 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x290 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x226 (bvuge ?x290 (_ bv1 32))))
 (let (($x181 (= $x230 $x226)))
 (let (($x132 (= ?x290 (_ bv0 32))))
 (let (($x208 (= $x116 $x132)))
 (let (($x183 (and (and (and $x208 $x181) $x10) $x31)))
 (let (($x214 (= $x183 true)))
 (let (($x176 (not $x148)))
 (let (($x19 (and (and (and (= $x375 $x132) (= $x148 $x226)) (not $x375)) $x176)))
 (let (($x184 (= $x19 true)))
 (let ((?x119 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x193 (= (_ bv0 3) ?x119)))
 (let (($x251 (= $x193 true)))
 (let (($x118 (= $x251 true)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x224 (= $x49 true)))
 (let (($x149 (= $x224 true)))
 (let (($x63 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x163 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x301 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x163) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x163))))
 (let (($x219 (and true $x301)))
 (let (($x92 (and $x301 $x219)))
 (let ((?x74 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x44))))
 (let (($x356 (= (bvand ?x225 (_ bv4294967288 32)) ?x225)))
 (let (($x7 (= (bvand ?x74 (_ bv4294967292 32)) ?x74)))
 (let (($x295 (and $x7 $x356)))
 (let (($x106 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x74 (bvsub ?x74 (_ bv4 32))) (bvult ?x74 (bvsub ?x74 (_ bv4 32))))))
 (let (($x50 (and (and (and (and (and $x219 $x106) $x7) $x295) $x92) $x63)))
 (let (($x114 (= true $x50)))
 (let (($x175 (not $x136)))
 (let (($x228 (=> $x175 $x114)))
 (let (($x195 (= $x228 true)))
 (let (($x179 (= $x195 true)))
 (let (($x95 (= $x179 true)))
 (let (($x199 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x265 (= $x199 true)))
 (let (($x77 (= $x265 true)))
 (let (($x267 (= $x77 true)))
 (let (($x137 (= $x175 true)))
 (let (($x159 (= $x137 true)))
 (let (($x146 (= $x159 true)))
 (let (($x316 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x238 (= $x316 true)))
 (let (($x215 (= $x238 true)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x88)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x307 (and $x293 $x165)))
 (let (($x194 (and $x307 $x196)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x107 $x194)))
 (let (($x261 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x169 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x261)))))))
 (let (($x304 (and $x169 $x279)))
 (let (($x315 (= $x304 true)))
 (let (($x174 (= $x315 true)))
 (let (($x37 (= $x174 true)))
 (let (($x60 (and $x37 $x215)))
 (let (($x105 (and $x60 $x146)))
 (let (($x311 (and $x105 $x267)))
 (let (($x268 (and $x311 $x95)))
 (let (($x203 (and $x268 $x149)))
 (let (($x255 (and $x203 $x118)))
 (let (($x42 (and $x255 $x184)))
 (let (($x237 (and $x42 $x214)))
 (let (($x99 (and $x237 $x168)))
 (let (($x320 (and $x99 $x161)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x269 (and $x23 $x320)))
 (let (($x197 (bvugt ?x74 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x74 (_ bv3 32))))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x177 (=> (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x197)))))))
 (let (($x227 (=> (and $x175 (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x234 $x197)))))))
 (let (($x18 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x211 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x84 (=> $x211 (or false (or false (and true (or $x213 $x18)))))))
 (let (($x147 (=> (and $x175 $x211) (or false (or false (and true (or $x213 $x18)))))))
 (let (($x32 (and $x147 $x227)))
 (let (($x204 (and $x32 $x269)))
 (let (($x110 (=> $x204 $x58)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x299 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x164 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x443 (concat (select input.dst.llvm-mem ?x164) (concat ?x43 (concat ?x299 ?x229)))))
 (let ((?x266 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x443)))
 (let (($x9 (= (_ bv0 32) ?x266)))
 (let (($x58 (= $x9 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x306 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge ?x306 (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x90 (= $x148 $x180)))
 (let (($x253 (= ?x306 (_ bv0 32))))
 (let (($x375 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x182 (= $x375 $x253)))
 (let (($x61 (and (and (and (not $x375) (not $x148)) $x182) $x90)))
 (let (($x161 (= $x61 true)))
 (let (($x230 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x31 (not $x230)))
 (let (($x116 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x10 (not $x116)))
 (let (($x139 (and (and (and (= $x116 $x253) (= $x230 $x180)) $x10) $x31)))
 (let (($x168 (= $x139 true)))
 (let (($x109 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x290 (ite $x109 (_ bv0 32) (_ bv1 32))))
 (let (($x226 (bvuge ?x290 (_ bv1 32))))
 (let (($x181 (= $x230 $x226)))
 (let (($x132 (= ?x290 (_ bv0 32))))
 (let (($x208 (= $x116 $x132)))
 (let (($x183 (and (and (and $x208 $x181) $x10) $x31)))
 (let (($x214 (= $x183 true)))
 (let (($x176 (not $x148)))
 (let (($x19 (and (and (and (= $x375 $x132) (= $x148 $x226)) (not $x375)) $x176)))
 (let (($x184 (= $x19 true)))
 (let ((?x119 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x193 (= (_ bv0 3) ?x119)))
 (let (($x251 (= $x193 true)))
 (let (($x118 (= $x251 true)))
 (let (($x49 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x224 (= $x49 true)))
 (let (($x149 (= $x224 true)))
 (let (($x63 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x163 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x301 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x163) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x163))))
 (let (($x219 (and true $x301)))
 (let (($x92 (and $x301 $x219)))
 (let ((?x74 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x44))))
 (let (($x356 (= (bvand ?x225 (_ bv4294967288 32)) ?x225)))
 (let (($x7 (= (bvand ?x74 (_ bv4294967292 32)) ?x74)))
 (let (($x295 (and $x7 $x356)))
 (let (($x106 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x74 (bvsub ?x74 (_ bv4 32))) (bvult ?x74 (bvsub ?x74 (_ bv4 32))))))
 (let (($x50 (and (and (and (and (and $x219 $x106) $x7) $x295) $x92) $x63)))
 (let (($x114 (= true $x50)))
 (let (($x175 (not $x136)))
 (let (($x228 (=> $x175 $x114)))
 (let (($x195 (= $x228 true)))
 (let (($x179 (= $x195 true)))
 (let (($x95 (= $x179 true)))
 (let (($x199 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x265 (= $x199 true)))
 (let (($x77 (= $x265 true)))
 (let (($x267 (= $x77 true)))
 (let (($x137 (= $x175 true)))
 (let (($x159 (= $x137 true)))
 (let (($x146 (= $x159 true)))
 (let (($x316 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x238 (= $x316 true)))
 (let (($x215 (= $x238 true)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x88)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x307 (and $x293 $x165)))
 (let (($x194 (and $x307 $x196)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x107 $x194)))
 (let (($x261 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x169 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x261)))))))
 (let (($x304 (and $x169 $x279)))
 (let (($x315 (= $x304 true)))
 (let (($x174 (= $x315 true)))
 (let (($x37 (= $x174 true)))
 (let (($x60 (and $x37 $x215)))
 (let (($x105 (and $x60 $x146)))
 (let (($x311 (and $x105 $x267)))
 (let (($x268 (and $x311 $x95)))
 (let (($x203 (and $x268 $x149)))
 (let (($x255 (and $x203 $x118)))
 (let (($x42 (and $x255 $x184)))
 (let (($x237 (and $x42 $x214)))
 (let (($x99 (and $x237 $x168)))
 (let (($x320 (and $x99 $x161)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x269 (and $x23 $x320)))
 (let (($x197 (bvugt ?x74 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x74 (_ bv3 32))))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x177 (=> (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x197)))))))
 (let (($x227 (=> (and $x175 (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x234 $x197)))))))
 (let (($x18 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x211 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x84 (=> $x211 (or false (or false (and true (or $x213 $x18)))))))
 (let (($x147 (=> (and $x175 $x211) (or false (or false (and true (or $x213 $x18)))))))
 (let (($x32 (and $x147 $x227)))
 (let (($x204 (and $x32 $x269)))
 (let (($x110 (=> $x204 $x58)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 106
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x51 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x124 (concat (select input.dst.llvm-mem ?x51) (concat ?x288 (concat ?x173 ?x269)))))
 (let ((?x220 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x124)))
 (let (($x443 (= (_ bv0 32) ?x220)))
 (let (($x266 (= $x443 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x306 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge ?x306 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x45 (= $x135 $x180)))
 (let (($x253 (= ?x306 (_ bv0 32))))
 (let (($x290 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x99 (= $x290 $x253)))
 (let (($x176 (= false false)))
 (let (($x19 (=> $x290 $x176)))
 (let (($x16 (and (and $x19 $x99) $x45)))
 (let (($x90 (= $x16 true)))
 (let (($x230 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x91 (=> $x230 $x176)))
 (let (($x64 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x39 (= $x64 $x180)))
 (let (($x38 (= $x230 $x253)))
 (let (($x312 (and (and $x38 $x39) $x91)))
 (let (($x139 (= $x312 true)))
 (let (($x272 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x148 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (bvuge ?x148 (_ bv1 32))))
 (let (($x10 (= $x64 $x57)))
 (let (($x226 (= ?x148 (_ bv0 32))))
 (let (($x181 (= $x230 $x226)))
 (let (($x183 (and (and $x181 $x10) $x91)))
 (let (($x214 (= $x183 true)))
 (let (($x42 (and (and (= $x290 $x226) (= $x135 $x57)) $x19)))
 (let (($x366 (= $x42 true)))
 (let ((?x118 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x255 (= (_ bv0 3) ?x118)))
 (let (($x131 (= $x255 true)))
 (let (($x375 (= $x131 true)))
 (let (($x203 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x153 (= $x203 true)))
 (let (($x119 (= $x153 true)))
 (let (($x123 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x250 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x303 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x250) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x250))))
 (let (($x134 (and true $x303)))
 (let (($x92 (and $x303 $x134)))
 (let ((?x211 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv1 32))) (select input.dst.llvm-mem ?x211))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv2 32))) ?x151))))
 (let (($x295 (= (bvand ?x81 (_ bv4294967288 32)) ?x81)))
 (let (($x186 (= (bvand ?x211 (_ bv4294967292 32)) ?x211)))
 (let (($x286 (and $x186 $x295)))
 (let (($x54 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x211 (bvsub ?x211 (_ bv4 32))) (bvult ?x211 (bvsub ?x211 (_ bv4 32))))))
 (let (($x195 (and (and (and (and (and $x134 $x54) $x186) $x286) $x92) $x123)))
 (let (($x179 (= true $x195)))
 (let (($x175 (not $x136)))
 (let (($x95 (=> $x175 $x179)))
 (let (($x268 (= $x95 true)))
 (let (($x127 (= $x268 true)))
 (let (($x49 (= $x127 true)))
 (let (($x267 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x311 (= $x267 true)))
 (let (($x66 (= $x311 true)))
 (let (($x163 (= $x66 true)))
 (let (($x105 (= $x175 true)))
 (let (($x82 (= $x105 true)))
 (let (($x199 (= $x82 true)))
 (let (($x60 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x137 (= $x60 true)))
 (let (($x159 (= $x137 true)))
 (let ((?x279 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x304 (= (_ bv0 32) ?x279)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x307 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x307 $x196)))
 (let (($x315 (and $x194 $x304)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x33 $x315)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x94)))))))
 (let (($x37 (and $x165 $x174)))
 (let (($x55 (= $x37 true)))
 (let (($x316 (= $x55 true)))
 (let (($x238 (= $x316 true)))
 (let (($x146 (and $x238 $x159)))
 (let (($x265 (and $x146 $x199)))
 (let (($x201 (and $x265 $x163)))
 (let (($x224 (and $x201 $x49)))
 (let (($x193 (and $x224 $x119)))
 (let (($x206 (and $x193 $x375)))
 (let (($x116 (and $x206 $x366)))
 (let (($x237 (and $x116 $x214)))
 (let (($x168 (and $x237 $x139)))
 (let (($x61 (and $x168 $x90)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x161 (and $x283 $x61)))
 (let (($x133 (bvugt ?x211 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x211 (_ bv3 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x23 (=> (bvule ?x211 (bvsub (bvadd ?x211 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x231 $x133)))))))
 (let (($x297 (=> (and $x175 (bvule ?x211 (bvsub (bvadd ?x211 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x231 $x133)))))))
 (let (($x260 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x172 (=> $x122 (or false (or false (and true (or $x78 $x260)))))))
 (let (($x46 (=> (and $x175 $x122) (or false (or false (and true (or $x78 $x260)))))))
 (let (($x189 (and $x46 $x297)))
 (let (($x320 (and $x189 $x161)))
 (let (($x9 (=> $x320 $x266)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x51 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x124 (concat (select input.dst.llvm-mem ?x51) (concat ?x288 (concat ?x173 ?x269)))))
 (let ((?x220 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x124)))
 (let (($x443 (= (_ bv0 32) ?x220)))
 (let (($x266 (= $x443 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x306 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x180 (bvuge ?x306 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x45 (= $x135 $x180)))
 (let (($x253 (= ?x306 (_ bv0 32))))
 (let (($x290 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x99 (= $x290 $x253)))
 (let (($x176 (= false false)))
 (let (($x19 (=> $x290 $x176)))
 (let (($x16 (and (and $x19 $x99) $x45)))
 (let (($x90 (= $x16 true)))
 (let (($x230 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x91 (=> $x230 $x176)))
 (let (($x64 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x39 (= $x64 $x180)))
 (let (($x38 (= $x230 $x253)))
 (let (($x312 (and (and $x38 $x39) $x91)))
 (let (($x139 (= $x312 true)))
 (let (($x272 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x148 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (bvuge ?x148 (_ bv1 32))))
 (let (($x10 (= $x64 $x57)))
 (let (($x226 (= ?x148 (_ bv0 32))))
 (let (($x181 (= $x230 $x226)))
 (let (($x183 (and (and $x181 $x10) $x91)))
 (let (($x214 (= $x183 true)))
 (let (($x42 (and (and (= $x290 $x226) (= $x135 $x57)) $x19)))
 (let (($x366 (= $x42 true)))
 (let ((?x118 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x255 (= (_ bv0 3) ?x118)))
 (let (($x131 (= $x255 true)))
 (let (($x375 (= $x131 true)))
 (let (($x203 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x153 (= $x203 true)))
 (let (($x119 (= $x153 true)))
 (let (($x123 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x250 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x303 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x250) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x250))))
 (let (($x134 (and true $x303)))
 (let (($x92 (and $x303 $x134)))
 (let ((?x211 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv1 32))) (select input.dst.llvm-mem ?x211))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x211 (_ bv2 32))) ?x151))))
 (let (($x295 (= (bvand ?x81 (_ bv4294967288 32)) ?x81)))
 (let (($x186 (= (bvand ?x211 (_ bv4294967292 32)) ?x211)))
 (let (($x286 (and $x186 $x295)))
 (let (($x54 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x211 (bvsub ?x211 (_ bv4 32))) (bvult ?x211 (bvsub ?x211 (_ bv4 32))))))
 (let (($x195 (and (and (and (and (and $x134 $x54) $x186) $x286) $x92) $x123)))
 (let (($x179 (= true $x195)))
 (let (($x175 (not $x136)))
 (let (($x95 (=> $x175 $x179)))
 (let (($x268 (= $x95 true)))
 (let (($x127 (= $x268 true)))
 (let (($x49 (= $x127 true)))
 (let (($x267 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x311 (= $x267 true)))
 (let (($x66 (= $x311 true)))
 (let (($x163 (= $x66 true)))
 (let (($x105 (= $x175 true)))
 (let (($x82 (= $x105 true)))
 (let (($x199 (= $x82 true)))
 (let (($x60 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x137 (= $x60 true)))
 (let (($x159 (= $x137 true)))
 (let ((?x279 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x304 (= (_ bv0 32) ?x279)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x307 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x307 $x196)))
 (let (($x315 (and $x194 $x304)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x33 $x315)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x94)))))))
 (let (($x37 (and $x165 $x174)))
 (let (($x55 (= $x37 true)))
 (let (($x316 (= $x55 true)))
 (let (($x238 (= $x316 true)))
 (let (($x146 (and $x238 $x159)))
 (let (($x265 (and $x146 $x199)))
 (let (($x201 (and $x265 $x163)))
 (let (($x224 (and $x201 $x49)))
 (let (($x193 (and $x224 $x119)))
 (let (($x206 (and $x193 $x375)))
 (let (($x116 (and $x206 $x366)))
 (let (($x237 (and $x116 $x214)))
 (let (($x168 (and $x237 $x139)))
 (let (($x61 (and $x168 $x90)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x161 (and $x283 $x61)))
 (let (($x133 (bvugt ?x211 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x211 (_ bv3 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x23 (=> (bvule ?x211 (bvsub (bvadd ?x211 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x231 $x133)))))))
 (let (($x297 (=> (and $x175 (bvule ?x211 (bvsub (bvadd ?x211 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x231 $x133)))))))
 (let (($x260 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x172 (=> $x122 (or false (or false (and true (or $x78 $x260)))))))
 (let (($x46 (=> (and $x175 $x122) (or false (or false (and true (or $x78 $x260)))))))
 (let (($x189 (and $x46 $x297)))
 (let (($x320 (and $x189 $x161)))
 (let (($x9 (=> $x320 $x266)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x41c00000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x65fffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x65fffff8 #xff))
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x41c00000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x41c00003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1048536 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1048536 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4194300 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4194303 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 107
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x220 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x70 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x110 (concat (select input.dst.llvm-mem ?x70) (concat ?x21 (concat ?x266 ?x220)))))
 (let ((?x192 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x110)))
 (let (($x14 (= (_ bv0 32) ?x192)))
 (let (($x190 (= $x14 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x139 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x139 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x43 (= $x184 $x182)))
 (let (($x168 (= ?x139 (_ bv0 32))))
 (let (($x148 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x229 (= $x148 $x168)))
 (let (($x173 (and (and (and (not $x184) (=> $x148 (= false false))) $x229) $x43)))
 (let (($x269 (= $x173 true)))
 (let (($x366 (= false false)))
 (let (($x91 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x253 (=> $x91 $x366)))
 (let (($x214 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x306 (not $x214)))
 (let (($x61 (and (and (and (= $x91 $x168) (= $x214 $x182)) $x306) $x253)))
 (let (($x161 (= $x61 true)))
 (let (($x167 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x135 (ite $x167 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x135 (_ bv1 32))))
 (let (($x237 (= $x214 $x176)))
 (let (($x57 (= ?x135 (_ bv0 32))))
 (let (($x183 (= $x91 $x57)))
 (let (($x39 (and (and (and $x183 $x237) $x306) $x253)))
 (let (($x126 (= $x39 true)))
 (let (($x116 (=> $x148 $x366)))
 (let (($x181 (and (and (and (= $x148 $x57) (= $x184 $x176)) (not $x184)) $x116)))
 (let (($x64 (= $x181 true)))
 (let ((?x375 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x206 (= (_ bv0 3) ?x375)))
 (let (($x109 (= $x206 true)))
 (let (($x290 (= $x109 true)))
 (let (($x193 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x251 (= $x193 true)))
 (let (($x118 (= $x251 true)))
 (let (($x292 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x154 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x166 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x154) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x154))))
 (let (($x87 (and true $x166)))
 (let (($x92 (and $x166 $x87)))
 (let ((?x122 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem ?x122))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv2 32))) ?x170))))
 (let (($x286 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x259 (= (bvand ?x122 (_ bv4294967292 32)) ?x122)))
 (let (($x114 (and $x259 $x286)))
 (let (($x156 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x122 (bvsub ?x122 (_ bv4 32))) (bvult ?x122 (bvsub ?x122 (_ bv4 32))))))
 (let (($x268 (and (and (and (and (and $x87 $x156) $x259) $x114) $x92) $x292)))
 (let (($x127 (= true $x268)))
 (let (($x175 (not $x136)))
 (let (($x49 (=> $x175 $x127)))
 (let (($x224 (= $x49 true)))
 (let (($x149 (= $x224 true)))
 (let (($x203 (= $x149 true)))
 (let (($x163 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x201 (= $x163 true)))
 (let (($x301 (= $x201 true)))
 (let (($x250 (= $x301 true)))
 (let (($x265 (= $x175 true)))
 (let (($x77 (= $x265 true)))
 (let (($x267 (= $x77 true)))
 (let (($x146 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x105 (= $x146 true)))
 (let (($x82 (= $x105 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x174)))
 (let ((?x279 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x304 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x279)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x315 (and $x194 $x304)))
 (let (($x55 (and $x315 $x37)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (and $x83 $x55)))
 (let (($x293 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x196 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x293)))))))
 (let (($x238 (and $x196 $x316)))
 (let (($x215 (= $x238 true)))
 (let (($x60 (= $x215 true)))
 (let (($x137 (= $x60 true)))
 (let (($x199 (and $x137 $x82)))
 (let (($x311 (and $x199 $x267)))
 (let (($x219 (and $x311 $x250)))
 (let (($x153 (and $x219 $x203)))
 (let (($x255 (and $x153 $x118)))
 (let (($x132 (and $x255 $x290)))
 (let (($x10 (and $x132 $x64)))
 (let (($x312 (and $x10 $x126)))
 (let (($x320 (and $x312 $x161)))
 (let (($x20 (and $x320 $x269)))
 (let (($x310 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x299 (and $x310 $x20)))
 (let (($x227 (bvugt ?x122 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x122 (_ bv3 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x283 (=> (bvule ?x122 (bvsub (bvadd ?x122 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x177 $x227)))))))
 (let (($x162 (=> (and $x175 (bvule ?x122 (bvsub (bvadd ?x122 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x177 $x227)))))))
 (let (($x147 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x234 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x197 (=> $x234 (or false (or false (and true (or $x84 $x147)))))))
 (let (($x164 (=> (and $x175 $x234) (or false (or false (and true (or $x84 $x147)))))))
 (let (($x13 (and $x164 $x162)))
 (let (($x124 (and $x13 $x299)))
 (let (($x191 (=> $x124 $x190)))
 (not $x191)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x220 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x70 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x110 (concat (select input.dst.llvm-mem ?x70) (concat ?x21 (concat ?x266 ?x220)))))
 (let ((?x192 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x110)))
 (let (($x14 (= (_ bv0 32) ?x192)))
 (let (($x190 (= $x14 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x139 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x139 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x43 (= $x184 $x182)))
 (let (($x168 (= ?x139 (_ bv0 32))))
 (let (($x148 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x229 (= $x148 $x168)))
 (let (($x173 (and (and (and (not $x184) (=> $x148 (= false false))) $x229) $x43)))
 (let (($x269 (= $x173 true)))
 (let (($x366 (= false false)))
 (let (($x91 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x253 (=> $x91 $x366)))
 (let (($x214 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x306 (not $x214)))
 (let (($x61 (and (and (and (= $x91 $x168) (= $x214 $x182)) $x306) $x253)))
 (let (($x161 (= $x61 true)))
 (let (($x167 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x135 (ite $x167 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x135 (_ bv1 32))))
 (let (($x237 (= $x214 $x176)))
 (let (($x57 (= ?x135 (_ bv0 32))))
 (let (($x183 (= $x91 $x57)))
 (let (($x39 (and (and (and $x183 $x237) $x306) $x253)))
 (let (($x126 (= $x39 true)))
 (let (($x116 (=> $x148 $x366)))
 (let (($x181 (and (and (and (= $x148 $x57) (= $x184 $x176)) (not $x184)) $x116)))
 (let (($x64 (= $x181 true)))
 (let ((?x375 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x206 (= (_ bv0 3) ?x375)))
 (let (($x109 (= $x206 true)))
 (let (($x290 (= $x109 true)))
 (let (($x193 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x251 (= $x193 true)))
 (let (($x118 (= $x251 true)))
 (let (($x292 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x154 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x166 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x154) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x154))))
 (let (($x87 (and true $x166)))
 (let (($x92 (and $x166 $x87)))
 (let ((?x122 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem ?x122))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv2 32))) ?x170))))
 (let (($x286 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x259 (= (bvand ?x122 (_ bv4294967292 32)) ?x122)))
 (let (($x114 (and $x259 $x286)))
 (let (($x156 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x122 (bvsub ?x122 (_ bv4 32))) (bvult ?x122 (bvsub ?x122 (_ bv4 32))))))
 (let (($x268 (and (and (and (and (and $x87 $x156) $x259) $x114) $x92) $x292)))
 (let (($x127 (= true $x268)))
 (let (($x175 (not $x136)))
 (let (($x49 (=> $x175 $x127)))
 (let (($x224 (= $x49 true)))
 (let (($x149 (= $x224 true)))
 (let (($x203 (= $x149 true)))
 (let (($x163 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x201 (= $x163 true)))
 (let (($x301 (= $x201 true)))
 (let (($x250 (= $x301 true)))
 (let (($x265 (= $x175 true)))
 (let (($x77 (= $x265 true)))
 (let (($x267 (= $x77 true)))
 (let (($x146 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x105 (= $x146 true)))
 (let (($x82 (= $x105 true)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x37 (= (_ bv0 32) ?x174)))
 (let ((?x279 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x304 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x279)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x315 (and $x194 $x304)))
 (let (($x55 (and $x315 $x37)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (and $x83 $x55)))
 (let (($x293 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x196 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x293)))))))
 (let (($x238 (and $x196 $x316)))
 (let (($x215 (= $x238 true)))
 (let (($x60 (= $x215 true)))
 (let (($x137 (= $x60 true)))
 (let (($x199 (and $x137 $x82)))
 (let (($x311 (and $x199 $x267)))
 (let (($x219 (and $x311 $x250)))
 (let (($x153 (and $x219 $x203)))
 (let (($x255 (and $x153 $x118)))
 (let (($x132 (and $x255 $x290)))
 (let (($x10 (and $x132 $x64)))
 (let (($x312 (and $x10 $x126)))
 (let (($x320 (and $x312 $x161)))
 (let (($x20 (and $x320 $x269)))
 (let (($x310 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x299 (and $x310 $x20)))
 (let (($x227 (bvugt ?x122 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x122 (_ bv3 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x283 (=> (bvule ?x122 (bvsub (bvadd ?x122 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x177 $x227)))))))
 (let (($x162 (=> (and $x175 (bvule ?x122 (bvsub (bvadd ?x122 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x177 $x227)))))))
 (let (($x147 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x234 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x197 (=> $x234 (or false (or false (and true (or $x84 $x147)))))))
 (let (($x164 (=> (and $x175 $x234) (or false (or false (and true (or $x84 $x147)))))))
 (let (($x13 (and $x164 $x162)))
 (let (($x124 (and $x13 $x299)))
 (let (($x191 (=> $x124 $x190)))
 (not $x191)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 108
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x337 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x313 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x74 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x298 (concat (select input.dst.llvm-mem ?x74) (concat ?x222 (concat ?x313 ?x337)))))
 (let ((?x120 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x298)))
 (let (($x401 (= (_ bv0 32) ?x120)))
 (let (($x450 (= $x401 true)))
 (let ((?x78 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x141))))
 (let ((?x323 (bvadd ?x326 (_ bv4 32))))
 (let ((?x465 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv1 32))) (select input.dst.llvm-mem ?x323))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv2 32))) ?x465))))
 (let (($x374 (= (_ bv0 32) ?x333)))
 (let ((?x112 (ite $x374 (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x112 (_ bv1 32))))
 (let (($x202 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x483 (= $x202 $x129)))
 (let (($x124 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x208 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x443 (and $x208 $x124)))
 (let (($x402 (=> $x443 $x483)))
 (let (($x334 (= ?x112 (_ bv0 32))))
 (let (($x287 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x235 (= $x287 $x334)))
 (let (($x499 (=> $x443 $x235)))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd ?x326 (_ bv1 32))) (select input.dst.llvm-mem ?x326))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x326 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x326 (_ bv2 32))) ?x441))))
 (let (($x370 (= input.spec-%var-l-1.2.1.2.0 ?x27)))
 (let (($x178 (=> $x443 $x370)))
 (let (($x221 (= (_ bv0 32) ?x326)))
 (let ((?x246 (ite $x221 (_ bv0 32) (_ bv1 32))))
 (let (($x275 (bvuge ?x246 (_ bv1 32))))
 (let (($x371 (= $x124 $x275)))
 (let (($x372 (=> $x208 $x371)))
 (let (($x252 (= ?x246 (_ bv0 32))))
 (let (($x312 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x352 (= $x312 $x252)))
 (let (($x354 (=> $x208 $x352)))
 (let (($x357 (= input.spec-%var-l-1.2.0 ?x298)))
 (let (($x353 (=> $x208 $x357)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x198 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x330 (bvuge ?x198 (_ bv1 32))))
 (let (($x350 (= $x208 $x330)))
 (let (($x341 (= ?x198 (_ bv0 32))))
 (let (($x135 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x359 (= $x135 $x341)))
 (let (($x366 (= false false)))
 (let (($x20 (and $x208 $x312)))
 (let (($x299 (=> $x20 $x366)))
 (let (($x116 (=> $x135 $x366)))
 (let (($x376 (and (and (and (and (and (and $x116 $x299) $x359) $x350) $x353) $x354) $x372)))
 (let (($x364 (and (and (and $x376 $x178) $x499) $x402)))
 (let (($x89 (= $x364 true)))
 (let (($x379 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x481 (= $x379 $x334)))
 (let (($x308 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x24 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x73 (and $x24 $x308)))
 (let (($x143 (=> $x73 $x481)))
 (let (($x282 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x11 (= $x282 $x129)))
 (let (($x336 (=> $x73 $x11)))
 (let (($x103 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x27)))
 (let (($x171 (=> $x73 $x103)))
 (let (($x440 (= $x308 $x275)))
 (let (($x249 (=> $x24 $x440)))
 (let (($x241 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x97 (= $x241 $x252)))
 (let (($x263 (=> $x24 $x97)))
 (let (($x291 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x298)))
 (let (($x209 (=> $x24 $x291)))
 (let (($x332 (and $x24 $x241)))
 (let (($x79 (=> $x332 $x366)))
 (let (($x52 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x284 (=> $x52 $x366)))
 (let (($x41 (and (and (and (and (and (= $x52 $x341) (= $x24 $x330)) $x284) $x79) $x209) $x263)))
 (let (($x387 (and (and (and (and $x41 $x249) $x171) $x336) $x143)))
 (let (($x447 (= $x387 true)))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x45 (concat ?x182 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x320 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x288 (concat ?x320 (concat ?x90 ?x45))))
 (let ((?x232 (bvadd ?x288 (_ bv4 32))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x294))))
 (let (($x317 (= (_ bv0 32) ?x145)))
 (let ((?x223 (ite $x317 (_ bv0 32) (_ bv1 32))))
 (let (($x445 (= ?x223 (_ bv0 32))))
 (let (($x34 (= $x379 $x445)))
 (let (($x115 (=> $x73 $x34)))
 (let (($x233 (bvuge ?x223 (_ bv1 32))))
 (let (($x338 (= $x282 $x233)))
 (let (($x300 (=> $x73 $x338)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x110))))
 (let (($x331 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x200)))
 (let (($x243 (=> $x73 $x331)))
 (let (($x229 (= (_ bv0 32) ?x288)))
 (let ((?x204 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x28 (bvuge ?x204 (_ bv1 32))))
 (let (($x271 (= $x308 $x28)))
 (let (($x25 (=> $x24 $x271)))
 (let (($x43 (= ?x204 (_ bv0 32))))
 (let (($x361 (= $x241 $x43)))
 (let (($x347 (=> $x24 $x361)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x91)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x237)))
 (let (($x329 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x180)))
 (let (($x257 (=> $x24 $x329)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x184 (ite $x26 (_ bv0 32) (_ bv1 32))))
 (let (($x42 (bvuge ?x184 (_ bv1 32))))
 (let (($x247 (= $x24 $x42)))
 (let (($x176 (= ?x184 (_ bv0 32))))
 (let (($x98 (= $x52 $x176)))
 (let (($x274 (and (and (and (and (and (and $x98 $x247) $x284) $x257) $x347) $x79) $x25)))
 (let (($x242 (and (and (and $x274 $x243) $x300) $x115)))
 (let (($x216 (= $x242 true)))
 (let (($x35 (= $x202 $x233)))
 (let (($x75 (=> $x443 $x35)))
 (let (($x240 (= $x287 $x445)))
 (let (($x144 (=> $x443 $x240)))
 (let (($x53 (= input.spec-%var-l-1.2.1.2.0 ?x200)))
 (let (($x158 (=> $x443 $x53)))
 (let (($x58 (= $x124 $x28)))
 (let (($x21 (=> $x208 $x58)))
 (let (($x173 (= $x312 $x43)))
 (let (($x269 (=> $x208 $x173)))
 (let (($x253 (= input.spec-%var-l-1.2.0 ?x180)))
 (let (($x39 (=> $x208 $x253)))
 (let (($x217 (and (and (and (and (and (= $x135 $x176) (= $x208 $x42)) $x116) $x39) $x269) $x299)))
 (let (($x280 (and (and (and (and $x217 $x21) $x158) $x144) $x75)))
 (let (($x76 (= $x280 true)))
 (let ((?x290 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x132 (= (_ bv0 3) ?x290)))
 (let (($x272 (= $x132 true)))
 (let (($x148 (= $x272 true)))
 (let (($x255 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x131 (= $x255 true)))
 (let (($x375 (= $x131 true)))
 (let (($x228 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x106 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x106) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x106))))
 (let (($x63 (and true $x185)))
 (let (($x92 (and $x185 $x63)))
 (let ((?x234 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x48))))
 (let (($x114 (= (bvand ?x356 (_ bv4294967288 32)) ?x356)))
 (let (($x225 (= (bvand ?x234 (_ bv4294967292 32)) ?x234)))
 (let (($x179 (and $x225 $x114)))
 (let (($x50 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x234 (bvsub ?x234 (_ bv4 32))) (bvult ?x234 (bvsub ?x234 (_ bv4 32))))))
 (let (($x224 (and (and (and (and (and $x63 $x50) $x225) $x179) $x92) $x228)))
 (let (($x149 (= true $x224)))
 (let (($x175 (not $x136)))
 (let (($x203 (=> $x175 $x149)))
 (let (($x153 (= $x203 true)))
 (let (($x119 (= $x153 true)))
 (let (($x193 (= $x119 true)))
 (let (($x250 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x219 (= $x250 true)))
 (let (($x303 (= $x219 true)))
 (let (($x154 (= $x303 true)))
 (let (($x311 (= $x175 true)))
 (let (($x66 (= $x311 true)))
 (let (($x163 (= $x66 true)))
 (let (($x199 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x265 (= $x199 true)))
 (let (($x77 (= $x265 true)))
 (let ((?x316 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x316)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x315 $x37)))
 (let (($x215 (and $x55 $x238)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x107 $x215)))
 (let (($x307 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x304 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x307)))))))
 (let (($x137 (and $x304 $x60)))
 (let (($x159 (= $x137 true)))
 (let (($x146 (= $x159 true)))
 (let (($x105 (= $x146 true)))
 (let (($x267 (and $x105 $x77)))
 (let (($x201 (and $x267 $x163)))
 (let (($x134 (and $x201 $x154)))
 (let (($x251 (and $x134 $x193)))
 (let (($x206 (and $x251 $x375)))
 (let (($x226 (and $x206 $x148)))
 (let (($x296 (and $x226 $x76)))
 (let (($x140 (and $x296 $x216)))
 (let (($x62 (and $x140 $x447)))
 (let (($x360 (and $x62 $x89)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x358 (and $x169 $x360)))
 (let (($x297 (bvugt ?x234 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x234 (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x310 (=> (bvule ?x234 (bvsub (bvadd ?x234 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x297)))))))
 (let (($x113 (=> (and $x175 (bvule ?x234 (bvsub (bvadd ?x234 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x23 $x297)))))))
 (let (($x46 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x133 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x78 (_ bv1 32))) (or false (or false (and true (or $x172 $x46)))))))
 (let (($x51 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x78 (_ bv1 32)))) (or false (or false (and true (or $x172 $x46)))))))
 (let (($x130 (and $x51 $x113)))
 (let (($x348 (and $x130 $x358)))
 (let (($x400 (=> $x348 $x450)))
 (not $x400))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x337 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x313 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x74 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x298 (concat (select input.dst.llvm-mem ?x74) (concat ?x222 (concat ?x313 ?x337)))))
 (let ((?x120 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x298)))
 (let (($x401 (= (_ bv0 32) ?x120)))
 (let (($x450 (= $x401 true)))
 (let ((?x78 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x141))))
 (let ((?x323 (bvadd ?x326 (_ bv4 32))))
 (let ((?x465 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv1 32))) (select input.dst.llvm-mem ?x323))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv2 32))) ?x465))))
 (let (($x374 (= (_ bv0 32) ?x333)))
 (let ((?x112 (ite $x374 (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x112 (_ bv1 32))))
 (let (($x202 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x483 (= $x202 $x129)))
 (let (($x124 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x208 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x443 (and $x208 $x124)))
 (let (($x402 (=> $x443 $x483)))
 (let (($x334 (= ?x112 (_ bv0 32))))
 (let (($x287 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x235 (= $x287 $x334)))
 (let (($x499 (=> $x443 $x235)))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd ?x326 (_ bv1 32))) (select input.dst.llvm-mem ?x326))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x326 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x326 (_ bv2 32))) ?x441))))
 (let (($x370 (= input.spec-%var-l-1.2.1.2.0 ?x27)))
 (let (($x178 (=> $x443 $x370)))
 (let (($x221 (= (_ bv0 32) ?x326)))
 (let ((?x246 (ite $x221 (_ bv0 32) (_ bv1 32))))
 (let (($x275 (bvuge ?x246 (_ bv1 32))))
 (let (($x371 (= $x124 $x275)))
 (let (($x372 (=> $x208 $x371)))
 (let (($x252 (= ?x246 (_ bv0 32))))
 (let (($x312 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x352 (= $x312 $x252)))
 (let (($x354 (=> $x208 $x352)))
 (let (($x357 (= input.spec-%var-l-1.2.0 ?x298)))
 (let (($x353 (=> $x208 $x357)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x198 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x330 (bvuge ?x198 (_ bv1 32))))
 (let (($x350 (= $x208 $x330)))
 (let (($x341 (= ?x198 (_ bv0 32))))
 (let (($x135 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x359 (= $x135 $x341)))
 (let (($x366 (= false false)))
 (let (($x20 (and $x208 $x312)))
 (let (($x299 (=> $x20 $x366)))
 (let (($x116 (=> $x135 $x366)))
 (let (($x376 (and (and (and (and (and (and $x116 $x299) $x359) $x350) $x353) $x354) $x372)))
 (let (($x364 (and (and (and $x376 $x178) $x499) $x402)))
 (let (($x89 (= $x364 true)))
 (let (($x379 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x481 (= $x379 $x334)))
 (let (($x308 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x24 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x73 (and $x24 $x308)))
 (let (($x143 (=> $x73 $x481)))
 (let (($x282 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x11 (= $x282 $x129)))
 (let (($x336 (=> $x73 $x11)))
 (let (($x103 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x27)))
 (let (($x171 (=> $x73 $x103)))
 (let (($x440 (= $x308 $x275)))
 (let (($x249 (=> $x24 $x440)))
 (let (($x241 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x97 (= $x241 $x252)))
 (let (($x263 (=> $x24 $x97)))
 (let (($x291 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x298)))
 (let (($x209 (=> $x24 $x291)))
 (let (($x332 (and $x24 $x241)))
 (let (($x79 (=> $x332 $x366)))
 (let (($x52 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x284 (=> $x52 $x366)))
 (let (($x41 (and (and (and (and (and (= $x52 $x341) (= $x24 $x330)) $x284) $x79) $x209) $x263)))
 (let (($x387 (and (and (and (and $x41 $x249) $x171) $x336) $x143)))
 (let (($x447 (= $x387 true)))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x45 (concat ?x182 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x320 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x288 (concat ?x320 (concat ?x90 ?x45))))
 (let ((?x232 (bvadd ?x288 (_ bv4 32))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x294))))
 (let (($x317 (= (_ bv0 32) ?x145)))
 (let ((?x223 (ite $x317 (_ bv0 32) (_ bv1 32))))
 (let (($x445 (= ?x223 (_ bv0 32))))
 (let (($x34 (= $x379 $x445)))
 (let (($x115 (=> $x73 $x34)))
 (let (($x233 (bvuge ?x223 (_ bv1 32))))
 (let (($x338 (= $x282 $x233)))
 (let (($x300 (=> $x73 $x338)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x110))))
 (let (($x331 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x200)))
 (let (($x243 (=> $x73 $x331)))
 (let (($x229 (= (_ bv0 32) ?x288)))
 (let ((?x204 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x28 (bvuge ?x204 (_ bv1 32))))
 (let (($x271 (= $x308 $x28)))
 (let (($x25 (=> $x24 $x271)))
 (let (($x43 (= ?x204 (_ bv0 32))))
 (let (($x361 (= $x241 $x43)))
 (let (($x347 (=> $x24 $x361)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x91)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x237)))
 (let (($x329 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x180)))
 (let (($x257 (=> $x24 $x329)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x184 (ite $x26 (_ bv0 32) (_ bv1 32))))
 (let (($x42 (bvuge ?x184 (_ bv1 32))))
 (let (($x247 (= $x24 $x42)))
 (let (($x176 (= ?x184 (_ bv0 32))))
 (let (($x98 (= $x52 $x176)))
 (let (($x274 (and (and (and (and (and (and $x98 $x247) $x284) $x257) $x347) $x79) $x25)))
 (let (($x242 (and (and (and $x274 $x243) $x300) $x115)))
 (let (($x216 (= $x242 true)))
 (let (($x35 (= $x202 $x233)))
 (let (($x75 (=> $x443 $x35)))
 (let (($x240 (= $x287 $x445)))
 (let (($x144 (=> $x443 $x240)))
 (let (($x53 (= input.spec-%var-l-1.2.1.2.0 ?x200)))
 (let (($x158 (=> $x443 $x53)))
 (let (($x58 (= $x124 $x28)))
 (let (($x21 (=> $x208 $x58)))
 (let (($x173 (= $x312 $x43)))
 (let (($x269 (=> $x208 $x173)))
 (let (($x253 (= input.spec-%var-l-1.2.0 ?x180)))
 (let (($x39 (=> $x208 $x253)))
 (let (($x217 (and (and (and (and (and (= $x135 $x176) (= $x208 $x42)) $x116) $x39) $x269) $x299)))
 (let (($x280 (and (and (and (and $x217 $x21) $x158) $x144) $x75)))
 (let (($x76 (= $x280 true)))
 (let ((?x290 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x132 (= (_ bv0 3) ?x290)))
 (let (($x272 (= $x132 true)))
 (let (($x148 (= $x272 true)))
 (let (($x255 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x131 (= $x255 true)))
 (let (($x375 (= $x131 true)))
 (let (($x228 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x106 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x106) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x106))))
 (let (($x63 (and true $x185)))
 (let (($x92 (and $x185 $x63)))
 (let ((?x234 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x48))))
 (let (($x114 (= (bvand ?x356 (_ bv4294967288 32)) ?x356)))
 (let (($x225 (= (bvand ?x234 (_ bv4294967292 32)) ?x234)))
 (let (($x179 (and $x225 $x114)))
 (let (($x50 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x234 (bvsub ?x234 (_ bv4 32))) (bvult ?x234 (bvsub ?x234 (_ bv4 32))))))
 (let (($x224 (and (and (and (and (and $x63 $x50) $x225) $x179) $x92) $x228)))
 (let (($x149 (= true $x224)))
 (let (($x175 (not $x136)))
 (let (($x203 (=> $x175 $x149)))
 (let (($x153 (= $x203 true)))
 (let (($x119 (= $x153 true)))
 (let (($x193 (= $x119 true)))
 (let (($x250 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x219 (= $x250 true)))
 (let (($x303 (= $x219 true)))
 (let (($x154 (= $x303 true)))
 (let (($x311 (= $x175 true)))
 (let (($x66 (= $x311 true)))
 (let (($x163 (= $x66 true)))
 (let (($x199 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x265 (= $x199 true)))
 (let (($x77 (= $x265 true)))
 (let ((?x316 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x316)))
 (let ((?x174 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x174)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x315 $x37)))
 (let (($x215 (and $x55 $x238)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x107 $x215)))
 (let (($x307 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x304 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x307)))))))
 (let (($x137 (and $x304 $x60)))
 (let (($x159 (= $x137 true)))
 (let (($x146 (= $x159 true)))
 (let (($x105 (= $x146 true)))
 (let (($x267 (and $x105 $x77)))
 (let (($x201 (and $x267 $x163)))
 (let (($x134 (and $x201 $x154)))
 (let (($x251 (and $x134 $x193)))
 (let (($x206 (and $x251 $x375)))
 (let (($x226 (and $x206 $x148)))
 (let (($x296 (and $x226 $x76)))
 (let (($x140 (and $x296 $x216)))
 (let (($x62 (and $x140 $x447)))
 (let (($x360 (and $x62 $x89)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x358 (and $x169 $x360)))
 (let (($x297 (bvugt ?x234 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x234 (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x310 (=> (bvule ?x234 (bvsub (bvadd ?x234 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x297)))))))
 (let (($x113 (=> (and $x175 (bvule ?x234 (bvsub (bvadd ?x234 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x23 $x297)))))))
 (let (($x46 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x133 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x78 (_ bv1 32))) (or false (or false (and true (or $x172 $x46)))))))
 (let (($x51 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x78 (_ bv1 32)))) (or false (or false (and true (or $x172 $x46)))))))
 (let (($x130 (and $x51 $x113)))
 (let (($x348 (and $x130 $x358)))
 (let (($x400 (=> $x348 $x450)))
 (not $x400))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)) (_ bv1024 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffff00)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x3d78f8ff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x3d78f8f8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x78)
                                #x3d78f904
                                #xf8)
                         #x3d78f903
                         #xfb)
                  #x3d78f906
                  #x3d)))
  (store a!1 #x7878787e #xf8)))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffff03)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 109
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x327 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x211 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x277 (concat (select input.dst.llvm-mem ?x211) (concat ?x327 (concat ?x93 ?x325)))))
 (let ((?x384 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x277)))
 (let (($x408 (= (_ bv0 32) ?x384)))
 (let (($x378 (= $x408 true)))
 (let ((?x84 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem ?x84))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv2 32))) ?x263))))
 (let ((?x465 (bvadd ?x345 (_ bv4 32))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x465 (_ bv1 32))) (select input.dst.llvm-mem ?x465))))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd ?x465 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x465 (_ bv2 32))) ?x112))))
 (let (($x143 (= (_ bv0 32) ?x481)))
 (let ((?x387 (ite $x143 (_ bv0 32) (_ bv1 32))))
 (let (($x447 (bvuge ?x387 (_ bv1 32))))
 (let (($x223 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x450 (= $x223 $x447)))
 (let (($x299 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x256 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x58 (and $x256 $x299)))
 (let (($x400 (=> $x58 $x450)))
 (let (($x359 (= ?x387 (_ bv0 32))))
 (let (($x53 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x120 (= $x53 $x359)))
 (let (($x401 (=> $x58 $x120)))
 (let ((?x470 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x463 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x470))))
 (let (($x358 (= input.spec-%var-l-1.2.1.2.0 ?x463)))
 (let (($x348 (=> $x58 $x358)))
 (let (($x188 (= (_ bv0 32) ?x345)))
 (let ((?x342 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x322 (bvuge ?x342 (_ bv1 32))))
 (let (($x89 (= $x299 $x322)))
 (let (($x360 (=> $x256 $x89)))
 (let (($x475 (= ?x342 (_ bv0 32))))
 (let (($x312 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x402 (= $x312 $x475)))
 (let (($x364 (=> $x256 $x402)))
 (let (($x500 (= input.spec-%var-l-1.2.0 ?x277)))
 (let (($x483 (=> $x256 $x500)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x6 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x209 (bvuge ?x6 (_ bv1 32))))
 (let (($x499 (= $x256 $x209)))
 (let (($x298 (= ?x6 (_ bv0 32))))
 (let (($x184 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x235 (= $x184 $x298)))
 (let (($x233 (and $x58 $x53)))
 (let (($x35 (not $x233)))
 (let (($x71 (and $x58 $x223)))
 (let (($x202 (not $x71)))
 (let (($x30 (= false false)))
 (let (($x289 (and $x256 $x312)))
 (let (($x20 (=> $x289 $x30)))
 (let (($x181 (=> $x184 $x30)))
 (let (($x383 (and (and (and (and (and (and $x181 $x20) $x202) $x35) $x235) $x499) $x483)))
 (let (($x382 (and (and (and (and (and $x383 $x364) $x360) $x348) $x401) $x400)))
 (let (($x362 (= $x382 true)))
 (let (($x300 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x73 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x155 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x243 (and $x155 $x73)))
 (let (($x198 (and $x243 $x300)))
 (let (($x341 (not $x198)))
 (let (($x34 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x216 (and $x243 $x34)))
 (let (($x140 (not $x216)))
 (let (($x385 (= $x34 $x359)))
 (let (($x350 (=> $x243 $x385)))
 (let (($x62 (= $x300 $x447)))
 (let (($x448 (=> $x243 $x62)))
 (let (($x321 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x463)))
 (let (($x478 (=> $x243 $x321)))
 (let (($x441 (= $x73 $x322)))
 (let (($x444 (=> $x155 $x441)))
 (let (($x29 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x324 (= $x29 $x475)))
 (let (($x340 (=> $x155 $x324)))
 (let (($x326 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x277)))
 (let (($x221 (=> $x155 $x326)))
 (let (($x25 (and $x155 $x29)))
 (let (($x274 (=> $x25 $x30)))
 (let (($x257 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x361 (=> $x257 $x30)))
 (let (($x352 (and (and (and (and (and (= $x257 $x298) (= $x155 $x209)) $x361) $x274) $x221) $x340)))
 (let (($x370 (and (and (and (and (and (and $x352 $x444) $x478) $x448) $x350) $x140) $x341)))
 (let (($x178 (= $x370 true)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x90 (concat ?x16 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x288 (concat ?x61 (concat ?x182 ?x90))))
 (let ((?x158 (bvadd ?x288 (_ bv4 32))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x232))))
 (let (($x273 (= (_ bv0 32) ?x377)))
 (let ((?x294 (ite $x273 (_ bv0 32) (_ bv1 32))))
 (let (($x5 (= ?x294 (_ bv0 32))))
 (let (($x115 (= $x34 $x5)))
 (let (($x242 (=> $x243 $x115)))
 (let (($x445 (bvuge ?x294 (_ bv1 32))))
 (let (($x40 (= $x300 $x445)))
 (let (($x379 (=> $x243 $x40)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x191))))
 (let (($x314 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x220)))
 (let (($x282 (=> $x243 $x314)))
 (let (($x229 (= (_ bv0 32) ?x288)))
 (let ((?x204 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x204 (_ bv1 32))))
 (let (($x302 (= $x73 $x217)))
 (let (($x331 (=> $x155 $x302)))
 (let (($x43 (= ?x204 (_ bv0 32))))
 (let (($x308 (= $x29 $x43)))
 (let (($x271 (=> $x155 $x308)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x10)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x91)))
 (let (($x101 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x253)))
 (let (($x332 (=> $x155 $x101)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x208 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x366 (bvuge ?x208 (_ bv1 32))))
 (let (($x241 (= $x155 $x366)))
 (let (($x42 (= ?x208 (_ bv0 32))))
 (let (($x446 (= $x257 $x42)))
 (let (($x482 (and (and (and (and (and (and $x446 $x241) $x361) $x332) $x271) $x274) $x331)))
 (let (($x313 (and (and (and (and (and $x482 $x282) $x379) $x242) $x140) $x341)))
 (let (($x337 (= $x313 true)))
 (let (($x240 (= $x223 $x445)))
 (let (($x144 (=> $x58 $x240)))
 (let (($x145 (= $x53 $x5)))
 (let (($x317 (=> $x58 $x145)))
 (let (($x110 (= input.spec-%var-l-1.2.1.2.0 ?x220)))
 (let (($x190 (=> $x58 $x110)))
 (let (($x124 (= $x299 $x217)))
 (let (($x28 (=> $x256 $x124)))
 (let (($x173 (= $x312 $x43)))
 (let (($x269 (=> $x256 $x173)))
 (let (($x39 (= input.spec-%var-l-1.2.0 ?x253)))
 (let (($x276 (=> $x256 $x39)))
 (let (($x207 (and (and (and (and (and (= $x184 $x42) (= $x256 $x366)) $x181) $x276) $x269) $x20)))
 (let (($x284 (and (and (and (and (and (and $x207 $x28) $x190) $x317) $x144) $x202) $x35)))
 (let (($x439 (= $x284 true)))
 (let ((?x148 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x226 (= (_ bv0 3) ?x148)))
 (let (($x167 (= $x226 true)))
 (let (($x135 (= $x167 true)))
 (let (($x206 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x109 (= $x206 true)))
 (let (($x290 (= $x109 true)))
 (let (($x95 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x7 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x54) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x54))))
 (let (($x123 (and true $x7)))
 (let (($x92 (and $x7 $x123)))
 (let ((?x231 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x245))))
 (let (($x179 (= (bvand ?x295 (_ bv4294967288 32)) ?x295)))
 (let (($x81 (= (bvand ?x231 (_ bv4294967292 32)) ?x231)))
 (let (($x127 (and $x81 $x179)))
 (let (($x195 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x231 (bvsub ?x231 (_ bv4 32))) (bvult ?x231 (bvsub ?x231 (_ bv4 32))))))
 (let (($x153 (and (and (and (and (and $x123 $x195) $x81) $x127) $x92) $x95)))
 (let (($x119 (= true $x153)))
 (let (($x175 (not $x136)))
 (let (($x193 (=> $x175 $x119)))
 (let (($x251 (= $x193 true)))
 (let (($x118 (= $x251 true)))
 (let (($x255 (= $x118 true)))
 (let (($x154 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x134 (= $x154 true)))
 (let (($x166 (= $x134 true)))
 (let (($x106 (= $x166 true)))
 (let (($x201 (= $x175 true)))
 (let (($x301 (= $x201 true)))
 (let (($x250 (= $x301 true)))
 (let (($x267 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x311 (= $x267 true)))
 (let (($x66 (= $x311 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x60)))
 (let ((?x316 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x238 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x316)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x55 $x238)))
 (let (($x159 (and $x215 $x137)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x33 $x159)))
 (let (($x194 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x194)))))))
 (let (($x105 (and $x37 $x146)))
 (let (($x82 (= $x105 true)))
 (let (($x199 (= $x82 true)))
 (let (($x265 (= $x199 true)))
 (let (($x163 (and $x265 $x66)))
 (let (($x219 (and $x163 $x250)))
 (let (($x87 (and $x219 $x106)))
 (let (($x131 (and $x87 $x255)))
 (let (($x132 (and $x131 $x290)))
 (let (($x57 (and $x132 $x135)))
 (let (($x68 (and $x57 $x439)))
 (let (($x335 (and $x68 $x337)))
 (let (($x349 (and $x335 $x178)))
 (let (($x369 (and $x349 $x362)))
 (let (($x165 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x363 (and $x165 $x369)))
 (let (($x162 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x231 (_ bv3 32))))
 (let (($x283 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x169 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x283 $x162)))))))
 (let (($x261 (=> (and $x175 (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x283 $x162)))))))
 (let (($x164 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x211)))
 (let (($x227 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x84 (_ bv1 32))) (or false (or false (and true (or $x197 $x164)))))))
 (let (($x70 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x84 (_ bv1 32)))) (or false (or false (and true (or $x197 $x164)))))))
 (let (($x32 (and $x70 $x261)))
 (let (($x365 (and $x32 $x363)))
 (let (($x380 (=> $x365 $x378)))
 (not $x380))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x327 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x211 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x277 (concat (select input.dst.llvm-mem ?x211) (concat ?x327 (concat ?x93 ?x325)))))
 (let ((?x384 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x277)))
 (let (($x408 (= (_ bv0 32) ?x384)))
 (let (($x378 (= $x408 true)))
 (let ((?x84 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem ?x84))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv2 32))) ?x263))))
 (let ((?x465 (bvadd ?x345 (_ bv4 32))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x465 (_ bv1 32))) (select input.dst.llvm-mem ?x465))))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd ?x465 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x465 (_ bv2 32))) ?x112))))
 (let (($x143 (= (_ bv0 32) ?x481)))
 (let ((?x387 (ite $x143 (_ bv0 32) (_ bv1 32))))
 (let (($x447 (bvuge ?x387 (_ bv1 32))))
 (let (($x223 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x450 (= $x223 $x447)))
 (let (($x299 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x256 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x58 (and $x256 $x299)))
 (let (($x400 (=> $x58 $x450)))
 (let (($x359 (= ?x387 (_ bv0 32))))
 (let (($x53 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x120 (= $x53 $x359)))
 (let (($x401 (=> $x58 $x120)))
 (let ((?x470 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x463 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x470))))
 (let (($x358 (= input.spec-%var-l-1.2.1.2.0 ?x463)))
 (let (($x348 (=> $x58 $x358)))
 (let (($x188 (= (_ bv0 32) ?x345)))
 (let ((?x342 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x322 (bvuge ?x342 (_ bv1 32))))
 (let (($x89 (= $x299 $x322)))
 (let (($x360 (=> $x256 $x89)))
 (let (($x475 (= ?x342 (_ bv0 32))))
 (let (($x312 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x402 (= $x312 $x475)))
 (let (($x364 (=> $x256 $x402)))
 (let (($x500 (= input.spec-%var-l-1.2.0 ?x277)))
 (let (($x483 (=> $x256 $x500)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x6 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x209 (bvuge ?x6 (_ bv1 32))))
 (let (($x499 (= $x256 $x209)))
 (let (($x298 (= ?x6 (_ bv0 32))))
 (let (($x184 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x235 (= $x184 $x298)))
 (let (($x233 (and $x58 $x53)))
 (let (($x35 (not $x233)))
 (let (($x71 (and $x58 $x223)))
 (let (($x202 (not $x71)))
 (let (($x30 (= false false)))
 (let (($x289 (and $x256 $x312)))
 (let (($x20 (=> $x289 $x30)))
 (let (($x181 (=> $x184 $x30)))
 (let (($x383 (and (and (and (and (and (and $x181 $x20) $x202) $x35) $x235) $x499) $x483)))
 (let (($x382 (and (and (and (and (and $x383 $x364) $x360) $x348) $x401) $x400)))
 (let (($x362 (= $x382 true)))
 (let (($x300 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x73 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x155 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x243 (and $x155 $x73)))
 (let (($x198 (and $x243 $x300)))
 (let (($x341 (not $x198)))
 (let (($x34 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x216 (and $x243 $x34)))
 (let (($x140 (not $x216)))
 (let (($x385 (= $x34 $x359)))
 (let (($x350 (=> $x243 $x385)))
 (let (($x62 (= $x300 $x447)))
 (let (($x448 (=> $x243 $x62)))
 (let (($x321 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x463)))
 (let (($x478 (=> $x243 $x321)))
 (let (($x441 (= $x73 $x322)))
 (let (($x444 (=> $x155 $x441)))
 (let (($x29 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x324 (= $x29 $x475)))
 (let (($x340 (=> $x155 $x324)))
 (let (($x326 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x277)))
 (let (($x221 (=> $x155 $x326)))
 (let (($x25 (and $x155 $x29)))
 (let (($x274 (=> $x25 $x30)))
 (let (($x257 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x361 (=> $x257 $x30)))
 (let (($x352 (and (and (and (and (and (= $x257 $x298) (= $x155 $x209)) $x361) $x274) $x221) $x340)))
 (let (($x370 (and (and (and (and (and (and $x352 $x444) $x478) $x448) $x350) $x140) $x341)))
 (let (($x178 (= $x370 true)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x90 (concat ?x16 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x288 (concat ?x61 (concat ?x182 ?x90))))
 (let ((?x158 (bvadd ?x288 (_ bv4 32))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x232))))
 (let (($x273 (= (_ bv0 32) ?x377)))
 (let ((?x294 (ite $x273 (_ bv0 32) (_ bv1 32))))
 (let (($x5 (= ?x294 (_ bv0 32))))
 (let (($x115 (= $x34 $x5)))
 (let (($x242 (=> $x243 $x115)))
 (let (($x445 (bvuge ?x294 (_ bv1 32))))
 (let (($x40 (= $x300 $x445)))
 (let (($x379 (=> $x243 $x40)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x191))))
 (let (($x314 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x220)))
 (let (($x282 (=> $x243 $x314)))
 (let (($x229 (= (_ bv0 32) ?x288)))
 (let ((?x204 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x204 (_ bv1 32))))
 (let (($x302 (= $x73 $x217)))
 (let (($x331 (=> $x155 $x302)))
 (let (($x43 (= ?x204 (_ bv0 32))))
 (let (($x308 (= $x29 $x43)))
 (let (($x271 (=> $x155 $x308)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x10)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x91)))
 (let (($x101 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x253)))
 (let (($x332 (=> $x155 $x101)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x208 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x366 (bvuge ?x208 (_ bv1 32))))
 (let (($x241 (= $x155 $x366)))
 (let (($x42 (= ?x208 (_ bv0 32))))
 (let (($x446 (= $x257 $x42)))
 (let (($x482 (and (and (and (and (and (and $x446 $x241) $x361) $x332) $x271) $x274) $x331)))
 (let (($x313 (and (and (and (and (and $x482 $x282) $x379) $x242) $x140) $x341)))
 (let (($x337 (= $x313 true)))
 (let (($x240 (= $x223 $x445)))
 (let (($x144 (=> $x58 $x240)))
 (let (($x145 (= $x53 $x5)))
 (let (($x317 (=> $x58 $x145)))
 (let (($x110 (= input.spec-%var-l-1.2.1.2.0 ?x220)))
 (let (($x190 (=> $x58 $x110)))
 (let (($x124 (= $x299 $x217)))
 (let (($x28 (=> $x256 $x124)))
 (let (($x173 (= $x312 $x43)))
 (let (($x269 (=> $x256 $x173)))
 (let (($x39 (= input.spec-%var-l-1.2.0 ?x253)))
 (let (($x276 (=> $x256 $x39)))
 (let (($x207 (and (and (and (and (and (= $x184 $x42) (= $x256 $x366)) $x181) $x276) $x269) $x20)))
 (let (($x284 (and (and (and (and (and (and $x207 $x28) $x190) $x317) $x144) $x202) $x35)))
 (let (($x439 (= $x284 true)))
 (let ((?x148 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x226 (= (_ bv0 3) ?x148)))
 (let (($x167 (= $x226 true)))
 (let (($x135 (= $x167 true)))
 (let (($x206 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x109 (= $x206 true)))
 (let (($x290 (= $x109 true)))
 (let (($x95 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x54 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x7 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x54) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x54))))
 (let (($x123 (and true $x7)))
 (let (($x92 (and $x7 $x123)))
 (let ((?x231 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x245))))
 (let (($x179 (= (bvand ?x295 (_ bv4294967288 32)) ?x295)))
 (let (($x81 (= (bvand ?x231 (_ bv4294967292 32)) ?x231)))
 (let (($x127 (and $x81 $x179)))
 (let (($x195 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x231 (bvsub ?x231 (_ bv4 32))) (bvult ?x231 (bvsub ?x231 (_ bv4 32))))))
 (let (($x153 (and (and (and (and (and $x123 $x195) $x81) $x127) $x92) $x95)))
 (let (($x119 (= true $x153)))
 (let (($x175 (not $x136)))
 (let (($x193 (=> $x175 $x119)))
 (let (($x251 (= $x193 true)))
 (let (($x118 (= $x251 true)))
 (let (($x255 (= $x118 true)))
 (let (($x154 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x134 (= $x154 true)))
 (let (($x166 (= $x134 true)))
 (let (($x106 (= $x166 true)))
 (let (($x201 (= $x175 true)))
 (let (($x301 (= $x201 true)))
 (let (($x250 (= $x301 true)))
 (let (($x267 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x311 (= $x267 true)))
 (let (($x66 (= $x311 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x60)))
 (let ((?x316 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x238 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x316)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x55 $x238)))
 (let (($x159 (and $x215 $x137)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x33 $x159)))
 (let (($x194 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x194)))))))
 (let (($x105 (and $x37 $x146)))
 (let (($x82 (= $x105 true)))
 (let (($x199 (= $x82 true)))
 (let (($x265 (= $x199 true)))
 (let (($x163 (and $x265 $x66)))
 (let (($x219 (and $x163 $x250)))
 (let (($x87 (and $x219 $x106)))
 (let (($x131 (and $x87 $x255)))
 (let (($x132 (and $x131 $x290)))
 (let (($x57 (and $x132 $x135)))
 (let (($x68 (and $x57 $x439)))
 (let (($x335 (and $x68 $x337)))
 (let (($x349 (and $x335 $x178)))
 (let (($x369 (and $x349 $x362)))
 (let (($x165 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x363 (and $x165 $x369)))
 (let (($x162 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x231 (_ bv3 32))))
 (let (($x283 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x169 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x283 $x162)))))))
 (let (($x261 (=> (and $x175 (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x283 $x162)))))))
 (let (($x164 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x211)))
 (let (($x227 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x84 (_ bv1 32))) (or false (or false (and true (or $x197 $x164)))))))
 (let (($x70 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x84 (_ bv1 32)))) (or false (or false (and true (or $x197 $x164)))))))
 (let (($x32 (and $x70 $x261)))
 (let (($x365 (and $x32 $x363)))
 (let (($x380 (=> $x365 $x378)))
 (not $x380))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)) (_ bv524288 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv524288 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffc000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00004000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00003ff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x15000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
              #x00004003
              #x15)
       #x00003ffb
       #x15))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x15000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffc000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffc003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 110
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x177 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x111))))
 (let (($x182 (bvule ?x286 (_ bv4294967294 32))))
 (let (($x320 (= $x182 true)))
 (let (($x16 (= $x320 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x183 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x10 (bvuge ?x183 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x126 (= $x42 $x10)))
 (let (($x214 (= ?x183 (_ bv0 32))))
 (let (($x57 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x76 (= $x57 $x214)))
 (let (($x312 (and $x76 $x126)))
 (let (($x139 (= $x312 true)))
 (let (($x38 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x91 (= $x38 $x10)))
 (let (($x181 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x306 (= $x181 $x214)))
 (let (($x253 (and $x306 $x91)))
 (let (($x39 (= $x253 true)))
 (let (($x184 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x176 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x230 (bvuge ?x176 (_ bv1 32))))
 (let (($x237 (= $x38 $x230)))
 (let (($x19 (= ?x176 (_ bv0 32))))
 (let (($x280 (= $x181 $x19)))
 (let (($x180 (and $x280 $x237)))
 (let (($x31 (= $x180 true)))
 (let (($x256 (= $x42 $x230)))
 (let (($x208 (= $x57 $x19)))
 (let (($x366 (and $x208 $x256)))
 (let (($x116 (= $x366 true)))
 (let ((?x132 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x272 (= (_ bv0 3) ?x132)))
 (let (($x148 (= $x272 true)))
 (let (($x226 (= $x148 true)))
 (let (($x49 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x156 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x186 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x156) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x156))))
 (let (($x292 (and true $x186)))
 (let (($x92 (and $x186 $x292)))
 (let (($x127 (= (bvand ?x286 (_ bv4294967288 32)) ?x286)))
 (let (($x117 (= (bvand ?x177 (_ bv4294967292 32)) ?x177)))
 (let (($x149 (and $x117 $x127)))
 (let (($x268 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x177 (bvsub ?x177 (_ bv4 32))) (bvult ?x177 (bvsub ?x177 (_ bv4 32))))))
 (let (($x251 (and (and (and (and (and $x292 $x268) $x117) $x149) $x92) $x49)))
 (let (($x118 (= true $x251)))
 (let (($x175 (not $x136)))
 (let (($x255 (=> $x175 $x118)))
 (let (($x131 (= $x255 true)))
 (let (($x375 (= $x131 true)))
 (let (($x206 (= $x375 true)))
 (let (($x106 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x87 (= $x106 true)))
 (let (($x185 (= $x87 true)))
 (let (($x54 (= $x185 true)))
 (let (($x219 (= $x175 true)))
 (let (($x303 (= $x219 true)))
 (let (($x154 (= $x303 true)))
 (let (($x163 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x201 (= $x163 true)))
 (let (($x301 (= $x201 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x146)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x215 $x137)))
 (let (($x82 (and $x159 $x105)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x83 $x82)))
 (let (($x315 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x238 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x315)))))))
 (let (($x265 (and $x238 $x199)))
 (let (($x77 (= $x265 true)))
 (let (($x267 (= $x77 true)))
 (let (($x311 (= $x267 true)))
 (let (($x250 (and $x311 $x301)))
 (let (($x134 (and $x250 $x154)))
 (let (($x63 (and $x134 $x54)))
 (let (($x109 (and $x63 $x206)))
 (let (($x167 (and $x109 $x226)))
 (let (($x75 (and $x167 $x116)))
 (let (($x64 (and $x75 $x31)))
 (let (($x276 (and $x64 $x39)))
 (let (($x45 (and $x276 $x139)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x61 (and $x196 $x45)))
 (let (($x113 (bvugt ?x177 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x177 (_ bv3 32))))
 (let (($x310 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x165 (=> (bvule ?x177 (bvsub (bvadd ?x177 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x310 $x113)))))))
 (let (($x94 (=> (and $x175 (bvule ?x177 (bvsub (bvadd ?x177 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x310 $x113)))))))
 (let (($x51 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x23 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x297 (=> $x23 (or false (or false (and true (or $x133 $x51)))))))
 (let (($x74 (=> (and $x175 $x23) (or false (or false (and true (or $x133 $x51)))))))
 (let (($x189 (and $x74 $x94)))
 (let (($x99 (and $x189 $x61)))
 (let (($x161 (=> $x99 $x16)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x177 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x111))))
 (let (($x182 (bvule ?x286 (_ bv4294967294 32))))
 (let (($x320 (= $x182 true)))
 (let (($x16 (= $x320 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x183 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x10 (bvuge ?x183 (_ bv1 32))))
 (let (($x42 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x126 (= $x42 $x10)))
 (let (($x214 (= ?x183 (_ bv0 32))))
 (let (($x57 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x76 (= $x57 $x214)))
 (let (($x312 (and $x76 $x126)))
 (let (($x139 (= $x312 true)))
 (let (($x38 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x91 (= $x38 $x10)))
 (let (($x181 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x306 (= $x181 $x214)))
 (let (($x253 (and $x306 $x91)))
 (let (($x39 (= $x253 true)))
 (let (($x184 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x176 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x230 (bvuge ?x176 (_ bv1 32))))
 (let (($x237 (= $x38 $x230)))
 (let (($x19 (= ?x176 (_ bv0 32))))
 (let (($x280 (= $x181 $x19)))
 (let (($x180 (and $x280 $x237)))
 (let (($x31 (= $x180 true)))
 (let (($x256 (= $x42 $x230)))
 (let (($x208 (= $x57 $x19)))
 (let (($x366 (and $x208 $x256)))
 (let (($x116 (= $x366 true)))
 (let ((?x132 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x272 (= (_ bv0 3) ?x132)))
 (let (($x148 (= $x272 true)))
 (let (($x226 (= $x148 true)))
 (let (($x49 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x156 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x186 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x156) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x156))))
 (let (($x292 (and true $x186)))
 (let (($x92 (and $x186 $x292)))
 (let (($x127 (= (bvand ?x286 (_ bv4294967288 32)) ?x286)))
 (let (($x117 (= (bvand ?x177 (_ bv4294967292 32)) ?x177)))
 (let (($x149 (and $x117 $x127)))
 (let (($x268 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x177 (bvsub ?x177 (_ bv4 32))) (bvult ?x177 (bvsub ?x177 (_ bv4 32))))))
 (let (($x251 (and (and (and (and (and $x292 $x268) $x117) $x149) $x92) $x49)))
 (let (($x118 (= true $x251)))
 (let (($x175 (not $x136)))
 (let (($x255 (=> $x175 $x118)))
 (let (($x131 (= $x255 true)))
 (let (($x375 (= $x131 true)))
 (let (($x206 (= $x375 true)))
 (let (($x106 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x87 (= $x106 true)))
 (let (($x185 (= $x87 true)))
 (let (($x54 (= $x185 true)))
 (let (($x219 (= $x175 true)))
 (let (($x303 (= $x219 true)))
 (let (($x154 (= $x303 true)))
 (let (($x163 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x201 (= $x163 true)))
 (let (($x301 (= $x201 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x146)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x60)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x215 $x137)))
 (let (($x82 (and $x159 $x105)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x83 $x82)))
 (let (($x315 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x238 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x315)))))))
 (let (($x265 (and $x238 $x199)))
 (let (($x77 (= $x265 true)))
 (let (($x267 (= $x77 true)))
 (let (($x311 (= $x267 true)))
 (let (($x250 (and $x311 $x301)))
 (let (($x134 (and $x250 $x154)))
 (let (($x63 (and $x134 $x54)))
 (let (($x109 (and $x63 $x206)))
 (let (($x167 (and $x109 $x226)))
 (let (($x75 (and $x167 $x116)))
 (let (($x64 (and $x75 $x31)))
 (let (($x276 (and $x64 $x39)))
 (let (($x45 (and $x276 $x139)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x61 (and $x196 $x45)))
 (let (($x113 (bvugt ?x177 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x177 (_ bv3 32))))
 (let (($x310 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x165 (=> (bvule ?x177 (bvsub (bvadd ?x177 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x310 $x113)))))))
 (let (($x94 (=> (and $x175 (bvule ?x177 (bvsub (bvadd ?x177 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x310 $x113)))))))
 (let (($x51 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x23 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x297 (=> $x23 (or false (or false (and true (or $x133 $x51)))))))
 (let (($x74 (=> (and $x175 $x23) (or false (or false (and true (or $x133 $x51)))))))
 (let (($x189 (and $x74 $x94)))
 (let (($x99 (and $x189 $x61)))
 (let (($x161 (=> $x99 $x16)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 111
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3089X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3084X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x248 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x233 (concat ?x248 (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv4 32))))))
 (let ((?x284 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x257 (concat ?x329 (concat ?x284 ?x233))))
 (let (($x446 (= ?x257 ?x257)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x180 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x214 (bvuge ?x180 (_ bv1 32))))
 (let (($x155 (=> $x214 $x446)))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3089X))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv2 32))) ?x294)))
 (let ((?x445 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv3 32))) ?x317)))
 (let (($x240 (= ?x445 ?x445)))
 (let (($x144 (=> $x214 $x240)))
 (let ((?x23 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x239))))
 (let (($x168 (= (_ bv0 32) ?x114)))
 (let ((?x288 (ite $x168 (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x288 (_ bv1 32))))
 (let (($x152 (= $x214 $x43)))
 (let (($x78 (= false false)))
 (let (($x31 (= ?x180 (_ bv0 32))))
 (let (($x287 (=> $x31 $x78)))
 (let (($x229 (= ?x288 (_ bv0 32))))
 (let (($x22 (= $x31 $x229)))
 (let (($x343 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x114)))
 (let (($x347 (and (and (and (and (and $x343 $x22) $x287) $x152) $x144) $x155)))
 (let ((?x443 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x266 (concat ?x443 (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv4 32))))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x190 (concat ?x110 (concat ?x191 ?x266))))
 (let (($x98 (= ?x190 ?x190)))
 (let (($x208 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x42 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x42 (_ bv1 32))))
 (let (($x200 (=> $x116 $x98)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3084X))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv2 32))) ?x207)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv3 32))) ?x124)))
 (let (($x21 (= ?x58 ?x58)))
 (let (($x9 (=> $x116 $x21)))
 (let (($x173 (= $x116 $x43)))
 (let (($x230 (= ?x42 (_ bv0 32))))
 (let (($x204 (= $x230 $x229)))
 (let (($x47 (and (and (and (=> $x230 $x78) (= input.dst.llvm-%l ?x114)) $x204) $x173)))
 (let (($x100 (and (and $x47 $x9) $x200)))
 (let (($x90 (not true)))
 (let (($x332 (or (or $x90 $x100) $x347)))
 (let (($x161 (= true true)))
 (let (($x12 (and $x161 $x332)))
 (let (($x79 (= $x12 true)))
 (let (($x183 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x45 (= $x183 $x116)))
 (let (($x237 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x139 (= $x237 $x230)))
 (let (($x61 (and $x139 $x45)))
 (let (($x99 (= $x61 true)))
 (let (($x366 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x276 (= $x366 $x214)))
 (let (($x176 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x39 (= $x176 $x31)))
 (let (($x76 (and $x39 $x276)))
 (let (($x126 (= $x76 true)))
 (let (($x306 (= $x183 $x214)))
 (let (($x64 (= $x237 $x31)))
 (let (($x10 (and $x64 $x306)))
 (let (($x91 (= $x10 true)))
 (let (($x75 (= $x366 $x116)))
 (let (($x256 (= $x176 $x230)))
 (let (($x30 (and $x256 $x75)))
 (let (($x181 (= $x30 true)))
 (let ((?x226 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x167 (= (_ bv0 3) ?x226)))
 (let (($x135 (= $x167 true)))
 (let (($x57 (= $x135 true)))
 (let (($x203 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x50 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x259 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x50) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x50))))
 (let (($x228 (and true $x259)))
 (let (($x92 (and $x259 $x228)))
 (let (($x149 (= (bvand ?x114 (_ bv4294967288 32)) ?x114)))
 (let (($x356 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x119 (and $x356 $x149)))
 (let (($x224 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x23 (bvsub ?x23 (_ bv4 32))) (bvult ?x23 (bvsub ?x23 (_ bv4 32))))))
 (let (($x131 (and (and (and (and (and $x228 $x224) $x356) $x119) $x92) $x203)))
 (let (($x375 (= true $x131)))
 (let (($x175 (not $x136)))
 (let (($x206 (=> $x175 $x375)))
 (let (($x109 (= $x206 true)))
 (let (($x290 (= $x109 true)))
 (let (($x132 (= $x290 true)))
 (let (($x54 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x63 (= $x54 true)))
 (let (($x7 (= $x63 true)))
 (let (($x156 (= $x7 true)))
 (let (($x134 (= $x175 true)))
 (let (($x166 (= $x134 true)))
 (let (($x106 (= $x166 true)))
 (let (($x250 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x219 (= $x250 true)))
 (let (($x303 (= $x219 true)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x265 (= (_ bv0 32) ?x199)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x159 $x105)))
 (let (($x77 (and $x82 $x265)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x107 $x77)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x55)))))))
 (let (($x311 (and $x137 $x267)))
 (let (($x66 (= $x311 true)))
 (let (($x163 (= $x66 true)))
 (let (($x201 (= $x163 true)))
 (let (($x154 (and $x201 $x303)))
 (let (($x87 (and $x154 $x106)))
 (let (($x123 (and $x87 $x156)))
 (let (($x272 (and $x123 $x132)))
 (let (($x26 (and $x272 $x57)))
 (let (($x280 (and $x26 $x181)))
 (let (($x253 (and $x280 $x91)))
 (let (($x312 (and $x253 $x126)))
 (let (($x182 (and $x312 $x99)))
 (let (($x304 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x320 (and $x304 $x182)))
 (let (($x261 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x23 (_ bv3 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x196 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x169 $x261)))))))
 (let (($x293 (=> (and $x175 (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x169 $x261)))))))
 (let (($x70 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x283 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x162 (=> $x283 (or false (or false (and true (or $x227 $x70)))))))
 (let (($x211 (=> (and $x175 $x283) (or false (or false (and true (or $x227 $x70)))))))
 (let (($x13 (and $x211 $x293)))
 (let (($x16 (and $x13 $x320)))
 (let (($x29 (=> $x16 $x79)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3089X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3084X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x248 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x233 (concat ?x248 (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv4 32))))))
 (let ((?x284 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x257 (concat ?x329 (concat ?x284 ?x233))))
 (let (($x446 (= ?x257 ?x257)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x180 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x214 (bvuge ?x180 (_ bv1 32))))
 (let (($x155 (=> $x214 $x446)))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3089X))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv2 32))) ?x294)))
 (let ((?x445 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv3 32))) ?x317)))
 (let (($x240 (= ?x445 ?x445)))
 (let (($x144 (=> $x214 $x240)))
 (let ((?x23 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x239))))
 (let (($x168 (= (_ bv0 32) ?x114)))
 (let ((?x288 (ite $x168 (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x288 (_ bv1 32))))
 (let (($x152 (= $x214 $x43)))
 (let (($x78 (= false false)))
 (let (($x31 (= ?x180 (_ bv0 32))))
 (let (($x287 (=> $x31 $x78)))
 (let (($x229 (= ?x288 (_ bv0 32))))
 (let (($x22 (= $x31 $x229)))
 (let (($x343 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x114)))
 (let (($x347 (and (and (and (and (and $x343 $x22) $x287) $x152) $x144) $x155)))
 (let ((?x443 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x266 (concat ?x443 (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv4 32))))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x190 (concat ?x110 (concat ?x191 ?x266))))
 (let (($x98 (= ?x190 ?x190)))
 (let (($x208 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x42 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x42 (_ bv1 32))))
 (let (($x200 (=> $x116 $x98)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3084X))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv2 32))) ?x207)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv3 32))) ?x124)))
 (let (($x21 (= ?x58 ?x58)))
 (let (($x9 (=> $x116 $x21)))
 (let (($x173 (= $x116 $x43)))
 (let (($x230 (= ?x42 (_ bv0 32))))
 (let (($x204 (= $x230 $x229)))
 (let (($x47 (and (and (and (=> $x230 $x78) (= input.dst.llvm-%l ?x114)) $x204) $x173)))
 (let (($x100 (and (and $x47 $x9) $x200)))
 (let (($x90 (not true)))
 (let (($x332 (or (or $x90 $x100) $x347)))
 (let (($x161 (= true true)))
 (let (($x12 (and $x161 $x332)))
 (let (($x79 (= $x12 true)))
 (let (($x183 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x45 (= $x183 $x116)))
 (let (($x237 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x139 (= $x237 $x230)))
 (let (($x61 (and $x139 $x45)))
 (let (($x99 (= $x61 true)))
 (let (($x366 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x276 (= $x366 $x214)))
 (let (($x176 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x39 (= $x176 $x31)))
 (let (($x76 (and $x39 $x276)))
 (let (($x126 (= $x76 true)))
 (let (($x306 (= $x183 $x214)))
 (let (($x64 (= $x237 $x31)))
 (let (($x10 (and $x64 $x306)))
 (let (($x91 (= $x10 true)))
 (let (($x75 (= $x366 $x116)))
 (let (($x256 (= $x176 $x230)))
 (let (($x30 (and $x256 $x75)))
 (let (($x181 (= $x30 true)))
 (let ((?x226 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x167 (= (_ bv0 3) ?x226)))
 (let (($x135 (= $x167 true)))
 (let (($x57 (= $x135 true)))
 (let (($x203 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x50 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x259 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x50) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x50))))
 (let (($x228 (and true $x259)))
 (let (($x92 (and $x259 $x228)))
 (let (($x149 (= (bvand ?x114 (_ bv4294967288 32)) ?x114)))
 (let (($x356 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x119 (and $x356 $x149)))
 (let (($x224 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x23 (bvsub ?x23 (_ bv4 32))) (bvult ?x23 (bvsub ?x23 (_ bv4 32))))))
 (let (($x131 (and (and (and (and (and $x228 $x224) $x356) $x119) $x92) $x203)))
 (let (($x375 (= true $x131)))
 (let (($x175 (not $x136)))
 (let (($x206 (=> $x175 $x375)))
 (let (($x109 (= $x206 true)))
 (let (($x290 (= $x109 true)))
 (let (($x132 (= $x290 true)))
 (let (($x54 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x63 (= $x54 true)))
 (let (($x7 (= $x63 true)))
 (let (($x156 (= $x7 true)))
 (let (($x134 (= $x175 true)))
 (let (($x166 (= $x134 true)))
 (let (($x106 (= $x166 true)))
 (let (($x250 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x219 (= $x250 true)))
 (let (($x303 (= $x219 true)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x265 (= (_ bv0 32) ?x199)))
 (let ((?x146 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x159 $x105)))
 (let (($x77 (and $x82 $x265)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x107 $x77)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x55)))))))
 (let (($x311 (and $x137 $x267)))
 (let (($x66 (= $x311 true)))
 (let (($x163 (= $x66 true)))
 (let (($x201 (= $x163 true)))
 (let (($x154 (and $x201 $x303)))
 (let (($x87 (and $x154 $x106)))
 (let (($x123 (and $x87 $x156)))
 (let (($x272 (and $x123 $x132)))
 (let (($x26 (and $x272 $x57)))
 (let (($x280 (and $x26 $x181)))
 (let (($x253 (and $x280 $x91)))
 (let (($x312 (and $x253 $x126)))
 (let (($x182 (and $x312 $x99)))
 (let (($x304 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x320 (and $x304 $x182)))
 (let (($x261 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x23 (_ bv3 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x196 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x169 $x261)))))))
 (let (($x293 (=> (and $x175 (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x169 $x261)))))))
 (let (($x70 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x283 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x162 (=> $x283 (or false (or false (and true (or $x227 $x70)))))))
 (let (($x211 (=> (and $x175 $x283) (or false (or false (and true (or $x227 $x70)))))))
 (let (($x13 (and $x211 $x293)))
 (let (($x16 (and $x13 $x320)))
 (let (($x29 (=> $x16 $x79)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000a40)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x4c485f48)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x5f)
                     #x4c485f4c
                     #x48)
              #x4c485f4f
              #xcc)
       #x4c485f4e
       #x48))
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.ind-%var3084X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3089X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var3089X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var3084X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 112
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3089X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3084X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x71 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x233 (concat ?x71 (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv4 32))))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x347 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x332 (concat ?x347 (concat ?x257 ?x233))))
 (let (($x12 (= ?x332 ?x332)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x10 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x276 (bvuge ?x10 (_ bv1 32))))
 (let (($x79 (=> $x276 $x12)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3089X))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv2 32))) ?x317)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv3 32))) ?x144)))
 (let (($x329 (= ?x68 ?x68)))
 (let (($x35 (=> $x276 $x329)))
 (let ((?x283 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem ?x283))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv2 32))) ?x44))))
 (let (($x269 (= (_ bv0 32) ?x179)))
 (let ((?x28 (ite $x269 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x28 (_ bv1 32))))
 (let (($x145 (= $x276 $x217)))
 (let (($x38 (= false false)))
 (let (($x91 (= ?x10 (_ bv0 32))))
 (let (($x5 (=> $x91 $x38)))
 (let (($x52 (= ?x28 (_ bv0 32))))
 (let (($x223 (= $x91 $x52)))
 (let (($x24 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x179)))
 (let (($x316 (and (and (and (and (and $x24 $x223) $x5) $x145) $x35) $x79)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x14 (concat ?x266 (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv4 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x343 (concat ?x101 (concat ?x98 ?x14))))
 (let (($x22 (= ?x343 ?x343)))
 (let (($x256 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x366 (ite $x256 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x366 (_ bv1 32))))
 (let (($x241 (=> $x181 $x22)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3084X))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv2 32))) ?x58)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv3 32))) ?x305)))
 (let (($x278 (= ?x110 ?x110)))
 (let (($x191 (=> $x181 $x278)))
 (let (($x289 (= $x181 $x217)))
 (let (($x116 (= ?x366 (_ bv0 32))))
 (let (($x299 (= $x116 $x52)))
 (let (($x152 (and (and (and (=> $x116 $x38) (= input.dst.llvm-%l ?x179)) $x299) $x289)))
 (let (($x232 (and (and $x152 $x191) $x241)))
 (let (($x43 (not true)))
 (let (($x150 (or (or $x43 $x232) $x316)))
 (let (($x158 (= true true)))
 (let (($x25 (and $x158 $x150)))
 (let (($x274 (= $x25 true)))
 (let (($x306 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x126 (=> $x306 $x38)))
 (let (($x39 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x174 (= $x39 $x181)))
 (let (($x78 (= $x306 $x116)))
 (let (($x53 (and (and $x78 $x174) $x126)))
 (let (($x168 (= $x53 true)))
 (let (($x30 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x182 (= $x30 $x276)))
 (let (($x42 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x99 (= $x42 $x91)))
 (let (($x237 (=> $x42 $x38)))
 (let (($x16 (and (and $x237 $x99) $x182)))
 (let (($x161 (= $x16 true)))
 (let (($x139 (and (and (= $x306 $x91) (= $x39 $x276)) $x126)))
 (let (($x45 (= $x139 true)))
 (let (($x31 (and (and (= $x42 $x116) (= $x30 $x181)) $x237)))
 (let (($x64 (= $x31 true)))
 (let ((?x57 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x26 (= (_ bv0 3) ?x57)))
 (let (($x184 (= $x26 true)))
 (let (($x176 (= $x184 true)))
 (let (($x193 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x195 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x225 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x195) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x195))))
 (let (($x95 (and true $x225)))
 (let (($x92 (and $x225 $x95)))
 (let (($x119 (= (bvand ?x179 (_ bv4294967288 32)) ?x179)))
 (let (($x295 (= (bvand ?x283 (_ bv4294967292 32)) ?x283)))
 (let (($x118 (and $x295 $x119)))
 (let (($x153 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x283 (bvsub ?x283 (_ bv4 32))) (bvult ?x283 (bvsub ?x283 (_ bv4 32))))))
 (let (($x109 (and (and (and (and (and $x95 $x153) $x295) $x118) $x92) $x193)))
 (let (($x290 (= true $x109)))
 (let (($x175 (not $x136)))
 (let (($x132 (=> $x175 $x290)))
 (let (($x272 (= $x132 true)))
 (let (($x148 (= $x272 true)))
 (let (($x226 (= $x148 true)))
 (let (($x156 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x123 (= $x156 true)))
 (let (($x186 (= $x123 true)))
 (let (($x50 (= $x186 true)))
 (let (($x87 (= $x175 true)))
 (let (($x185 (= $x87 true)))
 (let (($x54 (= $x185 true)))
 (let (($x154 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x134 (= $x154 true)))
 (let (($x166 (= $x134 true)))
 (let ((?x267 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x311 (= (_ bv0 32) ?x267)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x82 $x265)))
 (let (($x66 (and $x77 $x311)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x33 $x66)))
 (let (($x215 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x215)))))))
 (let (($x201 (and $x105 $x163)))
 (let (($x301 (= $x201 true)))
 (let (($x250 (= $x301 true)))
 (let (($x219 (= $x250 true)))
 (let (($x106 (and $x219 $x166)))
 (let (($x63 (and $x106 $x54)))
 (let (($x292 (and $x63 $x50)))
 (let (($x167 (and $x292 $x226)))
 (let (($x19 (and $x167 $x176)))
 (let (($x183 (and $x19 $x64)))
 (let (($x61 (and $x183 $x45)))
 (let (($x90 (and $x61 $x161)))
 (let (($x288 (and $x90 $x168)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x229 (and $x37 $x288)))
 (let (($x94 (bvugt ?x283 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x283 (_ bv3 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x304 (=> (bvule ?x283 (bvsub (bvadd ?x283 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x165 $x94)))))))
 (let (($x307 (=> (and $x175 (bvule ?x283 (bvsub (bvadd ?x283 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x165 $x94)))))))
 (let (($x74 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x310 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x113 (=> $x310 (or false (or false (and true (or $x297 $x74)))))))
 (let (($x122 (=> (and $x175 $x310) (or false (or false (and true (or $x297 $x74)))))))
 (let (($x130 (and $x122 $x307)))
 (let (($x204 (and $x130 $x229)))
 (let (($x69 (=> $x204 $x274)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3089X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3084X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x71 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x233 (concat ?x71 (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv4 32))))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x347 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x332 (concat ?x347 (concat ?x257 ?x233))))
 (let (($x12 (= ?x332 ?x332)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x10 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x276 (bvuge ?x10 (_ bv1 32))))
 (let (($x79 (=> $x276 $x12)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3089X))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv2 32))) ?x317)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv3 32))) ?x144)))
 (let (($x329 (= ?x68 ?x68)))
 (let (($x35 (=> $x276 $x329)))
 (let ((?x283 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem ?x283))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv2 32))) ?x44))))
 (let (($x269 (= (_ bv0 32) ?x179)))
 (let ((?x28 (ite $x269 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x28 (_ bv1 32))))
 (let (($x145 (= $x276 $x217)))
 (let (($x38 (= false false)))
 (let (($x91 (= ?x10 (_ bv0 32))))
 (let (($x5 (=> $x91 $x38)))
 (let (($x52 (= ?x28 (_ bv0 32))))
 (let (($x223 (= $x91 $x52)))
 (let (($x24 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x179)))
 (let (($x316 (and (and (and (and (and $x24 $x223) $x5) $x145) $x35) $x79)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x14 (concat ?x266 (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv4 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x343 (concat ?x101 (concat ?x98 ?x14))))
 (let (($x22 (= ?x343 ?x343)))
 (let (($x256 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x366 (ite $x256 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x366 (_ bv1 32))))
 (let (($x241 (=> $x181 $x22)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3084X))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv2 32))) ?x58)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv3 32))) ?x305)))
 (let (($x278 (= ?x110 ?x110)))
 (let (($x191 (=> $x181 $x278)))
 (let (($x289 (= $x181 $x217)))
 (let (($x116 (= ?x366 (_ bv0 32))))
 (let (($x299 (= $x116 $x52)))
 (let (($x152 (and (and (and (=> $x116 $x38) (= input.dst.llvm-%l ?x179)) $x299) $x289)))
 (let (($x232 (and (and $x152 $x191) $x241)))
 (let (($x43 (not true)))
 (let (($x150 (or (or $x43 $x232) $x316)))
 (let (($x158 (= true true)))
 (let (($x25 (and $x158 $x150)))
 (let (($x274 (= $x25 true)))
 (let (($x306 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x126 (=> $x306 $x38)))
 (let (($x39 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x174 (= $x39 $x181)))
 (let (($x78 (= $x306 $x116)))
 (let (($x53 (and (and $x78 $x174) $x126)))
 (let (($x168 (= $x53 true)))
 (let (($x30 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x182 (= $x30 $x276)))
 (let (($x42 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x99 (= $x42 $x91)))
 (let (($x237 (=> $x42 $x38)))
 (let (($x16 (and (and $x237 $x99) $x182)))
 (let (($x161 (= $x16 true)))
 (let (($x139 (and (and (= $x306 $x91) (= $x39 $x276)) $x126)))
 (let (($x45 (= $x139 true)))
 (let (($x31 (and (and (= $x42 $x116) (= $x30 $x181)) $x237)))
 (let (($x64 (= $x31 true)))
 (let ((?x57 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x26 (= (_ bv0 3) ?x57)))
 (let (($x184 (= $x26 true)))
 (let (($x176 (= $x184 true)))
 (let (($x193 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x195 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x225 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x195) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x195))))
 (let (($x95 (and true $x225)))
 (let (($x92 (and $x225 $x95)))
 (let (($x119 (= (bvand ?x179 (_ bv4294967288 32)) ?x179)))
 (let (($x295 (= (bvand ?x283 (_ bv4294967292 32)) ?x283)))
 (let (($x118 (and $x295 $x119)))
 (let (($x153 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x283 (bvsub ?x283 (_ bv4 32))) (bvult ?x283 (bvsub ?x283 (_ bv4 32))))))
 (let (($x109 (and (and (and (and (and $x95 $x153) $x295) $x118) $x92) $x193)))
 (let (($x290 (= true $x109)))
 (let (($x175 (not $x136)))
 (let (($x132 (=> $x175 $x290)))
 (let (($x272 (= $x132 true)))
 (let (($x148 (= $x272 true)))
 (let (($x226 (= $x148 true)))
 (let (($x156 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x123 (= $x156 true)))
 (let (($x186 (= $x123 true)))
 (let (($x50 (= $x186 true)))
 (let (($x87 (= $x175 true)))
 (let (($x185 (= $x87 true)))
 (let (($x54 (= $x185 true)))
 (let (($x154 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x134 (= $x154 true)))
 (let (($x166 (= $x134 true)))
 (let ((?x267 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x311 (= (_ bv0 32) ?x267)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x82 $x265)))
 (let (($x66 (and $x77 $x311)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x33 $x66)))
 (let (($x215 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x215)))))))
 (let (($x201 (and $x105 $x163)))
 (let (($x301 (= $x201 true)))
 (let (($x250 (= $x301 true)))
 (let (($x219 (= $x250 true)))
 (let (($x106 (and $x219 $x166)))
 (let (($x63 (and $x106 $x54)))
 (let (($x292 (and $x63 $x50)))
 (let (($x167 (and $x292 $x226)))
 (let (($x19 (and $x167 $x176)))
 (let (($x183 (and $x19 $x64)))
 (let (($x61 (and $x183 $x45)))
 (let (($x90 (and $x61 $x161)))
 (let (($x288 (and $x90 $x168)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x229 (and $x37 $x288)))
 (let (($x94 (bvugt ?x283 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x283 (_ bv3 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x304 (=> (bvule ?x283 (bvsub (bvadd ?x283 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x165 $x94)))))))
 (let (($x307 (=> (and $x175 (bvule ?x283 (bvsub (bvadd ?x283 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x165 $x94)))))))
 (let (($x74 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x310 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x113 (=> $x310 (or false (or false (and true (or $x297 $x74)))))))
 (let (($x122 (=> (and $x175 $x310) (or false (or false (and true (or $x297 $x74)))))))
 (let (($x130 (and $x122 $x307)))
 (let (($x204 (and $x130 $x229)))
 (let (($x69 (=> $x204 $x274)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000a40)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x4c485f48)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x5f)
                     #x4c485f4c
                     #x48)
              #x4c485f4f
              #xcc)
       #x4c485f4e
       #x48))
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.ind-%var3084X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3089X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var3089X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var3084X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 113
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3089X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3084X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x391 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x489 (concat ?x391 (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv4 32))))))
 (let ((?x453 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x128 (concat ?x104 (concat ?x453 ?x489))))
 (let (($x205 (= ?x128 ?x128)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x144 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x144 (_ bv1 32))))
 (let (($x473 (=> $x84 $x205)))
 (let ((?x452 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3089X))))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv2 32))) ?x452)))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv3 32))) ?x393)))
 (let (($x410 (= ?x414 ?x414)))
 (let (($x405 (=> $x84 $x410)))
 (let ((?x310 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x151))))
 (let (($x386 (= (_ bv0 32) ?x127)))
 (let ((?x358 (ite $x386 (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge ?x358 (_ bv1 32))))
 (let (($x394 (= $x84 $x120)))
 (let (($x31 (= false false)))
 (let (($x68 (= ?x144 (_ bv0 32))))
 (let (($x388 (=> $x68 $x31)))
 (let (($x348 (= ?x358 (_ bv0 32))))
 (let (($x80 (= $x68 $x348)))
 (let (($x492 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x127)))
 (let (($x411 (and (and (and (and (and $x492 $x80) $x388) $x394) $x405) $x473)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x406 (concat ?x36 (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv4 32))))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x493 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x476 (concat ?x493 (concat ?x381 ?x406))))
 (let (($x390 (= ?x476 ?x476)))
 (let (($x75 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x30 (ite $x75 (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge ?x30 (_ bv1 32))))
 (let (($x403 (=> $x38 $x390)))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3084X))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv2 32))) ?x362)))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv3 32))) ?x365)))
 (let (($x380 (= ?x378 ?x378)))
 (let (($x490 (=> $x38 $x380)))
 (let (($x401 (= $x38 $x120)))
 (let (($x181 (= ?x30 (_ bv0 32))))
 (let (($x59 (= $x181 $x348)))
 (let (($x389 (and (and (and (=> $x181 $x31) (= input.dst.llvm-%l ?x127)) $x59) $x401)))
 (let (($x451 (and (and $x389 $x490) $x403)))
 (let (($x484 (not true)))
 (let (($x418 (or (or $x484 $x451) $x411)))
 (let (($x364 (= true true)))
 (let (($x472 (and $x364 $x418)))
 (let (($x419 (= $x472 true)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x90 (concat ?x161 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x288 (concat ?x168 (concat ?x174 ?x90))))
 (let ((?x191 (bvadd ?x288 (_ bv4 32))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x101))))
 (let (($x200 (= (_ bv0 32) ?x14)))
 (let ((?x343 (ite $x200 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (= ?x343 (_ bv0 32))))
 (let (($x41 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x376 (= $x41 $x22)))
 (let (($x379 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x35 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x242 (and $x35 $x379)))
 (let (($x370 (=> $x242 $x376)))
 (let (($x24 (bvuge ?x343 (_ bv1 32))))
 (let (($x471 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x350 (= $x471 $x24)))
 (let (($x372 (=> $x242 $x350)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x157))))
 (let (($x359 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x296)))
 (let (($x385 (=> $x242 $x359)))
 (let (($x229 (= (_ bv0 32) ?x288)))
 (let ((?x204 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x28 (bvuge ?x204 (_ bv1 32))))
 (let (($x448 (= $x379 $x28)))
 (let (($x371 (=> $x35 $x448)))
 (let (($x439 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x257 (and $x35 $x439)))
 (let (($x248 (=> $x257 $x31)))
 (let (($x158 (= ?x204 (_ bv0 32))))
 (let (($x447 (= $x439 $x158)))
 (let (($x62 (=> $x35 $x447)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x91)))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x276)))
 (let (($x143 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x126)))
 (let (($x387 (=> $x35 $x143)))
 (let (($x317 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x155 (=> $x317 $x31)))
 (let (($x270 (and (and (and (and (and (= $x317 $x181) (= $x35 $x38)) $x155) $x387) $x62) $x248)))
 (let (($x449 (and (and (and (and $x270 $x371) $x385) $x372) $x370)))
 (let (($x500 (= $x449 true)))
 (let ((?x227 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv1 32))) (select input.dst.llvm-mem ?x227))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv2 32))) ?x60))))
 (let ((?x357 (bvadd ?x314 (_ bv4 32))))
 (let ((?x327 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x327))))
 (let (($x326 (= (_ bv0 32) ?x277)))
 (let ((?x221 (ite $x326 (_ bv0 32) (_ bv1 32))))
 (let (($x367 (bvuge ?x221 (_ bv1 32))))
 (let (($x271 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x463 (= $x271 $x367)))
 (let (($x269 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x180 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x218 (and $x180 $x269)))
 (let (($x321 (=> $x218 $x463)))
 (let (($x275 (= ?x221 (_ bv0 32))))
 (let (($x278 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x470 (= $x278 $x275)))
 (let (($x468 (=> $x218 $x470)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem ?x314))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv2 32))) ?x198))))
 (let (($x171 (= input.spec-%var-l-1.2.1.2.0 ?x298)))
 (let (($x27 (=> $x218 $x171)))
 (let (($x282 (= (_ bv0 32) ?x314)))
 (let ((?x254 (ite $x282 (_ bv0 32) (_ bv1 32))))
 (let (($x281 (bvuge ?x254 (_ bv1 32))))
 (let (($x346 (= $x269 $x281)))
 (let (($x103 (=> $x180 $x346)))
 (let (($x338 (= ?x254 (_ bv0 32))))
 (let (($x99 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x442 (= $x99 $x338)))
 (let (($x323 (=> $x180 $x442)))
 (let ((?x202 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x446 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x177 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x25 (concat (select input.dst.llvm-mem ?x177) (concat ?x79 (concat ?x446 ?x202)))))
 (let (($x354 (= input.spec-%var-l-1.2.0 ?x25)))
 (let (($x65 (=> $x180 $x354)))
 (let (($x444 (= $x180 $x84)))
 (let (($x366 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x441 (= $x366 $x68)))
 (let (($x465 (and (and (and (=> $x366 $x31) (=> (and $x180 $x99) $x31)) $x441) $x444)))
 (let (($x374 (and (and (and (and (and (and $x465 $x65) $x323) $x103) $x27) $x468) $x321)))
 (let (($x319 (= $x374 true)))
 (let (($x252 (= $x41 $x275)))
 (let (($x97 (=> $x242 $x252)))
 (let (($x249 (= $x471 $x367)))
 (let (($x373 (=> $x242 $x249)))
 (let (($x291 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x298)))
 (let (($x209 (=> $x242 $x291)))
 (let (($x34 (= $x379 $x281)))
 (let (($x115 (=> $x35 $x34)))
 (let (($x300 (= $x439 $x338)))
 (let (($x40 (=> $x35 $x300)))
 (let (($x274 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x25)))
 (let (($x69 (=> $x35 $x274)))
 (let (($x188 (and (and (and (and (and (= $x317 $x68) (= $x35 $x84)) $x155) $x248) $x69) $x40)))
 (let (($x340 (and (and (and (and $x188 $x115) $x209) $x373) $x97)))
 (let (($x352 (= $x340 true)))
 (let (($x223 (= $x271 $x24)))
 (let (($x29 (=> $x218 $x223)))
 (let (($x241 (= $x278 $x22)))
 (let (($x232 (=> $x218 $x241)))
 (let (($x58 (= input.spec-%var-l-1.2.1.2.0 ?x296)))
 (let (($x305 (=> $x218 $x58)))
 (let (($x52 (= $x269 $x28)))
 (let (($x299 (=> $x180 $x52)))
 (let (($x47 (and $x180 $x99)))
 (let (($x287 (=> $x47 $x31)))
 (let (($x43 (= $x99 $x158)))
 (let (($x173 (=> $x180 $x43)))
 (let (($x139 (= input.spec-%var-l-1.2.0 ?x126)))
 (let (($x45 (=> $x180 $x139)))
 (let (($x46 (and (and (and (and (= $x366 $x181) (= $x180 $x38)) (=> $x366 $x31)) $x45) $x173)))
 (let (($x240 (and (and (and (and (and $x46 $x287) $x299) $x305) $x232) $x29)))
 (let (($x285 (= $x240 true)))
 (let ((?x176 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x19 (= (_ bv0 3) ?x176)))
 (let (($x208 (= $x19 true)))
 (let (($x42 (= $x208 true)))
 (let (($x255 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x268 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x81 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x268) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x268))))
 (let (($x49 (and true $x81)))
 (let (($x92 (and $x81 $x49)))
 (let (($x118 (= (bvand ?x127 (_ bv4294967288 32)) ?x127)))
 (let (($x286 (= (bvand ?x310 (_ bv4294967292 32)) ?x310)))
 (let (($x375 (and $x286 $x118)))
 (let (($x251 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x310 (bvsub ?x310 (_ bv4 32))) (bvult ?x310 (bvsub ?x310 (_ bv4 32))))))
 (let (($x272 (and (and (and (and (and $x49 $x251) $x286) $x375) $x92) $x255)))
 (let (($x148 (= true $x272)))
 (let (($x175 (not $x136)))
 (let (($x226 (=> $x175 $x148)))
 (let (($x167 (= $x226 true)))
 (let (($x135 (= $x167 true)))
 (let (($x57 (= $x135 true)))
 (let (($x50 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x292 (= $x50 true)))
 (let (($x259 (= $x292 true)))
 (let (($x195 (= $x259 true)))
 (let (($x63 (= $x175 true)))
 (let (($x7 (= $x63 true)))
 (let (($x156 (= $x7 true)))
 (let (($x106 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x87 (= $x106 true)))
 (let (($x185 (= $x87 true)))
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x163)))
 (let ((?x267 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x267)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x77 $x311)))
 (let (($x301 (and $x66 $x201)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x83 $x301)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x265 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x159)))))))
 (let (($x219 (and $x265 $x250)))
 (let (($x303 (= $x219 true)))
 (let (($x154 (= $x303 true)))
 (let (($x134 (= $x154 true)))
 (let (($x54 (and $x134 $x185)))
 (let (($x123 (and $x54 $x156)))
 (let (($x228 (and $x123 $x195)))
 (let (($x26 (and $x228 $x57)))
 (let (($x230 (and $x26 $x42)))
 (let (($x294 (and $x230 $x285)))
 (let (($x322 (and $x294 $x352)))
 (let (($x112 (and $x322 $x319)))
 (let (($x483 (and $x112 $x500)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x383 (and $x238 $x483)))
 (let (($x293 (bvugt ?x310 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x310 (_ bv3 32))))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x37 (=> (bvule ?x310 (bvsub (bvadd ?x310 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x196 $x293)))))))
 (let (($x194 (=> (and $x175 (bvule ?x310 (bvsub (bvadd ?x310 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x196 $x293)))))))
 (let (($x211 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x261 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x227 (_ bv1 32))) (or false (or false (and true (or $x162 $x211)))))))
 (let (($x234 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x227 (_ bv1 32)))) (or false (or false (and true (or $x162 $x211)))))))
 (let (($x32 (and $x234 $x194)))
 (let (($x402 (and $x32 $x383)))
 (let (($x435 (=> $x402 $x419)))
 (not $x435))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3089X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3084X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x391 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x489 (concat ?x391 (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv4 32))))))
 (let ((?x453 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x128 (concat ?x104 (concat ?x453 ?x489))))
 (let (($x205 (= ?x128 ?x128)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x144 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (bvuge ?x144 (_ bv1 32))))
 (let (($x473 (=> $x84 $x205)))
 (let ((?x452 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3089X))))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv2 32))) ?x452)))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv3 32))) ?x393)))
 (let (($x410 (= ?x414 ?x414)))
 (let (($x405 (=> $x84 $x410)))
 (let ((?x310 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x151))))
 (let (($x386 (= (_ bv0 32) ?x127)))
 (let ((?x358 (ite $x386 (_ bv0 32) (_ bv1 32))))
 (let (($x120 (bvuge ?x358 (_ bv1 32))))
 (let (($x394 (= $x84 $x120)))
 (let (($x31 (= false false)))
 (let (($x68 (= ?x144 (_ bv0 32))))
 (let (($x388 (=> $x68 $x31)))
 (let (($x348 (= ?x358 (_ bv0 32))))
 (let (($x80 (= $x68 $x348)))
 (let (($x492 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x127)))
 (let (($x411 (and (and (and (and (and $x492 $x80) $x388) $x394) $x405) $x473)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x406 (concat ?x36 (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv4 32))))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x493 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x476 (concat ?x493 (concat ?x381 ?x406))))
 (let (($x390 (= ?x476 ?x476)))
 (let (($x75 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x30 (ite $x75 (_ bv0 32) (_ bv1 32))))
 (let (($x38 (bvuge ?x30 (_ bv1 32))))
 (let (($x403 (=> $x38 $x390)))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3084X))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv2 32))) ?x362)))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv3 32))) ?x365)))
 (let (($x380 (= ?x378 ?x378)))
 (let (($x490 (=> $x38 $x380)))
 (let (($x401 (= $x38 $x120)))
 (let (($x181 (= ?x30 (_ bv0 32))))
 (let (($x59 (= $x181 $x348)))
 (let (($x389 (and (and (and (=> $x181 $x31) (= input.dst.llvm-%l ?x127)) $x59) $x401)))
 (let (($x451 (and (and $x389 $x490) $x403)))
 (let (($x484 (not true)))
 (let (($x418 (or (or $x484 $x451) $x411)))
 (let (($x364 (= true true)))
 (let (($x472 (and $x364 $x418)))
 (let (($x419 (= $x472 true)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x90 (concat ?x161 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x288 (concat ?x168 (concat ?x174 ?x90))))
 (let ((?x191 (bvadd ?x288 (_ bv4 32))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x101))))
 (let (($x200 (= (_ bv0 32) ?x14)))
 (let ((?x343 (ite $x200 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (= ?x343 (_ bv0 32))))
 (let (($x41 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x376 (= $x41 $x22)))
 (let (($x379 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x35 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x242 (and $x35 $x379)))
 (let (($x370 (=> $x242 $x376)))
 (let (($x24 (bvuge ?x343 (_ bv1 32))))
 (let (($x471 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x350 (= $x471 $x24)))
 (let (($x372 (=> $x242 $x350)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x157))))
 (let (($x359 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x296)))
 (let (($x385 (=> $x242 $x359)))
 (let (($x229 (= (_ bv0 32) ?x288)))
 (let ((?x204 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x28 (bvuge ?x204 (_ bv1 32))))
 (let (($x448 (= $x379 $x28)))
 (let (($x371 (=> $x35 $x448)))
 (let (($x439 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x257 (and $x35 $x439)))
 (let (($x248 (=> $x257 $x31)))
 (let (($x158 (= ?x204 (_ bv0 32))))
 (let (($x447 (= $x439 $x158)))
 (let (($x62 (=> $x35 $x447)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x91)))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x276)))
 (let (($x143 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x126)))
 (let (($x387 (=> $x35 $x143)))
 (let (($x317 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x155 (=> $x317 $x31)))
 (let (($x270 (and (and (and (and (and (= $x317 $x181) (= $x35 $x38)) $x155) $x387) $x62) $x248)))
 (let (($x449 (and (and (and (and $x270 $x371) $x385) $x372) $x370)))
 (let (($x500 (= $x449 true)))
 (let ((?x227 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv1 32))) (select input.dst.llvm-mem ?x227))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv2 32))) ?x60))))
 (let ((?x357 (bvadd ?x314 (_ bv4 32))))
 (let ((?x327 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x327))))
 (let (($x326 (= (_ bv0 32) ?x277)))
 (let ((?x221 (ite $x326 (_ bv0 32) (_ bv1 32))))
 (let (($x367 (bvuge ?x221 (_ bv1 32))))
 (let (($x271 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x463 (= $x271 $x367)))
 (let (($x269 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x180 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x218 (and $x180 $x269)))
 (let (($x321 (=> $x218 $x463)))
 (let (($x275 (= ?x221 (_ bv0 32))))
 (let (($x278 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x470 (= $x278 $x275)))
 (let (($x468 (=> $x218 $x470)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem ?x314))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv2 32))) ?x198))))
 (let (($x171 (= input.spec-%var-l-1.2.1.2.0 ?x298)))
 (let (($x27 (=> $x218 $x171)))
 (let (($x282 (= (_ bv0 32) ?x314)))
 (let ((?x254 (ite $x282 (_ bv0 32) (_ bv1 32))))
 (let (($x281 (bvuge ?x254 (_ bv1 32))))
 (let (($x346 (= $x269 $x281)))
 (let (($x103 (=> $x180 $x346)))
 (let (($x338 (= ?x254 (_ bv0 32))))
 (let (($x99 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x442 (= $x99 $x338)))
 (let (($x323 (=> $x180 $x442)))
 (let ((?x202 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x446 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x177 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x25 (concat (select input.dst.llvm-mem ?x177) (concat ?x79 (concat ?x446 ?x202)))))
 (let (($x354 (= input.spec-%var-l-1.2.0 ?x25)))
 (let (($x65 (=> $x180 $x354)))
 (let (($x444 (= $x180 $x84)))
 (let (($x366 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x441 (= $x366 $x68)))
 (let (($x465 (and (and (and (=> $x366 $x31) (=> (and $x180 $x99) $x31)) $x441) $x444)))
 (let (($x374 (and (and (and (and (and (and $x465 $x65) $x323) $x103) $x27) $x468) $x321)))
 (let (($x319 (= $x374 true)))
 (let (($x252 (= $x41 $x275)))
 (let (($x97 (=> $x242 $x252)))
 (let (($x249 (= $x471 $x367)))
 (let (($x373 (=> $x242 $x249)))
 (let (($x291 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x298)))
 (let (($x209 (=> $x242 $x291)))
 (let (($x34 (= $x379 $x281)))
 (let (($x115 (=> $x35 $x34)))
 (let (($x300 (= $x439 $x338)))
 (let (($x40 (=> $x35 $x300)))
 (let (($x274 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x25)))
 (let (($x69 (=> $x35 $x274)))
 (let (($x188 (and (and (and (and (and (= $x317 $x68) (= $x35 $x84)) $x155) $x248) $x69) $x40)))
 (let (($x340 (and (and (and (and $x188 $x115) $x209) $x373) $x97)))
 (let (($x352 (= $x340 true)))
 (let (($x223 (= $x271 $x24)))
 (let (($x29 (=> $x218 $x223)))
 (let (($x241 (= $x278 $x22)))
 (let (($x232 (=> $x218 $x241)))
 (let (($x58 (= input.spec-%var-l-1.2.1.2.0 ?x296)))
 (let (($x305 (=> $x218 $x58)))
 (let (($x52 (= $x269 $x28)))
 (let (($x299 (=> $x180 $x52)))
 (let (($x47 (and $x180 $x99)))
 (let (($x287 (=> $x47 $x31)))
 (let (($x43 (= $x99 $x158)))
 (let (($x173 (=> $x180 $x43)))
 (let (($x139 (= input.spec-%var-l-1.2.0 ?x126)))
 (let (($x45 (=> $x180 $x139)))
 (let (($x46 (and (and (and (and (= $x366 $x181) (= $x180 $x38)) (=> $x366 $x31)) $x45) $x173)))
 (let (($x240 (and (and (and (and (and $x46 $x287) $x299) $x305) $x232) $x29)))
 (let (($x285 (= $x240 true)))
 (let ((?x176 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x19 (= (_ bv0 3) ?x176)))
 (let (($x208 (= $x19 true)))
 (let (($x42 (= $x208 true)))
 (let (($x255 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x268 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x81 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x268) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x268))))
 (let (($x49 (and true $x81)))
 (let (($x92 (and $x81 $x49)))
 (let (($x118 (= (bvand ?x127 (_ bv4294967288 32)) ?x127)))
 (let (($x286 (= (bvand ?x310 (_ bv4294967292 32)) ?x310)))
 (let (($x375 (and $x286 $x118)))
 (let (($x251 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x310 (bvsub ?x310 (_ bv4 32))) (bvult ?x310 (bvsub ?x310 (_ bv4 32))))))
 (let (($x272 (and (and (and (and (and $x49 $x251) $x286) $x375) $x92) $x255)))
 (let (($x148 (= true $x272)))
 (let (($x175 (not $x136)))
 (let (($x226 (=> $x175 $x148)))
 (let (($x167 (= $x226 true)))
 (let (($x135 (= $x167 true)))
 (let (($x57 (= $x135 true)))
 (let (($x50 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x292 (= $x50 true)))
 (let (($x259 (= $x292 true)))
 (let (($x195 (= $x259 true)))
 (let (($x63 (= $x175 true)))
 (let (($x7 (= $x63 true)))
 (let (($x156 (= $x7 true)))
 (let (($x106 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x87 (= $x106 true)))
 (let (($x185 (= $x87 true)))
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x163)))
 (let ((?x267 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x267)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x77 $x311)))
 (let (($x301 (and $x66 $x201)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x83 $x301)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x265 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x159)))))))
 (let (($x219 (and $x265 $x250)))
 (let (($x303 (= $x219 true)))
 (let (($x154 (= $x303 true)))
 (let (($x134 (= $x154 true)))
 (let (($x54 (and $x134 $x185)))
 (let (($x123 (and $x54 $x156)))
 (let (($x228 (and $x123 $x195)))
 (let (($x26 (and $x228 $x57)))
 (let (($x230 (and $x26 $x42)))
 (let (($x294 (and $x230 $x285)))
 (let (($x322 (and $x294 $x352)))
 (let (($x112 (and $x322 $x319)))
 (let (($x483 (and $x112 $x500)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x383 (and $x238 $x483)))
 (let (($x293 (bvugt ?x310 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x310 (_ bv3 32))))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x37 (=> (bvule ?x310 (bvsub (bvadd ?x310 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x196 $x293)))))))
 (let (($x194 (=> (and $x175 (bvule ?x310 (bvsub (bvadd ?x310 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x196 $x293)))))))
 (let (($x211 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x261 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x227 (_ bv1 32))) (or false (or false (and true (or $x162 $x211)))))))
 (let (($x234 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x227 (_ bv1 32)))) (or false (or false (and true (or $x162 $x211)))))))
 (let (($x32 (and $x234 $x194)))
 (let (($x402 (and $x32 $x383)))
 (let (($x435 (=> $x402 $x419)))
 (not $x435))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var3089X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var3084X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffe8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x10101000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x10101016)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x10101000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x10101018)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x10)
              #x10101010
              #x00)
       #x10101010
       #x00))
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffffe8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffeb)
  (define-fun input.ind-%var3089X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3084X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 114
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3089X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3084X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x648 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x656 (concat ?x648 (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv4 32))))))
 (let ((?x653 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x651 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x649 (concat ?x651 (concat ?x653 ?x656))))
 (let (($x652 (= ?x649 ?x649)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x441 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x354 (bvuge ?x441 (_ bv1 32))))
 (let (($x655 (=> $x354 $x652)))
 (let ((?x644 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3089X))))
 (let ((?x637 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv2 32))) ?x644)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv3 32))) ?x637)))
 (let (($x642 (= ?x639 ?x639)))
 (let (($x645 (=> $x354 $x642)))
 (let ((?x169 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x170))))
 (let (($x614 (= (_ bv0 32) ?x149)))
 (let ((?x596 (ite $x614 (_ bv0 32) (_ bv1 32))))
 (let (($x599 (bvuge ?x596 (_ bv1 32))))
 (let (($x662 (= $x354 $x599)))
 (let (($x308 (= false false)))
 (let (($x355 (= ?x441 (_ bv0 32))))
 (let (($x633 (=> $x355 $x308)))
 (let (($x608 (= ?x596 (_ bv0 32))))
 (let (($x661 (= $x355 $x608)))
 (let (($x632 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x149)))
 (let (($x667 (and (and (and (and (and $x632 $x661) $x633) $x662) $x645) $x655)))
 (let ((?x601 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x610 (concat ?x601 (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv4 32))))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x620 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x624 (concat ?x620 (concat ?x622 ?x610))))
 (let (($x625 (= ?x624 ?x624)))
 (let (($x280 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x180 (ite $x280 (_ bv0 32) (_ bv1 32))))
 (let (($x31 (bvuge ?x180 (_ bv1 32))))
 (let (($x630 (=> $x31 $x625)))
 (let ((?x600 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3084X))))
 (let ((?x602 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv2 32))) ?x600)))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv3 32))) ?x602)))
 (let (($x621 (= ?x613 ?x613)))
 (let (($x611 (=> $x31 $x621)))
 (let (($x628 (= $x31 $x599)))
 (let (($x38 (= ?x180 (_ bv0 32))))
 (let (($x609 (= $x38 $x608)))
 (let (($x85 (and (and (and (=> $x38 $x308) (= input.dst.llvm-%l ?x149)) $x609) $x628)))
 (let (($x96 (and (and $x85 $x611) $x630)))
 (let (($x594 (not true)))
 (let (($x669 (or (or $x594 $x96) $x667)))
 (let (($x615 (= true true)))
 (let (($x670 (and $x615 $x669)))
 (let (($x671 (= $x670 true)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x174 (concat ?x78 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x288 (concat ?x147 (concat ?x161 ?x174))))
 (let ((?x305 (bvadd ?x288 (_ bv4 32))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem ?x305))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv2 32))) ?x191))))
 (let ((?x263 (bvadd ?x100 (_ bv4 32))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x248))))
 (let ((?x242 (bvadd ?x233 (_ bv4 32))))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x341))))
 (let (($x298 (= (_ bv0 32) ?x337)))
 (let ((?x291 (ite $x298 (_ bv0 32) (_ bv1 32))))
 (let (($x209 (= ?x291 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x555 (= $x51 $x209)))
 (let (($x430 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x358 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x359 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x465 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x372 (and $x465 $x359)))
 (let (($x260 (and $x372 $x358)))
 (let (($x453 (and $x260 $x430)))
 (let (($x557 (=> $x453 $x555)))
 (let (($x357 (bvuge ?x291 (_ bv1 32))))
 (let (($x496 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x556 (= $x496 $x357)))
 (let (($x578 (=> $x453 $x556)))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x482))))
 (let (($x558 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x40)))
 (let (($x579 (=> $x453 $x558)))
 (let (($x446 (= (_ bv0 32) ?x233)))
 (let ((?x202 (ite $x446 (_ bv0 32) (_ bv1 32))))
 (let (($x243 (bvuge ?x202 (_ bv1 32))))
 (let (($x581 (= $x430 $x243)))
 (let (($x582 (=> $x260 $x581)))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x294))))
 (let (($x589 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x35)))
 (let (($x577 (=> $x260 $x589)))
 (let (($x332 (= ?x202 (_ bv0 32))))
 (let (($x412 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x553 (= $x412 $x332)))
 (let (($x554 (=> $x260 $x553)))
 (let (($x197 (and $x453 $x51)))
 (let (($x146 (=> $x197 $x308)))
 (let (($x405 (and $x260 $x412)))
 (let (($x413 (=> $x405 $x308)))
 (let (($x378 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x415 (and $x372 $x378)))
 (let (($x492 (=> $x415 $x308)))
 (let (($x361 (= (_ bv0 32) ?x100)))
 (let ((?x101 (ite $x361 (_ bv0 32) (_ bv1 32))))
 (let (($x244 (= ?x101 (_ bv0 32))))
 (let (($x576 (= $x378 $x244)))
 (let (($x588 (=> $x372 $x576)))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (let (($x551 (= $x358 $x22)))
 (let (($x552 (=> $x372 $x551)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x207))))
 (let (($x570 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x289)))
 (let (($x575 (=> $x372 $x570)))
 (let (($x229 (= (_ bv0 32) ?x288)))
 (let ((?x204 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x377 (bvuge ?x204 (_ bv1 32))))
 (let (($x550 (= $x359 $x377)))
 (let (($x574 (=> $x465 $x550)))
 (let (($x323 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x334 (and $x465 $x323)))
 (let (($x346 (=> $x334 $x308)))
 (let (($x158 (= ?x204 (_ bv0 32))))
 (let (($x573 (= $x323 $x158)))
 (let (($x549 (=> $x465 $x573)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x306)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x91)))
 (let (($x547 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x139)))
 (let (($x548 (=> $x465 $x547)))
 (let (($x478 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x351 (=> $x478 $x308)))
 (let (($x590 (and (and (and (and (and (= $x478 $x38) (= $x465 $x31)) $x351) $x548) $x549) $x346)))
 (let (($x584 (and (and (and (and (and (and $x590 $x574) $x575) $x552) $x588) $x492) $x413)))
 (let (($x587 (and (and (and (and (and (and $x584 $x146) $x554) $x577) $x582) $x579) $x578)))
 (let (($x569 (and $x587 $x557)))
 (let (($x591 (= $x569 true)))
 (let ((?x297 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv1 32))) (select input.dst.llvm-mem ?x297))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv2 32))) ?x178))))
 (let ((?x348 (bvadd ?x62 (_ bv4 32))))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x401))))
 (let ((?x388 (bvadd ?x363 (_ bv4 32))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ?x388 (_ bv1 32))) (select input.dst.llvm-mem ?x388))))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd ?x388 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x388 (_ bv2 32))) ?x407))))
 (let ((?x485 (bvadd ?x494 (_ bv4 32))))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem ?x485))))
 (let ((?x438 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv2 32))) ?x429))))
 (let (($x495 (= (_ bv0 32) ?x438)))
 (let ((?x456 (ite $x495 (_ bv0 32) (_ bv1 32))))
 (let (($x427 (= ?x456 (_ bv0 32))))
 (let (($x34 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x534 (= $x34 $x427)))
 (let (($x345 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x343 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x287 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x5 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x52 (and $x5 $x287)))
 (let (($x24 (and $x52 $x343)))
 (let (($x331 (and $x24 $x345)))
 (let (($x531 (=> $x331 $x534)))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x494 (_ bv1 32))) (select input.dst.llvm-mem ?x494))))
 (let ((?x472 (concat (select input.dst.llvm-mem (bvadd ?x494 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x494 (_ bv2 32))) ?x409))))
 (let (($x505 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x472)))
 (let (($x527 (=> $x331 $x505)))
 (let (($x426 (bvuge ?x456 (_ bv1 32))))
 (let (($x471 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x519 (= $x471 $x426)))
 (let (($x530 (=> $x331 $x519)))
 (let (($x398 (= (_ bv0 32) ?x494)))
 (let ((?x452 (ite $x398 (_ bv0 32) (_ bv1 32))))
 (let (($x434 (bvuge ?x452 (_ bv1 32))))
 (let (($x504 (= $x345 $x434)))
 (let (($x533 (=> $x24 $x504)))
 (let (($x393 (= ?x452 (_ bv0 32))))
 (let (($x155 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x529 (= $x155 $x393)))
 (let (($x121 (=> $x24 $x529)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x363 (_ bv1 32))) (select input.dst.llvm-mem ?x363))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x363 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x363 (_ bv2 32))) ?x279))))
 (let (($x535 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x390)))
 (let (($x532 (=> $x24 $x535)))
 (let (($x400 (= (_ bv0 32) ?x363)))
 (let ((?x382 (ite $x400 (_ bv0 32) (_ bv1 32))))
 (let (($x450 (bvuge ?x382 (_ bv1 32))))
 (let (($x526 (= $x343 $x450)))
 (let (($x503 (=> $x52 $x526)))
 (let (($x380 (= ?x382 (_ bv0 32))))
 (let (($x58 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x502 (= $x58 $x380)))
 (let (($x518 (=> $x52 $x502)))
 (let ((?x500 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x500))))
 (let (($x542 (= input.spec-%var-l-1.2.1.2.0 ?x89)))
 (let (($x523 (=> $x52 $x542)))
 (let (($x18 (= (_ bv0 32) ?x62)))
 (let ((?x270 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x385 (bvuge ?x270 (_ bv1 32))))
 (let (($x517 (= $x287 $x385)))
 (let (($x537 (=> $x5 $x517)))
 (let (($x448 (= ?x270 (_ bv0 32))))
 (let (($x99 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x516 (= $x99 $x448)))
 (let (($x520 (=> $x5 $x516)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x468 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x23 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x321 (concat (select input.dst.llvm-mem ?x23) (concat ?x468 (concat ?x27 ?x129)))))
 (let (($x513 (= input.spec-%var-l-1.2.0 ?x321)))
 (let (($x541 (=> $x5 $x513)))
 (let (($x510 (= $x5 $x354)))
 (let (($x30 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x522 (= $x30 $x355)))
 (let (($x115 (and $x331 $x34)))
 (let (($x342 (=> $x115 $x308)))
 (let (($x274 (and $x24 $x155)))
 (let (($x69 (=> $x274 $x308)))
 (let (($x445 (and $x52 $x58)))
 (let (($x271 (=> $x445 $x308)))
 (let (($x514 (and (and (and (=> $x30 $x308) (=> (and $x5 $x99) $x308)) $x271) $x69)))
 (let (($x538 (and (and (and (and (and (and $x514 $x342) $x522) $x510) $x541) $x520) $x537)))
 (let (($x509 (and (and (and (and (and (and $x538 $x523) $x518) $x503) $x532) $x121) $x533)))
 (let (($x540 (and (and (and $x509 $x530) $x527) $x531)))
 (let (($x545 (= $x540 true)))
 (let (($x102 (= $x496 $x426)))
 (let (($x459 (=> $x453 $x102)))
 (let (($x455 (= $x51 $x427)))
 (let (($x428 (=> $x453 $x455)))
 (let (($x419 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x472)))
 (let (($x435 (=> $x453 $x419)))
 (let (($x104 (= $x430 $x434)))
 (let (($x417 (=> $x260 $x104)))
 (let (($x414 (= $x412 $x393)))
 (let (($x410 (=> $x260 $x414)))
 (let (($x403 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x390)))
 (let (($x451 (=> $x260 $x403)))
 (let (($x490 (= $x378 $x380)))
 (let (($x392 (=> $x372 $x490)))
 (let (($x362 (= $x358 $x450)))
 (let (($x365 (=> $x372 $x362)))
 (let (($x360 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x89)))
 (let (($x396 (=> $x372 $x360)))
 (let (($x88 (= $x359 $x385)))
 (let (($x350 (=> $x465 $x88)))
 (let (($x371 (= $x323 $x448)))
 (let (($x235 (=> $x465 $x371)))
 (let (($x374 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x321)))
 (let (($x319 (=> $x465 $x374)))
 (let (($x454 (and (and (and (and (and (= $x478 $x355) (= $x465 $x354)) $x351) $x346) $x319) $x235)))
 (let (($x462 (and (and (and (and (and (and $x454 $x350) $x396) $x365) $x392) $x451) $x492)))
 (let (($x464 (and (and (and (and (and (and $x462 $x410) $x413) $x417) $x435) $x146) $x428)))
 (let (($x497 (and $x464 $x459)))
 (let (($x525 (= $x497 true)))
 (let (($x309 (= $x471 $x357)))
 (let (($x339 (=> $x331 $x309)))
 (let (($x475 (= $x34 $x209)))
 (let (($x328 (=> $x331 $x475)))
 (let (($x188 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x40)))
 (let (($x379 (=> $x331 $x188)))
 (let (($x258 (= $x345 $x243)))
 (let (($x302 (=> $x24 $x258)))
 (let (($x316 (= $x155 $x332)))
 (let (($x25 (=> $x24 $x316)))
 (let (($x84 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x35)))
 (let (($x284 (=> $x24 $x84)))
 (let (($x241 (= $x343 $x22)))
 (let (($x232 (=> $x52 $x241)))
 (let (($x14 (= $x58 $x244)))
 (let (($x200 (=> $x52 $x14)))
 (let (($x157 (= input.spec-%var-l-1.2.1.2.0 ?x289)))
 (let (($x9 (=> $x52 $x157)))
 (let (($x269 (= $x287 $x377)))
 (let (($x28 (=> $x5 $x269)))
 (let (($x46 (and $x5 $x99)))
 (let (($x47 (=> $x46 $x308)))
 (let (($x43 (= $x99 $x158)))
 (let (($x173 (=> $x5 $x43)))
 (let (($x45 (= input.spec-%var-l-1.2.0 ?x139)))
 (let (($x145 (=> $x5 $x45)))
 (let (($x344 (and (and (and (and (= $x30 $x38) (= $x5 $x31)) (=> $x30 $x308)) $x145) $x173)))
 (let (($x221 (and (and (and (and (and (and $x344 $x47) $x28) $x9) $x200) $x232) $x271)))
 (let (($x275 (and (and (and (and (and (and $x221 $x284) $x25) $x69) $x302) $x379) $x342)))
 (let (($x97 (and (and $x275 $x328) $x339)))
 (let (($x340 (= $x97 true)))
 (let ((?x42 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x230 (= (_ bv0 3) ?x42)))
 (let (($x256 (= $x230 true)))
 (let (($x366 (= $x256 true)))
 (let (($x206 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x224 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x224) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x224))))
 (let (($x203 (and true $x117)))
 (let (($x92 (and $x117 $x203)))
 (let (($x375 (= (bvand ?x149 (_ bv4294967288 32)) ?x149)))
 (let (($x114 (= (bvand ?x169 (_ bv4294967292 32)) ?x169)))
 (let (($x290 (and $x114 $x375)))
 (let (($x131 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x169 (bvsub ?x169 (_ bv4 32))) (bvult ?x169 (bvsub ?x169 (_ bv4 32))))))
 (let (($x167 (and (and (and (and (and $x203 $x131) $x114) $x290) $x92) $x206)))
 (let (($x135 (= true $x167)))
 (let (($x175 (not $x136)))
 (let (($x57 (=> $x175 $x135)))
 (let (($x26 (= $x57 true)))
 (let (($x184 (= $x26 true)))
 (let (($x176 (= $x184 true)))
 (let (($x195 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x228 (= $x195 true)))
 (let (($x225 (= $x228 true)))
 (let (($x268 (= $x225 true)))
 (let (($x123 (= $x175 true)))
 (let (($x186 (= $x123 true)))
 (let (($x50 (= $x186 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x63 (= $x54 true)))
 (let (($x7 (= $x63 true)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x219 (= (_ bv0 32) ?x250)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (and $x66 $x201)))
 (let (($x303 (and $x301 $x219)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x107 $x303)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x311 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x82)))))))
 (let (($x134 (and $x311 $x154)))
 (let (($x166 (= $x134 true)))
 (let (($x106 (= $x166 true)))
 (let (($x87 (= $x106 true)))
 (let (($x156 (and $x87 $x7)))
 (let (($x292 (and $x156 $x50)))
 (let (($x95 (and $x292 $x268)))
 (let (($x19 (and $x95 $x176)))
 (let (($x116 (and $x19 $x366)))
 (let (($x352 (and $x116 $x340)))
 (let (($x521 (and $x352 $x525)))
 (let (($x546 (and $x521 $x545)))
 (let (($x623 (and $x546 $x591)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x592 (and $x137 $x623)))
 (let (($x307 (bvugt ?x169 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x169 (_ bv3 32))))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x238 (=> (bvule ?x169 (bvsub (bvadd ?x169 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x304 $x307)))))))
 (let (($x315 (=> (and $x175 (bvule ?x169 (bvsub (bvadd ?x169 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x304 $x307)))))))
 (let (($x122 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x94 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x297 (_ bv1 32))) (or false (or false (and true (or $x113 $x122)))))))
 (let (($x231 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x297 (_ bv1 32)))) (or false (or false (and true (or $x113 $x122)))))))
 (let (($x189 (and $x231 $x315)))
 (let (($x593 (and $x189 $x592)))
 (let (($x142 (=> $x593 $x671)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3089X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3084X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x648 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x656 (concat ?x648 (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv4 32))))))
 (let ((?x653 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x651 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3089X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x649 (concat ?x651 (concat ?x653 ?x656))))
 (let (($x652 (= ?x649 ?x649)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x441 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x354 (bvuge ?x441 (_ bv1 32))))
 (let (($x655 (=> $x354 $x652)))
 (let ((?x644 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3089X))))
 (let ((?x637 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv2 32))) ?x644)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3089X (_ bv3 32))) ?x637)))
 (let (($x642 (= ?x639 ?x639)))
 (let (($x645 (=> $x354 $x642)))
 (let ((?x169 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x170))))
 (let (($x614 (= (_ bv0 32) ?x149)))
 (let ((?x596 (ite $x614 (_ bv0 32) (_ bv1 32))))
 (let (($x599 (bvuge ?x596 (_ bv1 32))))
 (let (($x662 (= $x354 $x599)))
 (let (($x308 (= false false)))
 (let (($x355 (= ?x441 (_ bv0 32))))
 (let (($x633 (=> $x355 $x308)))
 (let (($x608 (= ?x596 (_ bv0 32))))
 (let (($x661 (= $x355 $x608)))
 (let (($x632 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x149)))
 (let (($x667 (and (and (and (and (and $x632 $x661) $x633) $x662) $x645) $x655)))
 (let ((?x601 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x610 (concat ?x601 (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv4 32))))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x620 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3084X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x624 (concat ?x620 (concat ?x622 ?x610))))
 (let (($x625 (= ?x624 ?x624)))
 (let (($x280 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x180 (ite $x280 (_ bv0 32) (_ bv1 32))))
 (let (($x31 (bvuge ?x180 (_ bv1 32))))
 (let (($x630 (=> $x31 $x625)))
 (let ((?x600 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3084X))))
 (let ((?x602 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv2 32))) ?x600)))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3084X (_ bv3 32))) ?x602)))
 (let (($x621 (= ?x613 ?x613)))
 (let (($x611 (=> $x31 $x621)))
 (let (($x628 (= $x31 $x599)))
 (let (($x38 (= ?x180 (_ bv0 32))))
 (let (($x609 (= $x38 $x608)))
 (let (($x85 (and (and (and (=> $x38 $x308) (= input.dst.llvm-%l ?x149)) $x609) $x628)))
 (let (($x96 (and (and $x85 $x611) $x630)))
 (let (($x594 (not true)))
 (let (($x669 (or (or $x594 $x96) $x667)))
 (let (($x615 (= true true)))
 (let (($x670 (and $x615 $x669)))
 (let (($x671 (= $x670 true)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x174 (concat ?x78 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x288 (concat ?x147 (concat ?x161 ?x174))))
 (let ((?x305 (bvadd ?x288 (_ bv4 32))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem ?x305))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv2 32))) ?x191))))
 (let ((?x263 (bvadd ?x100 (_ bv4 32))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x248))))
 (let ((?x242 (bvadd ?x233 (_ bv4 32))))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x341))))
 (let (($x298 (= (_ bv0 32) ?x337)))
 (let ((?x291 (ite $x298 (_ bv0 32) (_ bv1 32))))
 (let (($x209 (= ?x291 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x555 (= $x51 $x209)))
 (let (($x430 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x358 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x359 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x465 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x372 (and $x465 $x359)))
 (let (($x260 (and $x372 $x358)))
 (let (($x453 (and $x260 $x430)))
 (let (($x557 (=> $x453 $x555)))
 (let (($x357 (bvuge ?x291 (_ bv1 32))))
 (let (($x496 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x556 (= $x496 $x357)))
 (let (($x578 (=> $x453 $x556)))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x482))))
 (let (($x558 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x40)))
 (let (($x579 (=> $x453 $x558)))
 (let (($x446 (= (_ bv0 32) ?x233)))
 (let ((?x202 (ite $x446 (_ bv0 32) (_ bv1 32))))
 (let (($x243 (bvuge ?x202 (_ bv1 32))))
 (let (($x581 (= $x430 $x243)))
 (let (($x582 (=> $x260 $x581)))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x294))))
 (let (($x589 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x35)))
 (let (($x577 (=> $x260 $x589)))
 (let (($x332 (= ?x202 (_ bv0 32))))
 (let (($x412 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x553 (= $x412 $x332)))
 (let (($x554 (=> $x260 $x553)))
 (let (($x197 (and $x453 $x51)))
 (let (($x146 (=> $x197 $x308)))
 (let (($x405 (and $x260 $x412)))
 (let (($x413 (=> $x405 $x308)))
 (let (($x378 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x415 (and $x372 $x378)))
 (let (($x492 (=> $x415 $x308)))
 (let (($x361 (= (_ bv0 32) ?x100)))
 (let ((?x101 (ite $x361 (_ bv0 32) (_ bv1 32))))
 (let (($x244 (= ?x101 (_ bv0 32))))
 (let (($x576 (= $x378 $x244)))
 (let (($x588 (=> $x372 $x576)))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (let (($x551 (= $x358 $x22)))
 (let (($x552 (=> $x372 $x551)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x207))))
 (let (($x570 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x289)))
 (let (($x575 (=> $x372 $x570)))
 (let (($x229 (= (_ bv0 32) ?x288)))
 (let ((?x204 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x377 (bvuge ?x204 (_ bv1 32))))
 (let (($x550 (= $x359 $x377)))
 (let (($x574 (=> $x465 $x550)))
 (let (($x323 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x334 (and $x465 $x323)))
 (let (($x346 (=> $x334 $x308)))
 (let (($x158 (= ?x204 (_ bv0 32))))
 (let (($x573 (= $x323 $x158)))
 (let (($x549 (=> $x465 $x573)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x306)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x91)))
 (let (($x547 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x139)))
 (let (($x548 (=> $x465 $x547)))
 (let (($x478 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x351 (=> $x478 $x308)))
 (let (($x590 (and (and (and (and (and (= $x478 $x38) (= $x465 $x31)) $x351) $x548) $x549) $x346)))
 (let (($x584 (and (and (and (and (and (and $x590 $x574) $x575) $x552) $x588) $x492) $x413)))
 (let (($x587 (and (and (and (and (and (and $x584 $x146) $x554) $x577) $x582) $x579) $x578)))
 (let (($x569 (and $x587 $x557)))
 (let (($x591 (= $x569 true)))
 (let ((?x297 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv1 32))) (select input.dst.llvm-mem ?x297))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x297 (_ bv2 32))) ?x178))))
 (let ((?x348 (bvadd ?x62 (_ bv4 32))))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x401))))
 (let ((?x388 (bvadd ?x363 (_ bv4 32))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ?x388 (_ bv1 32))) (select input.dst.llvm-mem ?x388))))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd ?x388 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x388 (_ bv2 32))) ?x407))))
 (let ((?x485 (bvadd ?x494 (_ bv4 32))))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem ?x485))))
 (let ((?x438 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv2 32))) ?x429))))
 (let (($x495 (= (_ bv0 32) ?x438)))
 (let ((?x456 (ite $x495 (_ bv0 32) (_ bv1 32))))
 (let (($x427 (= ?x456 (_ bv0 32))))
 (let (($x34 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x534 (= $x34 $x427)))
 (let (($x345 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x343 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x287 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x5 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x52 (and $x5 $x287)))
 (let (($x24 (and $x52 $x343)))
 (let (($x331 (and $x24 $x345)))
 (let (($x531 (=> $x331 $x534)))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x494 (_ bv1 32))) (select input.dst.llvm-mem ?x494))))
 (let ((?x472 (concat (select input.dst.llvm-mem (bvadd ?x494 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x494 (_ bv2 32))) ?x409))))
 (let (($x505 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x472)))
 (let (($x527 (=> $x331 $x505)))
 (let (($x426 (bvuge ?x456 (_ bv1 32))))
 (let (($x471 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x519 (= $x471 $x426)))
 (let (($x530 (=> $x331 $x519)))
 (let (($x398 (= (_ bv0 32) ?x494)))
 (let ((?x452 (ite $x398 (_ bv0 32) (_ bv1 32))))
 (let (($x434 (bvuge ?x452 (_ bv1 32))))
 (let (($x504 (= $x345 $x434)))
 (let (($x533 (=> $x24 $x504)))
 (let (($x393 (= ?x452 (_ bv0 32))))
 (let (($x155 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x529 (= $x155 $x393)))
 (let (($x121 (=> $x24 $x529)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x363 (_ bv1 32))) (select input.dst.llvm-mem ?x363))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x363 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x363 (_ bv2 32))) ?x279))))
 (let (($x535 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x390)))
 (let (($x532 (=> $x24 $x535)))
 (let (($x400 (= (_ bv0 32) ?x363)))
 (let ((?x382 (ite $x400 (_ bv0 32) (_ bv1 32))))
 (let (($x450 (bvuge ?x382 (_ bv1 32))))
 (let (($x526 (= $x343 $x450)))
 (let (($x503 (=> $x52 $x526)))
 (let (($x380 (= ?x382 (_ bv0 32))))
 (let (($x58 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x502 (= $x58 $x380)))
 (let (($x518 (=> $x52 $x502)))
 (let ((?x500 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x500))))
 (let (($x542 (= input.spec-%var-l-1.2.1.2.0 ?x89)))
 (let (($x523 (=> $x52 $x542)))
 (let (($x18 (= (_ bv0 32) ?x62)))
 (let ((?x270 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x385 (bvuge ?x270 (_ bv1 32))))
 (let (($x517 (= $x287 $x385)))
 (let (($x537 (=> $x5 $x517)))
 (let (($x448 (= ?x270 (_ bv0 32))))
 (let (($x99 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x516 (= $x99 $x448)))
 (let (($x520 (=> $x5 $x516)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x468 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x23 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x321 (concat (select input.dst.llvm-mem ?x23) (concat ?x468 (concat ?x27 ?x129)))))
 (let (($x513 (= input.spec-%var-l-1.2.0 ?x321)))
 (let (($x541 (=> $x5 $x513)))
 (let (($x510 (= $x5 $x354)))
 (let (($x30 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x522 (= $x30 $x355)))
 (let (($x115 (and $x331 $x34)))
 (let (($x342 (=> $x115 $x308)))
 (let (($x274 (and $x24 $x155)))
 (let (($x69 (=> $x274 $x308)))
 (let (($x445 (and $x52 $x58)))
 (let (($x271 (=> $x445 $x308)))
 (let (($x514 (and (and (and (=> $x30 $x308) (=> (and $x5 $x99) $x308)) $x271) $x69)))
 (let (($x538 (and (and (and (and (and (and $x514 $x342) $x522) $x510) $x541) $x520) $x537)))
 (let (($x509 (and (and (and (and (and (and $x538 $x523) $x518) $x503) $x532) $x121) $x533)))
 (let (($x540 (and (and (and $x509 $x530) $x527) $x531)))
 (let (($x545 (= $x540 true)))
 (let (($x102 (= $x496 $x426)))
 (let (($x459 (=> $x453 $x102)))
 (let (($x455 (= $x51 $x427)))
 (let (($x428 (=> $x453 $x455)))
 (let (($x419 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x472)))
 (let (($x435 (=> $x453 $x419)))
 (let (($x104 (= $x430 $x434)))
 (let (($x417 (=> $x260 $x104)))
 (let (($x414 (= $x412 $x393)))
 (let (($x410 (=> $x260 $x414)))
 (let (($x403 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x390)))
 (let (($x451 (=> $x260 $x403)))
 (let (($x490 (= $x378 $x380)))
 (let (($x392 (=> $x372 $x490)))
 (let (($x362 (= $x358 $x450)))
 (let (($x365 (=> $x372 $x362)))
 (let (($x360 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x89)))
 (let (($x396 (=> $x372 $x360)))
 (let (($x88 (= $x359 $x385)))
 (let (($x350 (=> $x465 $x88)))
 (let (($x371 (= $x323 $x448)))
 (let (($x235 (=> $x465 $x371)))
 (let (($x374 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x321)))
 (let (($x319 (=> $x465 $x374)))
 (let (($x454 (and (and (and (and (and (= $x478 $x355) (= $x465 $x354)) $x351) $x346) $x319) $x235)))
 (let (($x462 (and (and (and (and (and (and $x454 $x350) $x396) $x365) $x392) $x451) $x492)))
 (let (($x464 (and (and (and (and (and (and $x462 $x410) $x413) $x417) $x435) $x146) $x428)))
 (let (($x497 (and $x464 $x459)))
 (let (($x525 (= $x497 true)))
 (let (($x309 (= $x471 $x357)))
 (let (($x339 (=> $x331 $x309)))
 (let (($x475 (= $x34 $x209)))
 (let (($x328 (=> $x331 $x475)))
 (let (($x188 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x40)))
 (let (($x379 (=> $x331 $x188)))
 (let (($x258 (= $x345 $x243)))
 (let (($x302 (=> $x24 $x258)))
 (let (($x316 (= $x155 $x332)))
 (let (($x25 (=> $x24 $x316)))
 (let (($x84 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x35)))
 (let (($x284 (=> $x24 $x84)))
 (let (($x241 (= $x343 $x22)))
 (let (($x232 (=> $x52 $x241)))
 (let (($x14 (= $x58 $x244)))
 (let (($x200 (=> $x52 $x14)))
 (let (($x157 (= input.spec-%var-l-1.2.1.2.0 ?x289)))
 (let (($x9 (=> $x52 $x157)))
 (let (($x269 (= $x287 $x377)))
 (let (($x28 (=> $x5 $x269)))
 (let (($x46 (and $x5 $x99)))
 (let (($x47 (=> $x46 $x308)))
 (let (($x43 (= $x99 $x158)))
 (let (($x173 (=> $x5 $x43)))
 (let (($x45 (= input.spec-%var-l-1.2.0 ?x139)))
 (let (($x145 (=> $x5 $x45)))
 (let (($x344 (and (and (and (and (= $x30 $x38) (= $x5 $x31)) (=> $x30 $x308)) $x145) $x173)))
 (let (($x221 (and (and (and (and (and (and $x344 $x47) $x28) $x9) $x200) $x232) $x271)))
 (let (($x275 (and (and (and (and (and (and $x221 $x284) $x25) $x69) $x302) $x379) $x342)))
 (let (($x97 (and (and $x275 $x328) $x339)))
 (let (($x340 (= $x97 true)))
 (let ((?x42 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x230 (= (_ bv0 3) ?x42)))
 (let (($x256 (= $x230 true)))
 (let (($x366 (= $x256 true)))
 (let (($x206 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x224 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x117 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x224) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x224))))
 (let (($x203 (and true $x117)))
 (let (($x92 (and $x117 $x203)))
 (let (($x375 (= (bvand ?x149 (_ bv4294967288 32)) ?x149)))
 (let (($x114 (= (bvand ?x169 (_ bv4294967292 32)) ?x169)))
 (let (($x290 (and $x114 $x375)))
 (let (($x131 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x169 (bvsub ?x169 (_ bv4 32))) (bvult ?x169 (bvsub ?x169 (_ bv4 32))))))
 (let (($x167 (and (and (and (and (and $x203 $x131) $x114) $x290) $x92) $x206)))
 (let (($x135 (= true $x167)))
 (let (($x175 (not $x136)))
 (let (($x57 (=> $x175 $x135)))
 (let (($x26 (= $x57 true)))
 (let (($x184 (= $x26 true)))
 (let (($x176 (= $x184 true)))
 (let (($x195 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x228 (= $x195 true)))
 (let (($x225 (= $x228 true)))
 (let (($x268 (= $x225 true)))
 (let (($x123 (= $x175 true)))
 (let (($x186 (= $x123 true)))
 (let (($x50 (= $x186 true)))
 (let (($x54 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x63 (= $x54 true)))
 (let (($x7 (= $x63 true)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x219 (= (_ bv0 32) ?x250)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (and $x66 $x201)))
 (let (($x303 (and $x301 $x219)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x107 $x303)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x311 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x82)))))))
 (let (($x134 (and $x311 $x154)))
 (let (($x166 (= $x134 true)))
 (let (($x106 (= $x166 true)))
 (let (($x87 (= $x106 true)))
 (let (($x156 (and $x87 $x7)))
 (let (($x292 (and $x156 $x50)))
 (let (($x95 (and $x292 $x268)))
 (let (($x19 (and $x95 $x176)))
 (let (($x116 (and $x19 $x366)))
 (let (($x352 (and $x116 $x340)))
 (let (($x521 (and $x352 $x525)))
 (let (($x546 (and $x521 $x545)))
 (let (($x623 (and $x546 $x591)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x592 (and $x137 $x623)))
 (let (($x307 (bvugt ?x169 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x169 (_ bv3 32))))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x238 (=> (bvule ?x169 (bvsub (bvadd ?x169 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x304 $x307)))))))
 (let (($x315 (=> (and $x175 (bvule ?x169 (bvsub (bvadd ?x169 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x304 $x307)))))))
 (let (($x122 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x94 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x297 (_ bv1 32))) (or false (or false (and true (or $x113 $x122)))))))
 (let (($x231 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x297 (_ bv1 32)))) (or false (or false (and true (or $x113 $x122)))))))
 (let (($x189 (and $x231 $x315)))
 (let (($x593 (and $x189 $x592)))
 (let (($x142 (=> $x593 $x671)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var3084X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3089X () (_ BitVec 32)
    #x00000000)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000004) #x00
    (ite (= x!0 #x01010105) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x01010108) #x00
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x01010107) #x00
    (ite (= x!0 #x01010101) #x00
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x0000000c) #x00
    (ite (= x!0 #x80000003) #x00
    (ite (= x!0 #x00000004) #x01
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x80000006) #x00
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x01010106) #x00
    (ite (= x!0 #x80000007) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x01010104) #x00
    (ite (= x!0 #x80000005) #x00
    (ite (= x!0 #x80000001) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x80000002) #x00
    (ite (= x!0 #x0000000d) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x80000000) #x00
    (ite (= x!0 #x01010103) #x00
    (ite (= x!0 #x01010102) #x00
    (ite (= x!0 #x00000009) #x00
      #x00)))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.ind-%var3084X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3089X () (_ BitVec 32)
    #x00000000)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffff0) #x00
    (ite (= x!0 #xfffffff2) #x00
    (ite (= x!0 #xfffffff3) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #xffffffe8) #xff
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #xffffffe6) #xf8
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #xffffffe9) #xff
    (ite (= x!0 #x00000006) #xff
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #xffffffe4) #x01
    (ite (= x!0 #xfffffff7) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xfffffff4) #x00
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #xfffffffd) #x00
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #xffffffe7) #xff
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #xfffffff1) #x00
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #xfffffff6) #x00
    (ite (= x!0 #x00000004) #xe2
    (ite (= x!0 #xffffffe2) #x00
    (ite (= x!0 #x00000007) #xff
    (ite (= x!0 #xffffffe5) #x00
    (ite (= x!0 #xfffffff5) #x00
    (ite (= x!0 #xffffffe3) #x00
      #x00)))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 115
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3272X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3267X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x24 (concat ?x221 (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv4 32))))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x240 (concat ?x317 (concat ?x68 ?x24))))
 (let (($x285 (= ?x240 ?x240)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x126 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (bvuge ?x126 (_ bv1 32))))
 (let (($x29 (=> $x253 $x285)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3272X))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv2 32))) ?x101)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv3 32))) ?x200)))
 (let (($x241 (= ?x22 ?x22)))
 (let (($x232 (=> $x253 $x241)))
 (let ((?x165 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x48))))
 (let (($x182 (= (_ bv0 32) ?x119)))
 (let ((?x288 (ite $x182 (_ bv0 32) (_ bv1 32))))
 (let (($x158 (bvuge ?x288 (_ bv1 32))))
 (let (($x247 (= $x253 $x158)))
 (let (($x78 (= false false)))
 (let (($x10 (= ?x126 (_ bv0 32))))
 (let (($x278 (=> $x10 $x78)))
 (let (($x229 (= ?x288 (_ bv0 32))))
 (let (($x110 (= $x10 $x229)))
 (let (($x443 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x119)))
 (let (($x284 (and (and (and (and (and $x443 $x110) $x278) $x247) $x232) $x29)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x217 (concat ?x218 (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv4 32))))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x9 (concat ?x157 (concat ?x207 ?x217))))
 (let (($x325 (= ?x9 ?x9)))
 (let (($x237 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x5 (ite $x237 (_ bv0 32) (_ bv1 32))))
 (let (($x308 (bvuge ?x5 (_ bv1 32))))
 (let (($x296 (=> $x308 $x325)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3267X))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv2 32))) ?x353)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv3 32))) ?x269)))
 (let (($x299 (= ?x52 ?x52)))
 (let (($x152 (=> $x308 $x299)))
 (let (($x43 (= $x308 $x158)))
 (let (($x31 (= ?x5 (_ bv0 32))))
 (let (($x204 (= $x31 $x229)))
 (let (($x98 (and (and (and (=> $x31 $x78) (= input.dst.llvm-%l ?x119)) $x204) $x43)))
 (let (($x266 (and (and $x98 $x152) $x296)))
 (let (($x168 (not true)))
 (let (($x246 (or (or $x168 $x266) $x284)))
 (let (($x161 (= true true)))
 (let (($x155 (and $x161 $x246)))
 (let (($x263 (= $x155 true)))
 (let (($x141 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x61 (= $x141 $x308)))
 (let (($x45 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x145 (= $x45 $x31)))
 (let (($x99 (and $x145 $x61)))
 (let (($x320 (= $x99 true)))
 (let (($x8 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x39 (= $x8 $x253)))
 (let (($x180 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x214 (= $x180 $x10)))
 (let (($x312 (and $x214 $x39)))
 (let (($x306 (= $x312 true)))
 (let (($x183 (= $x8 $x308)))
 (let (($x64 (= $x180 $x31)))
 (let (($x93 (and $x64 $x183)))
 (let (($x76 (= $x93 true)))
 (let ((?x366 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x116 (= (_ bv0 3) ?x366)))
 (let (($x75 (= $x116 true)))
 (let (($x30 (= $x75 true)))
 (let (($x132 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x356 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x153) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x153))))
 (let (($x193 (and true $x356)))
 (let (($x92 (and $x356 $x193)))
 (let (($x290 (= (bvand ?x119 (_ bv4294967288 32)) ?x119)))
 (let (($x179 (= (bvand ?x165 (_ bv4294967292 32)) ?x165)))
 (let (($x148 (and $x179 $x290)))
 (let (($x109 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x165 (bvsub ?x165 (_ bv4 32))) (bvult ?x165 (bvsub ?x165 (_ bv4 32))))))
 (let (($x26 (and (and (and (and (and $x193 $x109) $x179) $x148) $x92) $x132)))
 (let (($x184 (= true $x26)))
 (let (($x175 (not $x136)))
 (let (($x176 (=> $x175 $x184)))
 (let (($x19 (= $x176 true)))
 (let (($x208 (= $x19 true)))
 (let (($x42 (= $x208 true)))
 (let (($x268 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x95 (= $x268 true)))
 (let (($x81 (= $x95 true)))
 (let (($x224 (= $x81 true)))
 (let (($x292 (= $x175 true)))
 (let (($x259 (= $x292 true)))
 (let (($x195 (= $x259 true)))
 (let (($x156 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x123 (= $x156 true)))
 (let (($x186 (= $x123 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x154)))
 (let ((?x250 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x250)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (and $x301 $x219)))
 (let (($x166 (and $x303 $x134)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x33 $x166)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x77)))))))
 (let (($x87 (and $x201 $x106)))
 (let (($x185 (= $x87 true)))
 (let (($x54 (= $x185 true)))
 (let (($x63 (= $x54 true)))
 (let (($x50 (and $x63 $x186)))
 (let (($x228 (and $x50 $x195)))
 (let (($x49 (and $x228 $x224)))
 (let (($x230 (and $x49 $x42)))
 (let (($x181 (and $x230 $x30)))
 (let (($x276 (and $x181 $x76)))
 (let (($x91 (and $x276 $x306)))
 (let (($x90 (and $x91 $x320)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x147 (and $x105 $x90)))
 (let (($x194 (bvugt ?x165 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x165 (_ bv3 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x137 (=> (bvule ?x165 (bvsub (bvadd ?x165 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x194)))))))
 (let (($x55 (=> (and $x175 (bvule ?x165 (bvsub (bvadd ?x165 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x37 $x194)))))))
 (let (($x234 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x196 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x293 (=> $x196 (or false (or false (and true (or $x261 $x234)))))))
 (let (($x177 (=> (and $x175 $x196) (or false (or false (and true (or $x261 $x234)))))))
 (let (($x13 (and $x177 $x55)))
 (let (($x16 (and $x13 $x147)))
 (let (($x12 (=> $x16 $x263)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3272X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3267X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x24 (concat ?x221 (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv4 32))))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x240 (concat ?x317 (concat ?x68 ?x24))))
 (let (($x285 (= ?x240 ?x240)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x126 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (bvuge ?x126 (_ bv1 32))))
 (let (($x29 (=> $x253 $x285)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3272X))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv2 32))) ?x101)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv3 32))) ?x200)))
 (let (($x241 (= ?x22 ?x22)))
 (let (($x232 (=> $x253 $x241)))
 (let ((?x165 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x48))))
 (let (($x182 (= (_ bv0 32) ?x119)))
 (let ((?x288 (ite $x182 (_ bv0 32) (_ bv1 32))))
 (let (($x158 (bvuge ?x288 (_ bv1 32))))
 (let (($x247 (= $x253 $x158)))
 (let (($x78 (= false false)))
 (let (($x10 (= ?x126 (_ bv0 32))))
 (let (($x278 (=> $x10 $x78)))
 (let (($x229 (= ?x288 (_ bv0 32))))
 (let (($x110 (= $x10 $x229)))
 (let (($x443 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x119)))
 (let (($x284 (and (and (and (and (and $x443 $x110) $x278) $x247) $x232) $x29)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x217 (concat ?x218 (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv4 32))))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x9 (concat ?x157 (concat ?x207 ?x217))))
 (let (($x325 (= ?x9 ?x9)))
 (let (($x237 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x5 (ite $x237 (_ bv0 32) (_ bv1 32))))
 (let (($x308 (bvuge ?x5 (_ bv1 32))))
 (let (($x296 (=> $x308 $x325)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3267X))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv2 32))) ?x353)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv3 32))) ?x269)))
 (let (($x299 (= ?x52 ?x52)))
 (let (($x152 (=> $x308 $x299)))
 (let (($x43 (= $x308 $x158)))
 (let (($x31 (= ?x5 (_ bv0 32))))
 (let (($x204 (= $x31 $x229)))
 (let (($x98 (and (and (and (=> $x31 $x78) (= input.dst.llvm-%l ?x119)) $x204) $x43)))
 (let (($x266 (and (and $x98 $x152) $x296)))
 (let (($x168 (not true)))
 (let (($x246 (or (or $x168 $x266) $x284)))
 (let (($x161 (= true true)))
 (let (($x155 (and $x161 $x246)))
 (let (($x263 (= $x155 true)))
 (let (($x141 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x61 (= $x141 $x308)))
 (let (($x45 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x145 (= $x45 $x31)))
 (let (($x99 (and $x145 $x61)))
 (let (($x320 (= $x99 true)))
 (let (($x8 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x39 (= $x8 $x253)))
 (let (($x180 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x214 (= $x180 $x10)))
 (let (($x312 (and $x214 $x39)))
 (let (($x306 (= $x312 true)))
 (let (($x183 (= $x8 $x308)))
 (let (($x64 (= $x180 $x31)))
 (let (($x93 (and $x64 $x183)))
 (let (($x76 (= $x93 true)))
 (let ((?x366 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x116 (= (_ bv0 3) ?x366)))
 (let (($x75 (= $x116 true)))
 (let (($x30 (= $x75 true)))
 (let (($x132 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x356 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x153) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x153))))
 (let (($x193 (and true $x356)))
 (let (($x92 (and $x356 $x193)))
 (let (($x290 (= (bvand ?x119 (_ bv4294967288 32)) ?x119)))
 (let (($x179 (= (bvand ?x165 (_ bv4294967292 32)) ?x165)))
 (let (($x148 (and $x179 $x290)))
 (let (($x109 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x165 (bvsub ?x165 (_ bv4 32))) (bvult ?x165 (bvsub ?x165 (_ bv4 32))))))
 (let (($x26 (and (and (and (and (and $x193 $x109) $x179) $x148) $x92) $x132)))
 (let (($x184 (= true $x26)))
 (let (($x175 (not $x136)))
 (let (($x176 (=> $x175 $x184)))
 (let (($x19 (= $x176 true)))
 (let (($x208 (= $x19 true)))
 (let (($x42 (= $x208 true)))
 (let (($x268 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x95 (= $x268 true)))
 (let (($x81 (= $x95 true)))
 (let (($x224 (= $x81 true)))
 (let (($x292 (= $x175 true)))
 (let (($x259 (= $x292 true)))
 (let (($x195 (= $x259 true)))
 (let (($x156 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x123 (= $x156 true)))
 (let (($x186 (= $x123 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x154)))
 (let ((?x250 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x250)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (and $x301 $x219)))
 (let (($x166 (and $x303 $x134)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x33 $x166)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x77)))))))
 (let (($x87 (and $x201 $x106)))
 (let (($x185 (= $x87 true)))
 (let (($x54 (= $x185 true)))
 (let (($x63 (= $x54 true)))
 (let (($x50 (and $x63 $x186)))
 (let (($x228 (and $x50 $x195)))
 (let (($x49 (and $x228 $x224)))
 (let (($x230 (and $x49 $x42)))
 (let (($x181 (and $x230 $x30)))
 (let (($x276 (and $x181 $x76)))
 (let (($x91 (and $x276 $x306)))
 (let (($x90 (and $x91 $x320)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x147 (and $x105 $x90)))
 (let (($x194 (bvugt ?x165 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x165 (_ bv3 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x137 (=> (bvule ?x165 (bvsub (bvadd ?x165 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x194)))))))
 (let (($x55 (=> (and $x175 (bvule ?x165 (bvsub (bvadd ?x165 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x37 $x194)))))))
 (let (($x234 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x196 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x293 (=> $x196 (or false (or false (and true (or $x261 $x234)))))))
 (let (($x177 (=> (and $x175 $x196) (or false (or false (and true (or $x261 $x234)))))))
 (let (($x13 (and $x177 $x55)))
 (let (($x16 (and $x13 $x147)))
 (let (($x12 (=> $x16 $x263)))
 (not $x12)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000870)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x396c48f8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xf8)
                     #x396c48fd
                     #x48)
              #x396c48ff
              #xb9)
       #x396c48fe
       #x6c))
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var3272X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3267X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var3272X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var3267X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 116
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3272X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3267X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x445 (concat ?x221 (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv4 32))))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x284 (concat ?x29 (concat ?x329 ?x445))))
 (let (($x246 (= ?x284 ?x284)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x306 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x306 (_ bv1 32))))
 (let (($x155 (=> $x45 $x246)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3272X))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv2 32))) ?x101)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv3 32))) ?x241)))
 (let (($x273 (= ?x326 ?x326)))
 (let (($x317 (=> $x45 $x273)))
 (let ((?x196 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x245))))
 (let (($x98 (= (_ bv0 32) ?x118)))
 (let ((?x173 (ite $x98 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (bvuge ?x173 (_ bv1 32))))
 (let (($x244 (= $x45 $x287)))
 (let (($x126 (= false false)))
 (let (($x91 (= ?x306 (_ bv0 32))))
 (let (($x343 (=> $x91 $x126)))
 (let (($x28 (= ?x173 (_ bv0 32))))
 (let (($x277 (= $x91 $x28)))
 (let (($x191 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118)))
 (let (($x227 (and (and (and (and (and $x191 $x277) $x343) $x244) $x317) $x155)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x217 (concat ?x124 (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv4 32))))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x367 (concat ?x266 (concat ?x9 ?x217))))
 (let (($x443 (= ?x367 ?x367)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x8 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x76 (bvuge ?x8 (_ bv1 32))))
 (let (($x110 (=> $x76 $x443)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3267X))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv2 32))) ?x269)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv3 32))) ?x152)))
 (let (($x157 (= ?x289 ?x289)))
 (let (($x330 (=> $x76 $x157)))
 (let (($x377 (= $x76 $x287)))
 (let (($x308 (= ?x8 (_ bv0 32))))
 (let (($x327 (= $x308 $x28)))
 (let (($x144 (and (and (and (=> $x308 $x126) (= input.dst.llvm-%l ?x118)) $x327) $x377)))
 (let (($x35 (and (and $x144 $x330) $x110)))
 (let (($x305 (not true)))
 (let (($x440 (or (or $x305 $x35) $x227)))
 (let (($x204 (= true true)))
 (let (($x71 (and $x204 $x440)))
 (let (($x439 (= $x71 true)))
 (let (($x147 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x78 (=> $x147 $x126)))
 (let (($x161 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x168 (= $x161 $x76)))
 (let (($x16 (= $x147 $x308)))
 (let (($x174 (and (and $x16 $x168) $x78)))
 (let (($x58 (= $x174 true)))
 (let (($x93 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x145 (= $x93 $x45)))
 (let (($x5 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x139 (= $x5 $x91)))
 (let (($x10 (=> $x5 $x126)))
 (let (($x61 (and (and $x10 $x139) $x145)))
 (let (($x99 (= $x61 true)))
 (let (($x253 (and (and (= $x5 $x308) (= $x93 $x76)) $x10)))
 (let (($x39 (= $x253 true)))
 (let ((?x30 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x181 (= (_ bv0 3) ?x30)))
 (let (($x280 (= $x181 true)))
 (let (($x180 (= $x280 true)))
 (let (($x226 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x251 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x295 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x251) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x251))))
 (let (($x255 (and true $x295)))
 (let (($x92 (and $x295 $x255)))
 (let (($x148 (= (bvand ?x118 (_ bv4294967288 32)) ?x118)))
 (let (($x127 (= (bvand ?x196 (_ bv4294967292 32)) ?x196)))
 (let (($x135 (and $x127 $x148)))
 (let (($x272 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x196 (bvsub ?x196 (_ bv4 32))) (bvult ?x196 (bvsub ?x196 (_ bv4 32))))))
 (let (($x19 (and (and (and (and (and $x255 $x272) $x127) $x135) $x92) $x226)))
 (let (($x208 (= true $x19)))
 (let (($x175 (not $x136)))
 (let (($x42 (=> $x175 $x208)))
 (let (($x230 (= $x42 true)))
 (let (($x256 (= $x230 true)))
 (let (($x366 (= $x256 true)))
 (let (($x224 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x49 (= $x224 true)))
 (let (($x117 (= $x49 true)))
 (let (($x153 (= $x117 true)))
 (let (($x228 (= $x175 true)))
 (let (($x225 (= $x228 true)))
 (let (($x268 (= $x225 true)))
 (let (($x50 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x292 (= $x50 true)))
 (let (($x259 (= $x292 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x106)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x303 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x303 $x134)))
 (let (($x185 (and $x166 $x87)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x83 $x185)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x219 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x66)))))))
 (let (($x63 (and $x219 $x54)))
 (let (($x7 (= $x63 true)))
 (let (($x156 (= $x7 true)))
 (let (($x123 (= $x156 true)))
 (let (($x195 (and $x123 $x259)))
 (let (($x95 (and $x195 $x268)))
 (let (($x203 (and $x95 $x153)))
 (let (($x116 (and $x203 $x366)))
 (let (($x38 (and $x116 $x180)))
 (let (($x312 (and $x38 $x39)))
 (let (($x320 (and $x312 $x99)))
 (let (($x182 (and $x320 $x58)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x288 (and $x265 $x182)))
 (let (($x315 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x196 (_ bv3 32))))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x105 (=> (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x238 $x315)))))))
 (let (($x215 (=> (and $x175 (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x238 $x315)))))))
 (let (($x231 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x304 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x307 (=> $x304 (or false (or false (and true (or $x94 $x231)))))))
 (let (($x23 (=> (and $x175 $x304) (or false (or false (and true (or $x94 $x231)))))))
 (let (($x130 (and $x23 $x215)))
 (let (($x229 (and $x130 $x288)))
 (let (($x257 (=> $x229 $x439)))
 (not $x257)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3272X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3267X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x445 (concat ?x221 (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv4 32))))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x284 (concat ?x29 (concat ?x329 ?x445))))
 (let (($x246 (= ?x284 ?x284)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x306 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x306 (_ bv1 32))))
 (let (($x155 (=> $x45 $x246)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3272X))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv2 32))) ?x101)))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv3 32))) ?x241)))
 (let (($x273 (= ?x326 ?x326)))
 (let (($x317 (=> $x45 $x273)))
 (let ((?x196 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x245))))
 (let (($x98 (= (_ bv0 32) ?x118)))
 (let ((?x173 (ite $x98 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (bvuge ?x173 (_ bv1 32))))
 (let (($x244 (= $x45 $x287)))
 (let (($x126 (= false false)))
 (let (($x91 (= ?x306 (_ bv0 32))))
 (let (($x343 (=> $x91 $x126)))
 (let (($x28 (= ?x173 (_ bv0 32))))
 (let (($x277 (= $x91 $x28)))
 (let (($x191 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x118)))
 (let (($x227 (and (and (and (and (and $x191 $x277) $x343) $x244) $x317) $x155)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x217 (concat ?x124 (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv4 32))))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x367 (concat ?x266 (concat ?x9 ?x217))))
 (let (($x443 (= ?x367 ?x367)))
 (let (($x64 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x8 (ite $x64 (_ bv0 32) (_ bv1 32))))
 (let (($x76 (bvuge ?x8 (_ bv1 32))))
 (let (($x110 (=> $x76 $x443)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3267X))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv2 32))) ?x269)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv3 32))) ?x152)))
 (let (($x157 (= ?x289 ?x289)))
 (let (($x330 (=> $x76 $x157)))
 (let (($x377 (= $x76 $x287)))
 (let (($x308 (= ?x8 (_ bv0 32))))
 (let (($x327 (= $x308 $x28)))
 (let (($x144 (and (and (and (=> $x308 $x126) (= input.dst.llvm-%l ?x118)) $x327) $x377)))
 (let (($x35 (and (and $x144 $x330) $x110)))
 (let (($x305 (not true)))
 (let (($x440 (or (or $x305 $x35) $x227)))
 (let (($x204 (= true true)))
 (let (($x71 (and $x204 $x440)))
 (let (($x439 (= $x71 true)))
 (let (($x147 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x78 (=> $x147 $x126)))
 (let (($x161 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x168 (= $x161 $x76)))
 (let (($x16 (= $x147 $x308)))
 (let (($x174 (and (and $x16 $x168) $x78)))
 (let (($x58 (= $x174 true)))
 (let (($x93 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x145 (= $x93 $x45)))
 (let (($x5 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x139 (= $x5 $x91)))
 (let (($x10 (=> $x5 $x126)))
 (let (($x61 (and (and $x10 $x139) $x145)))
 (let (($x99 (= $x61 true)))
 (let (($x253 (and (and (= $x5 $x308) (= $x93 $x76)) $x10)))
 (let (($x39 (= $x253 true)))
 (let ((?x30 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x181 (= (_ bv0 3) ?x30)))
 (let (($x280 (= $x181 true)))
 (let (($x180 (= $x280 true)))
 (let (($x226 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x251 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x295 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x251) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x251))))
 (let (($x255 (and true $x295)))
 (let (($x92 (and $x295 $x255)))
 (let (($x148 (= (bvand ?x118 (_ bv4294967288 32)) ?x118)))
 (let (($x127 (= (bvand ?x196 (_ bv4294967292 32)) ?x196)))
 (let (($x135 (and $x127 $x148)))
 (let (($x272 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x196 (bvsub ?x196 (_ bv4 32))) (bvult ?x196 (bvsub ?x196 (_ bv4 32))))))
 (let (($x19 (and (and (and (and (and $x255 $x272) $x127) $x135) $x92) $x226)))
 (let (($x208 (= true $x19)))
 (let (($x175 (not $x136)))
 (let (($x42 (=> $x175 $x208)))
 (let (($x230 (= $x42 true)))
 (let (($x256 (= $x230 true)))
 (let (($x366 (= $x256 true)))
 (let (($x224 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x49 (= $x224 true)))
 (let (($x117 (= $x49 true)))
 (let (($x153 (= $x117 true)))
 (let (($x228 (= $x175 true)))
 (let (($x225 (= $x228 true)))
 (let (($x268 (= $x225 true)))
 (let (($x50 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x292 (= $x50 true)))
 (let (($x259 (= $x292 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x106)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x303 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x303 $x134)))
 (let (($x185 (and $x166 $x87)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x83 $x185)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x219 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x66)))))))
 (let (($x63 (and $x219 $x54)))
 (let (($x7 (= $x63 true)))
 (let (($x156 (= $x7 true)))
 (let (($x123 (= $x156 true)))
 (let (($x195 (and $x123 $x259)))
 (let (($x95 (and $x195 $x268)))
 (let (($x203 (and $x95 $x153)))
 (let (($x116 (and $x203 $x366)))
 (let (($x38 (and $x116 $x180)))
 (let (($x312 (and $x38 $x39)))
 (let (($x320 (and $x312 $x99)))
 (let (($x182 (and $x320 $x58)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x288 (and $x265 $x182)))
 (let (($x315 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x196 (_ bv3 32))))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x105 (=> (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x238 $x315)))))))
 (let (($x215 (=> (and $x175 (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x238 $x315)))))))
 (let (($x231 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x304 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x307 (=> $x304 (or false (or false (and true (or $x94 $x231)))))))
 (let (($x23 (=> (and $x175 $x304) (or false (or false (and true (or $x94 $x231)))))))
 (let (($x130 (and $x23 $x215)))
 (let (($x229 (and $x130 $x288)))
 (let (($x257 (=> $x229 $x439)))
 (not $x257)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_10)
(function @fun_10
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000870)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x396c48f8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xf8)
                     #x396c48fd
                     #x48)
              #x396c48ff
              #xb9)
       #x396c48fe
       #x6c))
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var3272X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3267X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var3272X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4294967284 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var3267X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 117
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3272X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3267X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x480 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x381 (concat ?x480 (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv4 32))))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x403 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x451 (concat ?x403 (concat ?x279 ?x381))))
 (let (($x491 (= ?x451 ?x451)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x74 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x74 (_ bv1 32))))
 (let (($x415 (=> $x29 $x491)))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3272X))))
 (let ((?x490 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv2 32))) ?x460)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv3 32))) ?x490)))
 (let (($x56 (= ?x260 ?x260)))
 (let (($x433 (=> $x29 $x56)))
 (let ((?x304 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem ?x304))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv2 32))) ?x111))))
 (let (($x62 (= (_ bv0 32) ?x375)))
 (let ((?x18 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x371 (bvuge ?x18 (_ bv1 32))))
 (let (($x400 (= $x29 $x371)))
 (let (($x253 (= false false)))
 (let (($x223 (= ?x74 (_ bv0 32))))
 (let (($x363 (=> $x223 $x253)))
 (let (($x270 (= ?x18 (_ bv0 32))))
 (let (($x384 (= $x223 $x270)))
 (let (($x401 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x375)))
 (let (($x388 (and (and (and (and (and $x401 $x384) $x363) $x400) $x433) $x415)))
 (let ((?x402 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x89 (concat ?x402 (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv4 32))))))
 (let ((?x396 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x348 (concat ?x358 (concat ?x396 ?x89))))
 (let (($x408 (= ?x348 ?x348)))
 (let (($x183 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x93 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x126 (bvuge ?x93 (_ bv1 32))))
 (let (($x369 (=> $x126 $x408)))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3267X))))
 (let ((?x499 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv2 32))) ?x350)))
 (let ((?x483 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv3 32))) ?x499)))
 (let (($x383 (= ?x483 ?x483)))
 (let (($x370 (=> $x126 $x383)))
 (let (($x235 (= $x126 $x371)))
 (let (($x76 (= ?x93 (_ bv0 32))))
 (let (($x448 (= $x76 $x270)))
 (let (($x399 (and (and (and (=> $x76 $x253) (= input.dst.llvm-%l ?x375)) $x448) $x235)))
 (let (($x59 (and (and $x399 $x370) $x369)))
 (let (($x112 (not true)))
 (let (($x436 (or (or $x112 $x59) $x388)))
 (let (($x481 (= true true)))
 (let (($x236 (and $x481 $x436)))
 (let (($x397 (= $x236 true)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x182 (concat ?x58 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x43 (concat ?x158 (concat ?x229 ?x182))))
 (let ((?x9 (bvadd ?x43 (_ bv4 32))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x217))))
 (let (($x191 (= (_ bv0 32) ?x267)))
 (let ((?x277 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x263 (= ?x277 (_ bv0 32))))
 (let (($x470 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x468 (= $x470 $x263)))
 (let (($x65 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x309 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x210 (and $x309 $x65)))
 (let (($x171 (=> $x210 $x468)))
 (let (($x79 (bvuge ?x277 (_ bv1 32))))
 (let (($x424 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x103 (= $x424 $x79)))
 (let (($x463 (=> $x210 $x103)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem ?x43))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv2 32))) ?x47))))
 (let (($x323 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x247)))
 (let (($x334 (=> $x210 $x323)))
 (let (($x294 (= (_ bv0 32) ?x43)))
 (let ((?x98 (ite $x294 (_ bv0 32) (_ bv1 32))))
 (let (($x144 (bvuge ?x98 (_ bv1 32))))
 (let (($x458 (= $x65 $x144)))
 (let (($x351 (=> $x309 $x458)))
 (let (($x441 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x465 (and $x309 $x441)))
 (let (($x354 (=> $x465 $x253)))
 (let (($x173 (= ?x98 (_ bv0 32))))
 (let (($x355 (= $x441 $x173)))
 (let (($x444 (=> $x309 $x355)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x141)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x61)))
 (let (($x352 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x90)))
 (let (($x322 (=> $x309 $x352)))
 (let (($x471 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x97 (=> $x471 $x253)))
 (let (($x321 (and (and (and (and (and (= $x471 $x76) (= $x309 $x126)) $x97) $x322) $x444) $x354)))
 (let (($x479 (and (and (and (and $x321 $x351) $x334) $x463) $x171)))
 (let (($x447 (= $x479 true)))
 (let ((?x261 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem ?x261))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv2 32))) ?x347))))
 (let ((?x73 (bvadd ?x233 (_ bv4 32))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x254))))
 (let (($x115 (= (_ bv0 32) ?x34)))
 (let ((?x342 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x342 (_ bv1 32))))
 (let (($x244 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x313 (= $x244 $x198)))
 (let (($x377 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x214 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x20 (and $x214 $x377)))
 (let (($x140 (=> $x20 $x313)))
 (let (($x275 (= ?x342 (_ bv0 32))))
 (let (($x21 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x242 (= $x21 $x275)))
 (let (($x216 (=> $x20 $x242)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x258))))
 (let (($x314 (= input.spec-%var-l-1.2.1.2.0 ?x300)))
 (let (($x282 (=> $x20 $x314)))
 (let (($x446 (= (_ bv0 32) ?x233)))
 (let ((?x202 (ite $x446 (_ bv0 32) (_ bv1 32))))
 (let (($x249 (bvuge ?x202 (_ bv1 32))))
 (let (($x274 (= $x377 $x249)))
 (let (($x69 (=> $x214 $x274)))
 (let (($x332 (= ?x202 (_ bv0 32))))
 (let (($x168 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x316 (= $x168 $x332)))
 (let (($x25 (=> $x214 $x316)))
 (let ((?x329 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x169 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x155 (concat (select input.dst.llvm-mem ?x169) (concat ?x240 (concat ?x221 ?x329)))))
 (let (($x227 (= input.spec-%var-l-1.2.0 ?x155)))
 (let (($x440 (=> $x214 $x227)))
 (let (($x24 (= $x214 $x29)))
 (let (($x8 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x285 (= $x8 $x223)))
 (let (($x222 (and (and (and (=> $x8 $x253) (=> (and $x214 $x168) $x253)) $x285) $x24)))
 (let (($x209 (and (and (and (and (and (and $x222 $x440) $x25) $x69) $x282) $x216) $x140)))
 (let (($x475 (= $x209 true)))
 (let (($x14 (= $x244 $x79)))
 (let (($x232 (=> $x20 $x14)))
 (let (($x343 (= $x21 $x263)))
 (let (($x12 (=> $x20 $x343)))
 (let (($x207 (= input.spec-%var-l-1.2.1.2.0 ?x247)))
 (let (($x296 (=> $x20 $x207)))
 (let (($x46 (= $x377 $x144)))
 (let (($x192 (=> $x214 $x46)))
 (let (($x278 (and $x214 $x168)))
 (let (($x287 (=> $x278 $x253)))
 (let (($x28 (= $x168 $x173)))
 (let (($x327 (=> $x214 $x28)))
 (let (($x147 (= input.spec-%var-l-1.2.0 ?x90)))
 (let (($x16 (=> $x214 $x147)))
 (let (($x361 (and (and (and (and (= $x8 $x76) (= $x214 $x126)) (=> $x8 $x253)) $x16) $x327)))
 (let (($x326 (and (and (and (and (and $x361 $x287) $x192) $x296) $x12) $x232)))
 (let (($x273 (= $x326 true)))
 (let ((?x180 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x38 (= (_ bv0 3) ?x180)))
 (let (($x237 (= $x38 true)))
 (let (($x5 (= $x237 true)))
 (let (($x57 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x131 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x131) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x131))))
 (let (($x206 (and true $x286)))
 (let (($x92 (and $x286 $x206)))
 (let (($x135 (= (bvand ?x375 (_ bv4294967288 32)) ?x375)))
 (let (($x149 (= (bvand ?x304 (_ bv4294967292 32)) ?x304)))
 (let (($x184 (and $x149 $x135)))
 (let (($x167 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x304 (bvsub ?x304 (_ bv4 32))) (bvult ?x304 (bvsub ?x304 (_ bv4 32))))))
 (let (($x230 (and (and (and (and (and $x206 $x167) $x149) $x184) $x92) $x57)))
 (let (($x256 (= true $x230)))
 (let (($x175 (not $x136)))
 (let (($x366 (=> $x175 $x256)))
 (let (($x116 (= $x366 true)))
 (let (($x75 (= $x116 true)))
 (let (($x30 (= $x75 true)))
 (let (($x153 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x203 (= $x153 true)))
 (let (($x356 (= $x203 true)))
 (let (($x251 (= $x356 true)))
 (let (($x95 (= $x175 true)))
 (let (($x81 (= $x95 true)))
 (let (($x224 (= $x81 true)))
 (let (($x195 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x228 (= $x195 true)))
 (let (($x225 (= $x228 true)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x54)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x166 $x87)))
 (let (($x7 (and $x185 $x63)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x107 $x7)))
 (let (($x301 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x301)))))))
 (let (($x123 (and $x134 $x156)))
 (let (($x186 (= $x123 true)))
 (let (($x50 (= $x186 true)))
 (let (($x292 (= $x50 true)))
 (let (($x268 (and $x292 $x225)))
 (let (($x49 (and $x268 $x224)))
 (let (($x193 (and $x49 $x251)))
 (let (($x181 (and $x193 $x30)))
 (let (($x31 (and $x181 $x5)))
 (let (($x317 (and $x31 $x273)))
 (let (($x328 (and $x317 $x475)))
 (let (($x349 (and $x328 $x447)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x143 (and $x311 $x349)))
 (let (($x55 (bvugt ?x304 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x304 (_ bv3 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x265 (=> (bvule ?x304 (bvsub (bvadd ?x304 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x55)))))))
 (let (($x159 (=> (and $x175 (bvule ?x304 (bvsub (bvadd ?x304 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x137 $x55)))))))
 (let (($x177 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x194 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x261 (_ bv1 32))) (or false (or false (and true (or $x293 $x177)))))))
 (let (($x283 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x261 (_ bv1 32)))) (or false (or false (and true (or $x293 $x177)))))))
 (let (($x32 (and $x283 $x159)))
 (let (($x336 (and $x32 $x143)))
 (let (($x394 (=> $x336 $x397)))
 (not $x394))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3272X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3267X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x480 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x381 (concat ?x480 (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv4 32))))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x403 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x451 (concat ?x403 (concat ?x279 ?x381))))
 (let (($x491 (= ?x451 ?x451)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x74 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x29 (bvuge ?x74 (_ bv1 32))))
 (let (($x415 (=> $x29 $x491)))
 (let ((?x460 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3272X))))
 (let ((?x490 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv2 32))) ?x460)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv3 32))) ?x490)))
 (let (($x56 (= ?x260 ?x260)))
 (let (($x433 (=> $x29 $x56)))
 (let ((?x304 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem ?x304))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv2 32))) ?x111))))
 (let (($x62 (= (_ bv0 32) ?x375)))
 (let ((?x18 (ite $x62 (_ bv0 32) (_ bv1 32))))
 (let (($x371 (bvuge ?x18 (_ bv1 32))))
 (let (($x400 (= $x29 $x371)))
 (let (($x253 (= false false)))
 (let (($x223 (= ?x74 (_ bv0 32))))
 (let (($x363 (=> $x223 $x253)))
 (let (($x270 (= ?x18 (_ bv0 32))))
 (let (($x384 (= $x223 $x270)))
 (let (($x401 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x375)))
 (let (($x388 (and (and (and (and (and $x401 $x384) $x363) $x400) $x433) $x415)))
 (let ((?x402 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x89 (concat ?x402 (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv4 32))))))
 (let ((?x396 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x348 (concat ?x358 (concat ?x396 ?x89))))
 (let (($x408 (= ?x348 ?x348)))
 (let (($x183 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x93 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x126 (bvuge ?x93 (_ bv1 32))))
 (let (($x369 (=> $x126 $x408)))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3267X))))
 (let ((?x499 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv2 32))) ?x350)))
 (let ((?x483 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv3 32))) ?x499)))
 (let (($x383 (= ?x483 ?x483)))
 (let (($x370 (=> $x126 $x383)))
 (let (($x235 (= $x126 $x371)))
 (let (($x76 (= ?x93 (_ bv0 32))))
 (let (($x448 (= $x76 $x270)))
 (let (($x399 (and (and (and (=> $x76 $x253) (= input.dst.llvm-%l ?x375)) $x448) $x235)))
 (let (($x59 (and (and $x399 $x370) $x369)))
 (let (($x112 (not true)))
 (let (($x436 (or (or $x112 $x59) $x388)))
 (let (($x481 (= true true)))
 (let (($x236 (and $x481 $x436)))
 (let (($x397 (= $x236 true)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x182 (concat ?x58 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x43 (concat ?x158 (concat ?x229 ?x182))))
 (let ((?x9 (bvadd ?x43 (_ bv4 32))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x217))))
 (let (($x191 (= (_ bv0 32) ?x267)))
 (let ((?x277 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x263 (= ?x277 (_ bv0 32))))
 (let (($x470 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x468 (= $x470 $x263)))
 (let (($x65 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x309 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x210 (and $x309 $x65)))
 (let (($x171 (=> $x210 $x468)))
 (let (($x79 (bvuge ?x277 (_ bv1 32))))
 (let (($x424 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x103 (= $x424 $x79)))
 (let (($x463 (=> $x210 $x103)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem ?x43))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv2 32))) ?x47))))
 (let (($x323 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x247)))
 (let (($x334 (=> $x210 $x323)))
 (let (($x294 (= (_ bv0 32) ?x43)))
 (let ((?x98 (ite $x294 (_ bv0 32) (_ bv1 32))))
 (let (($x144 (bvuge ?x98 (_ bv1 32))))
 (let (($x458 (= $x65 $x144)))
 (let (($x351 (=> $x309 $x458)))
 (let (($x441 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x465 (and $x309 $x441)))
 (let (($x354 (=> $x465 $x253)))
 (let (($x173 (= ?x98 (_ bv0 32))))
 (let (($x355 (= $x441 $x173)))
 (let (($x444 (=> $x309 $x355)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x141)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x61)))
 (let (($x352 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x90)))
 (let (($x322 (=> $x309 $x352)))
 (let (($x471 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x97 (=> $x471 $x253)))
 (let (($x321 (and (and (and (and (and (= $x471 $x76) (= $x309 $x126)) $x97) $x322) $x444) $x354)))
 (let (($x479 (and (and (and (and $x321 $x351) $x334) $x463) $x171)))
 (let (($x447 (= $x479 true)))
 (let ((?x261 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem ?x261))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv2 32))) ?x347))))
 (let ((?x73 (bvadd ?x233 (_ bv4 32))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x254))))
 (let (($x115 (= (_ bv0 32) ?x34)))
 (let ((?x342 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x342 (_ bv1 32))))
 (let (($x244 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x313 (= $x244 $x198)))
 (let (($x377 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x214 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x20 (and $x214 $x377)))
 (let (($x140 (=> $x20 $x313)))
 (let (($x275 (= ?x342 (_ bv0 32))))
 (let (($x21 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x242 (= $x21 $x275)))
 (let (($x216 (=> $x20 $x242)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x258))))
 (let (($x314 (= input.spec-%var-l-1.2.1.2.0 ?x300)))
 (let (($x282 (=> $x20 $x314)))
 (let (($x446 (= (_ bv0 32) ?x233)))
 (let ((?x202 (ite $x446 (_ bv0 32) (_ bv1 32))))
 (let (($x249 (bvuge ?x202 (_ bv1 32))))
 (let (($x274 (= $x377 $x249)))
 (let (($x69 (=> $x214 $x274)))
 (let (($x332 (= ?x202 (_ bv0 32))))
 (let (($x168 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x316 (= $x168 $x332)))
 (let (($x25 (=> $x214 $x316)))
 (let ((?x329 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x169 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x155 (concat (select input.dst.llvm-mem ?x169) (concat ?x240 (concat ?x221 ?x329)))))
 (let (($x227 (= input.spec-%var-l-1.2.0 ?x155)))
 (let (($x440 (=> $x214 $x227)))
 (let (($x24 (= $x214 $x29)))
 (let (($x8 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x285 (= $x8 $x223)))
 (let (($x222 (and (and (and (=> $x8 $x253) (=> (and $x214 $x168) $x253)) $x285) $x24)))
 (let (($x209 (and (and (and (and (and (and $x222 $x440) $x25) $x69) $x282) $x216) $x140)))
 (let (($x475 (= $x209 true)))
 (let (($x14 (= $x244 $x79)))
 (let (($x232 (=> $x20 $x14)))
 (let (($x343 (= $x21 $x263)))
 (let (($x12 (=> $x20 $x343)))
 (let (($x207 (= input.spec-%var-l-1.2.1.2.0 ?x247)))
 (let (($x296 (=> $x20 $x207)))
 (let (($x46 (= $x377 $x144)))
 (let (($x192 (=> $x214 $x46)))
 (let (($x278 (and $x214 $x168)))
 (let (($x287 (=> $x278 $x253)))
 (let (($x28 (= $x168 $x173)))
 (let (($x327 (=> $x214 $x28)))
 (let (($x147 (= input.spec-%var-l-1.2.0 ?x90)))
 (let (($x16 (=> $x214 $x147)))
 (let (($x361 (and (and (and (and (= $x8 $x76) (= $x214 $x126)) (=> $x8 $x253)) $x16) $x327)))
 (let (($x326 (and (and (and (and (and $x361 $x287) $x192) $x296) $x12) $x232)))
 (let (($x273 (= $x326 true)))
 (let ((?x180 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x38 (= (_ bv0 3) ?x180)))
 (let (($x237 (= $x38 true)))
 (let (($x5 (= $x237 true)))
 (let (($x57 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x131 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x286 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x131) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x131))))
 (let (($x206 (and true $x286)))
 (let (($x92 (and $x286 $x206)))
 (let (($x135 (= (bvand ?x375 (_ bv4294967288 32)) ?x375)))
 (let (($x149 (= (bvand ?x304 (_ bv4294967292 32)) ?x304)))
 (let (($x184 (and $x149 $x135)))
 (let (($x167 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x304 (bvsub ?x304 (_ bv4 32))) (bvult ?x304 (bvsub ?x304 (_ bv4 32))))))
 (let (($x230 (and (and (and (and (and $x206 $x167) $x149) $x184) $x92) $x57)))
 (let (($x256 (= true $x230)))
 (let (($x175 (not $x136)))
 (let (($x366 (=> $x175 $x256)))
 (let (($x116 (= $x366 true)))
 (let (($x75 (= $x116 true)))
 (let (($x30 (= $x75 true)))
 (let (($x153 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x203 (= $x153 true)))
 (let (($x356 (= $x203 true)))
 (let (($x251 (= $x356 true)))
 (let (($x95 (= $x175 true)))
 (let (($x81 (= $x95 true)))
 (let (($x224 (= $x81 true)))
 (let (($x195 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x228 (= $x195 true)))
 (let (($x225 (= $x228 true)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x54)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x166 $x87)))
 (let (($x7 (and $x185 $x63)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x107 $x7)))
 (let (($x301 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x301)))))))
 (let (($x123 (and $x134 $x156)))
 (let (($x186 (= $x123 true)))
 (let (($x50 (= $x186 true)))
 (let (($x292 (= $x50 true)))
 (let (($x268 (and $x292 $x225)))
 (let (($x49 (and $x268 $x224)))
 (let (($x193 (and $x49 $x251)))
 (let (($x181 (and $x193 $x30)))
 (let (($x31 (and $x181 $x5)))
 (let (($x317 (and $x31 $x273)))
 (let (($x328 (and $x317 $x475)))
 (let (($x349 (and $x328 $x447)))
 (let (($x311 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x143 (and $x311 $x349)))
 (let (($x55 (bvugt ?x304 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x304 (_ bv3 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x265 (=> (bvule ?x304 (bvsub (bvadd ?x304 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x55)))))))
 (let (($x159 (=> (and $x175 (bvule ?x304 (bvsub (bvadd ?x304 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x137 $x55)))))))
 (let (($x177 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x194 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x261 (_ bv1 32))) (or false (or false (and true (or $x293 $x177)))))))
 (let (($x283 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x261 (_ bv1 32)))) (or false (or false (and true (or $x293 $x177)))))))
 (let (($x32 (and $x283 $x159)))
 (let (($x336 (and $x32 $x143)))
 (let (($x394 (=> $x336 $x397)))
 (not $x394))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var3272X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv4294967280 32))
(define-fun input.ind-%var3267X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4294967292 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x1c040457)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x1c040450)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x40)
                                #x1c04045a
                                #x4d)
                         #x1c04045b
                         #x56)
                  #x1c04045c
                  #x04)))
(let ((a!2 (store (store (store (store a!1 #x1c04045b #x56) #x1c04045d #x04)
                         #x40404047
                         #x4d)
                  #x1c04045e
                  #x1c)))
  (store (store (store (store a!2 #x1c04045a #x4d) #x1c04045c #x04)
                #x1c04045d
                #x04)
         #x1c040453
         #x4d))))
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x4d404040)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x4d404040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var3272X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3267X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 118
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3272X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3267X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x597 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x627 (concat ?x597 (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv4 32))))))
 (let ((?x600 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x621 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x611 (concat ?x621 (concat ?x600 ?x627))))
 (let (($x67 (= ?x611 ?x611)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x355 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x465 (bvuge ?x355 (_ bv1 32))))
 (let (($x612 (=> $x465 $x67)))
 (let ((?x596 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3272X))))
 (let ((?x631 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv2 32))) ?x596)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv3 32))) ?x631)))
 (let (($x626 (= ?x85 ?x85)))
 (let (($x617 (=> $x465 $x626)))
 (let ((?x37 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem ?x37))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv2 32))) ?x239))))
 (let (($x583 (= (_ bv0 32) ?x290)))
 (let ((?x590 (ite $x583 (_ bv0 32) (_ bv1 32))))
 (let (($x561 (bvuge ?x590 (_ bv1 32))))
 (let (($x594 (= $x465 $x561)))
 (let (($x200 (= false false)))
 (let (($x444 (= ?x355 (_ bv0 32))))
 (let (($x615 (=> $x444 $x200)))
 (let (($x550 (= ?x590 (_ bv0 32))))
 (let (($x593 (= $x444 $x550)))
 (let (($x592 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x290)))
 (let (($x607 (and (and (and (and (and $x592 $x593) $x615) $x594) $x617) $x612)))
 (let ((?x564 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x581 (concat ?x564 (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv4 32))))))
 (let ((?x566 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x568 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x556 (concat ?x568 (concat ?x566 ?x581))))
 (let (($x578 (= ?x556 ?x556)))
 (let (($x276 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x214 (ite $x276 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (bvuge ?x214 (_ bv1 32))))
 (let (($x587 (=> $x253 $x578)))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3267X))))
 (let ((?x585 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv2 32))) ?x567)))
 (let ((?x563 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv3 32))) ?x585)))
 (let (($x553 (= ?x563 ?x563)))
 (let (($x554 (=> $x253 $x553)))
 (let (($x570 (= $x253 $x561)))
 (let (($x126 (= ?x214 (_ bv0 32))))
 (let (($x574 (= $x126 $x550)))
 (let (($x569 (and (and (and (=> $x126 $x200) (= input.dst.llvm-%l ?x290)) $x574) $x570)))
 (let (($x623 (and (and $x569 $x554) $x587)))
 (let (($x560 (not true)))
 (let (($x604 (or (or $x560 $x623) $x607)))
 (let (($x548 (= true true)))
 (let (($x610 (and $x548 $x604)))
 (let (($x618 (= $x610 true)))
 (let ((?x288 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x229 (concat ?x288 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x43 (concat ?x204 (concat ?x58 ?x229))))
 (let ((?x296 (bvadd ?x43 (_ bv4 32))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x9))))
 (let ((?x240 (bvadd ?x220 (_ bv4 32))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x68))))
 (let ((?x314 (bvadd ?x248 (_ bv4 32))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem ?x314))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv2 32))) ?x41))))
 (let (($x254 (= (_ bv0 32) ?x60)))
 (let ((?x379 (ite $x254 (_ bv0 32) (_ bv1 32))))
 (let (($x34 (= ?x379 (_ bv0 32))))
 (let (($x524 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x532 (= $x524 $x34)))
 (let (($x513 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x102 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x495 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x467 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x455 (and $x467 $x495)))
 (let (($x536 (and $x455 $x102)))
 (let (($x516 (and $x536 $x513)))
 (let (($x543 (=> $x516 $x532)))
 (let (($x242 (bvuge ?x379 (_ bv1 32))))
 (let (($x503 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x508 (= $x503 $x242)))
 (let (($x535 (=> $x516 $x508)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x324 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x274))))
 (let (($x512 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x324)))
 (let (($x526 (=> $x516 $x512)))
 (let (($x150 (= (_ bv0 32) ?x248)))
 (let ((?x211 (ite $x150 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x211 (_ bv1 32))))
 (let (($x160 (= $x513 $x233)))
 (let (($x502 (=> $x536 $x160)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x317))))
 (let (($x542 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x29)))
 (let (($x523 (=> $x536 $x542)))
 (let (($x297 (= ?x211 (_ bv0 32))))
 (let (($x522 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x517 (= $x522 $x297)))
 (let (($x537 (=> $x536 $x517)))
 (let (($x520 (and $x516 $x524)))
 (let (($x511 (=> $x520 $x200)))
 (let (($x510 (and $x536 $x522)))
 (let (($x515 (=> $x510 $x200)))
 (let (($x525 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x506 (and $x455 $x525)))
 (let (($x514 (=> $x506 $x200)))
 (let (($x218 (= (_ bv0 32) ?x220)))
 (let ((?x217 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x443 (= ?x217 (_ bv0 32))))
 (let (($x521 (= $x525 $x443)))
 (let (($x138 (=> $x455 $x521)))
 (let (($x263 (bvuge ?x217 (_ bv1 32))))
 (let (($x459 (= $x102 $x263)))
 (let (($x497 (=> $x455 $x459)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem ?x43))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv2 32))) ?x157))))
 (let (($x464 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x299)))
 (let (($x496 (=> $x455 $x464)))
 (let (($x294 (= (_ bv0 32) ?x43)))
 (let ((?x98 (ite $x294 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x98 (_ bv1 32))))
 (let (($x456 (= $x495 $x190)))
 (let (($x427 (=> $x467 $x456)))
 (let (($x420 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x432 (and $x467 $x420)))
 (let (($x438 (=> $x432 $x200)))
 (let (($x173 (= ?x98 (_ bv0 32))))
 (let (($x425 (= $x420 $x173)))
 (let (($x429 (=> $x467 $x425)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x91)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x141)))
 (let (($x486 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x147)))
 (let (($x487 (=> $x467 $x486)))
 (let (($x197 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x423 (=> $x197 $x200)))
 (let (($x533 (and (and (and (and (and (= $x197 $x126) (= $x467 $x253)) $x423) $x487) $x429) $x438)))
 (let (($x527 (and (and (and (and (and (and $x533 $x427) $x496) $x497) $x138) $x514) $x515)))
 (let (($x546 (and (and (and (and (and (and $x527 $x511) $x537) $x523) $x502) $x526) $x535)))
 (let (($x571 (and $x546 $x543)))
 (let (($x572 (= $x571 true)))
 (let ((?x94 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x437 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x349 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x437))))
 (let ((?x385 (bvadd ?x349 (_ bv4 32))))
 (let ((?x499 (concat (select input.dst.llvm-mem (bvadd ?x385 (_ bv1 32))) (select input.dst.llvm-mem ?x385))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x385 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x385 (_ bv2 32))) ?x499))))
 (let ((?x382 (bvadd ?x386 (_ bv4 32))))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem ?x382))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv2 32))) ?x380))))
 (let ((?x213 (bvadd ?x260 (_ bv4 32))))
 (let ((?x406 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem ?x213))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv2 32))) ?x406))))
 (let (($x397 (= (_ bv0 32) ?x236)))
 (let ((?x394 (ite $x397 (_ bv0 32) (_ bv1 32))))
 (let (($x413 (= ?x394 (_ bv0 32))))
 (let (($x258 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x469 (= $x258 $x413)))
 (let (($x163 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x277 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x287 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x84 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x46 (and $x84 $x287)))
 (let (($x79 (and $x46 $x277)))
 (let (($x332 (and $x79 $x163)))
 (let (($x430 (=> $x332 $x469)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x108))))
 (let (($x498 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x410)))
 (let (($x405 (=> $x332 $x498)))
 (let (($x474 (bvuge ?x394 (_ bv1 32))))
 (let (($x275 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x122 (= $x275 $x474)))
 (let (($x162 (=> $x332 $x122)))
 (let (($x56 (= (_ bv0 32) ?x260)))
 (let ((?x433 (ite $x56 (_ bv0 32) (_ bv1 32))))
 (let (($x403 (bvuge ?x433 (_ bv1 32))))
 (let (($x493 (= $x163 $x403)))
 (let (($x279 (=> $x79 $x493)))
 (let (($x412 (= ?x433 (_ bv0 32))))
 (let (($x445 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x476 (= $x445 $x412)))
 (let (($x390 (=> $x79 $x476)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x386 (_ bv1 32))) (select input.dst.llvm-mem ?x386))))
 (let ((?x462 (concat (select input.dst.llvm-mem (bvadd ?x386 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x386 (_ bv2 32))) ?x59))))
 (let (($x400 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x462)))
 (let (($x80 (=> $x79 $x400)))
 (let (($x358 (= (_ bv0 32) ?x386)))
 (let ((?x360 (ite $x358 (_ bv0 32) (_ bv1 32))))
 (let (($x376 (bvuge ?x360 (_ bv1 32))))
 (let (($x89 (= $x277 $x376)))
 (let (($x488 (=> $x46 $x89)))
 (let (($x396 (= ?x360 (_ bv0 32))))
 (let (($x207 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x500 (= $x207 $x396)))
 (let (($x402 (=> $x46 $x500)))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd ?x349 (_ bv1 32))) (select input.dst.llvm-mem ?x349))))
 (let ((?x484 (concat (select input.dst.llvm-mem (bvadd ?x349 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x349 (_ bv2 32))) ?x368))))
 (let (($x457 (= input.spec-%var-l-1.2.1.2.0 ?x484)))
 (let (($x372 (=> $x46 $x457)))
 (let (($x143 (= (_ bv0 32) ?x349)))
 (let ((?x336 (ite $x143 (_ bv0 32) (_ bv1 32))))
 (let (($x387 (bvuge ?x336 (_ bv1 32))))
 (let (($x389 (= $x287 $x387)))
 (let (($x62 (=> $x84 $x389)))
 (let (($x481 (= ?x336 (_ bv0 32))))
 (let (($x168 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x112 (= $x168 $x481)))
 (let (($x178 (=> $x84 $x112)))
 (let ((?x321 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x458 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x165 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x334 (concat (select input.dst.llvm-mem ?x165) (concat ?x210 (concat ?x458 ?x321)))))
 (let (($x319 (= input.spec-%var-l-1.2.0 ?x334)))
 (let (($x346 (=> $x84 $x319)))
 (let (($x354 (= $x84 $x465)))
 (let (($x93 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x333 (= $x93 $x444)))
 (let (($x331 (and $x332 $x258)))
 (let (($x300 (=> $x331 $x200)))
 (let (($x71 (and $x79 $x445)))
 (let (($x347 (=> $x71 $x200)))
 (let (($x241 (and $x46 $x207)))
 (let (($x244 (=> $x241 $x200)))
 (let (($x417 (and (and (and (=> $x93 $x200) (=> (and $x84 $x168) $x200)) $x244) $x347)))
 (let (($x128 (and (and (and (and (and (and $x417 $x300) $x333) $x354) $x346) $x178) $x62)))
 (let (($x473 (and (and (and (and (and (and $x128 $x372) $x402) $x488) $x80) $x390) $x279)))
 (let (($x435 (and (and (and $x473 $x162) $x405) $x430)))
 (let (($x466 (= $x435 true)))
 (let (($x216 (= $x275 $x242)))
 (let (($x291 (=> $x332 $x216)))
 (let (($x115 (= $x258 $x34)))
 (let (($x342 (=> $x332 $x115)))
 (let (($x345 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x324)))
 (let (($x243 (=> $x332 $x345)))
 (let (($x446 (= $x163 $x233)))
 (let (($x202 (=> $x79 $x446)))
 (let (($x439 (= $x445 $x297)))
 (let (($x257 (=> $x79 $x439)))
 (let (($x24 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x29)))
 (let (($x222 (=> $x79 $x24)))
 (let (($x343 (= $x277 $x263)))
 (let (($x12 (=> $x46 $x343)))
 (let (($x267 (= $x207 $x443)))
 (let (($x191 (=> $x46 $x267)))
 (let (($x47 (= input.spec-%var-l-1.2.1.2.0 ?x299)))
 (let (($x289 (=> $x46 $x47)))
 (let (($x377 (= $x287 $x190)))
 (let (($x144 (=> $x84 $x377)))
 (let (($x361 (and $x84 $x168)))
 (let (($x278 (=> $x361 $x200)))
 (let (($x28 (= $x168 $x173)))
 (let (($x327 (=> $x84 $x28)))
 (let (($x16 (= input.spec-%var-l-1.2.0 ?x147)))
 (let (($x22 (=> $x84 $x16)))
 (let (($x209 (and (and (and (and (= $x93 $x126) (= $x84 $x253)) (=> $x93 $x200)) $x22) $x327)))
 (let (($x309 (and (and (and (and (and (and $x209 $x278) $x144) $x289) $x191) $x12) $x244)))
 (let (($x352 (and (and (and (and (and (and $x309 $x222) $x257) $x347) $x202) $x243) $x300)))
 (let (($x11 (and (and $x352 $x342) $x291)))
 (let (($x478 (= $x11 true)))
 (let ((?x5 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x31 (= (_ bv0 3) ?x5)))
 (let (($x64 (= $x31 true)))
 (let (($x8 (= $x64 true)))
 (let (($x176 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x109 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x109) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x109))))
 (let (($x132 (and true $x114)))
 (let (($x92 (and $x114 $x132)))
 (let (($x184 (= (bvand ?x290 (_ bv4294967288 32)) ?x290)))
 (let (($x119 (= (bvand ?x37 (_ bv4294967292 32)) ?x37)))
 (let (($x208 (and $x119 $x184)))
 (let (($x26 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x37 (bvsub ?x37 (_ bv4 32))) (bvult ?x37 (bvsub ?x37 (_ bv4 32))))))
 (let (($x116 (and (and (and (and (and $x132 $x26) $x119) $x208) $x92) $x176)))
 (let (($x75 (= true $x116)))
 (let (($x175 (not $x136)))
 (let (($x30 (=> $x175 $x75)))
 (let (($x181 (= $x30 true)))
 (let (($x280 (= $x181 true)))
 (let (($x180 (= $x280 true)))
 (let (($x251 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x193 (= $x251 true)))
 (let (($x295 (= $x193 true)))
 (let (($x131 (= $x295 true)))
 (let (($x49 (= $x175 true)))
 (let (($x117 (= $x49 true)))
 (let (($x153 (= $x117 true)))
 (let (($x268 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x95 (= $x268 true)))
 (let (($x81 (= $x95 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x156)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x185 $x63)))
 (let (($x186 (and $x7 $x123)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x33 $x186)))
 (let (($x303 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x303)))))))
 (let (($x292 (and $x87 $x50)))
 (let (($x259 (= $x292 true)))
 (let (($x195 (= $x259 true)))
 (let (($x228 (= $x195 true)))
 (let (($x224 (and $x228 $x81)))
 (let (($x203 (and $x224 $x153)))
 (let (($x255 (and $x203 $x131)))
 (let (($x38 (and $x255 $x180)))
 (let (($x308 (and $x38 $x8)))
 (let (($x441 (and $x308 $x478)))
 (let (($x422 (and $x441 $x466)))
 (let (($x580 (and $x422 $x572)))
 (let (($x201 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x559 (and $x201 $x580)))
 (let (($x215 (bvugt ?x37 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x37 (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x311 (=> (bvule ?x37 (bvsub (bvadd ?x37 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x215)))))))
 (let (($x82 (=> (and $x175 (bvule ?x37 (bvsub (bvadd ?x37 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x105 $x215)))))))
 (let (($x23 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x307 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x315 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x94 (_ bv1 32))) (or false (or false (and true (or $x307 $x23)))))))
 (let (($x310 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x94 (_ bv1 32)))) (or false (or false (and true (or $x307 $x23)))))))
 (let (($x189 (and $x310 $x82)))
 (let (($x547 (and $x189 $x559)))
 (let (($x624 (=> $x547 $x618)))
 (not $x624))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3272X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.ind-%var3267X () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x597 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x627 (concat ?x597 (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv4 32))))))
 (let ((?x600 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x621 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3272X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x611 (concat ?x621 (concat ?x600 ?x627))))
 (let (($x67 (= ?x611 ?x611)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x355 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x465 (bvuge ?x355 (_ bv1 32))))
 (let (($x612 (=> $x465 $x67)))
 (let ((?x596 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3272X))))
 (let ((?x631 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv2 32))) ?x596)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3272X (_ bv3 32))) ?x631)))
 (let (($x626 (= ?x85 ?x85)))
 (let (($x617 (=> $x465 $x626)))
 (let ((?x37 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem ?x37))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv2 32))) ?x239))))
 (let (($x583 (= (_ bv0 32) ?x290)))
 (let ((?x590 (ite $x583 (_ bv0 32) (_ bv1 32))))
 (let (($x561 (bvuge ?x590 (_ bv1 32))))
 (let (($x594 (= $x465 $x561)))
 (let (($x200 (= false false)))
 (let (($x444 (= ?x355 (_ bv0 32))))
 (let (($x615 (=> $x444 $x200)))
 (let (($x550 (= ?x590 (_ bv0 32))))
 (let (($x593 (= $x444 $x550)))
 (let (($x592 (= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x290)))
 (let (($x607 (and (and (and (and (and $x592 $x593) $x615) $x594) $x617) $x612)))
 (let ((?x564 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x581 (concat ?x564 (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv4 32))))))
 (let ((?x566 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x568 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3267X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x556 (concat ?x568 (concat ?x566 ?x581))))
 (let (($x578 (= ?x556 ?x556)))
 (let (($x276 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x214 (ite $x276 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (bvuge ?x214 (_ bv1 32))))
 (let (($x587 (=> $x253 $x578)))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3267X))))
 (let ((?x585 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv2 32))) ?x567)))
 (let ((?x563 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3267X (_ bv3 32))) ?x585)))
 (let (($x553 (= ?x563 ?x563)))
 (let (($x554 (=> $x253 $x553)))
 (let (($x570 (= $x253 $x561)))
 (let (($x126 (= ?x214 (_ bv0 32))))
 (let (($x574 (= $x126 $x550)))
 (let (($x569 (and (and (and (=> $x126 $x200) (= input.dst.llvm-%l ?x290)) $x574) $x570)))
 (let (($x623 (and (and $x569 $x554) $x587)))
 (let (($x560 (not true)))
 (let (($x604 (or (or $x560 $x623) $x607)))
 (let (($x548 (= true true)))
 (let (($x610 (and $x548 $x604)))
 (let (($x618 (= $x610 true)))
 (let ((?x288 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x229 (concat ?x288 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x43 (concat ?x204 (concat ?x58 ?x229))))
 (let ((?x296 (bvadd ?x43 (_ bv4 32))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x9))))
 (let ((?x240 (bvadd ?x220 (_ bv4 32))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x68))))
 (let ((?x314 (bvadd ?x248 (_ bv4 32))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem ?x314))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv2 32))) ?x41))))
 (let (($x254 (= (_ bv0 32) ?x60)))
 (let ((?x379 (ite $x254 (_ bv0 32) (_ bv1 32))))
 (let (($x34 (= ?x379 (_ bv0 32))))
 (let (($x524 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x532 (= $x524 $x34)))
 (let (($x513 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x102 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x495 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x467 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x455 (and $x467 $x495)))
 (let (($x536 (and $x455 $x102)))
 (let (($x516 (and $x536 $x513)))
 (let (($x543 (=> $x516 $x532)))
 (let (($x242 (bvuge ?x379 (_ bv1 32))))
 (let (($x503 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x508 (= $x503 $x242)))
 (let (($x535 (=> $x516 $x508)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x324 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x274))))
 (let (($x512 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 ?x324)))
 (let (($x526 (=> $x516 $x512)))
 (let (($x150 (= (_ bv0 32) ?x248)))
 (let ((?x211 (ite $x150 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x211 (_ bv1 32))))
 (let (($x160 (= $x513 $x233)))
 (let (($x502 (=> $x536 $x160)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x317))))
 (let (($x542 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 ?x29)))
 (let (($x523 (=> $x536 $x542)))
 (let (($x297 (= ?x211 (_ bv0 32))))
 (let (($x522 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x517 (= $x522 $x297)))
 (let (($x537 (=> $x536 $x517)))
 (let (($x520 (and $x516 $x524)))
 (let (($x511 (=> $x520 $x200)))
 (let (($x510 (and $x536 $x522)))
 (let (($x515 (=> $x510 $x200)))
 (let (($x525 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x506 (and $x455 $x525)))
 (let (($x514 (=> $x506 $x200)))
 (let (($x218 (= (_ bv0 32) ?x220)))
 (let ((?x217 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x443 (= ?x217 (_ bv0 32))))
 (let (($x521 (= $x525 $x443)))
 (let (($x138 (=> $x455 $x521)))
 (let (($x263 (bvuge ?x217 (_ bv1 32))))
 (let (($x459 (= $x102 $x263)))
 (let (($x497 (=> $x455 $x459)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem ?x43))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv2 32))) ?x157))))
 (let (($x464 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x299)))
 (let (($x496 (=> $x455 $x464)))
 (let (($x294 (= (_ bv0 32) ?x43)))
 (let ((?x98 (ite $x294 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x98 (_ bv1 32))))
 (let (($x456 (= $x495 $x190)))
 (let (($x427 (=> $x467 $x456)))
 (let (($x420 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x432 (and $x467 $x420)))
 (let (($x438 (=> $x432 $x200)))
 (let (($x173 (= ?x98 (_ bv0 32))))
 (let (($x425 (= $x420 $x173)))
 (let (($x429 (=> $x467 $x425)))
 (let ((?x91 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x91)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x141)))
 (let (($x486 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x147)))
 (let (($x487 (=> $x467 $x486)))
 (let (($x197 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x423 (=> $x197 $x200)))
 (let (($x533 (and (and (and (and (and (= $x197 $x126) (= $x467 $x253)) $x423) $x487) $x429) $x438)))
 (let (($x527 (and (and (and (and (and (and $x533 $x427) $x496) $x497) $x138) $x514) $x515)))
 (let (($x546 (and (and (and (and (and (and $x527 $x511) $x537) $x523) $x502) $x526) $x535)))
 (let (($x571 (and $x546 $x543)))
 (let (($x572 (= $x571 true)))
 (let ((?x94 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x437 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x349 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x437))))
 (let ((?x385 (bvadd ?x349 (_ bv4 32))))
 (let ((?x499 (concat (select input.dst.llvm-mem (bvadd ?x385 (_ bv1 32))) (select input.dst.llvm-mem ?x385))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x385 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x385 (_ bv2 32))) ?x499))))
 (let ((?x382 (bvadd ?x386 (_ bv4 32))))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem ?x382))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv2 32))) ?x380))))
 (let ((?x213 (bvadd ?x260 (_ bv4 32))))
 (let ((?x406 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem ?x213))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv2 32))) ?x406))))
 (let (($x397 (= (_ bv0 32) ?x236)))
 (let ((?x394 (ite $x397 (_ bv0 32) (_ bv1 32))))
 (let (($x413 (= ?x394 (_ bv0 32))))
 (let (($x258 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x469 (= $x258 $x413)))
 (let (($x163 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x277 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x287 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x84 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x46 (and $x84 $x287)))
 (let (($x79 (and $x46 $x277)))
 (let (($x332 (and $x79 $x163)))
 (let (($x430 (=> $x332 $x469)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x108))))
 (let (($x498 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x410)))
 (let (($x405 (=> $x332 $x498)))
 (let (($x474 (bvuge ?x394 (_ bv1 32))))
 (let (($x275 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x122 (= $x275 $x474)))
 (let (($x162 (=> $x332 $x122)))
 (let (($x56 (= (_ bv0 32) ?x260)))
 (let ((?x433 (ite $x56 (_ bv0 32) (_ bv1 32))))
 (let (($x403 (bvuge ?x433 (_ bv1 32))))
 (let (($x493 (= $x163 $x403)))
 (let (($x279 (=> $x79 $x493)))
 (let (($x412 (= ?x433 (_ bv0 32))))
 (let (($x445 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x476 (= $x445 $x412)))
 (let (($x390 (=> $x79 $x476)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x386 (_ bv1 32))) (select input.dst.llvm-mem ?x386))))
 (let ((?x462 (concat (select input.dst.llvm-mem (bvadd ?x386 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x386 (_ bv2 32))) ?x59))))
 (let (($x400 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x462)))
 (let (($x80 (=> $x79 $x400)))
 (let (($x358 (= (_ bv0 32) ?x386)))
 (let ((?x360 (ite $x358 (_ bv0 32) (_ bv1 32))))
 (let (($x376 (bvuge ?x360 (_ bv1 32))))
 (let (($x89 (= $x277 $x376)))
 (let (($x488 (=> $x46 $x89)))
 (let (($x396 (= ?x360 (_ bv0 32))))
 (let (($x207 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x500 (= $x207 $x396)))
 (let (($x402 (=> $x46 $x500)))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd ?x349 (_ bv1 32))) (select input.dst.llvm-mem ?x349))))
 (let ((?x484 (concat (select input.dst.llvm-mem (bvadd ?x349 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x349 (_ bv2 32))) ?x368))))
 (let (($x457 (= input.spec-%var-l-1.2.1.2.0 ?x484)))
 (let (($x372 (=> $x46 $x457)))
 (let (($x143 (= (_ bv0 32) ?x349)))
 (let ((?x336 (ite $x143 (_ bv0 32) (_ bv1 32))))
 (let (($x387 (bvuge ?x336 (_ bv1 32))))
 (let (($x389 (= $x287 $x387)))
 (let (($x62 (=> $x84 $x389)))
 (let (($x481 (= ?x336 (_ bv0 32))))
 (let (($x168 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x112 (= $x168 $x481)))
 (let (($x178 (=> $x84 $x112)))
 (let ((?x321 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x458 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x165 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x334 (concat (select input.dst.llvm-mem ?x165) (concat ?x210 (concat ?x458 ?x321)))))
 (let (($x319 (= input.spec-%var-l-1.2.0 ?x334)))
 (let (($x346 (=> $x84 $x319)))
 (let (($x354 (= $x84 $x465)))
 (let (($x93 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x333 (= $x93 $x444)))
 (let (($x331 (and $x332 $x258)))
 (let (($x300 (=> $x331 $x200)))
 (let (($x71 (and $x79 $x445)))
 (let (($x347 (=> $x71 $x200)))
 (let (($x241 (and $x46 $x207)))
 (let (($x244 (=> $x241 $x200)))
 (let (($x417 (and (and (and (=> $x93 $x200) (=> (and $x84 $x168) $x200)) $x244) $x347)))
 (let (($x128 (and (and (and (and (and (and $x417 $x300) $x333) $x354) $x346) $x178) $x62)))
 (let (($x473 (and (and (and (and (and (and $x128 $x372) $x402) $x488) $x80) $x390) $x279)))
 (let (($x435 (and (and (and $x473 $x162) $x405) $x430)))
 (let (($x466 (= $x435 true)))
 (let (($x216 (= $x275 $x242)))
 (let (($x291 (=> $x332 $x216)))
 (let (($x115 (= $x258 $x34)))
 (let (($x342 (=> $x332 $x115)))
 (let (($x345 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x324)))
 (let (($x243 (=> $x332 $x345)))
 (let (($x446 (= $x163 $x233)))
 (let (($x202 (=> $x79 $x446)))
 (let (($x439 (= $x445 $x297)))
 (let (($x257 (=> $x79 $x439)))
 (let (($x24 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x29)))
 (let (($x222 (=> $x79 $x24)))
 (let (($x343 (= $x277 $x263)))
 (let (($x12 (=> $x46 $x343)))
 (let (($x267 (= $x207 $x443)))
 (let (($x191 (=> $x46 $x267)))
 (let (($x47 (= input.spec-%var-l-1.2.1.2.0 ?x299)))
 (let (($x289 (=> $x46 $x47)))
 (let (($x377 (= $x287 $x190)))
 (let (($x144 (=> $x84 $x377)))
 (let (($x361 (and $x84 $x168)))
 (let (($x278 (=> $x361 $x200)))
 (let (($x28 (= $x168 $x173)))
 (let (($x327 (=> $x84 $x28)))
 (let (($x16 (= input.spec-%var-l-1.2.0 ?x147)))
 (let (($x22 (=> $x84 $x16)))
 (let (($x209 (and (and (and (and (= $x93 $x126) (= $x84 $x253)) (=> $x93 $x200)) $x22) $x327)))
 (let (($x309 (and (and (and (and (and (and $x209 $x278) $x144) $x289) $x191) $x12) $x244)))
 (let (($x352 (and (and (and (and (and (and $x309 $x222) $x257) $x347) $x202) $x243) $x300)))
 (let (($x11 (and (and $x352 $x342) $x291)))
 (let (($x478 (= $x11 true)))
 (let ((?x5 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x31 (= (_ bv0 3) ?x5)))
 (let (($x64 (= $x31 true)))
 (let (($x8 (= $x64 true)))
 (let (($x176 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x109 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x114 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x109) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x109))))
 (let (($x132 (and true $x114)))
 (let (($x92 (and $x114 $x132)))
 (let (($x184 (= (bvand ?x290 (_ bv4294967288 32)) ?x290)))
 (let (($x119 (= (bvand ?x37 (_ bv4294967292 32)) ?x37)))
 (let (($x208 (and $x119 $x184)))
 (let (($x26 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x37 (bvsub ?x37 (_ bv4 32))) (bvult ?x37 (bvsub ?x37 (_ bv4 32))))))
 (let (($x116 (and (and (and (and (and $x132 $x26) $x119) $x208) $x92) $x176)))
 (let (($x75 (= true $x116)))
 (let (($x175 (not $x136)))
 (let (($x30 (=> $x175 $x75)))
 (let (($x181 (= $x30 true)))
 (let (($x280 (= $x181 true)))
 (let (($x180 (= $x280 true)))
 (let (($x251 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x193 (= $x251 true)))
 (let (($x295 (= $x193 true)))
 (let (($x131 (= $x295 true)))
 (let (($x49 (= $x175 true)))
 (let (($x117 (= $x49 true)))
 (let (($x153 (= $x117 true)))
 (let (($x268 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x95 (= $x268 true)))
 (let (($x81 (= $x95 true)))
 (let ((?x156 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x156)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x185 $x63)))
 (let (($x186 (and $x7 $x123)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x33 $x186)))
 (let (($x303 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x303)))))))
 (let (($x292 (and $x87 $x50)))
 (let (($x259 (= $x292 true)))
 (let (($x195 (= $x259 true)))
 (let (($x228 (= $x195 true)))
 (let (($x224 (and $x228 $x81)))
 (let (($x203 (and $x224 $x153)))
 (let (($x255 (and $x203 $x131)))
 (let (($x38 (and $x255 $x180)))
 (let (($x308 (and $x38 $x8)))
 (let (($x441 (and $x308 $x478)))
 (let (($x422 (and $x441 $x466)))
 (let (($x580 (and $x422 $x572)))
 (let (($x201 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x559 (and $x201 $x580)))
 (let (($x215 (bvugt ?x37 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x37 (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x311 (=> (bvule ?x37 (bvsub (bvadd ?x37 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x215)))))))
 (let (($x82 (=> (and $x175 (bvule ?x37 (bvsub (bvadd ?x37 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x105 $x215)))))))
 (let (($x23 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x307 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x315 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x94 (_ bv1 32))) (or false (or false (and true (or $x307 $x23)))))))
 (let (($x310 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x94 (_ bv1 32)))) (or false (or false (and true (or $x307 $x23)))))))
 (let (($x189 (and $x310 $x82)))
 (let (($x547 (and $x189 $x559)))
 (let (($x624 (=> $x547 $x618)))
 (not $x624))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!67))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var3272X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3267X () (_ BitVec 32)
    #x00000000)
  (define-fun k!67 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000010c) #x00
    (ite (= x!0 #x80000005) #x00
    (ite (= x!0 #x00000100) #x01
    (ite (= x!0 #x00000107) #x00
    (ite (= x!0 #x00000106) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x80000000) #x00
    (ite (= x!0 #x00000109) #x00
    (ite (= x!0 #x0000010e) #x00
    (ite (= x!0 #x0000010f) #x80
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x00000101) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x0000000c) #x08
    (ite (= x!0 #x80000007) #x00
    (ite (= x!0 #x0000010a) #x00
    (ite (= x!0 #x00000102) #x00
    (ite (= x!0 #x00000104) #x08
    (ite (= x!0 #x80000001) #x00
    (ite (= x!0 #x00000006) #x01
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x80000002) #x00
    (ite (= x!0 #x80000006) #x00
    (ite (= x!0 #x0000010b) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x0000010d) #x00
    (ite (= x!0 #x80000003) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x00000103) #x00
    (ite (= x!0 #x0000000d) #x01
    (ite (= x!0 #x80000004) #x06
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x00000108) #x01
    (ite (= x!0 #x00000105) #x00
    (ite (= x!0 #x00000009) #x00
      #x00))))))))))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!67))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xfffefefe)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.ind-%var3272X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var3267X () (_ BitVec 32)
    #x00000000)
  (define-fun k!67 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffbfff8) #x00
    (ite (= x!0 #xfffbffff) #xff
    (ite (= x!0 #x00000006) #xfb
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #xfffbfffa) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #x00000001) #x01
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #xfffbfffe) #xff
    (ite (= x!0 #xfffbfffc) #xfc
    (ite (= x!0 #x00000000) #x01
    (ite (= x!0 #xfffbfffd) #xff
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #x00000002) #x01
    (ite (= x!0 #x00000004) #xf8
    (ite (= x!0 #xfffbfffb) #x00
    (ite (= x!0 #x00000007) #xff
    (ite (= x!0 #xfffbfff9) #x00
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #xfffffffd) #x00
      #x00)))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 119
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x44))))
 (let ((?x22 ((_ extract 2 0) ?x148)))
 (let (($x140 (= (_ bv0 3) ?x22)))
 (let (($x161 (= $x140 true)))
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x84 (ite $x10 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x84 (_ bv1 32))))
 (let (($x45 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x145 (= $x45 $x200)))
 (let (($x253 (= ?x84 (_ bv0 32))))
 (let (($x139 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x306 (= $x139 $x253)))
 (let (($x320 (and $x306 $x145)))
 (let (($x91 (= $x320 true)))
 (let (($x198 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x312 (= $x198 $x200)))
 (let (($x214 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x39 (= $x214 $x253)))
 (let (($x313 (and $x39 $x312)))
 (let (($x99 (= $x313 true)))
 (let ((?x8 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x308 (= (_ bv0 3) ?x8)))
 (let (($x183 (= $x308 true)))
 (let (($x93 (= $x183 true)))
 (let (($x42 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x272 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x272) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x272))))
 (let (($x226 (and true $x179)))
 (let (($x92 (and $x179 $x226)))
 (let (($x208 (= (bvand ?x148 (_ bv4294967288 32)) ?x148)))
 (let (($x118 (= (bvand ?x238 (_ bv4294967292 32)) ?x238)))
 (let (($x256 (and $x118 $x208)))
 (let (($x19 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x238 (bvsub ?x238 (_ bv4 32))) (bvult ?x238 (bvsub ?x238 (_ bv4 32))))))
 (let (($x181 (and (and (and (and (and $x226 $x19) $x118) $x256) $x92) $x42)))
 (let (($x280 (= true $x181)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x175 (not $x136)))
 (let (($x180 (=> $x175 $x280)))
 (let (($x38 (= $x180 true)))
 (let (($x237 (= $x38 true)))
 (let (($x5 (= $x237 true)))
 (let (($x131 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x255 (= $x131 true)))
 (let (($x286 (= $x255 true)))
 (let (($x109 (= $x286 true)))
 (let (($x203 (= $x175 true)))
 (let (($x356 (= $x203 true)))
 (let (($x251 (= $x356 true)))
 (let (($x224 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x49 (= $x224 true)))
 (let (($x117 (= $x49 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x292 (= (_ bv0 32) ?x50)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x156)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x7 $x123)))
 (let (($x259 (and $x186 $x292)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (and $x83 $x259)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x166)))))))
 (let (($x228 (and $x63 $x195)))
 (let (($x225 (= $x228 true)))
 (let (($x268 (= $x225 true)))
 (let (($x95 (= $x268 true)))
 (let (($x153 (and $x95 $x117)))
 (let (($x193 (and $x153 $x251)))
 (let (($x206 (and $x193 $x109)))
 (let (($x31 (and $x206 $x5)))
 (let (($x76 (and $x31 $x93)))
 (let (($x61 (and $x76 $x99)))
 (let (($x141 (and $x61 $x91)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x147 (and $x219 $x141)))
 (let (($x159 (bvugt ?x238 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x238 (_ bv3 32))))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x201 (=> (bvule ?x238 (bvsub (bvadd ?x238 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x265 $x159)))))))
 (let (($x77 (=> (and $x175 (bvule ?x238 (bvsub (bvadd ?x238 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x265 $x159)))))))
 (let (($x283 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x137 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x55 (=> $x137 (or false (or false (and true (or $x194 $x283)))))))
 (let (($x169 (=> (and $x175 $x137) (or false (or false (and true (or $x194 $x283)))))))
 (let (($x13 (and $x169 $x77)))
 (let (($x16 (and $x13 $x147)))
 (let (($x168 (=> $x16 $x161)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x44))))
 (let ((?x22 ((_ extract 2 0) ?x148)))
 (let (($x140 (= (_ bv0 3) ?x22)))
 (let (($x161 (= $x140 true)))
 (let (($x10 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x84 (ite $x10 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x84 (_ bv1 32))))
 (let (($x45 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x145 (= $x45 $x200)))
 (let (($x253 (= ?x84 (_ bv0 32))))
 (let (($x139 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x306 (= $x139 $x253)))
 (let (($x320 (and $x306 $x145)))
 (let (($x91 (= $x320 true)))
 (let (($x198 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x312 (= $x198 $x200)))
 (let (($x214 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x39 (= $x214 $x253)))
 (let (($x313 (and $x39 $x312)))
 (let (($x99 (= $x313 true)))
 (let ((?x8 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x308 (= (_ bv0 3) ?x8)))
 (let (($x183 (= $x308 true)))
 (let (($x93 (= $x183 true)))
 (let (($x42 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x272 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x272) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x272))))
 (let (($x226 (and true $x179)))
 (let (($x92 (and $x179 $x226)))
 (let (($x208 (= (bvand ?x148 (_ bv4294967288 32)) ?x148)))
 (let (($x118 (= (bvand ?x238 (_ bv4294967292 32)) ?x238)))
 (let (($x256 (and $x118 $x208)))
 (let (($x19 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x238 (bvsub ?x238 (_ bv4 32))) (bvult ?x238 (bvsub ?x238 (_ bv4 32))))))
 (let (($x181 (and (and (and (and (and $x226 $x19) $x118) $x256) $x92) $x42)))
 (let (($x280 (= true $x181)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x175 (not $x136)))
 (let (($x180 (=> $x175 $x280)))
 (let (($x38 (= $x180 true)))
 (let (($x237 (= $x38 true)))
 (let (($x5 (= $x237 true)))
 (let (($x131 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x255 (= $x131 true)))
 (let (($x286 (= $x255 true)))
 (let (($x109 (= $x286 true)))
 (let (($x203 (= $x175 true)))
 (let (($x356 (= $x203 true)))
 (let (($x251 (= $x356 true)))
 (let (($x224 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x49 (= $x224 true)))
 (let (($x117 (= $x49 true)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x292 (= (_ bv0 32) ?x50)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x156)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x7 $x123)))
 (let (($x259 (and $x186 $x292)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (and $x83 $x259)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x166)))))))
 (let (($x228 (and $x63 $x195)))
 (let (($x225 (= $x228 true)))
 (let (($x268 (= $x225 true)))
 (let (($x95 (= $x268 true)))
 (let (($x153 (and $x95 $x117)))
 (let (($x193 (and $x153 $x251)))
 (let (($x206 (and $x193 $x109)))
 (let (($x31 (and $x206 $x5)))
 (let (($x76 (and $x31 $x93)))
 (let (($x61 (and $x76 $x99)))
 (let (($x141 (and $x61 $x91)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x147 (and $x219 $x141)))
 (let (($x159 (bvugt ?x238 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x238 (_ bv3 32))))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x201 (=> (bvule ?x238 (bvsub (bvadd ?x238 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x265 $x159)))))))
 (let (($x77 (=> (and $x175 (bvule ?x238 (bvsub (bvadd ?x238 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x265 $x159)))))))
 (let (($x283 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x137 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x55 (=> $x137 (or false (or false (and true (or $x194 $x283)))))))
 (let (($x169 (=> (and $x175 $x137) (or false (or false (and true (or $x194 $x283)))))))
 (let (($x13 (and $x169 $x77)))
 (let (($x16 (and $x13 $x147)))
 (let (($x168 (=> $x16 $x161)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 120
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x137 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x151))))
 (let (($x168 (bvule ?x135 (_ bv4294967294 32))))
 (let (($x53 (= $x168 true)))
 (let (($x261 (= $x53 true)))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x198 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x198 (_ bv1 32))))
 (let (($x91 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x141 (= $x91 $x99)))
 (let (($x200 (= ?x198 (_ bv0 32))))
 (let (($x145 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x320 (= $x145 $x200)))
 (let (($x147 (and $x320 $x141)))
 (let (($x16 (= $x147 true)))
 (let (($x313 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x61 (= $x313 $x99)))
 (let (($x84 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x312 (= $x84 $x200)))
 (let (($x90 (and $x312 $x61)))
 (let (($x139 (= $x90 true)))
 (let ((?x93 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x76 (= (_ bv0 3) ?x93)))
 (let (($x276 (= $x76 true)))
 (let (($x214 (= $x276 true)))
 (let (($x366 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x167 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x127 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x167) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x167))))
 (let (($x57 (and true $x127)))
 (let (($x92 (and $x127 $x57)))
 (let (($x256 (= (bvand ?x135 (_ bv4294967288 32)) ?x135)))
 (let (($x375 (= (bvand ?x137 (_ bv4294967292 32)) ?x137)))
 (let (($x75 (and $x375 $x256)))
 (let (($x230 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x137 (bvsub ?x137 (_ bv4 32))) (bvult ?x137 (bvsub ?x137 (_ bv4 32))))))
 (let (($x38 (and (and (and (and (and $x57 $x230) $x375) $x75) $x92) $x366)))
 (let (($x237 (= true $x38)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x175 (not $x136)))
 (let (($x5 (=> $x175 $x237)))
 (let (($x31 (= $x5 true)))
 (let (($x64 (= $x31 true)))
 (let (($x8 (= $x64 true)))
 (let (($x109 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x109 true)))
 (let (($x114 (= $x206 true)))
 (let (($x272 (= $x114 true)))
 (let (($x193 (= $x175 true)))
 (let (($x295 (= $x193 true)))
 (let (($x131 (= $x295 true)))
 (let (($x153 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x203 (= $x153 true)))
 (let (($x356 (= $x203 true)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x195)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (and $x186 $x292)))
 (let (($x225 (and $x259 $x228)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x268 (and $x107 $x225)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x185)))))))
 (let (($x95 (and $x123 $x268)))
 (let (($x81 (= $x95 true)))
 (let (($x224 (= $x81 true)))
 (let (($x49 (= $x224 true)))
 (let (($x251 (and $x49 $x356)))
 (let (($x255 (and $x251 $x131)))
 (let (($x132 (and $x255 $x272)))
 (let (($x308 (and $x132 $x8)))
 (let (($x126 (and $x308 $x214)))
 (let (($x306 (and $x126 $x139)))
 (let (($x22 (and $x306 $x16)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x140 (and $x134 $x22)))
 (let (($x82 (bvugt ?x137 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x137 (_ bv3 32))))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x219 (=> (bvule ?x137 (bvsub (bvadd ?x137 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x311 $x82)))))))
 (let (($x66 (=> (and $x175 (bvule ?x137 (bvsub (bvadd ?x137 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x311 $x82)))))))
 (let (($x310 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x105 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x215 (=> $x105 (or false (or false (and true (or $x315 $x310)))))))
 (let (($x165 (=> (and $x175 $x105) (or false (or false (and true (or $x315 $x310)))))))
 (let (($x130 (and $x165 $x66)))
 (let (($x161 (and $x130 $x140)))
 (let (($x106 (=> $x161 $x261)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x137 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x151))))
 (let (($x168 (bvule ?x135 (_ bv4294967294 32))))
 (let (($x53 (= $x168 true)))
 (let (($x261 (= $x53 true)))
 (let (($x39 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x198 (ite $x39 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x198 (_ bv1 32))))
 (let (($x91 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x141 (= $x91 $x99)))
 (let (($x200 (= ?x198 (_ bv0 32))))
 (let (($x145 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x320 (= $x145 $x200)))
 (let (($x147 (and $x320 $x141)))
 (let (($x16 (= $x147 true)))
 (let (($x313 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x61 (= $x313 $x99)))
 (let (($x84 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x312 (= $x84 $x200)))
 (let (($x90 (and $x312 $x61)))
 (let (($x139 (= $x90 true)))
 (let ((?x93 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x76 (= (_ bv0 3) ?x93)))
 (let (($x276 (= $x76 true)))
 (let (($x214 (= $x276 true)))
 (let (($x366 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x167 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x127 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x167) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x167))))
 (let (($x57 (and true $x127)))
 (let (($x92 (and $x127 $x57)))
 (let (($x256 (= (bvand ?x135 (_ bv4294967288 32)) ?x135)))
 (let (($x375 (= (bvand ?x137 (_ bv4294967292 32)) ?x137)))
 (let (($x75 (and $x375 $x256)))
 (let (($x230 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x137 (bvsub ?x137 (_ bv4 32))) (bvult ?x137 (bvsub ?x137 (_ bv4 32))))))
 (let (($x38 (and (and (and (and (and $x57 $x230) $x375) $x75) $x92) $x366)))
 (let (($x237 (= true $x38)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x175 (not $x136)))
 (let (($x5 (=> $x175 $x237)))
 (let (($x31 (= $x5 true)))
 (let (($x64 (= $x31 true)))
 (let (($x8 (= $x64 true)))
 (let (($x109 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x109 true)))
 (let (($x114 (= $x206 true)))
 (let (($x272 (= $x114 true)))
 (let (($x193 (= $x175 true)))
 (let (($x295 (= $x193 true)))
 (let (($x131 (= $x295 true)))
 (let (($x153 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x203 (= $x153 true)))
 (let (($x356 (= $x203 true)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x195)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x292 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (and $x186 $x292)))
 (let (($x225 (and $x259 $x228)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x268 (and $x107 $x225)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x185)))))))
 (let (($x95 (and $x123 $x268)))
 (let (($x81 (= $x95 true)))
 (let (($x224 (= $x81 true)))
 (let (($x49 (= $x224 true)))
 (let (($x251 (and $x49 $x356)))
 (let (($x255 (and $x251 $x131)))
 (let (($x132 (and $x255 $x272)))
 (let (($x308 (and $x132 $x8)))
 (let (($x126 (and $x308 $x214)))
 (let (($x306 (and $x126 $x139)))
 (let (($x22 (and $x306 $x16)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x140 (and $x134 $x22)))
 (let (($x82 (bvugt ?x137 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd ?x137 (_ bv3 32))))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x219 (=> (bvule ?x137 (bvsub (bvadd ?x137 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x311 $x82)))))))
 (let (($x66 (=> (and $x175 (bvule ?x137 (bvsub (bvadd ?x137 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x311 $x82)))))))
 (let (($x310 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x105 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x215 (=> $x105 (or false (or false (and true (or $x315 $x310)))))))
 (let (($x165 (=> (and $x175 $x105) (or false (or false (and true (or $x315 $x310)))))))
 (let (($x130 (and $x165 $x66)))
 (let (($x161 (and $x130 $x140)))
 (let (($x106 (=> $x161 $x261)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 121
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3555X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3555X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x35 (concat ?x110 (select input.dst.llvm-mem (bvadd input.ind-%var3555X (_ bv4 32))))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3555X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3555X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x220 (concat ?x325 (concat ?x21 ?x35))))
 (let (($x218 (= ?x220 ?x220)))
 (let ((?x194 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x327 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x78))))
 (let (($x361 (= (_ bv0 32) ?x327)))
 (let ((?x278 (ite $x361 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x278 (_ bv1 32))))
 (let (($x217 (=> $x192 $x218)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3555X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3555X))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3555X (_ bv2 32))) ?x100)))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3555X (_ bv3 32))) ?x299)))
 (let (($x247 (= ?x252 ?x252)))
 (let (($x207 (=> $x192 $x247)))
 (let ((?x105 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x184))))
 (let (($x377 (= (_ bv0 32) ?x180)))
 (let ((?x144 (ite $x377 (_ bv0 32) (_ bv1 32))))
 (let (($x344 (bvuge ?x144 (_ bv1 32))))
 (let (($x353 (= $x192 $x344)))
 (let (($x328 (= ?x144 (_ bv0 32))))
 (let (($x475 (= ?x278 (_ bv0 32))))
 (let (($x46 (= $x475 $x328)))
 (let (($x191 (and (and (and (= ?x327 ?x180) (=> $x475 (= false false))) $x46) $x353)))
 (let (($x277 (and (and $x191 $x207) $x217)))
 (let (($x158 (not true)))
 (let (($x263 (or $x158 $x277)))
 (let (($x58 (= true true)))
 (let (($x343 (and $x58 $x263)))
 (let (($x12 (= $x343 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x168 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x168 (_ bv1 32))))
 (let (($x72 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x231 (= $x72 $x106)))
 (let (($x53 (= ?x168 (_ bv0 32))))
 (let (($x161 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x261 (= $x161 $x53)))
 (let (($x94 (and $x261 $x231)))
 (let (($x54 (= $x94 true)))
 (let (($x306 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x45 (ite $x306 (_ bv0 32) (_ bv1 32))))
 (let (($x141 (bvuge ?x45 (_ bv1 32))))
 (let (($x91 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x147 (= $x91 $x141)))
 (let (($x145 (= ?x45 (_ bv0 32))))
 (let (($x90 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x320 (= $x90 $x145)))
 (let (($x16 (and $x320 $x147)))
 (let (($x22 (= $x16 true)))
 (let ((?x198 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x200 (= (_ bv0 3) ?x198)))
 (let (($x312 (= $x200 true)))
 (let (($x313 (= $x312 true)))
 (let (($x64 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x119 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x116 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x119) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x119))))
 (let (($x375 (and true $x116)))
 (let (($x5 (and $x116 $x375)))
 (let (($x38 (= (bvand ?x180 (_ bv4294967288 32)) ?x180)))
 (let (($x239 (= (bvand ?x105 (_ bv4294967292 32)) ?x105)))
 (let (($x237 (and $x239 $x38)))
 (let (($x48 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x105 (bvsub ?x105 (_ bv4 32))) (bvult ?x105 (bvsub ?x105 (_ bv4 32))))))
 (let (($x76 (and (and (and (and (and $x375 $x48) $x239) $x237) $x5) $x64)))
 (let (($x276 (= true $x76)))
 (let (($x175 (not $x136)))
 (let (($x214 (=> $x175 $x276)))
 (let (($x126 (= $x214 true)))
 (let (($x10 (= $x126 true)))
 (let (($x84 (= $x10 true)))
 (let (($x127 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x57 (= $x127 true)))
 (let (($x19 (= $x57 true)))
 (let (($x149 (= $x19 true)))
 (let (($x132 (= $x175 true)))
 (let (($x179 (= $x132 true)))
 (let (($x167 (= $x179 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x193)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x356 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (and $x153 $x356)))
 (let (($x131 (and $x251 $x295)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x50 $x131)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x225)))))))
 (let (($x286 (and $x117 $x255)))
 (let (($x109 (= $x286 true)))
 (let (($x206 (= $x109 true)))
 (let (($x114 (= $x206 true)))
 (let ((?x63 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x264 (bvneg ?x63)))
 (let (($x7 (= ?x264 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (= $x7 true)))
 (let (($x187 (= $x123 true)))
 (let (($x272 (and $x187 $x114)))
 (let (($x226 (and $x272 $x167)))
 (let (($x176 (and $x226 $x149)))
 (let (($x253 (and $x176 $x84)))
 (let (($x99 (and $x253 $x313)))
 (let (($x140 (and $x99 $x22)))
 (let (($x177 (and $x140 $x54)))
 (let (($x182 (and $x72 $x177)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x204 (and $x87 $x182)))
 (let (($x77 (bvugt ?x105 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x105 (_ bv3 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x134 (=> (bvule ?x105 (bvsub (bvadd ?x105 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x201 $x77)))))))
 (let (($x301 (=> (and $x175 (bvule ?x105 (bvsub (bvadd ?x105 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x201 $x77)))))))
 (let (($x169 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x159 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x194 (_ bv1 32))) (or false (or false (and true (or $x55 $x169)))))))
 (let (($x196 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x194 (_ bv1 32)))) (or false (or false (and true (or $x55 $x169)))))))
 (let (($x32 (and $x196 $x301)))
 (let (($x174 (and $x32 $x204)))
 (let (($x357 (=> $x174 $x12)))
 (not $x357)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3555X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3555X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x35 (concat ?x110 (select input.dst.llvm-mem (bvadd input.ind-%var3555X (_ bv4 32))))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3555X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3555X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x220 (concat ?x325 (concat ?x21 ?x35))))
 (let (($x218 (= ?x220 ?x220)))
 (let ((?x194 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x327 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x78))))
 (let (($x361 (= (_ bv0 32) ?x327)))
 (let ((?x278 (ite $x361 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x278 (_ bv1 32))))
 (let (($x217 (=> $x192 $x218)))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3555X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3555X))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3555X (_ bv2 32))) ?x100)))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3555X (_ bv3 32))) ?x299)))
 (let (($x247 (= ?x252 ?x252)))
 (let (($x207 (=> $x192 $x247)))
 (let ((?x105 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x184))))
 (let (($x377 (= (_ bv0 32) ?x180)))
 (let ((?x144 (ite $x377 (_ bv0 32) (_ bv1 32))))
 (let (($x344 (bvuge ?x144 (_ bv1 32))))
 (let (($x353 (= $x192 $x344)))
 (let (($x328 (= ?x144 (_ bv0 32))))
 (let (($x475 (= ?x278 (_ bv0 32))))
 (let (($x46 (= $x475 $x328)))
 (let (($x191 (and (and (and (= ?x327 ?x180) (=> $x475 (= false false))) $x46) $x353)))
 (let (($x277 (and (and $x191 $x207) $x217)))
 (let (($x158 (not true)))
 (let (($x263 (or $x158 $x277)))
 (let (($x58 (= true true)))
 (let (($x343 (and $x58 $x263)))
 (let (($x12 (= $x343 true)))
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x168 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x106 (bvuge ?x168 (_ bv1 32))))
 (let (($x72 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x231 (= $x72 $x106)))
 (let (($x53 (= ?x168 (_ bv0 32))))
 (let (($x161 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x261 (= $x161 $x53)))
 (let (($x94 (and $x261 $x231)))
 (let (($x54 (= $x94 true)))
 (let (($x306 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x45 (ite $x306 (_ bv0 32) (_ bv1 32))))
 (let (($x141 (bvuge ?x45 (_ bv1 32))))
 (let (($x91 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x147 (= $x91 $x141)))
 (let (($x145 (= ?x45 (_ bv0 32))))
 (let (($x90 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x320 (= $x90 $x145)))
 (let (($x16 (and $x320 $x147)))
 (let (($x22 (= $x16 true)))
 (let ((?x198 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x200 (= (_ bv0 3) ?x198)))
 (let (($x312 (= $x200 true)))
 (let (($x313 (= $x312 true)))
 (let (($x64 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x119 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x116 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x119) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x119))))
 (let (($x375 (and true $x116)))
 (let (($x5 (and $x116 $x375)))
 (let (($x38 (= (bvand ?x180 (_ bv4294967288 32)) ?x180)))
 (let (($x239 (= (bvand ?x105 (_ bv4294967292 32)) ?x105)))
 (let (($x237 (and $x239 $x38)))
 (let (($x48 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x105 (bvsub ?x105 (_ bv4 32))) (bvult ?x105 (bvsub ?x105 (_ bv4 32))))))
 (let (($x76 (and (and (and (and (and $x375 $x48) $x239) $x237) $x5) $x64)))
 (let (($x276 (= true $x76)))
 (let (($x175 (not $x136)))
 (let (($x214 (=> $x175 $x276)))
 (let (($x126 (= $x214 true)))
 (let (($x10 (= $x126 true)))
 (let (($x84 (= $x10 true)))
 (let (($x127 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x57 (= $x127 true)))
 (let (($x19 (= $x57 true)))
 (let (($x149 (= $x19 true)))
 (let (($x132 (= $x175 true)))
 (let (($x179 (= $x132 true)))
 (let (($x167 (= $x179 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x193)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x356 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x203)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (and $x153 $x356)))
 (let (($x131 (and $x251 $x295)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x50 $x131)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x225)))))))
 (let (($x286 (and $x117 $x255)))
 (let (($x109 (= $x286 true)))
 (let (($x206 (= $x109 true)))
 (let (($x114 (= $x206 true)))
 (let ((?x63 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x264 (bvneg ?x63)))
 (let (($x7 (= ?x264 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (= $x7 true)))
 (let (($x187 (= $x123 true)))
 (let (($x272 (and $x187 $x114)))
 (let (($x226 (and $x272 $x167)))
 (let (($x176 (and $x226 $x149)))
 (let (($x253 (and $x176 $x84)))
 (let (($x99 (and $x253 $x313)))
 (let (($x140 (and $x99 $x22)))
 (let (($x177 (and $x140 $x54)))
 (let (($x182 (and $x72 $x177)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x204 (and $x87 $x182)))
 (let (($x77 (bvugt ?x105 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x105 (_ bv3 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x134 (=> (bvule ?x105 (bvsub (bvadd ?x105 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x201 $x77)))))))
 (let (($x301 (=> (and $x175 (bvule ?x105 (bvsub (bvadd ?x105 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x201 $x77)))))))
 (let (($x169 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x159 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x194 (_ bv1 32))) (or false (or false (and true (or $x55 $x169)))))))
 (let (($x196 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x194 (_ bv1 32)))) (or false (or false (and true (or $x55 $x169)))))))
 (let (($x32 (and $x196 $x301)))
 (let (($x174 (and $x32 $x204)))
 (let (($x357 (=> $x174 $x12)))
 (not $x357)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 122
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= $x136 false)))
 (let (($x5 (= $x183 true)))
 (let ((?x75 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (bvuge ?x75 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x280 (= $x151 $x184)))
 (let (($x262 (= ?x75 (_ bv0 32))))
 (let (($x256 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x135 (= $x256 $x262)))
 (let (($x180 (and $x135 $x280)))
 (let (($x30 (= $x180 true)))
 (let (($x148 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x111 (ite $x148 (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge ?x111 (_ bv1 32))))
 (let (($x44 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x239 (= $x44 $x170)))
 (let (($x48 (= ?x111 (_ bv0 32))))
 (let (($x290 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x8 (= $x290 $x48)))
 (let (($x308 (and $x8 $x239)))
 (let (($x245 (= $x308 true)))
 (let ((?x230 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x119 (= (_ bv0 3) ?x230)))
 (let (($x42 (= $x119 true)))
 (let (($x118 (= $x42 true)))
 (let (($x26 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x26 true)))
 (let (($x57 (= $x127 true)))
 (let (($x19 (= $x57 true)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x286 (= (_ bv0 32) ?x255)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x295 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x251 $x295)))
 (let (($x109 (and $x131 $x286)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x228 $x109)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x356 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x224)))))))
 (let (($x114 (and $x356 $x206)))
 (let (($x272 (= $x114 true)))
 (let (($x132 (= $x272 true)))
 (let (($x179 (= $x132 true)))
 (let ((?x83 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x83)))
 (let (($x187 (= ?x7 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x292 (= $x187 true)))
 (let (($x259 (= $x292 true)))
 (let (($x167 (and $x259 $x179)))
 (let (($x149 (and $x167 $x19)))
 (let (($x116 (and $x149 $x118)))
 (let (($x92 (and $x116 $x245)))
 (let (($x366 (and $x92 $x30)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x38 (and $x185 $x366)))
 (let ((?x265 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x66 (bvugt ?x265 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x265 (_ bv3 32)))))
 (let (($x87 (=> (bvule ?x265 (bvsub (bvadd ?x265 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x66)))))))
 (let (($x175 (not $x136)))
 (let (($x303 (=> (and $x175 (bvule ?x265 (bvsub (bvadd ?x265 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x219 $x66)))))))
 (let (($x165 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x311 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x82 (=> $x311 (or false (or false (and true (or $x215 $x165)))))))
 (let (($x304 (=> (and $x175 $x311) (or false (or false (and true (or $x215 $x165)))))))
 (let (($x189 (and $x304 $x303)))
 (let (($x237 (and $x189 $x38)))
 (let (($x93 (=> $x237 $x5)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= $x136 false)))
 (let (($x5 (= $x183 true)))
 (let ((?x75 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (bvuge ?x75 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x280 (= $x151 $x184)))
 (let (($x262 (= ?x75 (_ bv0 32))))
 (let (($x256 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x135 (= $x256 $x262)))
 (let (($x180 (and $x135 $x280)))
 (let (($x30 (= $x180 true)))
 (let (($x148 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x111 (ite $x148 (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge ?x111 (_ bv1 32))))
 (let (($x44 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x239 (= $x44 $x170)))
 (let (($x48 (= ?x111 (_ bv0 32))))
 (let (($x290 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x8 (= $x290 $x48)))
 (let (($x308 (and $x8 $x239)))
 (let (($x245 (= $x308 true)))
 (let ((?x230 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x119 (= (_ bv0 3) ?x230)))
 (let (($x42 (= $x119 true)))
 (let (($x118 (= $x42 true)))
 (let (($x26 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x26 true)))
 (let (($x57 (= $x127 true)))
 (let (($x19 (= $x57 true)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x286 (= (_ bv0 32) ?x255)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x295 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x251 $x295)))
 (let (($x109 (and $x131 $x286)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x228 $x109)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x356 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x224)))))))
 (let (($x114 (and $x356 $x206)))
 (let (($x272 (= $x114 true)))
 (let (($x132 (= $x272 true)))
 (let (($x179 (= $x132 true)))
 (let ((?x83 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x83)))
 (let (($x187 (= ?x7 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x292 (= $x187 true)))
 (let (($x259 (= $x292 true)))
 (let (($x167 (and $x259 $x179)))
 (let (($x149 (and $x167 $x19)))
 (let (($x116 (and $x149 $x118)))
 (let (($x92 (and $x116 $x245)))
 (let (($x366 (and $x92 $x30)))
 (let (($x185 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x38 (and $x185 $x366)))
 (let ((?x265 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x66 (bvugt ?x265 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x265 (_ bv3 32)))))
 (let (($x87 (=> (bvule ?x265 (bvsub (bvadd ?x265 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x66)))))))
 (let (($x175 (not $x136)))
 (let (($x303 (=> (and $x175 (bvule ?x265 (bvsub (bvadd ?x265 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x219 $x66)))))))
 (let (($x165 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x311 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x82 (=> $x311 (or false (or false (and true (or $x215 $x165)))))))
 (let (($x304 (=> (and $x175 $x311) (or false (or false (and true (or $x215 $x165)))))))
 (let (($x189 (and $x304 $x303)))
 (let (($x237 (and $x189 $x38)))
 (let (($x93 (=> $x237 $x5)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00800000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00800003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00800000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 123
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x126 (= $x136 false)))
 (let (($x10 (= $x126 true)))
 (let (($x237 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x31 (not $x237)))
 (let (($x180 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x93 (not $x180)))
 (let ((?x30 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x30 (_ bv1 32))))
 (let (($x5 (= $x237 $x183)))
 (let (($x366 (= ?x30 (_ bv0 32))))
 (let (($x38 (= $x180 $x366)))
 (let (($x283 (and (and (and $x38 $x5) $x93) $x31)))
 (let (($x64 (= $x283 true)))
 (let (($x308 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x256 (not $x308)))
 (let (($x111 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x208 (not $x111)))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x44 (ite $x8 (_ bv0 32) (_ bv1 32))))
 (let (($x245 (bvuge ?x44 (_ bv1 32))))
 (let (($x92 (= $x308 $x245)))
 (let (($x170 (= ?x44 (_ bv0 32))))
 (let (($x239 (= $x111 $x170)))
 (let (($x135 (and (and (and $x239 $x92) $x208) $x256)))
 (let (($x151 (= $x135 true)))
 (let ((?x118 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x116 (= (_ bv0 3) ?x118)))
 (let (($x375 (= $x116 true)))
 (let (($x290 (= $x375 true)))
 (let (($x19 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x19 true)))
 (let (($x176 (= $x149 true)))
 (let (($x230 (= $x176 true)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x206)))
 (let ((?x255 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x255)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x131 $x286)))
 (let (($x272 (and $x109 $x114)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x81 $x272)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x295 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x153)))))))
 (let (($x179 (and $x295 $x132)))
 (let (($x167 (= $x179 true)))
 (let (($x226 (= $x167 true)))
 (let (($x26 (= $x226 true)))
 (let ((?x123 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x123)))
 (let (($x259 (= ?x187 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x225 (= $x259 true)))
 (let (($x268 (= $x225 true)))
 (let (($x127 (and $x268 $x26)))
 (let (($x119 (and $x127 $x230)))
 (let (($x181 (and $x119 $x290)))
 (let (($x184 (and $x181 $x151)))
 (let (($x76 (and $x184 $x64)))
 (let (($x264 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x276 (and $x264 $x76)))
 (let ((?x311 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x301 (bvugt ?x311 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x311 (_ bv3 32)))))
 (let (($x185 (=> (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x134 $x301)))))))
 (let (($x175 (not $x136)))
 (let (($x166 (=> (and $x175 (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x134 $x301)))))))
 (let (($x196 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x201 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x77 (=> $x201 (or false (or false (and true (or $x159 $x196)))))))
 (let (($x37 (=> (and $x175 $x201) (or false (or false (and true (or $x159 $x196)))))))
 (let (($x13 (and $x37 $x166)))
 (let (($x214 (and $x13 $x276)))
 (let (($x84 (=> $x214 $x10)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x126 (= $x136 false)))
 (let (($x10 (= $x126 true)))
 (let (($x237 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x31 (not $x237)))
 (let (($x180 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x93 (not $x180)))
 (let ((?x30 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x30 (_ bv1 32))))
 (let (($x5 (= $x237 $x183)))
 (let (($x366 (= ?x30 (_ bv0 32))))
 (let (($x38 (= $x180 $x366)))
 (let (($x283 (and (and (and $x38 $x5) $x93) $x31)))
 (let (($x64 (= $x283 true)))
 (let (($x308 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x256 (not $x308)))
 (let (($x111 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x208 (not $x111)))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x44 (ite $x8 (_ bv0 32) (_ bv1 32))))
 (let (($x245 (bvuge ?x44 (_ bv1 32))))
 (let (($x92 (= $x308 $x245)))
 (let (($x170 (= ?x44 (_ bv0 32))))
 (let (($x239 (= $x111 $x170)))
 (let (($x135 (and (and (and $x239 $x92) $x208) $x256)))
 (let (($x151 (= $x135 true)))
 (let ((?x118 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x116 (= (_ bv0 3) ?x118)))
 (let (($x375 (= $x116 true)))
 (let (($x290 (= $x375 true)))
 (let (($x19 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x149 (= $x19 true)))
 (let (($x176 (= $x149 true)))
 (let (($x230 (= $x176 true)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x206)))
 (let ((?x255 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x255)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x131 $x286)))
 (let (($x272 (and $x109 $x114)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x81 $x272)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x295 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x153)))))))
 (let (($x179 (and $x295 $x132)))
 (let (($x167 (= $x179 true)))
 (let (($x226 (= $x167 true)))
 (let (($x26 (= $x226 true)))
 (let ((?x123 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x123)))
 (let (($x259 (= ?x187 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x225 (= $x259 true)))
 (let (($x268 (= $x225 true)))
 (let (($x127 (and $x268 $x26)))
 (let (($x119 (and $x127 $x230)))
 (let (($x181 (and $x119 $x290)))
 (let (($x184 (and $x181 $x151)))
 (let (($x76 (and $x184 $x64)))
 (let (($x264 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x276 (and $x264 $x76)))
 (let ((?x311 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x301 (bvugt ?x311 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x311 (_ bv3 32)))))
 (let (($x185 (=> (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x134 $x301)))))))
 (let (($x175 (not $x136)))
 (let (($x166 (=> (and $x175 (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x134 $x301)))))))
 (let (($x196 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x201 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x77 (=> $x201 (or false (or false (and true (or $x159 $x196)))))))
 (let (($x37 (=> (and $x175 $x201) (or false (or false (and true (or $x159 $x196)))))))
 (let (($x13 (and $x37 $x166)))
 (let (($x214 (and $x13 $x276)))
 (let (($x84 (=> $x214 $x10)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 124
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x126 (= $x136 false)))
 (let (($x10 (= $x126 true)))
 (let (($x256 (= false false)))
 (let (($x366 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x49 (=> $x366 $x256)))
 (let ((?x38 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x307 (bvuge ?x38 (_ bv1 32))))
 (let (($x5 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x93 (= $x5 $x307)))
 (let (($x237 (= ?x38 (_ bv0 32))))
 (let (($x183 (= $x366 $x237)))
 (let (($x283 (and (and $x183 $x93) $x49)))
 (let (($x64 (= $x283 true)))
 (let (($x44 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x135 (=> $x44 $x256)))
 (let (($x239 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x308 (ite $x239 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x308 (_ bv1 32))))
 (let (($x75 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x262 (= $x75 $x208)))
 (let (($x245 (= ?x308 (_ bv0 32))))
 (let (($x92 (= $x44 $x245)))
 (let (($x184 (and (and $x92 $x262) $x135)))
 (let (($x280 (= $x184 true)))
 (let ((?x290 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x181 (= (_ bv0 3) ?x290)))
 (let (($x148 (= $x181 true)))
 (let (($x111 (= $x148 true)))
 (let (($x230 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x119 (= $x230 true)))
 (let (($x42 (= $x119 true)))
 (let (($x118 (= $x42 true)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x132)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x206)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (and $x109 $x114)))
 (let (($x167 (and $x272 $x179)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (and $x50 $x167)))
 (let (($x251 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x286 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x251)))))))
 (let (($x26 (and $x286 $x226)))
 (let (($x127 (= $x26 true)))
 (let (($x57 (= $x127 true)))
 (let (($x19 (= $x57 true)))
 (let ((?x292 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x259 (bvneg ?x292)))
 (let (($x268 (= ?x259 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x224 (= $x268 true)))
 (let (($x117 (= $x224 true)))
 (let (($x149 (and $x117 $x19)))
 (let (($x116 (and $x149 $x118)))
 (let (($x48 (and $x116 $x111)))
 (let (($x180 (and $x48 $x280)))
 (let (($x76 (and $x180 $x64)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x276 (and $x7 $x76)))
 (let ((?x201 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x303 (bvugt ?x201 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x201 (_ bv3 32)))))
 (let (($x264 (=> (bvule ?x201 (bvsub (bvadd ?x201 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x303)))))))
 (let (($x175 (not $x136)))
 (let (($x33 (=> (and $x175 (bvule ?x201 (bvsub (bvadd ?x201 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x87 $x303)))))))
 (let (($x304 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x219 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x66 (=> $x219 (or false (or false (and true (or $x82 $x304)))))))
 (let (($x238 (=> (and $x175 $x219) (or false (or false (and true (or $x82 $x304)))))))
 (let (($x130 (and $x238 $x33)))
 (let (($x214 (and $x130 $x276)))
 (let (($x84 (=> $x214 $x10)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x126 (= $x136 false)))
 (let (($x10 (= $x126 true)))
 (let (($x256 (= false false)))
 (let (($x366 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x49 (=> $x366 $x256)))
 (let ((?x38 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x307 (bvuge ?x38 (_ bv1 32))))
 (let (($x5 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x93 (= $x5 $x307)))
 (let (($x237 (= ?x38 (_ bv0 32))))
 (let (($x183 (= $x366 $x237)))
 (let (($x283 (and (and $x183 $x93) $x49)))
 (let (($x64 (= $x283 true)))
 (let (($x44 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x135 (=> $x44 $x256)))
 (let (($x239 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x308 (ite $x239 (_ bv0 32) (_ bv1 32))))
 (let (($x208 (bvuge ?x308 (_ bv1 32))))
 (let (($x75 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x262 (= $x75 $x208)))
 (let (($x245 (= ?x308 (_ bv0 32))))
 (let (($x92 (= $x44 $x245)))
 (let (($x184 (and (and $x92 $x262) $x135)))
 (let (($x280 (= $x184 true)))
 (let ((?x290 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x181 (= (_ bv0 3) ?x290)))
 (let (($x148 (= $x181 true)))
 (let (($x111 (= $x148 true)))
 (let (($x230 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x119 (= $x230 true)))
 (let (($x42 (= $x119 true)))
 (let (($x118 (= $x42 true)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x132)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x206)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (and $x109 $x114)))
 (let (($x167 (and $x272 $x179)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (and $x50 $x167)))
 (let (($x251 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x286 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x251)))))))
 (let (($x26 (and $x286 $x226)))
 (let (($x127 (= $x26 true)))
 (let (($x57 (= $x127 true)))
 (let (($x19 (= $x57 true)))
 (let ((?x292 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x259 (bvneg ?x292)))
 (let (($x268 (= ?x259 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x224 (= $x268 true)))
 (let (($x117 (= $x224 true)))
 (let (($x149 (and $x117 $x19)))
 (let (($x116 (and $x149 $x118)))
 (let (($x48 (and $x116 $x111)))
 (let (($x180 (and $x48 $x280)))
 (let (($x76 (and $x180 $x64)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x276 (and $x7 $x76)))
 (let ((?x201 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x303 (bvugt ?x201 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x201 (_ bv3 32)))))
 (let (($x264 (=> (bvule ?x201 (bvsub (bvadd ?x201 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x303)))))))
 (let (($x175 (not $x136)))
 (let (($x33 (=> (and $x175 (bvule ?x201 (bvsub (bvadd ?x201 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x87 $x303)))))))
 (let (($x304 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x219 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x66 (=> $x219 (or false (or false (and true (or $x82 $x304)))))))
 (let (($x238 (=> (and $x175 $x219) (or false (or false (and true (or $x82 $x304)))))))
 (let (($x130 (and $x238 $x33)))
 (let (($x214 (and $x130 $x276)))
 (let (($x84 (=> $x214 $x10)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00800000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00800003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00800000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv4 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 125
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x194 (= $x136 false)))
 (let (($x203 (= $x194 true)))
 (let (($x280 (= false false)))
 (let (($x307 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x214 (=> $x307 $x280)))
 (let (($x283 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x276 (not $x283)))
 (let ((?x93 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x93 (_ bv1 32))))
 (let (($x76 (= $x283 $x64)))
 (let (($x31 (= ?x93 (_ bv0 32))))
 (let (($x49 (= $x307 $x31)))
 (let (($x84 (and (and (and $x49 $x76) $x276) $x214)))
 (let (($x253 (= $x84 true)))
 (let (($x308 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x180 (=> $x308 $x280)))
 (let (($x151 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x184 (not $x151)))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x75 (ite $x92 (_ bv0 32) (_ bv1 32))))
 (let (($x256 (bvuge ?x75 (_ bv1 32))))
 (let (($x135 (= $x151 $x256)))
 (let (($x208 (= ?x75 (_ bv0 32))))
 (let (($x262 (= $x308 $x208)))
 (let (($x38 (and (and (and $x262 $x135) $x184) $x180)))
 (let (($x237 (= $x38 true)))
 (let ((?x111 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x48 (= (_ bv0 3) ?x111)))
 (let (($x8 (= $x48 true)))
 (let (($x44 (= $x8 true)))
 (let (($x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x116 (= $x118 true)))
 (let (($x375 (= $x116 true)))
 (let (($x290 (= $x375 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x226)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x272 $x179)))
 (let (($x127 (and $x167 $x26)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x228 $x127)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x131)))))))
 (let (($x19 (and $x114 $x57)))
 (let (($x149 (= $x19 true)))
 (let (($x176 (= $x149 true)))
 (let (($x230 (= $x176 true)))
 (let ((?x225 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x225)))
 (let (($x117 (= ?x268 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x153 (= $x117 true)))
 (let (($x356 (= $x153 true)))
 (let (($x119 (and $x356 $x230)))
 (let (($x181 (and $x119 $x290)))
 (let (($x170 (and $x181 $x44)))
 (let (($x183 (and $x170 $x237)))
 (let (($x315 (and $x183 $x253)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x193 (and $x187 $x315)))
 (let ((?x219 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x166 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x219 (_ bv3 32)))))
 (let (($x7 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x185 $x166)))))))
 (let (($x175 (not $x136)))
 (let (($x63 (=> (and $x175 (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x185 $x166)))))))
 (let (($x37 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x134 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x301 (=> $x134 (or false (or false (and true (or $x77 $x37)))))))
 (let (($x137 (=> (and $x175 $x134) (or false (or false (and true (or $x77 $x37)))))))
 (let (($x32 (and $x137 $x63)))
 (let (($x169 (and $x32 $x193)))
 (let (($x310 (=> $x169 $x203)))
 (not $x310)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x136 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x194 (= $x136 false)))
 (let (($x203 (= $x194 true)))
 (let (($x280 (= false false)))
 (let (($x307 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x214 (=> $x307 $x280)))
 (let (($x283 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x276 (not $x283)))
 (let ((?x93 (ite $x136 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x93 (_ bv1 32))))
 (let (($x76 (= $x283 $x64)))
 (let (($x31 (= ?x93 (_ bv0 32))))
 (let (($x49 (= $x307 $x31)))
 (let (($x84 (and (and (and $x49 $x76) $x276) $x214)))
 (let (($x253 (= $x84 true)))
 (let (($x308 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x180 (=> $x308 $x280)))
 (let (($x151 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x184 (not $x151)))
 (let (($x92 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x75 (ite $x92 (_ bv0 32) (_ bv1 32))))
 (let (($x256 (bvuge ?x75 (_ bv1 32))))
 (let (($x135 (= $x151 $x256)))
 (let (($x208 (= ?x75 (_ bv0 32))))
 (let (($x262 (= $x308 $x208)))
 (let (($x38 (and (and (and $x262 $x135) $x184) $x180)))
 (let (($x237 (= $x38 true)))
 (let ((?x111 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x48 (= (_ bv0 3) ?x111)))
 (let (($x8 (= $x48 true)))
 (let (($x44 (= $x8 true)))
 (let (($x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x116 (= $x118 true)))
 (let (($x375 (= $x116 true)))
 (let (($x290 (= $x375 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x226)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x272 $x179)))
 (let (($x127 (and $x167 $x26)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x228 $x127)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x131)))))))
 (let (($x19 (and $x114 $x57)))
 (let (($x149 (= $x19 true)))
 (let (($x176 (= $x149 true)))
 (let (($x230 (= $x176 true)))
 (let ((?x225 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x225)))
 (let (($x117 (= ?x268 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x153 (= $x117 true)))
 (let (($x356 (= $x153 true)))
 (let (($x119 (and $x356 $x230)))
 (let (($x181 (and $x119 $x290)))
 (let (($x170 (and $x181 $x44)))
 (let (($x183 (and $x170 $x237)))
 (let (($x315 (and $x183 $x253)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x193 (and $x187 $x315)))
 (let ((?x219 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x166 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x219 (_ bv3 32)))))
 (let (($x7 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x185 $x166)))))))
 (let (($x175 (not $x136)))
 (let (($x63 (=> (and $x175 (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x185 $x166)))))))
 (let (($x37 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x134 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x301 (=> $x134 (or false (or false (and true (or $x77 $x37)))))))
 (let (($x137 (=> (and $x175 $x134) (or false (or false (and true (or $x77 $x37)))))))
 (let (($x32 (and $x137 $x63)))
 (let (($x169 (and $x32 $x193)))
 (let (($x310 (=> $x169 $x203)))
 (not $x310)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2097152 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2097152 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2097155 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 126
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x212 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x159 (not $x212)))
 (let (($x237 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x10 (or $x237 $x159)))
 (let (($x214 (= $x10 true)))
 (let (($x84 (= $x214 true)))
 (let ((?x183 (ite $x212 (_ bv0 32) (_ bv1 32))))
 (let (($x31 (bvuge ?x183 (_ bv1 32))))
 (let (($x93 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x49 (= $x93 $x31)))
 (let (($x5 (= ?x183 (_ bv0 32))))
 (let (($x307 (= $x237 $x5)))
 (let (($x283 (and $x307 $x49)))
 (let (($x64 (= $x283 true)))
 (let (($x208 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x262 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x262 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x184 (= $x135 $x30)))
 (let (($x151 (= ?x262 (_ bv0 32))))
 (let (($x92 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x256 (= $x92 $x151)))
 (let (($x366 (and $x256 $x184)))
 (let (($x280 (= $x366 true)))
 (let ((?x8 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x44 (= (_ bv0 3) ?x8)))
 (let (($x170 (= $x44 true)))
 (let (($x239 (= $x170 true)))
 (let (($x375 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x375 true)))
 (let (($x181 (= $x290 true)))
 (let (($x148 (= $x181 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x127)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x179 $x226)))
 (let (($x19 (and $x26 $x57)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x95 $x19)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x186 $x50)))))))
 (let (($x176 (and $x132 $x149)))
 (let (($x230 (= $x176 true)))
 (let (($x119 (= $x230 true)))
 (let (($x42 (= $x119 true)))
 (let ((?x268 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x268)))
 (let (($x153 (= ?x224 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x356 (= $x153 true)))
 (let (($x251 (= $x356 true)))
 (let (($x118 (and $x251 $x42)))
 (let (($x111 (and $x118 $x148)))
 (let (($x308 (and $x111 $x239)))
 (let (($x180 (and $x308 $x280)))
 (let (($x76 (and $x180 $x64)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x126 (and $x292 $x76)))
 (let ((?x215 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x264 (bvugt ?x215 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x215 (_ bv3 32)))))
 (let (($x123 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x264)))))))
 (let (($x303 (=> (and $x159 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x13 $x264)))))))
 (let (($x66 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x219 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x87 (=> $x219 (or false (or false (and true (or $x311 $x66)))))))
 (let (($x175 (=> (and $x159 $x219) (or false (or false (and true (or $x311 $x66)))))))
 (let (($x83 (and $x175 $x303)))
 (let (($x276 (and $x83 $x126)))
 (let (($x253 (=> $x276 $x84)))
 (not $x253)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x212 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x159 (not $x212)))
 (let (($x237 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x10 (or $x237 $x159)))
 (let (($x214 (= $x10 true)))
 (let (($x84 (= $x214 true)))
 (let ((?x183 (ite $x212 (_ bv0 32) (_ bv1 32))))
 (let (($x31 (bvuge ?x183 (_ bv1 32))))
 (let (($x93 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x49 (= $x93 $x31)))
 (let (($x5 (= ?x183 (_ bv0 32))))
 (let (($x307 (= $x237 $x5)))
 (let (($x283 (and $x307 $x49)))
 (let (($x64 (= $x283 true)))
 (let (($x208 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x262 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x262 (_ bv1 32))))
 (let (($x135 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x184 (= $x135 $x30)))
 (let (($x151 (= ?x262 (_ bv0 32))))
 (let (($x92 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x256 (= $x92 $x151)))
 (let (($x366 (and $x256 $x184)))
 (let (($x280 (= $x366 true)))
 (let ((?x8 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x44 (= (_ bv0 3) ?x8)))
 (let (($x170 (= $x44 true)))
 (let (($x239 (= $x170 true)))
 (let (($x375 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x375 true)))
 (let (($x181 (= $x290 true)))
 (let (($x148 (= $x181 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x127)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x179 $x226)))
 (let (($x19 (and $x26 $x57)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x95 $x19)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x186 $x50)))))))
 (let (($x176 (and $x132 $x149)))
 (let (($x230 (= $x176 true)))
 (let (($x119 (= $x230 true)))
 (let (($x42 (= $x119 true)))
 (let ((?x268 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x268)))
 (let (($x153 (= ?x224 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x356 (= $x153 true)))
 (let (($x251 (= $x356 true)))
 (let (($x118 (and $x251 $x42)))
 (let (($x111 (and $x118 $x148)))
 (let (($x308 (and $x111 $x239)))
 (let (($x180 (and $x308 $x280)))
 (let (($x76 (and $x180 $x64)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x126 (and $x292 $x76)))
 (let ((?x215 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x264 (bvugt ?x215 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x215 (_ bv3 32)))))
 (let (($x123 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x264)))))))
 (let (($x303 (=> (and $x159 (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x13 $x264)))))))
 (let (($x66 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x219 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x87 (=> $x219 (or false (or false (and true (or $x311 $x66)))))))
 (let (($x175 (=> (and $x159 $x219) (or false (or false (and true (or $x311 $x66)))))))
 (let (($x83 (and $x175 $x303)))
 (let (($x276 (and $x83 $x126)))
 (let (($x253 (=> $x276 $x84)))
 (not $x253)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 127
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x262 (= input.spec-%var-sum-0.L3%5%bbentry input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x151 (= $x262 true)))
 (let (($x256 (= $x151 true)))
 (let (($x134 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (ite $x134 (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge ?x111 (_ bv1 32))))
 (let (($x44 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x239 (= $x44 $x170)))
 (let (($x48 (= ?x111 (_ bv0 32))))
 (let (($x125 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x8 (= $x125 $x48)))
 (let (($x308 (and $x8 $x239)))
 (let (($x245 (= $x308 true)))
 (let (($x176 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x230 (ite $x176 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x230 (_ bv1 32))))
 (let (($x118 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x375 (= $x118 $x116)))
 (let (($x119 (= ?x230 (_ bv0 32))))
 (let (($x19 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x42 (= $x19 $x119)))
 (let (($x290 (and $x42 $x375)))
 (let (($x181 (= $x290 true)))
 (let ((?x206 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x206)))
 (let (($x167 (= ?x95 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x226 (= $x167 true)))
 (let (($x26 (= $x226 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x81)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x356 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (and $x224 $x356)))
 (let (($x272 (and $x251 $x131)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x166 $x272)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x268 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x123)))))))
 (let (($x186 (and $x268 $x286)))
 (let (($x50 (= $x186 true)))
 (let (($x109 (= $x50 true)))
 (let (($x114 (= $x109 true)))
 (let ((?x201 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x301 (= (_ bv0 3) ?x201)))
 (let (($x137 (= $x301 true)))
 (let (($x87 (= $x137 true)))
 (let (($x86 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x37 (= $x86 true)))
 (let (($x311 (= $x37 true)))
 (let (($x77 (= $x311 true)))
 (let (($x82 (= $x134 true)))
 (let (($x304 (= $x82 true)))
 (let (($x219 (= $x304 true)))
 (let (($x66 (and $x219 $x77)))
 (let (($x175 (and $x66 $x87)))
 (let (($x195 (and $x175 $x114)))
 (let (($x127 (and $x195 $x26)))
 (let (($x148 (and $x127 $x181)))
 (let (($x92 (and $x148 $x245)))
 (let (($x75 (and $x125 $x92)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x208 (and $x105 $x75)))
 (let (($x135 (=> $x208 $x256)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x262 (= input.spec-%var-sum-0.L3%5%bbentry input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x151 (= $x262 true)))
 (let (($x256 (= $x151 true)))
 (let (($x134 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x111 (ite $x134 (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge ?x111 (_ bv1 32))))
 (let (($x44 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x239 (= $x44 $x170)))
 (let (($x48 (= ?x111 (_ bv0 32))))
 (let (($x125 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x8 (= $x125 $x48)))
 (let (($x308 (and $x8 $x239)))
 (let (($x245 (= $x308 true)))
 (let (($x176 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x230 (ite $x176 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x230 (_ bv1 32))))
 (let (($x118 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x375 (= $x118 $x116)))
 (let (($x119 (= ?x230 (_ bv0 32))))
 (let (($x19 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x42 (= $x19 $x119)))
 (let (($x290 (and $x42 $x375)))
 (let (($x181 (= $x290 true)))
 (let ((?x206 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x206)))
 (let (($x167 (= ?x95 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x226 (= $x167 true)))
 (let (($x26 (= $x226 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x81)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x356 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (and $x224 $x356)))
 (let (($x272 (and $x251 $x131)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x166 $x272)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x268 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x123)))))))
 (let (($x186 (and $x268 $x286)))
 (let (($x50 (= $x186 true)))
 (let (($x109 (= $x50 true)))
 (let (($x114 (= $x109 true)))
 (let ((?x201 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x301 (= (_ bv0 3) ?x201)))
 (let (($x137 (= $x301 true)))
 (let (($x87 (= $x137 true)))
 (let (($x86 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x37 (= $x86 true)))
 (let (($x311 (= $x37 true)))
 (let (($x77 (= $x311 true)))
 (let (($x82 (= $x134 true)))
 (let (($x304 (= $x82 true)))
 (let (($x219 (= $x304 true)))
 (let (($x66 (and $x219 $x77)))
 (let (($x175 (and $x66 $x87)))
 (let (($x195 (and $x175 $x114)))
 (let (($x127 (and $x195 $x26)))
 (let (($x148 (and $x127 $x181)))
 (let (($x92 (and $x148 $x245)))
 (let (($x75 (and $x125 $x92)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x208 (and $x105 $x75)))
 (let (($x135 (=> $x208 $x256)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 128
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x55 (not $x105)))
 (let (($x253 (or $x105 $x55)))
 (let (($x315 (= $x253 true)))
 (let (($x196 (= $x315 true)))
 (let ((?x93 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x93 (_ bv1 32))))
 (let (($x283 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x76 (= $x283 $x64)))
 (let (($x31 (= ?x93 (_ bv0 32))))
 (let (($x307 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x49 (= $x307 $x31)))
 (let (($x126 (and $x49 $x76)))
 (let (($x276 (= $x126 true)))
 (let (($x30 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x215 (ite $x30 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x215 (_ bv1 32))))
 (let (($x366 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x180 (= $x366 $x280)))
 (let (($x185 (= ?x215 (_ bv0 32))))
 (let (($x256 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x184 (= $x256 $x185)))
 (let (($x38 (and $x184 $x180)))
 (let (($x237 (= $x38 true)))
 (let ((?x245 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x92 (= (_ bv0 3) ?x245)))
 (let (($x75 (= $x92 true)))
 (let (($x208 (= $x75 true)))
 (let (($x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x8 (= $x48 true)))
 (let (($x44 (= $x8 true)))
 (let (($x170 (= $x44 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x42)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x149 $x230)))
 (let (($x116 (and $x119 $x118)))
 (let (($x195 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x375 (and $x195 $x116)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x179)))))))
 (let (($x290 (and $x19 $x375)))
 (let (($x181 (= $x290 true)))
 (let (($x148 (= $x181 true)))
 (let (($x159 (= $x148 true)))
 (let ((?x81 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x81)))
 (let (($x286 (= ?x131 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x186 (= $x286 true)))
 (let (($x50 (= $x186 true)))
 (let (($x125 (and $x50 $x159)))
 (let (($x239 (and $x125 $x170)))
 (let (($x262 (and $x239 $x208)))
 (let (($x183 (and $x262 $x237)))
 (let (($x10 (and $x183 $x276)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x214 (and $x153 $x10)))
 (let ((?x265 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x83 (bvugt ?x265 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x265 (_ bv3 32)))))
 (let (($x224 (=> (bvule ?x265 (bvsub (bvadd ?x265 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x303 $x83)))))))
 (let (($x33 (=> (and $x55 (bvule ?x265 (bvsub (bvadd ?x265 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x303 $x83)))))))
 (let (($x137 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x264 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x225 (=> $x264 (or false (or false (and true (or $x301 $x137)))))))
 (let (($x219 (=> (and $x55 $x264) (or false (or false (and true (or $x301 $x137)))))))
 (let (($x7 (and $x219 $x33)))
 (let (($x84 (and $x7 $x214)))
 (let (($x295 (=> $x84 $x196)))
 (not $x295)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x55 (not $x105)))
 (let (($x253 (or $x105 $x55)))
 (let (($x315 (= $x253 true)))
 (let (($x196 (= $x315 true)))
 (let ((?x93 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x93 (_ bv1 32))))
 (let (($x283 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x76 (= $x283 $x64)))
 (let (($x31 (= ?x93 (_ bv0 32))))
 (let (($x307 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x49 (= $x307 $x31)))
 (let (($x126 (and $x49 $x76)))
 (let (($x276 (= $x126 true)))
 (let (($x30 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x215 (ite $x30 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x215 (_ bv1 32))))
 (let (($x366 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x180 (= $x366 $x280)))
 (let (($x185 (= ?x215 (_ bv0 32))))
 (let (($x256 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x184 (= $x256 $x185)))
 (let (($x38 (and $x184 $x180)))
 (let (($x237 (= $x38 true)))
 (let ((?x245 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x92 (= (_ bv0 3) ?x245)))
 (let (($x75 (= $x92 true)))
 (let (($x208 (= $x75 true)))
 (let (($x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x8 (= $x48 true)))
 (let (($x44 (= $x8 true)))
 (let (($x170 (= $x44 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x42)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x149 $x230)))
 (let (($x116 (and $x119 $x118)))
 (let (($x195 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x375 (and $x195 $x116)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x179)))))))
 (let (($x290 (and $x19 $x375)))
 (let (($x181 (= $x290 true)))
 (let (($x148 (= $x181 true)))
 (let (($x159 (= $x148 true)))
 (let ((?x81 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x81)))
 (let (($x286 (= ?x131 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x186 (= $x286 true)))
 (let (($x50 (= $x186 true)))
 (let (($x125 (and $x50 $x159)))
 (let (($x239 (and $x125 $x170)))
 (let (($x262 (and $x239 $x208)))
 (let (($x183 (and $x262 $x237)))
 (let (($x10 (and $x183 $x276)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x214 (and $x153 $x10)))
 (let ((?x265 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x83 (bvugt ?x265 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x265 (_ bv3 32)))))
 (let (($x224 (=> (bvule ?x265 (bvsub (bvadd ?x265 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x303 $x83)))))))
 (let (($x33 (=> (and $x55 (bvule ?x265 (bvsub (bvadd ?x265 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x303 $x83)))))))
 (let (($x137 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x264 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x225 (=> $x264 (or false (or false (and true (or $x301 $x137)))))))
 (let (($x219 (=> (and $x55 $x264) (or false (or false (and true (or $x301 $x137)))))))
 (let (($x7 (and $x219 $x33)))
 (let (($x84 (and $x7 $x214)))
 (let (($x295 (=> $x84 $x196)))
 (not $x295)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 129
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x303 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x303)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x265 $x166)))
 (let (($x187 (and $x123 $x83)))
 (let (($x311 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x292 (and $x311 $x187)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x219 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x137)))))))
 (let (($x48 (and $x219 $x292)))
 (let (($x8 (= $x48 true)))
 (let (($x44 (= $x8 true)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x42 (ite $x119 (_ bv0 32) (_ bv1 32))))
 (let (($x290 (bvuge ?x42 (_ bv1 32))))
 (let (($x375 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x181 (= $x375 $x290)))
 (let (($x118 (= ?x42 (_ bv0 32))))
 (let (($x230 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x116 (= $x230 $x118)))
 (let (($x148 (and $x116 $x181)))
 (let (($x159 (= $x148 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x228 (concat ?x286 (concat ?x251 ?x153)))))
 (let (($x19 (= ?x132 input.dst.llvm-%l)))
 (let (($x114 (= $x19 true)))
 (let (($x195 (= $x114 true)))
 (let (($x57 (= input.dst.llvm-%l ?x132)))
 (let (($x33 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x206 (and $x33 $x57)))
 (let (($x167 (and (and (and $x219 true) $x292) $x206)))
 (let (($x226 (= $x167 true)))
 (let (($x26 (= $x226 true)))
 (let (($x127 (= $x26 true)))
 (let (($x149 (and $x127 $x195)))
 (let (($x125 (and $x149 $x159)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x111 (and $x105 $x125)))
 (let (($x170 (=> $x111 $x44)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x303 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x303)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x265 $x166)))
 (let (($x187 (and $x123 $x83)))
 (let (($x311 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x292 (and $x311 $x187)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x219 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x137)))))))
 (let (($x48 (and $x219 $x292)))
 (let (($x8 (= $x48 true)))
 (let (($x44 (= $x8 true)))
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x42 (ite $x119 (_ bv0 32) (_ bv1 32))))
 (let (($x290 (bvuge ?x42 (_ bv1 32))))
 (let (($x375 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x181 (= $x375 $x290)))
 (let (($x118 (= ?x42 (_ bv0 32))))
 (let (($x230 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x116 (= $x230 $x118)))
 (let (($x148 (and $x116 $x181)))
 (let (($x159 (= $x148 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x228 (concat ?x286 (concat ?x251 ?x153)))))
 (let (($x19 (= ?x132 input.dst.llvm-%l)))
 (let (($x114 (= $x19 true)))
 (let (($x195 (= $x114 true)))
 (let (($x57 (= input.dst.llvm-%l ?x132)))
 (let (($x33 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x206 (and $x33 $x57)))
 (let (($x167 (and (and (and $x219 true) $x292) $x206)))
 (let (($x226 (= $x167 true)))
 (let (($x26 (= $x226 true)))
 (let (($x127 (= $x26 true)))
 (let (($x149 (and $x127 $x195)))
 (let (($x125 (and $x149 $x159)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x111 (and $x105 $x125)))
 (let (($x170 (=> $x111 $x44)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 130
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3859X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3859X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x93 (concat ?x307 (select input.dst.llvm-mem (bvadd input.ind-%var3859X (_ bv4 32))))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3859X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3859X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x126 (concat ?x76 (concat ?x49 ?x93))))
 (let (($x276 (= ?x126 ?x126)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x375 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x375 (_ bv1 32))))
 (let (($x10 (=> $x159 $x276)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3859X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3859X))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3859X (_ bv2 32))) ?x256)))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3859X (_ bv3 32))) ?x215)))
 (let (($x280 (= ?x366 ?x366)))
 (let (($x180 (=> $x159 $x280)))
 (let (($x245 (= $x159 $x159)))
 (let (($x290 (= ?x375 (_ bv0 32))))
 (let (($x308 (= $x290 $x290)))
 (let (($x117 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x55 (= false false)))
 (let (($x86 (=> $x290 $x55)))
 (let (($x196 (and (and (and (and (and $x86 $x117) $x308) $x245) $x180) $x10)))
 (let (($x239 (not true)))
 (let (($x295 (or $x239 $x196)))
 (let (($x170 (= true true)))
 (let (($x136 (and $x170 $x295)))
 (let (($x134 (= $x136 true)))
 (let (($x148 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x125 (= $x148 $x159)))
 (let (($x118 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x181 (= $x118 $x290)))
 (let (($x111 (and $x181 $x125)))
 (let (($x48 (= $x111 true)))
 (let ((?x228 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x132 (concat ?x153 (concat ?x272 ?x228)))))
 (let (($x149 (= ?x57 input.dst.llvm-%l)))
 (let (($x176 (= $x149 true)))
 (let (($x230 (= $x176 true)))
 (let (($x206 (= input.dst.llvm-%l ?x57)))
 (let (($x33 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x167 (and $x33 $x206)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x83)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (and $x63 $x123)))
 (let (($x292 (and $x303 $x187)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x238 $x292)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x265 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x189)))))))
 (let (($x127 (and (and (and $x265 true) $x179) $x167)))
 (let (($x19 (= $x127 true)))
 (let (($x114 (= $x19 true)))
 (let (($x195 (= $x114 true)))
 (let (($x119 (and $x195 $x230)))
 (let (($x8 (and $x119 $x48)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x44 (and $x105 $x8)))
 (let (($x109 (=> $x44 $x134)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3859X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3859X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x93 (concat ?x307 (select input.dst.llvm-mem (bvadd input.ind-%var3859X (_ bv4 32))))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3859X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3859X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x126 (concat ?x76 (concat ?x49 ?x93))))
 (let (($x276 (= ?x126 ?x126)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x375 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x375 (_ bv1 32))))
 (let (($x10 (=> $x159 $x276)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3859X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3859X))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3859X (_ bv2 32))) ?x256)))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3859X (_ bv3 32))) ?x215)))
 (let (($x280 (= ?x366 ?x366)))
 (let (($x180 (=> $x159 $x280)))
 (let (($x245 (= $x159 $x159)))
 (let (($x290 (= ?x375 (_ bv0 32))))
 (let (($x308 (= $x290 $x290)))
 (let (($x117 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x55 (= false false)))
 (let (($x86 (=> $x290 $x55)))
 (let (($x196 (and (and (and (and (and $x86 $x117) $x308) $x245) $x180) $x10)))
 (let (($x239 (not true)))
 (let (($x295 (or $x239 $x196)))
 (let (($x170 (= true true)))
 (let (($x136 (and $x170 $x295)))
 (let (($x134 (= $x136 true)))
 (let (($x148 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x125 (= $x148 $x159)))
 (let (($x118 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x181 (= $x118 $x290)))
 (let (($x111 (and $x181 $x125)))
 (let (($x48 (= $x111 true)))
 (let ((?x228 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x132 (concat ?x153 (concat ?x272 ?x228)))))
 (let (($x149 (= ?x57 input.dst.llvm-%l)))
 (let (($x176 (= $x149 true)))
 (let (($x230 (= $x176 true)))
 (let (($x206 (= input.dst.llvm-%l ?x57)))
 (let (($x33 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x167 (and $x33 $x206)))
 (let ((?x83 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x83)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (and $x63 $x123)))
 (let (($x292 (and $x303 $x187)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x238 $x292)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x265 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x189)))))))
 (let (($x127 (and (and (and $x265 true) $x179) $x167)))
 (let (($x19 (= $x127 true)))
 (let (($x114 (= $x19 true)))
 (let (($x195 (= $x114 true)))
 (let (($x119 (and $x195 $x230)))
 (let (($x8 (and $x119 $x48)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x44 (and $x105 $x8)))
 (let (($x109 (=> $x44 $x134)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 131
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x214 (= (_ bv0 3) ?x117)))
 (let (($x308 (= $x214 true)))
 (let (($x181 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x148 (ite $x181 (_ bv0 32) (_ bv1 32))))
 (let (($x48 (bvuge ?x148 (_ bv1 32))))
 (let (($x111 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x8 (= $x111 $x48)))
 (let (($x159 (= ?x148 (_ bv0 32))))
 (let (($x290 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x125 (= $x290 $x159)))
 (let (($x44 (and $x125 $x8)))
 (let (($x170 (= $x44 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x206 (concat ?x57 (concat ?x228 (concat ?x251 ?x132)))))
 (let (($x119 (= ?x206 input.dst.llvm-%l)))
 (let (($x42 (= $x119 true)))
 (let (($x118 (= $x42 true)))
 (let (($x167 (= input.dst.llvm-%l ?x206)))
 (let (($x33 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x127 (and $x33 $x167)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x292 (= (_ bv0 32) ?x187)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x303 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x130 $x303)))
 (let (($x179 (and $x83 $x292)))
 (let (($x201 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x201 $x179)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x95)))))))
 (let (($x195 (and (and (and $x63 true) $x26) $x127)))
 (let (($x149 (= $x195 true)))
 (let (($x176 (= $x149 true)))
 (let (($x230 (= $x176 true)))
 (let (($x116 (and $x230 $x118)))
 (let (($x239 (and $x116 $x170)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x55 (and $x105 $x239)))
 (let (($x84 (=> $x55 $x308)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x214 (= (_ bv0 3) ?x117)))
 (let (($x308 (= $x214 true)))
 (let (($x181 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x148 (ite $x181 (_ bv0 32) (_ bv1 32))))
 (let (($x48 (bvuge ?x148 (_ bv1 32))))
 (let (($x111 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x8 (= $x111 $x48)))
 (let (($x159 (= ?x148 (_ bv0 32))))
 (let (($x290 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x125 (= $x290 $x159)))
 (let (($x44 (and $x125 $x8)))
 (let (($x170 (= $x44 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x206 (concat ?x57 (concat ?x228 (concat ?x251 ?x132)))))
 (let (($x119 (= ?x206 input.dst.llvm-%l)))
 (let (($x42 (= $x119 true)))
 (let (($x118 (= $x42 true)))
 (let (($x167 (= input.dst.llvm-%l ?x206)))
 (let (($x33 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x127 (and $x33 $x167)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x292 (= (_ bv0 32) ?x187)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x303 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x130 $x303)))
 (let (($x179 (and $x83 $x292)))
 (let (($x201 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x201 $x179)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x95)))))))
 (let (($x195 (and (and (and $x63 true) $x26) $x127)))
 (let (($x149 (= $x195 true)))
 (let (($x176 (= $x149 true)))
 (let (($x230 (= $x176 true)))
 (let (($x116 (and $x230 $x118)))
 (let (($x239 (and $x116 $x170)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x55 (and $x105 $x239)))
 (let (($x84 (=> $x55 $x308)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 132
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x245 (= $x84 true)))
 (let (($x264 (= $x245 true)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x111 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge ?x111 (_ bv1 32))))
 (let (($x44 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x239 (= $x44 $x170)))
 (let (($x48 (= ?x111 (_ bv0 32))))
 (let (($x159 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x8 (= $x159 $x48)))
 (let (($x55 (and $x8 $x239)))
 (let (($x86 (= $x55 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x167 (concat ?x206 (concat ?x132 (concat ?x272 ?x57)))))
 (let (($x116 (= ?x167 input.dst.llvm-%l)))
 (let (($x375 (= $x116 true)))
 (let (($x290 (= $x375 true)))
 (let (($x127 (= input.dst.llvm-%l ?x167)))
 (let (($x33 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x195 (and $x33 $x127)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x292)))
 (let ((?x303 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x303)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x166 $x83)))
 (let (($x26 (and $x187 $x179)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x137 $x26)))
 (let (($x226 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x265 $x226)))))))
 (let (($x230 (and (and (and $x130 true) $x114) $x195)))
 (let (($x119 (= $x230 true)))
 (let (($x42 (= $x119 true)))
 (let (($x118 (= $x42 true)))
 (let (($x181 (and $x118 $x290)))
 (let (($x117 (and $x181 $x86)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x214 (and $x105 $x117)))
 (let (($x66 (=> $x214 $x264)))
 (not $x66)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x245 (= $x84 true)))
 (let (($x264 (= $x245 true)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x111 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge ?x111 (_ bv1 32))))
 (let (($x44 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x239 (= $x44 $x170)))
 (let (($x48 (= ?x111 (_ bv0 32))))
 (let (($x159 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x8 (= $x159 $x48)))
 (let (($x55 (and $x8 $x239)))
 (let (($x86 (= $x55 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x167 (concat ?x206 (concat ?x132 (concat ?x272 ?x57)))))
 (let (($x116 (= ?x167 input.dst.llvm-%l)))
 (let (($x375 (= $x116 true)))
 (let (($x290 (= $x375 true)))
 (let (($x127 (= input.dst.llvm-%l ?x167)))
 (let (($x33 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x195 (and $x33 $x127)))
 (let ((?x292 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x292)))
 (let ((?x303 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x303)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x166 $x83)))
 (let (($x26 (and $x187 $x179)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x137 $x26)))
 (let (($x226 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x265 $x226)))))))
 (let (($x230 (and (and (and $x130 true) $x114) $x195)))
 (let (($x119 (= $x230 true)))
 (let (($x42 (= $x119 true)))
 (let (($x118 (= $x42 true)))
 (let (($x181 (and $x118 $x290)))
 (let (($x117 (and $x181 $x86)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x214 (and $x105 $x117)))
 (let (($x66 (=> $x214 $x264)))
 (not $x66)))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 133
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3884X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3884X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x49 (concat ?x31 (select input.dst.llvm-mem (bvadd input.ind-%var3884X (_ bv4 32))))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3884X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x283 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3884X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x126 (concat ?x283 (concat ?x307 ?x49))))
 (let (($x276 (= ?x126 ?x126)))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x44 (ite $x8 (_ bv0 32) (_ bv1 32))))
 (let (($x86 (bvuge ?x44 (_ bv1 32))))
 (let (($x10 (=> $x86 $x276)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3884X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3884X))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3884X (_ bv2 32))) ?x262)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3884X (_ bv3 32))) ?x256)))
 (let (($x180 (= ?x280 ?x280)))
 (let (($x315 (=> $x86 $x180)))
 (let (($x253 (= $x86 $x86)))
 (let (($x170 (= ?x44 (_ bv0 32))))
 (let (($x81 (= $x170 $x170)))
 (let (($x175 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x186 (= false false)))
 (let (($x301 (=> $x170 $x186)))
 (let (($x109 (and (and (and (and (and $x301 $x175) $x81) $x253) $x315) $x10)))
 (let (($x66 (not true)))
 (let (($x304 (or $x66 $x109)))
 (let (($x264 (= true true)))
 (let (($x92 (and $x264 $x304)))
 (let (($x82 (= $x92 true)))
 (let (($x55 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x117 (= $x55 $x86)))
 (let (($x48 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x239 (= $x48 $x170)))
 (let (($x214 (and $x239 $x117)))
 (let (($x308 (= $x214 true)))
 (let ((?x206 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x167 (concat ?x57 (concat ?x251 ?x206)))))
 (let (($x181 (= ?x127 input.dst.llvm-%l)))
 (let (($x148 (= $x181 true)))
 (let (($x159 (= $x148 true)))
 (let (($x195 (= input.dst.llvm-%l ?x127)))
 (let (($x33 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x230 (and $x33 $x195)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x179)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x292 (and $x123 $x187)))
 (let (($x114 (and $x292 $x26)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x189 $x114)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x19)))))))
 (let (($x118 (and (and (and $x166 true) $x176) $x230)))
 (let (($x116 (= $x118 true)))
 (let (($x375 (= $x116 true)))
 (let (($x290 (= $x375 true)))
 (let (($x125 (and $x290 $x159)))
 (let (($x84 (and $x125 $x308)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x245 (and $x105 $x84)))
 (let (($x77 (=> $x245 $x82)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3884X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3884X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x49 (concat ?x31 (select input.dst.llvm-mem (bvadd input.ind-%var3884X (_ bv4 32))))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3884X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x283 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3884X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x126 (concat ?x283 (concat ?x307 ?x49))))
 (let (($x276 (= ?x126 ?x126)))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x44 (ite $x8 (_ bv0 32) (_ bv1 32))))
 (let (($x86 (bvuge ?x44 (_ bv1 32))))
 (let (($x10 (=> $x86 $x276)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3884X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3884X))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3884X (_ bv2 32))) ?x262)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3884X (_ bv3 32))) ?x256)))
 (let (($x180 (= ?x280 ?x280)))
 (let (($x315 (=> $x86 $x180)))
 (let (($x253 (= $x86 $x86)))
 (let (($x170 (= ?x44 (_ bv0 32))))
 (let (($x81 (= $x170 $x170)))
 (let (($x175 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x186 (= false false)))
 (let (($x301 (=> $x170 $x186)))
 (let (($x109 (and (and (and (and (and $x301 $x175) $x81) $x253) $x315) $x10)))
 (let (($x66 (not true)))
 (let (($x304 (or $x66 $x109)))
 (let (($x264 (= true true)))
 (let (($x92 (and $x264 $x304)))
 (let (($x82 (= $x92 true)))
 (let (($x55 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x117 (= $x55 $x86)))
 (let (($x48 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x239 (= $x48 $x170)))
 (let (($x214 (and $x239 $x117)))
 (let (($x308 (= $x214 true)))
 (let ((?x206 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x167 (concat ?x57 (concat ?x251 ?x206)))))
 (let (($x181 (= ?x127 input.dst.llvm-%l)))
 (let (($x148 (= $x181 true)))
 (let (($x159 (= $x148 true)))
 (let (($x195 (= input.dst.llvm-%l ?x127)))
 (let (($x33 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x230 (and $x33 $x195)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x179)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x292 (and $x123 $x187)))
 (let (($x114 (and $x292 $x26)))
 (let (($x189 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x189 $x114)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x19)))))))
 (let (($x118 (and (and (and $x166 true) $x176) $x230)))
 (let (($x116 (= $x118 true)))
 (let (($x375 (= $x116 true)))
 (let (($x290 (= $x375 true)))
 (let (($x125 (and $x290 $x159)))
 (let (($x84 (and $x125 $x308)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x245 (and $x105 $x84)))
 (let (($x77 (=> $x245 $x82)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
==query_number: 134
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3912X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3912X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x266 (concat ?x325 (select input.dst.llvm-mem (bvadd input.ind-%var3912X (_ bv4 32))))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3912X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3912X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x101 (concat ?x35 (concat ?x124 ?x266))))
 (let (($x220 (= ?x101 ?x101)))
 (let ((?x63 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x288))))
 (let (($x287 (= (_ bv0 32) ?x278)))
 (let ((?x190 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x344 (bvuge ?x190 (_ bv1 32))))
 (let (($x218 (=> $x344 $x220)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3912X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3912X))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3912X (_ bv2 32))) ?x152)))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3912X (_ bv3 32))) ?x269)))
 (let (($x247 (= ?x252 ?x252)))
 (let (($x207 (=> $x344 $x247)))
 (let ((?x225 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x126))))
 (let (($x328 (= (_ bv0 32) ?x82)))
 (let ((?x46 (ite $x328 (_ bv0 32) (_ bv1 32))))
 (let (($x353 (bvuge ?x46 (_ bv1 32))))
 (let (($x191 (= $x344 $x353)))
 (let (($x267 (= ?x46 (_ bv0 32))))
 (let (($x443 (= ?x190 (_ bv0 32))))
 (let (($x192 (= $x443 $x267)))
 (let (($x263 (and (and (and (= ?x278 ?x82) (=> $x443 (= false false))) $x192) $x191)))
 (let (($x12 (and (and $x263 $x207) $x218)))
 (let (($x43 (not true)))
 (let (($x357 (or $x43 $x12)))
 (let (($x28 (= true true)))
 (let (($x241 (and $x28 $x357)))
 (let (($x23 (= $x241 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x106 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x54 (bvuge ?x106 (_ bv1 32))))
 (let (($x356 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x177 (= $x356 $x54)))
 (let (($x231 (= ?x106 (_ bv0 32))))
 (let (($x72 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x94 (= $x72 $x231)))
 (let (($x182 (and $x94 $x177)))
 (let (($x204 (= $x182 true)))
 (let (($x141 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x147 (ite $x141 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x147 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x161 (= $x140 $x156)))
 (let (($x16 (= ?x147 (_ bv0 32))))
 (let (($x320 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (= $x320 $x16)))
 (let (($x168 (and $x22 $x161)))
 (let (($x53 (= $x168 true)))
 (let ((?x61 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x90 (= (_ bv0 3) ?x61)))
 (let (($x139 (= $x90 true)))
 (let (($x306 (= $x139 true)))
 (let (($x193 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x184 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x180 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x184) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x184))))
 (let (($x315 (and true $x180)))
 (let (($x219 (and $x180 $x315)))
 (let (($x75 (= (bvand ?x82 (_ bv4294967288 32)) ?x82)))
 (let (($x76 (= (bvand ?x225 (_ bv4294967292 32)) ?x225)))
 (let (($x87 (and $x76 $x75)))
 (let (($x283 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x225 (bvsub ?x225 (_ bv4 32))) (bvult ?x225 (bvsub ?x225 (_ bv4 32))))))
 (let (($x39 (and (and (and (and (and $x315 $x283) $x76) $x87) $x219) $x193)))
 (let (($x255 (= true $x39)))
 (let (($x13 (not $x105)))
 (let (($x165 (=> $x13 $x255)))
 (let (($x198 (= $x165 true)))
 (let (($x200 (= $x198 true)))
 (let (($x312 (= $x200 true)))
 (let (($x366 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x151 (= $x366 true)))
 (let (($x208 (= $x151 true)))
 (let (($x135 (= $x208 true)))
 (let (($x295 (= $x13 true)))
 (let (($x253 (= $x295 true)))
 (let (($x136 (= $x253 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x245 (= (_ bv0 32) ?x84)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x308 (and $x86 $x214)))
 (let (($x264 (and $x308 $x245)))
 (let (($x290 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x290 $x264)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x111)))))))
 (let (($x186 (and $x55 $x66)))
 (let (($x301 (= $x186 true)))
 (let (($x175 (= $x301 true)))
 (let (($x196 (= $x175 true)))
 (let ((?x132 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x228 (bvneg ?x132)))
 (let (($x195 (= ?x228 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x230 (= $x195 true)))
 (let (($x118 (= $x230 true)))
 (let (($x81 (and $x118 $x196)))
 (let (($x185 (and $x81 $x136)))
 (let (($x30 (and $x185 $x135)))
 (let (($x313 (and $x30 $x312)))
 (let (($x45 (and $x313 $x306)))
 (let (($x261 (and $x45 $x53)))
 (let (($x174 (and $x261 $x204)))
 (let (($x58 (and $x356 $x174)))
 (let (($x272 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x158 (and $x272 $x58)))
 (let (($x268 (bvugt ?x225 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd ?x225 (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x167 (=> (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x268)))))))
 (let (($x292 (=> (and $x13 (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x42 $x268)))))))
 (let (($x119 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x187 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x63 (_ bv1 32))) (or false (or false (and true (or $x166 $x119)))))))
 (let (($x95 (=> (and $x13 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x63 (_ bv1 32)))) (or false (or false (and true (or $x166 $x119)))))))
 (let (($x179 (and $x95 $x292)))
 (let (($x173 (and $x179 $x158)))
 (let (($x293 (=> $x173 $x23)))
 (not $x293)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3912X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3912X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x266 (concat ?x325 (select input.dst.llvm-mem (bvadd input.ind-%var3912X (_ bv4 32))))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3912X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3912X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x101 (concat ?x35 (concat ?x124 ?x266))))
 (let (($x220 (= ?x101 ?x101)))
 (let ((?x63 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x288))))
 (let (($x287 (= (_ bv0 32) ?x278)))
 (let ((?x190 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x344 (bvuge ?x190 (_ bv1 32))))
 (let (($x218 (=> $x344 $x220)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3912X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3912X))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3912X (_ bv2 32))) ?x152)))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3912X (_ bv3 32))) ?x269)))
 (let (($x247 (= ?x252 ?x252)))
 (let (($x207 (=> $x344 $x247)))
 (let ((?x225 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x126))))
 (let (($x328 (= (_ bv0 32) ?x82)))
 (let ((?x46 (ite $x328 (_ bv0 32) (_ bv1 32))))
 (let (($x353 (bvuge ?x46 (_ bv1 32))))
 (let (($x191 (= $x344 $x353)))
 (let (($x267 (= ?x46 (_ bv0 32))))
 (let (($x443 (= ?x190 (_ bv0 32))))
 (let (($x192 (= $x443 $x267)))
 (let (($x263 (and (and (and (= ?x278 ?x82) (=> $x443 (= false false))) $x192) $x191)))
 (let (($x12 (and (and $x263 $x207) $x218)))
 (let (($x43 (not true)))
 (let (($x357 (or $x43 $x12)))
 (let (($x28 (= true true)))
 (let (($x241 (and $x28 $x357)))
 (let (($x23 (= $x241 true)))
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x106 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x54 (bvuge ?x106 (_ bv1 32))))
 (let (($x356 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x177 (= $x356 $x54)))
 (let (($x231 (= ?x106 (_ bv0 32))))
 (let (($x72 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x94 (= $x72 $x231)))
 (let (($x182 (and $x94 $x177)))
 (let (($x204 (= $x182 true)))
 (let (($x141 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x147 (ite $x141 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x147 (_ bv1 32))))
 (let (($x140 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x161 (= $x140 $x156)))
 (let (($x16 (= ?x147 (_ bv0 32))))
 (let (($x320 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (= $x320 $x16)))
 (let (($x168 (and $x22 $x161)))
 (let (($x53 (= $x168 true)))
 (let ((?x61 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x90 (= (_ bv0 3) ?x61)))
 (let (($x139 (= $x90 true)))
 (let (($x306 (= $x139 true)))
 (let (($x193 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x184 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x180 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x184) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x184))))
 (let (($x315 (and true $x180)))
 (let (($x219 (and $x180 $x315)))
 (let (($x75 (= (bvand ?x82 (_ bv4294967288 32)) ?x82)))
 (let (($x76 (= (bvand ?x225 (_ bv4294967292 32)) ?x225)))
 (let (($x87 (and $x76 $x75)))
 (let (($x283 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x225 (bvsub ?x225 (_ bv4 32))) (bvult ?x225 (bvsub ?x225 (_ bv4 32))))))
 (let (($x39 (and (and (and (and (and $x315 $x283) $x76) $x87) $x219) $x193)))
 (let (($x255 (= true $x39)))
 (let (($x13 (not $x105)))
 (let (($x165 (=> $x13 $x255)))
 (let (($x198 (= $x165 true)))
 (let (($x200 (= $x198 true)))
 (let (($x312 (= $x200 true)))
 (let (($x366 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x151 (= $x366 true)))
 (let (($x208 (= $x151 true)))
 (let (($x135 (= $x208 true)))
 (let (($x295 (= $x13 true)))
 (let (($x253 (= $x295 true)))
 (let (($x136 (= $x253 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x245 (= (_ bv0 32) ?x84)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x308 (and $x86 $x214)))
 (let (($x264 (and $x308 $x245)))
 (let (($x290 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x290 $x264)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x111)))))))
 (let (($x186 (and $x55 $x66)))
 (let (($x301 (= $x186 true)))
 (let (($x175 (= $x301 true)))
 (let (($x196 (= $x175 true)))
 (let ((?x132 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x228 (bvneg ?x132)))
 (let (($x195 (= ?x228 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x230 (= $x195 true)))
 (let (($x118 (= $x230 true)))
 (let (($x81 (and $x118 $x196)))
 (let (($x185 (and $x81 $x136)))
 (let (($x30 (and $x185 $x135)))
 (let (($x313 (and $x30 $x312)))
 (let (($x45 (and $x313 $x306)))
 (let (($x261 (and $x45 $x53)))
 (let (($x174 (and $x261 $x204)))
 (let (($x58 (and $x356 $x174)))
 (let (($x272 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x158 (and $x272 $x58)))
 (let (($x268 (bvugt ?x225 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd ?x225 (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x167 (=> (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x268)))))))
 (let (($x292 (=> (and $x13 (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x42 $x268)))))))
 (let (($x119 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x187 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x63 (_ bv1 32))) (or false (or false (and true (or $x166 $x119)))))))
 (let (($x95 (=> (and $x13 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x63 (_ bv1 32)))) (or false (or false (and true (or $x166 $x119)))))))
 (let (($x179 (and $x95 $x292)))
 (let (($x173 (and $x179 $x158)))
 (let (($x293 (=> $x173 $x23)))
 (not $x293)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171699/query
