==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x10 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x10 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (= true false)))
 (let (($x114 (= $x113 true)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x89 (concat ?x88 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x95 (concat ?x94 (concat ?x91 ?x89))))
 (let (($x96 (= (_ bv0 32) ?x95)))
 (let ((?x97 (ite $x96 (_ bv0 32) (_ bv1 32))))
 (let (($x102 (bvuge ?x97 (_ bv1 32))))
 (let (($x101 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x103 (= $x101 $x102)))
 (let (($x65 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x104 (=> $x65 $x103)))
 (let (($x98 (= ?x97 (_ bv0 32))))
 (let (($x83 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x99 (= $x83 $x98)))
 (let (($x100 (=> $x65 $x99)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x73)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x76)))
 (let (($x80 (= input.spec-%var-l-1.2.0 ?x79)))
 (let (($x81 (=> $x65 $x80)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x60 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x60 (_ bv1 32))))
 (let (($x67 (= $x65 $x66)))
 (let (($x63 (= false false)))
 (let (($x58 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x64 (=> $x58 $x63)))
 (let (($x61 (= ?x60 (_ bv0 32))))
 (let (($x62 (= $x58 $x61)))
 (let (($x109 (and (and (and (and (and $x62 $x64) $x67) $x81) $x100) $x104)))
 (let (($x110 (= $x109 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x50 (concat ?x33 (concat ?x17 ?x41)))))
 (let (($x53 (= ?x51 input.dst.llvm-%l)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x37)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x42 $x38)))
 (let (($x44 (and $x8 $x18)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x27 $x44)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x49)))))))
 (let (($x11 (and $x40 $x5)))
 (let (($x6 (= $x11 true)))
 (let (($x39 (= $x6 true)))
 (let (($x34 (= $x39 true)))
 (let (($x56 (and $x34 $x55)))
 (let (($x111 (and $x56 $x110)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x112 (and $x46 $x111)))
 (let (($x115 (=> $x112 $x114)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (= true false)))
 (let (($x114 (= $x113 true)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x89 (concat ?x88 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x95 (concat ?x94 (concat ?x91 ?x89))))
 (let (($x96 (= (_ bv0 32) ?x95)))
 (let ((?x97 (ite $x96 (_ bv0 32) (_ bv1 32))))
 (let (($x102 (bvuge ?x97 (_ bv1 32))))
 (let (($x101 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x103 (= $x101 $x102)))
 (let (($x65 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x104 (=> $x65 $x103)))
 (let (($x98 (= ?x97 (_ bv0 32))))
 (let (($x83 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x99 (= $x83 $x98)))
 (let (($x100 (=> $x65 $x99)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x73)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x76)))
 (let (($x80 (= input.spec-%var-l-1.2.0 ?x79)))
 (let (($x81 (=> $x65 $x80)))
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x60 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x60 (_ bv1 32))))
 (let (($x67 (= $x65 $x66)))
 (let (($x63 (= false false)))
 (let (($x58 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x64 (=> $x58 $x63)))
 (let (($x61 (= ?x60 (_ bv0 32))))
 (let (($x62 (= $x58 $x61)))
 (let (($x109 (and (and (and (and (and $x62 $x64) $x67) $x81) $x100) $x104)))
 (let (($x110 (= $x109 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x50 (concat ?x33 (concat ?x17 ?x41)))))
 (let (($x53 (= ?x51 input.dst.llvm-%l)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x37)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x42 $x38)))
 (let (($x44 (and $x8 $x18)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x27 $x44)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x49)))))))
 (let (($x11 (and $x40 $x5)))
 (let (($x6 (= $x11 true)))
 (let (($x39 (= $x6 true)))
 (let (($x34 (= $x39 true)))
 (let (($x56 (and $x34 $x55)))
 (let (($x111 (and $x56 $x110)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x112 (and $x46 $x111)))
 (let (($x115 (=> $x112 $x114)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08000004)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xff)
                                #x08000007
                                #x07)
                         #x07ffd5db
                         #xd5)
                  #x08000004
                  #xd5)))
  (store (store (store (store a!1 #x07ffd5d9 #xd5) #x07ffd5dc #xd5)
                #x08000005
                #xd5)
         #x07ffd5da
         #xd5)))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x07ffd5d5)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08000007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (= true false)))
 (let (($x120 (= $x119 true)))
 (let (($x108 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x66 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x110 (and $x66 $x108)))
 (let (($x111 (not $x110)))
 (let (($x83 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x104 (and $x66 $x83)))
 (let (($x109 (not $x104)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x91 (concat ?x90 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x95 (concat ?x92 (concat ?x88 ?x91))))
 (let (($x96 (= (_ bv0 32) ?x95)))
 (let ((?x97 (ite $x96 (_ bv0 32) (_ bv1 32))))
 (let (($x101 (bvuge ?x97 (_ bv1 32))))
 (let (($x102 (= $x108 $x101)))
 (let (($x103 (=> $x66 $x102)))
 (let (($x98 (= ?x97 (_ bv0 32))))
 (let (($x99 (= $x83 $x98)))
 (let (($x100 (=> $x66 $x99)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x73)))
 (let (($x81 (= input.spec-%var-l-1.2.0 ?x80)))
 (let (($x107 (=> $x66 $x81)))
 (let (($x61 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x62 (ite $x61 (_ bv0 32) (_ bv1 32))))
 (let (($x67 (bvuge ?x62 (_ bv1 32))))
 (let (($x106 (= $x66 $x67)))
 (let (($x105 (= false false)))
 (let (($x60 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x65 (=> $x60 $x105)))
 (let (($x63 (= ?x62 (_ bv0 32))))
 (let (($x64 (= $x60 $x63)))
 (let (($x35 (and (and (and (and (and (and $x64 $x65) $x106) $x107) $x100) $x103) $x109)))
 (let (($x7 (and $x35 $x111)))
 (let (($x30 (= $x7 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x52 (concat ?x28 (concat ?x33 ?x43)))))
 (let (($x55 (= ?x53 input.dst.llvm-%l)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x16)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x42 $x32)))
 (let (($x8 (and $x15 $x38)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x13 $x8)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x19)))))))
 (let (($x40 (and $x14 $x37)))
 (let (($x48 (= $x40 true)))
 (let (($x27 (= $x48 true)))
 (let (($x18 (= $x27 true)))
 (let (($x58 (and $x18 $x57)))
 (let (($x117 (and $x58 $x30)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x118 (and $x69 $x117)))
 (let (($x121 (=> $x118 $x120)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (= true false)))
 (let (($x120 (= $x119 true)))
 (let (($x108 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x66 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x110 (and $x66 $x108)))
 (let (($x111 (not $x110)))
 (let (($x83 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x104 (and $x66 $x83)))
 (let (($x109 (not $x104)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x91 (concat ?x90 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x95 (concat ?x92 (concat ?x88 ?x91))))
 (let (($x96 (= (_ bv0 32) ?x95)))
 (let ((?x97 (ite $x96 (_ bv0 32) (_ bv1 32))))
 (let (($x101 (bvuge ?x97 (_ bv1 32))))
 (let (($x102 (= $x108 $x101)))
 (let (($x103 (=> $x66 $x102)))
 (let (($x98 (= ?x97 (_ bv0 32))))
 (let (($x99 (= $x83 $x98)))
 (let (($x100 (=> $x66 $x99)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x73)))
 (let (($x81 (= input.spec-%var-l-1.2.0 ?x80)))
 (let (($x107 (=> $x66 $x81)))
 (let (($x61 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x62 (ite $x61 (_ bv0 32) (_ bv1 32))))
 (let (($x67 (bvuge ?x62 (_ bv1 32))))
 (let (($x106 (= $x66 $x67)))
 (let (($x105 (= false false)))
 (let (($x60 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x65 (=> $x60 $x105)))
 (let (($x63 (= ?x62 (_ bv0 32))))
 (let (($x64 (= $x60 $x63)))
 (let (($x35 (and (and (and (and (and (and $x64 $x65) $x106) $x107) $x100) $x103) $x109)))
 (let (($x7 (and $x35 $x111)))
 (let (($x30 (= $x7 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x52 (concat ?x28 (concat ?x33 ?x43)))))
 (let (($x55 (= ?x53 input.dst.llvm-%l)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x16)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (and $x42 $x32)))
 (let (($x8 (and $x15 $x38)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x13 $x8)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x19)))))))
 (let (($x40 (and $x14 $x37)))
 (let (($x48 (= $x40 true)))
 (let (($x27 (= $x48 true)))
 (let (($x18 (= $x27 true)))
 (let (($x58 (and $x18 $x57)))
 (let (($x117 (and $x58 $x30)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x118 (and $x69 $x117)))
 (let (($x121 (=> $x118 $x120)))
 (not $x121))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x57)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x37 $x59)))
 (let (($x58 (and $x20 $x16)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x34 $x58)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x60)))))))
 (let (($x120 (and $x33 $x39)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x91 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x95 ?x91))))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x115 (ite $x100 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x115 (_ bv1 32))))
 (let (($x103 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x104 (= $x103 $x116)))
 (let (($x76 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (=> $x76 $x104)))
 (let (($x108 (= ?x115 (_ bv0 32))))
 (let (($x92 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x101 (= $x92 $x108)))
 (let (($x102 (=> $x76 $x101)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x73)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x107)))
 (let (($x84 (= input.spec-%var-l-1.2.0 ?x83)))
 (let (($x85 (=> $x76 $x84)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x66 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x79 (bvuge ?x66 (_ bv1 32))))
 (let (($x72 (= $x76 $x79)))
 (let (($x113 (= false false)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x68 (=> $x65 $x113)))
 (let (($x67 (= ?x66 (_ bv0 32))))
 (let (($x106 (= $x65 $x67)))
 (let (($x30 (and (and (and (and (and $x106 $x68) $x72) $x85) $x102) $x109)))
 (let (($x117 (= $x30 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x31 (concat ?x22 (concat ?x8 ?x55)))))
 (let (($x17 (= input.dst.llvm-%l ?x49)))
 (let (($x45 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x41 (and $x45 $x17)))
 (let (($x54 (and (and (and $x33 true) $x39) $x41)))
 (let (($x62 (= $x54 true)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x118 (and $x64 $x117)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x119 (and $x46 $x118)))
 (let (($x77 (=> $x119 $x122)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x57)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x37 $x59)))
 (let (($x58 (and $x20 $x16)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x34 $x58)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x60)))))))
 (let (($x120 (and $x33 $x39)))
 (let (($x121 (= $x120 true)))
 (let (($x122 (= $x121 true)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x91 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x95 ?x91))))
 (let (($x100 (= (_ bv0 32) ?x99)))
 (let ((?x115 (ite $x100 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x115 (_ bv1 32))))
 (let (($x103 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x104 (= $x103 $x116)))
 (let (($x76 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (=> $x76 $x104)))
 (let (($x108 (= ?x115 (_ bv0 32))))
 (let (($x92 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x101 (= $x92 $x108)))
 (let (($x102 (=> $x76 $x101)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x73)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x107)))
 (let (($x84 (= input.spec-%var-l-1.2.0 ?x83)))
 (let (($x85 (=> $x76 $x84)))
 (let (($x112 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x66 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x79 (bvuge ?x66 (_ bv1 32))))
 (let (($x72 (= $x76 $x79)))
 (let (($x113 (= false false)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x68 (=> $x65 $x113)))
 (let (($x67 (= ?x66 (_ bv0 32))))
 (let (($x106 (= $x65 $x67)))
 (let (($x30 (and (and (and (and (and $x106 $x68) $x72) $x85) $x102) $x109)))
 (let (($x117 (= $x30 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x31 (concat ?x22 (concat ?x8 ?x55)))))
 (let (($x17 (= input.dst.llvm-%l ?x49)))
 (let (($x45 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x41 (and $x45 $x17)))
 (let (($x54 (and (and (and $x33 true) $x39) $x41)))
 (let (($x62 (= $x54 true)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x118 (and $x64 $x117)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x119 (and $x46 $x118)))
 (let (($x77 (=> $x119 $x122)))
 (not $x77)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x106 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x23 (= $x106 true)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x90 (concat ?x95 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x100 (concat ?x99 (concat ?x94 ?x90))))
 (let (($x115 (= (_ bv0 32) ?x100)))
 (let ((?x108 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x108 (_ bv1 32))))
 (let (($x103 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x104 (= $x103 $x116)))
 (let (($x72 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (=> $x72 $x104)))
 (let (($x101 (= ?x108 (_ bv0 32))))
 (let (($x87 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x102 (= $x87 $x101)))
 (let (($x7 (=> $x72 $x102)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x107)))
 (let (($x111 (= input.spec-%var-l-1.2.0 ?x85)))
 (let (($x89 (=> $x72 $x111)))
 (let ((?x113 (ite $x106 (_ bv0 32) (_ bv1 32))))
 (let (($x110 (bvuge ?x113 (_ bv1 32))))
 (let (($x70 (= $x72 $x110)))
 (let (($x76 (= false false)))
 (let (($x67 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x79 (=> $x67 $x76)))
 (let (($x68 (= ?x113 (_ bv0 32))))
 (let (($x35 (= $x67 $x68)))
 (let (($x120 (and (and (and (and (and $x35 $x79) $x70) $x89) $x7) $x109)))
 (let (($x121 (= $x120 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x49 (concat ?x55 (concat ?x18 ?x31)))))
 (let (($x41 (= input.dst.llvm-%l ?x17)))
 (let (($x45 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x54 (and $x45 $x41)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x16)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x40 $x20)))
 (let (($x39 (and $x57 $x58)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x53 $x39)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x61)))))))
 (let (($x64 (and (and (and $x37 true) $x47) $x54)))
 (let (($x105 (= $x64 true)))
 (let (($x65 (= $x105 true)))
 (let (($x112 (= $x65 true)))
 (let (($x122 (and $x112 $x121)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x77 (and $x46 $x122)))
 (let (($x74 (=> $x77 $x23)))
 (not $x74)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x106 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x23 (= $x106 true)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x90 (concat ?x95 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x100 (concat ?x99 (concat ?x94 ?x90))))
 (let (($x115 (= (_ bv0 32) ?x100)))
 (let ((?x108 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x108 (_ bv1 32))))
 (let (($x103 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x104 (= $x103 $x116)))
 (let (($x72 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (=> $x72 $x104)))
 (let (($x101 (= ?x108 (_ bv0 32))))
 (let (($x87 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x102 (= $x87 $x101)))
 (let (($x7 (=> $x72 $x102)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x107)))
 (let (($x111 (= input.spec-%var-l-1.2.0 ?x85)))
 (let (($x89 (=> $x72 $x111)))
 (let ((?x113 (ite $x106 (_ bv0 32) (_ bv1 32))))
 (let (($x110 (bvuge ?x113 (_ bv1 32))))
 (let (($x70 (= $x72 $x110)))
 (let (($x76 (= false false)))
 (let (($x67 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x79 (=> $x67 $x76)))
 (let (($x68 (= ?x113 (_ bv0 32))))
 (let (($x35 (= $x67 $x68)))
 (let (($x120 (and (and (and (and (and $x35 $x79) $x70) $x89) $x7) $x109)))
 (let (($x121 (= $x120 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x49 (concat ?x55 (concat ?x18 ?x31)))))
 (let (($x41 (= input.dst.llvm-%l ?x17)))
 (let (($x45 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x54 (and $x45 $x41)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x16)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x40 $x20)))
 (let (($x39 (and $x57 $x58)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x53 $x39)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x61)))))))
 (let (($x64 (and (and (and $x37 true) $x47) $x54)))
 (let (($x105 (= $x64 true)))
 (let (($x65 (= $x105 true)))
 (let (($x112 (= $x65 true)))
 (let (($x122 (and $x112 $x121)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x77 (and $x46 $x122)))
 (let (($x74 (=> $x77 $x23)))
 (not $x74)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_27)
(function @fun_27
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_27 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x04)
                                #x04000004
                                #x00)
                         #x04000005
                         #x00)
                  #x04000001
                  #x00)))
  (store (store (store (store a!1 #x04000000 #x00) #x04000002 #x00)
                #x04000006
                #x00)
         #x04000007
         #x00)))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x50 (= $x35 true)))
 (let (($x103 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x70 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x122 (and $x70 $x103)))
 (let (($x77 (not $x122)))
 (let (($x88 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x120 (and $x70 $x88)))
 (let (($x121 (not $x120)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x86 (concat ?x94 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x115 (concat ?x100 (concat ?x98 ?x86))))
 (let (($x108 (= (_ bv0 32) ?x115)))
 (let ((?x101 (ite $x108 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x101 (_ bv1 32))))
 (let (($x104 (= $x103 $x116)))
 (let (($x109 (=> $x70 $x104)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x7 (= $x88 $x102)))
 (let (($x119 (=> $x70 $x7)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x78)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x107)))
 (let (($x118 (= input.spec-%var-l-1.2.0 ?x89)))
 (let (($x92 (=> $x70 $x118)))
 (let ((?x76 (ite $x35 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x76 (_ bv1 32))))
 (let (($x114 (= $x70 $x117)))
 (let (($x72 (= false false)))
 (let (($x68 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x110 (=> $x68 $x72)))
 (let (($x79 (= ?x76 (_ bv0 32))))
 (let (($x30 (= $x68 $x79)))
 (let (($x25 (and (and (and (and (and (and $x30 $x110) $x114) $x92) $x119) $x109) $x121)))
 (let (($x42 (and $x25 $x77)))
 (let (($x69 (= $x42 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x17 (concat ?x31 (concat ?x8 ?x49)))))
 (let (($x54 (= input.dst.llvm-%l ?x41)))
 (let (($x45 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x64 (and $x45 $x54)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x58)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x13 $x57)))
 (let (($x47 (and $x16 $x39)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x32 $x47)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x19)))))))
 (let (($x112 (and (and (and $x40 true) $x63) $x64)))
 (let (($x66 (= $x112 true)))
 (let (($x67 (= $x66 true)))
 (let (($x106 (= $x67 true)))
 (let (($x43 (and $x106 $x69)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x29 (and $x46 $x43)))
 (let (($x123 (=> $x29 $x50)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x50 (= $x35 true)))
 (let (($x103 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x70 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x122 (and $x70 $x103)))
 (let (($x77 (not $x122)))
 (let (($x88 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x120 (and $x70 $x88)))
 (let (($x121 (not $x120)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x86 (concat ?x94 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x115 (concat ?x100 (concat ?x98 ?x86))))
 (let (($x108 (= (_ bv0 32) ?x115)))
 (let ((?x101 (ite $x108 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (bvuge ?x101 (_ bv1 32))))
 (let (($x104 (= $x103 $x116)))
 (let (($x109 (=> $x70 $x104)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x7 (= $x88 $x102)))
 (let (($x119 (=> $x70 $x7)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x78)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x107)))
 (let (($x118 (= input.spec-%var-l-1.2.0 ?x89)))
 (let (($x92 (=> $x70 $x118)))
 (let ((?x76 (ite $x35 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x76 (_ bv1 32))))
 (let (($x114 (= $x70 $x117)))
 (let (($x72 (= false false)))
 (let (($x68 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x110 (=> $x68 $x72)))
 (let (($x79 (= ?x76 (_ bv0 32))))
 (let (($x30 (= $x68 $x79)))
 (let (($x25 (and (and (and (and (and (and $x30 $x110) $x114) $x92) $x119) $x109) $x121)))
 (let (($x42 (and $x25 $x77)))
 (let (($x69 (= $x42 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x17 (concat ?x31 (concat ?x8 ?x49)))))
 (let (($x54 (= input.dst.llvm-%l ?x41)))
 (let (($x45 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x64 (and $x45 $x54)))
 (let ((?x58 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x58)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x13 $x57)))
 (let (($x47 (and $x16 $x39)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x32 $x47)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x19)))))))
 (let (($x112 (and (and (and $x40 true) $x63) $x64)))
 (let (($x66 (= $x112 true)))
 (let (($x67 (= $x66 true)))
 (let (($x106 (= $x67 true)))
 (let (($x43 (and $x106 $x69)))
 (let (($x46 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x29 (and $x46 $x43)))
 (let (($x123 (=> $x29 $x50)))
 (not $x123))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x158 (= $x79 true)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x98 (concat ?x95 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x115 (concat ?x90 (concat ?x94 ?x98))))
 (let ((?x126 (bvadd ?x115 (_ bv4 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x130))))
 (let (($x137 (= (_ bv0 32) ?x136)))
 (let ((?x138 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x138 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x144 (= $x142 $x143)))
 (let (($x82 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x117 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x120 (and $x117 $x82)))
 (let (($x145 (=> $x120 $x144)))
 (let (($x139 (= ?x138 (_ bv0 32))))
 (let (($x125 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x140 (= $x125 $x139)))
 (let (($x141 (=> $x120 $x140)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x42))))
 (let (($x44 (= input.spec-%var-l-1.2.1.2.0 ?x124)))
 (let (($x36 (=> $x120 $x44)))
 (let (($x23 (= false false)))
 (let (($x88 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x109 (and $x117 $x88)))
 (let (($x24 (=> $x109 $x23)))
 (let (($x108 (= (_ bv0 32) ?x115)))
 (let ((?x101 (ite $x108 (_ bv0 32) (_ bv1 32))))
 (let (($x103 (bvuge ?x101 (_ bv1 32))))
 (let (($x116 (= $x82 $x103)))
 (let (($x104 (=> $x117 $x116)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x7 (= $x88 $x102)))
 (let (($x119 (=> $x117 $x7)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x73)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x78)))
 (let (($x92 (= input.spec-%var-l-1.2.0 ?x118)))
 (let (($x12 (=> $x117 $x92)))
 (let ((?x30 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x114 (bvuge ?x30 (_ bv1 32))))
 (let (($x74 (= $x117 $x114)))
 (let (($x76 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x76 $x23)))
 (let (($x72 (= ?x30 (_ bv0 32))))
 (let (($x110 (= $x76 $x72)))
 (let (($x151 (and (and (and (and (and (and $x110 $x70) $x74) $x12) $x119) $x104) $x24)))
 (let (($x154 (and (and (and $x151 $x36) $x141) $x145)))
 (let (($x155 (= $x154 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x22 (concat ?x8 (concat ?x28 ?x10)))))
 (let (($x54 (= input.dst.llvm-%l ?x41)))
 (let (($x38 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x64 (and $x38 $x54)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x59)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x26 $x32)))
 (let (($x57 (and $x13 $x20)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x9 $x57)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x37)))))))
 (let (($x67 (and (and (and $x21 true) $x16) $x64)))
 (let (($x106 (= $x67 true)))
 (let (($x113 (= $x106 true)))
 (let (($x68 (= $x113 true)))
 (let (($x156 (and $x68 $x155)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x157 (and $x15 $x156)))
 (let (($x159 (=> $x157 $x158)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x158 (= $x79 true)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x98 (concat ?x95 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x115 (concat ?x90 (concat ?x94 ?x98))))
 (let ((?x126 (bvadd ?x115 (_ bv4 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x130))))
 (let (($x137 (= (_ bv0 32) ?x136)))
 (let ((?x138 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x138 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x144 (= $x142 $x143)))
 (let (($x82 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x117 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x120 (and $x117 $x82)))
 (let (($x145 (=> $x120 $x144)))
 (let (($x139 (= ?x138 (_ bv0 32))))
 (let (($x125 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x140 (= $x125 $x139)))
 (let (($x141 (=> $x120 $x140)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x42))))
 (let (($x44 (= input.spec-%var-l-1.2.1.2.0 ?x124)))
 (let (($x36 (=> $x120 $x44)))
 (let (($x23 (= false false)))
 (let (($x88 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x109 (and $x117 $x88)))
 (let (($x24 (=> $x109 $x23)))
 (let (($x108 (= (_ bv0 32) ?x115)))
 (let ((?x101 (ite $x108 (_ bv0 32) (_ bv1 32))))
 (let (($x103 (bvuge ?x101 (_ bv1 32))))
 (let (($x116 (= $x82 $x103)))
 (let (($x104 (=> $x117 $x116)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x7 (= $x88 $x102)))
 (let (($x119 (=> $x117 $x7)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x73)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x78)))
 (let (($x92 (= input.spec-%var-l-1.2.0 ?x118)))
 (let (($x12 (=> $x117 $x92)))
 (let ((?x30 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x114 (bvuge ?x30 (_ bv1 32))))
 (let (($x74 (= $x117 $x114)))
 (let (($x76 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x76 $x23)))
 (let (($x72 (= ?x30 (_ bv0 32))))
 (let (($x110 (= $x76 $x72)))
 (let (($x151 (and (and (and (and (and (and $x110 $x70) $x74) $x12) $x119) $x104) $x24)))
 (let (($x154 (and (and (and $x151 $x36) $x141) $x145)))
 (let (($x155 (= $x154 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x22 (concat ?x8 (concat ?x28 ?x10)))))
 (let (($x54 (= input.dst.llvm-%l ?x41)))
 (let (($x38 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x64 (and $x38 $x54)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x59)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x26 $x32)))
 (let (($x57 (and $x13 $x20)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x9 $x57)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x21 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x37)))))))
 (let (($x67 (and (and (and $x21 true) $x16) $x64)))
 (let (($x106 (= $x67 true)))
 (let (($x113 (= $x106 true)))
 (let (($x68 (= $x113 true)))
 (let (($x156 (and $x68 $x155)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x157 (and $x15 $x156)))
 (let (($x159 (=> $x157 $x158)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xff)
              #xffff7ff9
              #x7f)
       #xffff7ff8
       #xf8))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffff7ff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffff7ffb)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x164 (= $x72 true)))
 (let (($x44 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x149 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x114 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (and $x114 $x149)))
 (let (($x143 (and $x109 $x44)))
 (let (($x144 (not $x143)))
 (let (($x138 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x153 (and $x109 $x138)))
 (let (($x142 (not $x153)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x94 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x115 (concat ?x99 (concat ?x95 ?x94))))
 (let ((?x36 (bvadd ?x115 (_ bv4 32))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv1 32))) (select input.dst.llvm-mem ?x36))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv2 32))) ?x126))))
 (let (($x127 (= (_ bv0 32) ?x129)))
 (let ((?x130 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x130 (_ bv1 32))))
 (let (($x140 (= $x138 $x139)))
 (let (($x141 (=> $x109 $x140)))
 (let (($x133 (= ?x130 (_ bv0 32))))
 (let (($x136 (= $x44 $x133)))
 (let (($x137 (=> $x109 $x136)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x50))))
 (let (($x42 (= input.spec-%var-l-1.2.1.2.0 ?x25)))
 (let (($x29 (=> $x109 $x42)))
 (let (($x146 (= false false)))
 (let (($x88 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x104 (and $x114 $x88)))
 (let (($x150 (=> $x104 $x146)))
 (let (($x108 (= (_ bv0 32) ?x115)))
 (let ((?x101 (ite $x108 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x101 (_ bv1 32))))
 (let (($x103 (= $x149 $x82)))
 (let (($x116 (=> $x114 $x103)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x7 (= $x88 $x102)))
 (let (($x119 (=> $x114 $x7)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x80)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x73)))
 (let (($x12 (= input.spec-%var-l-1.2.0 ?x92)))
 (let (($x148 (=> $x114 $x12)))
 (let ((?x110 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x74 (bvuge ?x110 (_ bv1 32))))
 (let (($x147 (= $x114 $x74)))
 (let (($x30 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x117 (=> $x30 $x146)))
 (let (($x23 (= ?x110 (_ bv0 32))))
 (let (($x70 (= $x30 $x23)))
 (let (($x158 (and (and (and (and (and (and $x70 $x117) $x147) $x148) $x119) $x116) $x150)))
 (let (($x56 (and (and (and (and (and $x158 $x29) $x137) $x141) $x142) $x144)))
 (let (($x161 (= $x56 true)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x55 (concat ?x34 (concat ?x58 ?x27)))))
 (let (($x54 (= input.dst.llvm-%l ?x41)))
 (let (($x66 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x64 (and $x66 $x54)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x59)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x105 $x18)))
 (let (($x85 (and $x49 $x19)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x5 $x85)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x6)))))))
 (let (($x113 (and (and (and $x17 true) $x33) $x64)))
 (let (($x68 (= $x113 true)))
 (let (($x35 (= $x68 true)))
 (let (($x76 (= $x35 true)))
 (let (($x162 (and $x76 $x161)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x163 (and $x60 $x162)))
 (let (($x165 (=> $x163 $x164)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x164 (= $x72 true)))
 (let (($x44 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x149 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x114 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (and $x114 $x149)))
 (let (($x143 (and $x109 $x44)))
 (let (($x144 (not $x143)))
 (let (($x138 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x153 (and $x109 $x138)))
 (let (($x142 (not $x153)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x94 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x115 (concat ?x99 (concat ?x95 ?x94))))
 (let ((?x36 (bvadd ?x115 (_ bv4 32))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv1 32))) (select input.dst.llvm-mem ?x36))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv2 32))) ?x126))))
 (let (($x127 (= (_ bv0 32) ?x129)))
 (let ((?x130 (ite $x127 (_ bv0 32) (_ bv1 32))))
 (let (($x139 (bvuge ?x130 (_ bv1 32))))
 (let (($x140 (= $x138 $x139)))
 (let (($x141 (=> $x109 $x140)))
 (let (($x133 (= ?x130 (_ bv0 32))))
 (let (($x136 (= $x44 $x133)))
 (let (($x137 (=> $x109 $x136)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x50))))
 (let (($x42 (= input.spec-%var-l-1.2.1.2.0 ?x25)))
 (let (($x29 (=> $x109 $x42)))
 (let (($x146 (= false false)))
 (let (($x88 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x104 (and $x114 $x88)))
 (let (($x150 (=> $x104 $x146)))
 (let (($x108 (= (_ bv0 32) ?x115)))
 (let ((?x101 (ite $x108 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x101 (_ bv1 32))))
 (let (($x103 (= $x149 $x82)))
 (let (($x116 (=> $x114 $x103)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x7 (= $x88 $x102)))
 (let (($x119 (=> $x114 $x7)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x80)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x73)))
 (let (($x12 (= input.spec-%var-l-1.2.0 ?x92)))
 (let (($x148 (=> $x114 $x12)))
 (let ((?x110 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x74 (bvuge ?x110 (_ bv1 32))))
 (let (($x147 (= $x114 $x74)))
 (let (($x30 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x117 (=> $x30 $x146)))
 (let (($x23 (= ?x110 (_ bv0 32))))
 (let (($x70 (= $x30 $x23)))
 (let (($x158 (and (and (and (and (and (and $x70 $x117) $x147) $x148) $x119) $x116) $x150)))
 (let (($x56 (and (and (and (and (and $x158 $x29) $x137) $x141) $x142) $x144)))
 (let (($x161 (= $x56 true)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x55 (concat ?x34 (concat ?x58 ?x27)))))
 (let (($x54 (= input.dst.llvm-%l ?x41)))
 (let (($x66 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x64 (and $x66 $x54)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x59)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x105 $x18)))
 (let (($x85 (and $x49 $x19)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x5 $x85)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x6)))))))
 (let (($x113 (and (and (and $x17 true) $x33) $x64)))
 (let (($x68 (= $x113 true)))
 (let (($x35 (= $x68 true)))
 (let (($x76 (= $x35 true)))
 (let (($x162 (and $x76 $x161)))
 (let (($x60 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x163 (and $x60 $x162)))
 (let (($x165 (=> $x163 $x164)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4096 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv536870913 32) (_ bv16 8)))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv536870915 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbf401870)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x40)
                                #xbf401877
                                #x00)
                         #xbf401875
                         #x00)
                  #xbf401873
                  #xbf)))
(let ((a!2 (store (store (store (store a!1 #x00000005 #x00) #xbf401874 #x00)
                         #xbf401871
                         #x18)
                  #xbf401876
                  #x00)))
  (store (store (store (store a!2 #x00000006 #x00) #x00000007 #x91)
                #x00000004
                #x00)
         #xbf401870
         #x70))))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xbfbfbfbf)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xbf401870)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xbf401870)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbf401870)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbf401873)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x69 (= (_ bv0 4) ?x123)))
 (let (($x120 (= $x69 true)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x95 (concat ?x100 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x115 (concat ?x91 (concat ?x93 ?x95))))
 (let (($x108 (= (_ bv0 32) ?x115)))
 (let ((?x101 (ite $x108 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x101 (_ bv1 32))))
 (let (($x156 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x82 (= $x156 $x149)))
 (let (($x74 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x103 (=> $x74 $x82)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x88 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x7 (= $x88 $x102)))
 (let (($x119 (=> $x74 $x7)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x81)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x80)))
 (let (($x148 (= input.spec-%var-l-1.2.0 ?x12)))
 (let (($x155 (=> $x74 $x148)))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x70 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x70 (_ bv1 32))))
 (let (($x154 (= $x74 $x147)))
 (let (($x145 (= false false)))
 (let (($x110 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x114 (=> $x110 $x145)))
 (let (($x146 (= ?x70 (_ bv0 32))))
 (let (($x117 (= $x110 $x146)))
 (let (($x158 (and (and (and (and (and $x117 $x114) $x154) $x155) $x119) $x103)))
 (let (($x109 (= $x158 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x32 (concat ?x58 (concat ?x26 ?x13)))))
 (let (($x54 (= input.dst.llvm-%l ?x41)))
 (let (($x16 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x64 (and $x16 $x54)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x59)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x105 $x18)))
 (let (($x85 (and $x49 $x19)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x8 $x85)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x40)))))))
 (let (($x35 (and (and (and $x5 true) $x33) $x64)))
 (let (($x76 (= $x35 true)))
 (let (($x79 (= $x76 true)))
 (let (($x30 (= $x79 true)))
 (let (($x24 (and $x30 $x109)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x122 (and $x107 $x24)))
 (let (($x121 (=> $x122 $x120)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x69 (= (_ bv0 4) ?x123)))
 (let (($x120 (= $x69 true)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x95 (concat ?x100 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x115 (concat ?x91 (concat ?x93 ?x95))))
 (let (($x108 (= (_ bv0 32) ?x115)))
 (let ((?x101 (ite $x108 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x101 (_ bv1 32))))
 (let (($x156 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x82 (= $x156 $x149)))
 (let (($x74 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x103 (=> $x74 $x82)))
 (let (($x102 (= ?x101 (_ bv0 32))))
 (let (($x88 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x7 (= $x88 $x102)))
 (let (($x119 (=> $x74 $x7)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x81)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x80)))
 (let (($x148 (= input.spec-%var-l-1.2.0 ?x12)))
 (let (($x155 (=> $x74 $x148)))
 (let (($x23 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x70 (ite $x23 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x70 (_ bv1 32))))
 (let (($x154 (= $x74 $x147)))
 (let (($x145 (= false false)))
 (let (($x110 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x114 (=> $x110 $x145)))
 (let (($x146 (= ?x70 (_ bv0 32))))
 (let (($x117 (= $x110 $x146)))
 (let (($x158 (and (and (and (and (and $x117 $x114) $x154) $x155) $x119) $x103)))
 (let (($x109 (= $x158 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x32 (concat ?x58 (concat ?x26 ?x13)))))
 (let (($x54 (= input.dst.llvm-%l ?x41)))
 (let (($x16 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x64 (and $x16 $x54)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x59)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x105 $x18)))
 (let (($x85 (and $x49 $x19)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x8 $x85)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x40)))))))
 (let (($x35 (and (and (and $x5 true) $x33) $x64)))
 (let (($x76 (= $x35 true)))
 (let (($x79 (= $x76 true)))
 (let (($x30 (= $x79 true)))
 (let (($x24 (and $x30 $x109)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x122 (and $x107 $x24)))
 (let (($x121 (=> $x122 $x120)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000001000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_27)
(function @fun_27
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_27 #b10000000000000000000000000000001) #b00000000)
 (= (@fun_27 #b10000000000000000000000000000010) #b00000000)
 (= (@fun_27 #b10000000000000000000000000000011) #b00000000)
 (= (@fun_27 #b00000000000000000000000000001100) #b00000000)
 (= (@fun_27 #b00000000000000000000000000001101) #b00000000)
 (= (@fun_27 #b00000000000000000000000000001110) #b00000000)
 (= (@fun_27 #b00000000000000000000000000001111) #b00000000)
 (= (@fun_27 #b00000000000000000000000000001000) #b00000000)
 (= (@fun_27 #b00000000000000000000000000001001) #b00000000)
 (= (@fun_27 #b00000000000000000000000000001010) #b00000000)
 (= (@fun_27 #b00000000000000000000000000001011) #b00000000)
 (default #b00001000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x01000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x01000003
                                #x01)
                         #x01000000
                         #x08)
                  #x0100000c
                  #x08)))
  (store a!1 #x0100000f #x01)))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x01000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x01000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x01000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x25 (= (_ bv0 4) ?x43)))
 (let (($x42 (= $x25 true)))
 (let (($x156 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x154 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x24 (and $x154 $x156)))
 (let (($x122 (not $x24)))
 (let (($x97 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x158 (and $x154 $x97)))
 (let (($x109 (not $x158)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x99 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x108 (concat ?x115 (concat ?x98 ?x99))))
 (let (($x101 (= (_ bv0 32) ?x108)))
 (let ((?x102 (ite $x101 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x102 (_ bv1 32))))
 (let (($x82 (= $x156 $x149)))
 (let (($x103 (=> $x154 $x82)))
 (let (($x7 (= ?x102 (_ bv0 32))))
 (let (($x119 (= $x97 $x7)))
 (let (($x150 (=> $x154 $x119)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x111)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x80)))
 (let (($x104 (= input.spec-%var-l-1.2.0 ?x155)))
 (let (($x87 (=> $x154 $x104)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x145 (ite $x117 (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge ?x145 (_ bv1 32))))
 (let (($x83 (= $x154 $x157)))
 (let (($x74 (= false false)))
 (let (($x146 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x147 (=> $x146 $x74)))
 (let (($x114 (= ?x145 (_ bv0 32))))
 (let (($x116 (= $x146 $x114)))
 (let (($x151 (and (and (and (and (and (and $x116 $x147) $x83) $x87) $x150) $x103) $x109)))
 (let (($x78 (and $x151 $x122)))
 (let (($x60 (= $x78 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x41 (concat ?x13 (concat ?x38 ?x32)))))
 (let (($x64 (= input.dst.llvm-%l ?x54)))
 (let (($x16 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x35 (and $x16 $x64)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x19)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x28 $x49)))
 (let (($x33 (and $x59 $x85)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x62 $x33)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x17)))))))
 (let (($x30 (and (and (and $x105 true) $x68) $x35)))
 (let (($x72 (= $x30 true)))
 (let (($x110 (= $x72 true)))
 (let (($x23 (= $x110 true)))
 (let (($x31 (and $x23 $x60)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x65 (and $x107 $x31)))
 (let (($x29 (=> $x65 $x42)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x25 (= (_ bv0 4) ?x43)))
 (let (($x42 (= $x25 true)))
 (let (($x156 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x154 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x24 (and $x154 $x156)))
 (let (($x122 (not $x24)))
 (let (($x97 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x158 (and $x154 $x97)))
 (let (($x109 (not $x158)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x99 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x108 (concat ?x115 (concat ?x98 ?x99))))
 (let (($x101 (= (_ bv0 32) ?x108)))
 (let ((?x102 (ite $x101 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x102 (_ bv1 32))))
 (let (($x82 (= $x156 $x149)))
 (let (($x103 (=> $x154 $x82)))
 (let (($x7 (= ?x102 (_ bv0 32))))
 (let (($x119 (= $x97 $x7)))
 (let (($x150 (=> $x154 $x119)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x111)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x80)))
 (let (($x104 (= input.spec-%var-l-1.2.0 ?x155)))
 (let (($x87 (=> $x154 $x104)))
 (let (($x117 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x145 (ite $x117 (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge ?x145 (_ bv1 32))))
 (let (($x83 (= $x154 $x157)))
 (let (($x74 (= false false)))
 (let (($x146 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x147 (=> $x146 $x74)))
 (let (($x114 (= ?x145 (_ bv0 32))))
 (let (($x116 (= $x146 $x114)))
 (let (($x151 (and (and (and (and (and (and $x116 $x147) $x83) $x87) $x150) $x103) $x109)))
 (let (($x78 (and $x151 $x122)))
 (let (($x60 (= $x78 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x41 (concat ?x13 (concat ?x38 ?x32)))))
 (let (($x64 (= input.dst.llvm-%l ?x54)))
 (let (($x16 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x35 (and $x16 $x64)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x19)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x28 $x49)))
 (let (($x33 (and $x59 $x85)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x62 $x33)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x17)))))))
 (let (($x30 (and (and (and $x105 true) $x68) $x35)))
 (let (($x72 (= $x30 true)))
 (let (($x110 (= $x72 true)))
 (let (($x23 (= $x110 true)))
 (let (($x31 (and $x23 $x60)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x65 (and $x107 $x31)))
 (let (($x29 (=> $x65 $x42)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x163 (= (_ bv0 4) ?x162)))
 (let (($x164 (= $x163 true)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x90 (concat ?x98 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x101 (concat ?x108 (concat ?x91 ?x90))))
 (let ((?x37 (bvadd ?x101 (_ bv4 32))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem ?x37))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv2 32))) ?x36))))
 (let (($x152 (= (_ bv0 32) ?x125)))
 (let ((?x126 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x126 (_ bv1 32))))
 (let (($x130 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x136 (= $x130 $x133)))
 (let (($x156 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x83 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (and $x83 $x156)))
 (let (($x137 (=> $x109 $x136)))
 (let (($x131 (= ?x126 (_ bv0 32))))
 (let (($x84 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x129 (= $x84 $x131)))
 (let (($x127 (=> $x109 $x129)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x60))))
 (let (($x29 (= input.spec-%var-l-1.2.1.2.0 ?x42)))
 (let (($x159 (=> $x109 $x29)))
 (let (($x154 (= false false)))
 (let (($x96 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x121 (and $x83 $x96)))
 (let (($x158 (=> $x121 $x154)))
 (let (($x102 (= (_ bv0 32) ?x101)))
 (let ((?x7 (ite $x102 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x7 (_ bv1 32))))
 (let (($x82 (= $x156 $x149)))
 (let (($x103 (=> $x83 $x82)))
 (let (($x119 (= ?x7 (_ bv0 32))))
 (let (($x150 (= $x96 $x119)))
 (let (($x120 (=> $x83 $x150)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x80)))
 (let (($x69 (= input.spec-%var-l-1.2.0 ?x87)))
 (let (($x88 (=> $x83 $x69)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x74 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (bvuge ?x74 (_ bv1 32))))
 (let (($x73 (= $x83 $x123)))
 (let (($x114 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x157 (=> $x114 $x154)))
 (let (($x147 (= ?x74 (_ bv0 32))))
 (let (($x77 (= $x114 $x147)))
 (let (($x48 (and (and (and (and (and (and $x77 $x157) $x73) $x88) $x120) $x103) $x158)))
 (let (($x53 (and (and (and $x48 $x159) $x127) $x137)))
 (let (($x143 (= $x53 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x54 (concat ?x32 (concat ?x26 ?x41)))))
 (let (($x35 (= input.dst.llvm-%l ?x64)))
 (let (($x16 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x30 (and $x16 $x35)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x85)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x10 $x59)))
 (let (($x68 (and $x19 $x33)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x61 $x68)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x113)))))))
 (let (($x23 (and (and (and $x28 true) $x79) $x30)))
 (let (($x70 (= $x23 true)))
 (let (($x146 (= $x70 true)))
 (let (($x117 (= $x146 true)))
 (let (($x144 (and $x117 $x143)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x56 (and $x107 $x144)))
 (let (($x165 (=> $x56 $x164)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x163 (= (_ bv0 4) ?x162)))
 (let (($x164 (= $x163 true)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x90 (concat ?x98 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x101 (concat ?x108 (concat ?x91 ?x90))))
 (let ((?x37 (bvadd ?x101 (_ bv4 32))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem ?x37))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv2 32))) ?x36))))
 (let (($x152 (= (_ bv0 32) ?x125)))
 (let ((?x126 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x126 (_ bv1 32))))
 (let (($x130 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x136 (= $x130 $x133)))
 (let (($x156 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x83 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (and $x83 $x156)))
 (let (($x137 (=> $x109 $x136)))
 (let (($x131 (= ?x126 (_ bv0 32))))
 (let (($x84 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x129 (= $x84 $x131)))
 (let (($x127 (=> $x109 $x129)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x60))))
 (let (($x29 (= input.spec-%var-l-1.2.1.2.0 ?x42)))
 (let (($x159 (=> $x109 $x29)))
 (let (($x154 (= false false)))
 (let (($x96 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x121 (and $x83 $x96)))
 (let (($x158 (=> $x121 $x154)))
 (let (($x102 (= (_ bv0 32) ?x101)))
 (let ((?x7 (ite $x102 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x7 (_ bv1 32))))
 (let (($x82 (= $x156 $x149)))
 (let (($x103 (=> $x83 $x82)))
 (let (($x119 (= ?x7 (_ bv0 32))))
 (let (($x150 (= $x96 $x119)))
 (let (($x120 (=> $x83 $x150)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x80)))
 (let (($x69 (= input.spec-%var-l-1.2.0 ?x87)))
 (let (($x88 (=> $x83 $x69)))
 (let (($x116 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x74 (ite $x116 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (bvuge ?x74 (_ bv1 32))))
 (let (($x73 (= $x83 $x123)))
 (let (($x114 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x157 (=> $x114 $x154)))
 (let (($x147 (= ?x74 (_ bv0 32))))
 (let (($x77 (= $x114 $x147)))
 (let (($x48 (and (and (and (and (and (and $x77 $x157) $x73) $x88) $x120) $x103) $x158)))
 (let (($x53 (and (and (and $x48 $x159) $x127) $x137)))
 (let (($x143 (= $x53 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x54 (concat ?x32 (concat ?x26 ?x41)))))
 (let (($x35 (= input.dst.llvm-%l ?x64)))
 (let (($x16 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x30 (and $x16 $x35)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x85)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x10 $x59)))
 (let (($x68 (and $x19 $x33)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x61 $x68)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x113)))))))
 (let (($x23 (and (and (and $x28 true) $x79) $x30)))
 (let (($x70 (= $x23 true)))
 (let (($x146 (= $x70 true)))
 (let (($x117 (= $x146 true)))
 (let (($x144 (and $x117 $x143)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x56 (and $x107 $x144)))
 (let (($x165 (=> $x56 $x164)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000001000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b10000000000000000000000000000001) #b00000000)
 (= (@fun_43 #b10000000000000000000000000000010) #b00000000)
 (= (@fun_43 #b10000000000000000000000000000011) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001100) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001101) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001110) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001111) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000100) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000101) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000110) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000111) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000000) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000011) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001000) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001001) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001010) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001011) #b00000000)
 (default #b00001000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00008e0c)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
                     #x00008e0d
                     #x8e)
              #x00008e0e
              #x10)
       #x00008e0c
       #x08))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00108e08)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00008e0f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00008e0c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x14 (= (_ bv0 4) ?x39)))
 (let (($x167 (= $x14 true)))
 (let (($x159 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x156 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x73 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x158 (and $x73 $x156)))
 (let (($x136 (and $x158 $x159)))
 (let (($x137 (not $x136)))
 (let (($x131 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x130 (and $x158 $x131)))
 (let (($x133 (not $x130)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x100 (concat ?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x101 (concat ?x115 ?x100))))
 (let ((?x153 (bvadd ?x102 (_ bv4 32))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x135))))
 (let (($x36 (= (_ bv0 32) ?x9)))
 (let ((?x134 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x134 (_ bv1 32))))
 (let (($x127 (= $x131 $x129)))
 (let (($x142 (=> $x158 $x127)))
 (let (($x125 (= ?x134 (_ bv0 32))))
 (let (($x152 (= $x159 $x125)))
 (let (($x126 (=> $x158 $x152)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x25))))
 (let (($x50 (= input.spec-%var-l-1.2.1.2.0 ?x60)))
 (let (($x42 (=> $x158 $x50)))
 (let (($x83 (= false false)))
 (let (($x94 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x141 (and $x73 $x94)))
 (let (($x121 (=> $x141 $x83)))
 (let (($x7 (= (_ bv0 32) ?x102)))
 (let ((?x119 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x119 (_ bv1 32))))
 (let (($x82 (= $x156 $x149)))
 (let (($x103 (=> $x73 $x82)))
 (let (($x150 (= ?x119 (_ bv0 32))))
 (let (($x120 (= $x94 $x150)))
 (let (($x140 (=> $x73 $x120)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x89)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x80)))
 (let (($x139 (= input.spec-%var-l-1.2.0 ?x88)))
 (let (($x97 (=> $x73 $x139)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x154 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x138 (bvuge ?x154 (_ bv1 32))))
 (let (($x12 (= $x73 $x138)))
 (let (($x147 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x123 (=> $x147 $x83)))
 (let (($x157 (= ?x154 (_ bv0 32))))
 (let (($x160 (= $x147 $x157)))
 (let (($x162 (and (and (and (and (and (and $x160 $x123) $x12) $x97) $x140) $x103) $x121)))
 (let (($x148 (and (and (and (and (and $x162 $x42) $x126) $x142) $x133) $x137)))
 (let (($x47 (= $x148 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x64 (concat ?x41 (concat ?x38 ?x54)))))
 (let (($x30 (= input.dst.llvm-%l ?x35)))
 (let (($x16 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x23 (and $x16 $x30)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x33)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x18 $x19)))
 (let (($x79 (and $x85 $x68)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x40 $x79)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x76)))))))
 (let (($x117 (and (and (and $x10 true) $x110) $x23)))
 (let (($x145 (= $x117 true)))
 (let (($x114 (= $x145 true)))
 (let (($x116 (= $x114 true)))
 (let (($x63 (and $x116 $x47)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x27 (and $x107 $x63)))
 (let (($x168 (=> $x27 $x167)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 ((_ extract 3 0) input.dst.llvm-%l)))
 (let (($x14 (= (_ bv0 4) ?x39)))
 (let (($x167 (= $x14 true)))
 (let (($x159 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x156 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x73 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x158 (and $x73 $x156)))
 (let (($x136 (and $x158 $x159)))
 (let (($x137 (not $x136)))
 (let (($x131 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x130 (and $x158 $x131)))
 (let (($x133 (not $x130)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x100 (concat ?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x101 (concat ?x115 ?x100))))
 (let ((?x153 (bvadd ?x102 (_ bv4 32))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x135))))
 (let (($x36 (= (_ bv0 32) ?x9)))
 (let ((?x134 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x129 (bvuge ?x134 (_ bv1 32))))
 (let (($x127 (= $x131 $x129)))
 (let (($x142 (=> $x158 $x127)))
 (let (($x125 (= ?x134 (_ bv0 32))))
 (let (($x152 (= $x159 $x125)))
 (let (($x126 (=> $x158 $x152)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x25))))
 (let (($x50 (= input.spec-%var-l-1.2.1.2.0 ?x60)))
 (let (($x42 (=> $x158 $x50)))
 (let (($x83 (= false false)))
 (let (($x94 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x141 (and $x73 $x94)))
 (let (($x121 (=> $x141 $x83)))
 (let (($x7 (= (_ bv0 32) ?x102)))
 (let ((?x119 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x119 (_ bv1 32))))
 (let (($x82 (= $x156 $x149)))
 (let (($x103 (=> $x73 $x82)))
 (let (($x150 (= ?x119 (_ bv0 32))))
 (let (($x120 (= $x94 $x150)))
 (let (($x140 (=> $x73 $x120)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x89)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x80)))
 (let (($x139 (= input.spec-%var-l-1.2.0 ?x88)))
 (let (($x97 (=> $x73 $x139)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x154 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x138 (bvuge ?x154 (_ bv1 32))))
 (let (($x12 (= $x73 $x138)))
 (let (($x147 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x123 (=> $x147 $x83)))
 (let (($x157 (= ?x154 (_ bv0 32))))
 (let (($x160 (= $x147 $x157)))
 (let (($x162 (and (and (and (and (and (and $x160 $x123) $x12) $x97) $x140) $x103) $x121)))
 (let (($x148 (and (and (and (and (and $x162 $x42) $x126) $x142) $x133) $x137)))
 (let (($x47 (= $x148 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x64 (concat ?x41 (concat ?x38 ?x54)))))
 (let (($x30 (= input.dst.llvm-%l ?x35)))
 (let (($x16 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x23 (and $x16 $x30)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x33)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x18 $x19)))
 (let (($x79 (and $x85 $x68)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x40 $x79)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x76)))))))
 (let (($x117 (and (and (and $x10 true) $x110) $x23)))
 (let (($x145 (= $x117 true)))
 (let (($x114 (= $x145 true)))
 (let (($x116 (= $x114 true)))
 (let (($x63 (and $x116 $x47)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x27 (and $x107 $x63)))
 (let (($x168 (=> $x27 $x167)))
 (not $x168))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000001000)
(= input.spec-%var-l-1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b10000000000000000000000000000001) #b00000000)
 (= (@fun_43 #b10000000000000000000000000000010) #b00000000)
 (= (@fun_43 #b10000000000000000000000000000011) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001100) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001101) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001110) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001111) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000100) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000101) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000110) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000111) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000000) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000001) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000010) #b00000000)
 (= (@fun_43 #b00000000000000000000000000000011) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001000) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001001) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001010) #b00000000)
 (= (@fun_43 #b00000000000000000000000000001011) #b00000000)
 (default #b00001000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000750c)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
              #x0000750d
              #x7d)
       #x0000750c
       #x08))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00007d08)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000750f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000750c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x65 (= (_ bv0 3) ?x31)))
 (let (($x151 (= $x65 true)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x115 (concat ?x98 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x90 (concat ?x91 ?x115))))
 (let (($x7 (= (_ bv0 32) ?x102)))
 (let ((?x119 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x119 (_ bv1 32))))
 (let (($x56 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x149 (= $x56 $x156)))
 (let (($x138 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x82 (=> $x138 $x149)))
 (let (($x150 (= ?x119 (_ bv0 32))))
 (let (($x94 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x120 (= $x94 $x150)))
 (let (($x140 (=> $x138 $x120)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x111)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x89)))
 (let (($x97 (= input.spec-%var-l-1.2.0 ?x139)))
 (let (($x144 (=> $x138 $x97)))
 (let (($x157 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x160 (ite $x157 (_ bv0 32) (_ bv1 32))))
 (let (($x12 (bvuge ?x160 (_ bv1 32))))
 (let (($x143 (= $x138 $x12)))
 (let (($x53 (= false false)))
 (let (($x154 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x73 (=> $x154 $x53)))
 (let (($x83 (= ?x160 (_ bv0 32))))
 (let (($x123 (= $x154 $x83)))
 (let (($x162 (and (and (and (and (and $x123 $x73) $x143) $x144) $x140) $x82)))
 (let (($x158 (= $x162 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x13 (concat ?x38 (concat ?x55 ?x58)))))
 (let (($x30 (= input.dst.llvm-%l ?x35)))
 (let (($x57 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x23 (and $x57 $x30)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x33)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x18 $x19)))
 (let (($x79 (and $x85 $x68)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x61 $x79)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x28)))))))
 (let (($x114 (and (and (and $x40 true) $x110) $x23)))
 (let (($x116 (= $x114 true)))
 (let (($x74 (= $x116 true)))
 (let (($x147 (= $x74 true)))
 (let (($x48 (and $x147 $x158)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x78 (and $x104 $x48)))
 (let (($x43 (=> $x78 $x151)))
 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x65 (= (_ bv0 3) ?x31)))
 (let (($x151 (= $x65 true)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x115 (concat ?x98 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x90 (concat ?x91 ?x115))))
 (let (($x7 (= (_ bv0 32) ?x102)))
 (let ((?x119 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x119 (_ bv1 32))))
 (let (($x56 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x149 (= $x56 $x156)))
 (let (($x138 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x82 (=> $x138 $x149)))
 (let (($x150 (= ?x119 (_ bv0 32))))
 (let (($x94 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x120 (= $x94 $x150)))
 (let (($x140 (=> $x138 $x120)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x111)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x89)))
 (let (($x97 (= input.spec-%var-l-1.2.0 ?x139)))
 (let (($x144 (=> $x138 $x97)))
 (let (($x157 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x160 (ite $x157 (_ bv0 32) (_ bv1 32))))
 (let (($x12 (bvuge ?x160 (_ bv1 32))))
 (let (($x143 (= $x138 $x12)))
 (let (($x53 (= false false)))
 (let (($x154 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x73 (=> $x154 $x53)))
 (let (($x83 (= ?x160 (_ bv0 32))))
 (let (($x123 (= $x154 $x83)))
 (let (($x162 (and (and (and (and (and $x123 $x73) $x143) $x144) $x140) $x82)))
 (let (($x158 (= $x162 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x13 (concat ?x38 (concat ?x55 ?x58)))))
 (let (($x30 (= input.dst.llvm-%l ?x35)))
 (let (($x57 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x23 (and $x57 $x30)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x33)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x18 $x19)))
 (let (($x79 (and $x85 $x68)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x61 $x79)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x28)))))))
 (let (($x114 (and (and (and $x40 true) $x110) $x23)))
 (let (($x116 (= $x114 true)))
 (let (($x74 (= $x116 true)))
 (let (($x147 (= $x74 true)))
 (let (($x48 (and $x147 $x158)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x78 (and $x104 $x48)))
 (let (($x43 (=> $x78 $x151)))
 (not $x43)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x109 (= $x43 true)))
 (let (($x107 (= $x109 true)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x91 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x108 (concat ?x98 ?x91))))
 (let (($x7 (= (_ bv0 32) ?x102)))
 (let ((?x119 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x56 (bvuge ?x119 (_ bv1 32))))
 (let (($x121 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x156 (= $x121 $x56)))
 (let (($x12 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x149 (=> $x12 $x156)))
 (let (($x150 (= ?x119 (_ bv0 32))))
 (let (($x94 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x120 (= $x94 $x150)))
 (let (($x140 (=> $x12 $x120)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x118)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x111)))
 (let (($x144 (= input.spec-%var-l-1.2.0 ?x97)))
 (let (($x141 (=> $x12 $x144)))
 (let (($x83 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x123 (ite $x83 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x123 (_ bv1 32))))
 (let (($x161 (= $x12 $x143)))
 (let (($x103 (= false false)))
 (let (($x160 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x138 (=> $x160 $x103)))
 (let (($x53 (= ?x123 (_ bv0 32))))
 (let (($x73 (= $x160 $x53)))
 (let (($x78 (and (and (and (and (and $x73 $x138) $x161) $x141) $x140) $x149)))
 (let (($x24 (= $x78 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x54 (concat ?x55 (concat ?x41 ?x32)))))
 (let (($x30 (= input.dst.llvm-%l ?x35)))
 (let (($x20 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x23 (and $x20 $x30)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x33)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x18 $x19)))
 (let (($x79 (and $x85 $x68)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x62 $x79)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x8)))))))
 (let (($x74 (and (and (and $x61 true) $x110) $x23)))
 (let (($x147 (= $x74 true)))
 (let (($x77 (= $x147 true)))
 (let (($x154 (= $x77 true)))
 (let (($x31 (and $x154 $x24)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x65 (and $x11 $x31)))
 (let (($x67 (=> $x65 $x107)))
 (not $x67)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x109 (= $x43 true)))
 (let (($x107 (= $x109 true)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x91 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x102 (concat ?x108 (concat ?x98 ?x91))))
 (let (($x7 (= (_ bv0 32) ?x102)))
 (let ((?x119 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x56 (bvuge ?x119 (_ bv1 32))))
 (let (($x121 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x156 (= $x121 $x56)))
 (let (($x12 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x149 (=> $x12 $x156)))
 (let (($x150 (= ?x119 (_ bv0 32))))
 (let (($x94 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x120 (= $x94 $x150)))
 (let (($x140 (=> $x12 $x120)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x118)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x111)))
 (let (($x144 (= input.spec-%var-l-1.2.0 ?x97)))
 (let (($x141 (=> $x12 $x144)))
 (let (($x83 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x123 (ite $x83 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x123 (_ bv1 32))))
 (let (($x161 (= $x12 $x143)))
 (let (($x103 (= false false)))
 (let (($x160 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x138 (=> $x160 $x103)))
 (let (($x53 (= ?x123 (_ bv0 32))))
 (let (($x73 (= $x160 $x53)))
 (let (($x78 (and (and (and (and (and $x73 $x138) $x161) $x141) $x140) $x149)))
 (let (($x24 (= $x78 true)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x54 (concat ?x55 (concat ?x41 ?x32)))))
 (let (($x30 (= input.dst.llvm-%l ?x35)))
 (let (($x20 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x23 (and $x20 $x30)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x33)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x18 $x19)))
 (let (($x79 (and $x85 $x68)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x62 $x79)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x8)))))))
 (let (($x74 (and (and (and $x61 true) $x110) $x23)))
 (let (($x147 (= $x74 true)))
 (let (($x77 (= $x147 true)))
 (let (($x154 (= $x77 true)))
 (let (($x31 (and $x154 $x24)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x65 (and $x11 $x31)))
 (let (($x67 (=> $x65 $x107)))
 (not $x67)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x73 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x103 (ite $x73 (_ bv0 32) (_ bv1 32))))
 (let (($x162 (bvuge ?x103 (_ bv1 32))))
 (let (($x17 (= $x162 false)))
 (let (($x12 (= false false)))
 (let (($x138 (= ?x103 (_ bv0 32))))
 (let (($x104 (=> $x138 $x12)))
 (let (($x122 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x138 true)) $x104) $x17)))
 (let (($x67 (= true true)))
 (let (($x60 (and $x67 $x122)))
 (let (($x50 (= $x60 true)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x90 (concat ?x98 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x7 (concat ?x102 (concat ?x100 ?x90))))
 (let (($x119 (= (_ bv0 32) ?x7)))
 (let ((?x150 (ite $x119 (_ bv0 32) (_ bv1 32))))
 (let (($x56 (bvuge ?x150 (_ bv1 32))))
 (let (($x121 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x156 (= $x121 $x56)))
 (let (($x161 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x149 (=> $x161 $x156)))
 (let (($x120 (= ?x150 (_ bv0 32))))
 (let (($x86 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x140 (= $x86 $x120)))
 (let (($x48 (=> $x161 $x140)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x75)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x111)))
 (let (($x158 (= input.spec-%var-l-1.2.0 ?x141)))
 (let (($x96 (=> $x161 $x158)))
 (let (($x155 (= $x161 $x162)))
 (let (($x53 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x143 (=> $x53 $x12)))
 (let (($x82 (= $x53 $x138)))
 (let (($x151 (and (and (and (and (and $x82 $x143) $x155) $x96) $x48) $x149)))
 (let (($x43 (= $x151 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x35 (concat ?x32 (concat ?x64 ?x54)))))
 (let (($x23 (= input.dst.llvm-%l ?x30)))
 (let (($x20 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x74 (and $x20 $x23)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x68)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x49 $x85)))
 (let (($x110 (and $x33 $x79)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x22 $x110)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x40)))))))
 (let (($x154 (and (and (and $x18 true) $x116) $x74)))
 (let (($x157 (= $x154 true)))
 (let (($x160 (= $x157 true)))
 (let (($x83 (= $x160 true)))
 (let (($x109 (and $x83 $x43)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x107 (and $x11 $x109)))
 (let (($x42 (=> $x107 $x50)))
 (not $x42))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x73 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x103 (ite $x73 (_ bv0 32) (_ bv1 32))))
 (let (($x162 (bvuge ?x103 (_ bv1 32))))
 (let (($x17 (= $x162 false)))
 (let (($x12 (= false false)))
 (let (($x138 (= ?x103 (_ bv0 32))))
 (let (($x104 (=> $x138 $x12)))
 (let (($x122 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x138 true)) $x104) $x17)))
 (let (($x67 (= true true)))
 (let (($x60 (and $x67 $x122)))
 (let (($x50 (= $x60 true)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x90 (concat ?x98 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x7 (concat ?x102 (concat ?x100 ?x90))))
 (let (($x119 (= (_ bv0 32) ?x7)))
 (let ((?x150 (ite $x119 (_ bv0 32) (_ bv1 32))))
 (let (($x56 (bvuge ?x150 (_ bv1 32))))
 (let (($x121 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x156 (= $x121 $x56)))
 (let (($x161 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x149 (=> $x161 $x156)))
 (let (($x120 (= ?x150 (_ bv0 32))))
 (let (($x86 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x140 (= $x86 $x120)))
 (let (($x48 (=> $x161 $x140)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x75)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x111)))
 (let (($x158 (= input.spec-%var-l-1.2.0 ?x141)))
 (let (($x96 (=> $x161 $x158)))
 (let (($x155 (= $x161 $x162)))
 (let (($x53 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x143 (=> $x53 $x12)))
 (let (($x82 (= $x53 $x138)))
 (let (($x151 (and (and (and (and (and $x82 $x143) $x155) $x96) $x48) $x149)))
 (let (($x43 (= $x151 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x35 (concat ?x32 (concat ?x64 ?x54)))))
 (let (($x23 (= input.dst.llvm-%l ?x30)))
 (let (($x20 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x74 (and $x20 $x23)))
 (let ((?x68 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x68)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x49 $x85)))
 (let (($x110 (and $x33 $x79)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x22 $x110)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x40)))))))
 (let (($x154 (and (and (and $x18 true) $x116) $x74)))
 (let (($x157 (= $x154 true)))
 (let (($x160 (= $x157 true)))
 (let (($x83 (= $x160 true)))
 (let (($x109 (and $x83 $x43)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x107 (and $x11 $x109)))
 (let (($x42 (=> $x107 $x50)))
 (not $x42))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_27)
(function @fun_27
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_27 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x03405144)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x46d25fdc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
                     #x03405147
                     #x03)
              #x03405144
              #x40)
       #x03405145
       #x51))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x03005140)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x03405147)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x03405144)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x12 (ite $x82 (_ bv0 32) (_ bv1 32))))
 (let (($x24 (bvuge ?x12 (_ bv1 32))))
 (let (($x39 (= $x24 false)))
 (let (($x161 (= false false)))
 (let (($x143 (= ?x12 (_ bv0 32))))
 (let (($x46 (=> $x143 $x161)))
 (let (($x168 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x143 true)) $x46) $x39)))
 (let (($x47 (= true true)))
 (let (($x169 (and $x47 $x168)))
 (let (($x6 (= $x169 true)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x101 (concat ?x100 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x119 (concat ?x7 (concat ?x108 ?x101))))
 (let ((?x76 (bvadd ?x119 (_ bv4 32))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem ?x76))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv2 32))) ?x153))))
 (let (($x92 (= (_ bv0 32) ?x37)))
 (let ((?x135 (ite $x92 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (bvuge ?x135 (_ bv1 32))))
 (let (($x134 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x152 (= $x134 $x125)))
 (let (($x121 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x155 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (and $x155 $x121)))
 (let (($x126 (=> $x109 $x152)))
 (let (($x128 (= ?x135 (_ bv0 32))))
 (let (($x21 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x9 (= $x21 $x128)))
 (let (($x36 (=> $x109 $x9)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x16))))
 (let (($x42 (= input.spec-%var-l-1.2.1.2.0 ?x50)))
 (let (($x163 (=> $x109 $x42)))
 (let (($x95 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x151 (and $x155 $x95)))
 (let (($x43 (=> $x151 $x161)))
 (let (($x150 (= (_ bv0 32) ?x119)))
 (let ((?x120 (ite $x150 (_ bv0 32) (_ bv1 32))))
 (let (($x56 (bvuge ?x120 (_ bv1 32))))
 (let (($x156 (= $x121 $x56)))
 (let (($x149 (=> $x155 $x156)))
 (let (($x140 (= ?x120 (_ bv0 32))))
 (let (($x48 (= $x95 $x140)))
 (let (($x65 (=> $x155 $x48)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x81)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x111)))
 (let (($x31 (= input.spec-%var-l-1.2.0 ?x96)))
 (let (($x94 (=> $x155 $x31)))
 (let (($x89 (= $x155 $x24)))
 (let (($x138 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x162 (=> $x138 $x161)))
 (let (($x78 (= $x138 $x143)))
 (let (($x165 (and (and (and (and (and (and $x78 $x162) $x89) $x94) $x65) $x149) $x43)))
 (let (($x166 (and (and (and $x165 $x163) $x36) $x126)))
 (let (($x136 (= $x166 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x30 (concat ?x54 (concat ?x41 ?x35)))))
 (let (($x74 (= input.dst.llvm-%l ?x23)))
 (let (($x20 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x154 (and $x20 $x74)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x79)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x59 $x33)))
 (let (($x116 (and $x68 $x110)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x113 $x116)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x114)))))))
 (let (($x83 (and (and (and $x49 true) $x77) $x154)))
 (let (($x123 (= $x83 true)))
 (let (($x53 (= $x123 true)))
 (let (($x73 (= $x53 true)))
 (let (($x137 (and $x73 $x136)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x148 (and $x11 $x137)))
 (let (($x112 (=> $x148 $x6)))
 (not $x112)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x82 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x12 (ite $x82 (_ bv0 32) (_ bv1 32))))
 (let (($x24 (bvuge ?x12 (_ bv1 32))))
 (let (($x39 (= $x24 false)))
 (let (($x161 (= false false)))
 (let (($x143 (= ?x12 (_ bv0 32))))
 (let (($x46 (=> $x143 $x161)))
 (let (($x168 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x143 true)) $x46) $x39)))
 (let (($x47 (= true true)))
 (let (($x169 (and $x47 $x168)))
 (let (($x6 (= $x169 true)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x101 (concat ?x100 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x119 (concat ?x7 (concat ?x108 ?x101))))
 (let ((?x76 (bvadd ?x119 (_ bv4 32))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem ?x76))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv2 32))) ?x153))))
 (let (($x92 (= (_ bv0 32) ?x37)))
 (let ((?x135 (ite $x92 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (bvuge ?x135 (_ bv1 32))))
 (let (($x134 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x152 (= $x134 $x125)))
 (let (($x121 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x155 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x109 (and $x155 $x121)))
 (let (($x126 (=> $x109 $x152)))
 (let (($x128 (= ?x135 (_ bv0 32))))
 (let (($x21 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x9 (= $x21 $x128)))
 (let (($x36 (=> $x109 $x9)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x16))))
 (let (($x42 (= input.spec-%var-l-1.2.1.2.0 ?x50)))
 (let (($x163 (=> $x109 $x42)))
 (let (($x95 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x151 (and $x155 $x95)))
 (let (($x43 (=> $x151 $x161)))
 (let (($x150 (= (_ bv0 32) ?x119)))
 (let ((?x120 (ite $x150 (_ bv0 32) (_ bv1 32))))
 (let (($x56 (bvuge ?x120 (_ bv1 32))))
 (let (($x156 (= $x121 $x56)))
 (let (($x149 (=> $x155 $x156)))
 (let (($x140 (= ?x120 (_ bv0 32))))
 (let (($x48 (= $x95 $x140)))
 (let (($x65 (=> $x155 $x48)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x81)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x111)))
 (let (($x31 (= input.spec-%var-l-1.2.0 ?x96)))
 (let (($x94 (=> $x155 $x31)))
 (let (($x89 (= $x155 $x24)))
 (let (($x138 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x162 (=> $x138 $x161)))
 (let (($x78 (= $x138 $x143)))
 (let (($x165 (and (and (and (and (and (and $x78 $x162) $x89) $x94) $x65) $x149) $x43)))
 (let (($x166 (and (and (and $x165 $x163) $x36) $x126)))
 (let (($x136 (= $x166 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x30 (concat ?x54 (concat ?x41 ?x35)))))
 (let (($x74 (= input.dst.llvm-%l ?x23)))
 (let (($x20 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x154 (and $x20 $x74)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x79)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x59 $x33)))
 (let (($x116 (and $x68 $x110)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x113 $x116)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x114)))))))
 (let (($x83 (and (and (and $x49 true) $x77) $x154)))
 (let (($x123 (= $x83 true)))
 (let (($x53 (= $x123 true)))
 (let (($x73 (= $x53 true)))
 (let (($x137 (and $x73 $x136)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x148 (and $x11 $x137)))
 (let (($x112 (=> $x148 $x6)))
 (not $x112)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x20005204)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x1b497f70)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x20005205
                                #x52)
                         #x20005207
                         #x20)
                  #x20005205
                  #x52)))
  (store (store (store a!1 #x20005205 #x52) #x20005207 #x20) #x20005207 #x20)))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x20005200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x20005207)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x20005204)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x143 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x78 (ite $x143 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x78 (_ bv1 32))))
 (let (($x249 (= $x89 false)))
 (let (($x164 (= false false)))
 (let (($x161 (= ?x78 (_ bv0 32))))
 (let (($x248 (=> $x161 $x164)))
 (let (($x252 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x161 true)) $x248) $x249)))
 (let (($x245 (= true true)))
 (let (($x253 (and $x245 $x252)))
 (let (($x254 (= $x253 true)))
 (let (($x213 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x24 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x151 (and $x24 $x127)))
 (let (($x222 (and $x151 $x213)))
 (let (($x223 (=> $x222 $x164)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x108 (concat ?x98 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x119 (concat ?x90 (concat ?x100 ?x108))))
 (let ((?x109 (bvadd ?x119 (_ bv4 32))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem ?x109))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv2 32))) ?x104))))
 (let (($x214 (= (_ bv0 32) ?x17)))
 (let ((?x215 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x219 (bvuge ?x215 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x220 (= $x142 $x219)))
 (let (($x221 (=> $x151 $x220)))
 (let (($x216 (= ?x215 (_ bv0 32))))
 (let (($x217 (= $x213 $x216)))
 (let (($x218 (=> $x151 $x217)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x204))))
 (let (($x211 (= input.spec-%var-l-1.2.1.2.0 ?x210)))
 (let (($x212 (=> $x151 $x211)))
 (let (($x95 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x198 (and $x24 $x95)))
 (let (($x199 (=> $x198 $x164)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x17 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x17 (_ bv4 32))))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x17 (_ bv4 32)) (_ bv2 32))) ?x135)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x17 (_ bv4 32)) (_ bv3 32))) ?x36)))
 (let ((?x178 (bvadd ?x125 (_ bv4 32))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x182))))
 (let (($x189 (= (_ bv0 32) ?x188)))
 (let ((?x190 (ite $x189 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x190 (_ bv1 32))))
 (let (($x194 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x196 (= $x194 $x195)))
 (let (($x63 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x43 (and $x151 $x142)))
 (let (($x167 (and $x43 $x63)))
 (let (($x197 (=> $x167 $x196)))
 (let (($x191 (= ?x190 (_ bv0 32))))
 (let (($x175 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x192 (= $x175 $x191)))
 (let (($x193 (=> $x167 $x192)))
 (let (($x176 (and $x167 $x175)))
 (let (($x177 (=> $x176 $x164)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x112))))
 (let (($x172 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x171)))
 (let (($x173 (=> $x167 $x172)))
 (let (($x152 (= (_ bv0 32) ?x125)))
 (let ((?x126 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x27 (bvuge ?x126 (_ bv1 32))))
 (let (($x14 (= $x63 $x27)))
 (let (($x46 (=> $x43 $x14)))
 (let (($x26 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x148 (and $x43 $x26)))
 (let (($x47 (=> $x148 $x164)))
 (let (($x166 (= ?x126 (_ bv0 32))))
 (let (($x136 (= $x26 $x166)))
 (let (($x137 (=> $x43 $x136)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem ?x17))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv2 32))) ?x130))))
 (let (($x44 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x124)))
 (let (($x29 (=> $x43 $x44)))
 (let (($x150 (= (_ bv0 32) ?x119)))
 (let ((?x120 (ite $x150 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x120 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x156 (=> $x24 $x56)))
 (let (($x140 (= ?x120 (_ bv0 32))))
 (let (($x48 (= $x95 $x140)))
 (let (($x65 (=> $x24 $x48)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x118)))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x94 (= input.spec-%var-l-1.2.0 ?x31)))
 (let (($x129 (=> $x24 $x94)))
 (let (($x131 (= $x24 $x89)))
 (let (($x12 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x155 (=> $x12 $x164)))
 (let (($x162 (= $x12 $x161)))
 (let (($x229 (and (and (and (and (and (and $x162 $x155) $x131) $x129) $x65) $x156) $x29)))
 (let (($x235 (and (and (and (and (and (and $x229 $x137) $x47) $x46) $x173) $x177) $x193)))
 (let (($x241 (and (and (and (and (and (and $x235 $x197) $x199) $x212) $x218) $x221) $x223)))
 (let (($x242 (= $x241 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x13 (concat ?x38 (concat ?x20 ?x146)))))
 (let (($x35 (= input.dst.llvm-%l ?x41)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x154 (and $x77 $x35)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x74)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x59 $x33)))
 (let (($x114 (and $x68 $x79)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x87 $x114)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x18)))))))
 (let (($x53 (and (and (and $x113 true) $x61) $x154)))
 (let (($x73 (= $x53 true)))
 (let (($x103 (= $x73 true)))
 (let (($x138 (= $x103 true)))
 (let (($x243 (and $x138 $x242)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x244 (and $x117 $x243)))
 (let (($x255 (=> $x244 $x254)))
 (not $x255))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x143 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x78 (ite $x143 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (bvuge ?x78 (_ bv1 32))))
 (let (($x249 (= $x89 false)))
 (let (($x164 (= false false)))
 (let (($x161 (= ?x78 (_ bv0 32))))
 (let (($x248 (=> $x161 $x164)))
 (let (($x252 (and (and (and (= input.dst.llvm-%l (_ bv0 32)) (= $x161 true)) $x248) $x249)))
 (let (($x245 (= true true)))
 (let (($x253 (and $x245 $x252)))
 (let (($x254 (= $x253 true)))
 (let (($x213 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x24 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x151 (and $x24 $x127)))
 (let (($x222 (and $x151 $x213)))
 (let (($x223 (=> $x222 $x164)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x108 (concat ?x98 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x119 (concat ?x90 (concat ?x100 ?x108))))
 (let ((?x109 (bvadd ?x119 (_ bv4 32))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem ?x109))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv2 32))) ?x104))))
 (let (($x214 (= (_ bv0 32) ?x17)))
 (let ((?x215 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x219 (bvuge ?x215 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x220 (= $x142 $x219)))
 (let (($x221 (=> $x151 $x220)))
 (let (($x216 (= ?x215 (_ bv0 32))))
 (let (($x217 (= $x213 $x216)))
 (let (($x218 (=> $x151 $x217)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x204))))
 (let (($x211 (= input.spec-%var-l-1.2.1.2.0 ?x210)))
 (let (($x212 (=> $x151 $x211)))
 (let (($x95 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x198 (and $x24 $x95)))
 (let (($x199 (=> $x198 $x164)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x17 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x17 (_ bv4 32))))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x17 (_ bv4 32)) (_ bv2 32))) ?x135)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x17 (_ bv4 32)) (_ bv3 32))) ?x36)))
 (let ((?x178 (bvadd ?x125 (_ bv4 32))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x182))))
 (let (($x189 (= (_ bv0 32) ?x188)))
 (let ((?x190 (ite $x189 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x190 (_ bv1 32))))
 (let (($x194 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x196 (= $x194 $x195)))
 (let (($x63 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x43 (and $x151 $x142)))
 (let (($x167 (and $x43 $x63)))
 (let (($x197 (=> $x167 $x196)))
 (let (($x191 (= ?x190 (_ bv0 32))))
 (let (($x175 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x192 (= $x175 $x191)))
 (let (($x193 (=> $x167 $x192)))
 (let (($x176 (and $x167 $x175)))
 (let (($x177 (=> $x176 $x164)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x112))))
 (let (($x172 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x171)))
 (let (($x173 (=> $x167 $x172)))
 (let (($x152 (= (_ bv0 32) ?x125)))
 (let ((?x126 (ite $x152 (_ bv0 32) (_ bv1 32))))
 (let (($x27 (bvuge ?x126 (_ bv1 32))))
 (let (($x14 (= $x63 $x27)))
 (let (($x46 (=> $x43 $x14)))
 (let (($x26 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x148 (and $x43 $x26)))
 (let (($x47 (=> $x148 $x164)))
 (let (($x166 (= ?x126 (_ bv0 32))))
 (let (($x136 (= $x26 $x166)))
 (let (($x137 (=> $x43 $x136)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem ?x17))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv2 32))) ?x130))))
 (let (($x44 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x124)))
 (let (($x29 (=> $x43 $x44)))
 (let (($x150 (= (_ bv0 32) ?x119)))
 (let ((?x120 (ite $x150 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x120 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x156 (=> $x24 $x56)))
 (let (($x140 (= ?x120 (_ bv0 32))))
 (let (($x48 (= $x95 $x140)))
 (let (($x65 (=> $x24 $x48)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x118)))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x94 (= input.spec-%var-l-1.2.0 ?x31)))
 (let (($x129 (=> $x24 $x94)))
 (let (($x131 (= $x24 $x89)))
 (let (($x12 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x155 (=> $x12 $x164)))
 (let (($x162 (= $x12 $x161)))
 (let (($x229 (and (and (and (and (and (and $x162 $x155) $x131) $x129) $x65) $x156) $x29)))
 (let (($x235 (and (and (and (and (and (and $x229 $x137) $x47) $x46) $x173) $x177) $x193)))
 (let (($x241 (and (and (and (and (and (and $x235 $x197) $x199) $x212) $x218) $x221) $x223)))
 (let (($x242 (= $x241 true)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x13 (concat ?x38 (concat ?x20 ?x146)))))
 (let (($x35 (= input.dst.llvm-%l ?x41)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x154 (and $x77 $x35)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x74)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x59 $x33)))
 (let (($x114 (and $x68 $x79)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x87 $x114)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x113 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x52 $x18)))))))
 (let (($x53 (and (and (and $x113 true) $x61) $x154)))
 (let (($x73 (= $x53 true)))
 (let (($x103 (= $x73 true)))
 (let (($x138 (= $x103 true)))
 (let (($x243 (and $x138 $x242)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x244 (and $x117 $x243)))
 (let (($x255 (=> $x244 $x254)))
 (not $x255))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_43)
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b11000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv8 8)))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x91eb0000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x91000906
                                #xeb)
                         #x91eb0003
                         #x91)
                  #x91eb0002
                  #xeb)))
  (store (store (store a!1 #x00000007 #x91) #x00000005 #x09) #x91000907 #x91)))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x6e14ffff)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x91eb0000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x91eb0000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x91eb0003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x91eb0000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var345X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var345X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x159 (concat ?x229 (select input.dst.llvm-mem (bvadd input.ind-%var345X (_ bv4 32))))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var345X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var345X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x9 (concat ?x128 (concat ?x153 ?x159))))
 (let (($x37 (= ?x9 ?x9)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x164 (ite $x162 (_ bv0 32) (_ bv1 32))))
 (let (($x225 (bvuge ?x164 (_ bv1 32))))
 (let (($x92 (=> $x225 $x37)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.ind-%var345X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var345X))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.ind-%var345X (_ bv2 32))) ?x132)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.ind-%var345X (_ bv3 32))) ?x21)))
 (let (($x130 (= ?x50 ?x50)))
 (let (($x76 (=> $x225 $x130)))
 (let (($x60 (= $x225 $x225)))
 (let (($x155 (= ?x164 (_ bv0 32))))
 (let (($x122 (= $x155 $x155)))
 (let (($x66 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x24 (= false false)))
 (let (($x25 (=> $x155 $x24)))
 (let (($x152 (and (and (and (and (and $x25 $x66) $x122) $x60) $x76) $x92)))
 (let (($x16 (= true true)))
 (let (($x126 (and $x16 $x152)))
 (let (($x166 (= $x126 true)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x7 (concat ?x100 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x150 (concat ?x119 (concat ?x91 ?x7))))
 (let (($x120 (= (_ bv0 32) ?x150)))
 (let ((?x140 (ite $x120 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x140 (_ bv1 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x131 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (=> $x131 $x56)))
 (let (($x48 (= ?x140 (_ bv0 32))))
 (let (($x115 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x65 (= $x115 $x48)))
 (let (($x227 (=> $x131 $x65)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x75)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x226 (= input.spec-%var-l-1.2.0 ?x129)))
 (let (($x86 (=> $x131 $x226)))
 (let (($x97 (= $x131 $x225)))
 (let (($x161 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x89 (=> $x161 $x24)))
 (let (($x224 (= $x161 $x155)))
 (let (($x43 (and (and (and (and (and $x224 $x89) $x97) $x86) $x227) $x156)))
 (let (($x165 (= $x43 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x41 (concat ?x146 (concat ?x30 ?x13)))))
 (let (($x154 (= input.dst.llvm-%l ?x35)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x53 (and $x77 $x154)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x79)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x19 $x68)))
 (let (($x61 (and $x74 $x114)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x22 $x61)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x49)))))))
 (let (($x138 (and (and (and $x59 true) $x123) $x53)))
 (let (($x82 (= $x138 true)))
 (let (($x12 (= $x82 true)))
 (let (($x143 (= $x12 true)))
 (let (($x109 (and $x143 $x165)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x67 (and $x117 $x109)))
 (let (($x136 (=> $x67 $x166)))
 (not $x136))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var345X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x229 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var345X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x159 (concat ?x229 (select input.dst.llvm-mem (bvadd input.ind-%var345X (_ bv4 32))))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var345X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var345X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x9 (concat ?x128 (concat ?x153 ?x159))))
 (let (($x37 (= ?x9 ?x9)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x164 (ite $x162 (_ bv0 32) (_ bv1 32))))
 (let (($x225 (bvuge ?x164 (_ bv1 32))))
 (let (($x92 (=> $x225 $x37)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.ind-%var345X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var345X))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.ind-%var345X (_ bv2 32))) ?x132)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.ind-%var345X (_ bv3 32))) ?x21)))
 (let (($x130 (= ?x50 ?x50)))
 (let (($x76 (=> $x225 $x130)))
 (let (($x60 (= $x225 $x225)))
 (let (($x155 (= ?x164 (_ bv0 32))))
 (let (($x122 (= $x155 $x155)))
 (let (($x66 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x24 (= false false)))
 (let (($x25 (=> $x155 $x24)))
 (let (($x152 (and (and (and (and (and $x25 $x66) $x122) $x60) $x76) $x92)))
 (let (($x16 (= true true)))
 (let (($x126 (and $x16 $x152)))
 (let (($x166 (= $x126 true)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x7 (concat ?x100 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x150 (concat ?x119 (concat ?x91 ?x7))))
 (let (($x120 (= (_ bv0 32) ?x150)))
 (let ((?x140 (ite $x120 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x140 (_ bv1 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x131 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (=> $x131 $x56)))
 (let (($x48 (= ?x140 (_ bv0 32))))
 (let (($x115 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x65 (= $x115 $x48)))
 (let (($x227 (=> $x131 $x65)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x75)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x226 (= input.spec-%var-l-1.2.0 ?x129)))
 (let (($x86 (=> $x131 $x226)))
 (let (($x97 (= $x131 $x225)))
 (let (($x161 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x89 (=> $x161 $x24)))
 (let (($x224 (= $x161 $x155)))
 (let (($x43 (and (and (and (and (and $x224 $x89) $x97) $x86) $x227) $x156)))
 (let (($x165 (= $x43 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x41 (concat ?x146 (concat ?x30 ?x13)))))
 (let (($x154 (= input.dst.llvm-%l ?x35)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x53 (and $x77 $x154)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x79)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x19 $x68)))
 (let (($x61 (and $x74 $x114)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x22 $x61)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x49)))))))
 (let (($x138 (and (and (and $x59 true) $x123) $x53)))
 (let (($x82 (= $x138 true)))
 (let (($x12 (= $x82 true)))
 (let (($x143 (= $x12 true)))
 (let (($x109 (and $x143 $x165)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x67 (and $x117 $x109)))
 (let (($x136 (=> $x67 $x166)))
 (not $x136))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var367X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var367X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var367X.2.0 () (_ BitVec 32))
(declare-fun spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun spec-%var-l-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var367X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x133 (concat ?x159 (select input.dst.llvm-mem (bvadd input.ind-%var367X (_ bv4 32))))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var367X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var367X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x166 (concat ?x126 (concat ?x37 ?x133))))
 (let (($x137 (= ?x166 input.ind-%var367X.2.1)))
 (let (($x224 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x24 (ite $x224 (_ bv0 32) (_ bv1 32))))
 (let (($x151 (bvuge ?x24 (_ bv1 32))))
 (let (($x96 (=> $x151 $x137)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.ind-%var367X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var367X))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.ind-%var367X (_ bv2 32))) ?x21)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.ind-%var367X (_ bv3 32))) ?x76)))
 (let (($x26 (= ?x134 input.ind-%var367X.2.0)))
 (let (($x153 (=> $x151 $x26)))
 (let (($x84 (bvuge spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x139 (= $x151 $x84)))
 (let (($x131 (= false false)))
 (let (($x89 (= ?x24 (_ bv0 32))))
 (let (($x163 (=> $x89 $x131)))
 (let (($x107 (= spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x42 (= $x89 $x107)))
 (let (($x60 (= input.dst.llvm-%l spec-%var-l-0.L3%5%bbentry)))
 (let (($x148 (and (and (and (and (and $x60 $x42) $x163) $x139) $x153) $x96)))
 (let (($x122 (= true true)))
 (let (($x47 (and $x122 $x148)))
 (let (($x231 (= $x47 true)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x93 (concat ?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x120 (concat ?x150 (concat ?x90 ?x93))))
 (let (($x140 (= (_ bv0 32) ?x120)))
 (let ((?x48 (ite $x140 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x48 (_ bv1 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x97 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (=> $x97 $x56)))
 (let (($x65 (= ?x48 (_ bv0 32))))
 (let (($x99 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x227 (= $x99 $x65)))
 (let (($x142 (=> $x97 $x227)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x149 (= input.spec-%var-l-1.2.0 ?x86)))
 (let (($x95 (=> $x97 $x149)))
 (let (($x111 (= $x97 $x151)))
 (let (($x155 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x225 (=> $x155 $x131)))
 (let (($x228 (= $x155 $x89)))
 (let (($x16 (and (and (and (and (and $x228 $x225) $x111) $x95) $x142) $x156)))
 (let (($x25 (= $x16 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x154 (concat ?x35 (concat ?x13 (concat ?x20 ?x41)))))
 (let (($x53 (= input.dst.llvm-%l ?x154)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x138 (and $x77 $x53)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x114)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x85 $x74)))
 (let (($x123 (and $x79 $x61)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x70 $x123)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x83)))))))
 (let (($x143 (and (and (and $x19 true) $x103) $x138)))
 (let (($x78 (= $x143 true)))
 (let (($x161 (= $x78 true)))
 (let (($x162 (= $x161 true)))
 (let (($x66 (and $x162 $x25)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x51 (and $x117 $x66)))
 (let (($x63 (=> $x51 $x231)))
 (not $x63))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var367X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var367X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var367X.2.0 () (_ BitVec 32))
(declare-fun spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun spec-%var-l-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var367X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x133 (concat ?x159 (select input.dst.llvm-mem (bvadd input.ind-%var367X (_ bv4 32))))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var367X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var367X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x166 (concat ?x126 (concat ?x37 ?x133))))
 (let (($x137 (= ?x166 input.ind-%var367X.2.1)))
 (let (($x224 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x24 (ite $x224 (_ bv0 32) (_ bv1 32))))
 (let (($x151 (bvuge ?x24 (_ bv1 32))))
 (let (($x96 (=> $x151 $x137)))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd input.ind-%var367X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var367X))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.ind-%var367X (_ bv2 32))) ?x21)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.ind-%var367X (_ bv3 32))) ?x76)))
 (let (($x26 (= ?x134 input.ind-%var367X.2.0)))
 (let (($x153 (=> $x151 $x26)))
 (let (($x84 (bvuge spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x139 (= $x151 $x84)))
 (let (($x131 (= false false)))
 (let (($x89 (= ?x24 (_ bv0 32))))
 (let (($x163 (=> $x89 $x131)))
 (let (($x107 (= spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x42 (= $x89 $x107)))
 (let (($x60 (= input.dst.llvm-%l spec-%var-l-0.L3%5%bbentry)))
 (let (($x148 (and (and (and (and (and $x60 $x42) $x163) $x139) $x153) $x96)))
 (let (($x122 (= true true)))
 (let (($x47 (and $x122 $x148)))
 (let (($x231 (= $x47 true)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x93 (concat ?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x120 (concat ?x150 (concat ?x90 ?x93))))
 (let (($x140 (= (_ bv0 32) ?x120)))
 (let ((?x48 (ite $x140 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x48 (_ bv1 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x97 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (=> $x97 $x56)))
 (let (($x65 (= ?x48 (_ bv0 32))))
 (let (($x99 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x227 (= $x99 $x65)))
 (let (($x142 (=> $x97 $x227)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x149 (= input.spec-%var-l-1.2.0 ?x86)))
 (let (($x95 (=> $x97 $x149)))
 (let (($x111 (= $x97 $x151)))
 (let (($x155 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x225 (=> $x155 $x131)))
 (let (($x228 (= $x155 $x89)))
 (let (($x16 (and (and (and (and (and $x228 $x225) $x111) $x95) $x142) $x156)))
 (let (($x25 (= $x16 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x154 (concat ?x35 (concat ?x13 (concat ?x20 ?x41)))))
 (let (($x53 (= input.dst.llvm-%l ?x154)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x138 (and $x77 $x53)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x114)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x85 $x74)))
 (let (($x123 (and $x79 $x61)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x70 $x123)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x83)))))))
 (let (($x143 (and (and (and $x19 true) $x103) $x138)))
 (let (($x78 (= $x143 true)))
 (let (($x161 (= $x78 true)))
 (let (($x162 (= $x161 true)))
 (let (($x66 (and $x162 $x25)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x51 (and $x117 $x66)))
 (let (($x63 (=> $x51 $x231)))
 (not $x63))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.ind-%var367X.2.1 #b10000000000000000000000000000000)
(= input.ind-%var367X #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.ind-%var367X.2.0 #b10000000000000000000000000000000)
(= spec-%var-l-0.L3%5%bbentry.0 #b00000000000000000000000000000000)
(= spec-%var-l-0.L3%5%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.ind-%var367X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var367X.2.1 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.ind-%var367X.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun spec-%var-l-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var367X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.ind-%var367X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.ind-%var367X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun spec-%var-l-0.L3%5%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var409X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var409X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var409X.2.0 () (_ BitVec 32))
(declare-fun spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun spec-%var-l-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x178 (concat ?x234 (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv4 32))))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x181 (concat ?x180 (concat ?x187 ?x178))))
 (let (($x182 (= ?x181 input.ind-%var409X.2.1)))
 (let (($x228 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x131 (ite $x228 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x131 (_ bv1 32))))
 (let (($x185 (=> $x165 $x182)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var409X))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv2 32))) ?x169)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv3 32))) ?x112)))
 (let (($x233 (= ?x172 input.ind-%var409X.2.0)))
 (let (($x174 (=> $x165 $x233)))
 (let (($x97 (= false false)))
 (let (($x225 (= ?x131 (_ bv0 32))))
 (let (($x39 (=> $x225 $x97)))
 (let (($x232 (bvuge spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x167 (= $x165 $x232)))
 (let (($x14 (= spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x46 (= $x225 $x14)))
 (let (($x52 (= input.dst.llvm-%l spec-%var-l-0.L3%5%bbentry)))
 (let (($x192 (and (and (and (and (and $x52 $x46) $x167) $x39) $x174) $x185)))
 (let (($x94 (= true true)))
 (let (($x193 (and $x94 $x192)))
 (let (($x235 (= $x193 true)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x98 (concat ?x90 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x140 (concat ?x120 (concat ?x119 ?x98))))
 (let ((?x124 (bvadd ?x140 (_ bv4 32))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x132))))
 (let (($x153 (= (_ bv0 32) ?x26)))
 (let ((?x230 (ite $x153 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x230 (_ bv1 32))))
 (let (($x9 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x44 (= $x9 $x37)))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x111 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x66 (and $x111 $x127)))
 (let (($x159 (=> $x66 $x44)))
 (let (($x29 (= ?x230 (_ bv0 32))))
 (let (($x125 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x152 (= $x125 $x29)))
 (let (($x126 (=> $x66 $x152)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv1 32))) (select input.dst.llvm-mem ?x140))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv2 32))) ?x36))))
 (let (($x139 (= input.spec-%var-l-1.2.1.2.0 ?x84)))
 (let (($x54 (=> $x66 $x139)))
 (let (($x101 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x16 (and $x111 $x101)))
 (let (($x25 (=> $x16 $x97)))
 (let (($x48 (= (_ bv0 32) ?x140)))
 (let ((?x65 (ite $x48 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x65 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x156 (=> $x111 $x56)))
 (let (($x227 (= ?x65 (_ bv0 32))))
 (let (($x142 (= $x101 $x227)))
 (let (($x67 (=> $x111 $x142)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x88)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x109 (= input.spec-%var-l-1.2.0 ?x95)))
 (let (($x115 (=> $x111 $x109)))
 (let (($x31 (= $x111 $x165)))
 (let (($x89 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x151 (=> $x89 $x97)))
 (let (($x43 (= $x89 $x225)))
 (let (($x137 (and (and (and (and (and (and $x43 $x151) $x31) $x115) $x67) $x156) $x25)))
 (let (($x47 (and (and (and $x137 $x54) $x126) $x159)))
 (let (($x231 (= $x47 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x154 (concat ?x41 (concat ?x30 ?x35)))))
 (let (($x138 (= input.dst.llvm-%l ?x53)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x143 (and $x77 $x138)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x61)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x33 $x79)))
 (let (($x103 (and $x114 $x123)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x18 $x103)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x73)))))))
 (let (($x162 (and (and (and $x85 true) $x12) $x143)))
 (let (($x164 (= $x162 true)))
 (let (($x155 (= $x164 true)))
 (let (($x224 (= $x155 true)))
 (let (($x63 (and $x224 $x231)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x27 (and $x117 $x63)))
 (let (($x194 (=> $x27 $x235)))
 (not $x194)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var409X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var409X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var409X.2.0 () (_ BitVec 32))
(declare-fun spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun spec-%var-l-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x178 (concat ?x234 (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv4 32))))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var409X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x181 (concat ?x180 (concat ?x187 ?x178))))
 (let (($x182 (= ?x181 input.ind-%var409X.2.1)))
 (let (($x228 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x131 (ite $x228 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x131 (_ bv1 32))))
 (let (($x185 (=> $x165 $x182)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var409X))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv2 32))) ?x169)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.ind-%var409X (_ bv3 32))) ?x112)))
 (let (($x233 (= ?x172 input.ind-%var409X.2.0)))
 (let (($x174 (=> $x165 $x233)))
 (let (($x97 (= false false)))
 (let (($x225 (= ?x131 (_ bv0 32))))
 (let (($x39 (=> $x225 $x97)))
 (let (($x232 (bvuge spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x167 (= $x165 $x232)))
 (let (($x14 (= spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x46 (= $x225 $x14)))
 (let (($x52 (= input.dst.llvm-%l spec-%var-l-0.L3%5%bbentry)))
 (let (($x192 (and (and (and (and (and $x52 $x46) $x167) $x39) $x174) $x185)))
 (let (($x94 (= true true)))
 (let (($x193 (and $x94 $x192)))
 (let (($x235 (= $x193 true)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x98 (concat ?x90 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x140 (concat ?x120 (concat ?x119 ?x98))))
 (let ((?x124 (bvadd ?x140 (_ bv4 32))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x132))))
 (let (($x153 (= (_ bv0 32) ?x26)))
 (let ((?x230 (ite $x153 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x230 (_ bv1 32))))
 (let (($x9 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x44 (= $x9 $x37)))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x111 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x66 (and $x111 $x127)))
 (let (($x159 (=> $x66 $x44)))
 (let (($x29 (= ?x230 (_ bv0 32))))
 (let (($x125 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x152 (= $x125 $x29)))
 (let (($x126 (=> $x66 $x152)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv1 32))) (select input.dst.llvm-mem ?x140))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv2 32))) ?x36))))
 (let (($x139 (= input.spec-%var-l-1.2.1.2.0 ?x84)))
 (let (($x54 (=> $x66 $x139)))
 (let (($x101 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x16 (and $x111 $x101)))
 (let (($x25 (=> $x16 $x97)))
 (let (($x48 (= (_ bv0 32) ?x140)))
 (let ((?x65 (ite $x48 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x65 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x156 (=> $x111 $x56)))
 (let (($x227 (= ?x65 (_ bv0 32))))
 (let (($x142 (= $x101 $x227)))
 (let (($x67 (=> $x111 $x142)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x88)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x109 (= input.spec-%var-l-1.2.0 ?x95)))
 (let (($x115 (=> $x111 $x109)))
 (let (($x31 (= $x111 $x165)))
 (let (($x89 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x151 (=> $x89 $x97)))
 (let (($x43 (= $x89 $x225)))
 (let (($x137 (and (and (and (and (and (and $x43 $x151) $x31) $x115) $x67) $x156) $x25)))
 (let (($x47 (and (and (and $x137 $x54) $x126) $x159)))
 (let (($x231 (= $x47 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x154 (concat ?x41 (concat ?x30 ?x35)))))
 (let (($x138 (= input.dst.llvm-%l ?x53)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x143 (and $x77 $x138)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x61)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x33 $x79)))
 (let (($x103 (and $x114 $x123)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x18 $x103)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x73)))))))
 (let (($x162 (and (and (and $x85 true) $x12) $x143)))
 (let (($x164 (= $x162 true)))
 (let (($x155 (= $x164 true)))
 (let (($x224 (= $x155 true)))
 (let (($x63 (and $x224 $x231)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x27 (and $x117 $x63)))
 (let (($x194 (=> $x27 $x235)))
 (not $x194)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.ind-%var409X.2.1 #b10000000000000000000000000000000)
(= input.ind-%var409X #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.ind-%var409X.2.0 #b10000000000000000000000000000000)
(= spec-%var-l-0.L3%5%bbentry.0 #b00000000000000000000000000000000)
(= spec-%var-l-0.L3%5%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var409X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.ind-%var409X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.ind-%var409X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun spec-%var-l-0.L3%5%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x630776c8)
  (define-fun spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00800000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x3692fee2)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xc8)
                                #x630776cc
                                #x0f)
                         #x630776cf
                         #x07)
                  #x070f7616
                  #x0f)))
(let ((a!2 (store (store (store (store a!1 #x070f7614 #x07) #x630776c9 #x76)
                         #x630776cb
                         #x63)
                  #x070f7615
                  #x07)))
  (store (store (store (store a!2 #x070f7613 #x0f) #x630776ce #x0f)
                #x630776cd
                #x76)
         #x630776ca
         #x07))))
  (define-fun input.ind-%var409X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var409X.2.1 () (_ BitVec 32)
    #x37373737)
  (define-fun input.ind-%var409X.2.0 () (_ BitVec 32)
    #xc8c8c8c8)
  (define-fun spec-%var-l-0.L3%5%bbentry () (_ BitVec 32)
    #x630776c8)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xc8c8c8c8)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x630776c8)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x630776c8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x630776cb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x630776c8)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var451X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var451X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var451X.2.0 () (_ BitVec 32))
(declare-fun spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun spec-%var-l-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var451X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x272 (concat ?x271 (select input.dst.llvm-mem (bvadd input.ind-%var451X (_ bv4 32))))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var451X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var451X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x278 (concat ?x277 (concat ?x274 ?x272))))
 (let (($x280 (= ?x278 input.ind-%var451X.2.1)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x97 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x97 (_ bv1 32))))
 (let (($x281 (=> $x133 $x280)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd input.ind-%var451X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var451X))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd input.ind-%var451X (_ bv2 32))) ?x258)))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd input.ind-%var451X (_ bv3 32))) ?x261)))
 (let (($x266 (= ?x264 input.ind-%var451X.2.0)))
 (let (($x267 (=> $x133 $x266)))
 (let (($x111 (= false false)))
 (let (($x151 (= ?x97 (_ bv0 32))))
 (let (($x141 (=> $x151 $x111)))
 (let (($x255 (bvuge spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x256 (= $x133 $x255)))
 (let (($x253 (= spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x254 (= $x151 $x253)))
 (let (($x249 (= input.dst.llvm-%l spec-%var-l-0.L3%5%bbentry)))
 (let (($x286 (and (and (and (and (and $x249 $x254) $x256) $x141) $x267) $x281)))
 (let (($x248 (= true true)))
 (let (($x287 (and $x248 $x286)))
 (let (($x288 (= $x287 true)))
 (let (($x205 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x31 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x25 (and $x31 $x127)))
 (let (($x212 (and $x25 $x205)))
 (let (($x238 (=> $x212 $x111)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x100 (concat ?x119 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x48 (concat ?x140 (concat ?x150 ?x100))))
 (let ((?x51 (bvadd ?x48 (_ bv4 32))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem ?x51))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv2 32))) ?x42))))
 (let (($x206 (= (_ bv0 32) ?x84)))
 (let ((?x202 (ite $x206 (_ bv0 32) (_ bv1 32))))
 (let (($x207 (bvuge ?x202 (_ bv1 32))))
 (let (($x16 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x210 (= $x16 $x207)))
 (let (($x211 (=> $x25 $x210)))
 (let (($x203 (= ?x202 (_ bv0 32))))
 (let (($x201 (= $x205 $x203)))
 (let (($x204 (=> $x25 $x201)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x196))))
 (let (($x208 (= input.spec-%var-l-1.2.1.2.0 ?x200)))
 (let (($x209 (=> $x25 $x208)))
 (let (($x102 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x194 (and $x31 $x102)))
 (let (($x195 (=> $x194 $x111)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x84 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x84 (_ bv4 32))))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x84 (_ bv4 32)) (_ bv2 32))) ?x29)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x84 (_ bv4 32)) (_ bv3 32))) ?x148)))
 (let ((?x233 (bvadd ?x44 (_ bv4 32))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x184))))
 (let (($x178 (= (_ bv0 32) ?x176)))
 (let ((?x183 (ite $x178 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x183 (_ bv1 32))))
 (let (($x185 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x193 (= $x185 $x192)))
 (let (($x52 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x137 (and $x25 $x16)))
 (let (($x188 (and $x137 $x52)))
 (let (($x235 (=> $x188 $x193)))
 (let (($x181 (= ?x183 (_ bv0 32))))
 (let (($x112 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x179 (= $x112 $x181)))
 (let (($x182 (=> $x188 $x179)))
 (let (($x172 (and $x188 $x112)))
 (let (($x173 (=> $x172 $x111)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x190))))
 (let (($x105 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x45)))
 (let (($x170 (=> $x188 $x105)))
 (let (($x159 (= (_ bv0 32) ?x44)))
 (let ((?x47 (ite $x159 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x47 (_ bv1 32))))
 (let (($x14 (= $x52 $x64)))
 (let (($x46 (=> $x137 $x14)))
 (let (($x132 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x94 (and $x137 $x132)))
 (let (($x55 (=> $x94 $x111)))
 (let (($x231 (= ?x47 (_ bv0 32))))
 (let (($x63 (= $x132 $x231)))
 (let (($x27 (=> $x137 $x63)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem ?x84))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv2 32))) ?x80))))
 (let (($x130 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x21)))
 (let (($x104 (=> $x137 $x130)))
 (let (($x65 (= (_ bv0 32) ?x48)))
 (let ((?x227 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x227 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x156 (=> $x31 $x56)))
 (let (($x142 (= ?x227 (_ bv0 32))))
 (let (($x67 (= $x102 $x142)))
 (let (($x166 (=> $x31 $x67)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x118)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x92 (= input.spec-%var-l-1.2.0 ?x115)))
 (let (($x99 (=> $x31 $x92)))
 (let (($x129 (= $x31 $x133)))
 (let (($x225 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x165 (=> $x225 $x111)))
 (let (($x229 (= $x225 $x151)))
 (let (($x218 (and (and (and (and (and (and $x229 $x165) $x129) $x99) $x166) $x156) $x104)))
 (let (($x222 (and (and (and (and (and (and $x218 $x27) $x55) $x46) $x170) $x173) $x182)))
 (let (($x245 (and (and (and (and (and (and $x222 $x235) $x195) $x209) $x204) $x211) $x238)))
 (let (($x246 (= $x245 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x53 (concat ?x35 (concat ?x20 ?x154)))))
 (let (($x143 (= input.dst.llvm-%l ?x138)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x162 (and $x77 $x143)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x123)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x68 $x114)))
 (let (($x12 (and $x61 $x103)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x49 $x12)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x82)))))))
 (let (($x224 (and (and (and $x33 true) $x161) $x162)))
 (let (($x24 (= $x224 true)))
 (let (($x89 (= $x24 true)))
 (let (($x228 (= $x89 true)))
 (let (($x247 (and $x228 $x246)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x250 (and $x117 $x247)))
 (let (($x289 (=> $x250 $x288)))
 (not $x289))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var451X.2.1 () (_ BitVec 32))
(declare-fun input.ind-%var451X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.ind-%var451X.2.0 () (_ BitVec 32))
(declare-fun spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun spec-%var-l-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var451X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x272 (concat ?x271 (select input.dst.llvm-mem (bvadd input.ind-%var451X (_ bv4 32))))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var451X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var451X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x278 (concat ?x277 (concat ?x274 ?x272))))
 (let (($x280 (= ?x278 input.ind-%var451X.2.1)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x97 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x97 (_ bv1 32))))
 (let (($x281 (=> $x133 $x280)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd input.ind-%var451X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var451X))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd input.ind-%var451X (_ bv2 32))) ?x258)))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd input.ind-%var451X (_ bv3 32))) ?x261)))
 (let (($x266 (= ?x264 input.ind-%var451X.2.0)))
 (let (($x267 (=> $x133 $x266)))
 (let (($x111 (= false false)))
 (let (($x151 (= ?x97 (_ bv0 32))))
 (let (($x141 (=> $x151 $x111)))
 (let (($x255 (bvuge spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x256 (= $x133 $x255)))
 (let (($x253 (= spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x254 (= $x151 $x253)))
 (let (($x249 (= input.dst.llvm-%l spec-%var-l-0.L3%5%bbentry)))
 (let (($x286 (and (and (and (and (and $x249 $x254) $x256) $x141) $x267) $x281)))
 (let (($x248 (= true true)))
 (let (($x287 (and $x248 $x286)))
 (let (($x288 (= $x287 true)))
 (let (($x205 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x31 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x25 (and $x31 $x127)))
 (let (($x212 (and $x25 $x205)))
 (let (($x238 (=> $x212 $x111)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x100 (concat ?x119 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x48 (concat ?x140 (concat ?x150 ?x100))))
 (let ((?x51 (bvadd ?x48 (_ bv4 32))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem ?x51))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv2 32))) ?x42))))
 (let (($x206 (= (_ bv0 32) ?x84)))
 (let ((?x202 (ite $x206 (_ bv0 32) (_ bv1 32))))
 (let (($x207 (bvuge ?x202 (_ bv1 32))))
 (let (($x16 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x210 (= $x16 $x207)))
 (let (($x211 (=> $x25 $x210)))
 (let (($x203 (= ?x202 (_ bv0 32))))
 (let (($x201 (= $x205 $x203)))
 (let (($x204 (=> $x25 $x201)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x196))))
 (let (($x208 (= input.spec-%var-l-1.2.1.2.0 ?x200)))
 (let (($x209 (=> $x25 $x208)))
 (let (($x102 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x194 (and $x31 $x102)))
 (let (($x195 (=> $x194 $x111)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x84 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x84 (_ bv4 32))))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x84 (_ bv4 32)) (_ bv2 32))) ?x29)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x84 (_ bv4 32)) (_ bv3 32))) ?x148)))
 (let ((?x233 (bvadd ?x44 (_ bv4 32))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x184))))
 (let (($x178 (= (_ bv0 32) ?x176)))
 (let ((?x183 (ite $x178 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x183 (_ bv1 32))))
 (let (($x185 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x193 (= $x185 $x192)))
 (let (($x52 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x137 (and $x25 $x16)))
 (let (($x188 (and $x137 $x52)))
 (let (($x235 (=> $x188 $x193)))
 (let (($x181 (= ?x183 (_ bv0 32))))
 (let (($x112 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x179 (= $x112 $x181)))
 (let (($x182 (=> $x188 $x179)))
 (let (($x172 (and $x188 $x112)))
 (let (($x173 (=> $x172 $x111)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x190))))
 (let (($x105 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x45)))
 (let (($x170 (=> $x188 $x105)))
 (let (($x159 (= (_ bv0 32) ?x44)))
 (let ((?x47 (ite $x159 (_ bv0 32) (_ bv1 32))))
 (let (($x64 (bvuge ?x47 (_ bv1 32))))
 (let (($x14 (= $x52 $x64)))
 (let (($x46 (=> $x137 $x14)))
 (let (($x132 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x94 (and $x137 $x132)))
 (let (($x55 (=> $x94 $x111)))
 (let (($x231 (= ?x47 (_ bv0 32))))
 (let (($x63 (= $x132 $x231)))
 (let (($x27 (=> $x137 $x63)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem ?x84))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv2 32))) ?x80))))
 (let (($x130 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x21)))
 (let (($x104 (=> $x137 $x130)))
 (let (($x65 (= (_ bv0 32) ?x48)))
 (let ((?x227 (ite $x65 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x227 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x156 (=> $x31 $x56)))
 (let (($x142 (= ?x227 (_ bv0 32))))
 (let (($x67 (= $x102 $x142)))
 (let (($x166 (=> $x31 $x67)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x118)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x92 (= input.spec-%var-l-1.2.0 ?x115)))
 (let (($x99 (=> $x31 $x92)))
 (let (($x129 (= $x31 $x133)))
 (let (($x225 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x165 (=> $x225 $x111)))
 (let (($x229 (= $x225 $x151)))
 (let (($x218 (and (and (and (and (and (and $x229 $x165) $x129) $x99) $x166) $x156) $x104)))
 (let (($x222 (and (and (and (and (and (and $x218 $x27) $x55) $x46) $x170) $x173) $x182)))
 (let (($x245 (and (and (and (and (and (and $x222 $x235) $x195) $x209) $x204) $x211) $x238)))
 (let (($x246 (= $x245 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x53 (concat ?x35 (concat ?x20 ?x154)))))
 (let (($x143 (= input.dst.llvm-%l ?x138)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x162 (and $x77 $x143)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x123)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x79)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x68 $x114)))
 (let (($x12 (and $x61 $x103)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x49 $x12)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x82)))))))
 (let (($x224 (and (and (and $x33 true) $x161) $x162)))
 (let (($x24 (= $x224 true)))
 (let (($x89 (= $x24 true)))
 (let (($x228 (= $x89 true)))
 (let (($x247 (and $x228 $x246)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x250 (and $x117 $x247)))
 (let (($x289 (=> $x250 $x288)))
 (not $x289))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.ind-%var451X.2.1 #b10000000000000000000000000000000)
(= input.ind-%var451X #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.ind-%var451X.2.0 #b10000000000000000000000000000000)
(= spec-%var-l-0.L3%5%bbentry.0 #b00000000000000000000000000000000)
(= spec-%var-l-0.L3%5%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var451X.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.ind-%var451X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.ind-%var451X.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun spec-%var-l-0.L3%5%bbentry () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9855c0c8)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00400000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x560c952e)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xc0)
                                #x9855c0cf
                                #x49)
                         #x9855c0c7
                         #x55)
                  #x49c0c0c6
                  #x55)))
(let ((a!2 (store (store (store (store a!1 #x49c0c0c7 #x98) #x55c0c0c5 #x0d)
                         #x9855c0cb
                         #x98)
                  #x55c0c0c7
                  #x20)))
  (store (store a!2 #x9855c0ca #x55) #x9855c0c8 #xc8))))
  (define-fun input.ind-%var451X () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var451X.2.1 () (_ BitVec 32)
    #xc0c0c0c0)
  (define-fun input.ind-%var451X.2.0 () (_ BitVec 32)
    #xc0c0c0c0)
  (define-fun spec-%var-l-0.L3%5%bbentry () (_ BitVec 32)
    #x9855c0c8)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xc0c0c0c0)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #xc0c0c0c0)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #xc0c0c0c0)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x9855c0c8)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x9855c0c8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9855c0cb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9855c0c8)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var506X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var506X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x50 (concat ?x218 (select input.dst.llvm-mem (bvadd input.ind-%var506X (_ bv4 32))))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var506X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var506X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x126 (concat ?x152 (concat ?x76 ?x50))))
 (let (($x153 (= ?x126 ?x126)))
 (let (($x229 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x111 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x214 (bvuge ?x111 (_ bv1 32))))
 (let (($x230 (=> $x214 $x153)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd input.ind-%var506X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var506X))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd input.ind-%var506X (_ bv2 32))) ?x128)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.ind-%var506X (_ bv3 32))) ?x124)))
 (let (($x80 (= ?x139 ?x139)))
 (let (($x134 (=> $x214 $x80)))
 (let (($x107 (= $x214 $x214)))
 (let (($x165 (= ?x111 (_ bv0 32))))
 (let (($x23 (= $x165 $x165)))
 (let (($x60 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x31 (= false false)))
 (let (($x135 (=> $x165 $x31)))
 (let (($x159 (and (and (and (and (and $x135 $x60) $x23) $x107) $x134) $x230)))
 (let (($x11 (= true true)))
 (let (($x47 (and $x11 $x159)))
 (let (($x231 (= $x47 true)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x91 (concat ?x150 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x65 (concat ?x48 (concat ?x120 ?x91))))
 (let (($x227 (= (_ bv0 32) ?x65)))
 (let ((?x142 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x142 (_ bv1 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x129 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (=> $x129 $x56)))
 (let (($x67 (= ?x142 (_ bv0 32))))
 (let (($x108 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x166 (= $x108 $x67)))
 (let (($x216 (=> $x129 $x166)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x75)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x215 (= input.spec-%var-l-1.2.0 ?x99)))
 (let (($x101 (=> $x129 $x215)))
 (let (($x86 (= $x129 $x214)))
 (let (($x151 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x133 (=> $x151 $x31)))
 (let (($x213 (= $x151 $x165)))
 (let (($x137 (and (and (and (and (and $x213 $x133) $x86) $x101) $x216) $x156)))
 (let (($x66 (= $x137 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x138 (concat ?x154 (concat ?x30 ?x53)))))
 (let (($x162 (= input.dst.llvm-%l ?x143)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x224 (and $x77 $x162)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x103)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x74 $x61)))
 (let (($x161 (and $x123 $x12)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x83 $x161)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x78)))))))
 (let (($x228 (and (and (and $x68 true) $x155) $x224)))
 (let (($x131 (= $x228 true)))
 (let (($x225 (= $x131 true)))
 (let (($x43 (= $x225 true)))
 (let (($x51 (and $x43 $x66)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x36 (and $x117 $x51)))
 (let (($x63 (=> $x36 $x231)))
 (not $x63))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var506X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var506X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x50 (concat ?x218 (select input.dst.llvm-mem (bvadd input.ind-%var506X (_ bv4 32))))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var506X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var506X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x126 (concat ?x152 (concat ?x76 ?x50))))
 (let (($x153 (= ?x126 ?x126)))
 (let (($x229 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x111 (ite $x229 (_ bv0 32) (_ bv1 32))))
 (let (($x214 (bvuge ?x111 (_ bv1 32))))
 (let (($x230 (=> $x214 $x153)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd input.ind-%var506X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var506X))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd input.ind-%var506X (_ bv2 32))) ?x128)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.ind-%var506X (_ bv3 32))) ?x124)))
 (let (($x80 (= ?x139 ?x139)))
 (let (($x134 (=> $x214 $x80)))
 (let (($x107 (= $x214 $x214)))
 (let (($x165 (= ?x111 (_ bv0 32))))
 (let (($x23 (= $x165 $x165)))
 (let (($x60 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x31 (= false false)))
 (let (($x135 (=> $x165 $x31)))
 (let (($x159 (and (and (and (and (and $x135 $x60) $x23) $x107) $x134) $x230)))
 (let (($x11 (= true true)))
 (let (($x47 (and $x11 $x159)))
 (let (($x231 (= $x47 true)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x91 (concat ?x150 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x65 (concat ?x48 (concat ?x120 ?x91))))
 (let (($x227 (= (_ bv0 32) ?x65)))
 (let ((?x142 (ite $x227 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x142 (_ bv1 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x129 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (=> $x129 $x56)))
 (let (($x67 (= ?x142 (_ bv0 32))))
 (let (($x108 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x166 (= $x108 $x67)))
 (let (($x216 (=> $x129 $x166)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x75)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x215 (= input.spec-%var-l-1.2.0 ?x99)))
 (let (($x101 (=> $x129 $x215)))
 (let (($x86 (= $x129 $x214)))
 (let (($x151 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x133 (=> $x151 $x31)))
 (let (($x213 (= $x151 $x165)))
 (let (($x137 (and (and (and (and (and $x213 $x133) $x86) $x101) $x216) $x156)))
 (let (($x66 (= $x137 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x138 (concat ?x154 (concat ?x30 ?x53)))))
 (let (($x162 (= input.dst.llvm-%l ?x143)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x224 (and $x77 $x162)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x103)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x114)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x74 $x61)))
 (let (($x161 (and $x123 $x12)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x83 $x161)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x78)))))))
 (let (($x228 (and (and (and $x68 true) $x155) $x224)))
 (let (($x131 (= $x228 true)))
 (let (($x225 (= $x131 true)))
 (let (($x43 (= $x225 true)))
 (let (($x51 (and $x43 $x66)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x36 (and $x117 $x51)))
 (let (($x63 (=> $x36 $x231)))
 (not $x63))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x23 (= false true)))
 (let (($x29 (= $x23 true)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x90 (concat ?x120 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x227 (concat ?x65 (concat ?x140 ?x90))))
 (let (($x142 (= (_ bv0 32) ?x227)))
 (let ((?x67 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x67 (_ bv1 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x86 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (=> $x86 $x56)))
 (let (($x166 (= ?x67 (_ bv0 32))))
 (let (($x7 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x216 (= $x7 $x166)))
 (let (($x16 (=> $x86 $x216)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x136 (= input.spec-%var-l-1.2.0 ?x101)))
 (let (($x102 (=> $x86 $x136)))
 (let (($x213 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x31 (ite $x213 (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x31 (_ bv1 32))))
 (let (($x95 (= $x86 $x25)))
 (let (($x129 (= false false)))
 (let (($x165 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x214 (=> $x165 $x129)))
 (let (($x133 (= ?x31 (_ bv0 32))))
 (let (($x217 (= $x165 $x133)))
 (let (($x11 (and (and (and (and (and $x217 $x214) $x95) $x102) $x16) $x156)))
 (let (($x135 (= $x11 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x143 (concat ?x53 (concat ?x20 ?x138)))))
 (let (($x224 (= input.dst.llvm-%l ?x162)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x228 (and $x77 $x224)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x12)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x79 $x123)))
 (let (($x155 (and $x103 $x161)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x73 $x155)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x164)))))))
 (let (($x43 (and (and (and $x74 true) $x89) $x228)))
 (let (($x97 (= $x43 true)))
 (let (($x151 (= $x97 true)))
 (let (($x229 (= $x151 true)))
 (let (($x60 (and $x229 $x135)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x26 (and $x117 $x60)))
 (let (($x107 (=> $x26 $x29)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x23 (= false true)))
 (let (($x29 (= $x23 true)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x90 (concat ?x120 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x227 (concat ?x65 (concat ?x140 ?x90))))
 (let (($x142 (= (_ bv0 32) ?x227)))
 (let ((?x67 (ite $x142 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x67 (_ bv1 32))))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x86 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (=> $x86 $x56)))
 (let (($x166 (= ?x67 (_ bv0 32))))
 (let (($x7 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x216 (= $x7 $x166)))
 (let (($x16 (=> $x86 $x216)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x136 (= input.spec-%var-l-1.2.0 ?x101)))
 (let (($x102 (=> $x86 $x136)))
 (let (($x213 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x31 (ite $x213 (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x31 (_ bv1 32))))
 (let (($x95 (= $x86 $x25)))
 (let (($x129 (= false false)))
 (let (($x165 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x214 (=> $x165 $x129)))
 (let (($x133 (= ?x31 (_ bv0 32))))
 (let (($x217 (= $x165 $x133)))
 (let (($x11 (and (and (and (and (and $x217 $x214) $x95) $x102) $x16) $x156)))
 (let (($x135 (= $x11 true)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x143 (concat ?x53 (concat ?x20 ?x138)))))
 (let (($x224 (= input.dst.llvm-%l ?x162)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x228 (and $x77 $x224)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x12)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x79 $x123)))
 (let (($x155 (and $x103 $x161)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x73 $x155)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x164)))))))
 (let (($x43 (and (and (and $x74 true) $x89) $x228)))
 (let (($x97 (= $x43 true)))
 (let (($x151 (= $x97 true)))
 (let (($x229 (= $x151 true)))
 (let (($x60 (and $x229 $x135)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x26 (and $x117 $x60)))
 (let (($x107 (=> $x26 $x29)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x53b00000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000020)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #xb862ac1a)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x53)
                                #x53b00002
                                #xb0)
                         #x53b00006
                         #xb0)
                  #x53b00000
                  #x00)))
  (store (store (store (store a!1 #x53b00004 #x00) #x53b00007 #x03)
                #x53b00001
                #x00)
         #x53b00005
         #x00)))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x53b00000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x53b00000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x53b00000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x53b00003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x96 (= false true)))
 (let (($x17 (= $x96 true)))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x95 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x60 (and $x95 $x127)))
 (let (($x26 (not $x60)))
 (let (($x93 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x11 (and $x95 $x93)))
 (let (($x135 (not $x11)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x119 (concat ?x140 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x142 (concat ?x227 (concat ?x48 ?x119))))
 (let (($x67 (= (_ bv0 32) ?x142)))
 (let ((?x166 (ite $x67 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x166 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x156 (=> $x95 $x56)))
 (let (($x216 (= ?x166 (_ bv0 32))))
 (let (($x16 (= $x93 $x216)))
 (let (($x36 (=> $x95 $x16)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x88)))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x51 (= input.spec-%var-l-1.2.0 ?x102)))
 (let (($x108 (=> $x95 $x51)))
 (let (($x217 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x129 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x129 (_ bv1 32))))
 (let (($x115 (= $x95 $x66)))
 (let (($x86 (= false false)))
 (let (($x133 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x25 (=> $x133 $x86)))
 (let (($x214 (= ?x129 (_ bv0 32))))
 (let (($x137 (= $x133 $x214)))
 (let (($x32 (and (and (and (and (and (and $x137 $x25) $x115) $x108) $x36) $x156) $x135)))
 (let (($x19 (and $x32 $x26)))
 (let (($x13 (= $x19 true)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x224 (concat ?x162 (concat ?x138 (concat ?x30 ?x143)))))
 (let (($x228 (= input.dst.llvm-%l ?x224)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x43 (and $x77 $x228)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x161)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x114 $x103)))
 (let (($x89 (and $x12 $x155)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x82 $x89)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x24)))))))
 (let (($x229 (and (and (and $x79 true) $x225) $x43)))
 (let (($x111 (= $x229 true)))
 (let (($x165 (= $x111 true)))
 (let (($x213 (= $x165 true)))
 (let (($x163 (and $x213 $x13)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x54 (and $x117 $x163)))
 (let (($x125 (=> $x54 $x17)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x96 (= false true)))
 (let (($x17 (= $x96 true)))
 (let (($x127 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x95 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x60 (and $x95 $x127)))
 (let (($x26 (not $x60)))
 (let (($x93 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x11 (and $x95 $x93)))
 (let (($x135 (not $x11)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x119 (concat ?x140 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x142 (concat ?x227 (concat ?x48 ?x119))))
 (let (($x67 (= (_ bv0 32) ?x142)))
 (let ((?x166 (ite $x67 (_ bv0 32) (_ bv1 32))))
 (let (($x121 (bvuge ?x166 (_ bv1 32))))
 (let (($x56 (= $x127 $x121)))
 (let (($x156 (=> $x95 $x56)))
 (let (($x216 (= ?x166 (_ bv0 32))))
 (let (($x16 (= $x93 $x216)))
 (let (($x36 (=> $x95 $x16)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x88)))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x81)))
 (let (($x51 (= input.spec-%var-l-1.2.0 ?x102)))
 (let (($x108 (=> $x95 $x51)))
 (let (($x217 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x129 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x66 (bvuge ?x129 (_ bv1 32))))
 (let (($x115 (= $x95 $x66)))
 (let (($x86 (= false false)))
 (let (($x133 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x25 (=> $x133 $x86)))
 (let (($x214 (= ?x129 (_ bv0 32))))
 (let (($x137 (= $x133 $x214)))
 (let (($x32 (and (and (and (and (and (and $x137 $x25) $x115) $x108) $x36) $x156) $x135)))
 (let (($x19 (and $x32 $x26)))
 (let (($x13 (= $x19 true)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x224 (concat ?x162 (concat ?x138 (concat ?x30 ?x143)))))
 (let (($x228 (= input.dst.llvm-%l ?x224)))
 (let (($x77 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x43 (and $x77 $x228)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x161)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x114 $x103)))
 (let (($x89 (and $x12 $x155)))
 (let (($x82 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x82 $x89)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x24)))))))
 (let (($x229 (and (and (and $x79 true) $x225) $x43)))
 (let (($x111 (= $x229 true)))
 (let (($x165 (= $x111 true)))
 (let (($x213 (= $x165 true)))
 (let (($x163 (and $x213 $x13)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x54 (and $x117 $x163)))
 (let (($x125 (=> $x54 $x17)))
 (not $x125)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var604X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var604X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x76 (concat ?x132 (select input.dst.llvm-mem (bvadd input.ind-%var604X (_ bv4 32))))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var604X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var604X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x126 (concat ?x9 (concat ?x218 ?x76))))
 (let (($x153 (= ?x126 ?x126)))
 (let (($x214 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x137 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x115 (bvuge ?x137 (_ bv1 32))))
 (let (($x230 (=> $x115 $x153)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.ind-%var604X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var604X))))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd input.ind-%var604X (_ bv2 32))) ?x41)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.ind-%var604X (_ bv3 32))) ?x128)))
 (let (($x134 (= ?x80 ?x80)))
 (let (($x44 (=> $x115 $x134)))
 (let (($x17 (= $x115 $x115)))
 (let (($x86 (= ?x137 (_ bv0 32))))
 (let (($x96 (= $x86 $x86)))
 (let (($x54 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x23 (= false false)))
 (let (($x163 (=> $x86 $x23)))
 (let (($x27 (and (and (and (and (and $x163 $x54) $x96) $x17) $x44) $x230)))
 (let (($x13 (= true true)))
 (let (($x109 (and $x13 $x27)))
 (let (($x157 (= $x109 true)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x48 (concat ?x120 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x142 (concat ?x90 (concat ?x140 ?x48))))
 (let (($x67 (= (_ bv0 32) ?x142)))
 (let ((?x166 (ite $x67 (_ bv0 32) (_ bv1 32))))
 (let (($x127 (bvuge ?x166 (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x121 (= $x148 $x127)))
 (let (($x66 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x56 (=> $x66 $x121)))
 (let (($x216 (= ?x166 (_ bv0 32))))
 (let (($x93 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x16 (= $x93 $x216)))
 (let (($x36 (=> $x66 $x16)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x75)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x88)))
 (let (($x108 (= input.spec-%var-l-1.2.0 ?x51)))
 (let (($x107 (=> $x66 $x108)))
 (let (($x29 (= $x66 $x115)))
 (let (($x129 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x95 (=> $x129 $x23)))
 (let (($x25 (= $x129 $x86)))
 (let (($x32 (and (and (and (and (and $x25 $x95) $x29) $x107) $x36) $x56)))
 (let (($x60 (= $x32 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x224 (concat ?x154 (concat ?x30 (concat ?x106 ?x35)))))
 (let (($x228 (= input.dst.llvm-%l ?x224)))
 (let (($x116 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x43 (and $x116 $x228)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x161)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x114 $x103)))
 (let (($x89 (and $x12 $x155)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x73 $x89)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x74)))))))
 (let (($x165 (and (and (and $x82 true) $x225) $x43)))
 (let (($x213 (= $x165 true)))
 (let (($x31 (= $x213 true)))
 (let (($x133 (= $x31 true)))
 (let (($x26 (and $x133 $x60)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x19 (and $x144 $x26)))
 (let (($x59 (=> $x19 $x157)))
 (not $x59))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var604X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var604X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x76 (concat ?x132 (select input.dst.llvm-mem (bvadd input.ind-%var604X (_ bv4 32))))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var604X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var604X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x126 (concat ?x9 (concat ?x218 ?x76))))
 (let (($x153 (= ?x126 ?x126)))
 (let (($x214 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x137 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x115 (bvuge ?x137 (_ bv1 32))))
 (let (($x230 (=> $x115 $x153)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.ind-%var604X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var604X))))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd input.ind-%var604X (_ bv2 32))) ?x41)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.ind-%var604X (_ bv3 32))) ?x128)))
 (let (($x134 (= ?x80 ?x80)))
 (let (($x44 (=> $x115 $x134)))
 (let (($x17 (= $x115 $x115)))
 (let (($x86 (= ?x137 (_ bv0 32))))
 (let (($x96 (= $x86 $x86)))
 (let (($x54 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x23 (= false false)))
 (let (($x163 (=> $x86 $x23)))
 (let (($x27 (and (and (and (and (and $x163 $x54) $x96) $x17) $x44) $x230)))
 (let (($x13 (= true true)))
 (let (($x109 (and $x13 $x27)))
 (let (($x157 (= $x109 true)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x48 (concat ?x120 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x142 (concat ?x90 (concat ?x140 ?x48))))
 (let (($x67 (= (_ bv0 32) ?x142)))
 (let ((?x166 (ite $x67 (_ bv0 32) (_ bv1 32))))
 (let (($x127 (bvuge ?x166 (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x121 (= $x148 $x127)))
 (let (($x66 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x56 (=> $x66 $x121)))
 (let (($x216 (= ?x166 (_ bv0 32))))
 (let (($x93 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x16 (= $x93 $x216)))
 (let (($x36 (=> $x66 $x16)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x75)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x88)))
 (let (($x108 (= input.spec-%var-l-1.2.0 ?x51)))
 (let (($x107 (=> $x66 $x108)))
 (let (($x29 (= $x66 $x115)))
 (let (($x129 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x95 (=> $x129 $x23)))
 (let (($x25 (= $x129 $x86)))
 (let (($x32 (and (and (and (and (and $x25 $x95) $x29) $x107) $x36) $x56)))
 (let (($x60 (= $x32 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x224 (concat ?x154 (concat ?x30 (concat ?x106 ?x35)))))
 (let (($x228 (= input.dst.llvm-%l ?x224)))
 (let (($x116 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x43 (and $x116 $x228)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x161)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x114 $x103)))
 (let (($x89 (and $x12 $x155)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x73 $x89)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x82 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x74)))))))
 (let (($x165 (and (and (and $x82 true) $x225) $x43)))
 (let (($x213 (= $x165 true)))
 (let (($x31 (= $x213 true)))
 (let (($x133 (= $x31 true)))
 (let (($x26 (and $x133 $x60)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x19 (and $x144 $x26)))
 (let (($x59 (=> $x19 $x157)))
 (not $x59))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var622X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var622X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x218 (concat ?x104 (select input.dst.llvm-mem (bvadd input.ind-%var622X (_ bv4 32))))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var622X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var622X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x126 (concat ?x130 (concat ?x132 ?x218))))
 (let (($x153 (= ?x126 ?x126)))
 (let (($x25 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x23 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x92 (bvuge ?x23 (_ bv1 32))))
 (let (($x230 (=> $x92 $x153)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.ind-%var622X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var622X))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.ind-%var622X (_ bv2 32))) ?x62)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.ind-%var622X (_ bv3 32))) ?x41)))
 (let (($x44 (= ?x134 ?x134)))
 (let (($x63 (=> $x92 $x44)))
 (let (($x125 (= $x92 $x92)))
 (let (($x95 (= ?x23 (_ bv0 32))))
 (let (($x231 (= $x95 $x95)))
 (let (($x17 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x66 (= false false)))
 (let (($x47 (=> $x95 $x66)))
 (let (($x146 (and (and (and (and (and $x47 $x17) $x231) $x125) $x63) $x230)))
 (let (($x96 (= true true)))
 (let (($x101 (and $x96 $x146)))
 (let (($x117 (= $x101 true)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x227 (concat ?x140 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x67 (concat ?x142 (concat ?x91 ?x227))))
 (let (($x166 (= (_ bv0 32) ?x67)))
 (let ((?x216 (ite $x166 (_ bv0 32) (_ bv1 32))))
 (let (($x127 (bvuge ?x216 (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x121 (= $x148 $x127)))
 (let (($x29 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x56 (=> $x29 $x121)))
 (let (($x16 (= ?x216 (_ bv0 32))))
 (let (($x98 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x36 (= $x98 $x16)))
 (let (($x135 (=> $x29 $x36)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x88)))
 (let (($x11 (= input.spec-%var-l-1.2.0 ?x107)))
 (let (($x7 (=> $x29 $x11)))
 (let (($x99 (= $x29 $x92)))
 (let (($x86 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x115 (=> $x86 $x66)))
 (let (($x156 (= $x86 $x95)))
 (let (($x13 (and (and (and (and (and $x156 $x115) $x99) $x7) $x135) $x56)))
 (let (($x163 (= $x13 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x228 (concat ?x224 (concat ?x35 (concat ?x34 ?x154)))))
 (let (($x43 (= input.dst.llvm-%l ?x228)))
 (let (($x116 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x165 (and $x116 $x43)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x155)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x61 $x12)))
 (let (($x225 (and $x161 $x89)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x68 $x225)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x79)))))))
 (let (($x133 (and (and (and $x114 true) $x111) $x165)))
 (let (($x217 (= $x133 true)))
 (let (($x129 (= $x217 true)))
 (let (($x214 (= $x129 true)))
 (let (($x54 (and $x214 $x163)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x159 (and $x144 $x54)))
 (let (($x22 (=> $x159 $x117)))
 (not $x22))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var622X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var622X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x218 (concat ?x104 (select input.dst.llvm-mem (bvadd input.ind-%var622X (_ bv4 32))))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var622X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var622X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x126 (concat ?x130 (concat ?x132 ?x218))))
 (let (($x153 (= ?x126 ?x126)))
 (let (($x25 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x23 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x92 (bvuge ?x23 (_ bv1 32))))
 (let (($x230 (=> $x92 $x153)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.ind-%var622X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var622X))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.ind-%var622X (_ bv2 32))) ?x62)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.ind-%var622X (_ bv3 32))) ?x41)))
 (let (($x44 (= ?x134 ?x134)))
 (let (($x63 (=> $x92 $x44)))
 (let (($x125 (= $x92 $x92)))
 (let (($x95 (= ?x23 (_ bv0 32))))
 (let (($x231 (= $x95 $x95)))
 (let (($x17 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x66 (= false false)))
 (let (($x47 (=> $x95 $x66)))
 (let (($x146 (and (and (and (and (and $x47 $x17) $x231) $x125) $x63) $x230)))
 (let (($x96 (= true true)))
 (let (($x101 (and $x96 $x146)))
 (let (($x117 (= $x101 true)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x227 (concat ?x140 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x67 (concat ?x142 (concat ?x91 ?x227))))
 (let (($x166 (= (_ bv0 32) ?x67)))
 (let ((?x216 (ite $x166 (_ bv0 32) (_ bv1 32))))
 (let (($x127 (bvuge ?x216 (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x121 (= $x148 $x127)))
 (let (($x29 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x56 (=> $x29 $x121)))
 (let (($x16 (= ?x216 (_ bv0 32))))
 (let (($x98 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x36 (= $x98 $x16)))
 (let (($x135 (=> $x29 $x36)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x71)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x88)))
 (let (($x11 (= input.spec-%var-l-1.2.0 ?x107)))
 (let (($x7 (=> $x29 $x11)))
 (let (($x99 (= $x29 $x92)))
 (let (($x86 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x115 (=> $x86 $x66)))
 (let (($x156 (= $x86 $x95)))
 (let (($x13 (and (and (and (and (and $x156 $x115) $x99) $x7) $x135) $x56)))
 (let (($x163 (= $x13 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x228 (concat ?x224 (concat ?x35 (concat ?x34 ?x154)))))
 (let (($x43 (= input.dst.llvm-%l ?x228)))
 (let (($x116 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x165 (and $x116 $x43)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x155)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x61 $x12)))
 (let (($x225 (and $x161 $x89)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x111 (and $x68 $x225)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x49 $x79)))))))
 (let (($x133 (and (and (and $x114 true) $x111) $x165)))
 (let (($x217 (= $x133 true)))
 (let (($x129 (= $x217 true)))
 (let (($x214 (= $x129 true)))
 (let (($x54 (and $x214 $x163)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x159 (and $x144 $x54)))
 (let (($x22 (=> $x159 $x117)))
 (not $x22))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x138 (not $x35)))
 (let (($x174 (= $x138 false)))
 (let (($x184 (= $x174 true)))
 (let ((?x228 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x58))))
 (let (($x45 (= (_ bv0 32) ?x171)))
 (let ((?x105 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x112 (bvuge ?x105 (_ bv1 32))))
 (let (($x132 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x172 (= $x132 $x112)))
 (let (($x135 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x173 (=> $x135 $x172)))
 (let (($x170 (= ?x105 (_ bv0 32))))
 (let (($x128 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x221 (= $x128 $x170)))
 (let (($x169 (=> $x135 $x221)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x165 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x46 (concat (select input.dst.llvm-mem ?x165) (concat ?x52 (concat ?x94 ?x53)))))
 (let (($x220 (= input.spec-%var-l-1.2.0 ?x46)))
 (let (($x188 (=> $x135 $x220)))
 (let ((?x117 (ite $x35 (_ bv0 32) (_ bv1 32))))
 (let (($x87 (bvuge ?x117 (_ bv1 32))))
 (let (($x70 (= $x135 $x87)))
 (let (($x22 (= ?x117 (_ bv0 32))))
 (let (($x90 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x160 (= $x90 $x22)))
 (let (($x16 (= false false)))
 (let (($x36 (=> $x90 $x16)))
 (let (($x180 (and (and (and (and (and $x36 $x160) $x70) $x188) $x169) $x173)))
 (let (($x186 (= $x180 true)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x42 (concat ?x84 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x63 (concat ?x44 (concat ?x62 ?x42))))
 (let (($x59 (= (_ bv0 32) ?x63)))
 (let ((?x21 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x9 (bvuge ?x21 (_ bv1 32))))
 (let (($x104 (= $x132 $x9)))
 (let (($x50 (=> $x135 $x104)))
 (let (($x76 (= ?x21 (_ bv0 32))))
 (let (($x130 (= $x128 $x76)))
 (let (($x152 (=> $x135 $x130)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x54)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x17)))
 (let (($x125 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x157 (=> $x135 $x125)))
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x67 (ite $x48 (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x67 (_ bv1 32))))
 (let (($x148 (= $x135 $x19)))
 (let (($x230 (and (and (and (and (and (= $x90 (= ?x67 (_ bv0 32))) $x36) $x148) $x157) $x152) $x50)))
 (let (($x146 (= $x230 true)))
 (let ((?x65 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x142 (= (_ bv0 3) ?x65)))
 (let (($x120 (= $x142 true)))
 (let (($x91 (= $x120 true)))
 (let (($x7 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x26 (= $x7 true)))
 (let (($x93 (= $x26 true)))
 (let (($x98 (= $x93 true)))
 (let ((?x115 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x51 (bvugt ?x115 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x115 (_ bv3 32)))))
 (let (($x118 (=> (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x51)))))))
 (let (($x32 (=> (and $x138 (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x81 $x51)))))))
 (let (($x29 (= $x32 true)))
 (let (($x71 (= $x29 true)))
 (let (($x88 (= $x71 true)))
 (let (($x217 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x23 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x228 (_ bv1 32))) (or false (or false (and true (or $x133 $x217)))))))
 (let (($x30 (=> (and $x138 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x228 (_ bv1 32)))) (or false (or false (and true (or $x133 $x217)))))))
 (let (($x20 (= $x30 true)))
 (let (($x95 (= $x20 true)))
 (let (($x156 (= $x95 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x31)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x225 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x161 $x225)))
 (let (($x28 (and $x111 $x151)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x74 $x28)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x49)))))))
 (let (($x116 (and $x12 $x110)))
 (let (($x77 (= $x116 true)))
 (let (($x143 (= $x77 true)))
 (let (($x224 (= $x143 true)))
 (let (($x215 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x8 (= $x215 true)))
 (let (($x78 (= $x8 true)))
 (let (($x162 (and $x78 $x224)))
 (let (($x66 (and $x162 $x156)))
 (let (($x107 (and $x66 $x88)))
 (let (($x100 (and $x107 $x98)))
 (let (($x150 (and $x100 $x91)))
 (let (($x101 (and $x150 $x146)))
 (let (($x191 (and $x101 $x186)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x175 (and $x164 $x191)))
 (let (($x187 (=> $x175 $x184)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x138 (not $x35)))
 (let (($x174 (= $x138 false)))
 (let (($x184 (= $x174 true)))
 (let ((?x228 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x58))))
 (let (($x45 (= (_ bv0 32) ?x171)))
 (let ((?x105 (ite $x45 (_ bv0 32) (_ bv1 32))))
 (let (($x112 (bvuge ?x105 (_ bv1 32))))
 (let (($x132 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x172 (= $x132 $x112)))
 (let (($x135 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x173 (=> $x135 $x172)))
 (let (($x170 (= ?x105 (_ bv0 32))))
 (let (($x128 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x221 (= $x128 $x170)))
 (let (($x169 (=> $x135 $x221)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x165 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x46 (concat (select input.dst.llvm-mem ?x165) (concat ?x52 (concat ?x94 ?x53)))))
 (let (($x220 (= input.spec-%var-l-1.2.0 ?x46)))
 (let (($x188 (=> $x135 $x220)))
 (let ((?x117 (ite $x35 (_ bv0 32) (_ bv1 32))))
 (let (($x87 (bvuge ?x117 (_ bv1 32))))
 (let (($x70 (= $x135 $x87)))
 (let (($x22 (= ?x117 (_ bv0 32))))
 (let (($x90 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x160 (= $x90 $x22)))
 (let (($x16 (= false false)))
 (let (($x36 (=> $x90 $x16)))
 (let (($x180 (and (and (and (and (and $x36 $x160) $x70) $x188) $x169) $x173)))
 (let (($x186 (= $x180 true)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x42 (concat ?x84 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x63 (concat ?x44 (concat ?x62 ?x42))))
 (let (($x59 (= (_ bv0 32) ?x63)))
 (let ((?x21 (ite $x59 (_ bv0 32) (_ bv1 32))))
 (let (($x9 (bvuge ?x21 (_ bv1 32))))
 (let (($x104 (= $x132 $x9)))
 (let (($x50 (=> $x135 $x104)))
 (let (($x76 (= ?x21 (_ bv0 32))))
 (let (($x130 (= $x128 $x76)))
 (let (($x152 (=> $x135 $x130)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x54)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x17)))
 (let (($x125 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x157 (=> $x135 $x125)))
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x67 (ite $x48 (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x67 (_ bv1 32))))
 (let (($x148 (= $x135 $x19)))
 (let (($x230 (and (and (and (and (and (= $x90 (= ?x67 (_ bv0 32))) $x36) $x148) $x157) $x152) $x50)))
 (let (($x146 (= $x230 true)))
 (let ((?x65 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x142 (= (_ bv0 3) ?x65)))
 (let (($x120 (= $x142 true)))
 (let (($x91 (= $x120 true)))
 (let (($x7 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x26 (= $x7 true)))
 (let (($x93 (= $x26 true)))
 (let (($x98 (= $x93 true)))
 (let ((?x115 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x51 (bvugt ?x115 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x115 (_ bv3 32)))))
 (let (($x118 (=> (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x51)))))))
 (let (($x32 (=> (and $x138 (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x81 $x51)))))))
 (let (($x29 (= $x32 true)))
 (let (($x71 (= $x29 true)))
 (let (($x88 (= $x71 true)))
 (let (($x217 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x23 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x228 (_ bv1 32))) (or false (or false (and true (or $x133 $x217)))))))
 (let (($x30 (=> (and $x138 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x228 (_ bv1 32)))) (or false (or false (and true (or $x133 $x217)))))))
 (let (($x20 (= $x30 true)))
 (let (($x95 (= $x20 true)))
 (let (($x156 (= $x95 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x31)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x225 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x89)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x161 $x225)))
 (let (($x28 (and $x111 $x151)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x74 $x28)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x49)))))))
 (let (($x116 (and $x12 $x110)))
 (let (($x77 (= $x116 true)))
 (let (($x143 (= $x77 true)))
 (let (($x224 (= $x143 true)))
 (let (($x215 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x8 (= $x215 true)))
 (let (($x78 (= $x8 true)))
 (let (($x162 (and $x78 $x224)))
 (let (($x66 (and $x162 $x156)))
 (let (($x107 (and $x66 $x88)))
 (let (($x100 (and $x107 $x98)))
 (let (($x150 (and $x100 $x91)))
 (let (($x101 (and $x150 $x146)))
 (let (($x191 (and $x101 $x186)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x175 (and $x164 $x191)))
 (let (($x187 (=> $x175 $x184)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10011001010001001000100100110000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00010100101000010010000000011011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00010100101000010010000000011000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00010100101000010010000000011000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv327672 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1048567 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1048564 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1048564 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff9)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x0a000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08)
                     #x0a000007
                     #x40)
              #x0a000004
              #x48)
       #xfffffffd
       #x01))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x02000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x34 (not $x138)))
 (let (($x182 (= $x34 false)))
 (let (($x222 (= $x182 true)))
 (let ((?x133 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv1 32))) (select input.dst.llvm-mem ?x133))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv2 32))) ?x39))))
 (let (($x234 (= (_ bv0 32) ?x169)))
 (let ((?x112 (ite $x234 (_ bv0 32) (_ bv1 32))))
 (let (($x186 (bvuge ?x112 (_ bv1 32))))
 (let (($x152 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x191 (= $x152 $x186)))
 (let (($x19 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x175 (=> $x19 $x191)))
 (let (($x172 (= ?x112 (_ bv0 32))))
 (let (($x124 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x173 (= $x124 $x172)))
 (let (($x180 (=> $x19 $x173)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x129 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x72 (concat (select input.dst.llvm-mem ?x129) (concat ?x177 (concat ?x46 ?x55)))))
 (let (($x189 (= input.spec-%var-l-1.2.0 ?x72)))
 (let (($x6 (=> $x19 $x189)))
 (let ((?x219 (ite $x138 (_ bv0 32) (_ bv1 32))))
 (let (($x94 (bvuge ?x219 (_ bv1 32))))
 (let (($x53 (= $x19 $x94)))
 (let (($x52 (= ?x219 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x239 (= $x48 $x52)))
 (let (($x230 (and $x19 $x152)))
 (let (($x146 (not $x230)))
 (let (($x187 (and (and (and (=> $x48 (= false false)) (not (and $x19 $x124))) $x146) $x239)))
 (let (($x178 (and (and (and (and $x187 $x53) $x6) $x180) $x175)))
 (let (($x183 (= $x178 true)))
 (let (($x104 (and $x19 $x124)))
 (let (($x50 (not $x104)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x139 (concat ?x44 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x41 (concat ?x42 (concat ?x122 ?x139))))
 (let (($x63 (= (_ bv0 32) ?x41)))
 (let ((?x59 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x153 (bvuge ?x59 (_ bv1 32))))
 (let (($x132 (= $x152 $x153)))
 (let (($x9 (=> $x19 $x132)))
 (let (($x21 (= ?x59 (_ bv0 32))))
 (let (($x76 (= $x124 $x21)))
 (let (($x130 (=> $x19 $x76)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x96)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x56)))
 (let (($x125 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x157 (=> $x19 $x125)))
 (let (($x166 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x216 (ite $x166 (_ bv0 32) (_ bv1 32))))
 (let (($x148 (bvuge ?x216 (_ bv1 32))))
 (let (($x37 (= $x19 $x148)))
 (let (($x117 (and (and (= $x48 (= ?x216 (_ bv0 32))) (=> $x48 (= false false))) $x37)))
 (let (($x70 (and (and (and (and (and $x117 $x157) $x130) $x9) $x50) $x146)))
 (let (($x233 (= $x70 true)))
 (let ((?x120 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x91 (= (_ bv0 3) ?x120)))
 (let (($x150 (= $x91 true)))
 (let (($x140 (= $x150 true)))
 (let (($x93 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x93 true)))
 (let (($x100 (= $x98 true)))
 (let (($x119 (= $x100 true)))
 (let ((?x99 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x75 (bvugt ?x99 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x99 (_ bv3 32)))))
 (let (($x88 (=> (bvule ?x99 (bvsub (bvadd ?x99 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x136 $x75)))))))
 (let (($x158 (=> (and $x34 (bvule ?x99 (bvsub (bvadd ?x99 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x136 $x75)))))))
 (let (($x60 (= $x158 true)))
 (let (($x107 (= $x60 true)))
 (let (($x11 (= $x107 true)))
 (let (($x137 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x156 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x133 (_ bv1 32))) (or false (or false (and true (or $x214 $x137)))))))
 (let (($x25 (=> (and $x34 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x133 (_ bv1 32)))) (or false (or false (and true (or $x214 $x137)))))))
 (let (($x165 (= $x25 true)))
 (let (($x66 (= $x165 true)))
 (let (($x115 (= $x66 true)))
 (let ((?x229 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x229)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x12 $x131)))
 (let (($x155 (and $x49 $x161)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x103 $x155)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x33)))))))
 (let (($x77 (and $x79 $x89)))
 (let (($x143 (= $x77 true)))
 (let (($x224 (= $x143 true)))
 (let (($x162 (= $x224 true)))
 (let (($x164 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x18 (= $x164 true)))
 (let (($x8 (= $x18 true)))
 (let (($x106 (and $x8 $x162)))
 (let (($x92 (and $x106 $x115)))
 (let (($x7 (and $x92 $x11)))
 (let (($x65 (and $x7 $x119)))
 (let (($x90 (and $x65 $x140)))
 (let (($x14 (and $x90 $x233)))
 (let (($x181 (and $x14 $x183)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x179 (and $x24 $x181)))
 (let (($x185 (=> $x179 $x222)))
 (not $x185)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x34 (not $x138)))
 (let (($x182 (= $x34 false)))
 (let (($x222 (= $x182 true)))
 (let ((?x133 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv1 32))) (select input.dst.llvm-mem ?x133))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv2 32))) ?x39))))
 (let (($x234 (= (_ bv0 32) ?x169)))
 (let ((?x112 (ite $x234 (_ bv0 32) (_ bv1 32))))
 (let (($x186 (bvuge ?x112 (_ bv1 32))))
 (let (($x152 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x191 (= $x152 $x186)))
 (let (($x19 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x175 (=> $x19 $x191)))
 (let (($x172 (= ?x112 (_ bv0 32))))
 (let (($x124 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x173 (= $x124 $x172)))
 (let (($x180 (=> $x19 $x173)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x129 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x72 (concat (select input.dst.llvm-mem ?x129) (concat ?x177 (concat ?x46 ?x55)))))
 (let (($x189 (= input.spec-%var-l-1.2.0 ?x72)))
 (let (($x6 (=> $x19 $x189)))
 (let ((?x219 (ite $x138 (_ bv0 32) (_ bv1 32))))
 (let (($x94 (bvuge ?x219 (_ bv1 32))))
 (let (($x53 (= $x19 $x94)))
 (let (($x52 (= ?x219 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x239 (= $x48 $x52)))
 (let (($x230 (and $x19 $x152)))
 (let (($x146 (not $x230)))
 (let (($x187 (and (and (and (=> $x48 (= false false)) (not (and $x19 $x124))) $x146) $x239)))
 (let (($x178 (and (and (and (and $x187 $x53) $x6) $x180) $x175)))
 (let (($x183 (= $x178 true)))
 (let (($x104 (and $x19 $x124)))
 (let (($x50 (not $x104)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x139 (concat ?x44 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x41 (concat ?x42 (concat ?x122 ?x139))))
 (let (($x63 (= (_ bv0 32) ?x41)))
 (let ((?x59 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x153 (bvuge ?x59 (_ bv1 32))))
 (let (($x132 (= $x152 $x153)))
 (let (($x9 (=> $x19 $x132)))
 (let (($x21 (= ?x59 (_ bv0 32))))
 (let (($x76 (= $x124 $x21)))
 (let (($x130 (=> $x19 $x76)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x96)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x56)))
 (let (($x125 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x157 (=> $x19 $x125)))
 (let (($x166 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x216 (ite $x166 (_ bv0 32) (_ bv1 32))))
 (let (($x148 (bvuge ?x216 (_ bv1 32))))
 (let (($x37 (= $x19 $x148)))
 (let (($x117 (and (and (= $x48 (= ?x216 (_ bv0 32))) (=> $x48 (= false false))) $x37)))
 (let (($x70 (and (and (and (and (and $x117 $x157) $x130) $x9) $x50) $x146)))
 (let (($x233 (= $x70 true)))
 (let ((?x120 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x91 (= (_ bv0 3) ?x120)))
 (let (($x150 (= $x91 true)))
 (let (($x140 (= $x150 true)))
 (let (($x93 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x93 true)))
 (let (($x100 (= $x98 true)))
 (let (($x119 (= $x100 true)))
 (let ((?x99 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x75 (bvugt ?x99 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x99 (_ bv3 32)))))
 (let (($x88 (=> (bvule ?x99 (bvsub (bvadd ?x99 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x136 $x75)))))))
 (let (($x158 (=> (and $x34 (bvule ?x99 (bvsub (bvadd ?x99 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x136 $x75)))))))
 (let (($x60 (= $x158 true)))
 (let (($x107 (= $x60 true)))
 (let (($x11 (= $x107 true)))
 (let (($x137 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x156 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x133 (_ bv1 32))) (or false (or false (and true (or $x214 $x137)))))))
 (let (($x25 (=> (and $x34 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x133 (_ bv1 32)))) (or false (or false (and true (or $x214 $x137)))))))
 (let (($x165 (= $x25 true)))
 (let (($x66 (= $x165 true)))
 (let (($x115 (= $x66 true)))
 (let ((?x229 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x229)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x12 $x131)))
 (let (($x155 (and $x49 $x161)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x103 $x155)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x33)))))))
 (let (($x77 (and $x79 $x89)))
 (let (($x143 (= $x77 true)))
 (let (($x224 (= $x143 true)))
 (let (($x162 (= $x224 true)))
 (let (($x164 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x18 (= $x164 true)))
 (let (($x8 (= $x18 true)))
 (let (($x106 (and $x8 $x162)))
 (let (($x92 (and $x106 $x115)))
 (let (($x7 (and $x92 $x11)))
 (let (($x65 (and $x7 $x119)))
 (let (($x90 (and $x65 $x140)))
 (let (($x14 (and $x90 $x233)))
 (let (($x181 (and $x14 $x183)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x179 (and $x24 $x181)))
 (let (($x185 (=> $x179 $x222)))
 (not $x185)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x228 (not $x34)))
 (let (($x276 (= $x228 false)))
 (let (($x277 (= $x276 true)))
 (let ((?x214 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x199))))
 (let ((?x246 (bvadd ?x10 (_ bv4 32))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x251))))
 (let (($x256 (= (_ bv0 32) ?x255)))
 (let ((?x283 (ite $x256 (_ bv0 32) (_ bv1 32))))
 (let (($x262 (bvuge ?x283 (_ bv1 32))))
 (let (($x171 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x263 (= $x171 $x262)))
 (let (($x130 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x240 (and $x148 $x130)))
 (let (($x259 (=> $x240 $x263)))
 (let (($x141 (= ?x283 (_ bv0 32))))
 (let (($x94 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x284 (= $x94 $x141)))
 (let (($x15 (=> $x240 $x284)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem ?x10))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv2 32))) ?x204))))
 (let (($x238 (= input.spec-%var-l-1.2.1.2.0 ?x212)))
 (let (($x245 (=> $x240 $x238)))
 (let (($x196 (= (_ bv0 32) ?x10)))
 (let ((?x198 (ite $x196 (_ bv0 32) (_ bv1 32))))
 (let (($x242 (bvuge ?x198 (_ bv1 32))))
 (let (($x205 (= $x130 $x242)))
 (let (($x206 (=> $x148 $x205)))
 (let (($x200 (= ?x198 (_ bv0 32))))
 (let (($x126 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x208 (= $x126 $x200)))
 (let (($x209 (=> $x148 $x208)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x86 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x235 (concat (select input.dst.llvm-mem ?x86) (concat ?x225 (concat ?x222 ?x179)))))
 (let (($x223 (= input.spec-%var-l-1.2.0 ?x235)))
 (let (($x194 (=> $x148 $x223)))
 (let ((?x191 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x191 (_ bv1 32))))
 (let (($x181 (= $x148 $x183)))
 (let (($x175 (= ?x191 (_ bv0 32))))
 (let (($x166 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x178 (= $x166 $x175)))
 (let (($x101 (= false false)))
 (let (($x132 (and $x148 $x126)))
 (let (($x9 (=> $x132 $x101)))
 (let (($x19 (=> $x166 $x101)))
 (let (($x261 (and (and (and (and (and (and $x19 $x9) $x178) $x181) $x194) $x209) $x206)))
 (let (($x266 (and (and (and $x261 $x245) $x15) $x259)))
 (let (($x267 (= $x266 true)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x62 (concat ?x42 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x84 (concat ?x139 (concat ?x134 ?x62))))
 (let ((?x53 (bvadd ?x84 (_ bv4 32))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv1 32))) (select input.dst.llvm-mem ?x53))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv2 32))) ?x177))))
 (let (($x189 (= (_ bv0 32) ?x72)))
 (let ((?x6 (ite $x189 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x6 (_ bv1 32))))
 (let (($x232 (= $x171 $x45)))
 (let (($x58 (=> $x240 $x232)))
 (let (($x213 (= ?x6 (_ bv0 32))))
 (let (($x170 (= $x94 $x213)))
 (let (($x221 (=> $x240 $x170)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem ?x84))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv2 32))) ?x146))))
 (let (($x52 (= input.spec-%var-l-1.2.1.2.0 ?x219)))
 (let (($x239 (=> $x240 $x52)))
 (let (($x41 (= (_ bv0 32) ?x84)))
 (let ((?x63 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x63 (_ bv1 32))))
 (let (($x152 (= $x130 $x160)))
 (let (($x153 (=> $x148 $x152)))
 (let (($x59 (= ?x63 (_ bv0 32))))
 (let (($x21 (= $x126 $x59)))
 (let (($x76 (=> $x148 $x21)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x13)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x27)))
 (let (($x125 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x157 (=> $x148 $x125)))
 (let (($x16 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x36 (ite $x16 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x36 (_ bv1 32))))
 (let (($x117 (= $x148 $x37)))
 (let (($x234 (and (and (and (and (and (= $x166 (= ?x36 (_ bv0 32))) $x19) $x117) $x157) $x76) $x153)))
 (let (($x180 (and (and (and (and $x234 $x9) $x239) $x221) $x58)))
 (let (($x83 (= $x180 true)))
 (let ((?x150 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x140 (= (_ bv0 3) ?x150)))
 (let (($x90 (= $x140 true)))
 (let (($x227 (= $x90 true)))
 (let (($x100 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x119 (= $x100 true)))
 (let (($x65 (= $x119 true)))
 (let (($x142 (= $x65 true)))
 (let ((?x51 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x32 (bvugt ?x51 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x51 (_ bv3 32)))))
 (let (($x11 (=> (bvule ?x51 (bvsub (bvadd ?x51 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x32)))))))
 (let (($x71 (=> (and $x228 (bvule ?x51 (bvsub (bvadd ?x51 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x118 $x32)))))))
 (let (($x108 (= $x71 true)))
 (let (($x7 (= $x108 true)))
 (let (($x26 (= $x7 true)))
 (let (($x30 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x115 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x214 (_ bv1 32))) (or false (or false (and true (or $x23 $x30)))))))
 (let (($x95 (=> (and $x228 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x214 (_ bv1 32)))) (or false (or false (and true (or $x23 $x30)))))))
 (let (($x129 (= $x95 true)))
 (let (($x92 (= $x129 true)))
 (let (($x99 (= $x92 true)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x161)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x79 $x12)))
 (let (($x89 (and $x68 $x155)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x49 $x89)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x114)))))))
 (let (($x143 (and $x78 $x77)))
 (let (($x224 (= $x143 true)))
 (let (($x162 (= $x224 true)))
 (let (($x106 (= $x162 true)))
 (let (($x154 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x43 (= $x154 true)))
 (let (($x8 (= $x43 true)))
 (let (($x35 (and $x8 $x106)))
 (let (($x81 (and $x35 $x99)))
 (let (($x93 (and $x81 $x26)))
 (let (($x120 (and $x93 $x142)))
 (let (($x48 (and $x120 $x227)))
 (let (($x186 (and $x48 $x83)))
 (let (($x285 (and $x186 $x267)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x268 (and $x18 $x285)))
 (let (($x273 (=> $x268 $x277)))
 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x34 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x228 (not $x34)))
 (let (($x276 (= $x228 false)))
 (let (($x277 (= $x276 true)))
 (let ((?x214 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x199))))
 (let ((?x246 (bvadd ?x10 (_ bv4 32))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x251))))
 (let (($x256 (= (_ bv0 32) ?x255)))
 (let ((?x283 (ite $x256 (_ bv0 32) (_ bv1 32))))
 (let (($x262 (bvuge ?x283 (_ bv1 32))))
 (let (($x171 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x263 (= $x171 $x262)))
 (let (($x130 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x148 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x240 (and $x148 $x130)))
 (let (($x259 (=> $x240 $x263)))
 (let (($x141 (= ?x283 (_ bv0 32))))
 (let (($x94 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x284 (= $x94 $x141)))
 (let (($x15 (=> $x240 $x284)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv1 32))) (select input.dst.llvm-mem ?x10))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x10 (_ bv2 32))) ?x204))))
 (let (($x238 (= input.spec-%var-l-1.2.1.2.0 ?x212)))
 (let (($x245 (=> $x240 $x238)))
 (let (($x196 (= (_ bv0 32) ?x10)))
 (let ((?x198 (ite $x196 (_ bv0 32) (_ bv1 32))))
 (let (($x242 (bvuge ?x198 (_ bv1 32))))
 (let (($x205 (= $x130 $x242)))
 (let (($x206 (=> $x148 $x205)))
 (let (($x200 (= ?x198 (_ bv0 32))))
 (let (($x126 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x208 (= $x126 $x200)))
 (let (($x209 (=> $x148 $x208)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x86 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x235 (concat (select input.dst.llvm-mem ?x86) (concat ?x225 (concat ?x222 ?x179)))))
 (let (($x223 (= input.spec-%var-l-1.2.0 ?x235)))
 (let (($x194 (=> $x148 $x223)))
 (let ((?x191 (ite $x34 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x191 (_ bv1 32))))
 (let (($x181 (= $x148 $x183)))
 (let (($x175 (= ?x191 (_ bv0 32))))
 (let (($x166 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x178 (= $x166 $x175)))
 (let (($x101 (= false false)))
 (let (($x132 (and $x148 $x126)))
 (let (($x9 (=> $x132 $x101)))
 (let (($x19 (=> $x166 $x101)))
 (let (($x261 (and (and (and (and (and (and $x19 $x9) $x178) $x181) $x194) $x209) $x206)))
 (let (($x266 (and (and (and $x261 $x245) $x15) $x259)))
 (let (($x267 (= $x266 true)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x62 (concat ?x42 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x84 (concat ?x139 (concat ?x134 ?x62))))
 (let ((?x53 (bvadd ?x84 (_ bv4 32))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv1 32))) (select input.dst.llvm-mem ?x53))))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x53 (_ bv2 32))) ?x177))))
 (let (($x189 (= (_ bv0 32) ?x72)))
 (let ((?x6 (ite $x189 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x6 (_ bv1 32))))
 (let (($x232 (= $x171 $x45)))
 (let (($x58 (=> $x240 $x232)))
 (let (($x213 (= ?x6 (_ bv0 32))))
 (let (($x170 (= $x94 $x213)))
 (let (($x221 (=> $x240 $x170)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem ?x84))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv2 32))) ?x146))))
 (let (($x52 (= input.spec-%var-l-1.2.1.2.0 ?x219)))
 (let (($x239 (=> $x240 $x52)))
 (let (($x41 (= (_ bv0 32) ?x84)))
 (let ((?x63 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x63 (_ bv1 32))))
 (let (($x152 (= $x130 $x160)))
 (let (($x153 (=> $x148 $x152)))
 (let (($x59 (= ?x63 (_ bv0 32))))
 (let (($x21 (= $x126 $x59)))
 (let (($x76 (=> $x148 $x21)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x13)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x27)))
 (let (($x125 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x157 (=> $x148 $x125)))
 (let (($x16 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x36 (ite $x16 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x36 (_ bv1 32))))
 (let (($x117 (= $x148 $x37)))
 (let (($x234 (and (and (and (and (and (= $x166 (= ?x36 (_ bv0 32))) $x19) $x117) $x157) $x76) $x153)))
 (let (($x180 (and (and (and (and $x234 $x9) $x239) $x221) $x58)))
 (let (($x83 (= $x180 true)))
 (let ((?x150 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x140 (= (_ bv0 3) ?x150)))
 (let (($x90 (= $x140 true)))
 (let (($x227 (= $x90 true)))
 (let (($x100 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x119 (= $x100 true)))
 (let (($x65 (= $x119 true)))
 (let (($x142 (= $x65 true)))
 (let ((?x51 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x32 (bvugt ?x51 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x51 (_ bv3 32)))))
 (let (($x11 (=> (bvule ?x51 (bvsub (bvadd ?x51 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x32)))))))
 (let (($x71 (=> (and $x228 (bvule ?x51 (bvsub (bvadd ?x51 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x118 $x32)))))))
 (let (($x108 (= $x71 true)))
 (let (($x7 (= $x108 true)))
 (let (($x26 (= $x7 true)))
 (let (($x30 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x115 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x214 (_ bv1 32))) (or false (or false (and true (or $x23 $x30)))))))
 (let (($x95 (=> (and $x228 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x214 (_ bv1 32)))) (or false (or false (and true (or $x23 $x30)))))))
 (let (($x129 (= $x95 true)))
 (let (($x92 (= $x129 true)))
 (let (($x99 (= $x92 true)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x161)))
 (let ((?x103 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x103)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x79 $x12)))
 (let (($x89 (and $x68 $x155)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x49 $x89)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x78 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x114)))))))
 (let (($x143 (and $x78 $x77)))
 (let (($x224 (= $x143 true)))
 (let (($x162 (= $x224 true)))
 (let (($x106 (= $x162 true)))
 (let (($x154 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x43 (= $x154 true)))
 (let (($x8 (= $x43 true)))
 (let (($x35 (and $x8 $x106)))
 (let (($x81 (and $x35 $x99)))
 (let (($x93 (and $x81 $x26)))
 (let (($x120 (and $x93 $x142)))
 (let (($x48 (and $x120 $x227)))
 (let (($x186 (and $x48 $x83)))
 (let (($x285 (and $x186 $x267)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x268 (and $x18 $x285)))
 (let (($x273 (=> $x268 $x277)))
 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10011001010001001000100100110000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00010100101000010010000000011011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00010100101000010010000000011000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00010100101000010010000000011000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_50)
(function @fun_50
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x89 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x77 (not $x89)))
 (let (($x275 (= $x77 false)))
 (let (($x278 (= $x275 true)))
 (let ((?x23 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x199))))
 (let ((?x254 (bvadd ?x208 (_ bv4 32))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x250))))
 (let (($x283 (= (_ bv0 32) ?x256)))
 (let ((?x141 (ite $x283 (_ bv0 32) (_ bv1 32))))
 (let (($x262 (bvuge ?x141 (_ bv1 32))))
 (let (($x189 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x263 (= $x189 $x262)))
 (let (($x76 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x37 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x234 (and $x37 $x76)))
 (let (($x259 (=> $x234 $x263)))
 (let (($x284 (= ?x141 (_ bv0 32))))
 (let (($x219 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x15 (= $x219 $x284)))
 (let (($x265 (=> $x234 $x15)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x201))))
 (let (($x264 (= input.spec-%var-l-1.2.1.2.0 ?x245)))
 (let (($x246 (=> $x234 $x264)))
 (let (($x209 (= (_ bv0 32) ?x208)))
 (let ((?x258 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x261 (bvuge ?x258 (_ bv1 32))))
 (let (($x211 (= $x76 $x261)))
 (let (($x244 (=> $x37 $x211)))
 (let (($x242 (= ?x258 (_ bv0 32))))
 (let (($x22 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x205 (= $x22 $x242)))
 (let (($x206 (=> $x37 $x205)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x20 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x57 (concat (select input.dst.llvm-mem ?x20) (concat ?x194 (concat ?x31 ?x179)))))
 (let (($x237 (= input.spec-%var-l-1.2.0 ?x57)))
 (let (($x197 (=> $x37 $x237)))
 (let ((?x193 (ite $x89 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x193 (_ bv1 32))))
 (let (($x222 (= $x37 $x182)))
 (let (($x192 (= ?x193 (_ bv0 32))))
 (let (($x16 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x225 (= $x16 $x192)))
 (let (($x171 (and $x234 $x219)))
 (let (($x45 (not $x171)))
 (let (($x221 (and $x234 $x189)))
 (let (($x173 (not $x221)))
 (let (($x168 (= false false)))
 (let (($x152 (and $x37 $x22)))
 (let (($x153 (=> $x152 $x168)))
 (let (($x148 (=> $x16 $x168)))
 (let (($x277 (and (and (and (and (and (and $x148 $x153) $x173) $x45) $x225) $x222) $x197)))
 (let (($x270 (and (and (and (and (and $x277 $x206) $x244) $x246) $x265) $x259)))
 (let (($x271 (= $x270 true)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x122 (concat ?x139 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x44 (concat ?x62 (concat ?x85 ?x122))))
 (let ((?x52 (bvadd ?x44 (_ bv4 32))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x94))))
 (let (($x188 (= (_ bv0 32) ?x190)))
 (let ((?x176 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x176 (_ bv1 32))))
 (let (($x213 (= $x189 $x6)))
 (let (($x170 (=> $x234 $x213)))
 (let (($x177 (= ?x176 (_ bv0 32))))
 (let (($x55 (= $x219 $x177)))
 (let (($x72 (=> $x234 $x55)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x104))))
 (let (($x50 (= input.spec-%var-l-1.2.1.2.0 ?x230)))
 (let (($x146 (=> $x234 $x50)))
 (let (($x84 (= (_ bv0 32) ?x44)))
 (let ((?x41 (ite $x84 (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge ?x41 (_ bv1 32))))
 (let (($x130 (= $x76 $x169)))
 (let (($x160 (=> $x37 $x130)))
 (let (($x63 (= ?x41 (_ bv0 32))))
 (let (($x59 (= $x22 $x63)))
 (let (($x21 (=> $x37 $x59)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x231)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x54)))
 (let (($x125 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x157 (=> $x37 $x125)))
 (let (($x218 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x135 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x135 (_ bv1 32))))
 (let (($x39 (= $x37 $x117)))
 (let (($x186 (and (and (and (and (and (= $x16 (= ?x135 (_ bv0 32))) $x148) $x39) $x157) $x21) $x160)))
 (let (($x183 (and (and (and (and (and (and $x186 $x153) $x146) $x72) $x170) $x173) $x45)))
 (let (($x181 (= $x183 true)))
 (let ((?x90 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x227 (= (_ bv0 3) ?x90)))
 (let (($x48 (= $x227 true)))
 (let (($x67 (= $x48 true)))
 (let (($x65 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x142 (= $x65 true)))
 (let (($x120 (= $x142 true)))
 (let (($x91 (= $x120 true)))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x158 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x75 (_ bv3 32)))))
 (let (($x26 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x158)))))))
 (let (($x107 (=> (and $x77 (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x88 $x158)))))))
 (let (($x69 (= $x107 true)))
 (let (($x93 (= $x69 true)))
 (let (($x98 (= $x93 true)))
 (let (($x25 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x99 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x23 (_ bv1 32))) (or false (or false (and true (or $x156 $x25)))))))
 (let (($x162 (=> (and $x77 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x23 (_ bv1 32)))) (or false (or false (and true (or $x156 $x25)))))))
 (let (($x106 (= $x162 true)))
 (let (($x81 (= $x106 true)))
 (let (($x51 (= $x81 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x12)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x86 $x43)))
 (let (($x73 (and $x8 $x28)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x133 $x73)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x123 $x137)))))))
 (let (($x68 (and $x61 $x110)))
 (let (($x161 (= $x68 true)))
 (let (($x155 (= $x161 true)))
 (let (($x116 (= $x155 true)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x24 (= $x18 true)))
 (let (($x35 (= $x24 true)))
 (let (($x164 (and $x35 $x116)))
 (let (($x136 (and $x164 $x51)))
 (let (($x100 (and $x136 $x98)))
 (let (($x150 (and $x100 $x91)))
 (let (($x166 (and $x150 $x67)))
 (let (($x257 (and $x166 $x181)))
 (let (($x269 (and $x257 $x271)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x272 (and $x111 $x269)))
 (let (($x279 (=> $x272 $x278)))
 (not $x279))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x89 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x77 (not $x89)))
 (let (($x275 (= $x77 false)))
 (let (($x278 (= $x275 true)))
 (let ((?x23 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x199))))
 (let ((?x254 (bvadd ?x208 (_ bv4 32))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x250))))
 (let (($x283 (= (_ bv0 32) ?x256)))
 (let ((?x141 (ite $x283 (_ bv0 32) (_ bv1 32))))
 (let (($x262 (bvuge ?x141 (_ bv1 32))))
 (let (($x189 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x263 (= $x189 $x262)))
 (let (($x76 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x37 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x234 (and $x37 $x76)))
 (let (($x259 (=> $x234 $x263)))
 (let (($x284 (= ?x141 (_ bv0 32))))
 (let (($x219 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x15 (= $x219 $x284)))
 (let (($x265 (=> $x234 $x15)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x201))))
 (let (($x264 (= input.spec-%var-l-1.2.1.2.0 ?x245)))
 (let (($x246 (=> $x234 $x264)))
 (let (($x209 (= (_ bv0 32) ?x208)))
 (let ((?x258 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x261 (bvuge ?x258 (_ bv1 32))))
 (let (($x211 (= $x76 $x261)))
 (let (($x244 (=> $x37 $x211)))
 (let (($x242 (= ?x258 (_ bv0 32))))
 (let (($x22 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x205 (= $x22 $x242)))
 (let (($x206 (=> $x37 $x205)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x20 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x57 (concat (select input.dst.llvm-mem ?x20) (concat ?x194 (concat ?x31 ?x179)))))
 (let (($x237 (= input.spec-%var-l-1.2.0 ?x57)))
 (let (($x197 (=> $x37 $x237)))
 (let ((?x193 (ite $x89 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x193 (_ bv1 32))))
 (let (($x222 (= $x37 $x182)))
 (let (($x192 (= ?x193 (_ bv0 32))))
 (let (($x16 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x225 (= $x16 $x192)))
 (let (($x171 (and $x234 $x219)))
 (let (($x45 (not $x171)))
 (let (($x221 (and $x234 $x189)))
 (let (($x173 (not $x221)))
 (let (($x168 (= false false)))
 (let (($x152 (and $x37 $x22)))
 (let (($x153 (=> $x152 $x168)))
 (let (($x148 (=> $x16 $x168)))
 (let (($x277 (and (and (and (and (and (and $x148 $x153) $x173) $x45) $x225) $x222) $x197)))
 (let (($x270 (and (and (and (and (and $x277 $x206) $x244) $x246) $x265) $x259)))
 (let (($x271 (= $x270 true)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x122 (concat ?x139 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x44 (concat ?x62 (concat ?x85 ?x122))))
 (let ((?x52 (bvadd ?x44 (_ bv4 32))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x94))))
 (let (($x188 (= (_ bv0 32) ?x190)))
 (let ((?x176 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x176 (_ bv1 32))))
 (let (($x213 (= $x189 $x6)))
 (let (($x170 (=> $x234 $x213)))
 (let (($x177 (= ?x176 (_ bv0 32))))
 (let (($x55 (= $x219 $x177)))
 (let (($x72 (=> $x234 $x55)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x104))))
 (let (($x50 (= input.spec-%var-l-1.2.1.2.0 ?x230)))
 (let (($x146 (=> $x234 $x50)))
 (let (($x84 (= (_ bv0 32) ?x44)))
 (let ((?x41 (ite $x84 (_ bv0 32) (_ bv1 32))))
 (let (($x169 (bvuge ?x41 (_ bv1 32))))
 (let (($x130 (= $x76 $x169)))
 (let (($x160 (=> $x37 $x130)))
 (let (($x63 (= ?x41 (_ bv0 32))))
 (let (($x59 (= $x22 $x63)))
 (let (($x21 (=> $x37 $x59)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x231)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x54)))
 (let (($x125 (= input.spec-%var-l-1.2.0 ?x109)))
 (let (($x157 (=> $x37 $x125)))
 (let (($x218 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x135 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (bvuge ?x135 (_ bv1 32))))
 (let (($x39 (= $x37 $x117)))
 (let (($x186 (and (and (and (and (and (= $x16 (= ?x135 (_ bv0 32))) $x148) $x39) $x157) $x21) $x160)))
 (let (($x183 (and (and (and (and (and (and $x186 $x153) $x146) $x72) $x170) $x173) $x45)))
 (let (($x181 (= $x183 true)))
 (let ((?x90 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x227 (= (_ bv0 3) ?x90)))
 (let (($x48 (= $x227 true)))
 (let (($x67 (= $x48 true)))
 (let (($x65 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x142 (= $x65 true)))
 (let (($x120 (= $x142 true)))
 (let (($x91 (= $x120 true)))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x158 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x75 (_ bv3 32)))))
 (let (($x26 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x158)))))))
 (let (($x107 (=> (and $x77 (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x88 $x158)))))))
 (let (($x69 (= $x107 true)))
 (let (($x93 (= $x69 true)))
 (let (($x98 (= $x93 true)))
 (let (($x25 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x99 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x23 (_ bv1 32))) (or false (or false (and true (or $x156 $x25)))))))
 (let (($x162 (=> (and $x77 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x23 (_ bv1 32)))) (or false (or false (and true (or $x156 $x25)))))))
 (let (($x106 (= $x162 true)))
 (let (($x81 (= $x106 true)))
 (let (($x51 (= $x81 true)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x12)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x86 $x43)))
 (let (($x73 (and $x8 $x28)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x133 $x73)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x123 $x137)))))))
 (let (($x68 (and $x61 $x110)))
 (let (($x161 (= $x68 true)))
 (let (($x155 (= $x161 true)))
 (let (($x116 (= $x155 true)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x24 (= $x18 true)))
 (let (($x35 (= $x24 true)))
 (let (($x164 (and $x35 $x116)))
 (let (($x136 (and $x164 $x51)))
 (let (($x100 (and $x136 $x98)))
 (let (($x150 (and $x100 $x91)))
 (let (($x166 (and $x150 $x67)))
 (let (($x257 (and $x166 $x181)))
 (let (($x269 (and $x257 $x271)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x272 (and $x111 $x269)))
 (let (($x279 (=> $x272 $x278)))
 (not $x279))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10011001010001001000100100110000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00010100101000010010000000011011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00010100101000010010000000011000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00010100101000010010000000011000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_50)
(function @fun_50
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv32 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffff8000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00004006)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x74000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00004000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
              #x00000003
              #x74)
       #x00000003
       #x74))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffff8000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffff8003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x33 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x101))))
 (let ((?x205 ((_ extract 2 0) ?x117)))
 (let (($x206 (= (_ bv0 3) ?x205)))
 (let (($x273 (= $x206 true)))
 (let ((?x111 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x223))))
 (let (($x57 (= (_ bv0 32) ?x40)))
 (let ((?x237 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x237 (_ bv1 32))))
 (let (($x188 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x236 (= $x188 $x200)))
 (let (($x130 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x10 (=> $x130 $x236)))
 (let (($x197 (= ?x237 (_ bv0 32))))
 (let (($x230 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x277 (= $x230 $x197)))
 (let (($x198 (=> $x130 $x277)))
 (let ((?x183 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x114 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x225 (concat (select input.dst.llvm-mem ?x114) (concat ?x285 (concat ?x257 ?x183)))))
 (let (($x268 (= input.spec-%var-l-1.2.0 ?x225)))
 (let (($x182 (=> $x130 $x268)))
 (let (($x217 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x221 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge ?x221 (_ bv1 32))))
 (let (($x45 (= $x130 $x171)))
 (let (($x173 (= ?x221 (_ bv0 32))))
 (let (($x84 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x145 (= $x84 $x173)))
 (let (($x76 (= false false)))
 (let (($x169 (=> $x84 $x76)))
 (let (($x196 (and (and (and (and (and $x169 $x145) $x45) $x182) $x198) $x10)))
 (let (($x208 (= $x196 true)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x219 (concat ?x14 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x220 (concat ?x64 ?x219))))
 (let (($x187 (= (_ bv0 32) ?x172)))
 (let ((?x239 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x239 (_ bv1 32))))
 (let (($x177 (= $x188 $x176)))
 (let (($x55 (=> $x130 $x177)))
 (let (($x94 (= ?x239 (_ bv0 32))))
 (let (($x167 (= $x230 $x94)))
 (let (($x190 (=> $x130 $x167)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x132)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x174)))
 (let (($x9 (= input.spec-%var-l-1.2.0 ?x240)))
 (let (($x104 (=> $x130 $x9)))
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x59 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x59 (_ bv1 32))))
 (let (($x186 (= $x130 $x160)))
 (let (($x213 (and (and (and (and (and (= $x84 (= ?x59 (_ bv0 32))) $x169) $x186) $x104) $x190) $x55)))
 (let (($x170 (= $x213 true)))
 (let ((?x80 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x139 (= (_ bv0 3) ?x80)))
 (let (($x124 (= $x139 true)))
 (let (($x122 (= $x124 true)))
 (let (($x22 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x126 (= $x22 true)))
 (let (($x128 (= $x126 true)))
 (let (($x62 (= $x128 true)))
 (let (($x159 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x100 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x120 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100))))
 (let (($x91 (and true $x120)))
 (let (($x13 (and $x120 $x91)))
 (let (($x127 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x216 (= (bvand ?x33 (_ bv4294967292 32)) ?x33)))
 (let (($x121 (and $x216 $x127)))
 (let (($x48 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x33 (bvsub ?x33 (_ bv4 32))) (bvult ?x33 (bvsub ?x33 (_ bv4 32))))))
 (let (($x96 (and (and (and (and (and $x91 $x48) $x216) $x121) $x13) $x159)))
 (let (($x231 (= true $x96)))
 (let (($x123 (not $x217)))
 (let (($x54 (=> $x123 $x231)))
 (let (($x109 (= $x54 true)))
 (let (($x125 (= $x109 true)))
 (let (($x157 (= $x125 true)))
 (let (($x107 (= $x123 true)))
 (let (($x69 (= $x107 true)))
 (let (($x93 (= $x69 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x7)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x136 $x118)))
 (let (($x88 (and $x32 $x29)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x20 $x88)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x95)))))))
 (let (($x60 (and $x51 $x158)))
 (let (($x11 (= $x60 true)))
 (let (($x71 (= $x11 true)))
 (let (($x108 (= $x71 true)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x143 (= $x77 true)))
 (let (($x23 (= $x143 true)))
 (let (($x26 (and $x23 $x108)))
 (let (($x98 (and $x26 $x93)))
 (let (($x180 (and $x98 $x157)))
 (let (($x134 (and $x180 $x62)))
 (let (($x42 (and $x134 $x122)))
 (let (($x178 (and $x42 $x170)))
 (let (($x209 (and $x178 $x208)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x258 (and $x144 $x209)))
 (let (($x28 (bvugt ?x33 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x33 (_ bv3 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x116 (=> (bvule ?x33 (bvsub (bvadd ?x33 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x28)))))))
 (let (($x86 (=> (and $x123 (bvule ?x33 (bvsub (bvadd ?x33 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x12 $x28)))))))
 (let (($x66 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x133 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x111 (_ bv1 32))) (or false (or false (and true (or $x137 $x66)))))))
 (let (($x214 (=> (and $x123 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x111 (_ bv1 32)))) (or false (or false (and true (or $x137 $x66)))))))
 (let (($x103 (and $x214 $x86)))
 (let (($x242 (and $x103 $x258)))
 (let (($x261 (=> $x242 $x273)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x33 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x101))))
 (let ((?x205 ((_ extract 2 0) ?x117)))
 (let (($x206 (= (_ bv0 3) ?x205)))
 (let (($x273 (= $x206 true)))
 (let ((?x111 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x223))))
 (let (($x57 (= (_ bv0 32) ?x40)))
 (let ((?x237 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x237 (_ bv1 32))))
 (let (($x188 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x236 (= $x188 $x200)))
 (let (($x130 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x10 (=> $x130 $x236)))
 (let (($x197 (= ?x237 (_ bv0 32))))
 (let (($x230 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x277 (= $x230 $x197)))
 (let (($x198 (=> $x130 $x277)))
 (let ((?x183 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x114 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x225 (concat (select input.dst.llvm-mem ?x114) (concat ?x285 (concat ?x257 ?x183)))))
 (let (($x268 (= input.spec-%var-l-1.2.0 ?x225)))
 (let (($x182 (=> $x130 $x268)))
 (let (($x217 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x221 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge ?x221 (_ bv1 32))))
 (let (($x45 (= $x130 $x171)))
 (let (($x173 (= ?x221 (_ bv0 32))))
 (let (($x84 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x145 (= $x84 $x173)))
 (let (($x76 (= false false)))
 (let (($x169 (=> $x84 $x76)))
 (let (($x196 (and (and (and (and (and $x169 $x145) $x45) $x182) $x198) $x10)))
 (let (($x208 (= $x196 true)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x219 (concat ?x14 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x220 (concat ?x64 ?x219))))
 (let (($x187 (= (_ bv0 32) ?x172)))
 (let ((?x239 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x239 (_ bv1 32))))
 (let (($x177 (= $x188 $x176)))
 (let (($x55 (=> $x130 $x177)))
 (let (($x94 (= ?x239 (_ bv0 32))))
 (let (($x167 (= $x230 $x94)))
 (let (($x190 (=> $x130 $x167)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x132)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x174)))
 (let (($x9 (= input.spec-%var-l-1.2.0 ?x240)))
 (let (($x104 (=> $x130 $x9)))
 (let (($x63 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x59 (ite $x63 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x59 (_ bv1 32))))
 (let (($x186 (= $x130 $x160)))
 (let (($x213 (and (and (and (and (and (= $x84 (= ?x59 (_ bv0 32))) $x169) $x186) $x104) $x190) $x55)))
 (let (($x170 (= $x213 true)))
 (let ((?x80 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x139 (= (_ bv0 3) ?x80)))
 (let (($x124 (= $x139 true)))
 (let (($x122 (= $x124 true)))
 (let (($x22 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x126 (= $x22 true)))
 (let (($x128 (= $x126 true)))
 (let (($x62 (= $x128 true)))
 (let (($x159 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x100 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x120 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100))))
 (let (($x91 (and true $x120)))
 (let (($x13 (and $x120 $x91)))
 (let (($x127 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x216 (= (bvand ?x33 (_ bv4294967292 32)) ?x33)))
 (let (($x121 (and $x216 $x127)))
 (let (($x48 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x33 (bvsub ?x33 (_ bv4 32))) (bvult ?x33 (bvsub ?x33 (_ bv4 32))))))
 (let (($x96 (and (and (and (and (and $x91 $x48) $x216) $x121) $x13) $x159)))
 (let (($x231 (= true $x96)))
 (let (($x123 (not $x217)))
 (let (($x54 (=> $x123 $x231)))
 (let (($x109 (= $x54 true)))
 (let (($x125 (= $x109 true)))
 (let (($x157 (= $x125 true)))
 (let (($x107 (= $x123 true)))
 (let (($x69 (= $x107 true)))
 (let (($x93 (= $x69 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x7)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x136 $x118)))
 (let (($x88 (and $x32 $x29)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x20 $x88)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x95)))))))
 (let (($x60 (and $x51 $x158)))
 (let (($x11 (= $x60 true)))
 (let (($x71 (= $x11 true)))
 (let (($x108 (= $x71 true)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x143 (= $x77 true)))
 (let (($x23 (= $x143 true)))
 (let (($x26 (and $x23 $x108)))
 (let (($x98 (and $x26 $x93)))
 (let (($x180 (and $x98 $x157)))
 (let (($x134 (and $x180 $x62)))
 (let (($x42 (and $x134 $x122)))
 (let (($x178 (and $x42 $x170)))
 (let (($x209 (and $x178 $x208)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x258 (and $x144 $x209)))
 (let (($x28 (bvugt ?x33 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x33 (_ bv3 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x116 (=> (bvule ?x33 (bvsub (bvadd ?x33 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x28)))))))
 (let (($x86 (=> (and $x123 (bvule ?x33 (bvsub (bvadd ?x33 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x12 $x28)))))))
 (let (($x66 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x133 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x111 (_ bv1 32))) (or false (or false (and true (or $x137 $x66)))))))
 (let (($x214 (=> (and $x123 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x111 (_ bv1 32)))) (or false (or false (and true (or $x137 $x66)))))))
 (let (($x103 (and $x214 $x86)))
 (let (($x242 (and $x103 $x258)))
 (let (($x261 (=> $x242 $x273)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x267 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x78 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x268 (concat (select input.dst.llvm-mem ?x78) (concat ?x266 (concat ?x181 ?x267)))))
 (let ((?x261 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x268)))
 (let (($x211 (= (_ bv0 32) ?x261)))
 (let (($x82 (= $x211 true)))
 (let ((?x18 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x185))))
 (let (($x57 (= (_ bv0 32) ?x40)))
 (let ((?x237 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x199 (bvuge ?x237 (_ bv1 32))))
 (let (($x6 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x200 (= $x6 $x199)))
 (let (($x186 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x236 (=> $x186 $x200)))
 (let (($x197 (= ?x237 (_ bv0 32))))
 (let (($x230 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x277 (= $x230 $x197)))
 (let (($x198 (=> $x186 $x277)))
 (let (($x182 (= input.spec-%var-l-1.2.0 ?x268)))
 (let (($x241 (=> $x186 $x182)))
 (let (($x217 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x226 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x226 (_ bv1 32))))
 (let (($x192 (= $x186 $x195)))
 (let (($x171 (= ?x226 (_ bv0 32))))
 (let (($x59 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x45 (= $x59 $x171)))
 (let (($x130 (= false false)))
 (let (($x160 (=> $x59 $x130)))
 (let (($x258 (and (and (and (and (and $x160 $x45) $x192) $x241) $x198) $x236)))
 (let (($x242 (= $x258 true)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x64 (concat ?x52 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x46 (concat ?x14 ?x64))))
 (let (($x187 (= (_ bv0 32) ?x172)))
 (let ((?x239 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x239 (_ bv1 32))))
 (let (($x176 (= $x6 $x188)))
 (let (($x177 (=> $x186 $x176)))
 (let (($x94 (= ?x239 (_ bv0 32))))
 (let (($x167 (= $x230 $x94)))
 (let (($x190 (=> $x186 $x167)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x260)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x132)))
 (let (($x104 (= input.spec-%var-l-1.2.0 ?x9)))
 (let (($x189 (=> $x186 $x104)))
 (let (($x83 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x76 (ite $x83 (_ bv0 32) (_ bv1 32))))
 (let (($x175 (bvuge ?x76 (_ bv1 32))))
 (let (($x152 (= $x186 $x175)))
 (let (($x221 (and (and (and (and (and (= $x59 (= ?x76 (_ bv0 32))) $x160) $x152) $x189) $x190) $x177)))
 (let (($x173 (= $x221 true)))
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x44 (= $x42 true)))
 (let (($x84 (= $x44 true)))
 (let ((?x134 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x85 (= (_ bv0 3) ?x134)))
 (let (($x80 (= $x85 true)))
 (let (($x139 (= $x80 true)))
 (let (($x180 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x105 (= $x180 true)))
 (let (($x22 (= $x105 true)))
 (let (($x126 (= $x22 true)))
 (let (($x127 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x93 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x93) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x93))))
 (let (($x142 (and true $x65)))
 (let (($x39 (and $x65 $x142)))
 (let ((?x228 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x16))))
 (let (($x232 (= (bvand ?x135 (_ bv4294967288 32)) ?x135)))
 (let (($x17 (= (bvand ?x228 (_ bv4294967292 32)) ?x228)))
 (let (($x117 (and $x17 $x232)))
 (let (($x90 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x228 (bvsub ?x228 (_ bv4 32))) (bvult ?x228 (bvsub ?x228 (_ bv4 32))))))
 (let (($x27 (and (and (and (and (and $x142 $x90) $x17) $x117) $x39) $x127)))
 (let (($x159 (= true $x27)))
 (let (($x123 (not $x217)))
 (let (($x96 (=> $x123 $x159)))
 (let (($x231 (= $x96 true)))
 (let (($x54 (= $x231 true)))
 (let (($x109 (= $x54 true)))
 (let (($x108 (= $x123 true)))
 (let (($x26 (= $x108 true)))
 (let (($x107 (= $x26 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x32)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x136)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x20 $x75)))
 (let (($x29 (and $x118 $x7)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x156 $x29)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x95)))))))
 (let (($x158 (and $x92 $x88)))
 (let (($x60 (= $x158 true)))
 (let (($x11 (= $x60 true)))
 (let (($x71 (= $x11 true)))
 (let (($x69 (and $x71 $x107)))
 (let (($x125 (and $x69 $x109)))
 (let (($x128 (and $x125 $x126)))
 (let (($x124 (and $x128 $x139)))
 (let (($x41 (and $x124 $x84)))
 (let (($x145 (and $x41 $x173)))
 (let (($x205 (and $x145 $x242)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x206 (and $x77 $x205)))
 (let (($x68 (bvugt ?x228 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd ?x228 (_ bv3 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x144 (=> (bvule ?x228 (bvsub (bvadd ?x228 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x68)))))))
 (let (($x155 (=> (and $x123 (bvule ?x228 (bvsub (bvadd ?x228 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x110 $x68)))))))
 (let (($x49 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x43 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x18 (_ bv1 32))) (or false (or false (and true (or $x131 $x49)))))))
 (let (($x224 (=> (and $x123 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x18 (_ bv1 32)))) (or false (or false (and true (or $x131 $x49)))))))
 (let (($x8 (and $x224 $x155)))
 (let (($x273 (and $x8 $x206)))
 (let (($x79 (=> $x273 $x82)))
 (not $x79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x267 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x78 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x268 (concat (select input.dst.llvm-mem ?x78) (concat ?x266 (concat ?x181 ?x267)))))
 (let ((?x261 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x268)))
 (let (($x211 (= (_ bv0 32) ?x261)))
 (let (($x82 (= $x211 true)))
 (let ((?x18 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x185))))
 (let (($x57 (= (_ bv0 32) ?x40)))
 (let ((?x237 (ite $x57 (_ bv0 32) (_ bv1 32))))
 (let (($x199 (bvuge ?x237 (_ bv1 32))))
 (let (($x6 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x200 (= $x6 $x199)))
 (let (($x186 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x236 (=> $x186 $x200)))
 (let (($x197 (= ?x237 (_ bv0 32))))
 (let (($x230 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x277 (= $x230 $x197)))
 (let (($x198 (=> $x186 $x277)))
 (let (($x182 (= input.spec-%var-l-1.2.0 ?x268)))
 (let (($x241 (=> $x186 $x182)))
 (let (($x217 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x226 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x226 (_ bv1 32))))
 (let (($x192 (= $x186 $x195)))
 (let (($x171 (= ?x226 (_ bv0 32))))
 (let (($x59 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x45 (= $x59 $x171)))
 (let (($x130 (= false false)))
 (let (($x160 (=> $x59 $x130)))
 (let (($x258 (and (and (and (and (and $x160 $x45) $x192) $x241) $x198) $x236)))
 (let (($x242 (= $x258 true)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x64 (concat ?x52 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x46 (concat ?x14 ?x64))))
 (let (($x187 (= (_ bv0 32) ?x172)))
 (let ((?x239 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x239 (_ bv1 32))))
 (let (($x176 (= $x6 $x188)))
 (let (($x177 (=> $x186 $x176)))
 (let (($x94 (= ?x239 (_ bv0 32))))
 (let (($x167 (= $x230 $x94)))
 (let (($x190 (=> $x186 $x167)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x260)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x132)))
 (let (($x104 (= input.spec-%var-l-1.2.0 ?x9)))
 (let (($x189 (=> $x186 $x104)))
 (let (($x83 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x76 (ite $x83 (_ bv0 32) (_ bv1 32))))
 (let (($x175 (bvuge ?x76 (_ bv1 32))))
 (let (($x152 (= $x186 $x175)))
 (let (($x221 (and (and (and (and (and (= $x59 (= ?x76 (_ bv0 32))) $x160) $x152) $x189) $x190) $x177)))
 (let (($x173 (= $x221 true)))
 (let (($x42 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x44 (= $x42 true)))
 (let (($x84 (= $x44 true)))
 (let ((?x134 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x85 (= (_ bv0 3) ?x134)))
 (let (($x80 (= $x85 true)))
 (let (($x139 (= $x80 true)))
 (let (($x180 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x105 (= $x180 true)))
 (let (($x22 (= $x105 true)))
 (let (($x126 (= $x22 true)))
 (let (($x127 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x93 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x93) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x93))))
 (let (($x142 (and true $x65)))
 (let (($x39 (and $x65 $x142)))
 (let ((?x228 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x16))))
 (let (($x232 (= (bvand ?x135 (_ bv4294967288 32)) ?x135)))
 (let (($x17 (= (bvand ?x228 (_ bv4294967292 32)) ?x228)))
 (let (($x117 (and $x17 $x232)))
 (let (($x90 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x228 (bvsub ?x228 (_ bv4 32))) (bvult ?x228 (bvsub ?x228 (_ bv4 32))))))
 (let (($x27 (and (and (and (and (and $x142 $x90) $x17) $x117) $x39) $x127)))
 (let (($x159 (= true $x27)))
 (let (($x123 (not $x217)))
 (let (($x96 (=> $x123 $x159)))
 (let (($x231 (= $x96 true)))
 (let (($x54 (= $x231 true)))
 (let (($x109 (= $x54 true)))
 (let (($x108 (= $x123 true)))
 (let (($x26 (= $x108 true)))
 (let (($x107 (= $x26 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x32)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x136)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x20 $x75)))
 (let (($x29 (and $x118 $x7)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x156 $x29)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x95)))))))
 (let (($x158 (and $x92 $x88)))
 (let (($x60 (= $x158 true)))
 (let (($x11 (= $x60 true)))
 (let (($x71 (= $x11 true)))
 (let (($x69 (and $x71 $x107)))
 (let (($x125 (and $x69 $x109)))
 (let (($x128 (and $x125 $x126)))
 (let (($x124 (and $x128 $x139)))
 (let (($x41 (and $x124 $x84)))
 (let (($x145 (and $x41 $x173)))
 (let (($x205 (and $x145 $x242)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x206 (and $x77 $x205)))
 (let (($x68 (bvugt ?x228 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd ?x228 (_ bv3 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x144 (=> (bvule ?x228 (bvsub (bvadd ?x228 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x68)))))))
 (let (($x155 (=> (and $x123 (bvule ?x228 (bvsub (bvadd ?x228 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x110 $x68)))))))
 (let (($x49 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x43 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x18 (_ bv1 32))) (or false (or false (and true (or $x131 $x49)))))))
 (let (($x224 (=> (and $x123 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x18 (_ bv1 32)))) (or false (or false (and true (or $x131 $x49)))))))
 (let (($x8 (and $x224 $x155)))
 (let (($x273 (and $x8 $x206)))
 (let (($x79 (=> $x273 $x82)))
 (not $x79)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv131075 32) (_ bv1 8)) (_ bv2147483651 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv16777216 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv131072 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x22349035)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x20))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x193 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x61 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x5 (concat (select input.dst.llvm-mem ?x61) (concat ?x223 (concat ?x182 ?x193)))))
 (let ((?x238 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x5)))
 (let (($x202 (= (_ bv0 32) ?x238)))
 (let (($x204 (= $x202 true)))
 (let ((?x137 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x40))))
 (let (($x199 (= (_ bv0 32) ?x209)))
 (let ((?x200 (ite $x199 (_ bv0 32) (_ bv1 32))))
 (let (($x205 (bvuge ?x200 (_ bv1 32))))
 (let (($x178 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x206 (= $x178 $x205)))
 (let (($x152 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x273 (=> $x152 $x206)))
 (let (($x236 (= ?x200 (_ bv0 32))))
 (let (($x230 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x258 (= $x230 $x236)))
 (let (($x242 (=> $x152 $x258)))
 (let (($x235 (= input.spec-%var-l-1.2.0 ?x5)))
 (let (($x194 (=> $x152 $x235)))
 (let (($x217 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x266 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x267 (bvuge ?x266 (_ bv1 32))))
 (let (($x257 (= $x152 $x267)))
 (let (($x285 (= ?x266 (_ bv0 32))))
 (let (($x76 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x181 (= $x76 $x285)))
 (let (($x173 (and $x152 $x178)))
 (let (($x145 (not $x173)))
 (let (($x82 (and (and (and (=> $x76 (= false false)) (not (and $x152 $x230))) $x145) $x181)))
 (let (($x151 (and (and (and (and $x82 $x257) $x194) $x242) $x273)))
 (let (($x143 (= $x151 true)))
 (let (($x177 (and $x152 $x230)))
 (let (($x221 (not $x177)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x14 (concat ?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x146 (concat ?x52 ?x14))))
 (let (($x187 (= (_ bv0 32) ?x172)))
 (let ((?x239 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x239 (_ bv1 32))))
 (let (($x188 (= $x178 $x6)))
 (let (($x176 (=> $x152 $x188)))
 (let (($x94 (= ?x239 (_ bv0 32))))
 (let (($x167 (= $x230 $x94)))
 (let (($x190 (=> $x152 $x167)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x233)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x260)))
 (let (($x189 (= input.spec-%var-l-1.2.0 ?x104)))
 (let (($x170 (=> $x152 $x189)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x130 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge ?x130 (_ bv1 32))))
 (let (($x184 (= $x152 $x213)))
 (let (($x171 (and (and (= $x76 (= ?x130 (_ bv0 32))) (=> $x76 (= false false))) $x184)))
 (let (($x196 (and (and (and (and (and $x171 $x170) $x190) $x176) $x221) $x145)))
 (let (($x225 (= $x196 true)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x63 (= $x41 true)))
 (let (($x59 (= $x63 true)))
 (let ((?x139 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x124 (= (_ bv0 3) ?x139)))
 (let (($x122 (= $x124 true)))
 (let (($x42 (= $x122 true)))
 (let (($x126 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x128 (= $x126 true)))
 (let (($x62 (= $x128 true)))
 (let (($x134 (= $x62 true)))
 (let (($x58 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x100 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x120 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100))))
 (let (($x140 (and true $x120)))
 (let (($x39 (and $x120 $x140)))
 (let ((?x154 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem ?x154))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv2 32))) ?x216))))
 (let (($x117 (= (bvand ?x36 (_ bv4294967288 32)) ?x36)))
 (let (($x67 (= (bvand ?x154 (_ bv4294967292 32)) ?x154)))
 (let (($x13 (and $x67 $x117)))
 (let (($x48 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x154 (bvsub ?x154 (_ bv4 32))) (bvult ?x154 (bvsub ?x154 (_ bv4 32))))))
 (let (($x231 (and (and (and (and (and $x140 $x48) $x67) $x13) $x39) $x58)))
 (let (($x54 (= true $x231)))
 (let (($x123 (not $x217)))
 (let (($x109 (=> $x123 $x54)))
 (let (($x125 (= $x109 true)))
 (let (($x157 (= $x125 true)))
 (let (($x180 (= $x157 true)))
 (let (($x69 (= $x123 true)))
 (let (($x98 (= $x69 true)))
 (let (($x93 (= $x98 true)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x88)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x118 $x7)))
 (let (($x60 (and $x29 $x158)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x115 $x60)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x162 $x106)))))))
 (let (($x71 (and $x75 $x11)))
 (let (($x108 (= $x71 true)))
 (let (($x26 (= $x108 true)))
 (let (($x107 (= $x26 true)))
 (let (($x119 (and $x107 $x93)))
 (let (($x105 (and $x119 $x180)))
 (let (($x85 (and $x105 $x134)))
 (let (($x44 (and $x85 $x42)))
 (let (($x21 (and $x44 $x59)))
 (let (($x183 (and $x21 $x225)))
 (let (($x244 (and $x183 $x143)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x274 (and $x81 $x244)))
 (let (($x86 (bvugt ?x154 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd ?x154 (_ bv3 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x77 (=> (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x86)))))))
 (let (($x164 (=> (and $x123 (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x116 $x86)))))))
 (let (($x214 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x28 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x137 (_ bv1 32))) (or false (or false (and true (or $x133 $x214)))))))
 (let (($x114 (=> (and $x123 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x137 (_ bv1 32)))) (or false (or false (and true (or $x133 $x214)))))))
 (let (($x73 (and $x114 $x164)))
 (let (($x212 (and $x73 $x274)))
 (let (($x207 (=> $x212 $x204)))
 (not $x207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x193 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x61 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x5 (concat (select input.dst.llvm-mem ?x61) (concat ?x223 (concat ?x182 ?x193)))))
 (let ((?x238 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x5)))
 (let (($x202 (= (_ bv0 32) ?x238)))
 (let (($x204 (= $x202 true)))
 (let ((?x137 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x40))))
 (let (($x199 (= (_ bv0 32) ?x209)))
 (let ((?x200 (ite $x199 (_ bv0 32) (_ bv1 32))))
 (let (($x205 (bvuge ?x200 (_ bv1 32))))
 (let (($x178 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x206 (= $x178 $x205)))
 (let (($x152 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x273 (=> $x152 $x206)))
 (let (($x236 (= ?x200 (_ bv0 32))))
 (let (($x230 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x258 (= $x230 $x236)))
 (let (($x242 (=> $x152 $x258)))
 (let (($x235 (= input.spec-%var-l-1.2.0 ?x5)))
 (let (($x194 (=> $x152 $x235)))
 (let (($x217 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x266 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x267 (bvuge ?x266 (_ bv1 32))))
 (let (($x257 (= $x152 $x267)))
 (let (($x285 (= ?x266 (_ bv0 32))))
 (let (($x76 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x181 (= $x76 $x285)))
 (let (($x173 (and $x152 $x178)))
 (let (($x145 (not $x173)))
 (let (($x82 (and (and (and (=> $x76 (= false false)) (not (and $x152 $x230))) $x145) $x181)))
 (let (($x151 (and (and (and (and $x82 $x257) $x194) $x242) $x273)))
 (let (($x143 (= $x151 true)))
 (let (($x177 (and $x152 $x230)))
 (let (($x221 (not $x177)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x14 (concat ?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x146 (concat ?x52 ?x14))))
 (let (($x187 (= (_ bv0 32) ?x172)))
 (let ((?x239 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x239 (_ bv1 32))))
 (let (($x188 (= $x178 $x6)))
 (let (($x176 (=> $x152 $x188)))
 (let (($x94 (= ?x239 (_ bv0 32))))
 (let (($x167 (= $x230 $x94)))
 (let (($x190 (=> $x152 $x167)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x233)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x260)))
 (let (($x189 (= input.spec-%var-l-1.2.0 ?x104)))
 (let (($x170 (=> $x152 $x189)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x130 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x213 (bvuge ?x130 (_ bv1 32))))
 (let (($x184 (= $x152 $x213)))
 (let (($x171 (and (and (= $x76 (= ?x130 (_ bv0 32))) (=> $x76 (= false false))) $x184)))
 (let (($x196 (and (and (and (and (and $x171 $x170) $x190) $x176) $x221) $x145)))
 (let (($x225 (= $x196 true)))
 (let (($x41 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x63 (= $x41 true)))
 (let (($x59 (= $x63 true)))
 (let ((?x139 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x124 (= (_ bv0 3) ?x139)))
 (let (($x122 (= $x124 true)))
 (let (($x42 (= $x122 true)))
 (let (($x126 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x128 (= $x126 true)))
 (let (($x62 (= $x128 true)))
 (let (($x134 (= $x62 true)))
 (let (($x58 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x100 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x120 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x100))))
 (let (($x140 (and true $x120)))
 (let (($x39 (and $x120 $x140)))
 (let ((?x154 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem ?x154))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv2 32))) ?x216))))
 (let (($x117 (= (bvand ?x36 (_ bv4294967288 32)) ?x36)))
 (let (($x67 (= (bvand ?x154 (_ bv4294967292 32)) ?x154)))
 (let (($x13 (and $x67 $x117)))
 (let (($x48 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x154 (bvsub ?x154 (_ bv4 32))) (bvult ?x154 (bvsub ?x154 (_ bv4 32))))))
 (let (($x231 (and (and (and (and (and $x140 $x48) $x67) $x13) $x39) $x58)))
 (let (($x54 (= true $x231)))
 (let (($x123 (not $x217)))
 (let (($x109 (=> $x123 $x54)))
 (let (($x125 (= $x109 true)))
 (let (($x157 (= $x125 true)))
 (let (($x180 (= $x157 true)))
 (let (($x69 (= $x123 true)))
 (let (($x98 (= $x69 true)))
 (let (($x93 (= $x98 true)))
 (let ((?x88 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x88)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x118 $x7)))
 (let (($x60 (and $x29 $x158)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x115 $x60)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x162 $x106)))))))
 (let (($x71 (and $x75 $x11)))
 (let (($x108 (= $x71 true)))
 (let (($x26 (= $x108 true)))
 (let (($x107 (= $x26 true)))
 (let (($x119 (and $x107 $x93)))
 (let (($x105 (and $x119 $x180)))
 (let (($x85 (and $x105 $x134)))
 (let (($x44 (and $x85 $x42)))
 (let (($x21 (and $x44 $x59)))
 (let (($x183 (and $x21 $x225)))
 (let (($x244 (and $x183 $x143)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x274 (and $x81 $x244)))
 (let (($x86 (bvugt ?x154 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd ?x154 (_ bv3 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x77 (=> (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x86)))))))
 (let (($x164 (=> (and $x123 (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x116 $x86)))))))
 (let (($x214 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x28 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x137 (_ bv1 32))) (or false (or false (and true (or $x133 $x214)))))))
 (let (($x114 (=> (and $x123 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x137 (_ bv1 32)))) (or false (or false (and true (or $x133 $x214)))))))
 (let (($x73 (and $x114 $x164)))
 (let (($x212 (and $x73 $x274)))
 (let (($x207 (=> $x212 $x204)))
 (not $x207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x33 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x51 (concat (select input.dst.llvm-mem ?x33) (concat ?x203 (concat ?x202 ?x212)))))
 (let ((?x308 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x51)))
 (let (($x309 (= (_ bv0 32) ?x308)))
 (let (($x310 (= $x309 true)))
 (let ((?x131 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x246))))
 (let ((?x278 (bvadd ?x247 (_ bv4 32))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x34))))
 (let (($x149 (= (_ bv0 32) ?x290)))
 (let ((?x147 (ite $x149 (_ bv0 32) (_ bv1 32))))
 (let (($x292 (bvuge ?x147 (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x293 (= $x237 $x292)))
 (let (($x10 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x177 (and $x184 $x10)))
 (let (($x294 (=> $x177 $x293)))
 (let (($x113 (= ?x147 (_ bv0 32))))
 (let (($x257 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x38 (= $x257 $x113)))
 (let (($x291 (=> $x177 $x38)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x97))))
 (let (($x272 (= input.spec-%var-l-1.2.1.2.0 ?x269)))
 (let (($x275 (=> $x177 $x272)))
 (let (($x249 (= (_ bv0 32) ?x247)))
 (let ((?x252 (ite $x249 (_ bv0 32) (_ bv1 32))))
 (let (($x256 (bvuge ?x252 (_ bv1 32))))
 (let (($x283 (= $x10 $x256)))
 (let (($x141 (=> $x184 $x283)))
 (let (($x282 (= ?x252 (_ bv0 32))))
 (let (($x230 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x250 (= $x230 $x282)))
 (let (($x251 (=> $x184 $x250)))
 (let (($x243 (= input.spec-%var-l-1.2.0 ?x51)))
 (let (($x201 (=> $x184 $x243)))
 (let (($x217 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x273 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x244 (bvuge ?x273 (_ bv1 32))))
 (let (($x274 (= $x184 $x244)))
 (let (($x151 (= ?x273 (_ bv0 32))))
 (let (($x130 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x143 (= $x130 $x151)))
 (let (($x152 (= false false)))
 (let (($x176 (and $x184 $x230)))
 (let (($x195 (=> $x176 $x152)))
 (let (($x213 (=> $x130 $x152)))
 (let (($x300 (and (and (and (and (and (and $x213 $x195) $x143) $x274) $x201) $x251) $x141)))
 (let (($x303 (and (and (and $x300 $x275) $x291) $x294)))
 (let (($x304 (= $x303 true)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x52 (concat ?x220 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x53 (concat ?x191 ?x52))))
 (let ((?x79 (bvadd ?x172 (_ bv4 32))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x268))))
 (let (($x194 (= (_ bv0 32) ?x235)))
 (let ((?x30 (ite $x194 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x30 (_ bv1 32))))
 (let (($x222 (= $x237 $x185)))
 (let (($x179 (=> $x177 $x222)))
 (let (($x277 (= ?x30 (_ bv0 32))))
 (let (($x198 (= $x257 $x277)))
 (let (($x57 (=> $x177 $x198)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x196))))
 (let (($x181 (= input.spec-%var-l-1.2.1.2.0 ?x285)))
 (let (($x82 (=> $x177 $x181)))
 (let (($x187 (= (_ bv0 32) ?x172)))
 (let ((?x239 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x178 (bvuge ?x239 (_ bv1 32))))
 (let (($x6 (= $x10 $x178)))
 (let (($x188 (=> $x184 $x6)))
 (let (($x94 (= ?x239 (_ bv0 32))))
 (let (($x167 (= $x230 $x94)))
 (let (($x190 (=> $x184 $x167)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x234)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x233)))
 (let (($x170 (= input.spec-%var-l-1.2.0 ?x189)))
 (let (($x45 (=> $x184 $x170)))
 (let (($x55 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x186 (ite $x55 (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge ?x186 (_ bv1 32))))
 (let (($x174 (= $x184 $x171)))
 (let (($x200 (and (and (and (and (and (= $x130 (= ?x186 (_ bv0 32))) $x213) $x174) $x45) $x190) $x188)))
 (let (($x229 (and (and (and (and $x200 $x195) $x82) $x57) $x179)))
 (let (($x205 (= $x229 true)))
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x83 (= $x21 true)))
 (let (($x76 (= $x83 true)))
 (let ((?x42 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x44 (= (_ bv0 3) ?x42)))
 (let (($x84 (= $x44 true)))
 (let (($x41 (= $x84 true)))
 (let (($x134 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x85 (= $x134 true)))
 (let (($x80 (= $x85 true)))
 (let (($x139 (= $x80 true)))
 (let (($x163 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x91 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x91) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x91))))
 (let (($x121 (and true $x150)))
 (let (($x39 (and $x150 $x121)))
 (let ((?x12 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv1 32))) (select input.dst.llvm-mem ?x12))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv2 32))) ?x19))))
 (let (($x13 (= (bvand ?x101 (_ bv4294967288 32)) ?x101)))
 (let (($x218 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x159 (and $x218 $x13)))
 (let (($x56 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x12 (bvsub ?x12 (_ bv4 32))) (bvult ?x12 (bvsub ?x12 (_ bv4 32))))))
 (let (($x125 (and (and (and (and (and $x121 $x56) $x218) $x159) $x39) $x163)))
 (let (($x157 (= true $x125)))
 (let (($x123 (not $x217)))
 (let (($x180 (=> $x123 $x157)))
 (let (($x105 (= $x180 true)))
 (let (($x22 (= $x105 true)))
 (let (($x126 (= $x22 true)))
 (let (($x119 (= $x123 true)))
 (let (($x65 (= $x119 true)))
 (let (($x100 (= $x65 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x11)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x29 $x158)))
 (let (($x108 (and $x60 $x71)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x162 $x108)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x20)))))))
 (let (($x107 (and $x7 $x26)))
 (let (($x69 (= $x107 true)))
 (let (($x98 (= $x69 true)))
 (let (($x93 (= $x98 true)))
 (let (($x142 (and $x93 $x100)))
 (let (($x128 (and $x142 $x126)))
 (let (($x124 (and $x128 $x139)))
 (let (($x63 (and $x124 $x41)))
 (let (($x169 (and $x63 $x76)))
 (let (($x206 (and $x169 $x205)))
 (let (($x305 (and $x206 $x304)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x306 (and $x129 $x305)))
 (let (($x155 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd ?x12 (_ bv3 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x81 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x144 $x155)))))))
 (let (($x89 (=> (and $x123 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x144 $x155)))))))
 (let (($x224 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x68 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x131 (_ bv1 32))) (or false (or false (and true (or $x43 $x224)))))))
 (let (($x78 (=> (and $x123 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x131 (_ bv1 32)))) (or false (or false (and true (or $x43 $x224)))))))
 (let (($x161 (and $x78 $x89)))
 (let (($x307 (and $x161 $x306)))
 (let (($x311 (=> $x307 $x310)))
 (not $x311))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x33 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x51 (concat (select input.dst.llvm-mem ?x33) (concat ?x203 (concat ?x202 ?x212)))))
 (let ((?x308 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x51)))
 (let (($x309 (= (_ bv0 32) ?x308)))
 (let (($x310 (= $x309 true)))
 (let ((?x131 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x246))))
 (let ((?x278 (bvadd ?x247 (_ bv4 32))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x34))))
 (let (($x149 (= (_ bv0 32) ?x290)))
 (let ((?x147 (ite $x149 (_ bv0 32) (_ bv1 32))))
 (let (($x292 (bvuge ?x147 (_ bv1 32))))
 (let (($x237 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x293 (= $x237 $x292)))
 (let (($x10 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x177 (and $x184 $x10)))
 (let (($x294 (=> $x177 $x293)))
 (let (($x113 (= ?x147 (_ bv0 32))))
 (let (($x257 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x38 (= $x257 $x113)))
 (let (($x291 (=> $x177 $x38)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x97))))
 (let (($x272 (= input.spec-%var-l-1.2.1.2.0 ?x269)))
 (let (($x275 (=> $x177 $x272)))
 (let (($x249 (= (_ bv0 32) ?x247)))
 (let ((?x252 (ite $x249 (_ bv0 32) (_ bv1 32))))
 (let (($x256 (bvuge ?x252 (_ bv1 32))))
 (let (($x283 (= $x10 $x256)))
 (let (($x141 (=> $x184 $x283)))
 (let (($x282 (= ?x252 (_ bv0 32))))
 (let (($x230 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x250 (= $x230 $x282)))
 (let (($x251 (=> $x184 $x250)))
 (let (($x243 (= input.spec-%var-l-1.2.0 ?x51)))
 (let (($x201 (=> $x184 $x243)))
 (let (($x217 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x273 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x244 (bvuge ?x273 (_ bv1 32))))
 (let (($x274 (= $x184 $x244)))
 (let (($x151 (= ?x273 (_ bv0 32))))
 (let (($x130 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x143 (= $x130 $x151)))
 (let (($x152 (= false false)))
 (let (($x176 (and $x184 $x230)))
 (let (($x195 (=> $x176 $x152)))
 (let (($x213 (=> $x130 $x152)))
 (let (($x300 (and (and (and (and (and (and $x213 $x195) $x143) $x274) $x201) $x251) $x141)))
 (let (($x303 (and (and (and $x300 $x275) $x291) $x294)))
 (let (($x304 (= $x303 true)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x52 (concat ?x220 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x53 (concat ?x191 ?x52))))
 (let ((?x79 (bvadd ?x172 (_ bv4 32))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x268))))
 (let (($x194 (= (_ bv0 32) ?x235)))
 (let ((?x30 (ite $x194 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x30 (_ bv1 32))))
 (let (($x222 (= $x237 $x185)))
 (let (($x179 (=> $x177 $x222)))
 (let (($x277 (= ?x30 (_ bv0 32))))
 (let (($x198 (= $x257 $x277)))
 (let (($x57 (=> $x177 $x198)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x196))))
 (let (($x181 (= input.spec-%var-l-1.2.1.2.0 ?x285)))
 (let (($x82 (=> $x177 $x181)))
 (let (($x187 (= (_ bv0 32) ?x172)))
 (let ((?x239 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x178 (bvuge ?x239 (_ bv1 32))))
 (let (($x6 (= $x10 $x178)))
 (let (($x188 (=> $x184 $x6)))
 (let (($x94 (= ?x239 (_ bv0 32))))
 (let (($x167 (= $x230 $x94)))
 (let (($x190 (=> $x184 $x167)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x234)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x233)))
 (let (($x170 (= input.spec-%var-l-1.2.0 ?x189)))
 (let (($x45 (=> $x184 $x170)))
 (let (($x55 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x186 (ite $x55 (_ bv0 32) (_ bv1 32))))
 (let (($x171 (bvuge ?x186 (_ bv1 32))))
 (let (($x174 (= $x184 $x171)))
 (let (($x200 (and (and (and (and (and (= $x130 (= ?x186 (_ bv0 32))) $x213) $x174) $x45) $x190) $x188)))
 (let (($x229 (and (and (and (and $x200 $x195) $x82) $x57) $x179)))
 (let (($x205 (= $x229 true)))
 (let (($x21 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x83 (= $x21 true)))
 (let (($x76 (= $x83 true)))
 (let ((?x42 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x44 (= (_ bv0 3) ?x42)))
 (let (($x84 (= $x44 true)))
 (let (($x41 (= $x84 true)))
 (let (($x134 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x85 (= $x134 true)))
 (let (($x80 (= $x85 true)))
 (let (($x139 (= $x80 true)))
 (let (($x163 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x91 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x150 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x91) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x91))))
 (let (($x121 (and true $x150)))
 (let (($x39 (and $x150 $x121)))
 (let ((?x12 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv1 32))) (select input.dst.llvm-mem ?x12))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv2 32))) ?x19))))
 (let (($x13 (= (bvand ?x101 (_ bv4294967288 32)) ?x101)))
 (let (($x218 (= (bvand ?x12 (_ bv4294967292 32)) ?x12)))
 (let (($x159 (and $x218 $x13)))
 (let (($x56 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x12 (bvsub ?x12 (_ bv4 32))) (bvult ?x12 (bvsub ?x12 (_ bv4 32))))))
 (let (($x125 (and (and (and (and (and $x121 $x56) $x218) $x159) $x39) $x163)))
 (let (($x157 (= true $x125)))
 (let (($x123 (not $x217)))
 (let (($x180 (=> $x123 $x157)))
 (let (($x105 (= $x180 true)))
 (let (($x22 (= $x105 true)))
 (let (($x126 (= $x22 true)))
 (let (($x119 (= $x123 true)))
 (let (($x65 (= $x119 true)))
 (let (($x100 (= $x65 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x11)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x29 $x158)))
 (let (($x108 (and $x60 $x71)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x162 $x108)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x20)))))))
 (let (($x107 (and $x7 $x26)))
 (let (($x69 (= $x107 true)))
 (let (($x98 (= $x69 true)))
 (let (($x93 (= $x98 true)))
 (let (($x142 (and $x93 $x100)))
 (let (($x128 (and $x142 $x126)))
 (let (($x124 (and $x128 $x139)))
 (let (($x63 (and $x124 $x41)))
 (let (($x169 (and $x63 $x76)))
 (let (($x206 (and $x169 $x205)))
 (let (($x305 (and $x206 $x304)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x306 (and $x129 $x305)))
 (let (($x155 (bvugt ?x12 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd ?x12 (_ bv3 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x81 (=> (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x144 $x155)))))))
 (let (($x89 (=> (and $x123 (bvule ?x12 (bvsub (bvadd ?x12 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x144 $x155)))))))
 (let (($x224 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x68 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x131 (_ bv1 32))) (or false (or false (and true (or $x43 $x224)))))))
 (let (($x78 (=> (and $x123 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x131 (_ bv1 32)))) (or false (or false (and true (or $x43 $x224)))))))
 (let (($x161 (and $x78 $x89)))
 (let (($x307 (and $x161 $x306)))
 (let (($x311 (=> $x307 $x310)))
 (not $x311))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2 32) (_ bv1 8)) (_ bv9 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv19 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x4848484f)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x48484848)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x48484848)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x48) #x48484853 #x4b))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x48484848)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x204 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x228 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x228) (concat ?x298 (concat ?x51 ?x204)))))
 (let ((?x316 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x102)))
 (let (($x317 (= (_ bv0 32) ?x316)))
 (let (($x318 (= $x317 true)))
 (let ((?x133 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv1 32))) (select input.dst.llvm-mem ?x133))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv2 32))) ?x253))))
 (let ((?x289 (bvadd ?x251 (_ bv4 32))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x138))))
 (let (($x113 (= (_ bv0 32) ?x147)))
 (let ((?x38 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x293 (bvuge ?x38 (_ bv1 32))))
 (let (($x30 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x294 (= $x30 $x293)))
 (let (($x199 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x174 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x176 (and $x174 $x199)))
 (let (($x303 (=> $x176 $x294)))
 (let (($x291 (= ?x38 (_ bv0 32))))
 (let (($x181 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x302 (= $x181 $x291)))
 (let (($x292 (=> $x176 $x302)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x284))))
 (let (($x278 (= input.spec-%var-l-1.2.1.2.0 ?x301)))
 (let (($x288 (=> $x176 $x278)))
 (let (($x299 (= (_ bv0 32) ?x251)))
 (let ((?x256 (ite $x299 (_ bv0 32) (_ bv1 32))))
 (let (($x270 (bvuge ?x256 (_ bv1 32))))
 (let (($x271 (= $x199 $x270)))
 (let (($x262 (=> $x174 $x271)))
 (let (($x283 (= ?x256 (_ bv0 32))))
 (let (($x230 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x141 (= $x230 $x283)))
 (let (($x300 (=> $x174 $x141)))
 (let (($x254 (= input.spec-%var-l-1.2.0 ?x102)))
 (let (($x245 (=> $x174 $x254)))
 (let (($x217 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x207 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x202 (bvuge ?x207 (_ bv1 32))))
 (let (($x212 (= $x174 $x202)))
 (let (($x203 (= ?x207 (_ bv0 32))))
 (let (($x186 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x238 (= $x186 $x203)))
 (let (($x185 (and $x176 $x181)))
 (let (($x222 (not $x185)))
 (let (($x242 (and $x176 $x30)))
 (let (($x237 (not $x242)))
 (let (($x184 (= false false)))
 (let (($x188 (and $x174 $x230)))
 (let (($x200 (=> $x188 $x184)))
 (let (($x171 (=> $x186 $x184)))
 (let (($x309 (and (and (and (and (and (and $x171 $x200) $x237) $x222) $x238) $x212) $x245)))
 (let (($x18 (and (and (and (and (and $x309 $x300) $x262) $x288) $x292) $x303)))
 (let (($x136 (= $x18 true)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x191 (concat ?x46 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x219 (concat ?x220 ?x191))))
 (let ((?x82 (bvadd ?x172 (_ bv4 32))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem ?x82))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv2 32))) ?x79))))
 (let (($x276 (= (_ bv0 32) ?x223)))
 (let ((?x268 (ite $x276 (_ bv0 32) (_ bv1 32))))
 (let (($x277 (bvuge ?x268 (_ bv1 32))))
 (let (($x198 (= $x30 $x277)))
 (let (($x57 (=> $x176 $x198)))
 (let (($x241 (= ?x268 (_ bv0 32))))
 (let (($x235 (= $x181 $x241)))
 (let (($x194 (=> $x176 $x235)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x211))))
 (let (($x196 (= input.spec-%var-l-1.2.1.2.0 ?x192)))
 (let (($x261 (=> $x176 $x196)))
 (let (($x187 (= (_ bv0 32) ?x172)))
 (let ((?x239 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x10 (bvuge ?x239 (_ bv1 32))))
 (let (($x178 (= $x199 $x10)))
 (let (($x6 (=> $x174 $x178)))
 (let (($x94 (= ?x239 (_ bv0 32))))
 (let (($x167 (= $x230 $x94)))
 (let (($x190 (=> $x174 $x167)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x87)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x234)))
 (let (($x45 (= input.spec-%var-l-1.2.0 ?x170)))
 (let (($x209 (=> $x174 $x45)))
 (let (($x226 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x152 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x197 (bvuge ?x152 (_ bv1 32))))
 (let (($x132 (= $x174 $x197)))
 (let (($x295 (and (and (and (and (and (= $x186 (= ?x152 (_ bv0 32))) $x171) $x132) $x209) $x190) $x6)))
 (let (($x274 (and (and (and (and (and (and $x295 $x200) $x261) $x194) $x57) $x237) $x222)))
 (let (($x297 (= $x274 true)))
 (let (($x169 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (= $x169 true)))
 (let (($x130 (= $x72 true)))
 (let ((?x41 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x63 (= (_ bv0 3) ?x41)))
 (let (($x59 (= $x63 true)))
 (let (($x21 (= $x59 true)))
 (let (($x139 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x124 (= $x139 true)))
 (let (($x122 (= $x124 true)))
 (let (($x42 (= $x122 true)))
 (let (($x96 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x90 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x227 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x90) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x90))))
 (let (($x127 (and true $x227)))
 (let (($x39 (and $x227 $x127)))
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x166))))
 (let (($x159 (= (bvand ?x232 (_ bv4294967288 32)) ?x232)))
 (let (($x135 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x54 (and $x135 $x159)))
 (let (($x27 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv4 32))) (bvult ?x110 (bvsub ?x110 (_ bv4 32))))))
 (let (($x105 (and (and (and (and (and $x127 $x27) $x135) $x54) $x39) $x96)))
 (let (($x22 (= true $x105)))
 (let (($x123 (not $x217)))
 (let (($x126 (=> $x123 $x22)))
 (let (($x128 (= $x126 true)))
 (let (($x62 (= $x128 true)))
 (let (($x134 (= $x62 true)))
 (let (($x142 (= $x123 true)))
 (let (($x120 (= $x142 true)))
 (let (($x91 (= $x120 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x26)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x60 $x71)))
 (let (($x69 (and $x108 $x107)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x156 $x69)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x118)))))))
 (let (($x93 (and $x158 $x98)))
 (let (($x119 (= $x93 true)))
 (let (($x65 (= $x119 true)))
 (let (($x100 (= $x65 true)))
 (let (($x140 (and $x100 $x91)))
 (let (($x85 (and $x140 $x134)))
 (let (($x44 (and $x85 $x42)))
 (let (($x83 (and $x44 $x21)))
 (let (($x160 (and $x83 $x130)))
 (let (($x111 (and $x160 $x297)))
 (let (($x313 (and $x111 $x136)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x314 (and $x92 $x313)))
 (let (($x164 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x110 (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x129 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x164)))))))
 (let (($x25 (=> (and $x123 (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x77 $x164)))))))
 (let (($x114 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x228)))
 (let (($x86 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x133 (_ bv1 32))) (or false (or false (and true (or $x28 $x114)))))))
 (let (($x61 (=> (and $x123 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x133 (_ bv1 32)))) (or false (or false (and true (or $x28 $x114)))))))
 (let (($x103 (and $x61 $x25)))
 (let (($x315 (and $x103 $x314)))
 (let (($x319 (=> $x315 $x318)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x204 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x228 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x228) (concat ?x298 (concat ?x51 ?x204)))))
 (let ((?x316 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x102)))
 (let (($x317 (= (_ bv0 32) ?x316)))
 (let (($x318 (= $x317 true)))
 (let ((?x133 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv1 32))) (select input.dst.llvm-mem ?x133))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x133 (_ bv2 32))) ?x253))))
 (let ((?x289 (bvadd ?x251 (_ bv4 32))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x138))))
 (let (($x113 (= (_ bv0 32) ?x147)))
 (let ((?x38 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x293 (bvuge ?x38 (_ bv1 32))))
 (let (($x30 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x294 (= $x30 $x293)))
 (let (($x199 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x174 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x176 (and $x174 $x199)))
 (let (($x303 (=> $x176 $x294)))
 (let (($x291 (= ?x38 (_ bv0 32))))
 (let (($x181 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x302 (= $x181 $x291)))
 (let (($x292 (=> $x176 $x302)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x284))))
 (let (($x278 (= input.spec-%var-l-1.2.1.2.0 ?x301)))
 (let (($x288 (=> $x176 $x278)))
 (let (($x299 (= (_ bv0 32) ?x251)))
 (let ((?x256 (ite $x299 (_ bv0 32) (_ bv1 32))))
 (let (($x270 (bvuge ?x256 (_ bv1 32))))
 (let (($x271 (= $x199 $x270)))
 (let (($x262 (=> $x174 $x271)))
 (let (($x283 (= ?x256 (_ bv0 32))))
 (let (($x230 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x141 (= $x230 $x283)))
 (let (($x300 (=> $x174 $x141)))
 (let (($x254 (= input.spec-%var-l-1.2.0 ?x102)))
 (let (($x245 (=> $x174 $x254)))
 (let (($x217 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x207 (ite $x217 (_ bv0 32) (_ bv1 32))))
 (let (($x202 (bvuge ?x207 (_ bv1 32))))
 (let (($x212 (= $x174 $x202)))
 (let (($x203 (= ?x207 (_ bv0 32))))
 (let (($x186 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x238 (= $x186 $x203)))
 (let (($x185 (and $x176 $x181)))
 (let (($x222 (not $x185)))
 (let (($x242 (and $x176 $x30)))
 (let (($x237 (not $x242)))
 (let (($x184 (= false false)))
 (let (($x188 (and $x174 $x230)))
 (let (($x200 (=> $x188 $x184)))
 (let (($x171 (=> $x186 $x184)))
 (let (($x309 (and (and (and (and (and (and $x171 $x200) $x237) $x222) $x238) $x212) $x245)))
 (let (($x18 (and (and (and (and (and $x309 $x300) $x262) $x288) $x292) $x303)))
 (let (($x136 (= $x18 true)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x191 (concat ?x46 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x219 (concat ?x220 ?x191))))
 (let ((?x82 (bvadd ?x172 (_ bv4 32))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem ?x82))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv2 32))) ?x79))))
 (let (($x276 (= (_ bv0 32) ?x223)))
 (let ((?x268 (ite $x276 (_ bv0 32) (_ bv1 32))))
 (let (($x277 (bvuge ?x268 (_ bv1 32))))
 (let (($x198 (= $x30 $x277)))
 (let (($x57 (=> $x176 $x198)))
 (let (($x241 (= ?x268 (_ bv0 32))))
 (let (($x235 (= $x181 $x241)))
 (let (($x194 (=> $x176 $x235)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x211))))
 (let (($x196 (= input.spec-%var-l-1.2.1.2.0 ?x192)))
 (let (($x261 (=> $x176 $x196)))
 (let (($x187 (= (_ bv0 32) ?x172)))
 (let ((?x239 (ite $x187 (_ bv0 32) (_ bv1 32))))
 (let (($x10 (bvuge ?x239 (_ bv1 32))))
 (let (($x178 (= $x199 $x10)))
 (let (($x6 (=> $x174 $x178)))
 (let (($x94 (= ?x239 (_ bv0 32))))
 (let (($x167 (= $x230 $x94)))
 (let (($x190 (=> $x174 $x167)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x87)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x234)))
 (let (($x45 (= input.spec-%var-l-1.2.0 ?x170)))
 (let (($x209 (=> $x174 $x45)))
 (let (($x226 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x152 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x197 (bvuge ?x152 (_ bv1 32))))
 (let (($x132 (= $x174 $x197)))
 (let (($x295 (and (and (and (and (and (= $x186 (= ?x152 (_ bv0 32))) $x171) $x132) $x209) $x190) $x6)))
 (let (($x274 (and (and (and (and (and (and $x295 $x200) $x261) $x194) $x57) $x237) $x222)))
 (let (($x297 (= $x274 true)))
 (let (($x169 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x72 (= $x169 true)))
 (let (($x130 (= $x72 true)))
 (let ((?x41 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x63 (= (_ bv0 3) ?x41)))
 (let (($x59 (= $x63 true)))
 (let (($x21 (= $x59 true)))
 (let (($x139 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x124 (= $x139 true)))
 (let (($x122 (= $x124 true)))
 (let (($x42 (= $x122 true)))
 (let (($x96 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x90 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x227 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x90) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x90))))
 (let (($x127 (and true $x227)))
 (let (($x39 (and $x227 $x127)))
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x166))))
 (let (($x159 (= (bvand ?x232 (_ bv4294967288 32)) ?x232)))
 (let (($x135 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x54 (and $x135 $x159)))
 (let (($x27 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv4 32))) (bvult ?x110 (bvsub ?x110 (_ bv4 32))))))
 (let (($x105 (and (and (and (and (and $x127 $x27) $x135) $x54) $x39) $x96)))
 (let (($x22 (= true $x105)))
 (let (($x123 (not $x217)))
 (let (($x126 (=> $x123 $x22)))
 (let (($x128 (= $x126 true)))
 (let (($x62 (= $x128 true)))
 (let (($x134 (= $x62 true)))
 (let (($x142 (= $x123 true)))
 (let (($x120 (= $x142 true)))
 (let (($x91 (= $x120 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x26)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x60 $x71)))
 (let (($x69 (and $x108 $x107)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x156 $x69)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x158 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x118)))))))
 (let (($x93 (and $x158 $x98)))
 (let (($x119 (= $x93 true)))
 (let (($x65 (= $x119 true)))
 (let (($x100 (= $x65 true)))
 (let (($x140 (and $x100 $x91)))
 (let (($x85 (and $x140 $x134)))
 (let (($x44 (and $x85 $x42)))
 (let (($x83 (and $x44 $x21)))
 (let (($x160 (and $x83 $x130)))
 (let (($x111 (and $x160 $x297)))
 (let (($x313 (and $x111 $x136)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x314 (and $x92 $x313)))
 (let (($x164 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x110 (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x129 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x77 $x164)))))))
 (let (($x25 (=> (and $x123 (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x77 $x164)))))))
 (let (($x114 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x228)))
 (let (($x86 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x133 (_ bv1 32))) (or false (or false (and true (or $x28 $x114)))))))
 (let (($x61 (=> (and $x123 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x133 (_ bv1 32)))) (or false (or false (and true (or $x28 $x114)))))))
 (let (($x103 (and $x61 $x25)))
 (let (($x315 (and $x103 $x314)))
 (let (($x319 (=> $x315 $x318)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4194307 32) (_ bv64 8)) (_ bv2147483651 32) (_ bv64 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2048 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0000000d)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x00000007
                                #xe5)
                         #x00000010
                         #x52)
                  #x00000005
                  #x88)))
  (store (store (store a!1 #x0000000b #x52) #x00000005 #x88) #x00000007 #xe5)))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x52000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x236 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x114 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x181 (concat (select input.dst.llvm-mem ?x114) (concat ?x261 (concat ?x183 ?x236)))))
 (let ((?x111 ((_ extract 24 0) ?x181)))
 (let ((?x304 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x111)))
 (let (($x305 (= (_ bv0 25) ?x304)))
 (let (($x306 (= $x305 true)))
 (let ((?x116 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x267))))
 (let (($x268 (= (_ bv0 32) ?x276)))
 (let ((?x241 (ite $x268 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x241 (_ bv1 32))))
 (let (($x199 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x277 (= $x199 $x30)))
 (let (($x229 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x198 (=> $x229 $x277)))
 (let (($x235 (= ?x241 (_ bv0 32))))
 (let (($x50 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x194 (= $x50 $x235)))
 (let (($x143 (=> $x229 $x194)))
 (let (($x82 (= input.spec-%var-l-1.2.0 ?x181)))
 (let (($x193 (=> $x229 $x82)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x145 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (bvuge ?x145 (_ bv1 32))))
 (let (($x221 (= $x229 $x177)))
 (let (($x266 (= ?x145 (_ bv0 32))))
 (let (($x213 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x225 (= $x213 $x266)))
 (let (($x197 (= false false)))
 (let (($x132 (=> $x213 $x197)))
 (let (($x244 (and (and (and (and (and $x132 $x225) $x221) $x193) $x143) $x198)))
 (let (($x185 (= $x244 true)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x53 (concat ?x220 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x172 (concat ?x14 ?x53))))
 (let (($x239 (= (_ bv0 32) ?x187)))
 (let ((?x94 (ite $x239 (_ bv0 32) (_ bv1 32))))
 (let (($x10 (bvuge ?x94 (_ bv1 32))))
 (let (($x178 (= $x199 $x10)))
 (let (($x6 (=> $x229 $x178)))
 (let (($x167 (= ?x94 (_ bv0 32))))
 (let (($x190 (= $x50 $x167)))
 (let (($x206 (=> $x229 $x190)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x240)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x234)))
 (let (($x205 (= input.spec-%var-l-1.2.0 ?x209)))
 (let (($x70 (=> $x229 $x205)))
 (let (($x184 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x171 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x260 (bvuge ?x171 (_ bv1 32))))
 (let (($x233 (= $x229 $x260)))
 (let (($x176 (and (and (and (and (and (= $x213 (= ?x171 (_ bv0 32))) $x132) $x233) $x70) $x206) $x6)))
 (let (($x195 (= $x176 true)))
 (let ((?x160 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x55 (= (_ bv0 3) ?x160)))
 (let (($x186 (= $x55 true)))
 (let (($x175 (= $x186 true)))
 (let (($x21 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x83 (= $x21 true)))
 (let (($x169 (= $x83 true)))
 (let (($x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x42 (= $x122 true)))
 (let (($x44 (= $x42 true)))
 (let (($x84 (= $x44 true)))
 (let (($x180 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x121 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x56 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x121) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x121))))
 (let (($x17 (and true $x56)))
 (let (($x157 (and $x56 $x17)))
 (let ((?x33 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x19))))
 (let (($x159 (= (bvand ?x232 (_ bv4294967288 32)) ?x232)))
 (let (($x125 (= (bvand ?x33 (_ bv4294967292 32)) ?x33)))
 (let (($x54 (and $x125 $x159)))
 (let (($x218 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x33 (bvsub ?x33 (_ bv4 32))) (bvult ?x33 (bvsub ?x33 (_ bv4 32))))))
 (let (($x126 (and (and (and (and (and $x17 $x218) $x125) $x54) $x157) $x180)))
 (let (($x128 (= true $x126)))
 (let (($x35 (not $x76)))
 (let (($x62 (=> $x35 $x128)))
 (let (($x134 (= $x62 true)))
 (let (($x85 (= $x134 true)))
 (let (($x80 (= $x85 true)))
 (let (($x91 (= $x35 true)))
 (let (($x140 (= $x91 true)))
 (let (($x150 (= $x140 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x69)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x71 $x26)))
 (let (($x93 (and $x107 $x98)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x165 $x93)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x162)))))))
 (let (($x65 (and $x11 $x119)))
 (let (($x100 (= $x65 true)))
 (let (($x142 (= $x100 true)))
 (let (($x120 (= $x142 true)))
 (let (($x90 (and $x120 $x150)))
 (let (($x139 (and $x90 $x80)))
 (let (($x41 (and $x139 $x84)))
 (let (($x72 (and $x41 $x169)))
 (let (($x226 (and $x72 $x175)))
 (let (($x173 (and $x226 $x195)))
 (let (($x222 (and $x173 $x185)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x274 (and $x20 $x222)))
 (let (($x81 (bvugt ?x33 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd ?x33 (_ bv3 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x106 (=> (bvule ?x33 (bvsub (bvadd ?x33 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x81)))))))
 (let (($x155 (=> (and $x35 (bvule ?x33 (bvsub (bvadd ?x33 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x73 $x81)))))))
 (let (($x68 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x144 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x116 (_ bv1 32))) (or false (or false (and true (or $x154 $x68)))))))
 (let (($x214 (=> (and $x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x116 (_ bv1 32)))) (or false (or false (and true (or $x154 $x68)))))))
 (let (($x95 (and $x214 $x155)))
 (let (($x297 (and $x95 $x274)))
 (let (($x207 (=> $x297 $x306)))
 (not $x207))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x236 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x114 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x181 (concat (select input.dst.llvm-mem ?x114) (concat ?x261 (concat ?x183 ?x236)))))
 (let ((?x111 ((_ extract 24 0) ?x181)))
 (let ((?x304 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x111)))
 (let (($x305 (= (_ bv0 25) ?x304)))
 (let (($x306 (= $x305 true)))
 (let ((?x116 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x267))))
 (let (($x268 (= (_ bv0 32) ?x276)))
 (let ((?x241 (ite $x268 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x241 (_ bv1 32))))
 (let (($x199 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x277 (= $x199 $x30)))
 (let (($x229 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x198 (=> $x229 $x277)))
 (let (($x235 (= ?x241 (_ bv0 32))))
 (let (($x50 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x194 (= $x50 $x235)))
 (let (($x143 (=> $x229 $x194)))
 (let (($x82 (= input.spec-%var-l-1.2.0 ?x181)))
 (let (($x193 (=> $x229 $x82)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x145 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (bvuge ?x145 (_ bv1 32))))
 (let (($x221 (= $x229 $x177)))
 (let (($x266 (= ?x145 (_ bv0 32))))
 (let (($x213 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x225 (= $x213 $x266)))
 (let (($x197 (= false false)))
 (let (($x132 (=> $x213 $x197)))
 (let (($x244 (and (and (and (and (and $x132 $x225) $x221) $x193) $x143) $x198)))
 (let (($x185 (= $x244 true)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x53 (concat ?x220 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x172 (concat ?x14 ?x53))))
 (let (($x239 (= (_ bv0 32) ?x187)))
 (let ((?x94 (ite $x239 (_ bv0 32) (_ bv1 32))))
 (let (($x10 (bvuge ?x94 (_ bv1 32))))
 (let (($x178 (= $x199 $x10)))
 (let (($x6 (=> $x229 $x178)))
 (let (($x167 (= ?x94 (_ bv0 32))))
 (let (($x190 (= $x50 $x167)))
 (let (($x206 (=> $x229 $x190)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x240)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x234)))
 (let (($x205 (= input.spec-%var-l-1.2.0 ?x209)))
 (let (($x70 (=> $x229 $x205)))
 (let (($x184 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x171 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x260 (bvuge ?x171 (_ bv1 32))))
 (let (($x233 (= $x229 $x260)))
 (let (($x176 (and (and (and (and (and (= $x213 (= ?x171 (_ bv0 32))) $x132) $x233) $x70) $x206) $x6)))
 (let (($x195 (= $x176 true)))
 (let ((?x160 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x55 (= (_ bv0 3) ?x160)))
 (let (($x186 (= $x55 true)))
 (let (($x175 (= $x186 true)))
 (let (($x21 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x83 (= $x21 true)))
 (let (($x169 (= $x83 true)))
 (let (($x122 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x42 (= $x122 true)))
 (let (($x44 (= $x42 true)))
 (let (($x84 (= $x44 true)))
 (let (($x180 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x121 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x56 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x121) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x121))))
 (let (($x17 (and true $x56)))
 (let (($x157 (and $x56 $x17)))
 (let ((?x33 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x19))))
 (let (($x159 (= (bvand ?x232 (_ bv4294967288 32)) ?x232)))
 (let (($x125 (= (bvand ?x33 (_ bv4294967292 32)) ?x33)))
 (let (($x54 (and $x125 $x159)))
 (let (($x218 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x33 (bvsub ?x33 (_ bv4 32))) (bvult ?x33 (bvsub ?x33 (_ bv4 32))))))
 (let (($x126 (and (and (and (and (and $x17 $x218) $x125) $x54) $x157) $x180)))
 (let (($x128 (= true $x126)))
 (let (($x35 (not $x76)))
 (let (($x62 (=> $x35 $x128)))
 (let (($x134 (= $x62 true)))
 (let (($x85 (= $x134 true)))
 (let (($x80 (= $x85 true)))
 (let (($x91 (= $x35 true)))
 (let (($x140 (= $x91 true)))
 (let (($x150 (= $x140 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x69)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x71 $x26)))
 (let (($x93 (and $x107 $x98)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x165 $x93)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x162)))))))
 (let (($x65 (and $x11 $x119)))
 (let (($x100 (= $x65 true)))
 (let (($x142 (= $x100 true)))
 (let (($x120 (= $x142 true)))
 (let (($x90 (and $x120 $x150)))
 (let (($x139 (and $x90 $x80)))
 (let (($x41 (and $x139 $x84)))
 (let (($x72 (and $x41 $x169)))
 (let (($x226 (and $x72 $x175)))
 (let (($x173 (and $x226 $x195)))
 (let (($x222 (and $x173 $x185)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x274 (and $x20 $x222)))
 (let (($x81 (bvugt ?x33 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd ?x33 (_ bv3 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x106 (=> (bvule ?x33 (bvsub (bvadd ?x33 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x81)))))))
 (let (($x155 (=> (and $x35 (bvule ?x33 (bvsub (bvadd ?x33 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x73 $x81)))))))
 (let (($x68 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x144 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x116 (_ bv1 32))) (or false (or false (and true (or $x154 $x68)))))))
 (let (($x214 (=> (and $x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x116 (_ bv1 32)))) (or false (or false (and true (or $x154 $x68)))))))
 (let (($x95 (and $x214 $x155)))
 (let (($x297 (and $x95 $x274)))
 (let (($x207 (=> $x297 $x306)))
 (not $x207))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 #b0000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000001000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv131075 32) (_ bv1 8)) (_ bv2147483651 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25) (_ bv0 25))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv16777216 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv131072 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x1c6f1119)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x20))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25)
    #b0000000000000000000000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x151 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x78 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x258 (concat (select input.dst.llvm-mem ?x78) (concat ?x182 (concat ?x82 ?x151)))))
 (let ((?x202 ((_ extract 24 0) ?x258)))
 (let ((?x212 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x202)))
 (let (($x308 (= (_ bv0 25) ?x212)))
 (let (($x248 (= $x308 true)))
 (let ((?x228 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x276))))
 (let (($x30 (= (_ bv0 32) ?x237)))
 (let ((?x277 (ite $x30 (_ bv0 32) (_ bv1 32))))
 (let (($x222 (bvuge ?x277 (_ bv1 32))))
 (let (($x273 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x274 (= $x273 $x222)))
 (let (($x233 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x297 (=> $x233 $x274)))
 (let (($x198 (= ?x277 (_ bv0 32))))
 (let (($x50 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x244 (= $x50 $x198)))
 (let (($x185 (=> $x233 $x244)))
 (let (($x31 (= input.spec-%var-l-1.2.0 ?x258)))
 (let (($x5 (=> $x233 $x31)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x261 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x236 (bvuge ?x261 (_ bv1 32))))
 (let (($x192 (= $x233 $x236)))
 (let (($x211 (= ?x261 (_ bv0 32))))
 (let (($x171 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x183 (= $x171 $x211)))
 (let (($x195 (and $x233 $x273)))
 (let (($x173 (not $x195)))
 (let (($x305 (and (and (and (=> $x171 (= false false)) (not (and $x233 $x50))) $x173) $x183)))
 (let (($x133 (and (and (and (and $x305 $x192) $x5) $x185) $x297)))
 (let (($x131 (= $x133 true)))
 (let (($x6 (and $x233 $x50)))
 (let (($x176 (not $x6)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x14 (concat ?x46 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x191 (concat ?x220 ?x14))))
 (let (($x239 (= (_ bv0 32) ?x187)))
 (let ((?x94 (ite $x239 (_ bv0 32) (_ bv1 32))))
 (let (($x199 (bvuge ?x94 (_ bv1 32))))
 (let (($x10 (= $x273 $x199)))
 (let (($x178 (=> $x233 $x10)))
 (let (($x167 (= ?x94 (_ bv0 32))))
 (let (($x190 (= $x50 $x167)))
 (let (($x206 (=> $x233 $x190)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x9)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x240)))
 (let (($x70 (= input.spec-%var-l-1.2.0 ?x205)))
 (let (($x200 (=> $x233 $x70)))
 (let (($x174 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x197 (ite $x174 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x197 (_ bv1 32))))
 (let (($x189 (= $x233 $x188)))
 (let (($x266 (and (and (= $x171 (= ?x197 (_ bv0 32))) (=> $x171 (= false false))) $x189)))
 (let (($x296 (and (and (and (and (and $x266 $x200) $x206) $x178) $x176) $x173)))
 (let (($x285 (= $x296 true)))
 (let ((?x175 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x226 (= (_ bv0 3) ?x175)))
 (let (($x152 (= $x226 true)))
 (let (($x213 (= $x152 true)))
 (let (($x72 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x130 (= $x72 true)))
 (let (($x160 (= $x130 true)))
 (let (($x84 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x41 (= $x84 true)))
 (let (($x63 (= $x41 true)))
 (let (($x59 (= $x63 true)))
 (let (($x39 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x127 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x58 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x127) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x127))))
 (let (($x27 (and true $x58)))
 (let (($x157 (and $x58 $x27)))
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x16))))
 (let (($x54 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x36 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x105 (and $x36 $x54)))
 (let (($x135 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv4 32))) (bvult ?x110 (bvsub ?x110 (_ bv4 32))))))
 (let (($x134 (and (and (and (and (and $x27 $x135) $x36) $x105) $x157) $x39)))
 (let (($x85 (= true $x134)))
 (let (($x35 (not $x76)))
 (let (($x80 (=> $x35 $x85)))
 (let (($x139 (= $x80 true)))
 (let (($x124 (= $x139 true)))
 (let (($x122 (= $x124 true)))
 (let (($x90 (= $x35 true)))
 (let (($x48 (= $x90 true)))
 (let (($x121 (= $x48 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x119)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x107 $x98)))
 (let (($x100 (and $x93 $x65)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x99 $x100)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x156)))))))
 (let (($x120 (and $x26 $x142)))
 (let (($x91 (= $x120 true)))
 (let (($x140 (= $x91 true)))
 (let (($x150 (= $x140 true)))
 (let (($x227 (and $x150 $x121)))
 (let (($x42 (and $x227 $x122)))
 (let (($x21 (and $x42 $x59)))
 (let (($x55 (and $x21 $x160)))
 (let (($x40 (and $x55 $x213)))
 (let (($x196 (and $x40 $x285)))
 (let (($x75 (and $x196 $x131)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x238 (and $x118 $x75)))
 (let (($x129 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd ?x110 (_ bv3 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x20 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x161 $x129)))))))
 (let (($x103 (=> (and $x35 (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x161 $x129)))))))
 (let (($x86 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x77 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x228 (_ bv1 32))) (or false (or false (and true (or $x12 $x86)))))))
 (let (($x224 (=> (and $x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x228 (_ bv1 32)))) (or false (or false (and true (or $x12 $x86)))))))
 (let (($x164 (and $x224 $x103)))
 (let (($x307 (and $x164 $x238)))
 (let (($x201 (=> $x307 $x248)))
 (not $x201))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x151 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x78 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x258 (concat (select input.dst.llvm-mem ?x78) (concat ?x182 (concat ?x82 ?x151)))))
 (let ((?x202 ((_ extract 24 0) ?x258)))
 (let ((?x212 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x202)))
 (let (($x308 (= (_ bv0 25) ?x212)))
 (let (($x248 (= $x308 true)))
 (let ((?x228 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x276))))
 (let (($x30 (= (_ bv0 32) ?x237)))
 (let ((?x277 (ite $x30 (_ bv0 32) (_ bv1 32))))
 (let (($x222 (bvuge ?x277 (_ bv1 32))))
 (let (($x273 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x274 (= $x273 $x222)))
 (let (($x233 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x297 (=> $x233 $x274)))
 (let (($x198 (= ?x277 (_ bv0 32))))
 (let (($x50 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x244 (= $x50 $x198)))
 (let (($x185 (=> $x233 $x244)))
 (let (($x31 (= input.spec-%var-l-1.2.0 ?x258)))
 (let (($x5 (=> $x233 $x31)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x261 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x236 (bvuge ?x261 (_ bv1 32))))
 (let (($x192 (= $x233 $x236)))
 (let (($x211 (= ?x261 (_ bv0 32))))
 (let (($x171 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x183 (= $x171 $x211)))
 (let (($x195 (and $x233 $x273)))
 (let (($x173 (not $x195)))
 (let (($x305 (and (and (and (=> $x171 (= false false)) (not (and $x233 $x50))) $x173) $x183)))
 (let (($x133 (and (and (and (and $x305 $x192) $x5) $x185) $x297)))
 (let (($x131 (= $x133 true)))
 (let (($x6 (and $x233 $x50)))
 (let (($x176 (not $x6)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x14 (concat ?x46 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x191 (concat ?x220 ?x14))))
 (let (($x239 (= (_ bv0 32) ?x187)))
 (let ((?x94 (ite $x239 (_ bv0 32) (_ bv1 32))))
 (let (($x199 (bvuge ?x94 (_ bv1 32))))
 (let (($x10 (= $x273 $x199)))
 (let (($x178 (=> $x233 $x10)))
 (let (($x167 (= ?x94 (_ bv0 32))))
 (let (($x190 (= $x50 $x167)))
 (let (($x206 (=> $x233 $x190)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x9)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x240)))
 (let (($x70 (= input.spec-%var-l-1.2.0 ?x205)))
 (let (($x200 (=> $x233 $x70)))
 (let (($x174 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x197 (ite $x174 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x197 (_ bv1 32))))
 (let (($x189 (= $x233 $x188)))
 (let (($x266 (and (and (= $x171 (= ?x197 (_ bv0 32))) (=> $x171 (= false false))) $x189)))
 (let (($x296 (and (and (and (and (and $x266 $x200) $x206) $x178) $x176) $x173)))
 (let (($x285 (= $x296 true)))
 (let ((?x175 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x226 (= (_ bv0 3) ?x175)))
 (let (($x152 (= $x226 true)))
 (let (($x213 (= $x152 true)))
 (let (($x72 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x130 (= $x72 true)))
 (let (($x160 (= $x130 true)))
 (let (($x84 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x41 (= $x84 true)))
 (let (($x63 (= $x41 true)))
 (let (($x59 (= $x63 true)))
 (let (($x39 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x127 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x58 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x127) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x127))))
 (let (($x27 (and true $x58)))
 (let (($x157 (and $x58 $x27)))
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x16))))
 (let (($x54 (= (bvand ?x117 (_ bv4294967288 32)) ?x117)))
 (let (($x36 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x105 (and $x36 $x54)))
 (let (($x135 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv4 32))) (bvult ?x110 (bvsub ?x110 (_ bv4 32))))))
 (let (($x134 (and (and (and (and (and $x27 $x135) $x36) $x105) $x157) $x39)))
 (let (($x85 (= true $x134)))
 (let (($x35 (not $x76)))
 (let (($x80 (=> $x35 $x85)))
 (let (($x139 (= $x80 true)))
 (let (($x124 (= $x139 true)))
 (let (($x122 (= $x124 true)))
 (let (($x90 (= $x35 true)))
 (let (($x48 (= $x90 true)))
 (let (($x121 (= $x48 true)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x119)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x69)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x107 $x98)))
 (let (($x100 (and $x93 $x65)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x99 $x100)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x156)))))))
 (let (($x120 (and $x26 $x142)))
 (let (($x91 (= $x120 true)))
 (let (($x140 (= $x91 true)))
 (let (($x150 (= $x140 true)))
 (let (($x227 (and $x150 $x121)))
 (let (($x42 (and $x227 $x122)))
 (let (($x21 (and $x42 $x59)))
 (let (($x55 (and $x21 $x160)))
 (let (($x40 (and $x55 $x213)))
 (let (($x196 (and $x40 $x285)))
 (let (($x75 (and $x196 $x131)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x238 (and $x118 $x75)))
 (let (($x129 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd ?x110 (_ bv3 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x20 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x161 $x129)))))))
 (let (($x103 (=> (and $x35 (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x161 $x129)))))))
 (let (($x86 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x77 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x228 (_ bv1 32))) (or false (or false (and true (or $x12 $x86)))))))
 (let (($x224 (=> (and $x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x228 (_ bv1 32)))) (or false (or false (and true (or $x12 $x86)))))))
 (let (($x164 (and $x224 $x103)))
 (let (($x307 (and $x164 $x238)))
 (let (($x201 (=> $x307 $x248)))
 (not $x201))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x61 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x217 (concat (select input.dst.llvm-mem ?x61) (concat ?x201 (concat ?x212 ?x307)))))
 (let ((?x136 ((_ extract 24 0) ?x217)))
 (let ((?x313 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x136)))
 (let (($x314 (= (_ bv0 25) ?x313)))
 (let (($x315 (= $x314 true)))
 (let ((?x154 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem ?x154))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv2 32))) ?x255))))
 (let ((?x97 (bvadd ?x250 (_ bv4 32))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem ?x97))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv2 32))) ?x263))))
 (let (($x289 (= (_ bv0 32) ?x312)))
 (let ((?x290 (ite $x289 (_ bv0 32) (_ bv1 32))))
 (let (($x286 (bvuge ?x290 (_ bv1 32))))
 (let (($x241 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x280 (= $x241 $x286)))
 (let (($x57 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x189 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x6 (and $x189 $x57)))
 (let (($x281 (=> $x6 $x280)))
 (let (($x149 (= ?x290 (_ bv0 32))))
 (let (($x192 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x192 $x149)))
 (let (($x34 (=> $x6 $x279)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x141))))
 (let (($x272 (= input.spec-%var-l-1.2.1.2.0 ?x311)))
 (let (($x275 (=> $x6 $x272)))
 (let (($x247 (= (_ bv0 32) ?x250)))
 (let ((?x249 (ite $x247 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (bvuge ?x249 (_ bv1 32))))
 (let (($x252 (= $x57 $x253)))
 (let (($x251 (=> $x189 $x252)))
 (let (($x210 (= ?x249 (_ bv0 32))))
 (let (($x50 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x246 (= $x50 $x210)))
 (let (($x264 (=> $x189 $x246)))
 (let (($x60 (= input.spec-%var-l-1.2.0 ?x217)))
 (let (($x24 (=> $x189 $x60)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x297 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x297 (_ bv1 32))))
 (let (($x238 (= $x189 $x75)))
 (let (($x133 (= ?x297 (_ bv0 32))))
 (let (($x197 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x131 (= $x197 $x133)))
 (let (($x233 (= false false)))
 (let (($x178 (and $x189 $x50)))
 (let (($x177 (=> $x178 $x233)))
 (let (($x188 (=> $x197 $x233)))
 (let (($x291 (and (and (and (and (and (and $x188 $x177) $x131) $x238) $x24) $x264) $x251)))
 (let (($x66 (and (and (and $x291 $x275) $x34) $x281)))
 (let (($x293 (= $x66 true)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x220 (concat ?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x219 (concat ?x46 ?x220))))
 (let ((?x306 (bvadd ?x187 (_ bv4 32))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x181))))
 (let (($x5 (= (_ bv0 32) ?x31)))
 (let ((?x207 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x267 (bvuge ?x207 (_ bv1 32))))
 (let (($x79 (= $x241 $x267)))
 (let (($x208 (=> $x6 $x79)))
 (let (($x194 (= ?x207 (_ bv0 32))))
 (let (($x143 (= $x192 $x194)))
 (let (($x268 (=> $x6 $x143)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x296))))
 (let (($x183 (= input.spec-%var-l-1.2.1.2.0 ?x211)))
 (let (($x305 (=> $x6 $x183)))
 (let (($x239 (= (_ bv0 32) ?x187)))
 (let ((?x94 (ite $x239 (_ bv0 32) (_ bv1 32))))
 (let (($x273 (bvuge ?x94 (_ bv1 32))))
 (let (($x199 (= $x57 $x273)))
 (let (($x10 (=> $x189 $x199)))
 (let (($x167 (= ?x94 (_ bv0 32))))
 (let (($x190 (= $x50 $x167)))
 (let (($x206 (=> $x189 $x190)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x104)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x9)))
 (let (($x200 (= input.spec-%var-l-1.2.0 ?x70)))
 (let (($x225 (=> $x189 $x200)))
 (let (($x295 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x229 (ite $x295 (_ bv0 32) (_ bv1 32))))
 (let (($x266 (bvuge ?x229 (_ bv1 32))))
 (let (($x170 (= $x189 $x266)))
 (let (($x277 (and (and (and (and (and (= $x197 (= ?x229 (_ bv0 32))) $x188) $x170) $x225) $x206) $x10)))
 (let (($x203 (and (and (and (and $x277 $x177) $x305) $x268) $x208)))
 (let (($x222 (= $x203 true)))
 (let ((?x213 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x40 (= (_ bv0 3) ?x213)))
 (let (($x184 (= $x40 true)))
 (let (($x171 (= $x184 true)))
 (let (($x55 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x186 (= $x55 true)))
 (let (($x175 (= $x186 true)))
 (let (($x59 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x21 (= $x59 true)))
 (let (($x83 (= $x21 true)))
 (let (($x169 (= $x83 true)))
 (let (($x22 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x163 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x67) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x67))))
 (let (($x109 (and true $x163)))
 (let (($x157 (and $x163 $x109)))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x216))))
 (let (($x105 (= (bvand ?x13 (_ bv4294967288 32)) ?x13)))
 (let (($x148 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x128 (and $x148 $x105)))
 (let (($x96 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x139 (and (and (and (and (and $x109 $x96) $x148) $x128) $x157) $x22)))
 (let (($x124 (= true $x139)))
 (let (($x35 (not $x76)))
 (let (($x122 (=> $x35 $x124)))
 (let (($x42 (= $x122 true)))
 (let (($x44 (= $x42 true)))
 (let (($x84 (= $x44 true)))
 (let (($x227 (= $x35 true)))
 (let (($x56 (= $x227 true)))
 (let (($x127 (= $x56 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x142)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x93 $x65)))
 (let (($x91 (and $x100 $x120)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x23 $x91)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x165 $x71)))))))
 (let (($x150 (and $x98 $x140)))
 (let (($x90 (= $x150 true)))
 (let (($x48 (= $x90 true)))
 (let (($x121 (= $x48 true)))
 (let (($x17 (and $x121 $x127)))
 (let (($x41 (and $x17 $x84)))
 (let (($x72 (and $x41 $x169)))
 (let (($x226 (and $x72 $x175)))
 (let (($x179 (and $x226 $x171)))
 (let (($x274 (and $x179 $x222)))
 (let (($x294 (and $x274 $x293)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x303 (and $x29 $x294)))
 (let (($x155 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd ?x8 (_ bv3 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x118 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x155)))))))
 (let (($x92 (=> (and $x35 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x106 $x155)))))))
 (let (($x214 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x81 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x154 (_ bv1 32))) (or false (or false (and true (or $x144 $x214)))))))
 (let (($x114 (=> (and $x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x154 (_ bv1 32)))) (or false (or false (and true (or $x144 $x214)))))))
 (let (($x89 (and $x114 $x92)))
 (let (($x18 (and $x89 $x303)))
 (let (($x316 (=> $x18 $x315)))
 (not $x316)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x61 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x217 (concat (select input.dst.llvm-mem ?x61) (concat ?x201 (concat ?x212 ?x307)))))
 (let ((?x136 ((_ extract 24 0) ?x217)))
 (let ((?x313 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x136)))
 (let (($x314 (= (_ bv0 25) ?x313)))
 (let (($x315 (= $x314 true)))
 (let ((?x154 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem ?x154))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv2 32))) ?x255))))
 (let ((?x97 (bvadd ?x250 (_ bv4 32))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem ?x97))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x97 (_ bv2 32))) ?x263))))
 (let (($x289 (= (_ bv0 32) ?x312)))
 (let ((?x290 (ite $x289 (_ bv0 32) (_ bv1 32))))
 (let (($x286 (bvuge ?x290 (_ bv1 32))))
 (let (($x241 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x280 (= $x241 $x286)))
 (let (($x57 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x189 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x6 (and $x189 $x57)))
 (let (($x281 (=> $x6 $x280)))
 (let (($x149 (= ?x290 (_ bv0 32))))
 (let (($x192 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x279 (= $x192 $x149)))
 (let (($x34 (=> $x6 $x279)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x141))))
 (let (($x272 (= input.spec-%var-l-1.2.1.2.0 ?x311)))
 (let (($x275 (=> $x6 $x272)))
 (let (($x247 (= (_ bv0 32) ?x250)))
 (let ((?x249 (ite $x247 (_ bv0 32) (_ bv1 32))))
 (let (($x253 (bvuge ?x249 (_ bv1 32))))
 (let (($x252 (= $x57 $x253)))
 (let (($x251 (=> $x189 $x252)))
 (let (($x210 (= ?x249 (_ bv0 32))))
 (let (($x50 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x246 (= $x50 $x210)))
 (let (($x264 (=> $x189 $x246)))
 (let (($x60 (= input.spec-%var-l-1.2.0 ?x217)))
 (let (($x24 (=> $x189 $x60)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x297 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x297 (_ bv1 32))))
 (let (($x238 (= $x189 $x75)))
 (let (($x133 (= ?x297 (_ bv0 32))))
 (let (($x197 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x131 (= $x197 $x133)))
 (let (($x233 (= false false)))
 (let (($x178 (and $x189 $x50)))
 (let (($x177 (=> $x178 $x233)))
 (let (($x188 (=> $x197 $x233)))
 (let (($x291 (and (and (and (and (and (and $x188 $x177) $x131) $x238) $x24) $x264) $x251)))
 (let (($x66 (and (and (and $x291 $x275) $x34) $x281)))
 (let (($x293 (= $x66 true)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x220 (concat ?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x219 (concat ?x46 ?x220))))
 (let ((?x306 (bvadd ?x187 (_ bv4 32))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x181))))
 (let (($x5 (= (_ bv0 32) ?x31)))
 (let ((?x207 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x267 (bvuge ?x207 (_ bv1 32))))
 (let (($x79 (= $x241 $x267)))
 (let (($x208 (=> $x6 $x79)))
 (let (($x194 (= ?x207 (_ bv0 32))))
 (let (($x143 (= $x192 $x194)))
 (let (($x268 (=> $x6 $x143)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x296))))
 (let (($x183 (= input.spec-%var-l-1.2.1.2.0 ?x211)))
 (let (($x305 (=> $x6 $x183)))
 (let (($x239 (= (_ bv0 32) ?x187)))
 (let ((?x94 (ite $x239 (_ bv0 32) (_ bv1 32))))
 (let (($x273 (bvuge ?x94 (_ bv1 32))))
 (let (($x199 (= $x57 $x273)))
 (let (($x10 (=> $x189 $x199)))
 (let (($x167 (= ?x94 (_ bv0 32))))
 (let (($x190 (= $x50 $x167)))
 (let (($x206 (=> $x189 $x190)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x104)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x9)))
 (let (($x200 (= input.spec-%var-l-1.2.0 ?x70)))
 (let (($x225 (=> $x189 $x200)))
 (let (($x295 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x229 (ite $x295 (_ bv0 32) (_ bv1 32))))
 (let (($x266 (bvuge ?x229 (_ bv1 32))))
 (let (($x170 (= $x189 $x266)))
 (let (($x277 (and (and (and (and (and (= $x197 (= ?x229 (_ bv0 32))) $x188) $x170) $x225) $x206) $x10)))
 (let (($x203 (and (and (and (and $x277 $x177) $x305) $x268) $x208)))
 (let (($x222 (= $x203 true)))
 (let ((?x213 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x40 (= (_ bv0 3) ?x213)))
 (let (($x184 (= $x40 true)))
 (let (($x171 (= $x184 true)))
 (let (($x55 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x186 (= $x55 true)))
 (let (($x175 (= $x186 true)))
 (let (($x59 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x21 (= $x59 true)))
 (let (($x83 (= $x21 true)))
 (let (($x169 (= $x83 true)))
 (let (($x22 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x163 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x67) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x67))))
 (let (($x109 (and true $x163)))
 (let (($x157 (and $x163 $x109)))
 (let ((?x8 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x216))))
 (let (($x105 (= (bvand ?x13 (_ bv4294967288 32)) ?x13)))
 (let (($x148 (= (bvand ?x8 (_ bv4294967292 32)) ?x8)))
 (let (($x128 (and $x148 $x105)))
 (let (($x96 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x8 (bvsub ?x8 (_ bv4 32))) (bvult ?x8 (bvsub ?x8 (_ bv4 32))))))
 (let (($x139 (and (and (and (and (and $x109 $x96) $x148) $x128) $x157) $x22)))
 (let (($x124 (= true $x139)))
 (let (($x35 (not $x76)))
 (let (($x122 (=> $x35 $x124)))
 (let (($x42 (= $x122 true)))
 (let (($x44 (= $x42 true)))
 (let (($x84 (= $x44 true)))
 (let (($x227 (= $x35 true)))
 (let (($x56 (= $x227 true)))
 (let (($x127 (= $x56 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x142)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x119)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x93 $x65)))
 (let (($x91 (and $x100 $x120)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x23 $x91)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x165 $x71)))))))
 (let (($x150 (and $x98 $x140)))
 (let (($x90 (= $x150 true)))
 (let (($x48 (= $x90 true)))
 (let (($x121 (= $x48 true)))
 (let (($x17 (and $x121 $x127)))
 (let (($x41 (and $x17 $x84)))
 (let (($x72 (and $x41 $x169)))
 (let (($x226 (and $x72 $x175)))
 (let (($x179 (and $x226 $x171)))
 (let (($x274 (and $x179 $x222)))
 (let (($x294 (and $x274 $x293)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x303 (and $x29 $x294)))
 (let (($x155 (bvugt ?x8 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd ?x8 (_ bv3 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x118 (=> (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x155)))))))
 (let (($x92 (=> (and $x35 (bvule ?x8 (bvsub (bvadd ?x8 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x106 $x155)))))))
 (let (($x214 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x81 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x154 (_ bv1 32))) (or false (or false (and true (or $x144 $x214)))))))
 (let (($x114 (=> (and $x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x154 (_ bv1 32)))) (or false (or false (and true (or $x144 $x214)))))))
 (let (($x89 (and $x114 $x92)))
 (let (($x18 (and $x89 $x303)))
 (let (($x316 (=> $x18 $x315)))
 (not $x316)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 #b0000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000001000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2 32) (_ bv1 8)) (_ bv9 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25) (_ bv0 25))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv256 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv19 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xb570f0fd)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xf0f0f0f0)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xb570f0f8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xe7)
                                #xf0e7f0f7
                                #x30)
                         #xb570f102
                         #xf0)
                  #xb570f0f3
                  #xf0)))
(let ((a!2 (store (store (store (store a!1 #xb570f100 #xf0) #xf0e7f0f5 #xf0)
                         #xb570f0fc
                         #xf0)
                  #xb570f0ff
                  #xf0)))
(let ((a!3 (store (store (store (store a!2 #xf0e7f0f3 #xf0) #xb570f0fd #xf0)
                         #xb570f0f4
                         #xf0)
                  #xb570f0fb
                  #xf0)))
(let ((a!4 (store (store (store (store a!3 #xb570f101 #xf0) #xb570f0f5 #xf0)
                         #xb570f104
                         #xb5)
                  #xb570f0f6
                  #x67)))
(let ((a!5 (store (store (store (store a!4 #xb570f0fd #xf0) #xb570f103 #x70)
                         #xb570f0fa
                         #xf0)
                  #xb570f0f2
                  #xf0)))
(let ((a!6 (store (store (store (store a!5 #xb570f0f1 #xf0) #xb570f0f7 #x30)
                         #xf0e7f0f6
                         #xf0)
                  #xf0e7f0f0
                  #xf0)))
(let ((a!7 (store (store (store (store a!6 #xb570f0f8 #xf0) #xf0e7f0f2 #xf0)
                         #xf0e7f0f1
                         #xf0)
                  #xb570f0f0
                  #xf0)))
  (store (store a!7 #xf0e7f0f4 #xf0) #xb570f0ff #xf0)))))))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25)
    #b0000000000000000000000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xf0f0e7f0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x308 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x33 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x33) (concat ?x113 (concat ?x217 ?x308)))))
 (let ((?x320 ((_ extract 24 0) ?x102)))
 (let ((?x49 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x320)))
 (let (($x137 (= (_ bv0 25) ?x49)))
 (let (($x32 (= $x137 true)))
 (let ((?x12 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv1 32))) (select input.dst.llvm-mem ?x12))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv2 32))) ?x245))))
 (let ((?x288 (bvadd ?x264 (_ bv4 32))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x265))))
 (let (($x149 (= (_ bv0 32) ?x290)))
 (let ((?x279 (ite $x149 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x279 (_ bv1 32))))
 (let (($x207 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x281 (= $x207 $x280)))
 (let (($x30 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x170 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x178 (and $x170 $x30)))
 (let (($x66 (=> $x178 $x281)))
 (let (($x34 (= ?x279 (_ bv0 32))))
 (let (($x183 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x292 (= $x183 $x34)))
 (let (($x286 (=> $x178 $x292)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem ?x264))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv2 32))) ?x299))))
 (let (($x97 (= input.spec-%var-l-1.2.1.2.0 ?x302)))
 (let (($x278 (=> $x178 $x97)))
 (let (($x38 (= (_ bv0 32) ?x264)))
 (let ((?x253 (ite $x38 (_ bv0 32) (_ bv1 32))))
 (let (($x271 (bvuge ?x253 (_ bv1 32))))
 (let (($x262 (= $x30 $x271)))
 (let (($x300 (=> $x170 $x262)))
 (let (($x252 (= ?x253 (_ bv0 32))))
 (let (($x50 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x251 (= $x50 $x252)))
 (let (($x291 (=> $x170 $x251)))
 (let (($x254 (= input.spec-%var-l-1.2.0 ?x102)))
 (let (($x204 (=> $x170 $x254)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x248 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x248 (_ bv1 32))))
 (let (($x307 (= $x170 $x212)))
 (let (($x201 (= ?x248 (_ bv0 32))))
 (let (($x229 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x202 (= $x229 $x201)))
 (let (($x267 (and $x178 $x183)))
 (let (($x79 (not $x267)))
 (let (($x185 (and $x178 $x207)))
 (let (($x241 (not $x185)))
 (let (($x189 (= false false)))
 (let (($x10 (and $x170 $x50)))
 (let (($x277 (=> $x10 $x189)))
 (let (($x266 (=> $x229 $x189)))
 (let (($x313 (and (and (and (and (and (and $x266 $x277) $x241) $x79) $x202) $x307) $x204)))
 (let (($x215 (and (and (and (and (and $x313 $x291) $x300) $x278) $x286) $x66)))
 (let (($x116 (= $x215 true)))
 (let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x46 (concat ?x172 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x64 (concat ?x146 ?x46))))
 (let ((?x305 (bvadd ?x187 (_ bv4 32))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem ?x305))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv2 32))) ?x306))))
 (let (($x257 (= (_ bv0 32) ?x182)))
 (let ((?x181 (ite $x257 (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge ?x181 (_ bv1 32))))
 (let (($x143 (= $x207 $x194)))
 (let (($x268 (=> $x178 $x143)))
 (let (($x193 (= ?x181 (_ bv0 32))))
 (let (($x31 (= $x183 $x193)))
 (let (($x5 (=> $x178 $x31)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x304))))
 (let (($x296 (= input.spec-%var-l-1.2.1.2.0 ?x221)))
 (let (($x111 (=> $x178 $x296)))
 (let (($x239 (= (_ bv0 32) ?x187)))
 (let ((?x94 (ite $x239 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (bvuge ?x94 (_ bv1 32))))
 (let (($x273 (= $x30 $x57)))
 (let (($x199 (=> $x170 $x273)))
 (let (($x167 (= ?x94 (_ bv0 32))))
 (let (($x190 (= $x50 $x167)))
 (let (($x206 (=> $x170 $x190)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x153)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x104)))
 (let (($x225 (= input.spec-%var-l-1.2.0 ?x200)))
 (let (($x237 (=> $x170 $x225)))
 (let (($x145 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x233 (ite $x145 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x233 (_ bv1 32))))
 (let (($x234 (= $x170 $x235)))
 (let (($x138 (and (and (and (and (and (= $x229 (= ?x233 (_ bv0 32))) $x266) $x234) $x237) $x206) $x199)))
 (let (($x238 (and (and (and (and (and (and $x138 $x277) $x111) $x5) $x268) $x241) $x79)))
 (let (($x147 (= $x238 true)))
 (let ((?x171 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x179 (= (_ bv0 3) ?x171)))
 (let (($x174 (= $x179 true)))
 (let (($x197 (= $x174 true)))
 (let (($x226 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x152 (= $x226 true)))
 (let (($x213 (= $x152 true)))
 (let (($x169 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x169 true)))
 (let (($x130 (= $x72 true)))
 (let (($x160 (= $x130 true)))
 (let (($x62 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x218 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x231 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x218) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x218))))
 (let (($x180 (and true $x231)))
 (let (($x157 (and $x231 $x180)))
 (let ((?x73 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x101))))
 (let (($x128 (= (bvand ?x159 (_ bv4294967288 32)) ?x159)))
 (let (($x232 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x85 (and $x232 $x128)))
 (let (($x126 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv4 32))) (bvult ?x73 (bvsub ?x73 (_ bv4 32))))))
 (let (($x42 (and (and (and (and (and $x180 $x126) $x232) $x85) $x157) $x62)))
 (let (($x44 (= true $x42)))
 (let (($x35 (not $x76)))
 (let (($x84 (=> $x35 $x44)))
 (let (($x41 (= $x84 true)))
 (let (($x63 (= $x41 true)))
 (let (($x59 (= $x63 true)))
 (let (($x17 (= $x35 true)))
 (let (($x58 (= $x17 true)))
 (let (($x67 (= $x58 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x140)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x100 $x120)))
 (let (($x90 (and $x91 $x150)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x165 $x90)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x107)))))))
 (let (($x121 (and $x65 $x48)))
 (let (($x227 (= $x121 true)))
 (let (($x56 (= $x227 true)))
 (let (($x127 (= $x56 true)))
 (let (($x27 (and $x127 $x67)))
 (let (($x21 (and $x27 $x59)))
 (let (($x55 (and $x21 $x160)))
 (let (($x40 (and $x55 $x213)))
 (let (($x132 (and $x40 $x197)))
 (let (($x43 (and $x132 $x147)))
 (let (($x108 (and $x43 $x116)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x318 (and $x11 $x108)))
 (let (($x103 (bvugt ?x73 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd ?x73 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x29 (=> (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x103)))))))
 (let (($x115 (=> (and $x35 (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x20 $x103)))))))
 (let (($x224 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x129 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x12 (_ bv1 32))) (or false (or false (and true (or $x77 $x224)))))))
 (let (($x78 (=> (and $x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x12 (_ bv1 32)))) (or false (or false (and true (or $x77 $x224)))))))
 (let (($x25 (and $x78 $x115)))
 (let (($x319 (and $x25 $x318)))
 (let (($x321 (=> $x319 $x32)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x308 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x33 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x33) (concat ?x113 (concat ?x217 ?x308)))))
 (let ((?x320 ((_ extract 24 0) ?x102)))
 (let ((?x49 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 ?x320)))
 (let (($x137 (= (_ bv0 25) ?x49)))
 (let (($x32 (= $x137 true)))
 (let ((?x12 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv1 32))) (select input.dst.llvm-mem ?x12))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv2 32))) ?x245))))
 (let ((?x288 (bvadd ?x264 (_ bv4 32))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x265))))
 (let (($x149 (= (_ bv0 32) ?x290)))
 (let ((?x279 (ite $x149 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x279 (_ bv1 32))))
 (let (($x207 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x281 (= $x207 $x280)))
 (let (($x30 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x170 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x178 (and $x170 $x30)))
 (let (($x66 (=> $x178 $x281)))
 (let (($x34 (= ?x279 (_ bv0 32))))
 (let (($x183 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x292 (= $x183 $x34)))
 (let (($x286 (=> $x178 $x292)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem ?x264))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv2 32))) ?x299))))
 (let (($x97 (= input.spec-%var-l-1.2.1.2.0 ?x302)))
 (let (($x278 (=> $x178 $x97)))
 (let (($x38 (= (_ bv0 32) ?x264)))
 (let ((?x253 (ite $x38 (_ bv0 32) (_ bv1 32))))
 (let (($x271 (bvuge ?x253 (_ bv1 32))))
 (let (($x262 (= $x30 $x271)))
 (let (($x300 (=> $x170 $x262)))
 (let (($x252 (= ?x253 (_ bv0 32))))
 (let (($x50 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x251 (= $x50 $x252)))
 (let (($x291 (=> $x170 $x251)))
 (let (($x254 (= input.spec-%var-l-1.2.0 ?x102)))
 (let (($x204 (=> $x170 $x254)))
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x248 (ite $x76 (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x248 (_ bv1 32))))
 (let (($x307 (= $x170 $x212)))
 (let (($x201 (= ?x248 (_ bv0 32))))
 (let (($x229 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x202 (= $x229 $x201)))
 (let (($x267 (and $x178 $x183)))
 (let (($x79 (not $x267)))
 (let (($x185 (and $x178 $x207)))
 (let (($x241 (not $x185)))
 (let (($x189 (= false false)))
 (let (($x10 (and $x170 $x50)))
 (let (($x277 (=> $x10 $x189)))
 (let (($x266 (=> $x229 $x189)))
 (let (($x313 (and (and (and (and (and (and $x266 $x277) $x241) $x79) $x202) $x307) $x204)))
 (let (($x215 (and (and (and (and (and $x313 $x291) $x300) $x278) $x286) $x66)))
 (let (($x116 (= $x215 true)))
 (let ((?x172 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x46 (concat ?x172 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x187 (concat ?x64 (concat ?x146 ?x46))))
 (let ((?x305 (bvadd ?x187 (_ bv4 32))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem ?x305))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv2 32))) ?x306))))
 (let (($x257 (= (_ bv0 32) ?x182)))
 (let ((?x181 (ite $x257 (_ bv0 32) (_ bv1 32))))
 (let (($x194 (bvuge ?x181 (_ bv1 32))))
 (let (($x143 (= $x207 $x194)))
 (let (($x268 (=> $x178 $x143)))
 (let (($x193 (= ?x181 (_ bv0 32))))
 (let (($x31 (= $x183 $x193)))
 (let (($x5 (=> $x178 $x31)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x304))))
 (let (($x296 (= input.spec-%var-l-1.2.1.2.0 ?x221)))
 (let (($x111 (=> $x178 $x296)))
 (let (($x239 (= (_ bv0 32) ?x187)))
 (let ((?x94 (ite $x239 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (bvuge ?x94 (_ bv1 32))))
 (let (($x273 (= $x30 $x57)))
 (let (($x199 (=> $x170 $x273)))
 (let (($x167 (= ?x94 (_ bv0 32))))
 (let (($x190 (= $x50 $x167)))
 (let (($x206 (=> $x170 $x190)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x153)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x104)))
 (let (($x225 (= input.spec-%var-l-1.2.0 ?x200)))
 (let (($x237 (=> $x170 $x225)))
 (let (($x145 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x233 (ite $x145 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x233 (_ bv1 32))))
 (let (($x234 (= $x170 $x235)))
 (let (($x138 (and (and (and (and (and (= $x229 (= ?x233 (_ bv0 32))) $x266) $x234) $x237) $x206) $x199)))
 (let (($x238 (and (and (and (and (and (and $x138 $x277) $x111) $x5) $x268) $x241) $x79)))
 (let (($x147 (= $x238 true)))
 (let ((?x171 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x179 (= (_ bv0 3) ?x171)))
 (let (($x174 (= $x179 true)))
 (let (($x197 (= $x174 true)))
 (let (($x226 (= (_ bv0 25) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0)))
 (let (($x152 (= $x226 true)))
 (let (($x213 (= $x152 true)))
 (let (($x169 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x169 true)))
 (let (($x130 (= $x72 true)))
 (let (($x160 (= $x130 true)))
 (let (($x62 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x218 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x231 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x218) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x218))))
 (let (($x180 (and true $x231)))
 (let (($x157 (and $x231 $x180)))
 (let ((?x73 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x101))))
 (let (($x128 (= (bvand ?x159 (_ bv4294967288 32)) ?x159)))
 (let (($x232 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x85 (and $x232 $x128)))
 (let (($x126 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv4 32))) (bvult ?x73 (bvsub ?x73 (_ bv4 32))))))
 (let (($x42 (and (and (and (and (and $x180 $x126) $x232) $x85) $x157) $x62)))
 (let (($x44 (= true $x42)))
 (let (($x35 (not $x76)))
 (let (($x84 (=> $x35 $x44)))
 (let (($x41 (= $x84 true)))
 (let (($x63 (= $x41 true)))
 (let (($x59 (= $x63 true)))
 (let (($x17 (= $x35 true)))
 (let (($x58 (= $x17 true)))
 (let (($x67 (= $x58 true)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x140)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x100 $x120)))
 (let (($x90 (and $x91 $x150)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x165 $x90)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x99 $x107)))))))
 (let (($x121 (and $x65 $x48)))
 (let (($x227 (= $x121 true)))
 (let (($x56 (= $x227 true)))
 (let (($x127 (= $x56 true)))
 (let (($x27 (and $x127 $x67)))
 (let (($x21 (and $x27 $x59)))
 (let (($x55 (and $x21 $x160)))
 (let (($x40 (and $x55 $x213)))
 (let (($x132 (and $x40 $x197)))
 (let (($x43 (and $x132 $x147)))
 (let (($x108 (and $x43 $x116)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x318 (and $x11 $x108)))
 (let (($x103 (bvugt ?x73 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd ?x73 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x29 (=> (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x103)))))))
 (let (($x115 (=> (and $x35 (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x20 $x103)))))))
 (let (($x224 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x129 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x12 (_ bv1 32))) (or false (or false (and true (or $x77 $x224)))))))
 (let (($x78 (=> (and $x35 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x12 (_ bv1 32)))) (or false (or false (and true (or $x77 $x224)))))))
 (let (($x25 (and $x78 $x115)))
 (let (($x319 (and $x25 $x318)))
 (let (($x321 (=> $x319 $x32)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 #b0000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000001000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)) (_ bv4194304 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25) (_ bv0 25))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2048 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4194304 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000ecc)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00004007)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00004000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
              #x0000400a
              #x01)
       #x00004003
       #x01))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry_24_0 () (_ BitVec 25)
    #b0000000000000000000000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000ecc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000ecf)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x61 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem ?x61))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv2 32))) ?x216))))
 (let (($x287 (bvule ?x159 (_ bv4294967294 32))))
 (let (($x185 (= $x287 true)))
 (let (($x241 (= $x185 true)))
 (let ((?x161 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x133))))
 (let (($x258 (= (_ bv0 32) ?x223)))
 (let ((?x236 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x236 (_ bv1 32))))
 (let (($x53 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x182 (= $x53 $x82)))
 (let (($x188 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x257 (=> $x188 $x182)))
 (let (($x192 (= ?x236 (_ bv0 32))))
 (let (($x153 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x244 (= $x153 $x192)))
 (let (($x306 (=> $x188 $x244)))
 (let ((?x178 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x224 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x198 (concat (select input.dst.llvm-mem ?x224) (concat ?x285 (concat ?x195 ?x178)))))
 (let (($x304 (= input.spec-%var-l-1.2.0 ?x198)))
 (let (($x196 (=> $x188 $x304)))
 (let (($x123 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x199 (ite $x123 (_ bv0 32) (_ bv1 32))))
 (let (($x277 (bvuge ?x199 (_ bv1 32))))
 (let (($x297 (= $x188 $x277)))
 (let (($x138 (= ?x199 (_ bv0 32))))
 (let (($x174 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x10 (= $x174 $x138)))
 (let (($x145 (= false false)))
 (let (($x233 (=> $x174 $x145)))
 (let (($x131 (and (and (and (and (and $x233 $x10) $x297) $x196) $x306) $x257)))
 (let (($x207 (= $x131 true)))
 (let ((?x237 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x222 (concat ?x237 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x191 (concat ?x64 (concat ?x50 ?x222))))
 (let (($x146 (= (_ bv0 32) ?x191)))
 (let ((?x219 (ite $x146 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x219 (_ bv1 32))))
 (let (($x239 (= $x53 $x187)))
 (let (($x94 (=> $x188 $x239)))
 (let (($x172 (= ?x219 (_ bv0 32))))
 (let (($x14 (= $x153 $x172)))
 (let (($x46 (=> $x188 $x14)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x234)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x9)))
 (let (($x87 (= input.spec-%var-l-1.2.0 ?x209)))
 (let (($x45 (=> $x188 $x87)))
 (let (($x132 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x295 (ite $x132 (_ bv0 32) (_ bv1 32))))
 (let (($x276 (bvuge ?x295 (_ bv1 32))))
 (let (($x189 (= $x188 $x276)))
 (let (($x30 (and (and (and (and (and (= $x174 (= ?x295 (_ bv0 32))) $x233) $x189) $x45) $x46) $x94)))
 (let (($x57 (= $x30 true)))
 (let ((?x152 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x213 (= (_ bv0 3) ?x152)))
 (let (($x40 (= $x213 true)))
 (let (($x184 (= $x40 true)))
 (let (($x130 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x160 (= $x130 true)))
 (let (($x55 (= $x160 true)))
 (let (($x186 (= $x55 true)))
 (let (($x122 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x109 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x96 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x109) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x109))))
 (let (($x125 (and true $x96)))
 (let (($x124 (and $x96 $x125)))
 (let (($x128 (= (bvand ?x159 (_ bv4294967288 32)) ?x159)))
 (let (($x139 (= (bvand ?x61 (_ bv4294967292 32)) ?x61)))
 (let (($x85 (and $x139 $x128)))
 (let (($x148 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x61 (bvsub ?x61 (_ bv4 32))) (bvult ?x61 (bvsub ?x61 (_ bv4 32))))))
 (let (($x84 (and (and (and (and (and $x125 $x148) $x139) $x85) $x124) $x122)))
 (let (($x41 (= true $x84)))
 (let (($x76 (not $x123)))
 (let (($x63 (=> $x76 $x41)))
 (let (($x59 (= $x63 true)))
 (let (($x21 (= $x59 true)))
 (let (($x83 (= $x21 true)))
 (let (($x67 (= $x76 true)))
 (let (($x27 (= $x67 true)))
 (let (($x163 (= $x27 true)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x90)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x120 $x140)))
 (let (($x121 (and $x150 $x48)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (and $x7 $x121)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x142 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x23)))))))
 (let (($x56 (and $x142 $x227)))
 (let (($x127 (= $x56 true)))
 (let (($x17 (= $x127 true)))
 (let (($x58 (= $x17 true)))
 (let (($x218 (and $x58 $x163)))
 (let (($x169 (and $x218 $x83)))
 (let (($x175 (and $x169 $x186)))
 (let (($x171 (and $x175 $x184)))
 (let (($x273 (and $x171 $x57)))
 (let (($x194 (and $x273 $x207)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x143 (and $x71 $x194)))
 (let (($x118 (bvugt ?x61 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd ?x61 (_ bv3 32))))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x156 (=> (bvule ?x61 (bvsub (bvadd ?x61 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x164 $x118)))))))
 (let (($x155 (=> (and $x76 (bvule ?x61 (bvsub (bvadd ?x61 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x164 $x118)))))))
 (let (($x81 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x224)))
 (let (($x106 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x161 (_ bv1 32))) (or false (or false (and true (or $x110 $x81)))))))
 (let (($x86 (=> (and $x76 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x161 (_ bv1 32)))) (or false (or false (and true (or $x110 $x81)))))))
 (let (($x162 (and $x86 $x155)))
 (let (($x268 (and $x162 $x143)))
 (let (($x75 (=> $x268 $x241)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x61 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem ?x61))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv2 32))) ?x216))))
 (let (($x287 (bvule ?x159 (_ bv4294967294 32))))
 (let (($x185 (= $x287 true)))
 (let (($x241 (= $x185 true)))
 (let ((?x161 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x133))))
 (let (($x258 (= (_ bv0 32) ?x223)))
 (let ((?x236 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x82 (bvuge ?x236 (_ bv1 32))))
 (let (($x53 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x182 (= $x53 $x82)))
 (let (($x188 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x257 (=> $x188 $x182)))
 (let (($x192 (= ?x236 (_ bv0 32))))
 (let (($x153 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x244 (= $x153 $x192)))
 (let (($x306 (=> $x188 $x244)))
 (let ((?x178 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x224 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x198 (concat (select input.dst.llvm-mem ?x224) (concat ?x285 (concat ?x195 ?x178)))))
 (let (($x304 (= input.spec-%var-l-1.2.0 ?x198)))
 (let (($x196 (=> $x188 $x304)))
 (let (($x123 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x199 (ite $x123 (_ bv0 32) (_ bv1 32))))
 (let (($x277 (bvuge ?x199 (_ bv1 32))))
 (let (($x297 (= $x188 $x277)))
 (let (($x138 (= ?x199 (_ bv0 32))))
 (let (($x174 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x10 (= $x174 $x138)))
 (let (($x145 (= false false)))
 (let (($x233 (=> $x174 $x145)))
 (let (($x131 (and (and (and (and (and $x233 $x10) $x297) $x196) $x306) $x257)))
 (let (($x207 (= $x131 true)))
 (let ((?x237 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x222 (concat ?x237 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x191 (concat ?x64 (concat ?x50 ?x222))))
 (let (($x146 (= (_ bv0 32) ?x191)))
 (let ((?x219 (ite $x146 (_ bv0 32) (_ bv1 32))))
 (let (($x187 (bvuge ?x219 (_ bv1 32))))
 (let (($x239 (= $x53 $x187)))
 (let (($x94 (=> $x188 $x239)))
 (let (($x172 (= ?x219 (_ bv0 32))))
 (let (($x14 (= $x153 $x172)))
 (let (($x46 (=> $x188 $x14)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x234)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x9)))
 (let (($x87 (= input.spec-%var-l-1.2.0 ?x209)))
 (let (($x45 (=> $x188 $x87)))
 (let (($x132 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x295 (ite $x132 (_ bv0 32) (_ bv1 32))))
 (let (($x276 (bvuge ?x295 (_ bv1 32))))
 (let (($x189 (= $x188 $x276)))
 (let (($x30 (and (and (and (and (and (= $x174 (= ?x295 (_ bv0 32))) $x233) $x189) $x45) $x46) $x94)))
 (let (($x57 (= $x30 true)))
 (let ((?x152 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x213 (= (_ bv0 3) ?x152)))
 (let (($x40 (= $x213 true)))
 (let (($x184 (= $x40 true)))
 (let (($x130 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x160 (= $x130 true)))
 (let (($x55 (= $x160 true)))
 (let (($x186 (= $x55 true)))
 (let (($x122 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x109 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x96 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x109) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x109))))
 (let (($x125 (and true $x96)))
 (let (($x124 (and $x96 $x125)))
 (let (($x128 (= (bvand ?x159 (_ bv4294967288 32)) ?x159)))
 (let (($x139 (= (bvand ?x61 (_ bv4294967292 32)) ?x61)))
 (let (($x85 (and $x139 $x128)))
 (let (($x148 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x61 (bvsub ?x61 (_ bv4 32))) (bvult ?x61 (bvsub ?x61 (_ bv4 32))))))
 (let (($x84 (and (and (and (and (and $x125 $x148) $x139) $x85) $x124) $x122)))
 (let (($x41 (= true $x84)))
 (let (($x76 (not $x123)))
 (let (($x63 (=> $x76 $x41)))
 (let (($x59 (= $x63 true)))
 (let (($x21 (= $x59 true)))
 (let (($x83 (= $x21 true)))
 (let (($x67 (= $x76 true)))
 (let (($x27 (= $x67 true)))
 (let (($x163 (= $x27 true)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x90)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x120 $x140)))
 (let (($x121 (and $x150 $x48)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (and $x7 $x121)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x142 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x23)))))))
 (let (($x56 (and $x142 $x227)))
 (let (($x127 (= $x56 true)))
 (let (($x17 (= $x127 true)))
 (let (($x58 (= $x17 true)))
 (let (($x218 (and $x58 $x163)))
 (let (($x169 (and $x218 $x83)))
 (let (($x175 (and $x169 $x186)))
 (let (($x171 (and $x175 $x184)))
 (let (($x273 (and $x171 $x57)))
 (let (($x194 (and $x273 $x207)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x143 (and $x71 $x194)))
 (let (($x118 (bvugt ?x61 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd ?x61 (_ bv3 32))))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x156 (=> (bvule ?x61 (bvsub (bvadd ?x61 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x164 $x118)))))))
 (let (($x155 (=> (and $x76 (bvule ?x61 (bvsub (bvadd ?x61 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x164 $x118)))))))
 (let (($x81 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x224)))
 (let (($x106 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x161 (_ bv1 32))) (or false (or false (and true (or $x110 $x81)))))))
 (let (($x86 (=> (and $x76 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x161 (_ bv1 32)))) (or false (or false (and true (or $x110 $x81)))))))
 (let (($x162 (and $x86 $x155)))
 (let (($x268 (and $x162 $x143)))
 (let (($x75 (=> $x268 $x241)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var908X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x60 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var908X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x309 (concat ?x60 (select input.dst.llvm-mem (bvadd input.ind-%var908X (_ bv4 32))))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var908X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var908X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x246 (concat ?x210 (concat ?x254 ?x309))))
 (let (($x250 (= ?x246 ?x246)))
 (let (($x260 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x145 (ite $x260 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x145 (_ bv1 32))))
 (let (($x247 (=> $x190 $x250)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.ind-%var908X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var908X))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.ind-%var908X (_ bv2 32))) ?x201)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd input.ind-%var908X (_ bv3 32))) ?x212)))
 (let (($x24 (= ?x282 ?x282)))
 (let (($x113 (=> $x190 $x24)))
 (let ((?x73 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x19))))
 (let (($x35 (= (_ bv0 32) ?x54)))
 (let ((?x26 (ite $x35 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x26 (_ bv1 32))))
 (let (($x43 (= $x190 $x147)))
 (let (($x79 (= ?x26 (_ bv0 32))))
 (let (($x233 (= ?x145 (_ bv0 32))))
 (let (($x238 (= $x233 $x79)))
 (let (($x255 (and (and (=> $x233 (= false false)) (= input.dst.llvm-%l ?x54)) $x238)))
 (let (($x249 (and (and (and $x255 $x43) $x113) $x247)))
 (let (($x75 (= true true)))
 (let (($x264 (and $x75 $x249)))
 (let (($x38 (= $x264 true)))
 (let ((?x33 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x183))))
 (let (($x258 (= (_ bv0 32) ?x223)))
 (let ((?x236 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x5 (bvuge ?x236 (_ bv1 32))))
 (let (($x274 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x82 (= $x274 $x5)))
 (let (($x189 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x182 (=> $x189 $x82)))
 (let (($x192 (= ?x236 (_ bv0 32))))
 (let (($x153 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x244 (= $x153 $x192)))
 (let (($x306 (=> $x189 $x244)))
 (let ((?x261 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x114 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x304 (concat (select input.dst.llvm-mem ?x114) (concat ?x173 (concat ?x177 ?x261)))))
 (let (($x196 (= input.spec-%var-l-1.2.0 ?x304)))
 (let (($x31 (=> $x189 $x196)))
 (let (($x123 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x181 (ite $x123 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x181 (_ bv1 32))))
 (let (($x176 (= $x189 $x193)))
 (let (($x277 (= ?x181 (_ bv0 32))))
 (let (($x295 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x297 (= $x295 $x277)))
 (let (($x188 (= false false)))
 (let (($x276 (=> $x295 $x188)))
 (let (($x143 (and (and (and (and (and $x276 $x297) $x176) $x31) $x306) $x182)))
 (let (($x268 (= $x143 true)))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x50 (concat ?x230 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x191 (concat ?x52 (concat ?x237 ?x50))))
 (let (($x146 (= (_ bv0 32) ?x191)))
 (let ((?x219 (ite $x146 (_ bv0 32) (_ bv1 32))))
 (let (($x53 (bvuge ?x219 (_ bv1 32))))
 (let (($x187 (= $x274 $x53)))
 (let (($x239 (=> $x189 $x187)))
 (let (($x172 (= ?x219 (_ bv0 32))))
 (let (($x14 (= $x153 $x172)))
 (let (($x46 (=> $x189 $x14)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x170)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x234)))
 (let (($x45 (= input.spec-%var-l-1.2.0 ?x87)))
 (let (($x206 (=> $x189 $x45)))
 (let (($x199 (and (and (and (and (and (= $x295 $x233) $x276) (= $x189 $x190)) $x206) $x46) $x239)))
 (let (($x138 (= $x199 true)))
 (let ((?x184 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x171 (= (_ bv0 3) ?x184)))
 (let (($x179 (= $x171 true)))
 (let (($x174 (= $x179 true)))
 (let (($x186 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x175 (= $x186 true)))
 (let (($x226 (= $x175 true)))
 (let (($x152 (= $x226 true)))
 (let (($x157 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x180 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x39 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x180) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x180))))
 (let (($x126 (and true $x39)))
 (let (($x124 (and $x39 $x126)))
 (let (($x85 (= (bvand ?x54 (_ bv4294967288 32)) ?x54)))
 (let (($x117 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x42 (and $x117 $x85)))
 (let (($x232 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv4 32))) (bvult ?x73 (bvsub ?x73 (_ bv4 32))))))
 (let (($x59 (and (and (and (and (and $x126 $x232) $x117) $x42) $x124) $x157)))
 (let (($x21 (= true $x59)))
 (let (($x76 (not $x123)))
 (let (($x83 (=> $x76 $x21)))
 (let (($x169 (= $x83 true)))
 (let (($x72 (= $x169 true)))
 (let (($x130 (= $x72 true)))
 (let (($x218 (= $x76 true)))
 (let (($x135 (= $x218 true)))
 (let (($x109 (= $x135 true)))
 (let ((?x227 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x227)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x150 $x48)))
 (let (($x127 (and $x121 $x56)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x158 $x127)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x165)))))))
 (let (($x58 (and $x140 $x17)))
 (let (($x67 (= $x58 true)))
 (let (($x27 (= $x67 true)))
 (let (($x163 (= $x27 true)))
 (let (($x231 (and $x163 $x109)))
 (let (($x160 (and $x231 $x130)))
 (let (($x213 (and $x160 $x152)))
 (let (($x197 (and $x213 $x174)))
 (let (($x10 (and $x197 $x138)))
 (let (($x287 (and $x10 $x268)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x185 (and $x107 $x287)))
 (let (($x29 (bvugt ?x73 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd ?x73 (_ bv3 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x71 (=> (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x29)))))))
 (let (($x25 (=> (and $x76 (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x89 $x29)))))))
 (let (($x129 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x20 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x33 (_ bv1 32))) (or false (or false (and true (or $x8 $x129)))))))
 (let (($x214 (=> (and $x76 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x33 (_ bv1 32)))) (or false (or false (and true (or $x8 $x129)))))))
 (let (($x103 (and $x214 $x25)))
 (let (($x241 (and $x103 $x185)))
 (let (($x253 (=> $x241 $x38)))
 (not $x253)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var908X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x60 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var908X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x309 (concat ?x60 (select input.dst.llvm-mem (bvadd input.ind-%var908X (_ bv4 32))))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var908X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var908X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x246 (concat ?x210 (concat ?x254 ?x309))))
 (let (($x250 (= ?x246 ?x246)))
 (let (($x260 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x145 (ite $x260 (_ bv0 32) (_ bv1 32))))
 (let (($x190 (bvuge ?x145 (_ bv1 32))))
 (let (($x247 (=> $x190 $x250)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.ind-%var908X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var908X))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.ind-%var908X (_ bv2 32))) ?x201)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd input.ind-%var908X (_ bv3 32))) ?x212)))
 (let (($x24 (= ?x282 ?x282)))
 (let (($x113 (=> $x190 $x24)))
 (let ((?x73 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x19))))
 (let (($x35 (= (_ bv0 32) ?x54)))
 (let ((?x26 (ite $x35 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x26 (_ bv1 32))))
 (let (($x43 (= $x190 $x147)))
 (let (($x79 (= ?x26 (_ bv0 32))))
 (let (($x233 (= ?x145 (_ bv0 32))))
 (let (($x238 (= $x233 $x79)))
 (let (($x255 (and (and (=> $x233 (= false false)) (= input.dst.llvm-%l ?x54)) $x238)))
 (let (($x249 (and (and (and $x255 $x43) $x113) $x247)))
 (let (($x75 (= true true)))
 (let (($x264 (and $x75 $x249)))
 (let (($x38 (= $x264 true)))
 (let ((?x33 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x183))))
 (let (($x258 (= (_ bv0 32) ?x223)))
 (let ((?x236 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x5 (bvuge ?x236 (_ bv1 32))))
 (let (($x274 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x82 (= $x274 $x5)))
 (let (($x189 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x182 (=> $x189 $x82)))
 (let (($x192 (= ?x236 (_ bv0 32))))
 (let (($x153 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x244 (= $x153 $x192)))
 (let (($x306 (=> $x189 $x244)))
 (let ((?x261 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x114 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x304 (concat (select input.dst.llvm-mem ?x114) (concat ?x173 (concat ?x177 ?x261)))))
 (let (($x196 (= input.spec-%var-l-1.2.0 ?x304)))
 (let (($x31 (=> $x189 $x196)))
 (let (($x123 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x181 (ite $x123 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x181 (_ bv1 32))))
 (let (($x176 (= $x189 $x193)))
 (let (($x277 (= ?x181 (_ bv0 32))))
 (let (($x295 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x297 (= $x295 $x277)))
 (let (($x188 (= false false)))
 (let (($x276 (=> $x295 $x188)))
 (let (($x143 (and (and (and (and (and $x276 $x297) $x176) $x31) $x306) $x182)))
 (let (($x268 (= $x143 true)))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x50 (concat ?x230 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x191 (concat ?x52 (concat ?x237 ?x50))))
 (let (($x146 (= (_ bv0 32) ?x191)))
 (let ((?x219 (ite $x146 (_ bv0 32) (_ bv1 32))))
 (let (($x53 (bvuge ?x219 (_ bv1 32))))
 (let (($x187 (= $x274 $x53)))
 (let (($x239 (=> $x189 $x187)))
 (let (($x172 (= ?x219 (_ bv0 32))))
 (let (($x14 (= $x153 $x172)))
 (let (($x46 (=> $x189 $x14)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x170)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x234)))
 (let (($x45 (= input.spec-%var-l-1.2.0 ?x87)))
 (let (($x206 (=> $x189 $x45)))
 (let (($x199 (and (and (and (and (and (= $x295 $x233) $x276) (= $x189 $x190)) $x206) $x46) $x239)))
 (let (($x138 (= $x199 true)))
 (let ((?x184 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x171 (= (_ bv0 3) ?x184)))
 (let (($x179 (= $x171 true)))
 (let (($x174 (= $x179 true)))
 (let (($x186 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x175 (= $x186 true)))
 (let (($x226 (= $x175 true)))
 (let (($x152 (= $x226 true)))
 (let (($x157 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x180 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x39 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x180) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x180))))
 (let (($x126 (and true $x39)))
 (let (($x124 (and $x39 $x126)))
 (let (($x85 (= (bvand ?x54 (_ bv4294967288 32)) ?x54)))
 (let (($x117 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x42 (and $x117 $x85)))
 (let (($x232 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv4 32))) (bvult ?x73 (bvsub ?x73 (_ bv4 32))))))
 (let (($x59 (and (and (and (and (and $x126 $x232) $x117) $x42) $x124) $x157)))
 (let (($x21 (= true $x59)))
 (let (($x76 (not $x123)))
 (let (($x83 (=> $x76 $x21)))
 (let (($x169 (= $x83 true)))
 (let (($x72 (= $x169 true)))
 (let (($x130 (= $x72 true)))
 (let (($x218 (= $x76 true)))
 (let (($x135 (= $x218 true)))
 (let (($x109 (= $x135 true)))
 (let ((?x227 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x227)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x150 $x48)))
 (let (($x127 (and $x121 $x56)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x158 $x127)))
 (let (($x165 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x165)))))))
 (let (($x58 (and $x140 $x17)))
 (let (($x67 (= $x58 true)))
 (let (($x27 (= $x67 true)))
 (let (($x163 (= $x27 true)))
 (let (($x231 (and $x163 $x109)))
 (let (($x160 (and $x231 $x130)))
 (let (($x213 (and $x160 $x152)))
 (let (($x197 (and $x213 $x174)))
 (let (($x10 (and $x197 $x138)))
 (let (($x287 (and $x10 $x268)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x185 (and $x107 $x287)))
 (let (($x29 (bvugt ?x73 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd ?x73 (_ bv3 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x71 (=> (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x29)))))))
 (let (($x25 (=> (and $x76 (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x89 $x29)))))))
 (let (($x129 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x20 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x33 (_ bv1 32))) (or false (or false (and true (or $x8 $x129)))))))
 (let (($x214 (=> (and $x76 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x33 (_ bv1 32)))) (or false (or false (and true (or $x8 $x129)))))))
 (let (($x103 (and $x214 $x25)))
 (let (($x241 (and $x103 $x185)))
 (let (($x253 (=> $x241 $x38)))
 (not $x253)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var908X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9f4019fc)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00001ffd)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00002000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x78))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9f4019fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9f4019ff)
  (define-fun input.ind-%var908X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var933X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x328 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var933X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x329 (concat ?x328 (select input.dst.llvm-mem (bvadd input.ind-%var933X (_ bv4 32))))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var933X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x334 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var933X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x335 (concat ?x334 (concat ?x331 ?x329))))
 (let (($x336 (= ?x335 ?x335)))
 (let (($x167 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x188 (ite $x167 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x188 (_ bv1 32))))
 (let (($x337 (=> $x30 $x336)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.ind-%var933X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var933X))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd input.ind-%var933X (_ bv2 32))) ?x49)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.ind-%var933X (_ bv3 32))) ?x321)))
 (let (($x323 (= ?x69 ?x69)))
 (let (($x324 (=> $x30 $x323)))
 (let ((?x95 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x16))))
 (let (($x317 (= (_ bv0 32) ?x105)))
 (let ((?x280 (ite $x317 (_ bv0 32) (_ bv1 32))))
 (let (($x215 (bvuge ?x280 (_ bv1 32))))
 (let (($x116 (= $x30 $x215)))
 (let (($x281 (= ?x280 (_ bv0 32))))
 (let (($x276 (= ?x188 (_ bv0 32))))
 (let (($x66 (= $x276 $x281)))
 (let (($x339 (and (and (=> $x276 (= false false)) (= input.dst.llvm-%l ?x105)) $x66)))
 (let (($x342 (and (and (and $x339 $x116) $x324) $x337)))
 (let (($x34 (= true true)))
 (let (($x343 (and $x34 $x342)))
 (let (($x344 (= $x343 true)))
 (let ((?x110 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x212))))
 (let ((?x291 (bvadd ?x313 (_ bv4 32))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x300))))
 (let (($x283 (= (_ bv0 32) ?x256)))
 (let ((?x310 (ite $x283 (_ bv0 32) (_ bv1 32))))
 (let (($x97 (bvuge ?x310 (_ bv1 32))))
 (let (($x236 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x278 (= $x236 $x97)))
 (let (($x273 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x266 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x138 (and $x266 $x273)))
 (let (($x316 (=> $x138 $x278)))
 (let (($x299 (= ?x310 (_ bv0 32))))
 (let (($x195 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x311 (= $x195 $x299)))
 (let (($x302 (=> $x138 $x311)))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem ?x313))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv2 32))) ?x249))))
 (let (($x100 (= input.spec-%var-l-1.2.1.2.0 ?x154)))
 (let (($x251 (=> $x138 $x100)))
 (let (($x210 (= (_ bv0 32) ?x313)))
 (let ((?x102 (ite $x210 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x102 (_ bv1 32))))
 (let (($x309 (= $x273 $x217)))
 (let (($x204 (=> $x266 $x309)))
 (let (($x254 (= ?x102 (_ bv0 32))))
 (let (($x153 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x308 (= $x153 $x254)))
 (let (($x60 (=> $x266 $x308)))
 (let ((?x238 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x293 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x78 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x202 (concat (select input.dst.llvm-mem ?x78) (concat ?x293 (concat ?x147 ?x238)))))
 (let (($x18 (= input.spec-%var-l-1.2.0 ?x202)))
 (let (($x303 (=> $x266 $x18)))
 (let (($x123 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x12 (ite $x123 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x12 (_ bv1 32))))
 (let (($x79 (= $x266 $x26)))
 (let (($x51 (= ?x12 (_ bv0 32))))
 (let (($x145 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x35 (= $x145 $x51)))
 (let (($x189 (= false false)))
 (let (($x239 (and $x266 $x153)))
 (let (($x199 (=> $x239 $x189)))
 (let (($x190 (=> $x145 $x189)))
 (let (($x269 (and (and (and (and (and (and $x190 $x199) $x35) $x79) $x303) $x60) $x204)))
 (let (($x265 (and (and (and $x269 $x251) $x302) $x316)))
 (let (($x301 (= $x265 true)))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x237 (concat ?x225 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x191 (concat ?x200 (concat ?x230 ?x237))))
 (let ((?x6 (bvadd ?x191 (_ bv4 32))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem ?x6))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv2 32))) ?x207))))
 (let (($x151 (= (_ bv0 32) ?x211)))
 (let ((?x183 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x183 (_ bv1 32))))
 (let (($x244 (= $x236 $x192)))
 (let (($x306 (=> $x138 $x244)))
 (let (($x221 (= ?x183 (_ bv0 32))))
 (let (($x223 (= $x195 $x221)))
 (let (($x258 (=> $x138 $x223)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x257))))
 (let (($x285 (= input.spec-%var-l-1.2.1.2.0 ?x173)))
 (let (($x177 (=> $x138 $x285)))
 (let (($x146 (= (_ bv0 32) ?x191)))
 (let ((?x219 (ite $x146 (_ bv0 32) (_ bv1 32))))
 (let (($x274 (bvuge ?x219 (_ bv1 32))))
 (let (($x53 (= $x273 $x274)))
 (let (($x187 (=> $x266 $x53)))
 (let (($x172 (= ?x219 (_ bv0 32))))
 (let (($x14 (= $x153 $x172)))
 (let (($x46 (=> $x266 $x14)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x203)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x170)))
 (let (($x206 (= input.spec-%var-l-1.2.0 ?x45)))
 (let (($x57 (=> $x266 $x206)))
 (let (($x143 (and (and (and (and (and (= $x145 $x276) $x190) (= $x266 $x30)) $x57) $x46) $x187)))
 (let (($x241 (and (and (and (and $x143 $x199) $x177) $x258) $x306)))
 (let (($x75 (= $x241 true)))
 (let ((?x174 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x197 (= (_ bv0 3) ?x174)))
 (let (($x132 (= $x197 true)))
 (let (($x295 (= $x132 true)))
 (let (($x152 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x213 (= $x152 true)))
 (let (($x40 (= $x213 true)))
 (let (($x184 (= $x40 true)))
 (let (($x44 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x36 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x22 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x36) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x36))))
 (let (($x80 (and true $x22)))
 (let (($x124 (and $x22 $x80)))
 (let (($x42 (= (bvand ?x105 (_ bv4294967288 32)) ?x105)))
 (let (($x166 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x41 (and $x166 $x42)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv4 32))) (bvult ?x95 (bvsub ?x95 (_ bv4 32))))))
 (let (($x169 (and (and (and (and (and $x80 $x62) $x166) $x41) $x124) $x44)))
 (let (($x72 (= true $x169)))
 (let (($x76 (not $x123)))
 (let (($x130 (=> $x76 $x72)))
 (let (($x160 (= $x130 true)))
 (let (($x55 (= $x160 true)))
 (let (($x186 (= $x55 true)))
 (let (($x231 (= $x76 true)))
 (let (($x96 (= $x231 true)))
 (let (($x180 (= $x96 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x17)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x227)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x121 $x56)))
 (let (($x67 (and $x127 $x58)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x88 $x67)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x120)))))))
 (let (($x163 (and $x48 $x27)))
 (let (($x218 (= $x163 true)))
 (let (($x135 (= $x218 true)))
 (let (($x109 (= $x135 true)))
 (let (($x125 (and $x109 $x180)))
 (let (($x175 (and $x125 $x186)))
 (let (($x171 (and $x175 $x184)))
 (let (($x229 (and $x171 $x295)))
 (let (($x267 (and $x229 $x75)))
 (let (($x290 (and $x267 $x301)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x149 (and $x93 $x290)))
 (let (($x155 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd ?x95 (_ bv3 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x107 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x155)))))))
 (let (($x11 (=> (and $x76 (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x156 $x155)))))))
 (let (($x86 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x118 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x110 (_ bv1 32))) (or false (or false (and true (or $x106 $x86)))))))
 (let (($x224 (=> (and $x76 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x110 (_ bv1 32)))) (or false (or false (and true (or $x106 $x86)))))))
 (let (($x92 (and $x224 $x11)))
 (let (($x279 (and $x92 $x149)))
 (let (($x345 (=> $x279 $x344)))
 (not $x345))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var933X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x328 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var933X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x329 (concat ?x328 (select input.dst.llvm-mem (bvadd input.ind-%var933X (_ bv4 32))))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var933X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x334 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var933X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x335 (concat ?x334 (concat ?x331 ?x329))))
 (let (($x336 (= ?x335 ?x335)))
 (let (($x167 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x188 (ite $x167 (_ bv0 32) (_ bv1 32))))
 (let (($x30 (bvuge ?x188 (_ bv1 32))))
 (let (($x337 (=> $x30 $x336)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd input.ind-%var933X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var933X))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd input.ind-%var933X (_ bv2 32))) ?x49)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.ind-%var933X (_ bv3 32))) ?x321)))
 (let (($x323 (= ?x69 ?x69)))
 (let (($x324 (=> $x30 $x323)))
 (let ((?x95 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x16))))
 (let (($x317 (= (_ bv0 32) ?x105)))
 (let ((?x280 (ite $x317 (_ bv0 32) (_ bv1 32))))
 (let (($x215 (bvuge ?x280 (_ bv1 32))))
 (let (($x116 (= $x30 $x215)))
 (let (($x281 (= ?x280 (_ bv0 32))))
 (let (($x276 (= ?x188 (_ bv0 32))))
 (let (($x66 (= $x276 $x281)))
 (let (($x339 (and (and (=> $x276 (= false false)) (= input.dst.llvm-%l ?x105)) $x66)))
 (let (($x342 (and (and (and $x339 $x116) $x324) $x337)))
 (let (($x34 (= true true)))
 (let (($x343 (and $x34 $x342)))
 (let (($x344 (= $x343 true)))
 (let ((?x110 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x212))))
 (let ((?x291 (bvadd ?x313 (_ bv4 32))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x300))))
 (let (($x283 (= (_ bv0 32) ?x256)))
 (let ((?x310 (ite $x283 (_ bv0 32) (_ bv1 32))))
 (let (($x97 (bvuge ?x310 (_ bv1 32))))
 (let (($x236 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x278 (= $x236 $x97)))
 (let (($x273 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x266 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x138 (and $x266 $x273)))
 (let (($x316 (=> $x138 $x278)))
 (let (($x299 (= ?x310 (_ bv0 32))))
 (let (($x195 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x311 (= $x195 $x299)))
 (let (($x302 (=> $x138 $x311)))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem ?x313))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv2 32))) ?x249))))
 (let (($x100 (= input.spec-%var-l-1.2.1.2.0 ?x154)))
 (let (($x251 (=> $x138 $x100)))
 (let (($x210 (= (_ bv0 32) ?x313)))
 (let ((?x102 (ite $x210 (_ bv0 32) (_ bv1 32))))
 (let (($x217 (bvuge ?x102 (_ bv1 32))))
 (let (($x309 (= $x273 $x217)))
 (let (($x204 (=> $x266 $x309)))
 (let (($x254 (= ?x102 (_ bv0 32))))
 (let (($x153 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x308 (= $x153 $x254)))
 (let (($x60 (=> $x266 $x308)))
 (let ((?x238 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x293 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x78 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x202 (concat (select input.dst.llvm-mem ?x78) (concat ?x293 (concat ?x147 ?x238)))))
 (let (($x18 (= input.spec-%var-l-1.2.0 ?x202)))
 (let (($x303 (=> $x266 $x18)))
 (let (($x123 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x12 (ite $x123 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x12 (_ bv1 32))))
 (let (($x79 (= $x266 $x26)))
 (let (($x51 (= ?x12 (_ bv0 32))))
 (let (($x145 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x35 (= $x145 $x51)))
 (let (($x189 (= false false)))
 (let (($x239 (and $x266 $x153)))
 (let (($x199 (=> $x239 $x189)))
 (let (($x190 (=> $x145 $x189)))
 (let (($x269 (and (and (and (and (and (and $x190 $x199) $x35) $x79) $x303) $x60) $x204)))
 (let (($x265 (and (and (and $x269 $x251) $x302) $x316)))
 (let (($x301 (= $x265 true)))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x237 (concat ?x225 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x191 (concat ?x200 (concat ?x230 ?x237))))
 (let ((?x6 (bvadd ?x191 (_ bv4 32))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem ?x6))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv2 32))) ?x207))))
 (let (($x151 (= (_ bv0 32) ?x211)))
 (let ((?x183 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x183 (_ bv1 32))))
 (let (($x244 (= $x236 $x192)))
 (let (($x306 (=> $x138 $x244)))
 (let (($x221 (= ?x183 (_ bv0 32))))
 (let (($x223 (= $x195 $x221)))
 (let (($x258 (=> $x138 $x223)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x257))))
 (let (($x285 (= input.spec-%var-l-1.2.1.2.0 ?x173)))
 (let (($x177 (=> $x138 $x285)))
 (let (($x146 (= (_ bv0 32) ?x191)))
 (let ((?x219 (ite $x146 (_ bv0 32) (_ bv1 32))))
 (let (($x274 (bvuge ?x219 (_ bv1 32))))
 (let (($x53 (= $x273 $x274)))
 (let (($x187 (=> $x266 $x53)))
 (let (($x172 (= ?x219 (_ bv0 32))))
 (let (($x14 (= $x153 $x172)))
 (let (($x46 (=> $x266 $x14)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x203)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x170)))
 (let (($x206 (= input.spec-%var-l-1.2.0 ?x45)))
 (let (($x57 (=> $x266 $x206)))
 (let (($x143 (and (and (and (and (and (= $x145 $x276) $x190) (= $x266 $x30)) $x57) $x46) $x187)))
 (let (($x241 (and (and (and (and $x143 $x199) $x177) $x258) $x306)))
 (let (($x75 (= $x241 true)))
 (let ((?x174 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x197 (= (_ bv0 3) ?x174)))
 (let (($x132 (= $x197 true)))
 (let (($x295 (= $x132 true)))
 (let (($x152 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x213 (= $x152 true)))
 (let (($x40 (= $x213 true)))
 (let (($x184 (= $x40 true)))
 (let (($x44 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x36 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x22 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x36) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x36))))
 (let (($x80 (and true $x22)))
 (let (($x124 (and $x22 $x80)))
 (let (($x42 (= (bvand ?x105 (_ bv4294967288 32)) ?x105)))
 (let (($x166 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x41 (and $x166 $x42)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv4 32))) (bvult ?x95 (bvsub ?x95 (_ bv4 32))))))
 (let (($x169 (and (and (and (and (and $x80 $x62) $x166) $x41) $x124) $x44)))
 (let (($x72 (= true $x169)))
 (let (($x76 (not $x123)))
 (let (($x130 (=> $x76 $x72)))
 (let (($x160 (= $x130 true)))
 (let (($x55 (= $x160 true)))
 (let (($x186 (= $x55 true)))
 (let (($x231 (= $x76 true)))
 (let (($x96 (= $x231 true)))
 (let (($x180 (= $x96 true)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x17)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x227)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x121 $x56)))
 (let (($x67 (and $x127 $x58)))
 (let (($x88 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x88 $x67)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x120)))))))
 (let (($x163 (and $x48 $x27)))
 (let (($x218 (= $x163 true)))
 (let (($x135 (= $x218 true)))
 (let (($x109 (= $x135 true)))
 (let (($x125 (and $x109 $x180)))
 (let (($x175 (and $x125 $x186)))
 (let (($x171 (and $x175 $x184)))
 (let (($x229 (and $x171 $x295)))
 (let (($x267 (and $x229 $x75)))
 (let (($x290 (and $x267 $x301)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x149 (and $x93 $x290)))
 (let (($x155 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd ?x95 (_ bv3 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x107 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x155)))))))
 (let (($x11 (=> (and $x76 (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x156 $x155)))))))
 (let (($x86 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x118 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x110 (_ bv1 32))) (or false (or false (and true (or $x106 $x86)))))))
 (let (($x224 (=> (and $x76 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x110 (_ bv1 32)))) (or false (or false (and true (or $x106 $x86)))))))
 (let (($x92 (and $x224 $x11)))
 (let (($x279 (and $x92 $x149)))
 (let (($x345 (=> $x279 $x344)))
 (not $x345))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.ind-%var933X () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffff80)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x7878787f)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x78787878)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x78) #x78787883 #x7b))
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffff80)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffff83)
  (define-fun input.ind-%var933X () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var958X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x486 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var958X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x487 (concat ?x486 (select input.dst.llvm-mem (bvadd input.ind-%var958X (_ bv4 32))))))
 (let ((?x489 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var958X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x492 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var958X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x493 (concat ?x492 (concat ?x489 ?x487))))
 (let (($x494 (= ?x493 ?x493)))
 (let (($x276 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x94 (ite $x276 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x94 (_ bv1 32))))
 (let (($x495 (=> $x70 $x494)))
 (let ((?x474 (concat (select input.dst.llvm-mem (bvadd input.ind-%var958X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var958X))))
 (let ((?x477 (concat (select input.dst.llvm-mem (bvadd input.ind-%var958X (_ bv2 32))) ?x474)))
 (let ((?x480 (concat (select input.dst.llvm-mem (bvadd input.ind-%var958X (_ bv3 32))) ?x477)))
 (let (($x481 (= ?x480 ?x480)))
 (let (($x482 (=> $x70 $x481)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x19))))
 (let (($x464 (= (_ bv0 32) ?x105)))
 (let ((?x465 (ite $x464 (_ bv0 32) (_ bv1 32))))
 (let (($x468 (bvuge ?x465 (_ bv1 32))))
 (let (($x469 (= $x70 $x468)))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let (($x189 (= ?x94 (_ bv0 32))))
 (let (($x467 (= $x189 $x466)))
 (let (($x497 (and (and (=> $x189 (= false false)) (= input.dst.llvm-%l ?x105)) $x467)))
 (let (($x500 (and (and (and $x497 $x469) $x482) $x495)))
 (let (($x461 (= true true)))
 (let (($x501 (and $x461 $x500)))
 (let (($x502 (= $x501 true)))
 (let ((?x81 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x331))))
 (let ((?x358 (bvadd ?x335 (_ bv4 32))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv1 32))) (select input.dst.llvm-mem ?x358))))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv2 32))) ?x362))))
 (let ((?x389 (bvadd ?x368 (_ bv4 32))))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv1 32))) (select input.dst.llvm-mem ?x389))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv2 32))) ?x393))))
 (let ((?x408 (bvadd ?x399 (_ bv4 32))))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv1 32))) (select input.dst.llvm-mem ?x408))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv2 32))) ?x412))))
 (let (($x419 (= (_ bv0 32) ?x418)))
 (let ((?x420 (ite $x419 (_ bv0 32) (_ bv1 32))))
 (let (($x436 (= ?x420 (_ bv0 32))))
 (let (($x245 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x437 (= $x245 $x436)))
 (let (($x12 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x187 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x46 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x30 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x143 (and $x30 $x46)))
 (let (($x239 (and $x143 $x187)))
 (let (($x26 (and $x239 $x12)))
 (let (($x438 (=> $x26 $x437)))
 (let ((?x427 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem ?x399))))
 (let ((?x433 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv2 32))) ?x427))))
 (let (($x434 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x433)))
 (let (($x435 (=> $x26 $x434)))
 (let (($x421 (bvuge ?x420 (_ bv1 32))))
 (let (($x269 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x422 (= $x269 $x421)))
 (let (($x423 (=> $x26 $x422)))
 (let (($x400 (= (_ bv0 32) ?x399)))
 (let ((?x401 (ite $x400 (_ bv0 32) (_ bv1 32))))
 (let (($x405 (bvuge ?x401 (_ bv1 32))))
 (let (($x406 (= $x12 $x405)))
 (let (($x407 (=> $x239 $x406)))
 (let (($x402 (= ?x401 (_ bv0 32))))
 (let (($x31 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x403 (= $x31 $x402)))
 (let (($x404 (=> $x239 $x403)))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd ?x368 (_ bv1 32))) (select input.dst.llvm-mem ?x368))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x368 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x368 (_ bv2 32))) ?x380))))
 (let (($x387 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x386)))
 (let (($x388 (=> $x239 $x387)))
 (let (($x369 (= (_ bv0 32) ?x368)))
 (let ((?x370 (ite $x369 (_ bv0 32) (_ bv1 32))))
 (let (($x374 (bvuge ?x370 (_ bv1 32))))
 (let (($x375 (= $x187 $x374)))
 (let (($x376 (=> $x143 $x375)))
 (let (($x371 (= ?x370 (_ bv0 32))))
 (let (($x271 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x372 (= $x271 $x371)))
 (let (($x373 (=> $x143 $x372)))
 (let ((?x349 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x349))))
 (let (($x356 (= input.spec-%var-l-1.2.1.2.0 ?x355)))
 (let (($x357 (=> $x143 $x356)))
 (let (($x336 (= (_ bv0 32) ?x335)))
 (let ((?x337 (ite $x336 (_ bv0 32) (_ bv1 32))))
 (let (($x345 (bvuge ?x337 (_ bv1 32))))
 (let (($x346 (= $x46 $x345)))
 (let (($x161 (=> $x30 $x346)))
 (let (($x342 (= ?x337 (_ bv0 32))))
 (let (($x205 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x343 (= $x205 $x342)))
 (let (($x344 (=> $x30 $x343)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x320 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x321 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x86 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x324 (concat (select input.dst.llvm-mem ?x86) (concat ?x321 (concat ?x320 ?x32)))))
 (let (($x341 (= input.spec-%var-l-1.2.0 ?x324)))
 (let (($x325 (=> $x30 $x341)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x340 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x228 (bvuge ?x340 (_ bv1 32))))
 (let (($x137 (= $x30 $x228)))
 (let (($x108 (= ?x340 (_ bv0 32))))
 (let (($x167 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x322 (= $x167 $x108)))
 (let (($x194 (= false false)))
 (let (($x311 (and $x143 $x271)))
 (let (($x302 (=> $x311 $x194)))
 (let (($x38 (and $x30 $x205)))
 (let (($x250 (=> $x38 $x194)))
 (let (($x298 (and $x26 $x245)))
 (let (($x282 (=> $x298 $x194)))
 (let (($x441 (and (and (and (=> $x167 $x194) (=> (and $x239 $x31) $x194)) $x282) $x250)))
 (let (($x447 (and (and (and (and (and (and $x441 $x302) $x322) $x137) $x325) $x344) $x161)))
 (let (($x453 (and (and (and (and (and (and $x447 $x357) $x373) $x376) $x388) $x404) $x407)))
 (let (($x456 (and (and (and $x453 $x423) $x435) $x438)))
 (let (($x457 (= $x456 true)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x64 (concat ?x200 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x220 (concat ?x237 (concat ?x52 ?x64))))
 (let ((?x268 (bvadd ?x220 (_ bv4 32))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem ?x268))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv2 32))) ?x178))))
 (let (($x262 (= (_ bv0 32) ?x257)))
 (let ((?x314 (ite $x262 (_ bv0 32) (_ bv1 32))))
 (let (($x283 (bvuge ?x314 (_ bv1 32))))
 (let (($x310 (= $x187 $x283)))
 (let (($x299 (=> $x143 $x310)))
 (let (($x300 (= ?x314 (_ bv0 32))))
 (let (($x275 (= $x271 $x300)))
 (let (($x256 (=> $x143 $x275)))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x154))))
 (let (($x315 (= input.spec-%var-l-1.2.1.2.0 ?x270)))
 (let (($x272 (=> $x143 $x315)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x257 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x257 (_ bv4 32))))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x257 (_ bv4 32)) (_ bv2 32))) ?x151)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x257 (_ bv4 32)) (_ bv3 32))) ?x223)))
 (let ((?x24 (bvadd ?x236 (_ bv4 32))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv1 32))) (select input.dst.llvm-mem ?x24))))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv2 32))) ?x212))))
 (let (($x60 (= (_ bv0 32) ?x308)))
 (let ((?x263 (ite $x60 (_ bv0 32) (_ bv1 32))))
 (let (($x252 (bvuge ?x263 (_ bv1 32))))
 (let (($x144 (= $x269 $x252)))
 (let (($x264 (=> $x26 $x144)))
 (let (($x217 (= ?x263 (_ bv0 32))))
 (let (($x309 (= $x245 $x217)))
 (let (($x204 (=> $x26 $x309)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x293))))
 (let (($x18 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x202)))
 (let (($x303 (=> $x26 $x18)))
 (let (($x192 (= (_ bv0 32) ?x236)))
 (let ((?x244 (ite $x192 (_ bv0 32) (_ bv1 32))))
 (let (($x51 (bvuge ?x244 (_ bv1 32))))
 (let (($x35 (= $x12 $x51)))
 (let (($x312 (=> $x239 $x35)))
 (let (($x267 (and $x239 $x31)))
 (let (($x288 (=> $x267 $x194)))
 (let (($x306 (= ?x244 (_ bv0 32))))
 (let (($x241 (= $x31 $x306)))
 (let (($x75 (=> $x239 $x241)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x177))))
 (let (($x133 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x242)))
 (let (($x305 (=> $x239 $x133)))
 (let (($x191 (= (_ bv0 32) ?x220)))
 (let ((?x146 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x146 (_ bv1 32))))
 (let (($x273 (= $x46 $x182)))
 (let (($x274 (=> $x30 $x273)))
 (let (($x219 (= ?x146 (_ bv0 32))))
 (let (($x172 (= $x205 $x219)))
 (let (($x14 (=> $x30 $x172)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x112)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x209)))
 (let (($x206 (= input.spec-%var-l-1.2.0 ?x45)))
 (let (($x57 (=> $x30 $x206)))
 (let (($x316 (and (and (and (and (= $x167 $x189) (=> $x167 $x194)) (= $x30 $x70)) $x57) $x14)))
 (let (($x34 (and (and (and (and (and (and $x316 $x274) $x305) $x75) $x288) $x312) $x303)))
 (let (($x281 (and (and (and (and (and (and $x34 $x282) $x204) $x264) $x250) $x272) $x256)))
 (let (($x339 (and (and $x281 $x299) $x302)))
 (let (($x215 (= $x339 true)))
 (let ((?x132 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x295 (= (_ bv0 3) ?x132)))
 (let (($x229 (= $x295 true)))
 (let (($x260 (= $x229 true)))
 (let (($x40 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x40 true)))
 (let (($x171 (= $x184 true)))
 (let (($x179 (= $x171 true)))
 (let (($x83 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x126 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x126) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x126))))
 (let (($x134 (and true $x232)))
 (let (($x21 (and $x232 $x134)))
 (let (($x42 (= (bvand ?x105 (_ bv4294967288 32)) ?x105)))
 (let (($x59 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x41 (and $x59 $x42)))
 (let (($x117 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x130 (and (and (and (and (and $x134 $x117) $x59) $x41) $x21) $x83)))
 (let (($x160 (= true $x130)))
 (let (($x123 (not $x110)))
 (let (($x55 (=> $x123 $x160)))
 (let (($x186 (= $x55 true)))
 (let (($x175 (= $x186 true)))
 (let (($x226 (= $x175 true)))
 (let (($x180 (= $x123 true)))
 (let (($x125 (= $x180 true)))
 (let (($x39 (= $x125 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x67)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x56 $x17)))
 (let (($x163 (and $x58 $x27)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x93 $x163)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x227 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x7)))))))
 (let (($x135 (and $x227 $x218)))
 (let (($x109 (= $x135 true)))
 (let (($x231 (= $x109 true)))
 (let (($x96 (= $x231 true)))
 (let (($x36 (and $x96 $x39)))
 (let (($x152 (and $x36 $x226)))
 (let (($x174 (and $x152 $x179)))
 (let (($x145 (and $x174 $x260)))
 (let (($x116 (and $x145 $x215)))
 (let (($x458 (and $x116 $x457)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x459 (and $x11 $x458)))
 (let (($x162 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd ?x28 (_ bv3 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x103 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x162)))))))
 (let (($x29 (=> (and $x123 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x155 $x162)))))))
 (let (($x20 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x89 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x81 (_ bv1 32))) (or false (or false (and true (or $x61 $x20)))))))
 (let (($x33 (=> (and $x123 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x81 (_ bv1 32)))) (or false (or false (and true (or $x61 $x20)))))))
 (let (($x99 (and $x33 $x29)))
 (let (($x460 (and $x99 $x459)))
 (let (($x503 (=> $x460 $x502)))
 (not $x503)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var958X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x486 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var958X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x487 (concat ?x486 (select input.dst.llvm-mem (bvadd input.ind-%var958X (_ bv4 32))))))
 (let ((?x489 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var958X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x492 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var958X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x493 (concat ?x492 (concat ?x489 ?x487))))
 (let (($x494 (= ?x493 ?x493)))
 (let (($x276 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x94 (ite $x276 (_ bv0 32) (_ bv1 32))))
 (let (($x70 (bvuge ?x94 (_ bv1 32))))
 (let (($x495 (=> $x70 $x494)))
 (let ((?x474 (concat (select input.dst.llvm-mem (bvadd input.ind-%var958X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var958X))))
 (let ((?x477 (concat (select input.dst.llvm-mem (bvadd input.ind-%var958X (_ bv2 32))) ?x474)))
 (let ((?x480 (concat (select input.dst.llvm-mem (bvadd input.ind-%var958X (_ bv3 32))) ?x477)))
 (let (($x481 (= ?x480 ?x480)))
 (let (($x482 (=> $x70 $x481)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x19))))
 (let (($x464 (= (_ bv0 32) ?x105)))
 (let ((?x465 (ite $x464 (_ bv0 32) (_ bv1 32))))
 (let (($x468 (bvuge ?x465 (_ bv1 32))))
 (let (($x469 (= $x70 $x468)))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let (($x189 (= ?x94 (_ bv0 32))))
 (let (($x467 (= $x189 $x466)))
 (let (($x497 (and (and (=> $x189 (= false false)) (= input.dst.llvm-%l ?x105)) $x467)))
 (let (($x500 (and (and (and $x497 $x469) $x482) $x495)))
 (let (($x461 (= true true)))
 (let (($x501 (and $x461 $x500)))
 (let (($x502 (= $x501 true)))
 (let ((?x81 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x331))))
 (let ((?x358 (bvadd ?x335 (_ bv4 32))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv1 32))) (select input.dst.llvm-mem ?x358))))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv2 32))) ?x362))))
 (let ((?x389 (bvadd ?x368 (_ bv4 32))))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv1 32))) (select input.dst.llvm-mem ?x389))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv2 32))) ?x393))))
 (let ((?x408 (bvadd ?x399 (_ bv4 32))))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv1 32))) (select input.dst.llvm-mem ?x408))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv2 32))) ?x412))))
 (let (($x419 (= (_ bv0 32) ?x418)))
 (let ((?x420 (ite $x419 (_ bv0 32) (_ bv1 32))))
 (let (($x436 (= ?x420 (_ bv0 32))))
 (let (($x245 (= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x437 (= $x245 $x436)))
 (let (($x12 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x187 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x46 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x30 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x143 (and $x30 $x46)))
 (let (($x239 (and $x143 $x187)))
 (let (($x26 (and $x239 $x12)))
 (let (($x438 (=> $x26 $x437)))
 (let ((?x427 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv1 32))) (select input.dst.llvm-mem ?x399))))
 (let ((?x433 (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x399 (_ bv2 32))) ?x427))))
 (let (($x434 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x433)))
 (let (($x435 (=> $x26 $x434)))
 (let (($x421 (bvuge ?x420 (_ bv1 32))))
 (let (($x269 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x422 (= $x269 $x421)))
 (let (($x423 (=> $x26 $x422)))
 (let (($x400 (= (_ bv0 32) ?x399)))
 (let ((?x401 (ite $x400 (_ bv0 32) (_ bv1 32))))
 (let (($x405 (bvuge ?x401 (_ bv1 32))))
 (let (($x406 (= $x12 $x405)))
 (let (($x407 (=> $x239 $x406)))
 (let (($x402 (= ?x401 (_ bv0 32))))
 (let (($x31 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x403 (= $x31 $x402)))
 (let (($x404 (=> $x239 $x403)))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd ?x368 (_ bv1 32))) (select input.dst.llvm-mem ?x368))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x368 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x368 (_ bv2 32))) ?x380))))
 (let (($x387 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x386)))
 (let (($x388 (=> $x239 $x387)))
 (let (($x369 (= (_ bv0 32) ?x368)))
 (let ((?x370 (ite $x369 (_ bv0 32) (_ bv1 32))))
 (let (($x374 (bvuge ?x370 (_ bv1 32))))
 (let (($x375 (= $x187 $x374)))
 (let (($x376 (=> $x143 $x375)))
 (let (($x371 (= ?x370 (_ bv0 32))))
 (let (($x271 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x372 (= $x271 $x371)))
 (let (($x373 (=> $x143 $x372)))
 (let ((?x349 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x349))))
 (let (($x356 (= input.spec-%var-l-1.2.1.2.0 ?x355)))
 (let (($x357 (=> $x143 $x356)))
 (let (($x336 (= (_ bv0 32) ?x335)))
 (let ((?x337 (ite $x336 (_ bv0 32) (_ bv1 32))))
 (let (($x345 (bvuge ?x337 (_ bv1 32))))
 (let (($x346 (= $x46 $x345)))
 (let (($x161 (=> $x30 $x346)))
 (let (($x342 (= ?x337 (_ bv0 32))))
 (let (($x205 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x343 (= $x205 $x342)))
 (let (($x344 (=> $x30 $x343)))
 (let ((?x32 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x320 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x321 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x86 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x324 (concat (select input.dst.llvm-mem ?x86) (concat ?x321 (concat ?x320 ?x32)))))
 (let (($x341 (= input.spec-%var-l-1.2.0 ?x324)))
 (let (($x325 (=> $x30 $x341)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x340 (ite $x110 (_ bv0 32) (_ bv1 32))))
 (let (($x228 (bvuge ?x340 (_ bv1 32))))
 (let (($x137 (= $x30 $x228)))
 (let (($x108 (= ?x340 (_ bv0 32))))
 (let (($x167 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x322 (= $x167 $x108)))
 (let (($x194 (= false false)))
 (let (($x311 (and $x143 $x271)))
 (let (($x302 (=> $x311 $x194)))
 (let (($x38 (and $x30 $x205)))
 (let (($x250 (=> $x38 $x194)))
 (let (($x298 (and $x26 $x245)))
 (let (($x282 (=> $x298 $x194)))
 (let (($x441 (and (and (and (=> $x167 $x194) (=> (and $x239 $x31) $x194)) $x282) $x250)))
 (let (($x447 (and (and (and (and (and (and $x441 $x302) $x322) $x137) $x325) $x344) $x161)))
 (let (($x453 (and (and (and (and (and (and $x447 $x357) $x373) $x376) $x388) $x404) $x407)))
 (let (($x456 (and (and (and $x453 $x423) $x435) $x438)))
 (let (($x457 (= $x456 true)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x64 (concat ?x200 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x220 (concat ?x237 (concat ?x52 ?x64))))
 (let ((?x268 (bvadd ?x220 (_ bv4 32))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem ?x268))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv2 32))) ?x178))))
 (let (($x262 (= (_ bv0 32) ?x257)))
 (let ((?x314 (ite $x262 (_ bv0 32) (_ bv1 32))))
 (let (($x283 (bvuge ?x314 (_ bv1 32))))
 (let (($x310 (= $x187 $x283)))
 (let (($x299 (=> $x143 $x310)))
 (let (($x300 (= ?x314 (_ bv0 32))))
 (let (($x275 (= $x271 $x300)))
 (let (($x256 (=> $x143 $x275)))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x154))))
 (let (($x315 (= input.spec-%var-l-1.2.1.2.0 ?x270)))
 (let (($x272 (=> $x143 $x315)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x257 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x257 (_ bv4 32))))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x257 (_ bv4 32)) (_ bv2 32))) ?x151)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x257 (_ bv4 32)) (_ bv3 32))) ?x223)))
 (let ((?x24 (bvadd ?x236 (_ bv4 32))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv1 32))) (select input.dst.llvm-mem ?x24))))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv2 32))) ?x212))))
 (let (($x60 (= (_ bv0 32) ?x308)))
 (let ((?x263 (ite $x60 (_ bv0 32) (_ bv1 32))))
 (let (($x252 (bvuge ?x263 (_ bv1 32))))
 (let (($x144 (= $x269 $x252)))
 (let (($x264 (=> $x26 $x144)))
 (let (($x217 (= ?x263 (_ bv0 32))))
 (let (($x309 (= $x245 $x217)))
 (let (($x204 (=> $x26 $x309)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x293))))
 (let (($x18 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x202)))
 (let (($x303 (=> $x26 $x18)))
 (let (($x192 (= (_ bv0 32) ?x236)))
 (let ((?x244 (ite $x192 (_ bv0 32) (_ bv1 32))))
 (let (($x51 (bvuge ?x244 (_ bv1 32))))
 (let (($x35 (= $x12 $x51)))
 (let (($x312 (=> $x239 $x35)))
 (let (($x267 (and $x239 $x31)))
 (let (($x288 (=> $x267 $x194)))
 (let (($x306 (= ?x244 (_ bv0 32))))
 (let (($x241 (= $x31 $x306)))
 (let (($x75 (=> $x239 $x241)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x177))))
 (let (($x133 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x242)))
 (let (($x305 (=> $x239 $x133)))
 (let (($x191 (= (_ bv0 32) ?x220)))
 (let ((?x146 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x146 (_ bv1 32))))
 (let (($x273 (= $x46 $x182)))
 (let (($x274 (=> $x30 $x273)))
 (let (($x219 (= ?x146 (_ bv0 32))))
 (let (($x172 (= $x205 $x219)))
 (let (($x14 (=> $x30 $x172)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x112)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x209)))
 (let (($x206 (= input.spec-%var-l-1.2.0 ?x45)))
 (let (($x57 (=> $x30 $x206)))
 (let (($x316 (and (and (and (and (= $x167 $x189) (=> $x167 $x194)) (= $x30 $x70)) $x57) $x14)))
 (let (($x34 (and (and (and (and (and (and $x316 $x274) $x305) $x75) $x288) $x312) $x303)))
 (let (($x281 (and (and (and (and (and (and $x34 $x282) $x204) $x264) $x250) $x272) $x256)))
 (let (($x339 (and (and $x281 $x299) $x302)))
 (let (($x215 (= $x339 true)))
 (let ((?x132 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x295 (= (_ bv0 3) ?x132)))
 (let (($x229 (= $x295 true)))
 (let (($x260 (= $x229 true)))
 (let (($x40 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x40 true)))
 (let (($x171 (= $x184 true)))
 (let (($x179 (= $x171 true)))
 (let (($x83 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x126 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x126) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x126))))
 (let (($x134 (and true $x232)))
 (let (($x21 (and $x232 $x134)))
 (let (($x42 (= (bvand ?x105 (_ bv4294967288 32)) ?x105)))
 (let (($x59 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x41 (and $x59 $x42)))
 (let (($x117 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x130 (and (and (and (and (and $x134 $x117) $x59) $x41) $x21) $x83)))
 (let (($x160 (= true $x130)))
 (let (($x123 (not $x110)))
 (let (($x55 (=> $x123 $x160)))
 (let (($x186 (= $x55 true)))
 (let (($x175 (= $x186 true)))
 (let (($x226 (= $x175 true)))
 (let (($x180 (= $x123 true)))
 (let (($x125 (= $x180 true)))
 (let (($x39 (= $x125 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x67)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x56 $x17)))
 (let (($x163 (and $x58 $x27)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x93 $x163)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x227 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x7)))))))
 (let (($x135 (and $x227 $x218)))
 (let (($x109 (= $x135 true)))
 (let (($x231 (= $x109 true)))
 (let (($x96 (= $x231 true)))
 (let (($x36 (and $x96 $x39)))
 (let (($x152 (and $x36 $x226)))
 (let (($x174 (and $x152 $x179)))
 (let (($x145 (and $x174 $x260)))
 (let (($x116 (and $x145 $x215)))
 (let (($x458 (and $x116 $x457)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x459 (and $x11 $x458)))
 (let (($x162 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd ?x28 (_ bv3 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x103 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x162)))))))
 (let (($x29 (=> (and $x123 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x155 $x162)))))))
 (let (($x20 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x89 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x81 (_ bv1 32))) (or false (or false (and true (or $x61 $x20)))))))
 (let (($x33 (=> (and $x123 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x81 (_ bv1 32)))) (or false (or false (and true (or $x61 $x20)))))))
 (let (($x99 (and $x33 $x29)))
 (let (($x460 (and $x99 $x459)))
 (let (($x503 (=> $x460 $x502)))
 (not $x503)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00002000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.ind-%var958X () (_ BitVec 32)
    #x00000000)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000009) #x00
    (ite (= x!0 #x00000104) #x00
    (ite (= x!0 #x00000085) #x00
    (ite (= x!0 #x00010001) #x00
    (ite (= x!0 #x00010008) #x00
    (ite (= x!0 #x00010007) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x00000080) #x01
    (ite (= x!0 #x00000107) #x00
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x00000106) #x00
    (ite (= x!0 #x00000100) #x01
    (ite (= x!0 #x01000001) #x00
    (ite (= x!0 #x00010002) #x00
    (ite (= x!0 #x0000000c) #x00
    (ite (= x!0 #x01000003) #x00
    (ite (= x!0 #x01000007) #x00
    (ite (= x!0 #x00000087) #x00
    (ite (= x!0 #x00000081) #x01
    (ite (= x!0 #x01000000) #x00
    (ite (= x!0 #x00010003) #x00
    (ite (= x!0 #x00010005) #x00
    (ite (= x!0 #x01000005) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x00000005) #x01
    (ite (= x!0 #x00000082) #x01
    (ite (= x!0 #x00000086) #x00
    (ite (= x!0 #x01000002) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00000105) #x00
    (ite (= x!0 #x01000004) #x80
    (ite (= x!0 #x00000007) #x01
    (ite (= x!0 #x00000083) #x01
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x00000103) #x01
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x00010004) #x00
    (ite (= x!0 #x0000000d) #x00
    (ite (= x!0 #x00000084) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x01
    (ite (= x!0 #x00000102) #x01
    (ite (= x!0 #x00010006) #x01
    (ite (= x!0 #x00000101) #x01
    (ite (= x!0 #x01000006) #x00
      #x00)))))))))))))))))))))))))))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun input.ind-%var958X () (_ BitVec 32)
    #x00000000)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #x0001c404) #x00
    (ite (= x!0 #x00000006) #xff
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #x0001c407) #x00
    (ite (= x!0 #x0001c401) #x00
    (ite (= x!0 #x0001c400) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #xfffffffe) #x01
    (ite (= x!0 #x0001c405) #x00
    (ite (= x!0 #x0001c406) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000004) #xf8
    (ite (= x!0 #x0001c402) #x00
    (ite (= x!0 #x00000007) #xff
    (ite (= x!0 #x0001c403) #x00
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #xfffffffd) #xc4
      #x00)))))))))))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x168))))
 (let ((?x181 ((_ extract 2 0) ?x128)))
 (let (($x193 (= (_ bv0 3) ?x181)))
 (let (($x176 (= $x193 true)))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x52 (concat ?x230 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x220 (concat ?x225 (concat ?x200 ?x52))))
 (let (($x191 (= (_ bv0 32) ?x220)))
 (let ((?x146 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x146 (_ bv1 32))))
 (let (($x316 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x182 (= $x316 $x46)))
 (let (($x5 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x273 (=> $x5 $x182)))
 (let (($x219 (= ?x146 (_ bv0 32))))
 (let (($x205 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x172 (= $x205 $x219)))
 (let (($x14 (=> $x5 $x172)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x87)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x112)))
 (let (($x57 (= input.spec-%var-l-1.2.0 ?x206)))
 (let (($x278 (=> $x5 $x57)))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x194 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x97 (bvuge ?x194 (_ bv1 32))))
 (let (($x9 (= $x5 $x97)))
 (let (($x30 (= false false)))
 (let (($x94 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x94 $x30)))
 (let (($x266 (= ?x194 (_ bv0 32))))
 (let (($x284 (= $x94 $x266)))
 (let (($x187 (and (and (and (and (and $x284 $x70) $x9) $x278) $x14) $x273)))
 (let (($x239 (= $x187 true)))
 (let ((?x260 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x145 (= (_ bv0 3) ?x260)))
 (let (($x233 (= $x145 true)))
 (let (($x167 (= $x233 true)))
 (let (($x179 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x174 (= $x179 true)))
 (let (($x197 (= $x174 true)))
 (let (($x132 (= $x197 true)))
 (let (($x124 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x80 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x122 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x80) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x80))))
 (let (($x62 (and true $x122)))
 (let (($x21 (and $x122 $x62)))
 (let (($x41 (= (bvand ?x128 (_ bv4294967288 32)) ?x128)))
 (let (($x159 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x169 (and $x159 $x41)))
 (let (($x166 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv4 32))) (bvult ?x95 (bvsub ?x95 (_ bv4 32))))))
 (let (($x186 (and (and (and (and (and $x62 $x166) $x159) $x169) $x21) $x124)))
 (let (($x175 (= true $x186)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (not $x110)))
 (let (($x226 (=> $x123 $x175)))
 (let (($x152 (= $x226 true)))
 (let (($x213 (= $x152 true)))
 (let (($x40 (= $x213 true)))
 (let (($x36 (= $x123 true)))
 (let (($x148 (= $x36 true)))
 (let (($x126 (= $x148 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x218)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x58 $x27)))
 (let (($x109 (and $x163 $x135)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x119 $x109)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x88)))))))
 (let (($x96 (and $x17 $x231)))
 (let (($x180 (= $x96 true)))
 (let (($x125 (= $x180 true)))
 (let (($x39 (= $x125 true)))
 (let (($x22 (and $x39 $x126)))
 (let (($x184 (and $x22 $x40)))
 (let (($x295 (and $x184 $x132)))
 (let (($x188 (and $x295 $x167)))
 (let (($x199 (and $x188 $x239)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x268 (and $x142 $x199)))
 (let (($x129 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd ?x95 (_ bv3 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x11 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x129)))))))
 (let (($x77 (=> (and $x123 (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x25 $x129)))))))
 (let (($x118 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x150 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x115 (=> $x150 (or false (or false (and true (or $x73 $x118)))))))
 (let (($x140 (=> (and $x123 $x150) (or false (or false (and true (or $x73 $x118)))))))
 (let (($x156 (and $x140 $x77)))
 (let (($x297 (and $x156 $x268)))
 (let (($x10 (=> $x297 $x176)))
 (not $x10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x95 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x168))))
 (let ((?x181 ((_ extract 2 0) ?x128)))
 (let (($x193 (= (_ bv0 3) ?x181)))
 (let (($x176 (= $x193 true)))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x52 (concat ?x230 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x220 (concat ?x225 (concat ?x200 ?x52))))
 (let (($x191 (= (_ bv0 32) ?x220)))
 (let ((?x146 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x46 (bvuge ?x146 (_ bv1 32))))
 (let (($x316 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x182 (= $x316 $x46)))
 (let (($x5 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x273 (=> $x5 $x182)))
 (let (($x219 (= ?x146 (_ bv0 32))))
 (let (($x205 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x172 (= $x205 $x219)))
 (let (($x14 (=> $x5 $x172)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x87)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x112)))
 (let (($x57 (= input.spec-%var-l-1.2.0 ?x206)))
 (let (($x278 (=> $x5 $x57)))
 (let (($x190 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x194 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x97 (bvuge ?x194 (_ bv1 32))))
 (let (($x9 (= $x5 $x97)))
 (let (($x30 (= false false)))
 (let (($x94 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x94 $x30)))
 (let (($x266 (= ?x194 (_ bv0 32))))
 (let (($x284 (= $x94 $x266)))
 (let (($x187 (and (and (and (and (and $x284 $x70) $x9) $x278) $x14) $x273)))
 (let (($x239 (= $x187 true)))
 (let ((?x260 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x145 (= (_ bv0 3) ?x260)))
 (let (($x233 (= $x145 true)))
 (let (($x167 (= $x233 true)))
 (let (($x179 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x174 (= $x179 true)))
 (let (($x197 (= $x174 true)))
 (let (($x132 (= $x197 true)))
 (let (($x124 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x80 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x122 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x80) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x80))))
 (let (($x62 (and true $x122)))
 (let (($x21 (and $x122 $x62)))
 (let (($x41 (= (bvand ?x128 (_ bv4294967288 32)) ?x128)))
 (let (($x159 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x169 (and $x159 $x41)))
 (let (($x166 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv4 32))) (bvult ?x95 (bvsub ?x95 (_ bv4 32))))))
 (let (($x186 (and (and (and (and (and $x62 $x166) $x159) $x169) $x21) $x124)))
 (let (($x175 (= true $x186)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (not $x110)))
 (let (($x226 (=> $x123 $x175)))
 (let (($x152 (= $x226 true)))
 (let (($x213 (= $x152 true)))
 (let (($x40 (= $x213 true)))
 (let (($x36 (= $x123 true)))
 (let (($x148 (= $x36 true)))
 (let (($x126 (= $x148 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x218)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (and $x58 $x27)))
 (let (($x109 (and $x163 $x135)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x119 $x109)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x88)))))))
 (let (($x96 (and $x17 $x231)))
 (let (($x180 (= $x96 true)))
 (let (($x125 (= $x180 true)))
 (let (($x39 (= $x125 true)))
 (let (($x22 (and $x39 $x126)))
 (let (($x184 (and $x22 $x40)))
 (let (($x295 (and $x184 $x132)))
 (let (($x188 (and $x295 $x167)))
 (let (($x199 (and $x188 $x239)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x268 (and $x142 $x199)))
 (let (($x129 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd ?x95 (_ bv3 32))))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x11 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x129)))))))
 (let (($x77 (=> (and $x123 (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x25 $x129)))))))
 (let (($x118 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x150 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x115 (=> $x150 (or false (or false (and true (or $x73 $x118)))))))
 (let (($x140 (=> (and $x123 $x150) (or false (or false (and true (or $x73 $x118)))))))
 (let (($x156 (and $x140 $x77)))
 (let (($x297 (and $x156 $x268)))
 (let (($x10 (=> $x297 $x176)))
 (not $x10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x216))))
 (let (($x10 (bvule ?x85 (_ bv4294967294 32))))
 (let (($x198 (= $x10 true)))
 (let (($x8 (= $x198 true)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x200 (concat ?x50 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x220 (concat ?x104 (concat ?x230 ?x200))))
 (let (($x191 (= (_ bv0 32) ?x220)))
 (let ((?x146 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x316 (bvuge ?x146 (_ bv1 32))))
 (let (($x53 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x46 (= $x53 $x316)))
 (let (($x9 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x182 (=> $x9 $x46)))
 (let (($x219 (= ?x146 (_ bv0 32))))
 (let (($x205 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x172 (= $x205 $x219)))
 (let (($x14 (=> $x9 $x172)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x235)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x87)))
 (let (($x278 (= input.spec-%var-l-1.2.0 ?x57)))
 (let (($x143 (=> $x9 $x278)))
 (let (($x284 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x30 (ite $x284 (_ bv0 32) (_ bv1 32))))
 (let (($x265 (bvuge ?x30 (_ bv1 32))))
 (let (($x203 (= $x9 $x265)))
 (let (($x5 (= false false)))
 (let (($x194 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x97 (=> $x194 $x5)))
 (let (($x70 (= ?x30 (_ bv0 32))))
 (let (($x274 (= $x194 $x70)))
 (let (($x268 (and (and (and (and (and $x274 $x97) $x203) $x143) $x14) $x182)))
 (let (($x297 (= $x268 true)))
 (let ((?x167 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x188 (= (_ bv0 3) ?x167)))
 (let (($x276 (= $x188 true)))
 (let (($x94 (= $x276 true)))
 (let (($x132 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x295 (= $x132 true)))
 (let (($x229 (= $x295 true)))
 (let (($x260 (= $x229 true)))
 (let (($x72 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x139 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x139) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x139))))
 (let (($x63 (and true $x157)))
 (let (($x21 (and $x157 $x63)))
 (let (($x169 (= (bvand ?x85 (_ bv4294967288 32)) ?x85)))
 (let (($x101 (= (bvand ?x150 (_ bv4294967292 32)) ?x150)))
 (let (($x160 (and $x101 $x169)))
 (let (($x44 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x150 (bvsub ?x150 (_ bv4 32))) (bvult ?x150 (bvsub ?x150 (_ bv4 32))))))
 (let (($x152 (and (and (and (and (and $x63 $x44) $x101) $x160) $x21) $x72)))
 (let (($x213 (= true $x152)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (not $x110)))
 (let (($x40 (=> $x123 $x213)))
 (let (($x184 (= $x40 true)))
 (let (($x171 (= $x184 true)))
 (let (($x179 (= $x171 true)))
 (let (($x22 (= $x123 true)))
 (let (($x232 (= $x22 true)))
 (let (($x80 (= $x232 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x231)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x218)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x163 $x135)))
 (let (($x180 (and $x109 $x96)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x65 $x180)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x56)))))))
 (let (($x39 (and $x27 $x125)))
 (let (($x36 (= $x39 true)))
 (let (($x148 (= $x36 true)))
 (let (($x126 (= $x148 true)))
 (let (($x134 (and $x126 $x80)))
 (let (($x174 (and $x134 $x179)))
 (let (($x145 (and $x174 $x260)))
 (let (($x189 (and $x145 $x94)))
 (let (($x181 (and $x189 $x297)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x193 (and $x120 $x181)))
 (let (($x29 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x150 (_ bv3 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x142 (=> (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x29)))))))
 (let (($x107 (=> (and $x123 (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x103 $x29)))))))
 (let (($x33 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x155 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x162 (=> $x155 (or false (or false (and true (or $x89 $x33)))))))
 (let (($x86 (=> (and $x123 $x155) (or false (or false (and true (or $x89 $x33)))))))
 (let (($x71 (and $x86 $x107)))
 (let (($x176 (and $x71 $x193)))
 (let (($x74 (=> $x176 $x8)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x150 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x216))))
 (let (($x10 (bvule ?x85 (_ bv4294967294 32))))
 (let (($x198 (= $x10 true)))
 (let (($x8 (= $x198 true)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x200 (concat ?x50 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x220 (concat ?x104 (concat ?x230 ?x200))))
 (let (($x191 (= (_ bv0 32) ?x220)))
 (let ((?x146 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x316 (bvuge ?x146 (_ bv1 32))))
 (let (($x53 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x46 (= $x53 $x316)))
 (let (($x9 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x182 (=> $x9 $x46)))
 (let (($x219 (= ?x146 (_ bv0 32))))
 (let (($x205 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x172 (= $x205 $x219)))
 (let (($x14 (=> $x9 $x172)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x235)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x87)))
 (let (($x278 (= input.spec-%var-l-1.2.0 ?x57)))
 (let (($x143 (=> $x9 $x278)))
 (let (($x284 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x30 (ite $x284 (_ bv0 32) (_ bv1 32))))
 (let (($x265 (bvuge ?x30 (_ bv1 32))))
 (let (($x203 (= $x9 $x265)))
 (let (($x5 (= false false)))
 (let (($x194 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x97 (=> $x194 $x5)))
 (let (($x70 (= ?x30 (_ bv0 32))))
 (let (($x274 (= $x194 $x70)))
 (let (($x268 (and (and (and (and (and $x274 $x97) $x203) $x143) $x14) $x182)))
 (let (($x297 (= $x268 true)))
 (let ((?x167 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x188 (= (_ bv0 3) ?x167)))
 (let (($x276 (= $x188 true)))
 (let (($x94 (= $x276 true)))
 (let (($x132 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x295 (= $x132 true)))
 (let (($x229 (= $x295 true)))
 (let (($x260 (= $x229 true)))
 (let (($x72 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x139 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x139) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x139))))
 (let (($x63 (and true $x157)))
 (let (($x21 (and $x157 $x63)))
 (let (($x169 (= (bvand ?x85 (_ bv4294967288 32)) ?x85)))
 (let (($x101 (= (bvand ?x150 (_ bv4294967292 32)) ?x150)))
 (let (($x160 (and $x101 $x169)))
 (let (($x44 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x150 (bvsub ?x150 (_ bv4 32))) (bvult ?x150 (bvsub ?x150 (_ bv4 32))))))
 (let (($x152 (and (and (and (and (and $x63 $x44) $x101) $x160) $x21) $x72)))
 (let (($x213 (= true $x152)))
 (let (($x110 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x123 (not $x110)))
 (let (($x40 (=> $x123 $x213)))
 (let (($x184 (= $x40 true)))
 (let (($x171 (= $x184 true)))
 (let (($x179 (= $x171 true)))
 (let (($x22 (= $x123 true)))
 (let (($x232 (= $x22 true)))
 (let (($x80 (= $x232 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x231)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x218)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x163 $x135)))
 (let (($x180 (and $x109 $x96)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x65 $x180)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x56)))))))
 (let (($x39 (and $x27 $x125)))
 (let (($x36 (= $x39 true)))
 (let (($x148 (= $x36 true)))
 (let (($x126 (= $x148 true)))
 (let (($x134 (and $x126 $x80)))
 (let (($x174 (and $x134 $x179)))
 (let (($x145 (and $x174 $x260)))
 (let (($x189 (and $x145 $x94)))
 (let (($x181 (and $x189 $x297)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x193 (and $x120 $x181)))
 (let (($x29 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd ?x150 (_ bv3 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x142 (=> (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x29)))))))
 (let (($x107 (=> (and $x123 (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x103 $x29)))))))
 (let (($x33 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x155 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x162 (=> $x155 (or false (or false (and true (or $x89 $x33)))))))
 (let (($x86 (=> (and $x123 $x155) (or false (or false (and true (or $x89 $x33)))))))
 (let (($x71 (and $x86 $x107)))
 (let (($x176 (and $x71 $x193)))
 (let (($x74 (=> $x176 $x8)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var1041X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x265 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1041X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x203 (concat ?x265 (select input.dst.llvm-mem (bvadd input.ind-%var1041X (_ bv4 32))))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1041X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1041X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x170 (concat ?x208 (concat ?x209 ?x203))))
 (let (($x240 (= ?x170 ?x170)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x39 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x80 (bvuge ?x39 (_ bv1 32))))
 (let (($x234 (=> $x80 $x240)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1041X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var1041X))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1041X (_ bv2 32))) ?x189)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1041X (_ bv3 32))) ?x266)))
 (let (($x274 (= ?x70 ?x70)))
 (let (($x5 (=> $x80 $x274)))
 (let (($x233 (= $x80 $x80)))
 (let (($x36 (= ?x39 (_ bv0 32))))
 (let (($x145 (= $x36 $x36)))
 (let (($x260 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x126 (= false false)))
 (let (($x229 (=> $x36 $x126)))
 (let (($x278 (and (and (and (and (and $x229 $x260) $x145) $x233) $x5) $x234)))
 (let (($x295 (= true true)))
 (let (($x143 (and $x295 $x278)))
 (let (($x239 (= $x143 true)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x54 (concat ?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x42 (concat ?x85 (concat ?x37 ?x54))))
 (let (($x41 (= (_ bv0 32) ?x42)))
 (let ((?x169 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x169 (_ bv1 32))))
 (let (($x226 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x72 (= $x226 $x55)))
 (let (($x232 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x152 (=> $x232 $x72)))
 (let (($x160 (= ?x169 (_ bv0 32))))
 (let (($x186 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x175 (= $x186 $x160)))
 (let (($x21 (=> $x232 $x175)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x63)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x83)))
 (let (($x159 (= input.spec-%var-l-1.2.0 ?x124)))
 (let (($x130 (=> $x232 $x159)))
 (let (($x134 (= $x232 $x80)))
 (let (($x180 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (=> $x180 $x126)))
 (let (($x148 (= $x180 $x36)))
 (let (($x179 (and (and (and (and (and $x148 $x22) $x134) $x130) $x21) $x152)))
 (let (($x174 (= $x179 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x119 (concat ?x56 (concat ?x227 ?x120)))))
 (let (($x27 (= input.dst.llvm-%l ?x58)))
 (let (($x107 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x48 (and $x107 $x27)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x103)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x150 $x165)))
 (let (($x99 (and $x106 $x29)))
 (let (($x214 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x214 $x99)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x33)))))))
 (let (($x218 (and (and (and $x86 true) $x11) $x48)))
 (let (($x135 (= $x218 true)))
 (let (($x109 (= $x135 true)))
 (let (($x231 (= $x109 true)))
 (let (($x197 (and $x231 $x174)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x132 (and $x110 $x197)))
 (let (($x82 (=> $x132 $x239)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var1041X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x265 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1041X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x203 (concat ?x265 (select input.dst.llvm-mem (bvadd input.ind-%var1041X (_ bv4 32))))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1041X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1041X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x170 (concat ?x208 (concat ?x209 ?x203))))
 (let (($x240 (= ?x170 ?x170)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x39 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x80 (bvuge ?x39 (_ bv1 32))))
 (let (($x234 (=> $x80 $x240)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1041X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var1041X))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1041X (_ bv2 32))) ?x189)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1041X (_ bv3 32))) ?x266)))
 (let (($x274 (= ?x70 ?x70)))
 (let (($x5 (=> $x80 $x274)))
 (let (($x233 (= $x80 $x80)))
 (let (($x36 (= ?x39 (_ bv0 32))))
 (let (($x145 (= $x36 $x36)))
 (let (($x260 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x126 (= false false)))
 (let (($x229 (=> $x36 $x126)))
 (let (($x278 (and (and (and (and (and $x229 $x260) $x145) $x233) $x5) $x234)))
 (let (($x295 (= true true)))
 (let (($x143 (and $x295 $x278)))
 (let (($x239 (= $x143 true)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x54 (concat ?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x42 (concat ?x85 (concat ?x37 ?x54))))
 (let (($x41 (= (_ bv0 32) ?x42)))
 (let ((?x169 (ite $x41 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x169 (_ bv1 32))))
 (let (($x226 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x72 (= $x226 $x55)))
 (let (($x232 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x152 (=> $x232 $x72)))
 (let (($x160 (= ?x169 (_ bv0 32))))
 (let (($x186 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x175 (= $x186 $x160)))
 (let (($x21 (=> $x232 $x175)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x63)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x83)))
 (let (($x159 (= input.spec-%var-l-1.2.0 ?x124)))
 (let (($x130 (=> $x232 $x159)))
 (let (($x134 (= $x232 $x80)))
 (let (($x180 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (=> $x180 $x126)))
 (let (($x148 (= $x180 $x36)))
 (let (($x179 (and (and (and (and (and $x148 $x22) $x134) $x130) $x21) $x152)))
 (let (($x174 (= $x179 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x119 (concat ?x56 (concat ?x227 ?x120)))))
 (let (($x27 (= input.dst.llvm-%l ?x58)))
 (let (($x107 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x48 (and $x107 $x27)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x103)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x150 $x165)))
 (let (($x99 (and $x106 $x29)))
 (let (($x214 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x214 $x99)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x33)))))))
 (let (($x218 (and (and (and $x86 true) $x11) $x48)))
 (let (($x135 (= $x218 true)))
 (let (($x109 (= $x135 true)))
 (let (($x231 (= $x109 true)))
 (let (($x197 (and $x231 $x174)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x132 (and $x110 $x197)))
 (let (($x82 (=> $x132 $x239)))
 (not $x82))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var1060X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1060X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x209 (concat ?x187 (select input.dst.llvm-mem (bvadd input.ind-%var1060X (_ bv4 32))))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1060X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1060X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x170 (concat ?x112 (concat ?x265 ?x209))))
 (let (($x240 (= ?x170 ?x170)))
 (let (($x148 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x126 (ite $x148 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x126 (_ bv1 32))))
 (let (($x234 (=> $x40 $x240)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1060X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var1060X))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1060X (_ bv2 32))) ?x276)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1060X (_ bv3 32))) ?x189)))
 (let (($x5 (= ?x274 ?x274)))
 (let (($x57 (=> $x40 $x5)))
 (let (($x167 (= $x40 $x40)))
 (let (($x22 (= ?x126 (_ bv0 32))))
 (let (($x87 (= $x22 $x22)))
 (let (($x233 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x232 (= false false)))
 (let (($x235 (=> $x22 $x232)))
 (let (($x205 (and (and (and (and (and $x235 $x233) $x87) $x167) $x57) $x234)))
 (let (($x145 (= true true)))
 (let (($x139 (and $x145 $x205)))
 (let (($x123 (= $x139 true)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x13 (concat ?x37 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x41 (concat ?x42 (concat ?x47 ?x13))))
 (let (($x169 (= (_ bv0 32) ?x41)))
 (let ((?x160 (ite $x169 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x160 (_ bv1 32))))
 (let (($x226 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x72 (= $x226 $x55)))
 (let (($x134 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x152 (=> $x134 $x72)))
 (let (($x175 (= ?x160 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x21 (= $x105 $x175)))
 (let (($x171 (=> $x134 $x21)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x157)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x83)))
 (let (($x184 (= input.spec-%var-l-1.2.0 ?x130)))
 (let (($x101 (=> $x134 $x184)))
 (let (($x122 (= $x134 $x40)))
 (let (($x36 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x80 (=> $x36 $x232)))
 (let (($x213 (= $x36 $x22)))
 (let (($x295 (and (and (and (and (and $x213 $x80) $x122) $x101) $x171) $x152)))
 (let (($x229 (= $x295 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x58 (concat ?x120 (concat ?x93 ?x119)))))
 (let (($x48 (= input.dst.llvm-%l ?x27)))
 (let (($x107 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x218 (and $x107 $x48)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x29)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x165)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x25 $x106)))
 (let (($x11 (and $x103 $x99)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x118 $x11)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x140)))))))
 (let (($x231 (and (and (and $x150 true) $x163) $x218)))
 (let (($x96 (= $x231 true)))
 (let (($x180 (= $x96 true)))
 (let (($x125 (= $x180 true)))
 (let (($x260 (and $x125 $x229)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x45 (and $x110 $x260)))
 (let (($x61 (=> $x45 $x123)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var1060X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1060X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x209 (concat ?x187 (select input.dst.llvm-mem (bvadd input.ind-%var1060X (_ bv4 32))))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1060X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var1060X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x170 (concat ?x112 (concat ?x265 ?x209))))
 (let (($x240 (= ?x170 ?x170)))
 (let (($x148 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x126 (ite $x148 (_ bv0 32) (_ bv1 32))))
 (let (($x40 (bvuge ?x126 (_ bv1 32))))
 (let (($x234 (=> $x40 $x240)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1060X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var1060X))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1060X (_ bv2 32))) ?x276)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd input.ind-%var1060X (_ bv3 32))) ?x189)))
 (let (($x5 (= ?x274 ?x274)))
 (let (($x57 (=> $x40 $x5)))
 (let (($x167 (= $x40 $x40)))
 (let (($x22 (= ?x126 (_ bv0 32))))
 (let (($x87 (= $x22 $x22)))
 (let (($x233 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x232 (= false false)))
 (let (($x235 (=> $x22 $x232)))
 (let (($x205 (and (and (and (and (and $x235 $x233) $x87) $x167) $x57) $x234)))
 (let (($x145 (= true true)))
 (let (($x139 (and $x145 $x205)))
 (let (($x123 (= $x139 true)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x13 (concat ?x37 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x41 (concat ?x42 (concat ?x47 ?x13))))
 (let (($x169 (= (_ bv0 32) ?x41)))
 (let ((?x160 (ite $x169 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x160 (_ bv1 32))))
 (let (($x226 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x72 (= $x226 $x55)))
 (let (($x134 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x152 (=> $x134 $x72)))
 (let (($x175 (= ?x160 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x21 (= $x105 $x175)))
 (let (($x171 (=> $x134 $x21)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x157)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x83)))
 (let (($x184 (= input.spec-%var-l-1.2.0 ?x130)))
 (let (($x101 (=> $x134 $x184)))
 (let (($x122 (= $x134 $x40)))
 (let (($x36 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x80 (=> $x36 $x232)))
 (let (($x213 (= $x36 $x22)))
 (let (($x295 (and (and (and (and (and $x213 $x80) $x122) $x101) $x171) $x152)))
 (let (($x229 (= $x295 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x58 (concat ?x120 (concat ?x93 ?x119)))))
 (let (($x48 (= input.dst.llvm-%l ?x27)))
 (let (($x107 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x218 (and $x107 $x48)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x29)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x165)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x25 $x106)))
 (let (($x11 (and $x103 $x99)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x118 $x11)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x115 $x140)))))))
 (let (($x231 (and (and (and $x150 true) $x163) $x218)))
 (let (($x96 (= $x231 true)))
 (let (($x180 (= $x96 true)))
 (let (($x125 (= $x180 true)))
 (let (($x260 (and $x125 $x229)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x45 (and $x110 $x260)))
 (let (($x61 (=> $x45 $x123)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x48 (not $x27)))
 (let (($x305 (= $x48 false)))
 (let (($x301 (= $x305 true)))
 (let ((?x83 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x176))))
 (let (($x81 (= (_ bv0 32) ?x158)))
 (let ((?x127 (ite $x81 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x127 (_ bv1 32))))
 (let (($x257 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x111 (= $x257 $x6)))
 (let (($x225 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x287 (=> $x225 $x111)))
 (let (($x138 (= ?x127 (_ bv0 32))))
 (let (($x268 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x178 (= $x268 $x138)))
 (let (($x277 (=> $x225 $x178)))
 (let ((?x222 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x184 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x53 (concat (select input.dst.llvm-mem ?x184) (concat ?x172 (concat ?x191 ?x222)))))
 (let (($x316 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x53)))
 (let (($x46 (=> $x225 $x316)))
 (let ((?x52 (ite $x27 (_ bv0 32) (_ bv1 32))))
 (let (($x50 (bvuge ?x52 (_ bv1 32))))
 (let (($x64 (= $x225 $x50)))
 (let (($x72 (= false false)))
 (let (($x153 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x230 (=> $x153 $x72)))
 (let (($x104 (= ?x52 (_ bv0 32))))
 (let (($x237 (= $x153 $x104)))
 (let (($x177 (and (and (and (and (and $x237 $x230) $x64) $x46) $x277) $x287)))
 (let (($x195 (= $x177 true)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x57 (concat ?x5 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x265 (concat ?x9 (concat ?x97 ?x57))))
 (let (($x208 (= (_ bv0 32) ?x265)))
 (let ((?x187 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x240 (bvuge ?x187 (_ bv1 32))))
 (let (($x170 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x234 (= $x170 $x240)))
 (let (($x295 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x205 (=> $x295 $x234)))
 (let (($x206 (= ?x187 (_ bv0 32))))
 (let (($x30 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x209 (= $x30 $x206)))
 (let (($x273 (=> $x295 $x209)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x87)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x284)))
 (let (($x188 (= input.spec-%var-l-1.2.0 ?x94)))
 (let (($x190 (=> $x295 $x188)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x132 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x229 (bvuge ?x132 (_ bv1 32))))
 (let (($x260 (= $x295 $x229)))
 (let (($x175 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x152 (=> $x175 $x72)))
 (let (($x226 (= ?x132 (_ bv0 32))))
 (let (($x55 (= $x175 $x226)))
 (let (($x44 (and (and (and (and (and $x55 $x152) $x260) $x190) $x273) $x205)))
 (let (($x78 (= $x44 true)))
 (let ((?x85 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x13 (= (_ bv0 3) ?x85)))
 (let (($x54 (= $x13 true)))
 (let (($x41 (= $x54 true)))
 (let (($x197 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x42 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x83 (_ bv1 32))) (or false (or false (and true (or $x101 $x197)))))))
 (let (($x166 (=> (and $x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x83 (_ bv1 32)))) (or false (or false (and true (or $x101 $x197)))))))
 (let (($x157 (= $x166 true)))
 (let (($x168 (= $x157 true)))
 (let (($x47 (= $x168 true)))
 (let (($x159 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x62 (= $x159 true)))
 (let (($x63 (= $x62 true)))
 (let (($x84 (= $x63 true)))
 (let ((?x231 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x22 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x231 (_ bv3 32)))))
 (let (($x40 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x22)))))))
 (let (($x180 (=> (and $x48 (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x126 $x22)))))))
 (let (($x125 (= $x180 true)))
 (let (($x122 (= $x125 true)))
 (let (($x174 (= $x122 true)))
 (let (($x23 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x93 (= $x23 true)))
 (let (($x119 (= $x93 true)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x58 (= $x17 true)))
 (let (($x88 (= $x58 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x99)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x135 $x103)))
 (let (($x163 (and $x29 $x11)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x89 $x163)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x164)))))))
 (let (($x77 (and $x150 $x109)))
 (let (($x156 (= $x77 true)))
 (let (($x142 (= $x156 true)))
 (let (($x107 (= $x142 true)))
 (let (($x227 (and $x107 $x88)))
 (let (($x56 (and $x227 $x119)))
 (let (($x59 (and $x56 $x174)))
 (let (($x117 (and $x59 $x84)))
 (let (($x19 (and $x117 $x47)))
 (let (($x169 (and $x19 $x41)))
 (let (($x73 (and $x169 $x78)))
 (let (($x242 (and $x73 $x195)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x133 (and $x162 $x242)))
 (let (($x196 (=> $x133 $x301)))
 (not $x196))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x27 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x48 (not $x27)))
 (let (($x305 (= $x48 false)))
 (let (($x301 (= $x305 true)))
 (let ((?x83 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x176))))
 (let (($x81 (= (_ bv0 32) ?x158)))
 (let ((?x127 (ite $x81 (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x127 (_ bv1 32))))
 (let (($x257 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x111 (= $x257 $x6)))
 (let (($x225 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x287 (=> $x225 $x111)))
 (let (($x138 (= ?x127 (_ bv0 32))))
 (let (($x268 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x178 (= $x268 $x138)))
 (let (($x277 (=> $x225 $x178)))
 (let ((?x222 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x184 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x53 (concat (select input.dst.llvm-mem ?x184) (concat ?x172 (concat ?x191 ?x222)))))
 (let (($x316 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x53)))
 (let (($x46 (=> $x225 $x316)))
 (let ((?x52 (ite $x27 (_ bv0 32) (_ bv1 32))))
 (let (($x50 (bvuge ?x52 (_ bv1 32))))
 (let (($x64 (= $x225 $x50)))
 (let (($x72 (= false false)))
 (let (($x153 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x230 (=> $x153 $x72)))
 (let (($x104 (= ?x52 (_ bv0 32))))
 (let (($x237 (= $x153 $x104)))
 (let (($x177 (and (and (and (and (and $x237 $x230) $x64) $x46) $x277) $x287)))
 (let (($x195 (= $x177 true)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x57 (concat ?x5 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x265 (concat ?x9 (concat ?x97 ?x57))))
 (let (($x208 (= (_ bv0 32) ?x265)))
 (let ((?x187 (ite $x208 (_ bv0 32) (_ bv1 32))))
 (let (($x240 (bvuge ?x187 (_ bv1 32))))
 (let (($x170 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x234 (= $x170 $x240)))
 (let (($x295 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x205 (=> $x295 $x234)))
 (let (($x206 (= ?x187 (_ bv0 32))))
 (let (($x30 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x209 (= $x30 $x206)))
 (let (($x273 (=> $x295 $x209)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x87)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x284)))
 (let (($x188 (= input.spec-%var-l-1.2.0 ?x94)))
 (let (($x190 (=> $x295 $x188)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x132 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x229 (bvuge ?x132 (_ bv1 32))))
 (let (($x260 (= $x295 $x229)))
 (let (($x175 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x152 (=> $x175 $x72)))
 (let (($x226 (= ?x132 (_ bv0 32))))
 (let (($x55 (= $x175 $x226)))
 (let (($x44 (and (and (and (and (and $x55 $x152) $x260) $x190) $x273) $x205)))
 (let (($x78 (= $x44 true)))
 (let ((?x85 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x13 (= (_ bv0 3) ?x85)))
 (let (($x54 (= $x13 true)))
 (let (($x41 (= $x54 true)))
 (let (($x197 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x42 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x83 (_ bv1 32))) (or false (or false (and true (or $x101 $x197)))))))
 (let (($x166 (=> (and $x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x83 (_ bv1 32)))) (or false (or false (and true (or $x101 $x197)))))))
 (let (($x157 (= $x166 true)))
 (let (($x168 (= $x157 true)))
 (let (($x47 (= $x168 true)))
 (let (($x159 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x62 (= $x159 true)))
 (let (($x63 (= $x62 true)))
 (let (($x84 (= $x63 true)))
 (let ((?x231 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x22 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x231 (_ bv3 32)))))
 (let (($x40 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x22)))))))
 (let (($x180 (=> (and $x48 (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x126 $x22)))))))
 (let (($x125 (= $x180 true)))
 (let (($x122 (= $x125 true)))
 (let (($x174 (= $x122 true)))
 (let (($x23 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x93 (= $x23 true)))
 (let (($x119 (= $x93 true)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x58 (= $x17 true)))
 (let (($x88 (= $x58 true)))
 (let ((?x99 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x99)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x135 $x103)))
 (let (($x163 (and $x29 $x11)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x89 $x163)))
 (let (($x164 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x150 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x164)))))))
 (let (($x77 (and $x150 $x109)))
 (let (($x156 (= $x77 true)))
 (let (($x142 (= $x156 true)))
 (let (($x107 (= $x142 true)))
 (let (($x227 (and $x107 $x88)))
 (let (($x56 (and $x227 $x119)))
 (let (($x59 (and $x56 $x174)))
 (let (($x117 (and $x59 $x84)))
 (let (($x19 (and $x117 $x47)))
 (let (($x169 (and $x19 $x41)))
 (let (($x73 (and $x169 $x78)))
 (let (($x242 (and $x73 $x195)))
 (let (($x162 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x133 (and $x162 $x242)))
 (let (($x196 (=> $x133 $x301)))
 (not $x196))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00111001101011111111111111100000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11011101101011111111111111100111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11011101101011111111111111100100)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11011101101011111111111111100100)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x80000009)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7ffffffb)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv27 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv24 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv24 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x218 (not $x48)))
 (let (($x151 (= $x218 false)))
 (let (($x223 (= $x151 true)))
 (let (($x177 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x172 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x196 (and $x172 $x177)))
 (let (($x31 (not $x196)))
 (let (($x181 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x305 (and $x172 $x181)))
 (let (($x301 (not $x305)))
 (let ((?x101 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x8))))
 (let (($x131 (= (_ bv0 32) ?x277)))
 (let ((?x257 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x257 (_ bv1 32))))
 (let (($x242 (= $x177 $x195)))
 (let (($x133 (=> $x172 $x242)))
 (let (($x6 (= ?x257 (_ bv0 32))))
 (let (($x111 (= $x181 $x6)))
 (let (($x287 (=> $x172 $x111)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x186 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x74 (concat (select input.dst.llvm-mem ?x186) (concat ?x285 (concat ?x53 ?x146)))))
 (let (($x121 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x74)))
 (let (($x10 (=> $x172 $x121)))
 (let ((?x173 (ite $x48 (_ bv0 32) (_ bv1 32))))
 (let (($x220 (bvuge ?x173 (_ bv1 32))))
 (let (($x191 (= $x172 $x220)))
 (let (($x139 (= false false)))
 (let (($x64 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x219 (=> $x64 $x139)))
 (let (($x200 (= ?x173 (_ bv0 32))))
 (let (($x199 (= $x64 $x200)))
 (let (($x183 (and (and (and (and (and (and $x199 $x219) $x191) $x10) $x287) $x133) $x301)))
 (let (($x221 (and $x183 $x31)))
 (let (($x296 (= $x221 true)))
 (let (($x273 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x229 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x44 (and $x229 $x273)))
 (let (($x78 (not $x44)))
 (let (($x194 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x234 (and $x229 $x194)))
 (let (($x205 (not $x234)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x82 (concat ?x9 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x203 (concat ?x57 (concat ?x274 ?x82))))
 (let (($x265 (= (_ bv0 32) ?x203)))
 (let ((?x208 (ite $x265 (_ bv0 32) (_ bv1 32))))
 (let (($x7 (bvuge ?x208 (_ bv1 32))))
 (let (($x170 (= $x273 $x7)))
 (let (($x240 (=> $x229 $x170)))
 (let (($x187 (= ?x208 (_ bv0 32))))
 (let (($x206 (= $x194 $x187)))
 (let (($x209 (=> $x229 $x206)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x167)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x235)))
 (let (($x188 (= input.spec-%var-l-1.2.0 ?x94)))
 (let (($x190 (=> $x229 $x188)))
 (let (($x226 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x55 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x260 (bvuge ?x55 (_ bv1 32))))
 (let (($x123 (= $x229 $x260)))
 (let (($x171 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x295 (=> $x171 $x139)))
 (let (($x72 (= ?x55 (_ bv0 32))))
 (let (($x152 (= $x171 $x72)))
 (let (($x237 (and (and (and (and (and (and $x152 $x295) $x123) $x190) $x209) $x240) $x205)))
 (let (($x230 (and $x237 $x78)))
 (let (($x261 (= $x230 true)))
 (let ((?x54 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x41 (= (_ bv0 3) ?x54)))
 (let (($x169 (= $x41 true)))
 (let (($x160 (= $x169 true)))
 (let (($x128 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x47 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x101 (_ bv1 32))) (or false (or false (and true (or $x105 $x128)))))))
 (let (($x216 (=> (and $x218 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x101 (_ bv1 32)))) (or false (or false (and true (or $x105 $x128)))))))
 (let (($x184 (= $x216 true)))
 (let (($x19 (= $x184 true)))
 (let (($x37 (= $x19 true)))
 (let (($x63 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x63 true)))
 (let (($x117 (= $x84 true)))
 (let (($x83 (= $x117 true)))
 (let ((?x39 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x80 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x39 (_ bv3 32)))))
 (let (($x174 (=> (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x232 $x80)))))))
 (let (($x134 (=> (and $x218 (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x232 $x80)))))))
 (let (($x148 (= $x134 true)))
 (let (($x59 (= $x148 true)))
 (let (($x124 (= $x59 true)))
 (let (($x93 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x119 (= $x93 true)))
 (let (($x56 (= $x119 true)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x88 (= $x58 true)))
 (let (($x227 (= $x88 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x106)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x68 $x135)))
 (let (($x29 (and $x165 $x103)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x224 $x29)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x110)))))))
 (let (($x150 (and $x71 $x99)))
 (let (($x98 (= $x150 true)))
 (let (($x89 (= $x98 true)))
 (let (($x11 (= $x89 true)))
 (let (($x120 (and $x11 $x227)))
 (let (($x67 (and $x120 $x56)))
 (let (($x159 (and $x67 $x124)))
 (let (($x130 (and $x159 $x83)))
 (let (($x85 (and $x130 $x37)))
 (let (($x175 (and $x85 $x160)))
 (let (($x225 (and $x175 $x261)))
 (let (($x211 (and $x225 $x296)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x207 (and $x163 $x211)))
 (let (($x236 (=> $x207 $x223)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x48 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x218 (not $x48)))
 (let (($x151 (= $x218 false)))
 (let (($x223 (= $x151 true)))
 (let (($x177 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x172 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x196 (and $x172 $x177)))
 (let (($x31 (not $x196)))
 (let (($x181 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x305 (and $x172 $x181)))
 (let (($x301 (not $x305)))
 (let ((?x101 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x8))))
 (let (($x131 (= (_ bv0 32) ?x277)))
 (let ((?x257 (ite $x131 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x257 (_ bv1 32))))
 (let (($x242 (= $x177 $x195)))
 (let (($x133 (=> $x172 $x242)))
 (let (($x6 (= ?x257 (_ bv0 32))))
 (let (($x111 (= $x181 $x6)))
 (let (($x287 (=> $x172 $x111)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x186 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x74 (concat (select input.dst.llvm-mem ?x186) (concat ?x285 (concat ?x53 ?x146)))))
 (let (($x121 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x74)))
 (let (($x10 (=> $x172 $x121)))
 (let ((?x173 (ite $x48 (_ bv0 32) (_ bv1 32))))
 (let (($x220 (bvuge ?x173 (_ bv1 32))))
 (let (($x191 (= $x172 $x220)))
 (let (($x139 (= false false)))
 (let (($x64 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x219 (=> $x64 $x139)))
 (let (($x200 (= ?x173 (_ bv0 32))))
 (let (($x199 (= $x64 $x200)))
 (let (($x183 (and (and (and (and (and (and $x199 $x219) $x191) $x10) $x287) $x133) $x301)))
 (let (($x221 (and $x183 $x31)))
 (let (($x296 (= $x221 true)))
 (let (($x273 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x229 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x44 (and $x229 $x273)))
 (let (($x78 (not $x44)))
 (let (($x194 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x234 (and $x229 $x194)))
 (let (($x205 (not $x234)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x82 (concat ?x9 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x203 (concat ?x57 (concat ?x274 ?x82))))
 (let (($x265 (= (_ bv0 32) ?x203)))
 (let ((?x208 (ite $x265 (_ bv0 32) (_ bv1 32))))
 (let (($x7 (bvuge ?x208 (_ bv1 32))))
 (let (($x170 (= $x273 $x7)))
 (let (($x240 (=> $x229 $x170)))
 (let (($x187 (= ?x208 (_ bv0 32))))
 (let (($x206 (= $x194 $x187)))
 (let (($x209 (=> $x229 $x206)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x167)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x235)))
 (let (($x188 (= input.spec-%var-l-1.2.0 ?x94)))
 (let (($x190 (=> $x229 $x188)))
 (let (($x226 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x55 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x260 (bvuge ?x55 (_ bv1 32))))
 (let (($x123 (= $x229 $x260)))
 (let (($x171 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x295 (=> $x171 $x139)))
 (let (($x72 (= ?x55 (_ bv0 32))))
 (let (($x152 (= $x171 $x72)))
 (let (($x237 (and (and (and (and (and (and $x152 $x295) $x123) $x190) $x209) $x240) $x205)))
 (let (($x230 (and $x237 $x78)))
 (let (($x261 (= $x230 true)))
 (let ((?x54 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x41 (= (_ bv0 3) ?x54)))
 (let (($x169 (= $x41 true)))
 (let (($x160 (= $x169 true)))
 (let (($x128 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x47 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x101 (_ bv1 32))) (or false (or false (and true (or $x105 $x128)))))))
 (let (($x216 (=> (and $x218 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x101 (_ bv1 32)))) (or false (or false (and true (or $x105 $x128)))))))
 (let (($x184 (= $x216 true)))
 (let (($x19 (= $x184 true)))
 (let (($x37 (= $x19 true)))
 (let (($x63 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x84 (= $x63 true)))
 (let (($x117 (= $x84 true)))
 (let (($x83 (= $x117 true)))
 (let ((?x39 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x80 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x39 (_ bv3 32)))))
 (let (($x174 (=> (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x232 $x80)))))))
 (let (($x134 (=> (and $x218 (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x232 $x80)))))))
 (let (($x148 (= $x134 true)))
 (let (($x59 (= $x148 true)))
 (let (($x124 (= $x59 true)))
 (let (($x93 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x119 (= $x93 true)))
 (let (($x56 (= $x119 true)))
 (let (($x58 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x88 (= $x58 true)))
 (let (($x227 (= $x88 true)))
 (let ((?x106 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x106)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x68 $x135)))
 (let (($x29 (and $x165 $x103)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x224 $x29)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x110)))))))
 (let (($x150 (and $x71 $x99)))
 (let (($x98 (= $x150 true)))
 (let (($x89 (= $x98 true)))
 (let (($x11 (= $x89 true)))
 (let (($x120 (and $x11 $x227)))
 (let (($x67 (and $x120 $x56)))
 (let (($x159 (and $x67 $x124)))
 (let (($x130 (and $x159 $x83)))
 (let (($x85 (and $x130 $x37)))
 (let (($x175 (and $x85 $x160)))
 (let (($x225 (and $x175 $x261)))
 (let (($x211 (and $x225 $x296)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x207 (and $x163 $x211)))
 (let (($x236 (=> $x207 $x223)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x218 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x231 (not $x218)))
 (let (($x270 (= $x231 false)))
 (let (($x315 (= $x270 true)))
 (let ((?x105 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x241))))
 (let ((?x238 (bvadd ?x12 (_ bv4 32))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x34))))
 (let (($x102 (= (_ bv0 32) ?x24)))
 (let ((?x254 (ite $x102 (_ bv0 32) (_ bv1 32))))
 (let (($x264 (= ?x254 (_ bv0 32))))
 (let (($x144 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x338 (= $x144 $x264)))
 (let (($x79 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x242 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x243 (and $x242 $x79)))
 (let (($x38 (=> $x243 $x338)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv1 32))) (select input.dst.llvm-mem ?x12))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv2 32))) ?x308))))
 (let (($x269 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x286)))
 (let (($x252 (=> $x243 $x269)))
 (let (($x113 (bvuge ?x254 (_ bv1 32))))
 (let (($x293 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x313 (= $x293 $x113)))
 (let (($x201 (=> $x243 $x313)))
 (let (($x73 (= false false)))
 (let (($x162 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x147 (and $x242 $x162)))
 (let (($x136 (=> $x147 $x73)))
 (let (($x51 (= (_ bv0 32) ?x12)))
 (let ((?x35 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x35 (_ bv1 32))))
 (let (($x307 (= $x79 $x43)))
 (let (($x255 (=> $x242 $x307)))
 (let (($x312 (= ?x35 (_ bv0 32))))
 (let (($x279 (= $x162 $x312)))
 (let (($x26 (=> $x242 $x279)))
 (let ((?x301 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x16 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x151 (concat (select input.dst.llvm-mem ?x16) (concat ?x296 (concat ?x196 ?x301)))))
 (let (($x223 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x151)))
 (let (($x236 (=> $x242 $x223)))
 (let ((?x287 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x287 (_ bv1 32))))
 (let (($x185 (= $x242 $x133)))
 (let (($x111 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x195 (=> $x111 $x73)))
 (let (($x258 (= ?x287 (_ bv0 32))))
 (let (($x177 (= $x111 $x258)))
 (let (($x100 (and (and (and (and (and (and $x177 $x195) $x185) $x236) $x26) $x255) $x136)))
 (let (($x253 (and (and (and $x100 $x201) $x252) $x38)))
 (let (($x246 (= $x253 true)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x97 (concat ?x57 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x5 (concat ?x82 (concat ?x112 ?x97))))
 (let ((?x172 (bvadd ?x5 (_ bv4 32))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x222))))
 (let (($x316 (= (_ bv0 32) ?x146)))
 (let ((?x182 (ite $x316 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x182 (_ bv1 32))))
 (let (($x304 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x181 (= $x304 $x198)))
 (let (($x209 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x260 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x104 (and $x260 $x209)))
 (let (($x138 (=> $x104 $x181)))
 (let (($x74 (= ?x182 (_ bv0 32))))
 (let (($x214 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x121 (= $x214 $x74)))
 (let (($x10 (=> $x104 $x121)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x78))))
 (let (($x200 (= input.spec-%var-l-1.2.1.2.0 ?x173)))
 (let (($x199 (=> $x104 $x200)))
 (let (($x61 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x170 (and $x260 $x61)))
 (let (($x240 (=> $x170 $x73)))
 (let (($x203 (= (_ bv0 32) ?x5)))
 (let ((?x265 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x265 (_ bv1 32))))
 (let (($x273 (= $x209 $x52)))
 (let (($x7 (=> $x260 $x273)))
 (let (($x208 (= ?x265 (_ bv0 32))))
 (let (($x187 (= $x61 $x208)))
 (let (($x206 (=> $x260 $x187)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x233)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x266)))
 (let (($x188 (= input.spec-%var-l-1.2.0 ?x94)))
 (let (($x190 (=> $x260 $x188)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x152 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (bvuge ?x152 (_ bv1 32))))
 (let (($x90 (= $x260 $x123)))
 (let (($x226 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x229 (=> $x226 $x73)))
 (let (($x139 (= ?x152 (_ bv0 32))))
 (let (($x295 (= $x226 $x139)))
 (let (($x193 (and (and (and (and (and (and $x295 $x229) $x90) $x190) $x206) $x7) $x240)))
 (let (($x277 (and (and (and $x193 $x199) $x10) $x138)))
 (let (($x131 (= $x277 true)))
 (let ((?x169 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x160 (= (_ bv0 3) ?x169)))
 (let (($x175 (= $x160 true)))
 (let (($x21 (= $x175 true)))
 (let (($x166 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x37 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x105 (_ bv1 32))) (or false (or false (and true (or $x42 $x166)))))))
 (let (($x168 (=> (and $x231 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x105 (_ bv1 32)))) (or false (or false (and true (or $x42 $x166)))))))
 (let (($x186 (= $x168 true)))
 (let (($x85 (= $x186 true)))
 (let (($x13 (= $x85 true)))
 (let (($x117 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x83 (= $x117 true)))
 (let (($x130 (= $x83 true)))
 (let (($x101 (= $x130 true)))
 (let ((?x126 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x180 (bvugt ?x126 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x126 (_ bv3 32)))))
 (let (($x124 (=> (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x180)))))))
 (let (($x122 (=> (and $x231 (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x180)))))))
 (let (($x213 (= $x122 true)))
 (let (($x159 (= $x213 true)))
 (let (($x62 (= $x159 true)))
 (let (($x119 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x56 (= $x119 true)))
 (let (($x67 (= $x56 true)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x227 (= $x88 true)))
 (let (($x120 (= $x227 true)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x20)))
 (let ((?x224 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x224)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x71 $x68)))
 (let (($x165 (and $x28 $x135)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x109 $x165)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x65)))))))
 (let (($x98 (and $x107 $x106)))
 (let (($x89 (= $x98 true)))
 (let (($x11 (= $x89 true)))
 (let (($x17 (= $x11 true)))
 (let (($x23 (and $x17 $x120)))
 (let (($x27 (and $x23 $x67)))
 (let (($x63 (and $x27 $x62)))
 (let (($x197 (and $x63 $x101)))
 (let (($x54 (and $x197 $x13)))
 (let (($x171 (and $x54 $x21)))
 (let (($x257 (and $x171 $x131)))
 (let (($x154 (and $x257 $x246)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x15 (and $x103 $x154)))
 (let (($x272 (=> $x15 $x315)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x218 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x231 (not $x218)))
 (let (($x270 (= $x231 false)))
 (let (($x315 (= $x270 true)))
 (let ((?x105 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x241))))
 (let ((?x238 (bvadd ?x12 (_ bv4 32))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x34))))
 (let (($x102 (= (_ bv0 32) ?x24)))
 (let ((?x254 (ite $x102 (_ bv0 32) (_ bv1 32))))
 (let (($x264 (= ?x254 (_ bv0 32))))
 (let (($x144 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x338 (= $x144 $x264)))
 (let (($x79 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x242 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x243 (and $x242 $x79)))
 (let (($x38 (=> $x243 $x338)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv1 32))) (select input.dst.llvm-mem ?x12))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x12 (_ bv2 32))) ?x308))))
 (let (($x269 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x286)))
 (let (($x252 (=> $x243 $x269)))
 (let (($x113 (bvuge ?x254 (_ bv1 32))))
 (let (($x293 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x313 (= $x293 $x113)))
 (let (($x201 (=> $x243 $x313)))
 (let (($x73 (= false false)))
 (let (($x162 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x147 (and $x242 $x162)))
 (let (($x136 (=> $x147 $x73)))
 (let (($x51 (= (_ bv0 32) ?x12)))
 (let ((?x35 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x43 (bvuge ?x35 (_ bv1 32))))
 (let (($x307 (= $x79 $x43)))
 (let (($x255 (=> $x242 $x307)))
 (let (($x312 (= ?x35 (_ bv0 32))))
 (let (($x279 (= $x162 $x312)))
 (let (($x26 (=> $x242 $x279)))
 (let ((?x301 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x16 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x151 (concat (select input.dst.llvm-mem ?x16) (concat ?x296 (concat ?x196 ?x301)))))
 (let (($x223 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x151)))
 (let (($x236 (=> $x242 $x223)))
 (let ((?x287 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x287 (_ bv1 32))))
 (let (($x185 (= $x242 $x133)))
 (let (($x111 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x195 (=> $x111 $x73)))
 (let (($x258 (= ?x287 (_ bv0 32))))
 (let (($x177 (= $x111 $x258)))
 (let (($x100 (and (and (and (and (and (and $x177 $x195) $x185) $x236) $x26) $x255) $x136)))
 (let (($x253 (and (and (and $x100 $x201) $x252) $x38)))
 (let (($x246 (= $x253 true)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x97 (concat ?x57 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x5 (concat ?x82 (concat ?x112 ?x97))))
 (let ((?x172 (bvadd ?x5 (_ bv4 32))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x222))))
 (let (($x316 (= (_ bv0 32) ?x146)))
 (let ((?x182 (ite $x316 (_ bv0 32) (_ bv1 32))))
 (let (($x198 (bvuge ?x182 (_ bv1 32))))
 (let (($x304 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x181 (= $x304 $x198)))
 (let (($x209 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x260 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x104 (and $x260 $x209)))
 (let (($x138 (=> $x104 $x181)))
 (let (($x74 (= ?x182 (_ bv0 32))))
 (let (($x214 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x121 (= $x214 $x74)))
 (let (($x10 (=> $x104 $x121)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x78))))
 (let (($x200 (= input.spec-%var-l-1.2.1.2.0 ?x173)))
 (let (($x199 (=> $x104 $x200)))
 (let (($x61 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x170 (and $x260 $x61)))
 (let (($x240 (=> $x170 $x73)))
 (let (($x203 (= (_ bv0 32) ?x5)))
 (let ((?x265 (ite $x203 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x265 (_ bv1 32))))
 (let (($x273 (= $x209 $x52)))
 (let (($x7 (=> $x260 $x273)))
 (let (($x208 (= ?x265 (_ bv0 32))))
 (let (($x187 (= $x61 $x208)))
 (let (($x206 (=> $x260 $x187)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x233)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x266)))
 (let (($x188 (= input.spec-%var-l-1.2.0 ?x94)))
 (let (($x190 (=> $x260 $x188)))
 (let (($x72 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x152 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (bvuge ?x152 (_ bv1 32))))
 (let (($x90 (= $x260 $x123)))
 (let (($x226 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x229 (=> $x226 $x73)))
 (let (($x139 (= ?x152 (_ bv0 32))))
 (let (($x295 (= $x226 $x139)))
 (let (($x193 (and (and (and (and (and (and $x295 $x229) $x90) $x190) $x206) $x7) $x240)))
 (let (($x277 (and (and (and $x193 $x199) $x10) $x138)))
 (let (($x131 (= $x277 true)))
 (let ((?x169 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x160 (= (_ bv0 3) ?x169)))
 (let (($x175 (= $x160 true)))
 (let (($x21 (= $x175 true)))
 (let (($x166 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x37 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x105 (_ bv1 32))) (or false (or false (and true (or $x42 $x166)))))))
 (let (($x168 (=> (and $x231 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x105 (_ bv1 32)))) (or false (or false (and true (or $x42 $x166)))))))
 (let (($x186 (= $x168 true)))
 (let (($x85 (= $x186 true)))
 (let (($x13 (= $x85 true)))
 (let (($x117 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x83 (= $x117 true)))
 (let (($x130 (= $x83 true)))
 (let (($x101 (= $x130 true)))
 (let ((?x126 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x180 (bvugt ?x126 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x126 (_ bv3 32)))))
 (let (($x124 (=> (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x180)))))))
 (let (($x122 (=> (and $x231 (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x180)))))))
 (let (($x213 (= $x122 true)))
 (let (($x159 (= $x213 true)))
 (let (($x62 (= $x159 true)))
 (let (($x119 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x56 (= $x119 true)))
 (let (($x67 (= $x56 true)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x227 (= $x88 true)))
 (let (($x120 (= $x227 true)))
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x20)))
 (let ((?x224 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x224)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x71 $x68)))
 (let (($x165 (and $x28 $x135)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x109 $x165)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x65)))))))
 (let (($x98 (and $x107 $x106)))
 (let (($x89 (= $x98 true)))
 (let (($x11 (= $x89 true)))
 (let (($x17 (= $x11 true)))
 (let (($x23 (and $x17 $x120)))
 (let (($x27 (and $x23 $x67)))
 (let (($x63 (and $x27 $x62)))
 (let (($x197 (and $x63 $x101)))
 (let (($x54 (and $x197 $x13)))
 (let (($x171 (and $x54 $x21)))
 (let (($x257 (and $x171 $x131)))
 (let (($x154 (and $x257 $x246)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x15 (and $x103 $x154)))
 (let (($x272 (=> $x15 $x315)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00111001101011111111111111100000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11011101101011111111111111100111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11011101101011111111111111100100)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11011101101011111111111111100100)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x39 (not $x120)))
 (let (($x310 (= $x39 false)))
 (let (($x299 (= $x310 true)))
 (let (($x282 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x141 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x296 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x293 (and $x296 $x141)))
 (let (($x154 (and $x293 $x282)))
 (let (($x15 (not $x154)))
 (let (($x144 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x253 (and $x293 $x144)))
 (let (($x246 (not $x253)))
 (let ((?x42 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x267))))
 (let ((?x292 (bvadd ?x26 (_ bv4 32))))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x303))))
 (let (($x113 (= (_ bv0 32) ?x254)))
 (let ((?x313 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x264 (= ?x313 (_ bv0 32))))
 (let (($x338 (= $x144 $x264)))
 (let (($x38 (=> $x293 $x338)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv1 32))) (select input.dst.llvm-mem ?x26))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv2 32))) ?x212))))
 (let (($x252 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x269)))
 (let (($x249 (=> $x293 $x252)))
 (let (($x201 (bvuge ?x313 (_ bv1 32))))
 (let (($x251 (= $x282 $x201)))
 (let (($x248 (=> $x293 $x251)))
 (let (($x178 (= false false)))
 (let (($x244 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x243 (and $x296 $x244)))
 (let (($x289 (=> $x243 $x178)))
 (let (($x291 (= (_ bv0 32) ?x26)))
 (let ((?x79 (ite $x291 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x79 (_ bv1 32))))
 (let (($x136 (= $x141 $x147)))
 (let (($x100 (=> $x296 $x136)))
 (let (($x43 (= ?x79 (_ bv0 32))))
 (let (($x307 (= $x244 $x43)))
 (let (($x255 (=> $x296 $x307)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x157 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x288 (concat (select input.dst.llvm-mem ?x157) (concat ?x247 (concat ?x151 ?x31)))))
 (let (($x149 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x288)))
 (let (($x75 (=> $x296 $x149)))
 (let ((?x317 (ite $x120 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x317 (_ bv1 32))))
 (let (($x196 (= $x296 $x183)))
 (let (($x185 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x221 (=> $x185 $x178)))
 (let (($x305 (= ?x317 (_ bv0 32))))
 (let (($x207 (= $x185 $x305)))
 (let (($x99 (and (and (and (and (and (and $x207 $x221) $x196) $x75) $x255) $x100) $x289)))
 (let (($x275 (and (and (and (and (and $x99 $x248) $x249) $x38) $x246) $x15)))
 (let (($x256 (= $x275 true)))
 (let (($x173 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x206 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x123 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x176 (and $x123 $x206)))
 (let (($x304 (and $x176 $x173)))
 (let (($x198 (not $x304)))
 (let (($x316 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x10 (and $x176 $x316)))
 (let (($x127 (not $x10)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x274 (concat ?x82 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x9 (concat ?x97 (concat ?x189 ?x274))))
 (let ((?x200 (bvadd ?x9 (_ bv4 32))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x214))))
 (let (($x25 (= (_ bv0 32) ?x191)))
 (let ((?x220 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x220 (_ bv1 32))))
 (let (($x74 (= $x316 $x182)))
 (let (($x121 (=> $x176 $x74)))
 (let (($x222 (= ?x220 (_ bv0 32))))
 (let (($x285 (= $x173 $x222)))
 (let (($x146 (=> $x176 $x285)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x234))))
 (let (($x205 (= input.spec-%var-l-1.2.1.2.0 ?x44)))
 (let (($x78 (=> $x176 $x205)))
 (let (($x153 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x273 (and $x123 $x153)))
 (let (($x7 (=> $x273 $x178)))
 (let (($x5 (= (_ bv0 32) ?x9)))
 (let ((?x203 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x297 (bvuge ?x203 (_ bv1 32))))
 (let (($x209 (= $x206 $x297)))
 (let (($x52 (=> $x123 $x209)))
 (let (($x265 (= ?x203 (_ bv0 32))))
 (let (($x208 (= $x153 $x265)))
 (let (($x187 (=> $x123 $x208)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x70)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x87)))
 (let (($x188 (= input.spec-%var-l-1.2.0 ?x94)))
 (let (($x190 (=> $x123 $x188)))
 (let (($x139 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x295 (ite $x139 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x295 (_ bv1 32))))
 (let (($x158 (= $x123 $x90)))
 (let (($x72 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x260 (=> $x72 $x178)))
 (let (($x73 (= ?x295 (_ bv0 32))))
 (let (($x229 (= $x72 $x73)))
 (let (($x6 (and (and (and (and (and (and $x229 $x260) $x158) $x190) $x187) $x52) $x7)))
 (let (($x195 (and (and (and (and (and $x6 $x78) $x146) $x121) $x127) $x198)))
 (let (($x250 (= $x195 true)))
 (let ((?x175 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x21 (= (_ bv0 3) ?x175)))
 (let (($x171 (= $x21 true)))
 (let (($x132 (= $x171 true)))
 (let (($x216 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x13 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x42 (_ bv1 32))) (or false (or false (and true (or $x47 $x216)))))))
 (let (($x19 (=> (and $x39 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x42 (_ bv1 32)))) (or false (or false (and true (or $x47 $x216)))))))
 (let (($x16 (= $x19 true)))
 (let (($x54 (= $x16 true)))
 (let (($x41 (= $x54 true)))
 (let (($x130 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x101 (= $x130 true)))
 (let (($x197 (= $x101 true)))
 (let (($x105 (= $x197 true)))
 (let ((?x232 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x134 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x232 (_ bv3 32)))))
 (let (($x62 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x174 $x134)))))))
 (let (($x59 (=> (and $x39 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x174 $x134)))))))
 (let (($x179 (= $x59 true)))
 (let (($x63 (= $x179 true)))
 (let (($x84 (= $x63 true)))
 (let (($x33 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x227 (= $x33 true)))
 (let (($x68 (= $x227 true)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x58 (= $x17 true)))
 (let (($x88 (= $x58 true)))
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x163)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x218 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (and $x224 $x218)))
 (let (($x86 (and $x231 $x110)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x96 $x86)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x142)))))))
 (let (($x165 (and $x67 $x135)))
 (let (($x106 (= $x165 true)))
 (let (($x98 (= $x106 true)))
 (let (($x89 (= $x98 true)))
 (let (($x109 (and $x89 $x88)))
 (let (($x28 (and $x109 $x68)))
 (let (($x117 (and $x28 $x84)))
 (let (($x128 (and $x117 $x105)))
 (let (($x169 (and $x128 $x41)))
 (let (($x226 (and $x169 $x132)))
 (let (($x242 (and $x226 $x250)))
 (let (($x281 (and $x242 $x256)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x283 (and $x23 $x281)))
 (let (($x66 (=> $x283 $x299)))
 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x120 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x39 (not $x120)))
 (let (($x310 (= $x39 false)))
 (let (($x299 (= $x310 true)))
 (let (($x282 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x141 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x296 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x293 (and $x296 $x141)))
 (let (($x154 (and $x293 $x282)))
 (let (($x15 (not $x154)))
 (let (($x144 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x253 (and $x293 $x144)))
 (let (($x246 (not $x253)))
 (let ((?x42 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x267))))
 (let ((?x292 (bvadd ?x26 (_ bv4 32))))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x303))))
 (let (($x113 (= (_ bv0 32) ?x254)))
 (let ((?x313 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x264 (= ?x313 (_ bv0 32))))
 (let (($x338 (= $x144 $x264)))
 (let (($x38 (=> $x293 $x338)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv1 32))) (select input.dst.llvm-mem ?x26))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv2 32))) ?x212))))
 (let (($x252 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x269)))
 (let (($x249 (=> $x293 $x252)))
 (let (($x201 (bvuge ?x313 (_ bv1 32))))
 (let (($x251 (= $x282 $x201)))
 (let (($x248 (=> $x293 $x251)))
 (let (($x178 (= false false)))
 (let (($x244 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x243 (and $x296 $x244)))
 (let (($x289 (=> $x243 $x178)))
 (let (($x291 (= (_ bv0 32) ?x26)))
 (let ((?x79 (ite $x291 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x79 (_ bv1 32))))
 (let (($x136 (= $x141 $x147)))
 (let (($x100 (=> $x296 $x136)))
 (let (($x43 (= ?x79 (_ bv0 32))))
 (let (($x307 (= $x244 $x43)))
 (let (($x255 (=> $x296 $x307)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x157 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x288 (concat (select input.dst.llvm-mem ?x157) (concat ?x247 (concat ?x151 ?x31)))))
 (let (($x149 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x288)))
 (let (($x75 (=> $x296 $x149)))
 (let ((?x317 (ite $x120 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x317 (_ bv1 32))))
 (let (($x196 (= $x296 $x183)))
 (let (($x185 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x221 (=> $x185 $x178)))
 (let (($x305 (= ?x317 (_ bv0 32))))
 (let (($x207 (= $x185 $x305)))
 (let (($x99 (and (and (and (and (and (and $x207 $x221) $x196) $x75) $x255) $x100) $x289)))
 (let (($x275 (and (and (and (and (and $x99 $x248) $x249) $x38) $x246) $x15)))
 (let (($x256 (= $x275 true)))
 (let (($x173 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x206 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x123 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x176 (and $x123 $x206)))
 (let (($x304 (and $x176 $x173)))
 (let (($x198 (not $x304)))
 (let (($x316 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x10 (and $x176 $x316)))
 (let (($x127 (not $x10)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x274 (concat ?x82 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x9 (concat ?x97 (concat ?x189 ?x274))))
 (let ((?x200 (bvadd ?x9 (_ bv4 32))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x214))))
 (let (($x25 (= (_ bv0 32) ?x191)))
 (let ((?x220 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x220 (_ bv1 32))))
 (let (($x74 (= $x316 $x182)))
 (let (($x121 (=> $x176 $x74)))
 (let (($x222 (= ?x220 (_ bv0 32))))
 (let (($x285 (= $x173 $x222)))
 (let (($x146 (=> $x176 $x285)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x234))))
 (let (($x205 (= input.spec-%var-l-1.2.1.2.0 ?x44)))
 (let (($x78 (=> $x176 $x205)))
 (let (($x153 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x273 (and $x123 $x153)))
 (let (($x7 (=> $x273 $x178)))
 (let (($x5 (= (_ bv0 32) ?x9)))
 (let ((?x203 (ite $x5 (_ bv0 32) (_ bv1 32))))
 (let (($x297 (bvuge ?x203 (_ bv1 32))))
 (let (($x209 (= $x206 $x297)))
 (let (($x52 (=> $x123 $x209)))
 (let (($x265 (= ?x203 (_ bv0 32))))
 (let (($x208 (= $x153 $x265)))
 (let (($x187 (=> $x123 $x208)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x70)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x87)))
 (let (($x188 (= input.spec-%var-l-1.2.0 ?x94)))
 (let (($x190 (=> $x123 $x188)))
 (let (($x139 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x295 (ite $x139 (_ bv0 32) (_ bv1 32))))
 (let (($x90 (bvuge ?x295 (_ bv1 32))))
 (let (($x158 (= $x123 $x90)))
 (let (($x72 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x260 (=> $x72 $x178)))
 (let (($x73 (= ?x295 (_ bv0 32))))
 (let (($x229 (= $x72 $x73)))
 (let (($x6 (and (and (and (and (and (and $x229 $x260) $x158) $x190) $x187) $x52) $x7)))
 (let (($x195 (and (and (and (and (and $x6 $x78) $x146) $x121) $x127) $x198)))
 (let (($x250 (= $x195 true)))
 (let ((?x175 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x21 (= (_ bv0 3) ?x175)))
 (let (($x171 (= $x21 true)))
 (let (($x132 (= $x171 true)))
 (let (($x216 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x13 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x42 (_ bv1 32))) (or false (or false (and true (or $x47 $x216)))))))
 (let (($x19 (=> (and $x39 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x42 (_ bv1 32)))) (or false (or false (and true (or $x47 $x216)))))))
 (let (($x16 (= $x19 true)))
 (let (($x54 (= $x16 true)))
 (let (($x41 (= $x54 true)))
 (let (($x130 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x101 (= $x130 true)))
 (let (($x197 (= $x101 true)))
 (let (($x105 (= $x197 true)))
 (let ((?x232 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x134 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x232 (_ bv3 32)))))
 (let (($x62 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x174 $x134)))))))
 (let (($x59 (=> (and $x39 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x174 $x134)))))))
 (let (($x179 (= $x59 true)))
 (let (($x63 (= $x179 true)))
 (let (($x84 (= $x63 true)))
 (let (($x33 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x227 (= $x33 true)))
 (let (($x68 (= $x227 true)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x58 (= $x17 true)))
 (let (($x88 (= $x58 true)))
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x163)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x218 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (and $x224 $x218)))
 (let (($x86 (and $x231 $x110)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x96 $x86)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x142)))))))
 (let (($x165 (and $x67 $x135)))
 (let (($x106 (= $x165 true)))
 (let (($x98 (= $x106 true)))
 (let (($x89 (= $x98 true)))
 (let (($x109 (and $x89 $x88)))
 (let (($x28 (and $x109 $x68)))
 (let (($x117 (and $x28 $x84)))
 (let (($x128 (and $x117 $x105)))
 (let (($x169 (and $x128 $x41)))
 (let (($x226 (and $x169 $x132)))
 (let (($x242 (and $x226 $x250)))
 (let (($x281 (and $x242 $x256)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x283 (and $x23 $x281)))
 (let (($x66 (=> $x283 $x299)))
 (not $x66))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00111001101011111111111111100000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11011101101011111111111111100111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11011101101011111111111111100100)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11011101101011111111111111100100)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x176 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x250 (or $x176 $x103)))
 (let (($x242 (= $x250 true)))
 (let (($x133 (= $x242 true)))
 (let ((?x65 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x172))))
 (let (($x191 (= (_ bv0 32) ?x53)))
 (let ((?x25 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (bvuge ?x25 (_ bv1 32))))
 (let (($x146 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x316 (= $x146 $x287)))
 (let (($x182 (=> $x176 $x316)))
 (let (($x220 (= ?x25 (_ bv0 32))))
 (let (($x173 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x222 (= $x173 $x220)))
 (let (($x285 (=> $x176 $x222)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x107 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x205 (concat (select input.dst.llvm-mem ?x107) (concat ?x234 (concat ?x193 ?x50)))))
 (let (($x78 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x205)))
 (let (($x111 (=> $x176 $x78)))
 (let ((?x257 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge ?x257 (_ bv1 32))))
 (let (($x261 (= $x176 $x170)))
 (let (($x152 (= false false)))
 (let (($x52 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x6 (=> $x52 $x152)))
 (let (($x273 (= ?x257 (_ bv0 32))))
 (let (($x7 (= $x52 $x273)))
 (let (($x127 (and (and (and (and (and $x7 $x6) $x261) $x111) $x285) $x182)))
 (let (($x177 (= $x127 true)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x190 (concat ?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x97 (concat ?x30 (concat ?x81 ?x190))))
 (let (($x112 (= (_ bv0 32) ?x97)))
 (let ((?x189 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (bvuge ?x189 (_ bv1 32))))
 (let (($x274 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x9 (= $x274 $x57)))
 (let (($x295 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x5 (=> $x295 $x9)))
 (let (($x276 (= ?x189 (_ bv0 32))))
 (let (($x167 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x82 (= $x167 $x276)))
 (let (($x194 (=> $x295 $x82)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x158)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x233)))
 (let (($x239 (= input.spec-%var-l-1.2.0 ?x284)))
 (let (($x235 (=> $x295 $x239)))
 (let (($x132 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x226 (ite $x132 (_ bv0 32) (_ bv1 32))))
 (let (($x73 (bvuge ?x226 (_ bv1 32))))
 (let (($x229 (= $x295 $x73)))
 (let (($x21 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x139 (=> $x21 $x152)))
 (let (($x55 (= ?x226 (_ bv0 32))))
 (let (($x72 (= $x21 $x55)))
 (let (($x131 (and (and (and (and (and $x72 $x139) $x229) $x235) $x194) $x5)))
 (let (($x206 (= $x131 true)))
 (let ((?x16 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x54 (= (_ bv0 3) ?x16)))
 (let (($x41 (= $x54 true)))
 (let (($x169 (= $x41 true)))
 (let (($x184 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x37 (= $x184 true)))
 (let (($x168 (= $x37 true)))
 (let (($x186 (= $x168 true)))
 (let (($x166 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x85 (= $x166 true)))
 (let (($x157 (= $x85 true)))
 (let (($x101 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x197 (= $x101 true)))
 (let (($x105 (= $x197 true)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x213)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x134 $x124)))
 (let (($x59 (and $x122 $x62)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x68 $x59)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x126)))))))
 (let (($x63 (and $x174 $x179)))
 (let (($x84 (= $x63 true)))
 (let (($x117 (= $x84 true)))
 (let (($x83 (= $x117 true)))
 (let (($x128 (and $x83 $x105)))
 (let (($x47 (and $x128 $x157)))
 (let (($x13 (and $x47 $x186)))
 (let (($x160 (and $x13 $x169)))
 (let (($x297 (and $x160 $x206)))
 (let (($x304 (and $x297 $x177)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x198 (and $x71 $x304)))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x106 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x29 (_ bv3 32)))))
 (let (($x88 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x165 $x106)))))))
 (let (($x118 (not $x103)))
 (let (($x231 (=> (and $x118 (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x165 $x106)))))))
 (let (($x67 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x218 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x65 (_ bv1 32))) (or false (or false (and true (or $x129 $x67)))))))
 (let (($x56 (=> (and $x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x65 (_ bv1 32)))) (or false (or false (and true (or $x129 $x67)))))))
 (let (($x163 (and $x56 $x231)))
 (let (($x195 (and $x163 $x198)))
 (let (($x185 (=> $x195 $x133)))
 (not $x185)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x176 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x250 (or $x176 $x103)))
 (let (($x242 (= $x250 true)))
 (let (($x133 (= $x242 true)))
 (let ((?x65 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x172))))
 (let (($x191 (= (_ bv0 32) ?x53)))
 (let ((?x25 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (bvuge ?x25 (_ bv1 32))))
 (let (($x146 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x316 (= $x146 $x287)))
 (let (($x182 (=> $x176 $x316)))
 (let (($x220 (= ?x25 (_ bv0 32))))
 (let (($x173 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x222 (= $x173 $x220)))
 (let (($x285 (=> $x176 $x222)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x107 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x205 (concat (select input.dst.llvm-mem ?x107) (concat ?x234 (concat ?x193 ?x50)))))
 (let (($x78 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x205)))
 (let (($x111 (=> $x176 $x78)))
 (let ((?x257 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge ?x257 (_ bv1 32))))
 (let (($x261 (= $x176 $x170)))
 (let (($x152 (= false false)))
 (let (($x52 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x6 (=> $x52 $x152)))
 (let (($x273 (= ?x257 (_ bv0 32))))
 (let (($x7 (= $x52 $x273)))
 (let (($x127 (and (and (and (and (and $x7 $x6) $x261) $x111) $x285) $x182)))
 (let (($x177 (= $x127 true)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x190 (concat ?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x97 (concat ?x30 (concat ?x81 ?x190))))
 (let (($x112 (= (_ bv0 32) ?x97)))
 (let ((?x189 (ite $x112 (_ bv0 32) (_ bv1 32))))
 (let (($x57 (bvuge ?x189 (_ bv1 32))))
 (let (($x274 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x9 (= $x274 $x57)))
 (let (($x295 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x5 (=> $x295 $x9)))
 (let (($x276 (= ?x189 (_ bv0 32))))
 (let (($x167 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x82 (= $x167 $x276)))
 (let (($x194 (=> $x295 $x82)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x158)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x233)))
 (let (($x239 (= input.spec-%var-l-1.2.0 ?x284)))
 (let (($x235 (=> $x295 $x239)))
 (let (($x132 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x226 (ite $x132 (_ bv0 32) (_ bv1 32))))
 (let (($x73 (bvuge ?x226 (_ bv1 32))))
 (let (($x229 (= $x295 $x73)))
 (let (($x21 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x139 (=> $x21 $x152)))
 (let (($x55 (= ?x226 (_ bv0 32))))
 (let (($x72 (= $x21 $x55)))
 (let (($x131 (and (and (and (and (and $x72 $x139) $x229) $x235) $x194) $x5)))
 (let (($x206 (= $x131 true)))
 (let ((?x16 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x54 (= (_ bv0 3) ?x16)))
 (let (($x41 (= $x54 true)))
 (let (($x169 (= $x41 true)))
 (let (($x184 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x37 (= $x184 true)))
 (let (($x168 (= $x37 true)))
 (let (($x186 (= $x168 true)))
 (let (($x166 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x85 (= $x166 true)))
 (let (($x157 (= $x85 true)))
 (let (($x101 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x197 (= $x101 true)))
 (let (($x105 (= $x197 true)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x213)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x134 $x124)))
 (let (($x59 (and $x122 $x62)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x68 $x59)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x126)))))))
 (let (($x63 (and $x174 $x179)))
 (let (($x84 (= $x63 true)))
 (let (($x117 (= $x84 true)))
 (let (($x83 (= $x117 true)))
 (let (($x128 (and $x83 $x105)))
 (let (($x47 (and $x128 $x157)))
 (let (($x13 (and $x47 $x186)))
 (let (($x160 (and $x13 $x169)))
 (let (($x297 (and $x160 $x206)))
 (let (($x304 (and $x297 $x177)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x198 (and $x71 $x304)))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x106 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x29 (_ bv3 32)))))
 (let (($x88 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x165 $x106)))))))
 (let (($x118 (not $x103)))
 (let (($x231 (=> (and $x118 (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x165 $x106)))))))
 (let (($x67 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x218 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x65 (_ bv1 32))) (or false (or false (and true (or $x129 $x67)))))))
 (let (($x56 (=> (and $x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x65 (_ bv1 32)))) (or false (or false (and true (or $x129 $x67)))))))
 (let (($x163 (and $x56 $x231)))
 (let (($x195 (and $x163 $x198)))
 (let (($x185 (=> $x195 $x133)))
 (not $x185)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x48 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x260))))
 (let ((?x136 ((_ extract 2 0) ?x123)))
 (let (($x100 (= (_ bv0 3) ?x136)))
 (let (($x95 (= $x100 true)))
 (let ((?x142 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x223))))
 (let (($x244 (= (_ bv0 32) ?x290)))
 (let ((?x312 (ite $x244 (_ bv0 32) (_ bv1 32))))
 (let (($x241 (bvuge ?x312 (_ bv1 32))))
 (let (($x77 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x306 (= $x77 $x241)))
 (let (($x120 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x267 (=> $x120 $x306)))
 (let (($x279 (= ?x312 (_ bv0 32))))
 (let (($x247 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x12 (= $x247 $x279)))
 (let (($x51 (=> $x120 $x12)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x164 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x315 (concat (select input.dst.llvm-mem ?x164) (concat ?x296 (concat ?x207 ?x33)))))
 (let (($x301 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x315)))
 (let (($x162 (=> $x120 $x301)))
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x250 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x317 (bvuge ?x250 (_ bv1 32))))
 (let (($x93 (= $x120 $x317)))
 (let (($x273 (= false false)))
 (let (($x195 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x185 (=> $x195 $x273)))
 (let (($x242 (= ?x250 (_ bv0 32))))
 (let (($x133 (= $x195 $x242)))
 (let (($x43 (and (and (and (and (and $x133 $x185) $x93) $x162) $x51) $x267)))
 (let (($x307 (= $x43 true)))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x214 (concat ?x199 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x200 (concat ?x8 ?x214))))
 (let (($x219 (= (_ bv0 32) ?x172)))
 (let ((?x53 (ite $x219 (_ bv0 32) (_ bv1 32))))
 (let (($x285 (bvuge ?x53 (_ bv1 32))))
 (let (($x222 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x10 (= $x222 $x285)))
 (let (($x6 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x146 (=> $x6 $x10)))
 (let (($x191 (= ?x53 (_ bv0 32))))
 (let (($x111 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x25 (= $x111 $x191)))
 (let (($x220 (=> $x6 $x25)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x44)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x64)))
 (let (($x230 (= input.spec-%var-l-1.2.0 ?x104)))
 (let (($x205 (=> $x6 $x230)))
 (let (($x297 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x209 (ite $x297 (_ bv0 32) (_ bv1 32))))
 (let (($x74 (bvuge ?x209 (_ bv1 32))))
 (let (($x176 (= $x6 $x74)))
 (let (($x131 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x7 (=> $x131 $x273)))
 (let (($x52 (= ?x209 (_ bv0 32))))
 (let (($x257 (= $x131 $x52)))
 (let (($x177 (and (and (and (and (and $x257 $x7) $x176) $x205) $x220) $x146)))
 (let (($x304 (= $x177 true)))
 (let ((?x194 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x187 (= (_ bv0 3) ?x194)))
 (let (($x274 (= $x187 true)))
 (let (($x57 (= $x274 true)))
 (let (($x153 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x97 (= $x153 true)))
 (let (($x112 (= $x97 true)))
 (let (($x189 (= $x112 true)))
 (let (($x235 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41))))
 (let (($x171 (and true $x21)))
 (let (($x284 (and $x21 $x171)))
 (let (($x158 (= (bvand ?x123 (_ bv4294967288 32)) ?x123)))
 (let (($x295 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x233 (and $x295 $x158)))
 (let (($x152 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x48 (bvsub ?x48 (_ bv4 32))) (bvult ?x48 (bvsub ?x48 (_ bv4 32))))))
 (let (($x61 (and (and (and (and (and $x171 $x152) $x295) $x233) $x284) $x235)))
 (let (($x30 (= true $x61)))
 (let (($x118 (not $x103)))
 (let (($x277 (=> $x118 $x30)))
 (let (($x81 (= $x277 true)))
 (let (($x94 (= $x81 true)))
 (let (($x188 (= $x94 true)))
 (let (($x13 (= $x118 true)))
 (let (($x19 (= $x13 true)))
 (let (($x16 (= $x19 true)))
 (let (($x184 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x37 (= $x184 true)))
 (let (($x168 (= $x37 true)))
 (let (($x166 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x85 (= $x166 true)))
 (let (($x157 (= $x85 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x84)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x62 $x179)))
 (let (($x83 (and $x63 $x117)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x232 $x83)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x213 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x174 $x227)))))))
 (let (($x101 (and $x213 $x130)))
 (let (($x197 (= $x101 true)))
 (let (($x105 (= $x197 true)))
 (let (($x128 (= $x105 true)))
 (let (($x47 (and $x128 $x157)))
 (let (($x186 (and $x47 $x168)))
 (let (($x54 (and $x186 $x16)))
 (let (($x87 (and $x54 $x188)))
 (let (($x276 (and $x87 $x189)))
 (let (($x9 (and $x276 $x57)))
 (let (($x198 (and $x9 $x304)))
 (let (($x255 (and $x198 $x307)))
 (let (($x280 (and $x120 $x255)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x141 (and $x20 $x280)))
 (let (($x11 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd ?x48 (_ bv3 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x71 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x11)))))))
 (let (($x58 (=> (and $x118 (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x89 $x11)))))))
 (let (($x224 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x86 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x142 (_ bv1 32))) (or false (or false (and true (or $x96 $x224)))))))
 (let (($x140 (=> (and $x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x142 (_ bv1 32)))) (or false (or false (and true (or $x96 $x224)))))))
 (let (($x135 (and $x140 $x58)))
 (let (($x147 (and $x135 $x141)))
 (let (($x243 (=> $x147 $x95)))
 (not $x243)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x48 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x260))))
 (let ((?x136 ((_ extract 2 0) ?x123)))
 (let (($x100 (= (_ bv0 3) ?x136)))
 (let (($x95 (= $x100 true)))
 (let ((?x142 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x223))))
 (let (($x244 (= (_ bv0 32) ?x290)))
 (let ((?x312 (ite $x244 (_ bv0 32) (_ bv1 32))))
 (let (($x241 (bvuge ?x312 (_ bv1 32))))
 (let (($x77 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x306 (= $x77 $x241)))
 (let (($x120 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x267 (=> $x120 $x306)))
 (let (($x279 (= ?x312 (_ bv0 32))))
 (let (($x247 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x12 (= $x247 $x279)))
 (let (($x51 (=> $x120 $x12)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x164 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x315 (concat (select input.dst.llvm-mem ?x164) (concat ?x296 (concat ?x207 ?x33)))))
 (let (($x301 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x315)))
 (let (($x162 (=> $x120 $x301)))
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x250 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x317 (bvuge ?x250 (_ bv1 32))))
 (let (($x93 (= $x120 $x317)))
 (let (($x273 (= false false)))
 (let (($x195 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x185 (=> $x195 $x273)))
 (let (($x242 (= ?x250 (_ bv0 32))))
 (let (($x133 (= $x195 $x242)))
 (let (($x43 (and (and (and (and (and $x133 $x185) $x93) $x162) $x51) $x267)))
 (let (($x307 (= $x43 true)))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x214 (concat ?x199 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x172 (concat ?x200 (concat ?x8 ?x214))))
 (let (($x219 (= (_ bv0 32) ?x172)))
 (let ((?x53 (ite $x219 (_ bv0 32) (_ bv1 32))))
 (let (($x285 (bvuge ?x53 (_ bv1 32))))
 (let (($x222 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x10 (= $x222 $x285)))
 (let (($x6 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x146 (=> $x6 $x10)))
 (let (($x191 (= ?x53 (_ bv0 32))))
 (let (($x111 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x25 (= $x111 $x191)))
 (let (($x220 (=> $x6 $x25)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x44)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x64)))
 (let (($x230 (= input.spec-%var-l-1.2.0 ?x104)))
 (let (($x205 (=> $x6 $x230)))
 (let (($x297 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x209 (ite $x297 (_ bv0 32) (_ bv1 32))))
 (let (($x74 (bvuge ?x209 (_ bv1 32))))
 (let (($x176 (= $x6 $x74)))
 (let (($x131 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x7 (=> $x131 $x273)))
 (let (($x52 (= ?x209 (_ bv0 32))))
 (let (($x257 (= $x131 $x52)))
 (let (($x177 (and (and (and (and (and $x257 $x7) $x176) $x205) $x220) $x146)))
 (let (($x304 (= $x177 true)))
 (let ((?x194 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x187 (= (_ bv0 3) ?x194)))
 (let (($x274 (= $x187 true)))
 (let (($x57 (= $x274 true)))
 (let (($x153 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x97 (= $x153 true)))
 (let (($x112 (= $x97 true)))
 (let (($x189 (= $x112 true)))
 (let (($x235 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x41 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x41))))
 (let (($x171 (and true $x21)))
 (let (($x284 (and $x21 $x171)))
 (let (($x158 (= (bvand ?x123 (_ bv4294967288 32)) ?x123)))
 (let (($x295 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x233 (and $x295 $x158)))
 (let (($x152 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x48 (bvsub ?x48 (_ bv4 32))) (bvult ?x48 (bvsub ?x48 (_ bv4 32))))))
 (let (($x61 (and (and (and (and (and $x171 $x152) $x295) $x233) $x284) $x235)))
 (let (($x30 (= true $x61)))
 (let (($x118 (not $x103)))
 (let (($x277 (=> $x118 $x30)))
 (let (($x81 (= $x277 true)))
 (let (($x94 (= $x81 true)))
 (let (($x188 (= $x94 true)))
 (let (($x13 (= $x118 true)))
 (let (($x19 (= $x13 true)))
 (let (($x16 (= $x19 true)))
 (let (($x184 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x37 (= $x184 true)))
 (let (($x168 (= $x37 true)))
 (let (($x166 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x85 (= $x166 true)))
 (let (($x157 (= $x85 true)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x84)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x59)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x62 $x179)))
 (let (($x83 (and $x63 $x117)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x232 $x83)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x213 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x174 $x227)))))))
 (let (($x101 (and $x213 $x130)))
 (let (($x197 (= $x101 true)))
 (let (($x105 (= $x197 true)))
 (let (($x128 (= $x105 true)))
 (let (($x47 (and $x128 $x157)))
 (let (($x186 (and $x47 $x168)))
 (let (($x54 (and $x186 $x16)))
 (let (($x87 (and $x54 $x188)))
 (let (($x276 (and $x87 $x189)))
 (let (($x9 (and $x276 $x57)))
 (let (($x198 (and $x9 $x304)))
 (let (($x255 (and $x198 $x307)))
 (let (($x280 (and $x120 $x255)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x141 (and $x20 $x280)))
 (let (($x11 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd ?x48 (_ bv3 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x71 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x11)))))))
 (let (($x58 (=> (and $x118 (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x89 $x11)))))))
 (let (($x224 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x86 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x142 (_ bv1 32))) (or false (or false (and true (or $x96 $x224)))))))
 (let (($x140 (=> (and $x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x142 (_ bv1 32)))) (or false (or false (and true (or $x96 $x224)))))))
 (let (($x135 (and $x140 $x58)))
 (let (($x147 (and $x135 $x141)))
 (let (($x243 (=> $x147 $x95)))
 (not $x243)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x270 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x305 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x27 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x301 (concat (select input.dst.llvm-mem ?x27) (concat ?x221 (concat ?x305 ?x270)))))
 (let ((?x243 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x301)))
 (let (($x289 (= (_ bv0 32) ?x243)))
 (let (($x156 (= $x289 true)))
 (let ((?x129 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x288))))
 (let (($x244 (= (_ bv0 32) ?x290)))
 (let ((?x312 (ite $x244 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x312 (_ bv1 32))))
 (let (($x79 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x241 (= $x79 $x77)))
 (let (($x159 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x306 (=> $x159 $x241)))
 (let (($x279 (= ?x312 (_ bv0 32))))
 (let (($x247 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x12 (= $x247 $x279)))
 (let (($x51 (=> $x159 $x12)))
 (let (($x162 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x301)))
 (let (($x291 (=> $x159 $x162)))
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x35 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x35 (_ bv1 32))))
 (let (($x155 (= $x159 $x26)))
 (let (($x176 (= false false)))
 (let (($x185 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x93 (=> $x185 $x176)))
 (let (($x120 (= ?x35 (_ bv0 32))))
 (let (($x317 (= $x185 $x120)))
 (let (($x280 (and (and (and (and (and $x317 $x93) $x155) $x291) $x51) $x306)))
 (let (($x141 (= $x280 true)))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x199 (concat ?x173 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x53 (concat ?x219 (concat ?x214 ?x199))))
 (let (($x191 (= (_ bv0 32) ?x53)))
 (let ((?x25 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x10 (bvuge ?x25 (_ bv1 32))))
 (let (($x285 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x146 (= $x285 $x10)))
 (let (($x170 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x177 (=> $x170 $x146)))
 (let (($x220 (= ?x25 (_ bv0 32))))
 (let (($x46 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x127 (= $x46 $x220)))
 (let (($x222 (=> $x170 $x127)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x261)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x104)))
 (let (($x78 (= input.spec-%var-l-1.2.0 ?x182)))
 (let (($x111 (=> $x170 $x78)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x287 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x287 (_ bv1 32))))
 (let (($x50 (= $x170 $x193)))
 (let (($x257 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x316 (=> $x257 $x176)))
 (let (($x6 (= ?x287 (_ bv0 32))))
 (let (($x74 (= $x257 $x6)))
 (let (($x250 (and (and (and (and (and $x74 $x316) $x50) $x111) $x222) $x177)))
 (let (($x242 (= $x250 true)))
 (let ((?x5 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x131 (= (_ bv0 3) ?x5)))
 (let (($x206 (= $x131 true)))
 (let (($x297 (= $x206 true)))
 (let (($x194 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x187 (= $x194 true)))
 (let (($x274 (= $x187 true)))
 (let (($x153 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x97 (= $x153 true)))
 (let (($x112 (= $x97 true)))
 (let (($x189 (= $x112 true)))
 (let (($x167 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169))))
 (let (($x171 (and true $x21)))
 (let (($x158 (and $x21 $x171)))
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x266))))
 (let (($x90 (= (bvand ?x260 (_ bv4294967288 32)) ?x260)))
 (let (($x203 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x181 (and $x203 $x90)))
 (let (($x152 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv4 32))) (bvult ?x110 (bvsub ?x110 (_ bv4 32))))))
 (let (($x61 (and (and (and (and (and $x171 $x152) $x203) $x181) $x158) $x167)))
 (let (($x30 (= true $x61)))
 (let (($x118 (not $x103)))
 (let (($x277 (=> $x118 $x30)))
 (let (($x81 (= $x277 true)))
 (let (($x94 (= $x81 true)))
 (let (($x188 (= $x94 true)))
 (let (($x13 (= $x118 true)))
 (let (($x19 (= $x13 true)))
 (let (($x16 (= $x19 true)))
 (let (($x184 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x37 (= $x184 true)))
 (let (($x168 (= $x37 true)))
 (let ((?x197 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x197)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x117 $x130)))
 (let (($x128 (and $x101 $x105)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x68 $x128)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x213 $x126)))))))
 (let (($x166 (and $x84 $x42)))
 (let (($x85 (= $x166 true)))
 (let (($x157 (= $x85 true)))
 (let (($x47 (= $x157 true)))
 (let (($x186 (and $x47 $x168)))
 (let (($x54 (and $x186 $x16)))
 (let (($x87 (and $x54 $x188)))
 (let (($x276 (and $x87 $x189)))
 (let (($x57 (and $x276 $x274)))
 (let (($x209 (and $x57 $x297)))
 (let (($x133 (and $x209 $x242)))
 (let (($x147 (and $x133 $x141)))
 (let (($x136 (and $x159 $x147)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x100 (and $x180 $x136)))
 (let (($x231 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd ?x110 (_ bv3 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x20 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x231)))))))
 (let (($x109 (=> (and $x118 (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x88 $x231)))))))
 (let (($x56 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x106 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x129 (_ bv1 32))) (or false (or false (and true (or $x218 $x56)))))))
 (let (($x107 (=> (and $x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x129 (_ bv1 32)))) (or false (or false (and true (or $x218 $x56)))))))
 (let (($x98 (and $x107 $x109)))
 (let (($x95 (and $x98 $x100)))
 (let (($x23 (=> $x95 $x156)))
 (not $x23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x270 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x305 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x27 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x301 (concat (select input.dst.llvm-mem ?x27) (concat ?x221 (concat ?x305 ?x270)))))
 (let ((?x243 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x301)))
 (let (($x289 (= (_ bv0 32) ?x243)))
 (let (($x156 (= $x289 true)))
 (let ((?x129 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x288))))
 (let (($x244 (= (_ bv0 32) ?x290)))
 (let ((?x312 (ite $x244 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x312 (_ bv1 32))))
 (let (($x79 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x241 (= $x79 $x77)))
 (let (($x159 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x306 (=> $x159 $x241)))
 (let (($x279 (= ?x312 (_ bv0 32))))
 (let (($x247 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x12 (= $x247 $x279)))
 (let (($x51 (=> $x159 $x12)))
 (let (($x162 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x301)))
 (let (($x291 (=> $x159 $x162)))
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x35 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x35 (_ bv1 32))))
 (let (($x155 (= $x159 $x26)))
 (let (($x176 (= false false)))
 (let (($x185 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x93 (=> $x185 $x176)))
 (let (($x120 (= ?x35 (_ bv0 32))))
 (let (($x317 (= $x185 $x120)))
 (let (($x280 (and (and (and (and (and $x317 $x93) $x155) $x291) $x51) $x306)))
 (let (($x141 (= $x280 true)))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x199 (concat ?x173 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x53 (concat ?x219 (concat ?x214 ?x199))))
 (let (($x191 (= (_ bv0 32) ?x53)))
 (let ((?x25 (ite $x191 (_ bv0 32) (_ bv1 32))))
 (let (($x10 (bvuge ?x25 (_ bv1 32))))
 (let (($x285 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x146 (= $x285 $x10)))
 (let (($x170 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x177 (=> $x170 $x146)))
 (let (($x220 (= ?x25 (_ bv0 32))))
 (let (($x46 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x127 (= $x46 $x220)))
 (let (($x222 (=> $x170 $x127)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x261)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x104)))
 (let (($x78 (= input.spec-%var-l-1.2.0 ?x182)))
 (let (($x111 (=> $x170 $x78)))
 (let (($x7 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x287 (ite $x7 (_ bv0 32) (_ bv1 32))))
 (let (($x193 (bvuge ?x287 (_ bv1 32))))
 (let (($x50 (= $x170 $x193)))
 (let (($x257 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x316 (=> $x257 $x176)))
 (let (($x6 (= ?x287 (_ bv0 32))))
 (let (($x74 (= $x257 $x6)))
 (let (($x250 (and (and (and (and (and $x74 $x316) $x50) $x111) $x222) $x177)))
 (let (($x242 (= $x250 true)))
 (let ((?x5 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x131 (= (_ bv0 3) ?x5)))
 (let (($x206 (= $x131 true)))
 (let (($x297 (= $x206 true)))
 (let (($x194 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x187 (= $x194 true)))
 (let (($x274 (= $x187 true)))
 (let (($x153 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x97 (= $x153 true)))
 (let (($x112 (= $x97 true)))
 (let (($x189 (= $x112 true)))
 (let (($x167 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169))))
 (let (($x171 (and true $x21)))
 (let (($x158 (and $x21 $x171)))
 (let ((?x110 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x266))))
 (let (($x90 (= (bvand ?x260 (_ bv4294967288 32)) ?x260)))
 (let (($x203 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x181 (and $x203 $x90)))
 (let (($x152 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv4 32))) (bvult ?x110 (bvsub ?x110 (_ bv4 32))))))
 (let (($x61 (and (and (and (and (and $x171 $x152) $x203) $x181) $x158) $x167)))
 (let (($x30 (= true $x61)))
 (let (($x118 (not $x103)))
 (let (($x277 (=> $x118 $x30)))
 (let (($x81 (= $x277 true)))
 (let (($x94 (= $x81 true)))
 (let (($x188 (= $x94 true)))
 (let (($x13 (= $x118 true)))
 (let (($x19 (= $x13 true)))
 (let (($x16 (= $x19 true)))
 (let (($x184 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x37 (= $x184 true)))
 (let (($x168 (= $x37 true)))
 (let ((?x197 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x197)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x117 $x130)))
 (let (($x128 (and $x101 $x105)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x68 $x128)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x213 $x126)))))))
 (let (($x166 (and $x84 $x42)))
 (let (($x85 (= $x166 true)))
 (let (($x157 (= $x85 true)))
 (let (($x47 (= $x157 true)))
 (let (($x186 (and $x47 $x168)))
 (let (($x54 (and $x186 $x16)))
 (let (($x87 (and $x54 $x188)))
 (let (($x276 (and $x87 $x189)))
 (let (($x57 (and $x276 $x274)))
 (let (($x209 (and $x57 $x297)))
 (let (($x133 (and $x209 $x242)))
 (let (($x147 (and $x133 $x141)))
 (let (($x136 (and $x159 $x147)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x100 (and $x180 $x136)))
 (let (($x231 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd ?x110 (_ bv3 32))))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x20 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x231)))))))
 (let (($x109 (=> (and $x118 (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x88 $x231)))))))
 (let (($x56 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x106 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x129 (_ bv1 32))) (or false (or false (and true (or $x218 $x56)))))))
 (let (($x107 (=> (and $x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x129 (_ bv1 32)))) (or false (or false (and true (or $x218 $x56)))))))
 (let (($x98 (and $x107 $x109)))
 (let (($x95 (and $x98 $x100)))
 (let (($x23 (=> $x95 $x156)))
 (not $x23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv112 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv112 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv16384 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv232 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv232 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv235 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x003ffffc)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00400006)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00400000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x7d0adef2)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x40))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x003ffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x003fffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x183 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x29 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x149 (concat (select input.dst.llvm-mem ?x29) (concat ?x236 (concat ?x162 ?x183)))))
 (let ((?x202 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x149)))
 (let (($x34 (= (_ bv0 32) ?x202)))
 (let (($x245 (= $x34 true)))
 (let (($x141 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x124 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x289 (and $x124 $x141)))
 (let (($x156 (not $x289)))
 (let (($x192 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x95 (and $x124 $x192)))
 (let (($x243 (not $x95)))
 (let ((?x96 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv1 32))) (select input.dst.llvm-mem ?x96))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv2 32))) ?x290))))
 (let (($x79 (= (_ bv0 32) ?x255)))
 (let ((?x77 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x77 (_ bv1 32))))
 (let (($x136 (= $x141 $x147)))
 (let (($x100 (=> $x124 $x136)))
 (let (($x241 (= ?x77 (_ bv0 32))))
 (let (($x306 (= $x192 $x241)))
 (let (($x280 (=> $x124 $x306)))
 (let (($x151 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x149)))
 (let (($x31 (=> $x124 $x151)))
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x315 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (bvuge ?x315 (_ bv1 32))))
 (let (($x270 (= $x124 $x305)))
 (let (($x50 (= false false)))
 (let (($x196 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x296 (=> $x196 $x50)))
 (let (($x33 (= ?x315 (_ bv0 32))))
 (let (($x221 (= $x196 $x33)))
 (let (($x99 (and (and (and (and (and (and $x221 $x296) $x270) $x31) $x280) $x100) $x243)))
 (let (($x293 (and $x99 $x156)))
 (let (($x238 (= $x293 true)))
 (let (($x10 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x240 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x122 (and $x240 $x10)))
 (let (($x185 (not $x122)))
 (let (($x172 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x242 (and $x240 $x172)))
 (let (($x133 (not $x242)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x173 (concat ?x8 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x25 (concat ?x191 (concat ?x199 ?x173))))
 (let (($x220 (= (_ bv0 32) ?x25)))
 (let ((?x127 (ite $x220 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (bvuge ?x127 (_ bv1 32))))
 (let (($x177 (= $x10 $x146)))
 (let (($x250 (=> $x240 $x177)))
 (let (($x222 (= ?x127 (_ bv0 32))))
 (let (($x195 (= $x172 $x222)))
 (let (($x285 (=> $x240 $x195)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x234)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x182)))
 (let (($x258 (= input.spec-%var-l-1.2.0 ?x125)))
 (let (($x46 (=> $x240 $x258)))
 (let (($x316 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x304 (ite $x316 (_ bv0 32) (_ bv1 32))))
 (let (($x230 (bvuge ?x304 (_ bv1 32))))
 (let (($x205 (= $x240 $x230)))
 (let (($x74 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x198 (=> $x74 $x50)))
 (let (($x170 (= ?x304 (_ bv0 32))))
 (let (($x193 (= $x74 $x170)))
 (let (($x159 (and (and (and (and (and (and $x193 $x198) $x205) $x46) $x285) $x250) $x133)))
 (let (($x26 (and $x159 $x185)))
 (let (($x155 (= $x26 true)))
 (let ((?x52 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x257 (= (_ bv0 3) ?x52)))
 (let (($x273 (= $x257 true)))
 (let (($x7 (= $x273 true)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x131 (= $x5 true)))
 (let (($x206 (= $x131 true)))
 (let (($x82 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x194 (= $x82 true)))
 (let (($x187 (= $x194 true)))
 (let (($x274 (= $x187 true)))
 (let (($x61 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x171 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x72 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x171) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x171))))
 (let (($x152 (and true $x72)))
 (let (($x233 (and $x72 $x152)))
 (let ((?x165 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x278))))
 (let (($x158 (= (bvand ?x90 (_ bv4294967288 32)) ?x90)))
 (let (($x143 (= (bvand ?x165 (_ bv4294967292 32)) ?x165)))
 (let (($x235 (and $x143 $x158)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x165 (bvsub ?x165 (_ bv4 32))) (bvult ?x165 (bvsub ?x165 (_ bv4 32))))))
 (let (($x188 (and (and (and (and (and $x152 $x70) $x143) $x235) $x233) $x61)))
 (let (($x87 (= true $x188)))
 (let (($x118 (not $x103)))
 (let (($x190 (=> $x118 $x87)))
 (let (($x153 (= $x190 true)))
 (let (($x97 (= $x153 true)))
 (let (($x112 (= $x97 true)))
 (let (($x169 (= $x118 true)))
 (let (($x160 (= $x169 true)))
 (let (($x175 (= $x160 true)))
 (let (($x19 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x16 (= $x19 true)))
 (let (($x54 (= $x16 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x85)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x105 $x42)))
 (let (($x47 (and $x166 $x157)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (and $x232 $x47)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x197 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x227)))))))
 (let (($x184 (and $x197 $x216)))
 (let (($x37 (= $x184 true)))
 (let (($x168 (= $x37 true)))
 (let (($x186 (= $x168 true)))
 (let (($x41 (and $x186 $x54)))
 (let (($x21 (and $x41 $x175)))
 (let (($x189 (and $x21 $x112)))
 (let (($x57 (and $x189 $x274)))
 (let (($x297 (and $x57 $x206)))
 (let (($x287 (and $x297 $x7)))
 (let (($x43 (and $x287 $x155)))
 (let (($x282 (and $x43 $x238)))
 (let (($x292 (and $x124 $x282)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x24 (and $x148 $x292)))
 (let (($x58 (bvugt ?x165 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd ?x165 (_ bv3 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x180 (=> (bvule ?x165 (bvsub (bvadd ?x165 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x58)))))))
 (let (($x28 (=> (and $x118 (bvule ?x165 (bvsub (bvadd ?x165 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x71 $x58)))))))
 (let (($x140 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x11 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x96 (_ bv1 32))) (or false (or false (and true (or $x86 $x140)))))))
 (let (($x164 (=> (and $x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x96 (_ bv1 32)))) (or false (or false (and true (or $x86 $x140)))))))
 (let (($x17 (and $x164 $x28)))
 (let (($x102 (and $x17 $x24)))
 (let (($x18 (=> $x102 $x245)))
 (not $x18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x183 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x29 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x149 (concat (select input.dst.llvm-mem ?x29) (concat ?x236 (concat ?x162 ?x183)))))
 (let ((?x202 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x149)))
 (let (($x34 (= (_ bv0 32) ?x202)))
 (let (($x245 (= $x34 true)))
 (let (($x141 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x124 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x289 (and $x124 $x141)))
 (let (($x156 (not $x289)))
 (let (($x192 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x95 (and $x124 $x192)))
 (let (($x243 (not $x95)))
 (let ((?x96 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv1 32))) (select input.dst.llvm-mem ?x96))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv2 32))) ?x290))))
 (let (($x79 (= (_ bv0 32) ?x255)))
 (let ((?x77 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x77 (_ bv1 32))))
 (let (($x136 (= $x141 $x147)))
 (let (($x100 (=> $x124 $x136)))
 (let (($x241 (= ?x77 (_ bv0 32))))
 (let (($x306 (= $x192 $x241)))
 (let (($x280 (=> $x124 $x306)))
 (let (($x151 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x149)))
 (let (($x31 (=> $x124 $x151)))
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x315 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x305 (bvuge ?x315 (_ bv1 32))))
 (let (($x270 (= $x124 $x305)))
 (let (($x50 (= false false)))
 (let (($x196 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x296 (=> $x196 $x50)))
 (let (($x33 (= ?x315 (_ bv0 32))))
 (let (($x221 (= $x196 $x33)))
 (let (($x99 (and (and (and (and (and (and $x221 $x296) $x270) $x31) $x280) $x100) $x243)))
 (let (($x293 (and $x99 $x156)))
 (let (($x238 (= $x293 true)))
 (let (($x10 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x240 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x122 (and $x240 $x10)))
 (let (($x185 (not $x122)))
 (let (($x172 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x242 (and $x240 $x172)))
 (let (($x133 (not $x242)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x173 (concat ?x8 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x25 (concat ?x191 (concat ?x199 ?x173))))
 (let (($x220 (= (_ bv0 32) ?x25)))
 (let ((?x127 (ite $x220 (_ bv0 32) (_ bv1 32))))
 (let (($x146 (bvuge ?x127 (_ bv1 32))))
 (let (($x177 (= $x10 $x146)))
 (let (($x250 (=> $x240 $x177)))
 (let (($x222 (= ?x127 (_ bv0 32))))
 (let (($x195 (= $x172 $x222)))
 (let (($x285 (=> $x240 $x195)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x234)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x182)))
 (let (($x258 (= input.spec-%var-l-1.2.0 ?x125)))
 (let (($x46 (=> $x240 $x258)))
 (let (($x316 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x304 (ite $x316 (_ bv0 32) (_ bv1 32))))
 (let (($x230 (bvuge ?x304 (_ bv1 32))))
 (let (($x205 (= $x240 $x230)))
 (let (($x74 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x198 (=> $x74 $x50)))
 (let (($x170 (= ?x304 (_ bv0 32))))
 (let (($x193 (= $x74 $x170)))
 (let (($x159 (and (and (and (and (and (and $x193 $x198) $x205) $x46) $x285) $x250) $x133)))
 (let (($x26 (and $x159 $x185)))
 (let (($x155 (= $x26 true)))
 (let ((?x52 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x257 (= (_ bv0 3) ?x52)))
 (let (($x273 (= $x257 true)))
 (let (($x7 (= $x273 true)))
 (let (($x5 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x131 (= $x5 true)))
 (let (($x206 (= $x131 true)))
 (let (($x82 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x194 (= $x82 true)))
 (let (($x187 (= $x194 true)))
 (let (($x274 (= $x187 true)))
 (let (($x61 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x171 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x72 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x171) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x171))))
 (let (($x152 (and true $x72)))
 (let (($x233 (and $x72 $x152)))
 (let ((?x165 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x278))))
 (let (($x158 (= (bvand ?x90 (_ bv4294967288 32)) ?x90)))
 (let (($x143 (= (bvand ?x165 (_ bv4294967292 32)) ?x165)))
 (let (($x235 (and $x143 $x158)))
 (let (($x70 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x165 (bvsub ?x165 (_ bv4 32))) (bvult ?x165 (bvsub ?x165 (_ bv4 32))))))
 (let (($x188 (and (and (and (and (and $x152 $x70) $x143) $x235) $x233) $x61)))
 (let (($x87 (= true $x188)))
 (let (($x118 (not $x103)))
 (let (($x190 (=> $x118 $x87)))
 (let (($x153 (= $x190 true)))
 (let (($x97 (= $x153 true)))
 (let (($x112 (= $x97 true)))
 (let (($x169 (= $x118 true)))
 (let (($x160 (= $x169 true)))
 (let (($x175 (= $x160 true)))
 (let (($x19 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x16 (= $x19 true)))
 (let (($x54 (= $x16 true)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x85)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x105 $x42)))
 (let (($x47 (and $x166 $x157)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (and $x232 $x47)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x197 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x227)))))))
 (let (($x184 (and $x197 $x216)))
 (let (($x37 (= $x184 true)))
 (let (($x168 (= $x37 true)))
 (let (($x186 (= $x168 true)))
 (let (($x41 (and $x186 $x54)))
 (let (($x21 (and $x41 $x175)))
 (let (($x189 (and $x21 $x112)))
 (let (($x57 (and $x189 $x274)))
 (let (($x297 (and $x57 $x206)))
 (let (($x287 (and $x297 $x7)))
 (let (($x43 (and $x287 $x155)))
 (let (($x282 (and $x43 $x238)))
 (let (($x292 (and $x124 $x282)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x24 (and $x148 $x292)))
 (let (($x58 (bvugt ?x165 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd ?x165 (_ bv3 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x180 (=> (bvule ?x165 (bvsub (bvadd ?x165 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x58)))))))
 (let (($x28 (=> (and $x118 (bvule ?x165 (bvsub (bvadd ?x165 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x71 $x58)))))))
 (let (($x140 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x11 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x96 (_ bv1 32))) (or false (or false (and true (or $x86 $x140)))))))
 (let (($x164 (=> (and $x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x96 (_ bv1 32)))) (or false (or false (and true (or $x86 $x140)))))))
 (let (($x17 (and $x164 $x28)))
 (let (($x102 (and $x17 $x24)))
 (let (($x18 (=> $x102 $x245)))
 (not $x18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x282 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x48 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x48) (concat ?x282 (concat ?x156 ?x99)))))
 (let ((?x341 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x102)))
 (let (($x325 (= (_ bv0 32) ?x341)))
 (let (($x445 (= $x325 true)))
 (let ((?x218 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x213))))
 (let ((?x252 (bvadd ?x201 (_ bv4 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x264))))
 (let (($x154 (= (_ bv0 32) ?x300)))
 (let ((?x15 (ite $x154 (_ bv0 32) (_ bv1 32))))
 (let (($x442 (= ?x15 (_ bv0 32))))
 (let (($x441 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x340 (= $x441 $x442)))
 (let (($x286 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x179 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x212 (and $x179 $x286)))
 (let (($x108 (=> $x212 $x340)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x311))))
 (let (($x439 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x116)))
 (let (($x440 (=> $x212 $x439)))
 (let (($x275 (bvuge ?x15 (_ bv1 32))))
 (let (($x269 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x256 (= $x269 $x275)))
 (let (($x281 (=> $x212 $x256)))
 (let (($x205 (= false false)))
 (let (($x18 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x263 (and $x179 $x18)))
 (let (($x204 (=> $x263 $x205)))
 (let (($x251 (= (_ bv0 32) ?x201)))
 (let ((?x248 (ite $x251 (_ bv0 32) (_ bv1 32))))
 (let (($x210 (bvuge ?x248 (_ bv1 32))))
 (let (($x294 (= $x286 $x210)))
 (let (($x60 (=> $x179 $x294)))
 (let (($x271 (= ?x248 (_ bv0 32))))
 (let (($x309 (= $x18 $x271)))
 (let (($x217 (=> $x179 $x309)))
 (let (($x202 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x102)))
 (let (($x34 (=> $x179 $x202)))
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x141 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x141 (_ bv1 32))))
 (let (($x95 (= $x179 $x174)))
 (let (($x65 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x100 (=> $x65 $x205)))
 (let (($x147 (= ?x141 (_ bv0 32))))
 (let (($x136 (= $x65 $x147)))
 (let (($x323 (and (and (and (and (and (and $x136 $x100) $x95) $x34) $x217) $x60) $x204)))
 (let (($x319 (and (and (and $x323 $x281) $x440) $x108)))
 (let (($x320 (= $x319 true)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x8 (concat ?x214 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x127 (concat ?x220 (concat ?x173 ?x8))))
 (let ((?x39 (bvadd ?x127 (_ bv4 32))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x236))))
 (let (($x151 (= (_ bv0 32) ?x149)))
 (let ((?x31 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x51 (bvuge ?x31 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x244 (= $x12 $x51)))
 (let (($x146 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x44 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x159 (and $x44 $x146)))
 (let (($x312 (=> $x159 $x244)))
 (let (($x36 (= ?x31 (_ bv0 32))))
 (let (($x270 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x272 (= $x270 $x36)))
 (let (($x192 (=> $x159 $x272)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x43))))
 (let (($x23 (= input.spec-%var-l-1.2.1.2.0 ?x296)))
 (let (($x124 (=> $x159 $x23)))
 (let (($x53 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x242 (and $x44 $x53)))
 (let (($x133 (=> $x242 $x205)))
 (let (($x222 (= (_ bv0 32) ?x127)))
 (let ((?x195 (ite $x222 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (bvuge ?x195 (_ bv1 32))))
 (let (($x250 (= $x146 $x177)))
 (let (($x267 (=> $x44 $x250)))
 (let (($x285 (= ?x195 (_ bv0 32))))
 (let (($x93 (= $x53 $x285)))
 (let (($x10 (=> $x44 $x93)))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x64)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x125)))
 (let (($x200 (= input.spec-%var-l-1.2.0 ?x317)))
 (let (($x172 (=> $x44 $x200)))
 (let (($x198 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x35 (ite $x198 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x35 (_ bv1 32))))
 (let (($x111 (= $x44 $x78)))
 (let (($x193 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x120 (=> $x193 $x205)))
 (let (($x240 (= ?x35 (_ bv0 32))))
 (let (($x230 (= $x193 $x240)))
 (let (($x255 (and (and (and (and (and (and $x230 $x120) $x111) $x172) $x10) $x267) $x133)))
 (let (($x241 (and (and (and $x255 $x124) $x192) $x312)))
 (let (($x306 (= $x241 true)))
 (let ((?x6 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x74 (= (_ bv0 3) ?x6)))
 (let (($x176 (= $x74 true)))
 (let (($x316 (= $x176 true)))
 (let (($x52 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x257 (= $x52 true)))
 (let (($x273 (= $x257 true)))
 (let (($x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x5 (= $x9 true)))
 (let (($x131 (= $x5 true)))
 (let (($x206 (= $x131 true)))
 (let (($x188 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x152 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x203 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x152) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x152))))
 (let (($x70 (and true $x203)))
 (let (($x167 (and $x203 $x70)))
 (let ((?x89 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x265))))
 (let (($x233 (= (bvand ?x158 (_ bv4294967288 32)) ?x158)))
 (let (($x266 (= (bvand ?x89 (_ bv4294967292 32)) ?x89)))
 (let (($x94 (and $x266 $x233)))
 (let (($x277 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x89 (bvsub ?x89 (_ bv4 32))) (bvult ?x89 (bvsub ?x89 (_ bv4 32))))))
 (let (($x112 (and (and (and (and (and $x70 $x277) $x266) $x94) $x167) $x188)))
 (let (($x189 (= true $x112)))
 (let (($x118 (not $x103)))
 (let (($x276 (=> $x118 $x189)))
 (let (($x82 (= $x276 true)))
 (let (($x194 (= $x82 true)))
 (let (($x187 (= $x194 true)))
 (let (($x171 (= $x118 true)))
 (let (($x226 (= $x171 true)))
 (let (($x55 (= $x226 true)))
 (let (($x160 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x175 (= $x160 true)))
 (let (($x21 (= $x175 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x37)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (and $x157 $x216)))
 (let (($x186 (and $x184 $x168)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x68 $x186)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x197 $x126)))))))
 (let (($x19 (and $x85 $x13)))
 (let (($x16 (= $x19 true)))
 (let (($x54 (= $x16 true)))
 (let (($x41 (= $x54 true)))
 (let (($x132 (and $x41 $x21)))
 (let (($x72 (and $x132 $x55)))
 (let (($x274 (and $x72 $x187)))
 (let (($x297 (and $x274 $x206)))
 (let (($x7 (and $x297 $x273)))
 (let (($x304 (and $x7 $x316)))
 (let (($x280 (and $x304 $x306)))
 (let (($x32 (and $x280 $x320)))
 (let (($x318 (and $x179 $x32)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x69 (and $x59 $x318)))
 (let (($x109 (bvugt ?x89 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd ?x89 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x148 (=> (bvule ?x89 (bvsub (bvadd ?x89 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x109)))))))
 (let (($x40 (=> (and $x118 (bvule ?x89 (bvsub (bvadd ?x89 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x20 $x109)))))))
 (let (($x107 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x231 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x218 (_ bv1 32))) (or false (or false (and true (or $x106 $x107)))))))
 (let (($x27 (=> (and $x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x218 (_ bv1 32)))) (or false (or false (and true (or $x106 $x107)))))))
 (let (($x163 (and $x27 $x40)))
 (let (($x324 (and $x163 $x69)))
 (let (($x329 (=> $x324 $x445)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x99 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x282 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x48 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x102 (concat (select input.dst.llvm-mem ?x48) (concat ?x282 (concat ?x156 ?x99)))))
 (let ((?x341 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x102)))
 (let (($x325 (= (_ bv0 32) ?x341)))
 (let (($x445 (= $x325 true)))
 (let ((?x218 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x213))))
 (let ((?x252 (bvadd ?x201 (_ bv4 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x264))))
 (let (($x154 (= (_ bv0 32) ?x300)))
 (let ((?x15 (ite $x154 (_ bv0 32) (_ bv1 32))))
 (let (($x442 (= ?x15 (_ bv0 32))))
 (let (($x441 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x340 (= $x441 $x442)))
 (let (($x286 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x179 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x212 (and $x179 $x286)))
 (let (($x108 (=> $x212 $x340)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x311))))
 (let (($x439 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x116)))
 (let (($x440 (=> $x212 $x439)))
 (let (($x275 (bvuge ?x15 (_ bv1 32))))
 (let (($x269 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x256 (= $x269 $x275)))
 (let (($x281 (=> $x212 $x256)))
 (let (($x205 (= false false)))
 (let (($x18 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x263 (and $x179 $x18)))
 (let (($x204 (=> $x263 $x205)))
 (let (($x251 (= (_ bv0 32) ?x201)))
 (let ((?x248 (ite $x251 (_ bv0 32) (_ bv1 32))))
 (let (($x210 (bvuge ?x248 (_ bv1 32))))
 (let (($x294 (= $x286 $x210)))
 (let (($x60 (=> $x179 $x294)))
 (let (($x271 (= ?x248 (_ bv0 32))))
 (let (($x309 (= $x18 $x271)))
 (let (($x217 (=> $x179 $x309)))
 (let (($x202 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x102)))
 (let (($x34 (=> $x179 $x202)))
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x141 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x141 (_ bv1 32))))
 (let (($x95 (= $x179 $x174)))
 (let (($x65 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x100 (=> $x65 $x205)))
 (let (($x147 (= ?x141 (_ bv0 32))))
 (let (($x136 (= $x65 $x147)))
 (let (($x323 (and (and (and (and (and (and $x136 $x100) $x95) $x34) $x217) $x60) $x204)))
 (let (($x319 (and (and (and $x323 $x281) $x440) $x108)))
 (let (($x320 (= $x319 true)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x8 (concat ?x214 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x127 (concat ?x220 (concat ?x173 ?x8))))
 (let ((?x39 (bvadd ?x127 (_ bv4 32))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x236))))
 (let (($x151 (= (_ bv0 32) ?x149)))
 (let ((?x31 (ite $x151 (_ bv0 32) (_ bv1 32))))
 (let (($x51 (bvuge ?x31 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x244 (= $x12 $x51)))
 (let (($x146 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x44 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x159 (and $x44 $x146)))
 (let (($x312 (=> $x159 $x244)))
 (let (($x36 (= ?x31 (_ bv0 32))))
 (let (($x270 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x272 (= $x270 $x36)))
 (let (($x192 (=> $x159 $x272)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x43))))
 (let (($x23 (= input.spec-%var-l-1.2.1.2.0 ?x296)))
 (let (($x124 (=> $x159 $x23)))
 (let (($x53 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x242 (and $x44 $x53)))
 (let (($x133 (=> $x242 $x205)))
 (let (($x222 (= (_ bv0 32) ?x127)))
 (let ((?x195 (ite $x222 (_ bv0 32) (_ bv1 32))))
 (let (($x177 (bvuge ?x195 (_ bv1 32))))
 (let (($x250 (= $x146 $x177)))
 (let (($x267 (=> $x44 $x250)))
 (let (($x285 (= ?x195 (_ bv0 32))))
 (let (($x93 (= $x53 $x285)))
 (let (($x10 (=> $x44 $x93)))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x64)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x125)))
 (let (($x200 (= input.spec-%var-l-1.2.0 ?x317)))
 (let (($x172 (=> $x44 $x200)))
 (let (($x198 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x35 (ite $x198 (_ bv0 32) (_ bv1 32))))
 (let (($x78 (bvuge ?x35 (_ bv1 32))))
 (let (($x111 (= $x44 $x78)))
 (let (($x193 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x120 (=> $x193 $x205)))
 (let (($x240 (= ?x35 (_ bv0 32))))
 (let (($x230 (= $x193 $x240)))
 (let (($x255 (and (and (and (and (and (and $x230 $x120) $x111) $x172) $x10) $x267) $x133)))
 (let (($x241 (and (and (and $x255 $x124) $x192) $x312)))
 (let (($x306 (= $x241 true)))
 (let ((?x6 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x74 (= (_ bv0 3) ?x6)))
 (let (($x176 (= $x74 true)))
 (let (($x316 (= $x176 true)))
 (let (($x52 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x257 (= $x52 true)))
 (let (($x273 (= $x257 true)))
 (let (($x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x5 (= $x9 true)))
 (let (($x131 (= $x5 true)))
 (let (($x206 (= $x131 true)))
 (let (($x188 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x152 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x203 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x152) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x152))))
 (let (($x70 (and true $x203)))
 (let (($x167 (and $x203 $x70)))
 (let ((?x89 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x265))))
 (let (($x233 (= (bvand ?x158 (_ bv4294967288 32)) ?x158)))
 (let (($x266 (= (bvand ?x89 (_ bv4294967292 32)) ?x89)))
 (let (($x94 (and $x266 $x233)))
 (let (($x277 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x89 (bvsub ?x89 (_ bv4 32))) (bvult ?x89 (bvsub ?x89 (_ bv4 32))))))
 (let (($x112 (and (and (and (and (and $x70 $x277) $x266) $x94) $x167) $x188)))
 (let (($x189 (= true $x112)))
 (let (($x118 (not $x103)))
 (let (($x276 (=> $x118 $x189)))
 (let (($x82 (= $x276 true)))
 (let (($x194 (= $x82 true)))
 (let (($x187 (= $x194 true)))
 (let (($x171 (= $x118 true)))
 (let (($x226 (= $x171 true)))
 (let (($x55 (= $x226 true)))
 (let (($x160 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x175 (= $x160 true)))
 (let (($x21 (= $x175 true)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x168 (= (_ bv0 32) ?x37)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (and $x157 $x216)))
 (let (($x186 (and $x184 $x168)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x68 $x186)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x197 $x126)))))))
 (let (($x19 (and $x85 $x13)))
 (let (($x16 (= $x19 true)))
 (let (($x54 (= $x16 true)))
 (let (($x41 (= $x54 true)))
 (let (($x132 (and $x41 $x21)))
 (let (($x72 (and $x132 $x55)))
 (let (($x274 (and $x72 $x187)))
 (let (($x297 (and $x274 $x206)))
 (let (($x7 (and $x297 $x273)))
 (let (($x304 (and $x7 $x316)))
 (let (($x280 (and $x304 $x306)))
 (let (($x32 (and $x280 $x320)))
 (let (($x318 (and $x179 $x32)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x69 (and $x59 $x318)))
 (let (($x109 (bvugt ?x89 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd ?x89 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x148 (=> (bvule ?x89 (bvsub (bvadd ?x89 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x20 $x109)))))))
 (let (($x40 (=> (and $x118 (bvule ?x89 (bvsub (bvadd ?x89 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x20 $x109)))))))
 (let (($x107 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x231 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x218 (_ bv1 32))) (or false (or false (and true (or $x106 $x107)))))))
 (let (($x27 (=> (and $x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x218 (_ bv1 32)))) (or false (or false (and true (or $x106 $x107)))))))
 (let (($x163 (and $x27 $x40)))
 (let (($x324 (and $x163 $x69)))
 (let (($x329 (=> $x324 $x445)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000f3e4)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xff)
              #x00010003
              #x7f)
       #x00010004
       #xf8))
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000f3e4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000f3e7)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x292 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x110 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x313 (concat (select input.dst.llvm-mem ?x110) (concat ?x245 (concat ?x202 ?x292)))))
 (let ((?x335 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x313)))
 (let (($x336 (= (_ bv0 32) ?x335)))
 (let (($x337 (= $x336 true)))
 (let (($x246 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x263 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x130 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x252 (and $x130 $x263)))
 (let (($x318 (and $x252 $x246)))
 (let (($x69 (not $x318)))
 (let (($x442 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x320 (and $x252 $x442)))
 (let (($x32 (not $x320)))
 (let ((?x86 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x201))))
 (let ((?x338 (bvadd ?x137 (_ bv4 32))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv1 32))) (select input.dst.llvm-mem ?x338))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv2 32))) ?x249))))
 (let (($x256 (= (_ bv0 32) ?x275)))
 (let ((?x281 (ite $x256 (_ bv0 32) (_ bv1 32))))
 (let (($x340 (= ?x281 (_ bv0 32))))
 (let (($x108 (= $x442 $x340)))
 (let (($x319 (=> $x252 $x108)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x440 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x66))))
 (let (($x321 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x440)))
 (let (($x441 (=> $x252 $x321)))
 (let (($x49 (bvuge ?x281 (_ bv1 32))))
 (let (($x283 (= $x246 $x49)))
 (let (($x339 (=> $x252 $x283)))
 (let (($x111 (= false false)))
 (let (($x142 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x308 (and $x130 $x142)))
 (let (($x269 (=> $x308 $x111)))
 (let (($x286 (= (_ bv0 32) ?x137)))
 (let ((?x210 (ite $x286 (_ bv0 32) (_ bv1 32))))
 (let (($x204 (bvuge ?x210 (_ bv1 32))))
 (let (($x323 (= $x263 $x204)))
 (let (($x212 (=> $x130 $x323)))
 (let (($x294 (= ?x210 (_ bv0 32))))
 (let (($x60 (= $x142 $x294)))
 (let (($x444 (=> $x130 $x60)))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x313)))
 (let (($x298 (=> $x130 $x303)))
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x24 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x24 (_ bv1 32))))
 (let (($x99 (= $x130 $x156)))
 (let (($x243 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x289 (=> $x243 $x111)))
 (let (($x238 (= ?x24 (_ bv0 32))))
 (let (($x282 (= $x243 $x238)))
 (let (($x332 (and (and (and (and (and (and $x282 $x289) $x99) $x298) $x444) $x212) $x269)))
 (let (($x328 (and (and (and (and (and $x332 $x339) $x441) $x319) $x32) $x69)))
 (let (($x334 (= $x328 true)))
 (let (($x79 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x177 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x261 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x255 (and $x261 $x177)))
 (let (($x312 (and $x255 $x79)))
 (let (($x241 (not $x312)))
 (let (($x272 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x51 (and $x255 $x272)))
 (let (($x244 (not $x51)))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x214 (concat ?x199 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x195 (concat ?x222 (concat ?x8 ?x214))))
 (let ((?x305 (bvadd ?x195 (_ bv4 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem ?x305))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv2 32))) ?x247))))
 (let (($x183 (= (_ bv0 32) ?x236)))
 (let ((?x149 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x149 (_ bv1 32))))
 (let (($x77 (= $x272 $x192)))
 (let (($x12 (=> $x255 $x77)))
 (let (($x151 (= ?x149 (_ bv0 32))))
 (let (($x31 (= $x79 $x151)))
 (let (($x36 (=> $x255 $x31)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem ?x195))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv2 32))) ?x63))))
 (let (($x296 (= input.spec-%var-l-1.2.1.2.0 ?x315)))
 (let (($x23 (=> $x255 $x296)))
 (let (($x25 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x242 (and $x261 $x25)))
 (let (($x133 (=> $x242 $x111)))
 (let (($x285 (= (_ bv0 32) ?x195)))
 (let ((?x93 (ite $x285 (_ bv0 32) (_ bv1 32))))
 (let (($x250 (bvuge ?x93 (_ bv1 32))))
 (let (($x267 (= $x177 $x250)))
 (let (($x279 (=> $x261 $x267)))
 (let (($x10 (= ?x93 (_ bv0 32))))
 (let (($x290 (= $x25 $x10)))
 (let (($x146 (=> $x261 $x290)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x104)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x317)))
 (let (($x219 (= input.spec-%var-l-1.2.0 ?x75)))
 (let (($x53 (=> $x261 $x219)))
 (let (($x120 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x288 (ite $x120 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x288 (_ bv1 32))))
 (let (($x46 (= $x261 $x258)))
 (let (($x230 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x211 (=> $x230 $x111)))
 (let (($x44 (= ?x288 (_ bv0 32))))
 (let (($x78 (= $x230 $x44)))
 (let (($x147 (and (and (and (and (and (and $x78 $x211) $x46) $x53) $x146) $x279) $x133)))
 (let (($x174 (and (and (and (and (and $x147 $x23) $x36) $x12) $x244) $x241)))
 (let (($x95 (= $x174 true)))
 (let ((?x170 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x193 (= (_ bv0 3) ?x170)))
 (let (($x50 (= $x193 true)))
 (let (($x198 (= $x50 true)))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x74 (= $x6 true)))
 (let (($x176 (= $x74 true)))
 (let (($x209 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x52 (= $x209 true)))
 (let (($x257 (= $x52 true)))
 (let (($x273 (= $x257 true)))
 (let (($x112 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x70 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x70) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x70))))
 (let (($x277 (and true $x143)))
 (let (($x61 (and $x143 $x277)))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv1 32))) (select input.dst.llvm-mem ?x88))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv2 32))) ?x260))))
 (let (($x167 (= (bvand ?x233 (_ bv4294967288 32)) ?x233)))
 (let (($x278 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x97 (and $x278 $x167)))
 (let (($x190 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x187 (and (and (and (and (and $x277 $x190) $x278) $x97) $x61) $x112)))
 (let (($x274 (= true $x187)))
 (let (($x118 (not $x103)))
 (let (($x57 (=> $x118 $x274)))
 (let (($x9 (= $x57 true)))
 (let (($x5 (= $x9 true)))
 (let (($x131 (= $x5 true)))
 (let (($x152 (= $x118 true)))
 (let (($x284 (= $x152 true)))
 (let (($x139 (= $x284 true)))
 (let (($x226 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x55 (= $x226 true)))
 (let (($x72 (= $x55 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x16)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x168 $x13)))
 (let (($x41 (and $x19 $x54)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x232 $x41)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x227)))))))
 (let (($x160 (and $x37 $x169)))
 (let (($x175 (= $x160 true)))
 (let (($x21 (= $x175 true)))
 (let (($x132 (= $x21 true)))
 (let (($x208 (and $x132 $x72)))
 (let (($x203 (and $x208 $x139)))
 (let (($x206 (and $x203 $x131)))
 (let (($x7 (and $x206 $x273)))
 (let (($x316 (and $x7 $x176)))
 (let (($x35 (and $x316 $x198)))
 (let (($x443 (and $x35 $x95)))
 (let (($x330 (and $x443 $x334)))
 (let (($x333 (and $x130 $x330)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x331 (and $x83 $x333)))
 (let (($x28 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd ?x88 (_ bv3 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x59 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x180 $x28)))))))
 (let (($x134 (=> (and $x118 (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x180 $x28)))))))
 (let (($x164 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x58 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x86 (_ bv1 32))) (or false (or false (and true (or $x11 $x164)))))))
 (let (($x29 (=> (and $x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x86 (_ bv1 32)))) (or false (or false (and true (or $x11 $x164)))))))
 (let (($x135 (and $x29 $x134)))
 (let (($x326 (and $x135 $x331)))
 (let (($x342 (=> $x326 $x337)))
 (not $x342)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x292 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x110 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x313 (concat (select input.dst.llvm-mem ?x110) (concat ?x245 (concat ?x202 ?x292)))))
 (let ((?x335 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x313)))
 (let (($x336 (= (_ bv0 32) ?x335)))
 (let (($x337 (= $x336 true)))
 (let (($x246 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x263 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x130 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x252 (and $x130 $x263)))
 (let (($x318 (and $x252 $x246)))
 (let (($x69 (not $x318)))
 (let (($x442 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x320 (and $x252 $x442)))
 (let (($x32 (not $x320)))
 (let ((?x86 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x201))))
 (let ((?x338 (bvadd ?x137 (_ bv4 32))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv1 32))) (select input.dst.llvm-mem ?x338))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv2 32))) ?x249))))
 (let (($x256 (= (_ bv0 32) ?x275)))
 (let ((?x281 (ite $x256 (_ bv0 32) (_ bv1 32))))
 (let (($x340 (= ?x281 (_ bv0 32))))
 (let (($x108 (= $x442 $x340)))
 (let (($x319 (=> $x252 $x108)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x440 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x66))))
 (let (($x321 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x440)))
 (let (($x441 (=> $x252 $x321)))
 (let (($x49 (bvuge ?x281 (_ bv1 32))))
 (let (($x283 (= $x246 $x49)))
 (let (($x339 (=> $x252 $x283)))
 (let (($x111 (= false false)))
 (let (($x142 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x308 (and $x130 $x142)))
 (let (($x269 (=> $x308 $x111)))
 (let (($x286 (= (_ bv0 32) ?x137)))
 (let ((?x210 (ite $x286 (_ bv0 32) (_ bv1 32))))
 (let (($x204 (bvuge ?x210 (_ bv1 32))))
 (let (($x323 (= $x263 $x204)))
 (let (($x212 (=> $x130 $x323)))
 (let (($x294 (= ?x210 (_ bv0 32))))
 (let (($x60 (= $x142 $x294)))
 (let (($x444 (=> $x130 $x60)))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x313)))
 (let (($x298 (=> $x130 $x303)))
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x24 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x24 (_ bv1 32))))
 (let (($x99 (= $x130 $x156)))
 (let (($x243 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x289 (=> $x243 $x111)))
 (let (($x238 (= ?x24 (_ bv0 32))))
 (let (($x282 (= $x243 $x238)))
 (let (($x332 (and (and (and (and (and (and $x282 $x289) $x99) $x298) $x444) $x212) $x269)))
 (let (($x328 (and (and (and (and (and $x332 $x339) $x441) $x319) $x32) $x69)))
 (let (($x334 (= $x328 true)))
 (let (($x79 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x177 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x261 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x255 (and $x261 $x177)))
 (let (($x312 (and $x255 $x79)))
 (let (($x241 (not $x312)))
 (let (($x272 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x51 (and $x255 $x272)))
 (let (($x244 (not $x51)))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x214 (concat ?x199 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x195 (concat ?x222 (concat ?x8 ?x214))))
 (let ((?x305 (bvadd ?x195 (_ bv4 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv1 32))) (select input.dst.llvm-mem ?x305))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x305 (_ bv2 32))) ?x247))))
 (let (($x183 (= (_ bv0 32) ?x236)))
 (let ((?x149 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x192 (bvuge ?x149 (_ bv1 32))))
 (let (($x77 (= $x272 $x192)))
 (let (($x12 (=> $x255 $x77)))
 (let (($x151 (= ?x149 (_ bv0 32))))
 (let (($x31 (= $x79 $x151)))
 (let (($x36 (=> $x255 $x31)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem ?x195))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv2 32))) ?x63))))
 (let (($x296 (= input.spec-%var-l-1.2.1.2.0 ?x315)))
 (let (($x23 (=> $x255 $x296)))
 (let (($x25 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x242 (and $x261 $x25)))
 (let (($x133 (=> $x242 $x111)))
 (let (($x285 (= (_ bv0 32) ?x195)))
 (let ((?x93 (ite $x285 (_ bv0 32) (_ bv1 32))))
 (let (($x250 (bvuge ?x93 (_ bv1 32))))
 (let (($x267 (= $x177 $x250)))
 (let (($x279 (=> $x261 $x267)))
 (let (($x10 (= ?x93 (_ bv0 32))))
 (let (($x290 (= $x25 $x10)))
 (let (($x146 (=> $x261 $x290)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x104)))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x317)))
 (let (($x219 (= input.spec-%var-l-1.2.0 ?x75)))
 (let (($x53 (=> $x261 $x219)))
 (let (($x120 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x288 (ite $x120 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x288 (_ bv1 32))))
 (let (($x46 (= $x261 $x258)))
 (let (($x230 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x211 (=> $x230 $x111)))
 (let (($x44 (= ?x288 (_ bv0 32))))
 (let (($x78 (= $x230 $x44)))
 (let (($x147 (and (and (and (and (and (and $x78 $x211) $x46) $x53) $x146) $x279) $x133)))
 (let (($x174 (and (and (and (and (and $x147 $x23) $x36) $x12) $x244) $x241)))
 (let (($x95 (= $x174 true)))
 (let ((?x170 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x193 (= (_ bv0 3) ?x170)))
 (let (($x50 (= $x193 true)))
 (let (($x198 (= $x50 true)))
 (let (($x6 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x74 (= $x6 true)))
 (let (($x176 (= $x74 true)))
 (let (($x209 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x52 (= $x209 true)))
 (let (($x257 (= $x52 true)))
 (let (($x273 (= $x257 true)))
 (let (($x112 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x70 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x70) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x70))))
 (let (($x277 (and true $x143)))
 (let (($x61 (and $x143 $x277)))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv1 32))) (select input.dst.llvm-mem ?x88))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv2 32))) ?x260))))
 (let (($x167 (= (bvand ?x233 (_ bv4294967288 32)) ?x233)))
 (let (($x278 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x97 (and $x278 $x167)))
 (let (($x190 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x187 (and (and (and (and (and $x277 $x190) $x278) $x97) $x61) $x112)))
 (let (($x274 (= true $x187)))
 (let (($x118 (not $x103)))
 (let (($x57 (=> $x118 $x274)))
 (let (($x9 (= $x57 true)))
 (let (($x5 (= $x9 true)))
 (let (($x131 (= $x5 true)))
 (let (($x152 (= $x118 true)))
 (let (($x284 (= $x152 true)))
 (let (($x139 (= $x284 true)))
 (let (($x226 (= (_ bv0 32) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x55 (= $x226 true)))
 (let (($x72 (= $x55 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x16)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x168 $x13)))
 (let (($x41 (and $x19 $x54)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x232 $x41)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x227)))))))
 (let (($x160 (and $x37 $x169)))
 (let (($x175 (= $x160 true)))
 (let (($x21 (= $x175 true)))
 (let (($x132 (= $x21 true)))
 (let (($x208 (and $x132 $x72)))
 (let (($x203 (and $x208 $x139)))
 (let (($x206 (and $x203 $x131)))
 (let (($x7 (and $x206 $x273)))
 (let (($x316 (and $x7 $x176)))
 (let (($x35 (and $x316 $x198)))
 (let (($x443 (and $x35 $x95)))
 (let (($x330 (and $x443 $x334)))
 (let (($x333 (and $x130 $x330)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x331 (and $x83 $x333)))
 (let (($x28 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd ?x88 (_ bv3 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x59 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x180 $x28)))))))
 (let (($x134 (=> (and $x118 (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x180 $x28)))))))
 (let (($x164 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x58 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x86 (_ bv1 32))) (or false (or false (and true (or $x11 $x164)))))))
 (let (($x29 (=> (and $x118 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x86 (_ bv1 32)))) (or false (or false (and true (or $x11 $x164)))))))
 (let (($x135 (and $x29 $x134)))
 (let (($x326 (and $x135 $x331)))
 (let (($x342 (=> $x326 $x337)))
 (not $x342)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483650 32) (_ bv128 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv8388608 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1ad79c8c)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x01fffff9)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x02000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x02000003 #x4f))
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x4f000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1ad79c8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1ad79c8f)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 ((_ extract 22 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x50 ((_ extract 22 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x228 (bvadd ?x50 ?x113)))
 (let (($x245 (= (_ bv0 23) ?x228)))
 (let (($x102 (= $x245 true)))
 (let ((?x140 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv1 32))) (select input.dst.llvm-mem ?x140))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv2 32))) ?x100))))
 (let (($x244 (= (_ bv0 32) ?x51)))
 (let ((?x179 (ite $x244 (_ bv0 32) (_ bv1 32))))
 (let (($x443 (bvuge ?x179 (_ bv1 32))))
 (let (($x95 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x166 (= $x95 $x443)))
 (let (($x184 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x243 (=> $x184 $x166)))
 (let (($x312 (= ?x179 (_ bv0 32))))
 (let (($x149 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x241 (= $x149 $x312)))
 (let (($x174 (=> $x184 $x241)))
 (let ((?x305 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x164 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem ?x164) (concat ?x39 (concat ?x207 ?x305)))))
 (let (($x223 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x247)))
 (let (($x236 (=> $x184 $x223)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x155 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x136 (bvuge ?x155 (_ bv1 32))))
 (let (($x124 (= $x184 $x136)))
 (let (($x64 (= false false)))
 (let (($x63 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x23 (=> $x63 $x64)))
 (let (($x315 (= ?x155 (_ bv0 32))))
 (let (($x296 (= $x63 $x315)))
 (let (($x324 (and (and (and (and (and $x296 $x23) $x124) $x236) $x174) $x243)))
 (let (($x130 (= $x324 true)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x285 (concat ?x195 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x177 (concat ?x65 (concat ?x10 ?x285))))
 (let (($x250 (= (_ bv0 32) ?x177)))
 (let ((?x267 (ite $x250 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x267 (_ bv1 32))))
 (let (($x133 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x255 (= $x133 $x147)))
 (let (($x121 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x159 (=> $x121 $x255)))
 (let (($x279 (= ?x267 (_ bv0 32))))
 (let (($x199 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x141 (= $x199 $x279)))
 (let (($x242 (=> $x121 $x141)))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x53)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x25)))
 (let (($x14 (= input.spec-%var-l-1.2.0 ?x222)))
 (let (($x8 (=> $x121 $x14)))
 (let (($x280 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x234 (ite $x280 (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge ?x234 (_ bv1 32))))
 (let (($x182 (= $x121 $x237)))
 (let (($x258 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x125 (=> $x258 $x64)))
 (let (($x200 (= ?x234 (_ bv0 32))))
 (let (($x172 (= $x258 $x200)))
 (let (($x33 (and (and (and (and (and $x172 $x125) $x182) $x8) $x242) $x159)))
 (let (($x221 (= $x33 true)))
 (let ((?x120 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x288 (bvneg ?x120)))
 (let (($x78 (= ?x288 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x111 (= $x78 true)))
 (let (($x211 (= $x111 true)))
 (let (($x198 (= (_ bv0 23) ?x50)))
 (let (($x35 (= $x198 true)))
 (let (($x240 (= $x35 true)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x273 (= (_ bv0 32) ?x257)))
 (let ((?x297 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x297)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x206 $x209)))
 (let (($x7 (and $x52 $x273)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x287 (and $x97 $x7)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x112)))))))
 (let (($x6 (and $x131 $x287)))
 (let (($x74 (= $x6 true)))
 (let (($x176 (= $x74 true)))
 (let (($x316 (= $x176 true)))
 (let (($x90 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x260 (= $x90 true)))
 (let (($x235 (= $x260 true)))
 (let (($x233 (= $x235 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x232 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x19 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x232) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x232))))
 (let (($x16 (and true $x19)))
 (let (($x123 (and $x19 $x16)))
 (let ((?x118 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv1 32))) (select input.dst.llvm-mem ?x118))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv2 32))) ?x284))))
 (let (($x138 (= (bvand ?x229 (_ bv4294967288 32)) ?x229)))
 (let (($x226 (= (bvand ?x118 (_ bv4294967292 32)) ?x118)))
 (let (($x87 (and $x226 $x138)))
 (let (($x175 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x118 (bvsub ?x118 (_ bv4 32))) (bvult ?x118 (bvsub ?x118 (_ bv4 32))))))
 (let (($x276 (and (and (and (and (and $x16 $x175) $x226) $x87) $x123) $x190)))
 (let (($x45 (= true $x276)))
 (let (($x71 (not $x171)))
 (let (($x81 (=> $x71 $x45)))
 (let (($x265 (= $x81 true)))
 (let (($x181 (= $x265 true)))
 (let (($x158 (= $x181 true)))
 (let ((?x157 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x47 (= (_ bv0 3) ?x157)))
 (let (($x216 (= $x47 true)))
 (let (($x37 (= $x216 true)))
 (let (($x42 (= $x71 true)))
 (let (($x85 (= $x42 true)))
 (let (($x227 (= $x85 true)))
 (let (($x126 (and $x227 $x37)))
 (let (($x73 (and $x126 $x158)))
 (let (($x94 (and $x73 $x233)))
 (let (($x304 (and $x94 $x316)))
 (let (($x230 (and $x304 $x240)))
 (let (($x306 (and $x230 $x211)))
 (let (($x122 (and $x306 $x221)))
 (let (($x156 (and $x122 $x130)))
 (let (($x99 (and $x184 $x156)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x341 (and $x105 $x99)))
 (let (($x148 (bvugt ?x118 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd ?x118 (_ bv3 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x117 (=> (bvule ?x118 (bvsub (bvadd ?x118 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x148)))))))
 (let (($x109 (=> (and $x71 (bvule ?x118 (bvsub (bvadd ?x118 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x17 $x148)))))))
 (let (($x231 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x20 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x140 (_ bv1 32))) (or false (or false (and true (or $x165 $x231)))))))
 (let (($x218 (=> (and $x71 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x140 (_ bv1 32)))) (or false (or false (and true (or $x165 $x231)))))))
 (let (($x62 (and $x218 $x109)))
 (let (($x293 (and $x62 $x341)))
 (let (($x202 (=> $x293 $x102)))
 (not $x202)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 ((_ extract 22 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x50 ((_ extract 22 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x228 (bvadd ?x50 ?x113)))
 (let (($x245 (= (_ bv0 23) ?x228)))
 (let (($x102 (= $x245 true)))
 (let ((?x140 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv1 32))) (select input.dst.llvm-mem ?x140))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv2 32))) ?x100))))
 (let (($x244 (= (_ bv0 32) ?x51)))
 (let ((?x179 (ite $x244 (_ bv0 32) (_ bv1 32))))
 (let (($x443 (bvuge ?x179 (_ bv1 32))))
 (let (($x95 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x166 (= $x95 $x443)))
 (let (($x184 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x243 (=> $x184 $x166)))
 (let (($x312 (= ?x179 (_ bv0 32))))
 (let (($x149 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x241 (= $x149 $x312)))
 (let (($x174 (=> $x184 $x241)))
 (let ((?x305 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x164 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem ?x164) (concat ?x39 (concat ?x207 ?x305)))))
 (let (($x223 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x247)))
 (let (($x236 (=> $x184 $x223)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x155 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x136 (bvuge ?x155 (_ bv1 32))))
 (let (($x124 (= $x184 $x136)))
 (let (($x64 (= false false)))
 (let (($x63 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x23 (=> $x63 $x64)))
 (let (($x315 (= ?x155 (_ bv0 32))))
 (let (($x296 (= $x63 $x315)))
 (let (($x324 (and (and (and (and (and $x296 $x23) $x124) $x236) $x174) $x243)))
 (let (($x130 (= $x324 true)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x285 (concat ?x195 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x177 (concat ?x65 (concat ?x10 ?x285))))
 (let (($x250 (= (_ bv0 32) ?x177)))
 (let ((?x267 (ite $x250 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x267 (_ bv1 32))))
 (let (($x133 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x255 (= $x133 $x147)))
 (let (($x121 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x159 (=> $x121 $x255)))
 (let (($x279 (= ?x267 (_ bv0 32))))
 (let (($x199 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x141 (= $x199 $x279)))
 (let (($x242 (=> $x121 $x141)))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x53)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x25)))
 (let (($x14 (= input.spec-%var-l-1.2.0 ?x222)))
 (let (($x8 (=> $x121 $x14)))
 (let (($x280 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x234 (ite $x280 (_ bv0 32) (_ bv1 32))))
 (let (($x237 (bvuge ?x234 (_ bv1 32))))
 (let (($x182 (= $x121 $x237)))
 (let (($x258 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x125 (=> $x258 $x64)))
 (let (($x200 (= ?x234 (_ bv0 32))))
 (let (($x172 (= $x258 $x200)))
 (let (($x33 (and (and (and (and (and $x172 $x125) $x182) $x8) $x242) $x159)))
 (let (($x221 (= $x33 true)))
 (let ((?x120 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x288 (bvneg ?x120)))
 (let (($x78 (= ?x288 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x111 (= $x78 true)))
 (let (($x211 (= $x111 true)))
 (let (($x198 (= (_ bv0 23) ?x50)))
 (let (($x35 (= $x198 true)))
 (let (($x240 (= $x35 true)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x273 (= (_ bv0 32) ?x257)))
 (let ((?x297 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x297)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x206 $x209)))
 (let (($x7 (and $x52 $x273)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x287 (and $x97 $x7)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x112)))))))
 (let (($x6 (and $x131 $x287)))
 (let (($x74 (= $x6 true)))
 (let (($x176 (= $x74 true)))
 (let (($x316 (= $x176 true)))
 (let (($x90 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x260 (= $x90 true)))
 (let (($x235 (= $x260 true)))
 (let (($x233 (= $x235 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x232 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x19 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x232) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x232))))
 (let (($x16 (and true $x19)))
 (let (($x123 (and $x19 $x16)))
 (let ((?x118 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv1 32))) (select input.dst.llvm-mem ?x118))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv2 32))) ?x284))))
 (let (($x138 (= (bvand ?x229 (_ bv4294967288 32)) ?x229)))
 (let (($x226 (= (bvand ?x118 (_ bv4294967292 32)) ?x118)))
 (let (($x87 (and $x226 $x138)))
 (let (($x175 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x118 (bvsub ?x118 (_ bv4 32))) (bvult ?x118 (bvsub ?x118 (_ bv4 32))))))
 (let (($x276 (and (and (and (and (and $x16 $x175) $x226) $x87) $x123) $x190)))
 (let (($x45 (= true $x276)))
 (let (($x71 (not $x171)))
 (let (($x81 (=> $x71 $x45)))
 (let (($x265 (= $x81 true)))
 (let (($x181 (= $x265 true)))
 (let (($x158 (= $x181 true)))
 (let ((?x157 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x47 (= (_ bv0 3) ?x157)))
 (let (($x216 (= $x47 true)))
 (let (($x37 (= $x216 true)))
 (let (($x42 (= $x71 true)))
 (let (($x85 (= $x42 true)))
 (let (($x227 (= $x85 true)))
 (let (($x126 (and $x227 $x37)))
 (let (($x73 (and $x126 $x158)))
 (let (($x94 (and $x73 $x233)))
 (let (($x304 (and $x94 $x316)))
 (let (($x230 (and $x304 $x240)))
 (let (($x306 (and $x230 $x211)))
 (let (($x122 (and $x306 $x221)))
 (let (($x156 (and $x122 $x130)))
 (let (($x99 (and $x184 $x156)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x341 (and $x105 $x99)))
 (let (($x148 (bvugt ?x118 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd ?x118 (_ bv3 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x117 (=> (bvule ?x118 (bvsub (bvadd ?x118 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x148)))))))
 (let (($x109 (=> (and $x71 (bvule ?x118 (bvsub (bvadd ?x118 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x17 $x148)))))))
 (let (($x231 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x20 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x140 (_ bv1 32))) (or false (or false (and true (or $x165 $x231)))))))
 (let (($x218 (=> (and $x71 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x140 (_ bv1 32)))) (or false (or false (and true (or $x165 $x231)))))))
 (let (($x62 (and $x218 $x109)))
 (let (($x293 (and $x62 $x341)))
 (let (($x202 (=> $x293 $x102)))
 (not $x202)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000010000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000010) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0ffffffc)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x10000003)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x10000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x1e937036)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x7bc5598d)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x58))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x58585858)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x58585858)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0fffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0ffffffc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv112 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv112 32) (_ bv1 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv232 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv232 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv235 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x67 ((_ extract 22 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x205 ((_ extract 22 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x142 (bvadd ?x205 ?x67)))
 (let (($x309 (= (_ bv0 23) ?x142)))
 (let (($x217 (= $x309 true)))
 (let (($x130 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x228 (and $x68 $x130)))
 (let (($x245 (not $x228)))
 (let (($x36 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x293 (and $x68 $x36)))
 (let (($x113 (not $x293)))
 (let ((?x110 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x51))))
 (let (($x95 (= (_ bv0 32) ?x289)))
 (let ((?x443 (ite $x95 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x443 (_ bv1 32))))
 (let (($x99 (= $x130 $x156)))
 (let (($x341 (=> $x68 $x99)))
 (let (($x166 (= ?x443 (_ bv0 32))))
 (let (($x243 (= $x36 $x166)))
 (let (($x324 (=> $x68 $x243)))
 (let ((?x291 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x27 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x322 (concat (select input.dst.llvm-mem ?x27) (concat ?x183 (concat ?x223 ?x291)))))
 (let (($x272 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x322)))
 (let (($x192 (=> $x68 $x272)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x270 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x207 (bvuge ?x270 (_ bv1 32))))
 (let (($x305 (= $x68 $x207)))
 (let (($x182 (= false false)))
 (let (($x79 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x307 (=> $x79 $x182)))
 (let (($x162 (= ?x270 (_ bv0 32))))
 (let (($x39 (= $x79 $x162)))
 (let (($x153 (and (and (and (and (and (and $x39 $x307) $x305) $x192) $x324) $x341) $x113)))
 (let (($x34 (and $x153 $x245)))
 (let (($x18 (= $x34 true)))
 (let (($x147 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x104 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x128 (and $x104 $x147)))
 (let (($x63 (not $x128)))
 (let (($x146 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x221 (and $x104 $x146)))
 (let (($x122 (not $x221)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x195 (concat ?x268 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x267 (concat ?x250 (concat ?x285 ?x195))))
 (let (($x279 (= (_ bv0 32) ?x267)))
 (let ((?x141 (ite $x279 (_ bv0 32) (_ bv1 32))))
 (let (($x255 (bvuge ?x141 (_ bv1 32))))
 (let (($x159 (= $x147 $x255)))
 (let (($x33 (=> $x104 $x159)))
 (let (($x242 (= ?x141 (_ bv0 32))))
 (let (($x26 (= $x146 $x242)))
 (let (($x133 (=> $x104 $x26)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x317)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x222)))
 (let (($x173 (= input.spec-%var-l-1.2.0 ?x196)))
 (let (($x199 (=> $x104 $x173)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x185 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x220 (bvuge ?x185 (_ bv1 32))))
 (let (($x127 (= $x104 $x220)))
 (let (($x172 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x43 (=> $x172 $x182)))
 (let (($x121 (= ?x185 (_ bv0 32))))
 (let (($x237 (= $x172 $x121)))
 (let (($x184 (and (and (and (and (and (and $x237 $x43) $x127) $x199) $x133) $x33) $x122)))
 (let (($x136 (and $x184 $x63)))
 (let (($x124 (= $x136 true)))
 (let ((?x211 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x306 (bvneg ?x211)))
 (let (($x258 (= ?x306 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x46 (= $x258 true)))
 (let (($x280 (= $x46 true)))
 (let (($x120 (= (_ bv0 23) ?x205)))
 (let (($x288 (= $x120 true)))
 (let (($x44 (= $x288 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x74)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x287 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x273 $x287)))
 (let (($x316 (and $x6 $x176)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (and $x187 $x316)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x257 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x167)))))))
 (let (($x170 (and $x257 $x304)))
 (let (($x193 (= $x170 true)))
 (let (($x50 (= $x193 true)))
 (let (($x198 (= $x50 true)))
 (let (($x94 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x82 (= $x94 true)))
 (let (($x61 (= $x82 true)))
 (let (($x5 (= $x61 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x19) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x19))))
 (let (($x160 (and true $x169)))
 (let (($x278 (and $x169 $x160)))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv1 32))) (select input.dst.llvm-mem ?x88))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv2 32))) ?x152))))
 (let (($x239 (= (bvand ?x277 (_ bv4294967288 32)) ?x277)))
 (let (($x30 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x123 (and $x30 $x239)))
 (let (($x226 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x181 (and (and (and (and (and $x160 $x226) $x30) $x123) $x278) $x190)))
 (let (($x158 (= true $x181)))
 (let (($x71 (not $x171)))
 (let (($x73 (=> $x71 $x158)))
 (let (($x145 (= $x73 true)))
 (let (($x90 (= $x145 true)))
 (let (($x260 (= $x90 true)))
 (let ((?x126 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x168 (= (_ bv0 3) ?x126)))
 (let (($x232 (= $x168 true)))
 (let (($x186 (= $x232 true)))
 (let (($x157 (= $x71 true)))
 (let (($x47 (= $x157 true)))
 (let (($x216 (= $x47 true)))
 (let (($x13 (and $x216 $x186)))
 (let (($x235 (and $x13 $x260)))
 (let (($x194 (and $x235 $x5)))
 (let (($x35 (and $x194 $x198)))
 (let (($x78 (and $x35 $x44)))
 (let (($x234 (and $x78 $x280)))
 (let (($x238 (and $x234 $x124)))
 (let (($x313 (and $x238 $x18)))
 (let (($x303 (and $x68 $x313)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x298 (and $x85 $x303)))
 (let (($x59 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd ?x88 (_ bv3 32))))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x105 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x163 $x59)))))))
 (let (($x135 (=> (and $x71 (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x163 $x59)))))))
 (let (($x58 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x180 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x110 (_ bv1 32))) (or false (or false (and true (or $x89 $x58)))))))
 (let (($x107 (=> (and $x71 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x110 (_ bv1 32)))) (or false (or false (and true (or $x89 $x58)))))))
 (let (($x28 (and $x107 $x135)))
 (let (($x325 (and $x28 $x298)))
 (let (($x251 (=> $x325 $x217)))
 (not $x251)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x67 ((_ extract 22 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x205 ((_ extract 22 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x142 (bvadd ?x205 ?x67)))
 (let (($x309 (= (_ bv0 23) ?x142)))
 (let (($x217 (= $x309 true)))
 (let (($x130 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x68 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x228 (and $x68 $x130)))
 (let (($x245 (not $x228)))
 (let (($x36 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x293 (and $x68 $x36)))
 (let (($x113 (not $x293)))
 (let ((?x110 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x51))))
 (let (($x95 (= (_ bv0 32) ?x289)))
 (let ((?x443 (ite $x95 (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x443 (_ bv1 32))))
 (let (($x99 (= $x130 $x156)))
 (let (($x341 (=> $x68 $x99)))
 (let (($x166 (= ?x443 (_ bv0 32))))
 (let (($x243 (= $x36 $x166)))
 (let (($x324 (=> $x68 $x243)))
 (let ((?x291 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x27 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x322 (concat (select input.dst.llvm-mem ?x27) (concat ?x183 (concat ?x223 ?x291)))))
 (let (($x272 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x322)))
 (let (($x192 (=> $x68 $x272)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x270 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x207 (bvuge ?x270 (_ bv1 32))))
 (let (($x305 (= $x68 $x207)))
 (let (($x182 (= false false)))
 (let (($x79 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x307 (=> $x79 $x182)))
 (let (($x162 (= ?x270 (_ bv0 32))))
 (let (($x39 (= $x79 $x162)))
 (let (($x153 (and (and (and (and (and (and $x39 $x307) $x305) $x192) $x324) $x341) $x113)))
 (let (($x34 (and $x153 $x245)))
 (let (($x18 (= $x34 true)))
 (let (($x147 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x104 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x128 (and $x104 $x147)))
 (let (($x63 (not $x128)))
 (let (($x146 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x221 (and $x104 $x146)))
 (let (($x122 (not $x221)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x195 (concat ?x268 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x267 (concat ?x250 (concat ?x285 ?x195))))
 (let (($x279 (= (_ bv0 32) ?x267)))
 (let ((?x141 (ite $x279 (_ bv0 32) (_ bv1 32))))
 (let (($x255 (bvuge ?x141 (_ bv1 32))))
 (let (($x159 (= $x147 $x255)))
 (let (($x33 (=> $x104 $x159)))
 (let (($x242 (= ?x141 (_ bv0 32))))
 (let (($x26 (= $x146 $x242)))
 (let (($x133 (=> $x104 $x26)))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x317)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x222)))
 (let (($x173 (= input.spec-%var-l-1.2.0 ?x196)))
 (let (($x199 (=> $x104 $x173)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x185 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x220 (bvuge ?x185 (_ bv1 32))))
 (let (($x127 (= $x104 $x220)))
 (let (($x172 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x43 (=> $x172 $x182)))
 (let (($x121 (= ?x185 (_ bv0 32))))
 (let (($x237 (= $x172 $x121)))
 (let (($x184 (and (and (and (and (and (and $x237 $x43) $x127) $x199) $x133) $x33) $x122)))
 (let (($x136 (and $x184 $x63)))
 (let (($x124 (= $x136 true)))
 (let ((?x211 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x306 (bvneg ?x211)))
 (let (($x258 (= ?x306 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x46 (= $x258 true)))
 (let (($x280 (= $x46 true)))
 (let (($x120 (= (_ bv0 23) ?x205)))
 (let (($x288 (= $x120 true)))
 (let (($x44 (= $x288 true)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x74)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x287 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x273 $x287)))
 (let (($x316 (and $x6 $x176)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (and $x187 $x316)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x257 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x167)))))))
 (let (($x170 (and $x257 $x304)))
 (let (($x193 (= $x170 true)))
 (let (($x50 (= $x193 true)))
 (let (($x198 (= $x50 true)))
 (let (($x94 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x82 (= $x94 true)))
 (let (($x61 (= $x82 true)))
 (let (($x5 (= $x61 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x19 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x169 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x19) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x19))))
 (let (($x160 (and true $x169)))
 (let (($x278 (and $x169 $x160)))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv1 32))) (select input.dst.llvm-mem ?x88))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv2 32))) ?x152))))
 (let (($x239 (= (bvand ?x277 (_ bv4294967288 32)) ?x277)))
 (let (($x30 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x123 (and $x30 $x239)))
 (let (($x226 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x181 (and (and (and (and (and $x160 $x226) $x30) $x123) $x278) $x190)))
 (let (($x158 (= true $x181)))
 (let (($x71 (not $x171)))
 (let (($x73 (=> $x71 $x158)))
 (let (($x145 (= $x73 true)))
 (let (($x90 (= $x145 true)))
 (let (($x260 (= $x90 true)))
 (let ((?x126 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x168 (= (_ bv0 3) ?x126)))
 (let (($x232 (= $x168 true)))
 (let (($x186 (= $x232 true)))
 (let (($x157 (= $x71 true)))
 (let (($x47 (= $x157 true)))
 (let (($x216 (= $x47 true)))
 (let (($x13 (and $x216 $x186)))
 (let (($x235 (and $x13 $x260)))
 (let (($x194 (and $x235 $x5)))
 (let (($x35 (and $x194 $x198)))
 (let (($x78 (and $x35 $x44)))
 (let (($x234 (and $x78 $x280)))
 (let (($x238 (and $x234 $x124)))
 (let (($x313 (and $x238 $x18)))
 (let (($x303 (and $x68 $x313)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x298 (and $x85 $x303)))
 (let (($x59 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd ?x88 (_ bv3 32))))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x105 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x163 $x59)))))))
 (let (($x135 (=> (and $x71 (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x163 $x59)))))))
 (let (($x58 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x180 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x110 (_ bv1 32))) (or false (or false (and true (or $x89 $x58)))))))
 (let (($x107 (=> (and $x71 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x110 (_ bv1 32)))) (or false (or false (and true (or $x89 $x58)))))))
 (let (($x28 (and $x107 $x135)))
 (let (($x325 (and $x28 $x298)))
 (let (($x251 (=> $x325 $x217)))
 (not $x251)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x330 ((_ extract 22 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x111 ((_ extract 22 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x333 (bvadd ?x111 ?x330)))
 (let (($x331 (= (_ bv0 23) ?x333)))
 (let (($x326 (= $x331 true)))
 (let ((?x165 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x80))))
 (let ((?x332 (bvadd ?x271 (_ bv4 32))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv1 32))) (select input.dst.llvm-mem ?x332))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv2 32))) ?x338))))
 (let (($x38 (= (_ bv0 32) ?x144)))
 (let ((?x249 (ite $x38 (_ bv0 32) (_ bv1 32))))
 (let (($x302 (= ?x249 (_ bv0 32))))
 (let (($x66 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x440 (= $x66 $x302)))
 (let (($x444 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x37 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x329 (and $x37 $x444)))
 (let (($x321 (=> $x329 $x440)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem ?x271))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv2 32))) ?x224))))
 (let (($x299 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x119)))
 (let (($x115 (=> $x329 $x299)))
 (let (($x300 (bvuge ?x249 (_ bv1 32))))
 (let (($x269 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x275 (= $x269 $x300)))
 (let (($x256 (=> $x329 $x275)))
 (let (($x127 (= false false)))
 (let (($x217 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x323 (and $x37 $x217)))
 (let (($x212 (=> $x323 $x127)))
 (let (($x137 (= (_ bv0 32) ?x271)))
 (let ((?x286 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x445 (bvuge ?x286 (_ bv1 32))))
 (let (($x263 (= $x444 $x445)))
 (let (($x204 (=> $x37 $x263)))
 (let (($x210 (= ?x286 (_ bv0 32))))
 (let (($x294 (= $x217 $x210)))
 (let (($x60 (=> $x37 $x294)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x29 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x325 (concat (select input.dst.llvm-mem ?x29) (concat ?x313 (concat ?x245 ?x153)))))
 (let (($x67 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x325)))
 (let (($x142 (=> $x37 $x67)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x130 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x130 (_ bv1 32))))
 (let (($x293 (= $x37 $x22)))
 (let (($x103 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x341 (=> $x103 $x127)))
 (let (($x156 (= ?x130 (_ bv0 32))))
 (let (($x99 (= $x103 $x156)))
 (let (($x319 (and (and (and (and (and (and $x99 $x341) $x293) $x142) $x60) $x204) $x212)))
 (let (($x32 (and (and (and $x319 $x256) $x115) $x321)))
 (let (($x327 (= $x32 true)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x268 (concat ?x10 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x141 (concat ?x279 (concat ?x195 ?x268))))
 (let ((?x202 (bvadd ?x141 (_ bv4 32))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x183))))
 (let (($x272 (= (_ bv0 32) ?x322)))
 (let ((?x192 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x192 (_ bv1 32))))
 (let (($x241 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x244 (= $x241 $x174)))
 (let (($x255 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x101 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x184 (and $x101 $x255)))
 (let (($x179 (=> $x184 $x244)))
 (let (($x292 (= ?x192 (_ bv0 32))))
 (let (($x305 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x31 (= $x305 $x292)))
 (let (($x36 (=> $x184 $x31)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x238))))
 (let (($x102 (= input.spec-%var-l-1.2.1.2.0 ?x307)))
 (let (($x68 (=> $x184 $x102)))
 (let (($x177 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x221 (and $x101 $x177)))
 (let (($x122 (=> $x221 $x127)))
 (let (($x242 (= (_ bv0 32) ?x141)))
 (let ((?x26 (ite $x242 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x26 (_ bv1 32))))
 (let (($x33 (= $x255 $x159)))
 (let (($x24 (=> $x101 $x33)))
 (let (($x133 (= ?x26 (_ bv0 32))))
 (let (($x23 (= $x177 $x133)))
 (let (($x147 (=> $x101 $x23)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x191)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x196)))
 (let (($x225 (= input.spec-%var-l-1.2.0 ?x296)))
 (let (($x146 (=> $x101 $x225)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x155 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x14 (bvuge ?x155 (_ bv1 32))))
 (let (($x8 (= $x101 $x14)))
 (let (($x237 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x315 (=> $x237 $x127)))
 (let (($x104 (= ?x155 (_ bv0 32))))
 (let (($x220 (= $x237 $x104)))
 (let (($x289 (and (and (and (and (and (and $x220 $x315) $x8) $x146) $x147) $x24) $x122)))
 (let (($x166 (and (and (and $x289 $x68) $x36) $x179)))
 (let (($x243 (= $x166 true)))
 (let ((?x280 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x280)))
 (let (($x172 (= ?x234 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x64 (= $x172 true)))
 (let (($x125 (= $x64 true)))
 (let (($x211 (= (_ bv0 23) ?x111)))
 (let (($x306 (= $x211 true)))
 (let (($x261 (= $x306 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x193)))
 (let ((?x316 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x304 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x316)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x176 $x304)))
 (let (($x198 (and $x170 $x50)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x97 $x198)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x257 $x112)))))))
 (let (($x240 (and $x74 $x35)))
 (let (($x230 (= $x240 true)))
 (let (($x205 (= $x230 true)))
 (let (($x120 (= $x205 true)))
 (let (($x194 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x274 (= $x194 true)))
 (let (($x57 (= $x274 true)))
 (let (($x52 (= $x57 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169))))
 (let (($x132 (and true $x21)))
 (let (($x265 (and $x21 $x132)))
 (let ((?x98 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x208))))
 (let (($x81 (= (bvand ?x87 (_ bv4294967288 32)) ?x87)))
 (let (($x143 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x278 (and $x143 $x81)))
 (let (($x30 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x98 (bvsub ?x98 (_ bv4 32))) (bvult ?x98 (bvsub ?x98 (_ bv4 32))))))
 (let (($x90 (and (and (and (and (and $x132 $x30) $x143) $x278) $x265) $x190)))
 (let (($x260 (= true $x90)))
 (let (($x71 (not $x171)))
 (let (($x235 (=> $x71 $x260)))
 (let (($x233 (= $x235 true)))
 (let (($x94 (= $x233 true)))
 (let (($x82 (= $x94 true)))
 (let ((?x13 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x16 (= (_ bv0 3) ?x13)))
 (let (($x19 (= $x16 true)))
 (let (($x41 (= $x19 true)))
 (let (($x126 (= $x71 true)))
 (let (($x168 (= $x126 true)))
 (let (($x232 (= $x168 true)))
 (let (($x54 (and $x232 $x41)))
 (let (($x61 (and $x54 $x82)))
 (let (($x9 (and $x61 $x52)))
 (let (($x288 (and $x9 $x120)))
 (let (($x258 (and $x288 $x261)))
 (let (($x185 (and $x258 $x125)))
 (let (($x324 (and $x185 $x243)))
 (let (($x318 (and $x324 $x327)))
 (let (($x69 (and $x37 $x318)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x328 (and $x47 $x69)))
 (let (($x109 (bvugt ?x98 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd ?x98 (_ bv3 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x85 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x109)))))))
 (let (($x83 (=> (and $x71 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x117 $x109)))))))
 (let (($x218 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x148 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x165 (_ bv1 32))) (or false (or false (and true (or $x20 $x218)))))))
 (let (($x164 (=> (and $x71 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x165 (_ bv1 32)))) (or false (or false (and true (or $x20 $x218)))))))
 (let (($x40 (and $x164 $x83)))
 (let (($x334 (and $x40 $x328)))
 (let (($x335 (=> $x334 $x326)))
 (not $x335)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x330 ((_ extract 22 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x111 ((_ extract 22 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x333 (bvadd ?x111 ?x330)))
 (let (($x331 (= (_ bv0 23) ?x333)))
 (let (($x326 (= $x331 true)))
 (let ((?x165 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x80))))
 (let ((?x332 (bvadd ?x271 (_ bv4 32))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv1 32))) (select input.dst.llvm-mem ?x332))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv2 32))) ?x338))))
 (let (($x38 (= (_ bv0 32) ?x144)))
 (let ((?x249 (ite $x38 (_ bv0 32) (_ bv1 32))))
 (let (($x302 (= ?x249 (_ bv0 32))))
 (let (($x66 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x440 (= $x66 $x302)))
 (let (($x444 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x37 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x329 (and $x37 $x444)))
 (let (($x321 (=> $x329 $x440)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem ?x271))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv2 32))) ?x224))))
 (let (($x299 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x119)))
 (let (($x115 (=> $x329 $x299)))
 (let (($x300 (bvuge ?x249 (_ bv1 32))))
 (let (($x269 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x275 (= $x269 $x300)))
 (let (($x256 (=> $x329 $x275)))
 (let (($x127 (= false false)))
 (let (($x217 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x323 (and $x37 $x217)))
 (let (($x212 (=> $x323 $x127)))
 (let (($x137 (= (_ bv0 32) ?x271)))
 (let ((?x286 (ite $x137 (_ bv0 32) (_ bv1 32))))
 (let (($x445 (bvuge ?x286 (_ bv1 32))))
 (let (($x263 (= $x444 $x445)))
 (let (($x204 (=> $x37 $x263)))
 (let (($x210 (= ?x286 (_ bv0 32))))
 (let (($x294 (= $x217 $x210)))
 (let (($x60 (=> $x37 $x294)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x29 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x325 (concat (select input.dst.llvm-mem ?x29) (concat ?x313 (concat ?x245 ?x153)))))
 (let (($x67 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x325)))
 (let (($x142 (=> $x37 $x67)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x130 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x130 (_ bv1 32))))
 (let (($x293 (= $x37 $x22)))
 (let (($x103 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x341 (=> $x103 $x127)))
 (let (($x156 (= ?x130 (_ bv0 32))))
 (let (($x99 (= $x103 $x156)))
 (let (($x319 (and (and (and (and (and (and $x99 $x341) $x293) $x142) $x60) $x204) $x212)))
 (let (($x32 (and (and (and $x319 $x256) $x115) $x321)))
 (let (($x327 (= $x32 true)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x268 (concat ?x10 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x141 (concat ?x279 (concat ?x195 ?x268))))
 (let ((?x202 (bvadd ?x141 (_ bv4 32))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x183))))
 (let (($x272 (= (_ bv0 32) ?x322)))
 (let ((?x192 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x192 (_ bv1 32))))
 (let (($x241 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x244 (= $x241 $x174)))
 (let (($x255 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x101 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x184 (and $x101 $x255)))
 (let (($x179 (=> $x184 $x244)))
 (let (($x292 (= ?x192 (_ bv0 32))))
 (let (($x305 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x31 (= $x305 $x292)))
 (let (($x36 (=> $x184 $x31)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x238))))
 (let (($x102 (= input.spec-%var-l-1.2.1.2.0 ?x307)))
 (let (($x68 (=> $x184 $x102)))
 (let (($x177 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x221 (and $x101 $x177)))
 (let (($x122 (=> $x221 $x127)))
 (let (($x242 (= (_ bv0 32) ?x141)))
 (let ((?x26 (ite $x242 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x26 (_ bv1 32))))
 (let (($x33 (= $x255 $x159)))
 (let (($x24 (=> $x101 $x33)))
 (let (($x133 (= ?x26 (_ bv0 32))))
 (let (($x23 (= $x177 $x133)))
 (let (($x147 (=> $x101 $x23)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x191)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x196)))
 (let (($x225 (= input.spec-%var-l-1.2.0 ?x296)))
 (let (($x146 (=> $x101 $x225)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x155 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x14 (bvuge ?x155 (_ bv1 32))))
 (let (($x8 (= $x101 $x14)))
 (let (($x237 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x315 (=> $x237 $x127)))
 (let (($x104 (= ?x155 (_ bv0 32))))
 (let (($x220 (= $x237 $x104)))
 (let (($x289 (and (and (and (and (and (and $x220 $x315) $x8) $x146) $x147) $x24) $x122)))
 (let (($x166 (and (and (and $x289 $x68) $x36) $x179)))
 (let (($x243 (= $x166 true)))
 (let ((?x280 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x280)))
 (let (($x172 (= ?x234 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x64 (= $x172 true)))
 (let (($x125 (= $x64 true)))
 (let (($x211 (= (_ bv0 23) ?x111)))
 (let (($x306 (= $x211 true)))
 (let (($x261 (= $x306 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x193)))
 (let ((?x316 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x304 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x316)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x176 $x304)))
 (let (($x198 (and $x170 $x50)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x97 $x198)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x74 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x257 $x112)))))))
 (let (($x240 (and $x74 $x35)))
 (let (($x230 (= $x240 true)))
 (let (($x205 (= $x230 true)))
 (let (($x120 (= $x205 true)))
 (let (($x194 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x274 (= $x194 true)))
 (let (($x57 (= $x274 true)))
 (let (($x52 (= $x57 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169))))
 (let (($x132 (and true $x21)))
 (let (($x265 (and $x21 $x132)))
 (let ((?x98 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x208))))
 (let (($x81 (= (bvand ?x87 (_ bv4294967288 32)) ?x87)))
 (let (($x143 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x278 (and $x143 $x81)))
 (let (($x30 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x98 (bvsub ?x98 (_ bv4 32))) (bvult ?x98 (bvsub ?x98 (_ bv4 32))))))
 (let (($x90 (and (and (and (and (and $x132 $x30) $x143) $x278) $x265) $x190)))
 (let (($x260 (= true $x90)))
 (let (($x71 (not $x171)))
 (let (($x235 (=> $x71 $x260)))
 (let (($x233 (= $x235 true)))
 (let (($x94 (= $x233 true)))
 (let (($x82 (= $x94 true)))
 (let ((?x13 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x16 (= (_ bv0 3) ?x13)))
 (let (($x19 (= $x16 true)))
 (let (($x41 (= $x19 true)))
 (let (($x126 (= $x71 true)))
 (let (($x168 (= $x126 true)))
 (let (($x232 (= $x168 true)))
 (let (($x54 (and $x232 $x41)))
 (let (($x61 (and $x54 $x82)))
 (let (($x9 (and $x61 $x52)))
 (let (($x288 (and $x9 $x120)))
 (let (($x258 (and $x288 $x261)))
 (let (($x185 (and $x258 $x125)))
 (let (($x324 (and $x185 $x243)))
 (let (($x318 (and $x324 $x327)))
 (let (($x69 (and $x37 $x318)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x328 (and $x47 $x69)))
 (let (($x109 (bvugt ?x98 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd ?x98 (_ bv3 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x85 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x109)))))))
 (let (($x83 (=> (and $x71 (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x117 $x109)))))))
 (let (($x218 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x148 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x165 (_ bv1 32))) (or false (or false (and true (or $x20 $x218)))))))
 (let (($x164 (=> (and $x71 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x165 (_ bv1 32)))) (or false (or false (and true (or $x20 $x218)))))))
 (let (($x40 (and $x164 $x83)))
 (let (($x334 (and $x40 $x328)))
 (let (($x335 (=> $x334 $x326)))
 (not $x335)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000010000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000010) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xcbfd7cd4)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff9)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00040000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xff)
                                #x00040001
                                #x7f)
                         #x7fff8006
                         #x7f)
                  #x7fff8005
                  #x7f)))
(let ((a!2 (store (store (store (store a!1 #x00040004 #xf8) #x00040002 #x7f)
                         #x00000000
                         #x7f)
                  #x00040000
                  #x7f)))
  (store (store (store a!2 #xfffffffe #x7f) #xfffffffe #x7f) #xfffffffc #x7f))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xff7f7f7f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xcbfd7cd7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xcbfd7cd4)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x344 ((_ extract 22 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x46 ((_ extract 22 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x446 (bvadd ?x46 ?x344)))
 (let (($x345 (= (_ bv0 23) ?x446)))
 (let (($x346 (= $x345 true)))
 (let (($x262 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x323 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x186 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x332 (and $x186 $x323)))
 (let (($x69 (and $x332 $x262)))
 (let (($x328 (not $x69)))
 (let (($x302 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x327 (and $x332 $x302)))
 (let (($x318 (not $x327)))
 (let ((?x89 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x271))))
 (let ((?x154 (bvadd ?x340 (_ bv4 32))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem ?x154))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv2 32))) ?x252))))
 (let (($x275 (= (_ bv0 32) ?x300)))
 (let ((?x256 (ite $x275 (_ bv0 32) (_ bv1 32))))
 (let (($x440 (= ?x256 (_ bv0 32))))
 (let (($x321 (= $x302 $x440)))
 (let (($x32 (=> $x332 $x321)))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x339))))
 (let (($x320 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x115)))
 (let (($x66 (=> $x332 $x320)))
 (let (($x84 (bvuge ?x256 (_ bv1 32))))
 (let (($x281 (= $x262 $x84)))
 (let (($x310 (=> $x332 $x281)))
 (let (($x8 (= false false)))
 (let (($x106 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x308 (and $x186 $x106)))
 (let (($x269 (=> $x308 $x8)))
 (let (($x444 (= (_ bv0 32) ?x340)))
 (let ((?x445 (ite $x444 (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x445 (_ bv1 32))))
 (let (($x319 (= $x323 $x212)))
 (let (($x329 (=> $x186 $x319)))
 (let (($x263 (= ?x445 (_ bv0 32))))
 (let (($x204 (= $x106 $x263)))
 (let (($x108 (=> $x186 $x204)))
 (let ((?x303 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x309 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x118 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x118) (concat ?x309 (concat ?x67 ?x303)))))
 (let (($x188 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x201)))
 (let (($x213 (=> $x186 $x188)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x298 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x245 (bvuge ?x298 (_ bv1 32))))
 (let (($x153 (= $x186 $x245)))
 (let (($x113 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x228 (=> $x113 $x8)))
 (let (($x18 (= ?x298 (_ bv0 32))))
 (let (($x313 (= $x113 $x18)))
 (let (($x335 (and (and (and (and (and (and $x313 $x228) $x153) $x213) $x108) $x329) $x269)))
 (let (($x337 (and (and (and (and (and $x335 $x310) $x66) $x32) $x318) $x328)))
 (let (($x342 (= $x337 true)))
 (let (($x95 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x159 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x53 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x289 (and $x53 $x159)))
 (let (($x179 (and $x289 $x95)))
 (let (($x166 (not $x179)))
 (let (($x31 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x174 (and $x289 $x31)))
 (let (($x244 (not $x174)))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x10 (concat ?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x26 (concat ?x242 (concat ?x268 ?x10))))
 (let ((?x207 (bvadd ?x26 (_ bv4 32))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem ?x207))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv2 32))) ?x149))))
 (let (($x291 (= (_ bv0 32) ?x183)))
 (let ((?x322 (ite $x291 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x322 (_ bv1 32))))
 (let (($x443 (= $x31 $x36)))
 (let (($x241 (=> $x289 $x443)))
 (let (($x272 (= ?x322 (_ bv0 32))))
 (let (($x192 (= $x95 $x272)))
 (let (($x292 (=> $x289 $x192)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv1 32))) (select input.dst.llvm-mem ?x26))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv2 32))) ?x227))))
 (let (($x307 (= input.spec-%var-l-1.2.1.2.0 ?x270)))
 (let (($x102 (=> $x289 $x307)))
 (let (($x267 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x221 (and $x53 $x267)))
 (let (($x122 (=> $x221 $x8)))
 (let (($x133 (= (_ bv0 32) ?x26)))
 (let ((?x23 (ite $x133 (_ bv0 32) (_ bv1 32))))
 (let (($x33 (bvuge ?x23 (_ bv1 32))))
 (let (($x24 (= $x159 $x33)))
 (let (($x312 (=> $x53 $x24)))
 (let (($x147 (= ?x23 (_ bv0 32))))
 (let (($x51 (= $x267 $x147)))
 (let (($x255 (=> $x53 $x51)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x25)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x296)))
 (let (($x65 (= input.spec-%var-l-1.2.0 ?x151)))
 (let (($x177 (=> $x53 $x65)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x100 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x173 (bvuge ?x100 (_ bv1 32))))
 (let (($x199 (= $x53 $x173)))
 (let (($x220 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x77 (=> $x220 $x8)))
 (let (($x101 (= ?x100 (_ bv0 32))))
 (let (($x14 (= $x220 $x101)))
 (let (($x156 (and (and (and (and (and (and $x14 $x77) $x199) $x177) $x255) $x312) $x122)))
 (let (($x22 (and (and (and (and (and $x156 $x102) $x292) $x241) $x244) $x166)))
 (let (($x293 (= $x22 true)))
 (let ((?x125 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x125)))
 (let (($x237 (= ?x185 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x182 (= $x237 true)))
 (let (($x43 (= $x182 true)))
 (let (($x280 (= (_ bv0 23) ?x46)))
 (let (($x234 (= $x280 true)))
 (let (($x200 (= $x234 true)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x230)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x50 $x35)))
 (let (($x120 (and $x240 $x205)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x187 $x120)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x193 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x167)))))))
 (let (($x44 (and $x193 $x288)))
 (let (($x78 (= $x44 true)))
 (let (($x111 (= $x78 true)))
 (let (($x211 (= $x111 true)))
 (let (($x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x9 true)))
 (let (($x297 (= $x206 true)))
 (let (($x6 (= $x297 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x21 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x21) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x21))))
 (let (($x55 (and true $x178)))
 (let (($x145 (and $x178 $x55)))
 (let ((?x17 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem ?x17))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv2 32))) ?x295))))
 (let (($x73 (= (bvand ?x123 (_ bv4294967288 32)) ?x123)))
 (let (($x138 (= (bvand ?x17 (_ bv4294967292 32)) ?x17)))
 (let (($x265 (and $x138 $x73)))
 (let (($x143 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x17 (bvsub ?x17 (_ bv4 32))) (bvult ?x17 (bvsub ?x17 (_ bv4 32))))))
 (let (($x94 (and (and (and (and (and $x55 $x143) $x138) $x265) $x145) $x190)))
 (let (($x82 (= true $x94)))
 (let (($x71 (not $x171)))
 (let (($x61 (=> $x71 $x82)))
 (let (($x5 (= $x61 true)))
 (let (($x194 (= $x5 true)))
 (let (($x274 (= $x194 true)))
 (let ((?x54 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x160 (= (_ bv0 3) ?x54)))
 (let (($x169 (= $x160 true)))
 (let (($x189 (= $x169 true)))
 (let (($x13 (= $x71 true)))
 (let (($x16 (= $x13 true)))
 (let (($x19 (= $x16 true)))
 (let (($x175 (and $x19 $x189)))
 (let (($x57 (and $x175 $x274)))
 (let (($x209 (and $x57 $x6)))
 (let (($x306 (and $x209 $x211)))
 (let (($x172 (and $x306 $x200)))
 (let (($x155 (and $x172 $x43)))
 (let (($x129 (and $x155 $x293)))
 (let (($x343 (and $x129 $x342)))
 (let (($x56 (and $x186 $x343)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x96 (and $x168 $x56)))
 (let (($x135 (bvugt ?x17 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd ?x17 (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x47 (=> (bvule ?x17 (bvsub (bvadd ?x17 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x135)))))))
 (let (($x42 (=> (and $x71 (bvule ?x17 (bvsub (bvadd ?x17 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x105 $x135)))))))
 (let (($x107 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x59 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x89 (_ bv1 32))) (or false (or false (and true (or $x180 $x107)))))))
 (let (($x27 (=> (and $x71 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x89 (_ bv1 32)))) (or false (or false (and true (or $x180 $x107)))))))
 (let (($x134 (and $x27 $x42)))
 (let (($x197 (and $x134 $x96)))
 (let (($x161 (=> $x197 $x346)))
 (not $x161)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x344 ((_ extract 22 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x46 ((_ extract 22 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x446 (bvadd ?x46 ?x344)))
 (let (($x345 (= (_ bv0 23) ?x446)))
 (let (($x346 (= $x345 true)))
 (let (($x262 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x323 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x186 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x332 (and $x186 $x323)))
 (let (($x69 (and $x332 $x262)))
 (let (($x328 (not $x69)))
 (let (($x302 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x327 (and $x332 $x302)))
 (let (($x318 (not $x327)))
 (let ((?x89 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x271))))
 (let ((?x154 (bvadd ?x340 (_ bv4 32))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv1 32))) (select input.dst.llvm-mem ?x154))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x154 (_ bv2 32))) ?x252))))
 (let (($x275 (= (_ bv0 32) ?x300)))
 (let ((?x256 (ite $x275 (_ bv0 32) (_ bv1 32))))
 (let (($x440 (= ?x256 (_ bv0 32))))
 (let (($x321 (= $x302 $x440)))
 (let (($x32 (=> $x332 $x321)))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x339))))
 (let (($x320 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x115)))
 (let (($x66 (=> $x332 $x320)))
 (let (($x84 (bvuge ?x256 (_ bv1 32))))
 (let (($x281 (= $x262 $x84)))
 (let (($x310 (=> $x332 $x281)))
 (let (($x8 (= false false)))
 (let (($x106 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x308 (and $x186 $x106)))
 (let (($x269 (=> $x308 $x8)))
 (let (($x444 (= (_ bv0 32) ?x340)))
 (let ((?x445 (ite $x444 (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x445 (_ bv1 32))))
 (let (($x319 (= $x323 $x212)))
 (let (($x329 (=> $x186 $x319)))
 (let (($x263 (= ?x445 (_ bv0 32))))
 (let (($x204 (= $x106 $x263)))
 (let (($x108 (=> $x186 $x204)))
 (let ((?x303 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x309 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x118 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x118) (concat ?x309 (concat ?x67 ?x303)))))
 (let (($x188 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x201)))
 (let (($x213 (=> $x186 $x188)))
 (let (($x171 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x298 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x245 (bvuge ?x298 (_ bv1 32))))
 (let (($x153 (= $x186 $x245)))
 (let (($x113 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x228 (=> $x113 $x8)))
 (let (($x18 (= ?x298 (_ bv0 32))))
 (let (($x313 (= $x113 $x18)))
 (let (($x335 (and (and (and (and (and (and $x313 $x228) $x153) $x213) $x108) $x329) $x269)))
 (let (($x337 (and (and (and (and (and $x335 $x310) $x66) $x32) $x318) $x328)))
 (let (($x342 (= $x337 true)))
 (let (($x95 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x159 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x53 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x289 (and $x53 $x159)))
 (let (($x179 (and $x289 $x95)))
 (let (($x166 (not $x179)))
 (let (($x31 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x174 (and $x289 $x31)))
 (let (($x244 (not $x174)))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x10 (concat ?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x26 (concat ?x242 (concat ?x268 ?x10))))
 (let ((?x207 (bvadd ?x26 (_ bv4 32))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem ?x207))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv2 32))) ?x149))))
 (let (($x291 (= (_ bv0 32) ?x183)))
 (let ((?x322 (ite $x291 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x322 (_ bv1 32))))
 (let (($x443 (= $x31 $x36)))
 (let (($x241 (=> $x289 $x443)))
 (let (($x272 (= ?x322 (_ bv0 32))))
 (let (($x192 (= $x95 $x272)))
 (let (($x292 (=> $x289 $x192)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv1 32))) (select input.dst.llvm-mem ?x26))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv2 32))) ?x227))))
 (let (($x307 (= input.spec-%var-l-1.2.1.2.0 ?x270)))
 (let (($x102 (=> $x289 $x307)))
 (let (($x267 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x221 (and $x53 $x267)))
 (let (($x122 (=> $x221 $x8)))
 (let (($x133 (= (_ bv0 32) ?x26)))
 (let ((?x23 (ite $x133 (_ bv0 32) (_ bv1 32))))
 (let (($x33 (bvuge ?x23 (_ bv1 32))))
 (let (($x24 (= $x159 $x33)))
 (let (($x312 (=> $x53 $x24)))
 (let (($x147 (= ?x23 (_ bv0 32))))
 (let (($x51 (= $x267 $x147)))
 (let (($x255 (=> $x53 $x51)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x25)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x296)))
 (let (($x65 (= input.spec-%var-l-1.2.0 ?x151)))
 (let (($x177 (=> $x53 $x65)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x100 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x173 (bvuge ?x100 (_ bv1 32))))
 (let (($x199 (= $x53 $x173)))
 (let (($x220 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x77 (=> $x220 $x8)))
 (let (($x101 (= ?x100 (_ bv0 32))))
 (let (($x14 (= $x220 $x101)))
 (let (($x156 (and (and (and (and (and (and $x14 $x77) $x199) $x177) $x255) $x312) $x122)))
 (let (($x22 (and (and (and (and (and $x156 $x102) $x292) $x241) $x244) $x166)))
 (let (($x293 (= $x22 true)))
 (let ((?x125 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x125)))
 (let (($x237 (= ?x185 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x182 (= $x237 true)))
 (let (($x43 (= $x182 true)))
 (let (($x280 (= (_ bv0 23) ?x46)))
 (let (($x234 (= $x280 true)))
 (let (($x200 (= $x234 true)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x230)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x198)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x50 $x35)))
 (let (($x120 (and $x240 $x205)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x187 $x120)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x193 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x167)))))))
 (let (($x44 (and $x193 $x288)))
 (let (($x78 (= $x44 true)))
 (let (($x111 (= $x78 true)))
 (let (($x211 (= $x111 true)))
 (let (($x9 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x9 true)))
 (let (($x297 (= $x206 true)))
 (let (($x6 (= $x297 true)))
 (let (($x190 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x21 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x21) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x21))))
 (let (($x55 (and true $x178)))
 (let (($x145 (and $x178 $x55)))
 (let ((?x17 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem ?x17))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv2 32))) ?x295))))
 (let (($x73 (= (bvand ?x123 (_ bv4294967288 32)) ?x123)))
 (let (($x138 (= (bvand ?x17 (_ bv4294967292 32)) ?x17)))
 (let (($x265 (and $x138 $x73)))
 (let (($x143 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x17 (bvsub ?x17 (_ bv4 32))) (bvult ?x17 (bvsub ?x17 (_ bv4 32))))))
 (let (($x94 (and (and (and (and (and $x55 $x143) $x138) $x265) $x145) $x190)))
 (let (($x82 (= true $x94)))
 (let (($x71 (not $x171)))
 (let (($x61 (=> $x71 $x82)))
 (let (($x5 (= $x61 true)))
 (let (($x194 (= $x5 true)))
 (let (($x274 (= $x194 true)))
 (let ((?x54 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x160 (= (_ bv0 3) ?x54)))
 (let (($x169 (= $x160 true)))
 (let (($x189 (= $x169 true)))
 (let (($x13 (= $x71 true)))
 (let (($x16 (= $x13 true)))
 (let (($x19 (= $x16 true)))
 (let (($x175 (and $x19 $x189)))
 (let (($x57 (and $x175 $x274)))
 (let (($x209 (and $x57 $x6)))
 (let (($x306 (and $x209 $x211)))
 (let (($x172 (and $x306 $x200)))
 (let (($x155 (and $x172 $x43)))
 (let (($x129 (and $x155 $x293)))
 (let (($x343 (and $x129 $x342)))
 (let (($x56 (and $x186 $x343)))
 (let (($x168 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x96 (and $x168 $x56)))
 (let (($x135 (bvugt ?x17 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd ?x17 (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x47 (=> (bvule ?x17 (bvsub (bvadd ?x17 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x135)))))))
 (let (($x42 (=> (and $x71 (bvule ?x17 (bvsub (bvadd ?x17 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x105 $x135)))))))
 (let (($x107 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x59 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x89 (_ bv1 32))) (or false (or false (and true (or $x180 $x107)))))))
 (let (($x27 (=> (and $x71 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x89 (_ bv1 32)))) (or false (or false (and true (or $x180 $x107)))))))
 (let (($x134 (and $x27 $x42)))
 (let (($x197 (and $x134 $x96)))
 (let (($x161 (=> $x197 $x346)))
 (not $x161)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000010000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000010) #b01000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv16384 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483649 32) (_ bv64 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffe4)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x01b5fff9)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x01b6f018)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x01b6f019 #x6c))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00006c00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffe7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffffe4)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x186 ((_ extract 9 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x64 ((_ extract 9 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x245 (bvadd ?x64 ?x186)))
 (let (($x153 (= (_ bv0 10) ?x245)))
 (let (($x330 (= $x153 true)))
 (let ((?x163 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x291))))
 (let (($x36 (= (_ bv0 32) ?x31)))
 (let ((?x443 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x443 (_ bv1 32))))
 (let (($x244 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x179 (= $x244 $x37)))
 (let (($x19 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x166 (=> $x19 $x179)))
 (let (($x241 (= ?x443 (_ bv0 32))))
 (let (($x305 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x441 (= $x305 $x241)))
 (let (($x174 (=> $x19 $x441)))
 (let ((?x307 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x107 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem ?x107) (concat ?x207 (concat ?x99 ?x307)))))
 (let (($x223 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x247)))
 (let (($x202 (=> $x19 $x223)))
 (let (($x258 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x136 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x227 (bvuge ?x136 (_ bv1 32))))
 (let (($x124 (= $x19 $x227)))
 (let (($x199 (= false false)))
 (let (($x79 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x128 (=> $x79 $x199)))
 (let (($x162 (= ?x136 (_ bv0 32))))
 (let (($x39 (= $x79 $x162)))
 (let (($x113 (and (and (and (and (and $x39 $x128) $x124) $x202) $x174) $x166)))
 (let (($x298 (= $x113 true)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x285 (concat ?x195 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x23 (concat ?x133 (concat ?x10 ?x285))))
 (let (($x147 (= (_ bv0 32) ?x23)))
 (let ((?x51 (ite $x147 (_ bv0 32) (_ bv1 32))))
 (let (($x24 (bvuge ?x51 (_ bv1 32))))
 (let (($x33 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x312 (= $x33 $x24)))
 (let (($x317 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x130 (=> $x317 $x312)))
 (let (($x255 (= ?x51 (_ bv0 32))))
 (let (($x141 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x103 (= $x141 $x255)))
 (let (($x159 (=> $x317 $x103)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x222)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x250 (= input.spec-%var-l-1.2.0 ?x216)))
 (let (($x267 (=> $x317 $x250)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x243 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x225 (bvuge ?x243 (_ bv1 32))))
 (let (($x146 (= $x317 $x225)))
 (let (($x14 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x324 (=> $x14 $x199)))
 (let (($x53 (= ?x243 (_ bv0 32))))
 (let (($x173 (= $x14 $x53)))
 (let (($x184 (and (and (and (and (and $x173 $x324) $x146) $x267) $x159) $x130)))
 (let (($x63 (= $x184 true)))
 (let ((?x43 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x43)))
 (let (($x220 (= ?x155 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x127 (= $x220 true)))
 (let (($x315 (= $x127 true)))
 (let (($x125 (= (_ bv0 10) ?x64)))
 (let (($x185 (= $x125 true)))
 (let (($x121 (= $x185 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x44)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x205)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (and $x230 $x120)))
 (let (($x111 (and $x288 $x78)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x167 $x111)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x240 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x304 $x193)))))))
 (let (($x306 (and $x240 $x211)))
 (let (($x261 (= $x306 true)))
 (let (($x46 (= $x261 true)))
 (let (($x280 (= $x46 true)))
 (let (($x6 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x209 (= $x6 true)))
 (let (($x273 (= $x209 true)))
 (let (($x7 (= $x273 true)))
 (let (($x266 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x226 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x30 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226))))
 (let (($x45 (and true $x30)))
 (let (($x145 (and $x30 $x45)))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem ?x29))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv2 32))) ?x229))))
 (let (($x265 (= (bvand ?x81 (_ bv4294967288 32)) ?x81)))
 (let (($x203 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x235 (and $x203 $x265)))
 (let (($x72 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv4 32))) (bvult ?x29 (bvsub ?x29 (_ bv4 32))))))
 (let (($x5 (and (and (and (and (and $x45 $x72) $x203) $x235) $x145) $x266)))
 (let (($x194 (= true $x5)))
 (let (($x48 (not $x258)))
 (let (($x274 (=> $x48 $x194)))
 (let (($x57 (= $x274 true)))
 (let (($x52 (= $x57 true)))
 (let (($x9 (= $x52 true)))
 (let ((?x189 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x175 (= (_ bv0 3) ?x189)))
 (let (($x132 (= $x175 true)))
 (let (($x21 (= $x132 true)))
 (let (($x41 (= $x48 true)))
 (let (($x54 (= $x41 true)))
 (let (($x160 (= $x54 true)))
 (let (($x276 (and $x160 $x21)))
 (let (($x206 (and $x276 $x9)))
 (let (($x170 (and $x206 $x7)))
 (let (($x234 (and $x170 $x280)))
 (let (($x237 (and $x234 $x121)))
 (let (($x100 (and $x237 $x315)))
 (let (($x238 (and $x100 $x63)))
 (let (($x18 (and $x238 $x298)))
 (let (($x313 (and $x19 $x18)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x228 (and $x13 $x313)))
 (let (($x85 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd ?x29 (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x126 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x85)))))))
 (let (($x109 (=> (and $x48 (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x28 $x85)))))))
 (let (($x148 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x117 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x163 (_ bv1 32))) (or false (or false (and true (or $x88 $x148)))))))
 (let (($x58 (=> (and $x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x163 (_ bv1 32)))) (or false (or false (and true (or $x88 $x148)))))))
 (let (($x157 (and $x58 $x109)))
 (let (($x334 (and $x157 $x228)))
 (let (($x34 (=> $x334 $x330)))
 (not $x34)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x186 ((_ extract 9 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x64 ((_ extract 9 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x245 (bvadd ?x64 ?x186)))
 (let (($x153 (= (_ bv0 10) ?x245)))
 (let (($x330 (= $x153 true)))
 (let ((?x163 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x291))))
 (let (($x36 (= (_ bv0 32) ?x31)))
 (let ((?x443 (ite $x36 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x443 (_ bv1 32))))
 (let (($x244 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x179 (= $x244 $x37)))
 (let (($x19 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x166 (=> $x19 $x179)))
 (let (($x241 (= ?x443 (_ bv0 32))))
 (let (($x305 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x441 (= $x305 $x241)))
 (let (($x174 (=> $x19 $x441)))
 (let ((?x307 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x107 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem ?x107) (concat ?x207 (concat ?x99 ?x307)))))
 (let (($x223 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x247)))
 (let (($x202 (=> $x19 $x223)))
 (let (($x258 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x136 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x227 (bvuge ?x136 (_ bv1 32))))
 (let (($x124 (= $x19 $x227)))
 (let (($x199 (= false false)))
 (let (($x79 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x128 (=> $x79 $x199)))
 (let (($x162 (= ?x136 (_ bv0 32))))
 (let (($x39 (= $x79 $x162)))
 (let (($x113 (and (and (and (and (and $x39 $x128) $x124) $x202) $x174) $x166)))
 (let (($x298 (= $x113 true)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x285 (concat ?x195 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x23 (concat ?x133 (concat ?x10 ?x285))))
 (let (($x147 (= (_ bv0 32) ?x23)))
 (let ((?x51 (ite $x147 (_ bv0 32) (_ bv1 32))))
 (let (($x24 (bvuge ?x51 (_ bv1 32))))
 (let (($x33 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x312 (= $x33 $x24)))
 (let (($x317 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x130 (=> $x317 $x312)))
 (let (($x255 (= ?x51 (_ bv0 32))))
 (let (($x141 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x103 (= $x141 $x255)))
 (let (($x159 (=> $x317 $x103)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x222)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x250 (= input.spec-%var-l-1.2.0 ?x216)))
 (let (($x267 (=> $x317 $x250)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x243 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x225 (bvuge ?x243 (_ bv1 32))))
 (let (($x146 (= $x317 $x225)))
 (let (($x14 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x324 (=> $x14 $x199)))
 (let (($x53 (= ?x243 (_ bv0 32))))
 (let (($x173 (= $x14 $x53)))
 (let (($x184 (and (and (and (and (and $x173 $x324) $x146) $x267) $x159) $x130)))
 (let (($x63 (= $x184 true)))
 (let ((?x43 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x43)))
 (let (($x220 (= ?x155 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x127 (= $x220 true)))
 (let (($x315 (= $x127 true)))
 (let (($x125 (= (_ bv0 10) ?x64)))
 (let (($x185 (= $x125 true)))
 (let (($x121 (= $x185 true)))
 (let ((?x44 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x44)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x205)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (and $x230 $x120)))
 (let (($x111 (and $x288 $x78)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x167 $x111)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x240 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x304 $x193)))))))
 (let (($x306 (and $x240 $x211)))
 (let (($x261 (= $x306 true)))
 (let (($x46 (= $x261 true)))
 (let (($x280 (= $x46 true)))
 (let (($x6 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x209 (= $x6 true)))
 (let (($x273 (= $x209 true)))
 (let (($x7 (= $x273 true)))
 (let (($x266 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x226 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x30 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x226))))
 (let (($x45 (and true $x30)))
 (let (($x145 (and $x30 $x45)))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem ?x29))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv2 32))) ?x229))))
 (let (($x265 (= (bvand ?x81 (_ bv4294967288 32)) ?x81)))
 (let (($x203 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x235 (and $x203 $x265)))
 (let (($x72 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv4 32))) (bvult ?x29 (bvsub ?x29 (_ bv4 32))))))
 (let (($x5 (and (and (and (and (and $x45 $x72) $x203) $x235) $x145) $x266)))
 (let (($x194 (= true $x5)))
 (let (($x48 (not $x258)))
 (let (($x274 (=> $x48 $x194)))
 (let (($x57 (= $x274 true)))
 (let (($x52 (= $x57 true)))
 (let (($x9 (= $x52 true)))
 (let ((?x189 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x175 (= (_ bv0 3) ?x189)))
 (let (($x132 (= $x175 true)))
 (let (($x21 (= $x132 true)))
 (let (($x41 (= $x48 true)))
 (let (($x54 (= $x41 true)))
 (let (($x160 (= $x54 true)))
 (let (($x276 (and $x160 $x21)))
 (let (($x206 (and $x276 $x9)))
 (let (($x170 (and $x206 $x7)))
 (let (($x234 (and $x170 $x280)))
 (let (($x237 (and $x234 $x121)))
 (let (($x100 (and $x237 $x315)))
 (let (($x238 (and $x100 $x63)))
 (let (($x18 (and $x238 $x298)))
 (let (($x313 (and $x19 $x18)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x228 (and $x13 $x313)))
 (let (($x85 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd ?x29 (_ bv3 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x126 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x85)))))))
 (let (($x109 (=> (and $x48 (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x28 $x85)))))))
 (let (($x148 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x117 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x163 (_ bv1 32))) (or false (or false (and true (or $x88 $x148)))))))
 (let (($x58 (=> (and $x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x163 (_ bv1 32)))) (or false (or false (and true (or $x88 $x148)))))))
 (let (($x157 (and $x58 $x109)))
 (let (($x334 (and $x157 $x228)))
 (let (($x34 (=> $x334 $x330)))
 (not $x34)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000001000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000001) #b00000010)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x80000002)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x40))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffffc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv16 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv16 32) (_ bv1 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv232 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv232 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv235 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x217 ((_ extract 9 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x182 ((_ extract 9 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x201 (bvadd ?x182 ?x217)))
 (let (($x188 (= (_ bv0 10) ?x201)))
 (let (($x213 (= $x188 true)))
 (let (($x298 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x245 (and $x169 $x298)))
 (let (($x153 (not $x245)))
 (let (($x183 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x334 (and $x169 $x183)))
 (let (($x186 (not $x334)))
 (let ((?x118 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv1 32))) (select input.dst.llvm-mem ?x118))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv2 32))) ?x31))))
 (let (($x244 (= (_ bv0 32) ?x232)))
 (let ((?x37 (ite $x244 (_ bv0 32) (_ bv1 32))))
 (let (($x18 (bvuge ?x37 (_ bv1 32))))
 (let (($x313 (= $x298 $x18)))
 (let (($x228 (=> $x169 $x313)))
 (let (($x179 (= ?x37 (_ bv0 32))))
 (let (($x166 (= $x183 $x179)))
 (let (($x113 (=> $x169 $x166)))
 (let ((?x282 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x164 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x341 (concat (select input.dst.llvm-mem ?x164) (concat ?x236 (concat ?x223 ?x282)))))
 (let (($x322 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x341)))
 (let (($x272 (=> $x169 $x322)))
 (let (($x258 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x301 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x301 (_ bv1 32))))
 (let (($x307 (= $x169 $x99)))
 (let (($x146 (= false false)))
 (let (($x270 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x102 (=> $x270 $x146)))
 (let (($x95 (= ?x301 (_ bv0 32))))
 (let (($x207 (= $x270 $x95)))
 (let (($x287 (and (and (and (and (and (and $x207 $x102) $x307) $x272) $x113) $x228) $x186)))
 (let (($x442 (and $x287 $x153)))
 (let (($x309 (= $x442 true)))
 (let (($x24 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x191 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x16 (and $x191 $x24)))
 (let (($x79 (not $x16)))
 (let (($x26 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x63 (and $x191 $x26)))
 (let (($x238 (not $x63)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x195 (concat ?x268 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x51 (concat ?x147 (concat ?x285 ?x195))))
 (let (($x255 (= (_ bv0 32) ?x51)))
 (let ((?x103 (ite $x255 (_ bv0 32) (_ bv1 32))))
 (let (($x312 (bvuge ?x103 (_ bv1 32))))
 (let (($x130 (= $x24 $x312)))
 (let (($x184 (=> $x191 $x130)))
 (let (($x159 (= ?x103 (_ bv0 32))))
 (let (($x289 (= $x26 $x159)))
 (let (($x33 (=> $x191 $x289)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x196)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x216)))
 (let (($x279 (= input.spec-%var-l-1.2.0 ?x156)))
 (let (($x141 (=> $x191 $x279)))
 (let (($x324 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x221 (ite $x324 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x221 (_ bv1 32))))
 (let (($x177 (= $x191 $x65)))
 (let (($x173 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x122 (=> $x173 $x146)))
 (let (($x317 (= ?x221 (_ bv0 32))))
 (let (($x225 (= $x173 $x317)))
 (let (($x19 (and (and (and (and (and (and $x225 $x122) $x177) $x141) $x33) $x184) $x238)))
 (let (($x227 (and $x19 $x79)))
 (let (($x124 (= $x227 true)))
 (let ((?x315 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x315)))
 (let (($x14 (= ?x100 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x8 (= $x14 true)))
 (let (($x77 (= $x8 true)))
 (let (($x43 (= (_ bv0 10) ?x182)))
 (let (($x155 (= $x43 true)))
 (let (($x104 (= $x155 true)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x261)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x306 (and $x78 $x211)))
 (let (($x280 (and $x306 $x46)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (and $x112 $x280)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x240 $x74)))))))
 (let (($x200 (and $x44 $x234)))
 (let (($x172 (= $x200 true)))
 (let (($x64 (= $x172 true)))
 (let (($x125 (= $x64 true)))
 (let (($x170 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x97 (= $x170 true)))
 (let (($x176 (= $x97 true)))
 (let (($x35 (= $x176 true)))
 (let (($x266 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x30 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x90 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x30) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x30))))
 (let (($x158 (and true $x90)))
 (let (($x61 (and $x90 $x158)))
 (let ((?x17 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem ?x17))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv2 32))) ?x277))))
 (let (($x82 (= (bvand ?x73 (_ bv4294967288 32)) ?x73)))
 (let (($x123 (= (bvand ?x17 (_ bv4294967292 32)) ?x17)))
 (let (($x145 (and $x123 $x82)))
 (let (($x203 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x17 (bvsub ?x17 (_ bv4 32))) (bvult ?x17 (bvsub ?x17 (_ bv4 32))))))
 (let (($x52 (and (and (and (and (and $x158 $x203) $x123) $x145) $x61) $x266)))
 (let (($x9 (= true $x52)))
 (let (($x48 (not $x258)))
 (let (($x206 (=> $x48 $x9)))
 (let (($x297 (= $x206 true)))
 (let (($x6 (= $x297 true)))
 (let (($x209 (= $x6 true)))
 (let ((?x276 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (= (_ bv0 3) ?x276)))
 (let (($x226 (= $x178 true)))
 (let (($x55 (= $x226 true)))
 (let (($x189 (= $x48 true)))
 (let (($x175 (= $x189 true)))
 (let (($x132 (= $x175 true)))
 (let (($x181 (and $x132 $x55)))
 (let (($x273 (and $x181 $x209)))
 (let (($x316 (and $x273 $x35)))
 (let (($x185 (and $x316 $x125)))
 (let (($x220 (and $x185 $x104)))
 (let (($x243 (and $x220 $x77)))
 (let (($x293 (and $x243 $x124)))
 (let (($x325 (and $x293 $x309)))
 (let (($x67 (and $x169 $x325)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x303 (and $x54 $x67)))
 (let (($x47 (bvugt ?x17 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd ?x17 (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x13 (=> (bvule ?x17 (bvsub (bvadd ?x17 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x47)))))))
 (let (($x134 (=> (and $x48 (bvule ?x17 (bvsub (bvadd ?x17 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x47)))))))
 (let (($x59 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x105 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x118 (_ bv1 32))) (or false (or false (and true (or $x98 $x59)))))))
 (let (($x218 (=> (and $x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x118 (_ bv1 32)))) (or false (or false (and true (or $x98 $x59)))))))
 (let (($x135 (and $x218 $x134)))
 (let (($x142 (and $x135 $x303)))
 (let (($x333 (=> $x142 $x213)))
 (not $x333)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x217 ((_ extract 9 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x182 ((_ extract 9 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x201 (bvadd ?x182 ?x217)))
 (let (($x188 (= (_ bv0 10) ?x201)))
 (let (($x213 (= $x188 true)))
 (let (($x298 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x169 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x245 (and $x169 $x298)))
 (let (($x153 (not $x245)))
 (let (($x183 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x334 (and $x169 $x183)))
 (let (($x186 (not $x334)))
 (let ((?x118 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv1 32))) (select input.dst.llvm-mem ?x118))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x118 (_ bv2 32))) ?x31))))
 (let (($x244 (= (_ bv0 32) ?x232)))
 (let ((?x37 (ite $x244 (_ bv0 32) (_ bv1 32))))
 (let (($x18 (bvuge ?x37 (_ bv1 32))))
 (let (($x313 (= $x298 $x18)))
 (let (($x228 (=> $x169 $x313)))
 (let (($x179 (= ?x37 (_ bv0 32))))
 (let (($x166 (= $x183 $x179)))
 (let (($x113 (=> $x169 $x166)))
 (let ((?x282 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x164 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x341 (concat (select input.dst.llvm-mem ?x164) (concat ?x236 (concat ?x223 ?x282)))))
 (let (($x322 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x341)))
 (let (($x272 (=> $x169 $x322)))
 (let (($x258 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x301 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x99 (bvuge ?x301 (_ bv1 32))))
 (let (($x307 (= $x169 $x99)))
 (let (($x146 (= false false)))
 (let (($x270 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x102 (=> $x270 $x146)))
 (let (($x95 (= ?x301 (_ bv0 32))))
 (let (($x207 (= $x270 $x95)))
 (let (($x287 (and (and (and (and (and (and $x207 $x102) $x307) $x272) $x113) $x228) $x186)))
 (let (($x442 (and $x287 $x153)))
 (let (($x309 (= $x442 true)))
 (let (($x24 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x191 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x16 (and $x191 $x24)))
 (let (($x79 (not $x16)))
 (let (($x26 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x63 (and $x191 $x26)))
 (let (($x238 (not $x63)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x195 (concat ?x268 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x51 (concat ?x147 (concat ?x285 ?x195))))
 (let (($x255 (= (_ bv0 32) ?x51)))
 (let ((?x103 (ite $x255 (_ bv0 32) (_ bv1 32))))
 (let (($x312 (bvuge ?x103 (_ bv1 32))))
 (let (($x130 (= $x24 $x312)))
 (let (($x184 (=> $x191 $x130)))
 (let (($x159 (= ?x103 (_ bv0 32))))
 (let (($x289 (= $x26 $x159)))
 (let (($x33 (=> $x191 $x289)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x196)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x216)))
 (let (($x279 (= input.spec-%var-l-1.2.0 ?x156)))
 (let (($x141 (=> $x191 $x279)))
 (let (($x324 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x221 (ite $x324 (_ bv0 32) (_ bv1 32))))
 (let (($x65 (bvuge ?x221 (_ bv1 32))))
 (let (($x177 (= $x191 $x65)))
 (let (($x173 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x122 (=> $x173 $x146)))
 (let (($x317 (= ?x221 (_ bv0 32))))
 (let (($x225 (= $x173 $x317)))
 (let (($x19 (and (and (and (and (and (and $x225 $x122) $x177) $x141) $x33) $x184) $x238)))
 (let (($x227 (and $x19 $x79)))
 (let (($x124 (= $x227 true)))
 (let ((?x315 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x100 (bvneg ?x315)))
 (let (($x14 (= ?x100 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x8 (= $x14 true)))
 (let (($x77 (= $x8 true)))
 (let (($x43 (= (_ bv0 10) ?x182)))
 (let (($x155 (= $x43 true)))
 (let (($x104 (= $x155 true)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x261)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x306 (and $x78 $x211)))
 (let (($x280 (and $x306 $x46)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (and $x112 $x280)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x240 $x74)))))))
 (let (($x200 (and $x44 $x234)))
 (let (($x172 (= $x200 true)))
 (let (($x64 (= $x172 true)))
 (let (($x125 (= $x64 true)))
 (let (($x170 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x97 (= $x170 true)))
 (let (($x176 (= $x97 true)))
 (let (($x35 (= $x176 true)))
 (let (($x266 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x30 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x90 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x30) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x30))))
 (let (($x158 (and true $x90)))
 (let (($x61 (and $x90 $x158)))
 (let ((?x17 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem ?x17))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv2 32))) ?x277))))
 (let (($x82 (= (bvand ?x73 (_ bv4294967288 32)) ?x73)))
 (let (($x123 (= (bvand ?x17 (_ bv4294967292 32)) ?x17)))
 (let (($x145 (and $x123 $x82)))
 (let (($x203 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x17 (bvsub ?x17 (_ bv4 32))) (bvult ?x17 (bvsub ?x17 (_ bv4 32))))))
 (let (($x52 (and (and (and (and (and $x158 $x203) $x123) $x145) $x61) $x266)))
 (let (($x9 (= true $x52)))
 (let (($x48 (not $x258)))
 (let (($x206 (=> $x48 $x9)))
 (let (($x297 (= $x206 true)))
 (let (($x6 (= $x297 true)))
 (let (($x209 (= $x6 true)))
 (let ((?x276 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (= (_ bv0 3) ?x276)))
 (let (($x226 (= $x178 true)))
 (let (($x55 (= $x226 true)))
 (let (($x189 (= $x48 true)))
 (let (($x175 (= $x189 true)))
 (let (($x132 (= $x175 true)))
 (let (($x181 (and $x132 $x55)))
 (let (($x273 (and $x181 $x209)))
 (let (($x316 (and $x273 $x35)))
 (let (($x185 (and $x316 $x125)))
 (let (($x220 (and $x185 $x104)))
 (let (($x243 (and $x220 $x77)))
 (let (($x293 (and $x243 $x124)))
 (let (($x325 (and $x293 $x309)))
 (let (($x67 (and $x169 $x325)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x303 (and $x54 $x67)))
 (let (($x47 (bvugt ?x17 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd ?x17 (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x13 (=> (bvule ?x17 (bvsub (bvadd ?x17 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x47)))))))
 (let (($x134 (=> (and $x48 (bvule ?x17 (bvsub (bvadd ?x17 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x47)))))))
 (let (($x59 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x105 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x118 (_ bv1 32))) (or false (or false (and true (or $x98 $x59)))))))
 (let (($x218 (=> (and $x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x118 (_ bv1 32)))) (or false (or false (and true (or $x98 $x59)))))))
 (let (($x135 (and $x218 $x134)))
 (let (($x142 (and $x135 $x303)))
 (let (($x333 (=> $x142 $x213)))
 (not $x333)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 ((_ extract 9 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x127 ((_ extract 9 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x69 (bvadd ?x127 ?x131)))
 (let (($x328 (= (_ bv0 10) ?x69)))
 (let (($x337 (= $x328 true)))
 (let ((?x88 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv1 32))) (select input.dst.llvm-mem ?x88))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv2 32))) ?x171))))
 (let ((?x319 (bvadd ?x286 (_ bv4 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv1 32))) (select input.dst.llvm-mem ?x319))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv2 32))) ?x269))))
 (let (($x249 (= (_ bv0 32) ?x38)))
 (let ((?x338 (ite $x249 (_ bv0 32) (_ bv1 32))))
 (let (($x224 (= ?x338 (_ bv0 32))))
 (let (($x49 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x116 (= $x49 $x224)))
 (let (($x340 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x21 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x331 (and $x21 $x340)))
 (let (($x283 (=> $x331 $x116)))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv1 32))) (select input.dst.llvm-mem ?x286))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv2 32))) ?x275))))
 (let (($x119 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x311)))
 (let (($x299 (=> $x331 $x119)))
 (let (($x264 (bvuge ?x338 (_ bv1 32))))
 (let (($x212 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x253 (= $x212 $x264)))
 (let (($x246 (=> $x331 $x253)))
 (let (($x177 (= false false)))
 (let (($x213 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x204 (and $x21 $x213)))
 (let (($x108 (=> $x204 $x177)))
 (let (($x80 (= (_ bv0 32) ?x286)))
 (let ((?x254 (ite $x80 (_ bv0 32) (_ bv1 32))))
 (let (($x444 (bvuge ?x254 (_ bv1 32))))
 (let (($x445 (= $x340 $x444)))
 (let (($x263 (=> $x21 $x445)))
 (let (($x251 (= ?x254 (_ bv0 32))))
 (let (($x271 (= $x213 $x251)))
 (let (($x210 (=> $x21 $x271)))
 (let ((?x287 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x325 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x27 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x142 (concat (select input.dst.llvm-mem ?x27) (concat ?x325 (concat ?x153 ?x287)))))
 (let (($x217 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x142)))
 (let (($x201 (=> $x21 $x217)))
 (let (($x258 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x298 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x298 (_ bv1 32))))
 (let (($x334 (= $x21 $x165)))
 (let (($x89 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x228 (=> $x89 $x177)))
 (let (($x18 (= ?x298 (_ bv0 32))))
 (let (($x313 (= $x89 $x18)))
 (let (($x66 (and (and (and (and (and (and $x313 $x228) $x334) $x201) $x210) $x263) $x108)))
 (let (($x440 (and (and (and $x66 $x246) $x299) $x283)))
 (let (($x321 (= $x440 true)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x268 (concat ?x10 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x103 (concat ?x255 (concat ?x195 ?x268))))
 (let ((?x34 (bvadd ?x103 (_ bv4 32))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x236))))
 (let (($x322 (= (_ bv0 32) ?x341)))
 (let ((?x272 (ite $x322 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x272 (_ bv1 32))))
 (let (($x441 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x36 (= $x441 $x174)))
 (let (($x312 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x25 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x19 (and $x25 $x312)))
 (let (($x443 (=> $x19 $x36)))
 (let (($x259 (= ?x272 (_ bv0 32))))
 (let (($x307 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x12 (= $x307 $x259)))
 (let (($x183 (=> $x19 $x12)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x293))))
 (let (($x330 (= input.spec-%var-l-1.2.1.2.0 ?x102)))
 (let (($x169 (=> $x19 $x330)))
 (let (($x23 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x63 (and $x25 $x23)))
 (let (($x238 (=> $x63 $x177)))
 (let (($x159 (= (_ bv0 32) ?x103)))
 (let ((?x289 (ite $x159 (_ bv0 32) (_ bv1 32))))
 (let (($x130 (bvuge ?x289 (_ bv1 32))))
 (let (($x184 (= $x312 $x130)))
 (let (($x22 (=> $x25 $x184)))
 (let (($x33 (= ?x289 (_ bv0 32))))
 (let (($x128 (= $x23 $x33)))
 (let (($x24 (=> $x25 $x128)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x296)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x156)))
 (let (($x242 (= input.spec-%var-l-1.2.0 ?x39)))
 (let (($x26 (=> $x25 $x242)))
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x136 (ite $x122 (_ bv0 32) (_ bv1 32))))
 (let (($x250 (bvuge ?x136 (_ bv1 32))))
 (let (($x267 (= $x25 $x250)))
 (let (($x225 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x162 (=> $x225 $x177)))
 (let (($x191 (= ?x136 (_ bv0 32))))
 (let (($x65 (= $x225 $x191)))
 (let (($x232 (and (and (and (and (and (and $x65 $x162) $x267) $x26) $x24) $x22) $x238)))
 (let (($x179 (and (and (and $x232 $x169) $x183) $x443)))
 (let (($x166 (= $x179 true)))
 (let ((?x77 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x243 (bvneg ?x77)))
 (let (($x173 (= ?x243 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x199 (= $x173 true)))
 (let (($x324 (= $x199 true)))
 (let (($x315 (= (_ bv0 10) ?x127)))
 (let (($x100 (= $x315 true)))
 (let (($x101 (= $x100 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x172)))
 (let ((?x280 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x280)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x46 $x234)))
 (let (($x125 (and $x200 $x64)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x167 $x125)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x261 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x193)))))))
 (let (($x121 (and $x261 $x185)))
 (let (($x237 (= $x121 true)))
 (let (($x182 (= $x237 true)))
 (let (($x43 (= $x182 true)))
 (let (($x316 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x187 (= $x316 true)))
 (let (($x50 (= $x187 true)))
 (let (($x288 (= $x50 true)))
 (let (($x266 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x90 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x138 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x90) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x90))))
 (let (($x260 (and true $x138)))
 (let (($x57 (and $x138 $x260)))
 (let ((?x62 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x208))))
 (let (($x274 (= (bvand ?x235 (_ bv4294967288 32)) ?x235)))
 (let (($x278 (= (bvand ?x62 (_ bv4294967292 32)) ?x62)))
 (let (($x61 (and $x278 $x274)))
 (let (($x123 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x62 (bvsub ?x62 (_ bv4 32))) (bvult ?x62 (bvsub ?x62 (_ bv4 32))))))
 (let (($x6 (and (and (and (and (and $x260 $x123) $x278) $x61) $x57) $x266)))
 (let (($x209 (= true $x6)))
 (let (($x48 (not $x258)))
 (let (($x273 (=> $x48 $x209)))
 (let (($x7 (= $x273 true)))
 (let (($x170 (= $x7 true)))
 (let (($x97 (= $x170 true)))
 (let ((?x181 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x45 (= (_ bv0 3) ?x181)))
 (let (($x30 (= $x45 true)))
 (let (($x143 (= $x30 true)))
 (let (($x276 (= $x48 true)))
 (let (($x178 (= $x276 true)))
 (let (($x226 (= $x178 true)))
 (let (($x139 (and $x226 $x143)))
 (let (($x176 (and $x139 $x97)))
 (let (($x198 (and $x176 $x288)))
 (let (($x155 (and $x198 $x43)))
 (let (($x14 (and $x155 $x101)))
 (let (($x221 (and $x14 $x324)))
 (let (($x113 (and $x221 $x166)))
 (let (($x32 (and $x113 $x321)))
 (let (($x140 (and $x21 $x32)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x327 (and $x175 $x140)))
 (let (($x109 (bvugt ?x62 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd ?x62 (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x54 (=> (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x109)))))))
 (let (($x168 (=> (and $x48 (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x126 $x109)))))))
 (let (($x58 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x85 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x88 (_ bv1 32))) (or false (or false (and true (or $x117 $x58)))))))
 (let (($x107 (=> (and $x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x88 (_ bv1 32)))) (or false (or false (and true (or $x117 $x58)))))))
 (let (($x83 (and $x107 $x168)))
 (let (($x318 (and $x83 $x327)))
 (let (($x342 (=> $x318 $x337)))
 (not $x342)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 ((_ extract 9 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x127 ((_ extract 9 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x69 (bvadd ?x127 ?x131)))
 (let (($x328 (= (_ bv0 10) ?x69)))
 (let (($x337 (= $x328 true)))
 (let ((?x88 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv1 32))) (select input.dst.llvm-mem ?x88))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv2 32))) ?x171))))
 (let ((?x319 (bvadd ?x286 (_ bv4 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv1 32))) (select input.dst.llvm-mem ?x319))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv2 32))) ?x269))))
 (let (($x249 (= (_ bv0 32) ?x38)))
 (let ((?x338 (ite $x249 (_ bv0 32) (_ bv1 32))))
 (let (($x224 (= ?x338 (_ bv0 32))))
 (let (($x49 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x116 (= $x49 $x224)))
 (let (($x340 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x21 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x331 (and $x21 $x340)))
 (let (($x283 (=> $x331 $x116)))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv1 32))) (select input.dst.llvm-mem ?x286))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv2 32))) ?x275))))
 (let (($x119 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x311)))
 (let (($x299 (=> $x331 $x119)))
 (let (($x264 (bvuge ?x338 (_ bv1 32))))
 (let (($x212 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x253 (= $x212 $x264)))
 (let (($x246 (=> $x331 $x253)))
 (let (($x177 (= false false)))
 (let (($x213 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x204 (and $x21 $x213)))
 (let (($x108 (=> $x204 $x177)))
 (let (($x80 (= (_ bv0 32) ?x286)))
 (let ((?x254 (ite $x80 (_ bv0 32) (_ bv1 32))))
 (let (($x444 (bvuge ?x254 (_ bv1 32))))
 (let (($x445 (= $x340 $x444)))
 (let (($x263 (=> $x21 $x445)))
 (let (($x251 (= ?x254 (_ bv0 32))))
 (let (($x271 (= $x213 $x251)))
 (let (($x210 (=> $x21 $x271)))
 (let ((?x287 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x325 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x27 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x142 (concat (select input.dst.llvm-mem ?x27) (concat ?x325 (concat ?x153 ?x287)))))
 (let (($x217 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x142)))
 (let (($x201 (=> $x21 $x217)))
 (let (($x258 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x298 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x165 (bvuge ?x298 (_ bv1 32))))
 (let (($x334 (= $x21 $x165)))
 (let (($x89 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x228 (=> $x89 $x177)))
 (let (($x18 (= ?x298 (_ bv0 32))))
 (let (($x313 (= $x89 $x18)))
 (let (($x66 (and (and (and (and (and (and $x313 $x228) $x334) $x201) $x210) $x263) $x108)))
 (let (($x440 (and (and (and $x66 $x246) $x299) $x283)))
 (let (($x321 (= $x440 true)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x268 (concat ?x10 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x103 (concat ?x255 (concat ?x195 ?x268))))
 (let ((?x34 (bvadd ?x103 (_ bv4 32))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x236))))
 (let (($x322 (= (_ bv0 32) ?x341)))
 (let ((?x272 (ite $x322 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x272 (_ bv1 32))))
 (let (($x441 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x36 (= $x441 $x174)))
 (let (($x312 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x25 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x19 (and $x25 $x312)))
 (let (($x443 (=> $x19 $x36)))
 (let (($x259 (= ?x272 (_ bv0 32))))
 (let (($x307 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x12 (= $x307 $x259)))
 (let (($x183 (=> $x19 $x12)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x293))))
 (let (($x330 (= input.spec-%var-l-1.2.1.2.0 ?x102)))
 (let (($x169 (=> $x19 $x330)))
 (let (($x23 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x63 (and $x25 $x23)))
 (let (($x238 (=> $x63 $x177)))
 (let (($x159 (= (_ bv0 32) ?x103)))
 (let ((?x289 (ite $x159 (_ bv0 32) (_ bv1 32))))
 (let (($x130 (bvuge ?x289 (_ bv1 32))))
 (let (($x184 (= $x312 $x130)))
 (let (($x22 (=> $x25 $x184)))
 (let (($x33 (= ?x289 (_ bv0 32))))
 (let (($x128 (= $x23 $x33)))
 (let (($x24 (=> $x25 $x128)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x296)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x156)))
 (let (($x242 (= input.spec-%var-l-1.2.0 ?x39)))
 (let (($x26 (=> $x25 $x242)))
 (let (($x122 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x136 (ite $x122 (_ bv0 32) (_ bv1 32))))
 (let (($x250 (bvuge ?x136 (_ bv1 32))))
 (let (($x267 (= $x25 $x250)))
 (let (($x225 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x162 (=> $x225 $x177)))
 (let (($x191 (= ?x136 (_ bv0 32))))
 (let (($x65 (= $x225 $x191)))
 (let (($x232 (and (and (and (and (and (and $x65 $x162) $x267) $x26) $x24) $x22) $x238)))
 (let (($x179 (and (and (and $x232 $x169) $x183) $x443)))
 (let (($x166 (= $x179 true)))
 (let ((?x77 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x243 (bvneg ?x77)))
 (let (($x173 (= ?x243 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x199 (= $x173 true)))
 (let (($x324 (= $x199 true)))
 (let (($x315 (= (_ bv0 10) ?x127)))
 (let (($x100 (= $x315 true)))
 (let (($x101 (= $x100 true)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x172)))
 (let ((?x280 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x280)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x46 $x234)))
 (let (($x125 (and $x200 $x64)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x167 $x125)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x261 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x193)))))))
 (let (($x121 (and $x261 $x185)))
 (let (($x237 (= $x121 true)))
 (let (($x182 (= $x237 true)))
 (let (($x43 (= $x182 true)))
 (let (($x316 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x187 (= $x316 true)))
 (let (($x50 (= $x187 true)))
 (let (($x288 (= $x50 true)))
 (let (($x266 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x90 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x138 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x90) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x90))))
 (let (($x260 (and true $x138)))
 (let (($x57 (and $x138 $x260)))
 (let ((?x62 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x208))))
 (let (($x274 (= (bvand ?x235 (_ bv4294967288 32)) ?x235)))
 (let (($x278 (= (bvand ?x62 (_ bv4294967292 32)) ?x62)))
 (let (($x61 (and $x278 $x274)))
 (let (($x123 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x62 (bvsub ?x62 (_ bv4 32))) (bvult ?x62 (bvsub ?x62 (_ bv4 32))))))
 (let (($x6 (and (and (and (and (and $x260 $x123) $x278) $x61) $x57) $x266)))
 (let (($x209 (= true $x6)))
 (let (($x48 (not $x258)))
 (let (($x273 (=> $x48 $x209)))
 (let (($x7 (= $x273 true)))
 (let (($x170 (= $x7 true)))
 (let (($x97 (= $x170 true)))
 (let ((?x181 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x45 (= (_ bv0 3) ?x181)))
 (let (($x30 (= $x45 true)))
 (let (($x143 (= $x30 true)))
 (let (($x276 (= $x48 true)))
 (let (($x178 (= $x276 true)))
 (let (($x226 (= $x178 true)))
 (let (($x139 (and $x226 $x143)))
 (let (($x176 (and $x139 $x97)))
 (let (($x198 (and $x176 $x288)))
 (let (($x155 (and $x198 $x43)))
 (let (($x14 (and $x155 $x101)))
 (let (($x221 (and $x14 $x324)))
 (let (($x113 (and $x221 $x166)))
 (let (($x32 (and $x113 $x321)))
 (let (($x140 (and $x21 $x32)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x327 (and $x175 $x140)))
 (let (($x109 (bvugt ?x62 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd ?x62 (_ bv3 32))))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x54 (=> (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x109)))))))
 (let (($x168 (=> (and $x48 (bvule ?x62 (bvsub (bvadd ?x62 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x126 $x109)))))))
 (let (($x58 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x85 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x88 (_ bv1 32))) (or false (or false (and true (or $x117 $x58)))))))
 (let (($x107 (=> (and $x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x88 (_ bv1 32)))) (or false (or false (and true (or $x117 $x58)))))))
 (let (($x83 (and $x107 $x168)))
 (let (($x318 (and $x83 $x327)))
 (let (($x342 (=> $x318 $x337)))
 (not $x342)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000001000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000001) #b00000010)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb0b63430)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff9)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00040000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xff)
                                #x00040001
                                #x7f)
                         #xfffffffe
                         #x7f)
                  #x7fff8006
                  #x7f)))
(let ((a!2 (store (store (store (store a!1 #x7fff8003 #x7f) #x00040004 #xf8)
                         #x00000000
                         #x7f)
                  #xfffffffc
                  #x7f)))
  (store (store (store a!2 #x7fff8005 #x7f) #xfffffffe #x7f) #x00040000 #x7f))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xffff7f7f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb0b63433)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb0b63430)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x346 ((_ extract 9 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x8 ((_ extract 9 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x161 (bvadd ?x8 ?x346)))
 (let (($x447 (= (_ bv0 10) ?x161)))
 (let (($x231 (= $x447 true)))
 (let (($x154 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x204 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x55 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x319 (and $x55 $x204)))
 (let (($x140 (and $x319 $x154)))
 (let (($x327 (not $x140)))
 (let (($x224 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (and $x319 $x224)))
 (let (($x32 (not $x321)))
 (let ((?x98 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x286))))
 (let ((?x335 (bvadd ?x115 (_ bv4 32))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x329))))
 (let (($x253 (= (_ bv0 32) ?x264)))
 (let ((?x246 (ite $x253 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (= ?x246 (_ bv0 32))))
 (let (($x283 (= $x224 $x116)))
 (let (($x440 (=> $x319 $x283)))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x300))))
 (let (($x302 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x299)))
 (let (($x49 (=> $x319 $x302)))
 (let (($x150 (bvuge ?x246 (_ bv1 32))))
 (let (($x15 (= $x154 $x150)))
 (let (($x310 (=> $x319 $x15)))
 (let (($x267 (= false false)))
 (let (($x20 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x323 (and $x55 $x20)))
 (let (($x212 (=> $x323 $x267)))
 (let (($x340 (= (_ bv0 32) ?x115)))
 (let ((?x444 (ite $x340 (_ bv0 32) (_ bv1 32))))
 (let (($x108 (bvuge ?x444 (_ bv1 32))))
 (let (($x66 (= $x204 $x108)))
 (let (($x331 (=> $x55 $x66)))
 (let (($x445 (= ?x444 (_ bv0 32))))
 (let (($x263 (= $x20 $x445)))
 (let (($x320 (=> $x55 $x263)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x29 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x137 (concat (select input.dst.llvm-mem ?x29) (concat ?x188 (concat ?x217 ?x67)))))
 (let (($x304 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x137)))
 (let (($x106 (=> $x55 $x304)))
 (let (($x258 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x303 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x153 (bvuge ?x303 (_ bv1 32))))
 (let (($x287 (= $x55 $x153)))
 (let (($x186 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x245 (=> $x186 $x267)))
 (let (($x309 (= ?x303 (_ bv0 32))))
 (let (($x325 (= $x186 $x309)))
 (let (($x342 (and (and (and (and (and (and $x325 $x245) $x287) $x106) $x320) $x331) $x212)))
 (let (($x56 (and (and (and (and (and $x342 $x310) $x49) $x440) $x32) $x327)))
 (let (($x96 (= $x56 true)))
 (let (($x244 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x130 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x222 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x232 (and $x222 $x130)))
 (let (($x443 (and $x232 $x244)))
 (let (($x179 (not $x443)))
 (let (($x12 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x174 (and $x232 $x12)))
 (let (($x36 (not $x174)))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x10 (concat ?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x289 (concat ?x159 (concat ?x268 ?x10))))
 (let ((?x99 (bvadd ?x289 (_ bv4 32))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x305))))
 (let (($x282 (= (_ bv0 32) ?x236)))
 (let ((?x341 (ite $x282 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x341 (_ bv1 32))))
 (let (($x37 (= $x12 $x183)))
 (let (($x441 (=> $x232 $x37)))
 (let (($x322 (= ?x341 (_ bv0 32))))
 (let (($x272 (= $x244 $x322)))
 (let (($x259 (=> $x232 $x272)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x160))))
 (let (($x102 (= input.spec-%var-l-1.2.1.2.0 ?x301)))
 (let (($x330 (=> $x232 $x102)))
 (let (($x51 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x63 (and $x222 $x51)))
 (let (($x238 (=> $x63 $x267)))
 (let (($x33 (= (_ bv0 32) ?x289)))
 (let ((?x128 (ite $x33 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (bvuge ?x128 (_ bv1 32))))
 (let (($x22 (= $x130 $x184)))
 (let (($x241 (=> $x222 $x22)))
 (let (($x24 (= ?x128 (_ bv0 32))))
 (let (($x31 (= $x51 $x24)))
 (let (($x312 (=> $x222 $x31)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x151)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x39)))
 (let (($x133 (= input.spec-%var-l-1.2.0 ?x149)))
 (let (($x23 (=> $x222 $x133)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x291 (ite $x162 (_ bv0 32) (_ bv1 32))))
 (let (($x279 (bvuge ?x291 (_ bv1 32))))
 (let (($x141 (= $x222 $x279)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x192 (=> $x65 $x267)))
 (let (($x25 (= ?x291 (_ bv0 32))))
 (let (($x250 (= $x65 $x25)))
 (let (($x18 (and (and (and (and (and (and $x250 $x192) $x141) $x23) $x312) $x241) $x238)))
 (let (($x165 (and (and (and (and (and $x18 $x330) $x259) $x441) $x36) $x179)))
 (let (($x334 (= $x165 true)))
 (let ((?x324 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x221 (bvneg ?x324)))
 (let (($x225 (= ?x221 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x146 (= $x225 true)))
 (let (($x122 (= $x146 true)))
 (let (($x77 (= (_ bv0 10) ?x8)))
 (let (($x243 (= $x77 true)))
 (let (($x53 (= $x243 true)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x237)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x64 $x185)))
 (let (($x43 (and $x121 $x182)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x112 $x43)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x261 $x74)))))))
 (let (($x104 (and $x172 $x155)))
 (let (($x220 (= $x104 true)))
 (let (($x127 (= $x220 true)))
 (let (($x315 (= $x127 true)))
 (let (($x198 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x230 (= $x198 true)))
 (let (($x205 (= $x230 true)))
 (let (($x306 (= $x205 true)))
 (let (($x266 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x138 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x94 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x138) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x138))))
 (let (($x239 (and true $x94)))
 (let (($x297 (and $x94 $x239)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x295))))
 (let (($x206 (= (bvand ?x145 (_ bv4294967288 32)) ?x145)))
 (let (($x265 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x57 (and $x265 $x206)))
 (let (($x278 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x170 (and (and (and (and (and $x239 $x278) $x265) $x57) $x297) $x266)))
 (let (($x97 (= true $x170)))
 (let (($x48 (not $x258)))
 (let (($x176 (=> $x48 $x97)))
 (let (($x35 (= $x176 true)))
 (let (($x316 (= $x35 true)))
 (let (($x187 (= $x316 true)))
 (let ((?x139 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x158 (= (_ bv0 3) ?x139)))
 (let (($x90 (= $x158 true)))
 (let (($x190 (= $x90 true)))
 (let (($x181 (= $x48 true)))
 (let (($x45 (= $x181 true)))
 (let (($x30 (= $x45 true)))
 (let (($x72 (and $x30 $x190)))
 (let (($x50 (and $x72 $x187)))
 (let (($x120 (and $x50 $x306)))
 (let (($x100 (and $x120 $x315)))
 (let (($x173 (and $x100 $x53)))
 (let (($x136 (and $x173 $x122)))
 (let (($x339 (and $x136 $x334)))
 (let (($x197 (and $x339 $x96)))
 (let (($x344 (and $x55 $x197)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x446 (and $x178 $x344)))
 (let (($x134 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd ?x28 (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x175 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x134)))))))
 (let (($x41 (=> (and $x48 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x13 $x134)))))))
 (let (($x218 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x47 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x98 (_ bv1 32))) (or false (or false (and true (or $x105 $x218)))))))
 (let (($x164 (=> (and $x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x98 (_ bv1 32)))) (or false (or false (and true (or $x105 $x218)))))))
 (let (($x42 (and $x164 $x41)))
 (let (($x345 (and $x42 $x446)))
 (let (($x110 (=> $x345 $x231)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x346 ((_ extract 9 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x8 ((_ extract 9 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x161 (bvadd ?x8 ?x346)))
 (let (($x447 (= (_ bv0 10) ?x161)))
 (let (($x231 (= $x447 true)))
 (let (($x154 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x204 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x55 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x319 (and $x55 $x204)))
 (let (($x140 (and $x319 $x154)))
 (let (($x327 (not $x140)))
 (let (($x224 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x321 (and $x319 $x224)))
 (let (($x32 (not $x321)))
 (let ((?x98 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x286))))
 (let ((?x335 (bvadd ?x115 (_ bv4 32))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x329))))
 (let (($x253 (= (_ bv0 32) ?x264)))
 (let ((?x246 (ite $x253 (_ bv0 32) (_ bv1 32))))
 (let (($x116 (= ?x246 (_ bv0 32))))
 (let (($x283 (= $x224 $x116)))
 (let (($x440 (=> $x319 $x283)))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x300))))
 (let (($x302 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x299)))
 (let (($x49 (=> $x319 $x302)))
 (let (($x150 (bvuge ?x246 (_ bv1 32))))
 (let (($x15 (= $x154 $x150)))
 (let (($x310 (=> $x319 $x15)))
 (let (($x267 (= false false)))
 (let (($x20 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x323 (and $x55 $x20)))
 (let (($x212 (=> $x323 $x267)))
 (let (($x340 (= (_ bv0 32) ?x115)))
 (let ((?x444 (ite $x340 (_ bv0 32) (_ bv1 32))))
 (let (($x108 (bvuge ?x444 (_ bv1 32))))
 (let (($x66 (= $x204 $x108)))
 (let (($x331 (=> $x55 $x66)))
 (let (($x445 (= ?x444 (_ bv0 32))))
 (let (($x263 (= $x20 $x445)))
 (let (($x320 (=> $x55 $x263)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x29 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x137 (concat (select input.dst.llvm-mem ?x29) (concat ?x188 (concat ?x217 ?x67)))))
 (let (($x304 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x137)))
 (let (($x106 (=> $x55 $x304)))
 (let (($x258 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x303 (ite $x258 (_ bv0 32) (_ bv1 32))))
 (let (($x153 (bvuge ?x303 (_ bv1 32))))
 (let (($x287 (= $x55 $x153)))
 (let (($x186 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x245 (=> $x186 $x267)))
 (let (($x309 (= ?x303 (_ bv0 32))))
 (let (($x325 (= $x186 $x309)))
 (let (($x342 (and (and (and (and (and (and $x325 $x245) $x287) $x106) $x320) $x331) $x212)))
 (let (($x56 (and (and (and (and (and $x342 $x310) $x49) $x440) $x32) $x327)))
 (let (($x96 (= $x56 true)))
 (let (($x244 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x130 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x222 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x232 (and $x222 $x130)))
 (let (($x443 (and $x232 $x244)))
 (let (($x179 (not $x443)))
 (let (($x12 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x174 (and $x232 $x12)))
 (let (($x36 (not $x174)))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x10 (concat ?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x289 (concat ?x159 (concat ?x268 ?x10))))
 (let ((?x99 (bvadd ?x289 (_ bv4 32))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x305))))
 (let (($x282 (= (_ bv0 32) ?x236)))
 (let ((?x341 (ite $x282 (_ bv0 32) (_ bv1 32))))
 (let (($x183 (bvuge ?x341 (_ bv1 32))))
 (let (($x37 (= $x12 $x183)))
 (let (($x441 (=> $x232 $x37)))
 (let (($x322 (= ?x341 (_ bv0 32))))
 (let (($x272 (= $x244 $x322)))
 (let (($x259 (=> $x232 $x272)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x160))))
 (let (($x102 (= input.spec-%var-l-1.2.1.2.0 ?x301)))
 (let (($x330 (=> $x232 $x102)))
 (let (($x51 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x63 (and $x222 $x51)))
 (let (($x238 (=> $x63 $x267)))
 (let (($x33 (= (_ bv0 32) ?x289)))
 (let ((?x128 (ite $x33 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (bvuge ?x128 (_ bv1 32))))
 (let (($x22 (= $x130 $x184)))
 (let (($x241 (=> $x222 $x22)))
 (let (($x24 (= ?x128 (_ bv0 32))))
 (let (($x31 (= $x51 $x24)))
 (let (($x312 (=> $x222 $x31)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x151)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x39)))
 (let (($x133 (= input.spec-%var-l-1.2.0 ?x149)))
 (let (($x23 (=> $x222 $x133)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x291 (ite $x162 (_ bv0 32) (_ bv1 32))))
 (let (($x279 (bvuge ?x291 (_ bv1 32))))
 (let (($x141 (= $x222 $x279)))
 (let (($x65 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x192 (=> $x65 $x267)))
 (let (($x25 (= ?x291 (_ bv0 32))))
 (let (($x250 (= $x65 $x25)))
 (let (($x18 (and (and (and (and (and (and $x250 $x192) $x141) $x23) $x312) $x241) $x238)))
 (let (($x165 (and (and (and (and (and $x18 $x330) $x259) $x441) $x36) $x179)))
 (let (($x334 (= $x165 true)))
 (let ((?x324 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x221 (bvneg ?x324)))
 (let (($x225 (= ?x221 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x146 (= $x225 true)))
 (let (($x122 (= $x146 true)))
 (let (($x77 (= (_ bv0 10) ?x8)))
 (let (($x243 (= $x77 true)))
 (let (($x53 (= $x243 true)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x237)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x64 $x185)))
 (let (($x43 (and $x121 $x182)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x112 $x43)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x261 $x74)))))))
 (let (($x104 (and $x172 $x155)))
 (let (($x220 (= $x104 true)))
 (let (($x127 (= $x220 true)))
 (let (($x315 (= $x127 true)))
 (let (($x198 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x230 (= $x198 true)))
 (let (($x205 (= $x230 true)))
 (let (($x306 (= $x205 true)))
 (let (($x266 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x138 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x94 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x138) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x138))))
 (let (($x239 (and true $x94)))
 (let (($x297 (and $x94 $x239)))
 (let ((?x28 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x295))))
 (let (($x206 (= (bvand ?x145 (_ bv4294967288 32)) ?x145)))
 (let (($x265 (= (bvand ?x28 (_ bv4294967292 32)) ?x28)))
 (let (($x57 (and $x265 $x206)))
 (let (($x278 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x28 (bvsub ?x28 (_ bv4 32))) (bvult ?x28 (bvsub ?x28 (_ bv4 32))))))
 (let (($x170 (and (and (and (and (and $x239 $x278) $x265) $x57) $x297) $x266)))
 (let (($x97 (= true $x170)))
 (let (($x48 (not $x258)))
 (let (($x176 (=> $x48 $x97)))
 (let (($x35 (= $x176 true)))
 (let (($x316 (= $x35 true)))
 (let (($x187 (= $x316 true)))
 (let ((?x139 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x158 (= (_ bv0 3) ?x139)))
 (let (($x90 (= $x158 true)))
 (let (($x190 (= $x90 true)))
 (let (($x181 (= $x48 true)))
 (let (($x45 (= $x181 true)))
 (let (($x30 (= $x45 true)))
 (let (($x72 (and $x30 $x190)))
 (let (($x50 (and $x72 $x187)))
 (let (($x120 (and $x50 $x306)))
 (let (($x100 (and $x120 $x315)))
 (let (($x173 (and $x100 $x53)))
 (let (($x136 (and $x173 $x122)))
 (let (($x339 (and $x136 $x334)))
 (let (($x197 (and $x339 $x96)))
 (let (($x344 (and $x55 $x197)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x446 (and $x178 $x344)))
 (let (($x134 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd ?x28 (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x175 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x13 $x134)))))))
 (let (($x41 (=> (and $x48 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x13 $x134)))))))
 (let (($x218 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x47 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x98 (_ bv1 32))) (or false (or false (and true (or $x105 $x218)))))))
 (let (($x164 (=> (and $x48 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x98 (_ bv1 32)))) (or false (or false (and true (or $x105 $x218)))))))
 (let (($x42 (and $x164 $x41)))
 (let (($x345 (and $x42 $x446)))
 (let (($x110 (=> $x345 $x231)))
 (not $x110)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000001000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000001) #b00000010)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv2 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff9)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000010)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000011 #x75))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00007500)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x313 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x218 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem ?x218) (concat ?x99 (concat ?x313 ?x102)))))
 (let ((?x131 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x247)))
 (let ((?x55 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x153 (bvmul (_ bv4294967295 32) ?x55)))
 (let ((?x287 (bvneg ?x153)))
 (let (($x442 (= ?x287 ?x131)))
 (let (($x60 (= $x442 true)))
 (let ((?x117 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x282))))
 (let (($x183 (= (_ bv0 32) ?x12)))
 (let ((?x37 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x21 (bvuge ?x37 (_ bv1 32))))
 (let (($x36 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x443 (= $x36 $x21)))
 (let (($x30 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x179 (=> $x30 $x443)))
 (let (($x441 (= ?x37 (_ bv0 32))))
 (let (($x307 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x215 (= $x307 $x441)))
 (let (($x174 (=> $x30 $x215)))
 (let (($x223 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x247)))
 (let (($x34 (=> $x30 $x223)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x227 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x227 (_ bv1 32))))
 (let (($x124 (= $x30 $x160)))
 (let (($x141 (= false false)))
 (let (($x270 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x16 (=> $x270 $x141)))
 (let (($x95 (= ?x227 (_ bv0 32))))
 (let (($x207 (= $x270 $x95)))
 (let (($x186 (and (and (and (and (and $x207 $x16) $x124) $x34) $x174) $x179)))
 (let (($x303 (= $x186 true)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x285 (concat ?x195 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x128 (concat ?x33 (concat ?x10 ?x285))))
 (let (($x24 (= (_ bv0 32) ?x128)))
 (let ((?x31 (ite $x24 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x31 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x241 (= $x184 $x22)))
 (let (($x196 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x298 (=> $x196 $x241)))
 (let (($x312 (= ?x31 (_ bv0 32))))
 (let (($x103 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x89 (= $x103 $x312)))
 (let (($x130 (=> $x196 $x89)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x216)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x149)))
 (let (($x147 (= input.spec-%var-l-1.2.0 ?x132)))
 (let (($x51 (=> $x196 $x147)))
 (let (($x192 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x166 (ite $x192 (_ bv0 32) (_ bv1 32))))
 (let (($x242 (bvuge ?x166 (_ bv1 32))))
 (let (($x26 (= $x196 $x242)))
 (let (($x250 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x113 (=> $x250 $x141)))
 (let (($x222 (= ?x166 (_ bv0 32))))
 (let (($x279 (= $x250 $x222)))
 (let (($x19 (and (and (and (and (and $x279 $x113) $x26) $x51) $x130) $x298)))
 (let (($x79 (= $x19 true)))
 (let ((?x191 ((_ extract 0 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x65 (= (_ bv0 1) ?x191)))
 (let (($x177 (= $x65 true)))
 (let (($x162 (= $x177 true)))
 (let ((?x221 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x317 (= (_ bv0 3) ?x221)))
 (let (($x225 (= $x317 true)))
 (let (($x146 (= $x225 true)))
 (let ((?x101 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x101)))
 (let (($x243 (= ?x8 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x53 (= $x243 true)))
 (let (($x173 (= $x53 true)))
 (let (($x43 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x155 (= $x43 true)))
 (let (($x104 (= $x155 true)))
 (let (($x220 (= $x104 true)))
 (let (($x167 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x295 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x61 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x295) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x295))))
 (let (($x206 (and true $x61)))
 (let (($x261 (and $x61 $x206)))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x50))))
 (let (($x200 (= (bvand ?x120 (_ bv4294967288 32)) ?x120)))
 (let (($x97 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x211 (and $x97 $x200)))
 (let (($x233 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x193 (and (and (and (and (and $x206 $x233) $x97) $x211) $x261) $x167)))
 (let (($x112 (= true $x193)))
 (let (($x258 (not $x88)))
 (let (($x64 (=> $x258 $x112)))
 (let (($x125 (= $x64 true)))
 (let (($x185 (= $x125 true)))
 (let (($x121 (= $x185 true)))
 (let (($x73 (= $x258 true)))
 (let (($x81 (= $x73 true)))
 (let (($x87 (= $x81 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x9)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x278 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x194 $x278)))
 (let (($x265 (and $x6 $x284)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x158 $x265)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x260 $x138)))))))
 (let (($x152 (and $x123 $x209)))
 (let (($x82 (= $x152 true)))
 (let (($x229 (= $x82 true)))
 (let (($x208 (= $x229 true)))
 (let (($x277 (and $x208 $x87)))
 (let (($x237 (and $x277 $x121)))
 (let (($x127 (and $x237 $x220)))
 (let (($x199 (and $x127 $x173)))
 (let (($x122 (and $x199 $x146)))
 (let (($x291 (and $x122 $x162)))
 (let (($x293 (and $x291 $x79)))
 (let (($x309 (and $x293 $x303)))
 (let (($x325 (and $x30 $x309)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x245 (and $x181 $x325)))
 (let (($x54 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd ?x27 (_ bv3 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x276 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x54)))))))
 (let (($x109 (=> (and $x258 (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x135 $x54)))))))
 (let (($x85 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x126 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x117 (_ bv1 32))) (or false (or false (and true (or $x17 $x85)))))))
 (let (($x48 (=> (and $x258 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x117 (_ bv1 32)))) (or false (or false (and true (or $x17 $x85)))))))
 (let (($x189 (and $x48 $x109)))
 (let (($x318 (and $x189 $x245)))
 (let (($x439 (=> $x318 $x60)))
 (not $x439)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x313 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x218 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem ?x218) (concat ?x99 (concat ?x313 ?x102)))))
 (let ((?x131 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x247)))
 (let ((?x55 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x153 (bvmul (_ bv4294967295 32) ?x55)))
 (let ((?x287 (bvneg ?x153)))
 (let (($x442 (= ?x287 ?x131)))
 (let (($x60 (= $x442 true)))
 (let ((?x117 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x282))))
 (let (($x183 (= (_ bv0 32) ?x12)))
 (let ((?x37 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x21 (bvuge ?x37 (_ bv1 32))))
 (let (($x36 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x443 (= $x36 $x21)))
 (let (($x30 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x179 (=> $x30 $x443)))
 (let (($x441 (= ?x37 (_ bv0 32))))
 (let (($x307 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x215 (= $x307 $x441)))
 (let (($x174 (=> $x30 $x215)))
 (let (($x223 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x247)))
 (let (($x34 (=> $x30 $x223)))
 (let (($x88 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x227 (ite $x88 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x227 (_ bv1 32))))
 (let (($x124 (= $x30 $x160)))
 (let (($x141 (= false false)))
 (let (($x270 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x16 (=> $x270 $x141)))
 (let (($x95 (= ?x227 (_ bv0 32))))
 (let (($x207 (= $x270 $x95)))
 (let (($x186 (and (and (and (and (and $x207 $x16) $x124) $x34) $x174) $x179)))
 (let (($x303 (= $x186 true)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x285 (concat ?x195 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x128 (concat ?x33 (concat ?x10 ?x285))))
 (let (($x24 (= (_ bv0 32) ?x128)))
 (let ((?x31 (ite $x24 (_ bv0 32) (_ bv1 32))))
 (let (($x22 (bvuge ?x31 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x241 (= $x184 $x22)))
 (let (($x196 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x298 (=> $x196 $x241)))
 (let (($x312 (= ?x31 (_ bv0 32))))
 (let (($x103 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x89 (= $x103 $x312)))
 (let (($x130 (=> $x196 $x89)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x216)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x149)))
 (let (($x147 (= input.spec-%var-l-1.2.0 ?x132)))
 (let (($x51 (=> $x196 $x147)))
 (let (($x192 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x166 (ite $x192 (_ bv0 32) (_ bv1 32))))
 (let (($x242 (bvuge ?x166 (_ bv1 32))))
 (let (($x26 (= $x196 $x242)))
 (let (($x250 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x113 (=> $x250 $x141)))
 (let (($x222 (= ?x166 (_ bv0 32))))
 (let (($x279 (= $x250 $x222)))
 (let (($x19 (and (and (and (and (and $x279 $x113) $x26) $x51) $x130) $x298)))
 (let (($x79 (= $x19 true)))
 (let ((?x191 ((_ extract 0 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let (($x65 (= (_ bv0 1) ?x191)))
 (let (($x177 (= $x65 true)))
 (let (($x162 (= $x177 true)))
 (let ((?x221 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x317 (= (_ bv0 3) ?x221)))
 (let (($x225 (= $x317 true)))
 (let (($x146 (= $x225 true)))
 (let ((?x101 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x101)))
 (let (($x243 (= ?x8 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x53 (= $x243 true)))
 (let (($x173 (= $x53 true)))
 (let (($x43 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x155 (= $x43 true)))
 (let (($x104 (= $x155 true)))
 (let (($x220 (= $x104 true)))
 (let (($x167 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x295 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x61 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x295) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x295))))
 (let (($x206 (and true $x61)))
 (let (($x261 (and $x61 $x206)))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x50))))
 (let (($x200 (= (bvand ?x120 (_ bv4294967288 32)) ?x120)))
 (let (($x97 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x211 (and $x97 $x200)))
 (let (($x233 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x193 (and (and (and (and (and $x206 $x233) $x97) $x211) $x261) $x167)))
 (let (($x112 (= true $x193)))
 (let (($x258 (not $x88)))
 (let (($x64 (=> $x258 $x112)))
 (let (($x125 (= $x64 true)))
 (let (($x185 (= $x125 true)))
 (let (($x121 (= $x185 true)))
 (let (($x73 (= $x258 true)))
 (let (($x81 (= $x73 true)))
 (let (($x87 (= $x81 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x9)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x278 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x194 $x278)))
 (let (($x265 (and $x6 $x284)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x158 $x265)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x260 $x138)))))))
 (let (($x152 (and $x123 $x209)))
 (let (($x82 (= $x152 true)))
 (let (($x229 (= $x82 true)))
 (let (($x208 (= $x229 true)))
 (let (($x277 (and $x208 $x87)))
 (let (($x237 (and $x277 $x121)))
 (let (($x127 (and $x237 $x220)))
 (let (($x199 (and $x127 $x173)))
 (let (($x122 (and $x199 $x146)))
 (let (($x291 (and $x122 $x162)))
 (let (($x293 (and $x291 $x79)))
 (let (($x309 (and $x293 $x303)))
 (let (($x325 (and $x30 $x309)))
 (let (($x181 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x245 (and $x181 $x325)))
 (let (($x54 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd ?x27 (_ bv3 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x276 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x54)))))))
 (let (($x109 (=> (and $x258 (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x135 $x54)))))))
 (let (($x85 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x126 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x117 (_ bv1 32))) (or false (or false (and true (or $x17 $x85)))))))
 (let (($x48 (=> (and $x258 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x117 (_ bv1 32)))) (or false (or false (and true (or $x17 $x85)))))))
 (let (($x189 (and $x48 $x109)))
 (let (($x318 (and $x189 $x245)))
 (let (($x439 (=> $x318 $x60)))
 (not $x439)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 ((_ extract 0 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x25 ((_ extract 0 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x442 (bvadd ?x25 ?x131)))
 (let (($x60 (= (_ bv0 1) ?x442)))
 (let (($x439 (= $x60 true)))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x322))))
 (let (($x183 (= (_ bv0 32) ?x12)))
 (let ((?x37 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x37 (_ bv1 32))))
 (let (($x226 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x21 (= $x226 $x36)))
 (let (($x52 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x443 (=> $x52 $x21)))
 (let (($x441 (= ?x37 (_ bv0 32))))
 (let (($x307 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x215 (= $x307 $x441)))
 (let (($x174 (=> $x52 $x215)))
 (let ((?x244 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x330 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x85 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x223 (concat (select input.dst.llvm-mem ?x85) (concat ?x169 (concat ?x330 ?x244)))))
 (let (($x34 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x223)))
 (let (($x339 (=> $x52 $x34)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x165 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x334 (bvuge ?x165 (_ bv1 32))))
 (let (($x301 (= $x52 $x334)))
 (let (($x26 (= false false)))
 (let (($x16 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x124 (=> $x16 $x26)))
 (let (($x30 (= ?x165 (_ bv0 32))))
 (let (($x160 (= $x16 $x30)))
 (let (($x325 (and (and (and (and (and $x160 $x124) $x301) $x339) $x174) $x443)))
 (let (($x245 (= $x325 true)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x195 (concat ?x268 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x31 (concat ?x24 (concat ?x285 ?x195))))
 (let (($x312 (= (_ bv0 32) ?x31)))
 (let ((?x89 (ite $x312 (_ bv0 32) (_ bv1 32))))
 (let (($x241 (bvuge ?x89 (_ bv1 32))))
 (let (($x22 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x298 (= $x22 $x241)))
 (let (($x296 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x19 (=> $x296 $x298)))
 (let (($x130 (= ?x89 (_ bv0 32))))
 (let (($x289 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x232 (= $x289 $x130)))
 (let (($x184 (=> $x296 $x232)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x156)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x132)))
 (let (($x255 (= input.spec-%var-l-1.2.0 ?x18)))
 (let (($x103 (=> $x296 $x255)))
 (let (($x113 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x63 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x63 (_ bv1 32))))
 (let (($x23 (= $x296 $x133)))
 (let (($x279 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x238 (=> $x279 $x26)))
 (let (($x196 (= ?x63 (_ bv0 32))))
 (let (($x242 (= $x279 $x196)))
 (let (($x227 (and (and (and (and (and $x242 $x238) $x23) $x103) $x184) $x19)))
 (let (($x95 (= $x227 true)))
 (let (($x250 (= (_ bv0 1) ?x25)))
 (let (($x267 (= $x250 true)))
 (let (($x192 (= $x267 true)))
 (let ((?x146 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x146)))
 (let (($x191 (= ?x122 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x65 (= $x191 true)))
 (let (($x177 (= $x65 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x101)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x104 $x127)))
 (let (($x77 (and $x100 $x8)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x74 $x77)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x125)))))))
 (let (($x53 (and $x155 $x243)))
 (let (($x173 (= $x53 true)))
 (let (($x199 (= $x173 true)))
 (let (($x324 (= $x199 true)))
 (let (($x78 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x111 (= $x78 true)))
 (let (($x200 (= $x111 true)))
 (let (($x211 (= $x200 true)))
 (let (($x97 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x158 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x158) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x158))))
 (let (($x9 (and true $x6)))
 (let (($x266 (and $x6 $x9)))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem ?x29))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv2 32))) ?x295))))
 (let (($x233 (= (bvand ?x57 (_ bv4294967288 32)) ?x57)))
 (let (($x73 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x46 (and $x73 $x233)))
 (let (($x82 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv4 32))) (bvult ?x29 (bvsub ?x29 (_ bv4 32))))))
 (let (($x198 (and (and (and (and (and $x9 $x82) $x73) $x46) $x266) $x97)))
 (let (($x230 (= true $x198)))
 (let (($x88 (not $x315)))
 (let (($x316 (=> $x88 $x230)))
 (let (($x187 (= $x316 true)))
 (let (($x35 (= $x187 true)))
 (let (($x50 (= $x35 true)))
 (let ((?x203 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x94 (= (_ bv0 3) ?x203)))
 (let (($x239 (= $x94 true)))
 (let (($x123 (= $x239 true)))
 (let (($x72 (= $x88 true)))
 (let (($x260 (= $x72 true)))
 (let (($x138 (= $x260 true)))
 (let (($x139 (and $x138 $x123)))
 (let (($x205 (and $x139 $x50)))
 (let (($x234 (and $x205 $x211)))
 (let (($x221 (and $x234 $x324)))
 (let (($x162 (and $x221 $x177)))
 (let (($x166 (and $x162 $x192)))
 (let (($x207 (and $x166 $x95)))
 (let (($x318 (and $x207 $x245)))
 (let (($x55 (and $x52 $x318)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x153 (and $x90 $x55)))
 (let (($x83 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd ?x29 (_ bv3 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x178 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x168 $x83)))))))
 (let (($x13 (=> (and $x88 (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x168 $x83)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x157 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x28 (_ bv1 32))) (or false (or false (and true (or $x107 $x62)))))))
 (let (($x58 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x28 (_ bv1 32)))) (or false (or false (and true (or $x107 $x62)))))))
 (let (($x42 (and $x58 $x13)))
 (let (($x287 (and $x42 $x153)))
 (let (($x188 (=> $x287 $x439)))
 (not $x188)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 ((_ extract 0 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x25 ((_ extract 0 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x442 (bvadd ?x25 ?x131)))
 (let (($x60 (= (_ bv0 1) ?x442)))
 (let (($x439 (= $x60 true)))
 (let ((?x28 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x322))))
 (let (($x183 (= (_ bv0 32) ?x12)))
 (let ((?x37 (ite $x183 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x37 (_ bv1 32))))
 (let (($x226 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x21 (= $x226 $x36)))
 (let (($x52 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x443 (=> $x52 $x21)))
 (let (($x441 (= ?x37 (_ bv0 32))))
 (let (($x307 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x215 (= $x307 $x441)))
 (let (($x174 (=> $x52 $x215)))
 (let ((?x244 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x330 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x85 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x223 (concat (select input.dst.llvm-mem ?x85) (concat ?x169 (concat ?x330 ?x244)))))
 (let (($x34 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x223)))
 (let (($x339 (=> $x52 $x34)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x165 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x334 (bvuge ?x165 (_ bv1 32))))
 (let (($x301 (= $x52 $x334)))
 (let (($x26 (= false false)))
 (let (($x16 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x124 (=> $x16 $x26)))
 (let (($x30 (= ?x165 (_ bv0 32))))
 (let (($x160 (= $x16 $x30)))
 (let (($x325 (and (and (and (and (and $x160 $x124) $x301) $x339) $x174) $x443)))
 (let (($x245 (= $x325 true)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x195 (concat ?x268 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x31 (concat ?x24 (concat ?x285 ?x195))))
 (let (($x312 (= (_ bv0 32) ?x31)))
 (let ((?x89 (ite $x312 (_ bv0 32) (_ bv1 32))))
 (let (($x241 (bvuge ?x89 (_ bv1 32))))
 (let (($x22 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x298 (= $x22 $x241)))
 (let (($x296 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x19 (=> $x296 $x298)))
 (let (($x130 (= ?x89 (_ bv0 32))))
 (let (($x289 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x232 (= $x289 $x130)))
 (let (($x184 (=> $x296 $x232)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x156)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x132)))
 (let (($x255 (= input.spec-%var-l-1.2.0 ?x18)))
 (let (($x103 (=> $x296 $x255)))
 (let (($x113 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x63 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x133 (bvuge ?x63 (_ bv1 32))))
 (let (($x23 (= $x296 $x133)))
 (let (($x279 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x238 (=> $x279 $x26)))
 (let (($x196 (= ?x63 (_ bv0 32))))
 (let (($x242 (= $x279 $x196)))
 (let (($x227 (and (and (and (and (and $x242 $x238) $x23) $x103) $x184) $x19)))
 (let (($x95 (= $x227 true)))
 (let (($x250 (= (_ bv0 1) ?x25)))
 (let (($x267 (= $x250 true)))
 (let (($x192 (= $x267 true)))
 (let ((?x146 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x122 (bvneg ?x146)))
 (let (($x191 (= ?x122 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x65 (= $x191 true)))
 (let (($x177 (= $x65 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x8 (= (_ bv0 32) ?x101)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x104 $x127)))
 (let (($x77 (and $x100 $x8)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x74 $x77)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x125)))))))
 (let (($x53 (and $x155 $x243)))
 (let (($x173 (= $x53 true)))
 (let (($x199 (= $x173 true)))
 (let (($x324 (= $x199 true)))
 (let (($x78 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x111 (= $x78 true)))
 (let (($x200 (= $x111 true)))
 (let (($x211 (= $x200 true)))
 (let (($x97 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x158 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x6 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x158) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x158))))
 (let (($x9 (and true $x6)))
 (let (($x266 (and $x6 $x9)))
 (let ((?x29 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem ?x29))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv2 32))) ?x295))))
 (let (($x233 (= (bvand ?x57 (_ bv4294967288 32)) ?x57)))
 (let (($x73 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x46 (and $x73 $x233)))
 (let (($x82 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv4 32))) (bvult ?x29 (bvsub ?x29 (_ bv4 32))))))
 (let (($x198 (and (and (and (and (and $x9 $x82) $x73) $x46) $x266) $x97)))
 (let (($x230 (= true $x198)))
 (let (($x88 (not $x315)))
 (let (($x316 (=> $x88 $x230)))
 (let (($x187 (= $x316 true)))
 (let (($x35 (= $x187 true)))
 (let (($x50 (= $x35 true)))
 (let ((?x203 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x94 (= (_ bv0 3) ?x203)))
 (let (($x239 (= $x94 true)))
 (let (($x123 (= $x239 true)))
 (let (($x72 (= $x88 true)))
 (let (($x260 (= $x72 true)))
 (let (($x138 (= $x260 true)))
 (let (($x139 (and $x138 $x123)))
 (let (($x205 (and $x139 $x50)))
 (let (($x234 (and $x205 $x211)))
 (let (($x221 (and $x234 $x324)))
 (let (($x162 (and $x221 $x177)))
 (let (($x166 (and $x162 $x192)))
 (let (($x207 (and $x166 $x95)))
 (let (($x318 (and $x207 $x245)))
 (let (($x55 (and $x52 $x318)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x153 (and $x90 $x55)))
 (let (($x83 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd ?x29 (_ bv3 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x178 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x168 $x83)))))))
 (let (($x13 (=> (and $x88 (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x168 $x83)))))))
 (let (($x62 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x157 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x28 (_ bv1 32))) (or false (or false (and true (or $x107 $x62)))))))
 (let (($x58 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x28 (_ bv1 32)))) (or false (or false (and true (or $x107 $x62)))))))
 (let (($x42 (and $x58 $x13)))
 (let (($x287 (and $x42 $x153)))
 (let (($x188 (=> $x287 $x439)))
 (not $x188)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000001)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000000) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x485b8ab0)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x40000009)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x01) #x40000004 #x00))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x01010101)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x485b8ab3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x485b8ab0)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv80 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv80 32) (_ bv1 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv33554432 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv232 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv232 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv235 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 ((_ extract 0 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x222 ((_ extract 0 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x137 (bvadd ?x222 ?x213)))
 (let (($x304 (= (_ bv0 1) ?x137)))
 (let (($x106 (= $x304 true)))
 (let (($x245 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x5 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x442 (and $x5 $x245)))
 (let (($x60 (not $x442)))
 (let (($x341 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x287 (and $x5 $x341)))
 (let (($x131 (not $x287)))
 (let ((?x218 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x12))))
 (let (($x226 (= (_ bv0 32) ?x309)))
 (let ((?x36 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x36 (_ bv1 32))))
 (let (($x55 (= $x245 $x318)))
 (let (($x153 (=> $x5 $x55)))
 (let (($x21 (= ?x36 (_ bv0 32))))
 (let (($x443 (= $x341 $x21)))
 (let (($x325 (=> $x5 $x443)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x47 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x272 (concat (select input.dst.llvm-mem ?x47) (concat ?x202 (concat ?x34 ?x129)))))
 (let (($x292 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x272)))
 (let (($x236 (=> $x5 $x292)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x247 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x330 (bvuge ?x247 (_ bv1 32))))
 (let (($x244 (= $x5 $x330)))
 (let (($x23 (= false false)))
 (let (($x68 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x99 (=> $x68 $x23)))
 (let (($x102 (= ?x247 (_ bv0 32))))
 (let (($x169 (= $x68 $x102)))
 (let (($x261 (and (and (and (and (and (and $x169 $x99) $x244) $x236) $x325) $x153) $x131)))
 (let (($x59 (and $x261 $x60)))
 (let (($x143 (= $x59 true)))
 (let (($x241 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x190 (and $x151 $x241)))
 (let (($x16 (not $x190)))
 (let (($x128 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x95 (and $x151 $x128)))
 (let (($x207 (not $x95)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x268 (concat ?x10 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x89 (concat ?x312 (concat ?x195 ?x268))))
 (let (($x130 (= (_ bv0 32) ?x89)))
 (let ((?x232 (ite $x130 (_ bv0 32) (_ bv1 32))))
 (let (($x298 (bvuge ?x232 (_ bv1 32))))
 (let (($x19 (= $x241 $x298)))
 (let (($x227 (=> $x151 $x19)))
 (let (($x184 (= ?x232 (_ bv0 32))))
 (let (($x270 (= $x128 $x184)))
 (let (($x22 (=> $x151 $x270)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x39)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x18)))
 (let (($x159 (= input.spec-%var-l-1.2.0 ?x45)))
 (let (($x289 (=> $x151 $x159)))
 (let (($x238 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x79 (ite $x238 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x79 (_ bv1 32))))
 (let (($x51 (= $x151 $x147)))
 (let (($x242 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x293 (=> $x242 $x23)))
 (let (($x296 (= ?x79 (_ bv0 32))))
 (let (($x133 (= $x242 $x296)))
 (let (($x52 (and (and (and (and (and (and $x133 $x293) $x51) $x289) $x22) $x227) $x207)))
 (let (($x334 (and $x52 $x16)))
 (let (($x301 (= $x334 true)))
 (let (($x279 (= (_ bv0 1) ?x222)))
 (let (($x141 (= $x279 true)))
 (let (($x113 (= $x141 true)))
 (let ((?x177 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x177)))
 (let (($x25 (= ?x162 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x250 (= $x25 true)))
 (let (($x267 (= $x250 true)))
 (let ((?x173 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x173)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x8 $x243)))
 (let (($x324 (and $x53 $x199)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x185 $x324)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x172)))))))
 (let (($x317 (and $x101 $x221)))
 (let (($x225 (= $x317 true)))
 (let (($x146 (= $x225 true)))
 (let (($x122 (= $x146 true)))
 (let (($x234 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x167 (= $x234 true)))
 (let (($x193 (= $x167 true)))
 (let (($x43 (= $x193 true)))
 (let (($x97 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x6 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x209 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x6) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x6))))
 (let (($x152 (and true $x209)))
 (let (($x288 (and $x209 $x152)))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x235))))
 (let (($x306 (= (bvand ?x7 (_ bv4294967288 32)) ?x7)))
 (let (($x273 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x266 (and $x273 $x306)))
 (let (($x73 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x35 (and (and (and (and (and $x152 $x73) $x273) $x266) $x288) $x97)))
 (let (($x50 (= true $x35)))
 (let (($x88 (not $x315)))
 (let (($x205 (=> $x88 $x50)))
 (let (($x120 (= $x205 true)))
 (let (($x78 (= $x120 true)))
 (let (($x111 (= $x78 true)))
 (let ((?x139 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x194 (= (_ bv0 3) ?x139)))
 (let (($x158 (= $x194 true)))
 (let (($x70 (= $x158 true)))
 (let (($x203 (= $x88 true)))
 (let (($x94 (= $x203 true)))
 (let (($x239 (= $x94 true)))
 (let (($x278 (and $x239 $x70)))
 (let (($x200 (and $x278 $x111)))
 (let (($x112 (and $x200 $x43)))
 (let (($x136 (and $x112 $x122)))
 (let (($x192 (and $x136 $x267)))
 (let (($x63 (and $x192 $x113)))
 (let (($x186 (and $x63 $x301)))
 (let (($x142 (and $x186 $x143)))
 (let (($x217 (and $x5 $x142)))
 (let (($x260 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x67 (and $x260 $x217)))
 (let (($x276 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd ?x27 (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x90 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x276)))))))
 (let (($x189 (=> (and $x88 (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x41 $x276)))))))
 (let (($x126 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x135 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x218 (_ bv1 32))) (or false (or false (and true (or $x164 $x126)))))))
 (let (($x180 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x218 (_ bv1 32)))) (or false (or false (and true (or $x164 $x126)))))))
 (let (($x54 (and $x180 $x189)))
 (let (($x201 (and $x54 $x67)))
 (let (($x69 (=> $x201 $x106)))
 (not $x69)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 ((_ extract 0 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x222 ((_ extract 0 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x137 (bvadd ?x222 ?x213)))
 (let (($x304 (= (_ bv0 1) ?x137)))
 (let (($x106 (= $x304 true)))
 (let (($x245 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x5 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x442 (and $x5 $x245)))
 (let (($x60 (not $x442)))
 (let (($x341 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x287 (and $x5 $x341)))
 (let (($x131 (not $x287)))
 (let ((?x218 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x12))))
 (let (($x226 (= (_ bv0 32) ?x309)))
 (let ((?x36 (ite $x226 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x36 (_ bv1 32))))
 (let (($x55 (= $x245 $x318)))
 (let (($x153 (=> $x5 $x55)))
 (let (($x21 (= ?x36 (_ bv0 32))))
 (let (($x443 (= $x341 $x21)))
 (let (($x325 (=> $x5 $x443)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x47 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x272 (concat (select input.dst.llvm-mem ?x47) (concat ?x202 (concat ?x34 ?x129)))))
 (let (($x292 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x272)))
 (let (($x236 (=> $x5 $x292)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x247 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x330 (bvuge ?x247 (_ bv1 32))))
 (let (($x244 (= $x5 $x330)))
 (let (($x23 (= false false)))
 (let (($x68 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x99 (=> $x68 $x23)))
 (let (($x102 (= ?x247 (_ bv0 32))))
 (let (($x169 (= $x68 $x102)))
 (let (($x261 (and (and (and (and (and (and $x169 $x99) $x244) $x236) $x325) $x153) $x131)))
 (let (($x59 (and $x261 $x60)))
 (let (($x143 (= $x59 true)))
 (let (($x241 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x190 (and $x151 $x241)))
 (let (($x16 (not $x190)))
 (let (($x128 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x95 (and $x151 $x128)))
 (let (($x207 (not $x95)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x268 (concat ?x10 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x89 (concat ?x312 (concat ?x195 ?x268))))
 (let (($x130 (= (_ bv0 32) ?x89)))
 (let ((?x232 (ite $x130 (_ bv0 32) (_ bv1 32))))
 (let (($x298 (bvuge ?x232 (_ bv1 32))))
 (let (($x19 (= $x241 $x298)))
 (let (($x227 (=> $x151 $x19)))
 (let (($x184 (= ?x232 (_ bv0 32))))
 (let (($x270 (= $x128 $x184)))
 (let (($x22 (=> $x151 $x270)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x39)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x18)))
 (let (($x159 (= input.spec-%var-l-1.2.0 ?x45)))
 (let (($x289 (=> $x151 $x159)))
 (let (($x238 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x79 (ite $x238 (_ bv0 32) (_ bv1 32))))
 (let (($x147 (bvuge ?x79 (_ bv1 32))))
 (let (($x51 (= $x151 $x147)))
 (let (($x242 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x293 (=> $x242 $x23)))
 (let (($x296 (= ?x79 (_ bv0 32))))
 (let (($x133 (= $x242 $x296)))
 (let (($x52 (and (and (and (and (and (and $x133 $x293) $x51) $x289) $x22) $x227) $x207)))
 (let (($x334 (and $x52 $x16)))
 (let (($x301 (= $x334 true)))
 (let (($x279 (= (_ bv0 1) ?x222)))
 (let (($x141 (= $x279 true)))
 (let (($x113 (= $x141 true)))
 (let ((?x177 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x177)))
 (let (($x25 (= ?x162 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x250 (= $x25 true)))
 (let (($x267 (= $x250 true)))
 (let ((?x173 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x199 (= (_ bv0 32) ?x173)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x77)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x8 $x243)))
 (let (($x324 (and $x53 $x199)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x185 $x324)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x155 $x172)))))))
 (let (($x317 (and $x101 $x221)))
 (let (($x225 (= $x317 true)))
 (let (($x146 (= $x225 true)))
 (let (($x122 (= $x146 true)))
 (let (($x234 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x167 (= $x234 true)))
 (let (($x193 (= $x167 true)))
 (let (($x43 (= $x193 true)))
 (let (($x97 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x6 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x209 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x6) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x6))))
 (let (($x152 (and true $x209)))
 (let (($x288 (and $x209 $x152)))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x235))))
 (let (($x306 (= (bvand ?x7 (_ bv4294967288 32)) ?x7)))
 (let (($x273 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x266 (and $x273 $x306)))
 (let (($x73 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x35 (and (and (and (and (and $x152 $x73) $x273) $x266) $x288) $x97)))
 (let (($x50 (= true $x35)))
 (let (($x88 (not $x315)))
 (let (($x205 (=> $x88 $x50)))
 (let (($x120 (= $x205 true)))
 (let (($x78 (= $x120 true)))
 (let (($x111 (= $x78 true)))
 (let ((?x139 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x194 (= (_ bv0 3) ?x139)))
 (let (($x158 (= $x194 true)))
 (let (($x70 (= $x158 true)))
 (let (($x203 (= $x88 true)))
 (let (($x94 (= $x203 true)))
 (let (($x239 (= $x94 true)))
 (let (($x278 (and $x239 $x70)))
 (let (($x200 (and $x278 $x111)))
 (let (($x112 (and $x200 $x43)))
 (let (($x136 (and $x112 $x122)))
 (let (($x192 (and $x136 $x267)))
 (let (($x63 (and $x192 $x113)))
 (let (($x186 (and $x63 $x301)))
 (let (($x142 (and $x186 $x143)))
 (let (($x217 (and $x5 $x142)))
 (let (($x260 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x67 (and $x260 $x217)))
 (let (($x276 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd ?x27 (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x90 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x276)))))))
 (let (($x189 (=> (and $x88 (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x41 $x276)))))))
 (let (($x126 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x135 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x218 (_ bv1 32))) (or false (or false (and true (or $x164 $x126)))))))
 (let (($x180 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x218 (_ bv1 32)))) (or false (or false (and true (or $x164 $x126)))))))
 (let (($x54 (and $x180 $x189)))
 (let (($x201 (and $x54 $x67)))
 (let (($x69 (=> $x201 $x106)))
 (not $x69)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 ((_ extract 0 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x196 ((_ extract 0 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x140 (bvadd ?x196 ?x240)))
 (let (($x327 (= (_ bv0 1) ?x140)))
 (let (($x56 (= $x327 true)))
 (let ((?x107 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x71))))
 (let ((?x66 (bvadd ?x254 (_ bv4 32))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem ?x66))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv2 32))) ?x212))))
 (let (($x338 (= (_ bv0 32) ?x249)))
 (let ((?x269 (ite $x338 (_ bv0 32) (_ bv1 32))))
 (let (($x275 (= ?x269 (_ bv0 32))))
 (let (($x252 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x84 (= $x252 $x275)))
 (let (($x115 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x123 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x328 (and $x123 $x115)))
 (let (($x144 (=> $x328 $x84)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x336 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x253))))
 (let (($x311 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x336)))
 (let (($x119 (=> $x328 $x311)))
 (let (($x314 (bvuge ?x269 (_ bv1 32))))
 (let (($x108 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x326 (= $x108 $x314)))
 (let (($x308 (=> $x328 $x326)))
 (let (($x51 (= false false)))
 (let (($x106 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x263 (and $x123 $x106)))
 (let (($x320 (=> $x263 $x51)))
 (let (($x171 (= (_ bv0 32) ?x254)))
 (let ((?x294 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x340 (bvuge ?x294 (_ bv1 32))))
 (let (($x444 (= $x115 $x340)))
 (let (($x445 (=> $x123 $x444)))
 (let (($x333 (= ?x294 (_ bv0 32))))
 (let (($x286 (= $x106 $x333)))
 (let (($x251 (=> $x123 $x286)))
 (let ((?x261 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x48 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x48) (concat ?x142 (concat ?x60 ?x261)))))
 (let (($x213 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x201)))
 (let (($x137 (=> $x123 $x213)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x245 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x245 (_ bv1 32))))
 (let (($x287 (= $x123 $x258)))
 (let (($x117 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x153 (=> $x117 $x51)))
 (let (($x318 (= ?x245 (_ bv0 32))))
 (let (($x55 (= $x117 $x318)))
 (let (($x49 (and (and (and (and (and (and $x55 $x153) $x287) $x137) $x251) $x445) $x320)))
 (let (($x116 (and (and (and $x49 $x308) $x119) $x144)))
 (let (($x283 (= $x116 true)))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x10 (concat ?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x232 (concat ?x130 (concat ?x268 ?x10))))
 (let ((?x188 (bvadd ?x232 (_ bv4 32))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x202))))
 (let (($x292 (= (_ bv0 32) ?x272)))
 (let ((?x236 (ite $x292 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x236 (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x183 (= $x215 $x174)))
 (let (($x298 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x216 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x52 (and $x216 $x298)))
 (let (($x37 (=> $x52 $x183)))
 (let (($x86 (= ?x236 (_ bv0 32))))
 (let (($x244 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x228 (= $x244 $x86)))
 (let (($x341 (=> $x52 $x228)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x186))))
 (let (($x439 (= input.spec-%var-l-1.2.1.2.0 ?x99)))
 (let (($x5 (=> $x52 $x439)))
 (let (($x31 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x95 (and $x216 $x31)))
 (let (($x207 (=> $x95 $x51)))
 (let (($x184 (= (_ bv0 32) ?x232)))
 (let ((?x270 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x270 (_ bv1 32))))
 (let (($x227 (= $x298 $x19)))
 (let (($x179 (=> $x216 $x227)))
 (let (($x22 (= ?x270 (_ bv0 32))))
 (let (($x124 (= $x31 $x22)))
 (let (($x241 (=> $x216 $x124)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x149)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x45)))
 (let (($x33 (= input.spec-%var-l-1.2.0 ?x160)))
 (let (($x128 (=> $x216 $x33)))
 (let (($x293 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x165 (ite $x293 (_ bv0 32) (_ bv1 32))))
 (let (($x255 (bvuge ?x165 (_ bv1 32))))
 (let (($x103 (= $x216 $x255)))
 (let (($x133 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x30 (=> $x133 $x51)))
 (let (($x151 (= ?x165 (_ bv0 32))))
 (let (($x147 (= $x133 $x151)))
 (let (($x309 (and (and (and (and (and (and $x147 $x30) $x103) $x128) $x241) $x179) $x207)))
 (let (($x21 (and (and (and $x309 $x5) $x341) $x37)))
 (let (($x443 (= $x21 true)))
 (let (($x242 (= (_ bv0 1) ?x196)))
 (let (($x26 (= $x242 true)))
 (let (($x238 (= $x26 true)))
 (let ((?x267 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x267)))
 (let (($x222 (= ?x192 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x279 (= $x222 true)))
 (let (($x141 (= $x279 true)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x225)))
 (let ((?x324 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x324)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x317 (and $x199 $x221)))
 (let (($x122 (and $x317 $x146)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x74 $x122)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x101 $x125)))))))
 (let (($x191 (and $x173 $x136)))
 (let (($x65 (= $x191 true)))
 (let (($x177 (= $x65 true)))
 (let (($x162 (= $x177 true)))
 (let (($x112 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x121 (= $x112 true)))
 (let (($x237 (= $x121 true)))
 (let (($x100 (= $x237 true)))
 (let (($x97 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x209 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x229 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x209) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x209))))
 (let (($x208 (and true $x229)))
 (let (($x187 (and $x229 $x208)))
 (let ((?x134 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x277))))
 (let (($x316 (= (bvand ?x46 (_ bv4294967288 32)) ?x46)))
 (let (($x297 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x288 (and $x297 $x316)))
 (let (($x273 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv4 32))) (bvult ?x134 (bvsub ?x134 (_ bv4 32))))))
 (let (($x78 (and (and (and (and (and $x208 $x273) $x297) $x288) $x187) $x97)))
 (let (($x111 (= true $x78)))
 (let (($x88 (not $x315)))
 (let (($x200 (=> $x88 $x111)))
 (let (($x211 (= $x200 true)))
 (let (($x234 (= $x211 true)))
 (let (($x167 (= $x234 true)))
 (let ((?x278 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x9 (= (_ bv0 3) ?x278)))
 (let (($x6 (= $x9 true)))
 (let (($x265 (= $x6 true)))
 (let (($x139 (= $x88 true)))
 (let (($x194 (= $x139 true)))
 (let (($x158 (= $x194 true)))
 (let (($x284 (and $x158 $x265)))
 (let (($x193 (and $x284 $x167)))
 (let (($x182 (and $x193 $x100)))
 (let (($x291 (and $x182 $x162)))
 (let (($x113 (and $x291 $x141)))
 (let (($x79 (and $x113 $x238)))
 (let (($x325 (and $x79 $x443)))
 (let (($x440 (and $x325 $x283)))
 (let (($x163 (and $x123 $x440)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x321 (and $x94 $x163)))
 (let (($x13 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd ?x134 (_ bv3 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x260 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x178 $x13)))))))
 (let (($x181 (=> (and $x88 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x178 $x13)))))))
 (let (($x58 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x83 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x107 (_ bv1 32))) (or false (or false (and true (or $x157 $x58)))))))
 (let (($x85 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x107 (_ bv1 32)))) (or false (or false (and true (or $x157 $x58)))))))
 (let (($x175 (and $x85 $x181)))
 (let (($x32 (and $x175 $x321)))
 (let (($x96 (=> $x32 $x56)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 ((_ extract 0 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x196 ((_ extract 0 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x140 (bvadd ?x196 ?x240)))
 (let (($x327 (= (_ bv0 1) ?x140)))
 (let (($x56 (= $x327 true)))
 (let ((?x107 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x71))))
 (let ((?x66 (bvadd ?x254 (_ bv4 32))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem ?x66))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv2 32))) ?x212))))
 (let (($x338 (= (_ bv0 32) ?x249)))
 (let ((?x269 (ite $x338 (_ bv0 32) (_ bv1 32))))
 (let (($x275 (= ?x269 (_ bv0 32))))
 (let (($x252 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x84 (= $x252 $x275)))
 (let (($x115 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x123 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x328 (and $x123 $x115)))
 (let (($x144 (=> $x328 $x84)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x336 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x253))))
 (let (($x311 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x336)))
 (let (($x119 (=> $x328 $x311)))
 (let (($x314 (bvuge ?x269 (_ bv1 32))))
 (let (($x108 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x326 (= $x108 $x314)))
 (let (($x308 (=> $x328 $x326)))
 (let (($x51 (= false false)))
 (let (($x106 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x263 (and $x123 $x106)))
 (let (($x320 (=> $x263 $x51)))
 (let (($x171 (= (_ bv0 32) ?x254)))
 (let ((?x294 (ite $x171 (_ bv0 32) (_ bv1 32))))
 (let (($x340 (bvuge ?x294 (_ bv1 32))))
 (let (($x444 (= $x115 $x340)))
 (let (($x445 (=> $x123 $x444)))
 (let (($x333 (= ?x294 (_ bv0 32))))
 (let (($x286 (= $x106 $x333)))
 (let (($x251 (=> $x123 $x286)))
 (let ((?x261 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x48 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x201 (concat (select input.dst.llvm-mem ?x48) (concat ?x142 (concat ?x60 ?x261)))))
 (let (($x213 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x201)))
 (let (($x137 (=> $x123 $x213)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x245 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x245 (_ bv1 32))))
 (let (($x287 (= $x123 $x258)))
 (let (($x117 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x153 (=> $x117 $x51)))
 (let (($x318 (= ?x245 (_ bv0 32))))
 (let (($x55 (= $x117 $x318)))
 (let (($x49 (and (and (and (and (and (and $x55 $x153) $x287) $x137) $x251) $x445) $x320)))
 (let (($x116 (and (and (and $x49 $x308) $x119) $x144)))
 (let (($x283 (= $x116 true)))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x10 (concat ?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x232 (concat ?x130 (concat ?x268 ?x10))))
 (let ((?x188 (bvadd ?x232 (_ bv4 32))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x202))))
 (let (($x292 (= (_ bv0 32) ?x272)))
 (let ((?x236 (ite $x292 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x236 (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x183 (= $x215 $x174)))
 (let (($x298 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x216 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x52 (and $x216 $x298)))
 (let (($x37 (=> $x52 $x183)))
 (let (($x86 (= ?x236 (_ bv0 32))))
 (let (($x244 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x228 (= $x244 $x86)))
 (let (($x341 (=> $x52 $x228)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x186))))
 (let (($x439 (= input.spec-%var-l-1.2.1.2.0 ?x99)))
 (let (($x5 (=> $x52 $x439)))
 (let (($x31 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x95 (and $x216 $x31)))
 (let (($x207 (=> $x95 $x51)))
 (let (($x184 (= (_ bv0 32) ?x232)))
 (let ((?x270 (ite $x184 (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x270 (_ bv1 32))))
 (let (($x227 (= $x298 $x19)))
 (let (($x179 (=> $x216 $x227)))
 (let (($x22 (= ?x270 (_ bv0 32))))
 (let (($x124 (= $x31 $x22)))
 (let (($x241 (=> $x216 $x124)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x149)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x45)))
 (let (($x33 (= input.spec-%var-l-1.2.0 ?x160)))
 (let (($x128 (=> $x216 $x33)))
 (let (($x293 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x165 (ite $x293 (_ bv0 32) (_ bv1 32))))
 (let (($x255 (bvuge ?x165 (_ bv1 32))))
 (let (($x103 (= $x216 $x255)))
 (let (($x133 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x30 (=> $x133 $x51)))
 (let (($x151 (= ?x165 (_ bv0 32))))
 (let (($x147 (= $x133 $x151)))
 (let (($x309 (and (and (and (and (and (and $x147 $x30) $x103) $x128) $x241) $x179) $x207)))
 (let (($x21 (and (and (and $x309 $x5) $x341) $x37)))
 (let (($x443 (= $x21 true)))
 (let (($x242 (= (_ bv0 1) ?x196)))
 (let (($x26 (= $x242 true)))
 (let (($x238 (= $x26 true)))
 (let ((?x267 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x267)))
 (let (($x222 (= ?x192 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x279 (= $x222 true)))
 (let (($x141 (= $x279 true)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x225)))
 (let ((?x324 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x324)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x317 (and $x199 $x221)))
 (let (($x122 (and $x317 $x146)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x74 $x122)))
 (let (($x125 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x101 $x125)))))))
 (let (($x191 (and $x173 $x136)))
 (let (($x65 (= $x191 true)))
 (let (($x177 (= $x65 true)))
 (let (($x162 (= $x177 true)))
 (let (($x112 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x121 (= $x112 true)))
 (let (($x237 (= $x121 true)))
 (let (($x100 (= $x237 true)))
 (let (($x97 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x209 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x229 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x209) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x209))))
 (let (($x208 (and true $x229)))
 (let (($x187 (and $x229 $x208)))
 (let ((?x134 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x277))))
 (let (($x316 (= (bvand ?x46 (_ bv4294967288 32)) ?x46)))
 (let (($x297 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x288 (and $x297 $x316)))
 (let (($x273 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv4 32))) (bvult ?x134 (bvsub ?x134 (_ bv4 32))))))
 (let (($x78 (and (and (and (and (and $x208 $x273) $x297) $x288) $x187) $x97)))
 (let (($x111 (= true $x78)))
 (let (($x88 (not $x315)))
 (let (($x200 (=> $x88 $x111)))
 (let (($x211 (= $x200 true)))
 (let (($x234 (= $x211 true)))
 (let (($x167 (= $x234 true)))
 (let ((?x278 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x9 (= (_ bv0 3) ?x278)))
 (let (($x6 (= $x9 true)))
 (let (($x265 (= $x6 true)))
 (let (($x139 (= $x88 true)))
 (let (($x194 (= $x139 true)))
 (let (($x158 (= $x194 true)))
 (let (($x284 (and $x158 $x265)))
 (let (($x193 (and $x284 $x167)))
 (let (($x182 (and $x193 $x100)))
 (let (($x291 (and $x182 $x162)))
 (let (($x113 (and $x291 $x141)))
 (let (($x79 (and $x113 $x238)))
 (let (($x325 (and $x79 $x443)))
 (let (($x440 (and $x325 $x283)))
 (let (($x163 (and $x123 $x440)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x321 (and $x94 $x163)))
 (let (($x13 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd ?x134 (_ bv3 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x260 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x178 $x13)))))))
 (let (($x181 (=> (and $x88 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x178 $x13)))))))
 (let (($x58 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x83 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x107 (_ bv1 32))) (or false (or false (and true (or $x157 $x58)))))))
 (let (($x85 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x107 (_ bv1 32)))) (or false (or false (and true (or $x157 $x58)))))))
 (let (($x175 (and $x85 $x181)))
 (let (($x32 (and $x175 $x321)))
 (let (($x96 (=> $x32 $x56)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000001)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000000) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xccf1a13c)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xfd)
                                #x08000007
                                #xff)
                         #xfffffffc
                         #x7f)
                  #x00000002
                  #xff)))
(let ((a!2 (store (store (store (store a!1 #xffffffff #x7f) #x00000001 #xff)
                         #xfffffffe
                         #x7f)
                  #x80000003
                  #x7f)))
(let ((a!3 (store (store (store (store a!2 #x08000000 #x7f) #x80000004 #x7f)
                         #x80000002
                         #xff)
                  #x08000005
                  #xff)))
(let ((a!4 (store (store (store (store a!3 #x08000006 #xff) #xfffffffd #xff)
                         #x80000001
                         #x7f)
                  #x08000004
                  #xf8)))
  (store a!4 #x00000003 #x7f))))))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x7f7fff7f)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #xfdfdfd7f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xccf1a13f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xccf1a13c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x231 ((_ extract 0 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x296 ((_ extract 0 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x110 (bvadd ?x296 ?x231)))
 (let (($x257 (= (_ bv0 1) ?x110)))
 (let (($x148 (= $x257 true)))
 (let (($x335 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x263 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x70 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x66 (and $x70 $x263)))
 (let (($x163 (and $x66 $x335)))
 (let (($x321 (not $x163)))
 (let (($x275 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x283 (and $x66 $x275)))
 (let (($x440 (not $x283)))
 (let ((?x164 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x254))))
 (let ((?x342 (bvadd ?x299 (_ bv4 32))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv1 32))) (select input.dst.llvm-mem ?x342))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv2 32))) ?x331))))
 (let (($x326 (= (_ bv0 32) ?x314)))
 (let ((?x308 (ite $x326 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (= ?x308 (_ bv0 32))))
 (let (($x144 (= $x275 $x84)))
 (let (($x116 (=> $x66 $x144)))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x264))))
 (let (($x224 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x119)))
 (let (($x252 (=> $x66 $x224)))
 (let (($x11 (bvuge ?x308 (_ bv1 32))))
 (let (($x332 (= $x335 $x11)))
 (let (($x310 (=> $x66 $x332)))
 (let (($x103 (= false false)))
 (let (($x40 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x204 (and $x70 $x40)))
 (let (($x108 (=> $x204 $x103)))
 (let (($x115 (= (_ bv0 32) ?x299)))
 (let ((?x340 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x320 (bvuge ?x340 (_ bv1 32))))
 (let (($x49 (= $x263 $x320)))
 (let (($x328 (=> $x70 $x49)))
 (let (($x444 (= ?x340 (_ bv0 32))))
 (let (($x445 (= $x40 $x444)))
 (let (($x302 (=> $x70 $x445)))
 (let ((?x217 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x29 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x80 (concat (select input.dst.llvm-mem ?x29) (concat ?x304 (concat ?x213 ?x217)))))
 (let (($x64 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x80)))
 (let (($x20 (=> $x70 $x64)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x60 (bvuge ?x67 (_ bv1 32))))
 (let (($x261 (= $x70 $x60)))
 (let (($x131 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x442 (=> $x131 $x103)))
 (let (($x143 (= ?x67 (_ bv0 32))))
 (let (($x142 (= $x131 $x143)))
 (let (($x96 (and (and (and (and (and (and $x142 $x442) $x261) $x20) $x302) $x328) $x108)))
 (let (($x344 (and (and (and (and (and $x96 $x310) $x252) $x116) $x440) $x321)))
 (let (($x446 (= $x344 true)))
 (let (($x226 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x19 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x156 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x309 (and $x156 $x19)))
 (let (($x37 (and $x309 $x226)))
 (let (($x21 (not $x37)))
 (let (($x228 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x174 (and $x309 $x228)))
 (let (($x183 (not $x174)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x285 (concat ?x195 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x270 (concat ?x184 (concat ?x10 ?x285))))
 (let ((?x330 (bvadd ?x270 (_ bv4 32))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x330 (_ bv1 32))) (select input.dst.llvm-mem ?x330))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x330 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x330 (_ bv2 32))) ?x307))))
 (let (($x129 (= (_ bv0 32) ?x202)))
 (let ((?x272 (ite $x129 (_ bv0 32) (_ bv1 32))))
 (let (($x341 (bvuge ?x272 (_ bv1 32))))
 (let (($x36 (= $x228 $x341)))
 (let (($x215 (=> $x309 $x36)))
 (let (($x292 (= ?x272 (_ bv0 32))))
 (let (($x236 (= $x226 $x292)))
 (let (($x86 (=> $x309 $x236)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem ?x270))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv2 32))) ?x138))))
 (let (($x99 (= input.spec-%var-l-1.2.1.2.0 ?x247)))
 (let (($x439 (=> $x309 $x99)))
 (let (($x89 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x95 (and $x156 $x89)))
 (let (($x207 (=> $x95 $x103)))
 (let (($x22 (= (_ bv0 32) ?x270)))
 (let ((?x124 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x227 (bvuge ?x124 (_ bv1 32))))
 (let (($x179 (= $x19 $x227)))
 (let (($x441 (=> $x156 $x179)))
 (let (($x241 (= ?x124 (_ bv0 32))))
 (let (($x12 (= $x89 $x241)))
 (let (($x298 (=> $x156 $x12)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x132)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x160)))
 (let (($x24 (= input.spec-%var-l-1.2.0 ?x259)))
 (let (($x31 (=> $x156 $x24)))
 (let (($x30 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x322 (ite $x30 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x322 (_ bv1 32))))
 (let (($x289 (= $x156 $x159)))
 (let (($x147 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x305 (=> $x147 $x103)))
 (let (($x216 (= ?x322 (_ bv0 32))))
 (let (($x255 (= $x147 $x216)))
 (let (($x318 (and (and (and (and (and (and $x255 $x305) $x289) $x31) $x298) $x441) $x207)))
 (let (($x258 (and (and (and (and (and $x318 $x439) $x86) $x215) $x183) $x21)))
 (let (($x287 (= $x258 true)))
 (let (($x133 (= (_ bv0 1) ?x296)))
 (let (($x23 (= $x133 true)))
 (let (($x293 (= $x23 true)))
 (let ((?x141 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x141)))
 (let (($x196 (= ?x113 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x242 (= $x196 true)))
 (let (($x26 (= $x242 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x65)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (and $x146 $x136)))
 (let (($x162 (and $x191 $x177)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (and $x185 $x162)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x225 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x172)))))))
 (let (($x25 (and $x225 $x291)))
 (let (($x250 (= $x25 true)))
 (let (($x267 (= $x250 true)))
 (let (($x192 (= $x267 true)))
 (let (($x182 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x104 (= $x182 true)))
 (let (($x220 (= $x104 true)))
 (let (($x53 (= $x220 true)))
 (let (($x97 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x229 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x229) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x229))))
 (let (($x81 (and true $x176)))
 (let (($x120 (and $x176 $x81)))
 (let ((?x168 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x61))))
 (let (($x205 (= (bvand ?x266 (_ bv4294967288 32)) ?x266)))
 (let (($x233 (= (bvand ?x168 (_ bv4294967292 32)) ?x168)))
 (let (($x187 (and $x233 $x205)))
 (let (($x297 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x168 (bvsub ?x168 (_ bv4 32))) (bvult ?x168 (bvsub ?x168 (_ bv4 32))))))
 (let (($x234 (and (and (and (and (and $x81 $x297) $x233) $x187) $x120) $x97)))
 (let (($x167 (= true $x234)))
 (let (($x88 (not $x315)))
 (let (($x193 (=> $x88 $x167)))
 (let (($x43 (= $x193 true)))
 (let (($x112 (= $x43 true)))
 (let (($x121 (= $x112 true)))
 (let ((?x284 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x152 (= (_ bv0 3) ?x284)))
 (let (($x209 (= $x152 true)))
 (let (($x280 (= $x209 true)))
 (let (($x278 (= $x88 true)))
 (let (($x9 (= $x278 true)))
 (let (($x6 (= $x9 true)))
 (let (($x82 (and $x6 $x280)))
 (let (($x237 (and $x82 $x121)))
 (let (($x127 (and $x237 $x53)))
 (let (($x166 (and $x127 $x192)))
 (let (($x238 (and $x166 $x26)))
 (let (($x165 (and $x238 $x293)))
 (let (($x300 (and $x165 $x287)))
 (let (($x345 (and $x300 $x446)))
 (let (($x346 (and $x70 $x345)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x161 (and $x194 $x346)))
 (let (($x189 (bvugt ?x168 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd ?x168 (_ bv3 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x94 (=> (bvule ?x168 (bvsub (bvadd ?x168 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x189)))))))
 (let (($x72 (=> (and $x88 (bvule ?x168 (bvsub (bvadd ?x168 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x90 $x189)))))))
 (let (($x180 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x276 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x164 (_ bv1 32))) (or false (or false (and true (or $x135 $x180)))))))
 (let (($x47 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x164 (_ bv1 32)))) (or false (or false (and true (or $x135 $x180)))))))
 (let (($x109 (and $x47 $x72)))
 (let (($x447 (and $x109 $x161)))
 (let (($x118 (=> $x447 $x148)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x231 ((_ extract 0 0) input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x296 ((_ extract 0 0) input.spec-%var-sum-0.L3%5%bbentry)))
 (let ((?x110 (bvadd ?x296 ?x231)))
 (let (($x257 (= (_ bv0 1) ?x110)))
 (let (($x148 (= $x257 true)))
 (let (($x335 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x263 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x70 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x66 (and $x70 $x263)))
 (let (($x163 (and $x66 $x335)))
 (let (($x321 (not $x163)))
 (let (($x275 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x283 (and $x66 $x275)))
 (let (($x440 (not $x283)))
 (let ((?x164 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x254))))
 (let ((?x342 (bvadd ?x299 (_ bv4 32))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv1 32))) (select input.dst.llvm-mem ?x342))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv2 32))) ?x331))))
 (let (($x326 (= (_ bv0 32) ?x314)))
 (let ((?x308 (ite $x326 (_ bv0 32) (_ bv1 32))))
 (let (($x84 (= ?x308 (_ bv0 32))))
 (let (($x144 (= $x275 $x84)))
 (let (($x116 (=> $x66 $x144)))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x264))))
 (let (($x224 (= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 ?x119)))
 (let (($x252 (=> $x66 $x224)))
 (let (($x11 (bvuge ?x308 (_ bv1 32))))
 (let (($x332 (= $x335 $x11)))
 (let (($x310 (=> $x66 $x332)))
 (let (($x103 (= false false)))
 (let (($x40 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x204 (and $x70 $x40)))
 (let (($x108 (=> $x204 $x103)))
 (let (($x115 (= (_ bv0 32) ?x299)))
 (let ((?x340 (ite $x115 (_ bv0 32) (_ bv1 32))))
 (let (($x320 (bvuge ?x340 (_ bv1 32))))
 (let (($x49 (= $x263 $x320)))
 (let (($x328 (=> $x70 $x49)))
 (let (($x444 (= ?x340 (_ bv0 32))))
 (let (($x445 (= $x40 $x444)))
 (let (($x302 (=> $x70 $x445)))
 (let ((?x217 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x29 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x80 (concat (select input.dst.llvm-mem ?x29) (concat ?x304 (concat ?x213 ?x217)))))
 (let (($x64 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x80)))
 (let (($x20 (=> $x70 $x64)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x67 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x60 (bvuge ?x67 (_ bv1 32))))
 (let (($x261 (= $x70 $x60)))
 (let (($x131 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x442 (=> $x131 $x103)))
 (let (($x143 (= ?x67 (_ bv0 32))))
 (let (($x142 (= $x131 $x143)))
 (let (($x96 (and (and (and (and (and (and $x142 $x442) $x261) $x20) $x302) $x328) $x108)))
 (let (($x344 (and (and (and (and (and $x96 $x310) $x252) $x116) $x440) $x321)))
 (let (($x446 (= $x344 true)))
 (let (($x226 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x19 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x156 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x309 (and $x156 $x19)))
 (let (($x37 (and $x309 $x226)))
 (let (($x21 (not $x37)))
 (let (($x228 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x174 (and $x309 $x228)))
 (let (($x183 (not $x174)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x285 (concat ?x195 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x270 (concat ?x184 (concat ?x10 ?x285))))
 (let ((?x330 (bvadd ?x270 (_ bv4 32))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x330 (_ bv1 32))) (select input.dst.llvm-mem ?x330))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x330 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x330 (_ bv2 32))) ?x307))))
 (let (($x129 (= (_ bv0 32) ?x202)))
 (let ((?x272 (ite $x129 (_ bv0 32) (_ bv1 32))))
 (let (($x341 (bvuge ?x272 (_ bv1 32))))
 (let (($x36 (= $x228 $x341)))
 (let (($x215 (=> $x309 $x36)))
 (let (($x292 (= ?x272 (_ bv0 32))))
 (let (($x236 (= $x226 $x292)))
 (let (($x86 (=> $x309 $x236)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem ?x270))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv2 32))) ?x138))))
 (let (($x99 (= input.spec-%var-l-1.2.1.2.0 ?x247)))
 (let (($x439 (=> $x309 $x99)))
 (let (($x89 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x95 (and $x156 $x89)))
 (let (($x207 (=> $x95 $x103)))
 (let (($x22 (= (_ bv0 32) ?x270)))
 (let ((?x124 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x227 (bvuge ?x124 (_ bv1 32))))
 (let (($x179 (= $x19 $x227)))
 (let (($x441 (=> $x156 $x179)))
 (let (($x241 (= ?x124 (_ bv0 32))))
 (let (($x12 (= $x89 $x241)))
 (let (($x298 (=> $x156 $x12)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x132)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x160)))
 (let (($x24 (= input.spec-%var-l-1.2.0 ?x259)))
 (let (($x31 (=> $x156 $x24)))
 (let (($x30 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x322 (ite $x30 (_ bv0 32) (_ bv1 32))))
 (let (($x159 (bvuge ?x322 (_ bv1 32))))
 (let (($x289 (= $x156 $x159)))
 (let (($x147 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x305 (=> $x147 $x103)))
 (let (($x216 (= ?x322 (_ bv0 32))))
 (let (($x255 (= $x147 $x216)))
 (let (($x318 (and (and (and (and (and (and $x255 $x305) $x289) $x31) $x298) $x441) $x207)))
 (let (($x258 (and (and (and (and (and $x318 $x439) $x86) $x215) $x183) $x21)))
 (let (($x287 (= $x258 true)))
 (let (($x133 (= (_ bv0 1) ?x296)))
 (let (($x23 (= $x133 true)))
 (let (($x293 (= $x23 true)))
 (let ((?x141 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x141)))
 (let (($x196 (= ?x113 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x242 (= $x196 true)))
 (let (($x26 (= $x242 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x65)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (and $x146 $x136)))
 (let (($x162 (and $x191 $x177)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (and $x185 $x162)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x225 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x172)))))))
 (let (($x25 (and $x225 $x291)))
 (let (($x250 (= $x25 true)))
 (let (($x267 (= $x250 true)))
 (let (($x192 (= $x267 true)))
 (let (($x182 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x104 (= $x182 true)))
 (let (($x220 (= $x104 true)))
 (let (($x53 (= $x220 true)))
 (let (($x97 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x229 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x176 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x229) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x229))))
 (let (($x81 (and true $x176)))
 (let (($x120 (and $x176 $x81)))
 (let ((?x168 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x61))))
 (let (($x205 (= (bvand ?x266 (_ bv4294967288 32)) ?x266)))
 (let (($x233 (= (bvand ?x168 (_ bv4294967292 32)) ?x168)))
 (let (($x187 (and $x233 $x205)))
 (let (($x297 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x168 (bvsub ?x168 (_ bv4 32))) (bvult ?x168 (bvsub ?x168 (_ bv4 32))))))
 (let (($x234 (and (and (and (and (and $x81 $x297) $x233) $x187) $x120) $x97)))
 (let (($x167 (= true $x234)))
 (let (($x88 (not $x315)))
 (let (($x193 (=> $x88 $x167)))
 (let (($x43 (= $x193 true)))
 (let (($x112 (= $x43 true)))
 (let (($x121 (= $x112 true)))
 (let ((?x284 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x152 (= (_ bv0 3) ?x284)))
 (let (($x209 (= $x152 true)))
 (let (($x280 (= $x209 true)))
 (let (($x278 (= $x88 true)))
 (let (($x9 (= $x278 true)))
 (let (($x6 (= $x9 true)))
 (let (($x82 (and $x6 $x280)))
 (let (($x237 (and $x82 $x121)))
 (let (($x127 (and $x237 $x53)))
 (let (($x166 (and $x127 $x192)))
 (let (($x238 (and $x166 $x26)))
 (let (($x165 (and $x238 $x293)))
 (let (($x300 (and $x165 $x287)))
 (let (($x345 (and $x300 $x446)))
 (let (($x346 (and $x70 $x345)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x161 (and $x194 $x346)))
 (let (($x189 (bvugt ?x168 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd ?x168 (_ bv3 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x94 (=> (bvule ?x168 (bvsub (bvadd ?x168 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x90 $x189)))))))
 (let (($x72 (=> (and $x88 (bvule ?x168 (bvsub (bvadd ?x168 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x90 $x189)))))))
 (let (($x180 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x276 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x164 (_ bv1 32))) (or false (or false (and true (or $x135 $x180)))))))
 (let (($x47 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x164 (_ bv1 32)))) (or false (or false (and true (or $x135 $x180)))))))
 (let (($x109 (and $x47 $x72)))
 (let (($x447 (and $x109 $x161)))
 (let (($x118 (=> $x447 $x148)))
 (not $x118)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%var-l-0.L3%5%bbentry.2.0 #b00000000000000000000000000000001)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000111)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b10000000000000000000000000000000) #b00000001)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483656 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483659 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff4)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff9)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x7403f008)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x7403f008 #x5d))
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x0000005d)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff4)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x243))))
 (let (($x131 (bvule ?x221 (_ bv4294967294 32))))
 (let (($x67 (= $x131 true)))
 (let (($x143 (= $x67 true)))
 (let ((?x157 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x188))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x341 (bvuge ?x292 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x36 (= $x228 $x341)))
 (let (($x265 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x215 (=> $x265 $x36)))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x265 $x86)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x27 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x55 (concat (select input.dst.llvm-mem ?x27) (concat ?x247 (concat ?x190 ?x102)))))
 (let (($x5 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x55)))
 (let (($x226 (=> $x265 $x5)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x318 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x186 (bvuge ?x318 (_ bv1 32))))
 (let (($x68 (= $x265 $x186)))
 (let (($x255 (= false false)))
 (let (($x207 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x16 (=> $x207 $x255)))
 (let (($x309 (= ?x318 (_ bv0 32))))
 (let (($x52 (= $x207 $x309)))
 (let (($x37 (and (and (and (and (and $x52 $x16) $x68) $x226) $x153) $x215)))
 (let (($x21 (= $x37 true)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x130 (concat ?x89 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x195 (concat ?x268 (concat ?x184 ?x130))))
 (let (($x214 (= (_ bv0 32) ?x195)))
 (let ((?x285 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x241 (bvuge ?x285 (_ bv1 32))))
 (let (($x124 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x12 (= $x124 $x241)))
 (let (($x305 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x298 (=> $x305 $x12)))
 (let (($x290 (= ?x285 (_ bv0 32))))
 (let (($x24 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x270 (= $x24 $x290)))
 (let (($x22 (=> $x305 $x270)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x33)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x45)))
 (let (($x132 (= input.spec-%var-l-1.2.0 ?x18)))
 (let (($x160 (=> $x305 $x132)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x30 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x443 (bvuge ?x30 (_ bv1 32))))
 (let (($x156 (= $x305 $x443)))
 (let (($x151 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x103 (=> $x151 $x255)))
 (let (($x322 (= ?x30 (_ bv0 32))))
 (let (($x216 (= $x151 $x322)))
 (let (($x441 (and (and (and (and (and $x216 $x103) $x156) $x160) $x22) $x298)))
 (let (($x245 (= $x441 true)))
 (let ((?x79 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x296 (= (_ bv0 3) ?x79)))
 (let (($x133 (= $x296 true)))
 (let (($x23 (= $x133 true)))
 (let (($x113 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x63 (= $x113 true)))
 (let (($x196 (= $x63 true)))
 (let (($x242 (= $x196 true)))
 (let (($x191 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x170 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x193 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x170) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x170))))
 (let (($x43 (and true $x193)))
 (let (($x122 (and $x193 $x43)))
 (let (($x185 (= (bvand ?x221 (_ bv4294967288 32)) ?x221)))
 (let (($x53 (= (bvand ?x41 (_ bv4294967292 32)) ?x41)))
 (let (($x146 (and $x53 $x185)))
 (let (($x182 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x41 (bvsub ?x41 (_ bv4 32))) (bvult ?x41 (bvsub ?x41 (_ bv4 32))))))
 (let (($x25 (and (and (and (and (and $x43 $x182) $x53) $x146) $x122) $x191)))
 (let (($x250 (= true $x25)))
 (let (($x88 (not $x315)))
 (let (($x267 (=> $x88 $x250)))
 (let (($x192 (= $x267 true)))
 (let (($x166 (= $x192 true)))
 (let (($x222 (= $x166 true)))
 (let (($x187 (= $x88 true)))
 (let (($x200 (= $x187 true)))
 (let (($x120 (= $x200 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x57)))
 (let ((?x295 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x277 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x295)))
 (let (($x306 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x306 $x277)))
 (let (($x235 (and $x7 $x206)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x81 $x235)))
 (let (($x297 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x274 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x297)))))))
 (let (($x46 (and $x274 $x61)))
 (let (($x266 (= $x46 true)))
 (let (($x316 (= $x266 true)))
 (let (($x288 (= $x316 true)))
 (let ((?x209 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x280 (bvneg ?x209)))
 (let (($x208 (= ?x280 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x229 (= $x208 true)))
 (let (($x198 (= $x229 true)))
 (let (($x205 (and $x198 $x288)))
 (let (($x211 (and $x205 $x120)))
 (let (($x279 (and $x211 $x222)))
 (let (($x26 (and $x279 $x242)))
 (let (($x293 (and $x26 $x23)))
 (let (($x95 (and $x293 $x245)))
 (let (($x258 (and $x95 $x21)))
 (let (($x287 (and $x265 $x258)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x300 (and $x9 $x287)))
 (let (($x181 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd ?x41 (_ bv3 32))))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x194 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x260 $x181)))))))
 (let (($x203 (=> (and $x88 (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x260 $x181)))))))
 (let (($x85 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x13 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x157 (_ bv1 32))) (or false (or false (and true (or $x83 $x85)))))))
 (let (($x48 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x157 (_ bv1 32)))) (or false (or false (and true (or $x83 $x85)))))))
 (let (($x42 (and $x48 $x203)))
 (let (($x158 (and $x42 $x300)))
 (let (($x142 (=> $x158 $x143)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x41 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x243))))
 (let (($x131 (bvule ?x221 (_ bv4294967294 32))))
 (let (($x67 (= $x131 true)))
 (let (($x143 (= $x67 true)))
 (let ((?x157 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x188))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x341 (bvuge ?x292 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x36 (= $x228 $x341)))
 (let (($x265 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x215 (=> $x265 $x36)))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x265 $x86)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x27 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x55 (concat (select input.dst.llvm-mem ?x27) (concat ?x247 (concat ?x190 ?x102)))))
 (let (($x5 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x55)))
 (let (($x226 (=> $x265 $x5)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x318 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x186 (bvuge ?x318 (_ bv1 32))))
 (let (($x68 (= $x265 $x186)))
 (let (($x255 (= false false)))
 (let (($x207 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x16 (=> $x207 $x255)))
 (let (($x309 (= ?x318 (_ bv0 32))))
 (let (($x52 (= $x207 $x309)))
 (let (($x37 (and (and (and (and (and $x52 $x16) $x68) $x226) $x153) $x215)))
 (let (($x21 (= $x37 true)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x130 (concat ?x89 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x195 (concat ?x268 (concat ?x184 ?x130))))
 (let (($x214 (= (_ bv0 32) ?x195)))
 (let ((?x285 (ite $x214 (_ bv0 32) (_ bv1 32))))
 (let (($x241 (bvuge ?x285 (_ bv1 32))))
 (let (($x124 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x12 (= $x124 $x241)))
 (let (($x305 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x298 (=> $x305 $x12)))
 (let (($x290 (= ?x285 (_ bv0 32))))
 (let (($x24 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x270 (= $x24 $x290)))
 (let (($x22 (=> $x305 $x270)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x33)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x45)))
 (let (($x132 (= input.spec-%var-l-1.2.0 ?x18)))
 (let (($x160 (=> $x305 $x132)))
 (let (($x51 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x30 (ite $x51 (_ bv0 32) (_ bv1 32))))
 (let (($x443 (bvuge ?x30 (_ bv1 32))))
 (let (($x156 (= $x305 $x443)))
 (let (($x151 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x103 (=> $x151 $x255)))
 (let (($x322 (= ?x30 (_ bv0 32))))
 (let (($x216 (= $x151 $x322)))
 (let (($x441 (and (and (and (and (and $x216 $x103) $x156) $x160) $x22) $x298)))
 (let (($x245 (= $x441 true)))
 (let ((?x79 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x296 (= (_ bv0 3) ?x79)))
 (let (($x133 (= $x296 true)))
 (let (($x23 (= $x133 true)))
 (let (($x113 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x63 (= $x113 true)))
 (let (($x196 (= $x63 true)))
 (let (($x242 (= $x196 true)))
 (let (($x191 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x170 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x193 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x170) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x170))))
 (let (($x43 (and true $x193)))
 (let (($x122 (and $x193 $x43)))
 (let (($x185 (= (bvand ?x221 (_ bv4294967288 32)) ?x221)))
 (let (($x53 (= (bvand ?x41 (_ bv4294967292 32)) ?x41)))
 (let (($x146 (and $x53 $x185)))
 (let (($x182 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x41 (bvsub ?x41 (_ bv4 32))) (bvult ?x41 (bvsub ?x41 (_ bv4 32))))))
 (let (($x25 (and (and (and (and (and $x43 $x182) $x53) $x146) $x122) $x191)))
 (let (($x250 (= true $x25)))
 (let (($x88 (not $x315)))
 (let (($x267 (=> $x88 $x250)))
 (let (($x192 (= $x267 true)))
 (let (($x166 (= $x192 true)))
 (let (($x222 (= $x166 true)))
 (let (($x187 (= $x88 true)))
 (let (($x200 (= $x187 true)))
 (let (($x120 (= $x200 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x57)))
 (let ((?x295 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x277 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x295)))
 (let (($x306 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x306 $x277)))
 (let (($x235 (and $x7 $x206)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x81 $x235)))
 (let (($x297 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x274 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x297)))))))
 (let (($x46 (and $x274 $x61)))
 (let (($x266 (= $x46 true)))
 (let (($x316 (= $x266 true)))
 (let (($x288 (= $x316 true)))
 (let ((?x209 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x280 (bvneg ?x209)))
 (let (($x208 (= ?x280 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x229 (= $x208 true)))
 (let (($x198 (= $x229 true)))
 (let (($x205 (and $x198 $x288)))
 (let (($x211 (and $x205 $x120)))
 (let (($x279 (and $x211 $x222)))
 (let (($x26 (and $x279 $x242)))
 (let (($x293 (and $x26 $x23)))
 (let (($x95 (and $x293 $x245)))
 (let (($x258 (and $x95 $x21)))
 (let (($x287 (and $x265 $x258)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x300 (and $x9 $x287)))
 (let (($x181 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd ?x41 (_ bv3 32))))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x194 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x260 $x181)))))))
 (let (($x203 (=> (and $x88 (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x260 $x181)))))))
 (let (($x85 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x13 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x157 (_ bv1 32))) (or false (or false (and true (or $x83 $x85)))))))
 (let (($x48 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x157 (_ bv1 32)))) (or false (or false (and true (or $x83 $x85)))))))
 (let (($x42 (and $x48 $x203)))
 (let (($x158 (and $x42 $x300)))
 (let (($x142 (=> $x158 $x143)))
 (not $x142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3098X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x286 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3098X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x251 (concat ?x286 (select input.dst.llvm-mem (bvadd input.ind-%var3098X (_ bv4 32))))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3098X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3098X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x254 (concat ?x69 (concat ?x294 ?x251))))
 (let (($x333 (= ?x254 ?x254)))
 (let ((?x135 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x244))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x228 (bvuge ?x292 (_ bv1 32))))
 (let (($x299 (=> $x228 $x333)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3098X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3098X))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3098X (_ bv2 32))) ?x304)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3098X (_ bv3 32))) ?x217)))
 (let (($x64 (= ?x80 ?x80)))
 (let (($x20 (=> $x228 $x64)))
 (let ((?x178 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x8))))
 (let (($x107 (= (_ bv0 32) ?x185)))
 (let ((?x73 (ite $x107 (_ bv0 32) (_ bv1 32))))
 (let (($x60 (bvuge ?x73 (_ bv1 32))))
 (let (($x261 (= $x228 $x60)))
 (let (($x32 (= ?x73 (_ bv0 32))))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x70 (= $x236 $x32)))
 (let (($x444 (and (and (and (= ?x129 ?x185) (=> $x236 (= false false))) $x70) $x261)))
 (let (($x302 (and (and $x444 $x20) $x299)))
 (let (($x142 (= true true)))
 (let (($x327 (and $x142 $x302)))
 (let (($x263 (= $x327 true)))
 (let (($x123 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x341 (= $x123 $x228)))
 (let (($x280 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x36 (=> $x280 $x341)))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x280 $x86)))
 (let ((?x301 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x5 (concat (select input.dst.llvm-mem ?x134) (concat ?x138 (concat ?x169 ?x301)))))
 (let (($x226 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x5)))
 (let (($x183 (=> $x280 $x226)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x256 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x256 (_ bv1 32))))
 (let (($x334 (= $x280 $x174)))
 (let (($x156 (= false false)))
 (let (($x16 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x68 (=> $x16 $x156)))
 (let (($x265 (= ?x256 (_ bv0 32))))
 (let (($x186 (= $x16 $x265)))
 (let (($x287 (and (and (and (and (and $x186 $x68) $x334) $x183) $x153) $x36)))
 (let (($x300 (= $x287 true)))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x89 (concat ?x312 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x285 (concat ?x214 (concat ?x130 ?x89))))
 (let (($x290 (= (_ bv0 32) ?x285)))
 (let ((?x270 (ite $x290 (_ bv0 32) (_ bv1 32))))
 (let (($x12 (bvuge ?x270 (_ bv1 32))))
 (let (($x241 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x298 (= $x241 $x12)))
 (let (($x159 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x441 (=> $x159 $x298)))
 (let (($x22 (= ?x270 (_ bv0 32))))
 (let (($x10 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x179 (= $x10 $x22)))
 (let (($x124 (=> $x159 $x179)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x289)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x18)))
 (let (($x259 (= input.spec-%var-l-1.2.0 ?x227)))
 (let (($x24 (=> $x159 $x259)))
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x117 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x117 (_ bv1 32))))
 (let (($x219 (= $x159 $x75)))
 (let (($x216 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x19 (=> $x216 $x156)))
 (let (($x305 (= ?x117 (_ bv0 32))))
 (let (($x443 (= $x216 $x305)))
 (let (($x318 (and (and (and (and (and $x443 $x19) $x219) $x24) $x124) $x441)))
 (let (($x309 (= $x318 true)))
 (let ((?x165 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x151 (= (_ bv0 3) ?x165)))
 (let (($x147 (= $x151 true)))
 (let (($x51 (= $x147 true)))
 (let (($x238 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x79 (= $x238 true)))
 (let (($x296 (= $x79 true)))
 (let (($x133 (= $x296 true)))
 (let (($x25 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x43 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43))))
 (let (($x182 (and true $x100)))
 (let (($x136 (and $x100 $x182)))
 (let (($x122 (= (bvand ?x185 (_ bv4294967288 32)) ?x185)))
 (let (($x173 (= (bvand ?x178 (_ bv4294967292 32)) ?x178)))
 (let (($x291 (and $x173 $x122)))
 (let (($x177 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x178 (bvsub ?x178 (_ bv4 32))) (bvult ?x178 (bvsub ?x178 (_ bv4 32))))))
 (let (($x222 (and (and (and (and (and $x182 $x177) $x173) $x291) $x136) $x25)))
 (let (($x279 (= true $x222)))
 (let (($x88 (not $x315)))
 (let (($x141 (=> $x88 $x279)))
 (let (($x113 (= $x141 true)))
 (let (($x63 (= $x113 true)))
 (let (($x196 (= $x63 true)))
 (let (($x170 (= $x88 true)))
 (let (($x234 (= $x170 true)))
 (let (($x167 (= $x234 true)))
 (let ((?x266 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x316 (= (_ bv0 32) ?x266)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x235)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x206 $x61)))
 (let (($x288 (and $x46 $x316)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (and $x78 $x288)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x274 $x176)))))))
 (let (($x187 (and $x57 $x205)))
 (let (($x200 (= $x187 true)))
 (let (($x120 (= $x200 true)))
 (let (($x211 (= $x120 true)))
 (let ((?x229 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x229)))
 (let (($x273 (= ?x198 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x111 (= $x273 true)))
 (let (($x230 (= $x111 true)))
 (let (($x97 (and $x230 $x211)))
 (let (($x193 (and $x97 $x167)))
 (let (($x242 (and $x193 $x196)))
 (let (($x23 (and $x242 $x133)))
 (let (($x30 (and $x23 $x51)))
 (let (($x52 (and $x30 $x309)))
 (let (($x158 (and $x52 $x300)))
 (let (($x131 (and $x280 $x158)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x67 (and $x152 $x131)))
 (let (($x72 (bvugt ?x178 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd ?x178 (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x9 (=> (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x72)))))))
 (let (($x139 (=> (and $x88 (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x94 $x72)))))))
 (let (($x47 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x189 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x135 (_ bv1 32))) (or false (or false (and true (or $x276 $x47)))))))
 (let (($x29 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x135 (_ bv1 32)))) (or false (or false (and true (or $x276 $x47)))))))
 (let (($x54 (and $x29 $x139)))
 (let (($x143 (and $x54 $x67)))
 (let (($x320 (=> $x143 $x263)))
 (not $x320)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3098X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x286 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3098X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x251 (concat ?x286 (select input.dst.llvm-mem (bvadd input.ind-%var3098X (_ bv4 32))))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3098X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3098X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x254 (concat ?x69 (concat ?x294 ?x251))))
 (let (($x333 (= ?x254 ?x254)))
 (let ((?x135 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x244))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x228 (bvuge ?x292 (_ bv1 32))))
 (let (($x299 (=> $x228 $x333)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3098X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3098X))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3098X (_ bv2 32))) ?x304)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3098X (_ bv3 32))) ?x217)))
 (let (($x64 (= ?x80 ?x80)))
 (let (($x20 (=> $x228 $x64)))
 (let ((?x178 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x8))))
 (let (($x107 (= (_ bv0 32) ?x185)))
 (let ((?x73 (ite $x107 (_ bv0 32) (_ bv1 32))))
 (let (($x60 (bvuge ?x73 (_ bv1 32))))
 (let (($x261 (= $x228 $x60)))
 (let (($x32 (= ?x73 (_ bv0 32))))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x70 (= $x236 $x32)))
 (let (($x444 (and (and (and (= ?x129 ?x185) (=> $x236 (= false false))) $x70) $x261)))
 (let (($x302 (and (and $x444 $x20) $x299)))
 (let (($x142 (= true true)))
 (let (($x327 (and $x142 $x302)))
 (let (($x263 (= $x327 true)))
 (let (($x123 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x341 (= $x123 $x228)))
 (let (($x280 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x36 (=> $x280 $x341)))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x280 $x86)))
 (let ((?x301 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x5 (concat (select input.dst.llvm-mem ?x134) (concat ?x138 (concat ?x169 ?x301)))))
 (let (($x226 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x5)))
 (let (($x183 (=> $x280 $x226)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x256 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x256 (_ bv1 32))))
 (let (($x334 (= $x280 $x174)))
 (let (($x156 (= false false)))
 (let (($x16 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x68 (=> $x16 $x156)))
 (let (($x265 (= ?x256 (_ bv0 32))))
 (let (($x186 (= $x16 $x265)))
 (let (($x287 (and (and (and (and (and $x186 $x68) $x334) $x183) $x153) $x36)))
 (let (($x300 (= $x287 true)))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x89 (concat ?x312 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x285 (concat ?x214 (concat ?x130 ?x89))))
 (let (($x290 (= (_ bv0 32) ?x285)))
 (let ((?x270 (ite $x290 (_ bv0 32) (_ bv1 32))))
 (let (($x12 (bvuge ?x270 (_ bv1 32))))
 (let (($x241 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x298 (= $x241 $x12)))
 (let (($x159 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x441 (=> $x159 $x298)))
 (let (($x22 (= ?x270 (_ bv0 32))))
 (let (($x10 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x179 (= $x10 $x22)))
 (let (($x124 (=> $x159 $x179)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x289)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x18)))
 (let (($x259 (= input.spec-%var-l-1.2.0 ?x227)))
 (let (($x24 (=> $x159 $x259)))
 (let (($x103 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x117 (ite $x103 (_ bv0 32) (_ bv1 32))))
 (let (($x75 (bvuge ?x117 (_ bv1 32))))
 (let (($x219 (= $x159 $x75)))
 (let (($x216 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x19 (=> $x216 $x156)))
 (let (($x305 (= ?x117 (_ bv0 32))))
 (let (($x443 (= $x216 $x305)))
 (let (($x318 (and (and (and (and (and $x443 $x19) $x219) $x24) $x124) $x441)))
 (let (($x309 (= $x318 true)))
 (let ((?x165 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x151 (= (_ bv0 3) ?x165)))
 (let (($x147 (= $x151 true)))
 (let (($x51 (= $x147 true)))
 (let (($x238 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x79 (= $x238 true)))
 (let (($x296 (= $x79 true)))
 (let (($x133 (= $x296 true)))
 (let (($x25 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x43 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43))))
 (let (($x182 (and true $x100)))
 (let (($x136 (and $x100 $x182)))
 (let (($x122 (= (bvand ?x185 (_ bv4294967288 32)) ?x185)))
 (let (($x173 (= (bvand ?x178 (_ bv4294967292 32)) ?x178)))
 (let (($x291 (and $x173 $x122)))
 (let (($x177 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x178 (bvsub ?x178 (_ bv4 32))) (bvult ?x178 (bvsub ?x178 (_ bv4 32))))))
 (let (($x222 (and (and (and (and (and $x182 $x177) $x173) $x291) $x136) $x25)))
 (let (($x279 (= true $x222)))
 (let (($x88 (not $x315)))
 (let (($x141 (=> $x88 $x279)))
 (let (($x113 (= $x141 true)))
 (let (($x63 (= $x113 true)))
 (let (($x196 (= $x63 true)))
 (let (($x170 (= $x88 true)))
 (let (($x234 (= $x170 true)))
 (let (($x167 (= $x234 true)))
 (let ((?x266 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x316 (= (_ bv0 32) ?x266)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x235)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x206 $x61)))
 (let (($x288 (and $x46 $x316)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (and $x78 $x288)))
 (let (($x176 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x274 $x176)))))))
 (let (($x187 (and $x57 $x205)))
 (let (($x200 (= $x187 true)))
 (let (($x120 (= $x200 true)))
 (let (($x211 (= $x120 true)))
 (let ((?x229 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x229)))
 (let (($x273 (= ?x198 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x111 (= $x273 true)))
 (let (($x230 (= $x111 true)))
 (let (($x97 (and $x230 $x211)))
 (let (($x193 (and $x97 $x167)))
 (let (($x242 (and $x193 $x196)))
 (let (($x23 (and $x242 $x133)))
 (let (($x30 (and $x23 $x51)))
 (let (($x52 (and $x30 $x309)))
 (let (($x158 (and $x52 $x300)))
 (let (($x131 (and $x280 $x158)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x67 (and $x152 $x131)))
 (let (($x72 (bvugt ?x178 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd ?x178 (_ bv3 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x9 (=> (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x72)))))))
 (let (($x139 (=> (and $x88 (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x94 $x72)))))))
 (let (($x47 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x189 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x135 (_ bv1 32))) (or false (or false (and true (or $x276 $x47)))))))
 (let (($x29 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x135 (_ bv1 32)))) (or false (or false (and true (or $x276 $x47)))))))
 (let (($x54 (and $x29 $x139)))
 (let (($x143 (and $x54 $x67)))
 (let (($x320 (=> $x143 $x263)))
 (not $x320)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x74))))
 (let ((?x115 ((_ extract 2 0) ?x122)))
 (let (($x107 (= (_ bv0 3) ?x115)))
 (let (($x73 (= $x107 true)))
 (let ((?x83 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x34))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (bvuge ?x292 (_ bv1 32))))
 (let (($x258 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x228 (= $x258 $x123)))
 (let (($x198 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x341 (=> $x198 $x228)))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x198 $x86)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x168 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x226 (concat (select input.dst.llvm-mem ?x168) (concat ?x190 (concat ?x247 ?x102)))))
 (let (($x183 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x226)))
 (let (($x21 (=> $x198 $x183)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x215 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x215 (_ bv1 32))))
 (let (($x439 (= $x198 $x37)))
 (let (($x219 (= false false)))
 (let (($x68 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x334 (=> $x68 $x219)))
 (let (($x280 (= ?x215 (_ bv0 32))))
 (let (($x174 (= $x68 $x280)))
 (let (($x131 (and (and (and (and (and $x174 $x334) $x439) $x21) $x153) $x341)))
 (let (($x67 (= $x131 true)))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x312 (concat ?x184 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x270 (concat ?x290 (concat ?x89 ?x312))))
 (let (($x22 (= (_ bv0 32) ?x270)))
 (let ((?x179 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x298 (bvuge ?x179 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x441 (= $x12 $x298)))
 (let (($x128 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x318 (=> $x128 $x441)))
 (let (($x124 (= ?x179 (_ bv0 32))))
 (let (($x195 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x207 (= $x195 $x124)))
 (let (($x241 (=> $x128 $x207)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x149)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x227)))
 (let (($x31 (= input.spec-%var-l-1.2.0 ?x6)))
 (let (($x10 (=> $x128 $x31)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x245 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x132 (bvuge ?x245 (_ bv1 32))))
 (let (($x160 (= $x128 $x132)))
 (let (($x443 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x95 (=> $x443 $x219)))
 (let (($x159 (= ?x245 (_ bv0 32))))
 (let (($x75 (= $x443 $x159)))
 (let (($x256 (and (and (and (and (and $x75 $x95) $x160) $x10) $x241) $x318)))
 (let (($x265 (= $x256 true)))
 (let ((?x322 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x216 (= (_ bv0 3) ?x322)))
 (let (($x255 (= $x216 true)))
 (let (($x103 (= $x255 true)))
 (let (($x293 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x165 (= $x293 true)))
 (let (($x151 (= $x165 true)))
 (let (($x147 (= $x151 true)))
 (let (($x222 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x182 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x53 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x182) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x182))))
 (let (($x177 (and true $x53)))
 (let (($x191 (and $x53 $x177)))
 (let (($x136 (= (bvand ?x122 (_ bv4294967288 32)) ?x122)))
 (let (($x243 (= (bvand ?x90 (_ bv4294967292 32)) ?x90)))
 (let (($x166 (and $x243 $x136)))
 (let (($x267 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x90 (bvsub ?x90 (_ bv4 32))) (bvult ?x90 (bvsub ?x90 (_ bv4 32))))))
 (let (($x196 (and (and (and (and (and $x177 $x267) $x243) $x166) $x191) $x222)))
 (let (($x242 (= true $x196)))
 (let (($x88 (not $x315)))
 (let (($x26 (=> $x88 $x242)))
 (let (($x238 (= $x26 true)))
 (let (($x79 (= $x238 true)))
 (let (($x296 (= $x79 true)))
 (let (($x43 (= $x88 true)))
 (let (($x112 (= $x43 true)))
 (let (($x237 (= $x112 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x200)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x288)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x316 $x205)))
 (let (($x211 (and $x187 $x120)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x81 $x211)))
 (let (($x297 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x266 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x297)))))))
 (let (($x170 (and $x266 $x97)))
 (let (($x234 (= $x170 true)))
 (let (($x167 (= $x234 true)))
 (let (($x193 (= $x167 true)))
 (let ((?x111 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x230 (bvneg ?x111)))
 (let (($x87 (= ?x230 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x7 (= $x87 true)))
 (let (($x233 (= $x7 true)))
 (let (($x121 (and $x233 $x193)))
 (let (($x100 (and $x121 $x237)))
 (let (($x133 (and $x100 $x296)))
 (let (($x51 (and $x133 $x147)))
 (let (($x117 (and $x51 $x103)))
 (let (($x186 (and $x117 $x265)))
 (let (($x143 (and $x186 $x67)))
 (let (($x142 (and $x198 $x143)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x442 (and $x208 $x142)))
 (let (($x203 (bvugt ?x90 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd ?x90 (_ bv3 32))))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x152 (=> (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x194 $x203)))))))
 (let (($x278 (=> (and $x88 (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x194 $x203)))))))
 (let (($x48 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x181 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x83 (_ bv1 32))) (or false (or false (and true (or $x13 $x48)))))))
 (let (($x27 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x83 (_ bv1 32)))) (or false (or false (and true (or $x13 $x48)))))))
 (let (($x175 (and $x27 $x278)))
 (let (($x126 (and $x175 $x442)))
 (let (($x32 (=> $x126 $x73)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x90 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x74))))
 (let ((?x115 ((_ extract 2 0) ?x122)))
 (let (($x107 (= (_ bv0 3) ?x115)))
 (let (($x73 (= $x107 true)))
 (let ((?x83 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x34))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (bvuge ?x292 (_ bv1 32))))
 (let (($x258 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x228 (= $x258 $x123)))
 (let (($x198 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x341 (=> $x198 $x228)))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x198 $x86)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x168 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x226 (concat (select input.dst.llvm-mem ?x168) (concat ?x190 (concat ?x247 ?x102)))))
 (let (($x183 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x226)))
 (let (($x21 (=> $x198 $x183)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x215 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x37 (bvuge ?x215 (_ bv1 32))))
 (let (($x439 (= $x198 $x37)))
 (let (($x219 (= false false)))
 (let (($x68 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x334 (=> $x68 $x219)))
 (let (($x280 (= ?x215 (_ bv0 32))))
 (let (($x174 (= $x68 $x280)))
 (let (($x131 (and (and (and (and (and $x174 $x334) $x439) $x21) $x153) $x341)))
 (let (($x67 (= $x131 true)))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x312 (concat ?x184 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x270 (concat ?x290 (concat ?x89 ?x312))))
 (let (($x22 (= (_ bv0 32) ?x270)))
 (let ((?x179 (ite $x22 (_ bv0 32) (_ bv1 32))))
 (let (($x298 (bvuge ?x179 (_ bv1 32))))
 (let (($x12 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x441 (= $x12 $x298)))
 (let (($x128 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x318 (=> $x128 $x441)))
 (let (($x124 (= ?x179 (_ bv0 32))))
 (let (($x195 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x207 (= $x195 $x124)))
 (let (($x241 (=> $x128 $x207)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x149)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x227)))
 (let (($x31 (= input.spec-%var-l-1.2.0 ?x6)))
 (let (($x10 (=> $x128 $x31)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x245 (ite $x19 (_ bv0 32) (_ bv1 32))))
 (let (($x132 (bvuge ?x245 (_ bv1 32))))
 (let (($x160 (= $x128 $x132)))
 (let (($x443 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x95 (=> $x443 $x219)))
 (let (($x159 (= ?x245 (_ bv0 32))))
 (let (($x75 (= $x443 $x159)))
 (let (($x256 (and (and (and (and (and $x75 $x95) $x160) $x10) $x241) $x318)))
 (let (($x265 (= $x256 true)))
 (let ((?x322 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x216 (= (_ bv0 3) ?x322)))
 (let (($x255 (= $x216 true)))
 (let (($x103 (= $x255 true)))
 (let (($x293 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x165 (= $x293 true)))
 (let (($x151 (= $x165 true)))
 (let (($x147 (= $x151 true)))
 (let (($x222 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x182 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x53 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x182) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x182))))
 (let (($x177 (and true $x53)))
 (let (($x191 (and $x53 $x177)))
 (let (($x136 (= (bvand ?x122 (_ bv4294967288 32)) ?x122)))
 (let (($x243 (= (bvand ?x90 (_ bv4294967292 32)) ?x90)))
 (let (($x166 (and $x243 $x136)))
 (let (($x267 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x90 (bvsub ?x90 (_ bv4 32))) (bvult ?x90 (bvsub ?x90 (_ bv4 32))))))
 (let (($x196 (and (and (and (and (and $x177 $x267) $x243) $x166) $x191) $x222)))
 (let (($x242 (= true $x196)))
 (let (($x88 (not $x315)))
 (let (($x26 (=> $x88 $x242)))
 (let (($x238 (= $x26 true)))
 (let (($x79 (= $x238 true)))
 (let (($x296 (= $x79 true)))
 (let (($x43 (= $x88 true)))
 (let (($x112 (= $x43 true)))
 (let (($x237 (= $x112 true)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x200)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x288)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x316 $x205)))
 (let (($x211 (and $x187 $x120)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x81 $x211)))
 (let (($x297 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x266 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x297)))))))
 (let (($x170 (and $x266 $x97)))
 (let (($x234 (= $x170 true)))
 (let (($x167 (= $x234 true)))
 (let (($x193 (= $x167 true)))
 (let ((?x111 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x230 (bvneg ?x111)))
 (let (($x87 (= ?x230 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x7 (= $x87 true)))
 (let (($x233 (= $x7 true)))
 (let (($x121 (and $x233 $x193)))
 (let (($x100 (and $x121 $x237)))
 (let (($x133 (and $x100 $x296)))
 (let (($x51 (and $x133 $x147)))
 (let (($x117 (and $x51 $x103)))
 (let (($x186 (and $x117 $x265)))
 (let (($x143 (and $x186 $x67)))
 (let (($x142 (and $x198 $x143)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x442 (and $x208 $x142)))
 (let (($x203 (bvugt ?x90 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd ?x90 (_ bv3 32))))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x152 (=> (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x194 $x203)))))))
 (let (($x278 (=> (and $x88 (bvule ?x90 (bvsub (bvadd ?x90 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x194 $x203)))))))
 (let (($x48 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x181 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x83 (_ bv1 32))) (or false (or false (and true (or $x13 $x48)))))))
 (let (($x27 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x83 (_ bv1 32)))) (or false (or false (and true (or $x13 $x48)))))))
 (let (($x175 (and $x27 $x278)))
 (let (($x126 (and $x175 $x442)))
 (let (($x32 (=> $x126 $x73)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x301 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x41 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x183 (concat (select input.dst.llvm-mem ?x41) (concat ?x169 (concat ?x138 ?x301)))))
 (let ((?x157 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x183)))
 (let ((?x32 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x70 (bvmul (_ bv4294967295 32) ?x32)))
 (let ((?x180 (bvneg ?x70)))
 (let (($x274 (= ?x180 ?x157)))
 (let (($x340 (= $x274 true)))
 (let ((?x276 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv1 32))) (select input.dst.llvm-mem ?x276))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv2 32))) ?x339))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x292 (_ bv1 32))))
 (let (($x158 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x123 (= $x158 $x258)))
 (let (($x230 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x228 (=> $x230 $x123)))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x230 $x86)))
 (let (($x21 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x183)))
 (let (($x300 (=> $x230 $x21)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x36 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (bvuge ?x36 (_ bv1 32))))
 (let (($x55 (= $x230 $x287)))
 (let (($x160 (= false false)))
 (let (($x334 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x439 (=> $x334 $x160)))
 (let (($x198 (= ?x36 (_ bv0 32))))
 (let (($x37 (= $x334 $x198)))
 (let (($x142 (and (and (and (and (and $x37 $x439) $x55) $x300) $x153) $x228)))
 (let (($x442 (= $x142 true)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x184 (concat ?x130 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x179 (concat ?x22 (concat ?x312 ?x184))))
 (let (($x124 (= (_ bv0 32) ?x179)))
 (let ((?x207 (ite $x124 (_ bv0 32) (_ bv1 32))))
 (let (($x441 (bvuge ?x207 (_ bv1 32))))
 (let (($x298 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x318 (= $x298 $x441)))
 (let (($x33 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x256 (=> $x33 $x318)))
 (let (($x241 (= ?x207 (_ bv0 32))))
 (let (($x285 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x16 (= $x285 $x241)))
 (let (($x12 (=> $x33 $x16)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x45)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x6)))
 (let (($x268 (= input.spec-%var-l-1.2.0 ?x209)))
 (let (($x195 (=> $x33 $x268)))
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x309 (ite $x95 (_ bv0 32) (_ bv1 32))))
 (let (($x259 (bvuge ?x309 (_ bv1 32))))
 (let (($x24 (= $x33 $x259)))
 (let (($x75 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x52 (=> $x75 $x160)))
 (let (($x128 (= ?x309 (_ bv0 32))))
 (let (($x132 (= $x75 $x128)))
 (let (($x215 (and (and (and (and (and $x132 $x52) $x24) $x195) $x12) $x256)))
 (let (($x280 (= $x215 true)))
 (let ((?x305 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x443 (= (_ bv0 3) ?x305)))
 (let (($x156 (= $x443 true)))
 (let (($x19 (= $x156 true)))
 (let ((?x147 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x147)))
 (let (($x322 (= ?x51 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x216 (= $x322 true)))
 (let (($x255 (= $x216 true)))
 (let (($x79 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x296 (= $x79 true)))
 (let (($x133 (= $x296 true)))
 (let (($x23 (= $x133 true)))
 (let (($x291 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x43 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x104 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43))))
 (let (($x182 (and true $x104)))
 (let (($x146 (and $x104 $x182)))
 (let ((?x260 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x243))))
 (let (($x221 (= (bvand ?x185 (_ bv4294967288 32)) ?x185)))
 (let (($x173 (= (bvand ?x260 (_ bv4294967292 32)) ?x260)))
 (let (($x74 (and $x173 $x221)))
 (let (($x127 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x260 (bvsub ?x260 (_ bv4 32))) (bvult ?x260 (bvsub ?x260 (_ bv4 32))))))
 (let (($x191 (and (and (and (and (and $x182 $x127) $x173) $x74) $x146) $x291)))
 (let (($x63 (= true $x191)))
 (let (($x88 (not $x315)))
 (let (($x25 (=> $x88 $x63)))
 (let (($x222 (= $x25 true)))
 (let (($x196 (= $x222 true)))
 (let (($x242 (= $x196 true)))
 (let (($x234 (= $x88 true)))
 (let (($x167 (= $x234 true)))
 (let (($x193 (= $x167 true)))
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x288)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x316 (and $x266 $x81)))
 (let (($x187 (and $x316 $x205)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x7 $x187)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x277)))))))
 (let (($x120 (and $x61 $x200)))
 (let (($x211 (= $x120 true)))
 (let (($x97 (= $x211 true)))
 (let (($x170 (= $x97 true)))
 (let (($x121 (and $x170 $x193)))
 (let (($x26 (and $x121 $x242)))
 (let (($x293 (and $x26 $x23)))
 (let (($x103 (and $x293 $x255)))
 (let (($x245 (and $x103 $x19)))
 (let (($x174 (and $x245 $x280)))
 (let (($x126 (and $x174 $x442)))
 (let (($x115 (and $x230 $x126)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x107 (and $x273 $x115)))
 (let (($x139 (bvugt ?x260 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd ?x260 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x208 (=> (bvule ?x260 (bvsub (bvadd ?x260 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x139)))))))
 (let (($x284 (=> (and $x88 (bvule ?x260 (bvsub (bvadd ?x260 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x9 $x139)))))))
 (let (($x29 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x72 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x276 (_ bv1 32))) (or false (or false (and true (or $x189 $x29)))))))
 (let (($x134 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x276 (_ bv1 32)))) (or false (or false (and true (or $x189 $x29)))))))
 (let (($x109 (and $x134 $x284)))
 (let (($x73 (and $x109 $x107)))
 (let (($x60 (=> $x73 $x340)))
 (not $x60))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x301 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x41 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x183 (concat (select input.dst.llvm-mem ?x41) (concat ?x169 (concat ?x138 ?x301)))))
 (let ((?x157 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x183)))
 (let ((?x32 (bvadd input.spec-%var-sum-0.L3%5%bbentry input.spec-%var-l-0.L3%5%bbentry.2.0)))
 (let ((?x70 (bvmul (_ bv4294967295 32) ?x32)))
 (let ((?x180 (bvneg ?x70)))
 (let (($x274 (= ?x180 ?x157)))
 (let (($x340 (= $x274 true)))
 (let ((?x276 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv1 32))) (select input.dst.llvm-mem ?x276))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv2 32))) ?x339))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x258 (bvuge ?x292 (_ bv1 32))))
 (let (($x158 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x123 (= $x158 $x258)))
 (let (($x230 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x228 (=> $x230 $x123)))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x230 $x86)))
 (let (($x21 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x183)))
 (let (($x300 (=> $x230 $x21)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x36 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x287 (bvuge ?x36 (_ bv1 32))))
 (let (($x55 (= $x230 $x287)))
 (let (($x160 (= false false)))
 (let (($x334 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x439 (=> $x334 $x160)))
 (let (($x198 (= ?x36 (_ bv0 32))))
 (let (($x37 (= $x334 $x198)))
 (let (($x142 (and (and (and (and (and $x37 $x439) $x55) $x300) $x153) $x228)))
 (let (($x442 (= $x142 true)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x184 (concat ?x130 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x179 (concat ?x22 (concat ?x312 ?x184))))
 (let (($x124 (= (_ bv0 32) ?x179)))
 (let ((?x207 (ite $x124 (_ bv0 32) (_ bv1 32))))
 (let (($x441 (bvuge ?x207 (_ bv1 32))))
 (let (($x298 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x318 (= $x298 $x441)))
 (let (($x33 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x256 (=> $x33 $x318)))
 (let (($x241 (= ?x207 (_ bv0 32))))
 (let (($x285 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x16 (= $x285 $x241)))
 (let (($x12 (=> $x33 $x16)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x45)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x6)))
 (let (($x268 (= input.spec-%var-l-1.2.0 ?x209)))
 (let (($x195 (=> $x33 $x268)))
 (let (($x95 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x309 (ite $x95 (_ bv0 32) (_ bv1 32))))
 (let (($x259 (bvuge ?x309 (_ bv1 32))))
 (let (($x24 (= $x33 $x259)))
 (let (($x75 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x52 (=> $x75 $x160)))
 (let (($x128 (= ?x309 (_ bv0 32))))
 (let (($x132 (= $x75 $x128)))
 (let (($x215 (and (and (and (and (and $x132 $x52) $x24) $x195) $x12) $x256)))
 (let (($x280 (= $x215 true)))
 (let ((?x305 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x443 (= (_ bv0 3) ?x305)))
 (let (($x156 (= $x443 true)))
 (let (($x19 (= $x156 true)))
 (let ((?x147 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x147)))
 (let (($x322 (= ?x51 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x216 (= $x322 true)))
 (let (($x255 (= $x216 true)))
 (let (($x79 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x296 (= $x79 true)))
 (let (($x133 (= $x296 true)))
 (let (($x23 (= $x133 true)))
 (let (($x291 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x43 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x104 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x43))))
 (let (($x182 (and true $x104)))
 (let (($x146 (and $x104 $x182)))
 (let ((?x260 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x243))))
 (let (($x221 (= (bvand ?x185 (_ bv4294967288 32)) ?x185)))
 (let (($x173 (= (bvand ?x260 (_ bv4294967292 32)) ?x260)))
 (let (($x74 (and $x173 $x221)))
 (let (($x127 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x260 (bvsub ?x260 (_ bv4 32))) (bvult ?x260 (bvsub ?x260 (_ bv4 32))))))
 (let (($x191 (and (and (and (and (and $x182 $x127) $x173) $x74) $x146) $x291)))
 (let (($x63 (= true $x191)))
 (let (($x88 (not $x315)))
 (let (($x25 (=> $x88 $x63)))
 (let (($x222 (= $x25 true)))
 (let (($x196 (= $x222 true)))
 (let (($x242 (= $x196 true)))
 (let (($x234 (= $x88 true)))
 (let (($x167 (= $x234 true)))
 (let (($x193 (= $x167 true)))
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x288)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x316 (and $x266 $x81)))
 (let (($x187 (and $x316 $x205)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x7 $x187)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x46 $x277)))))))
 (let (($x120 (and $x61 $x200)))
 (let (($x211 (= $x120 true)))
 (let (($x97 (= $x211 true)))
 (let (($x170 (= $x97 true)))
 (let (($x121 (and $x170 $x193)))
 (let (($x26 (and $x121 $x242)))
 (let (($x293 (and $x26 $x23)))
 (let (($x103 (and $x293 $x255)))
 (let (($x245 (and $x103 $x19)))
 (let (($x174 (and $x245 $x280)))
 (let (($x126 (and $x174 $x442)))
 (let (($x115 (and $x230 $x126)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x107 (and $x273 $x115)))
 (let (($x139 (bvugt ?x260 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd ?x260 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x208 (=> (bvule ?x260 (bvsub (bvadd ?x260 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x139)))))))
 (let (($x284 (=> (and $x88 (bvule ?x260 (bvsub (bvadd ?x260 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x9 $x139)))))))
 (let (($x29 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x72 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x276 (_ bv1 32))) (or false (or false (and true (or $x189 $x29)))))))
 (let (($x134 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x276 (_ bv1 32)))) (or false (or false (and true (or $x189 $x29)))))))
 (let (($x109 (and $x134 $x284)))
 (let (($x73 (and $x109 $x107)))
 (let (($x60 (=> $x73 $x340)))
 (not $x60))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3170X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3170X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x171 (concat ?x69 (select input.dst.llvm-mem (bvadd input.ind-%var3170X (_ bv4 32))))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3170X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3170X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x71 (concat ?x251 (concat ?x40 ?x171))))
 (let (($x254 (= ?x71 ?x71)))
 (let ((?x13 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x223))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x158 (bvuge ?x292 (_ bv1 32))))
 (let (($x333 (=> $x158 $x254)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3170X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3170X))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3170X (_ bv2 32))) ?x213)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3170X (_ bv3 32))) ?x59)))
 (let (($x64 (= ?x80 ?x80)))
 (let (($x20 (=> $x158 $x64)))
 (let ((?x94 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x146))))
 (let (($x60 (= (_ bv0 32) ?x25)))
 (let ((?x261 (ite $x60 (_ bv0 32) (_ bv1 32))))
 (let (($x50 (bvuge ?x261 (_ bv1 32))))
 (let (($x444 (= $x158 $x50)))
 (let (($x85 (= ?x261 (_ bv0 32))))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x135 (= $x236 $x85)))
 (let (($x327 (and (and (and (= ?x129 ?x25) (=> $x236 (= false false))) $x135) $x444)))
 (let (($x320 (and (and $x327 $x20) $x333)))
 (let (($x157 (= true true)))
 (let (($x49 (and $x157 $x320)))
 (let (($x58 (= $x49 true)))
 (let (($x143 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x258 (= $x143 $x158)))
 (let (($x295 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x123 (=> $x295 $x258)))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x295 $x86)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x178 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x21 (concat (select input.dst.llvm-mem ?x178) (concat ?x247 (concat ?x190 ?x102)))))
 (let (($x300 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x21)))
 (let (($x67 (=> $x295 $x300)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x341 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x341 (_ bv1 32))))
 (let (($x5 (= $x295 $x131)))
 (let (($x24 (= false false)))
 (let (($x439 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x55 (=> $x439 $x24)))
 (let (($x230 (= ?x341 (_ bv0 32))))
 (let (($x287 (= $x439 $x230)))
 (let (($x115 (and (and (and (and (and $x287 $x55) $x5) $x67) $x153) $x123)))
 (let (($x107 (= $x115 true)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x130 (concat ?x89 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x207 (concat ?x124 (concat ?x184 ?x130))))
 (let (($x241 (= (_ bv0 32) ?x207)))
 (let ((?x16 (ite $x241 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x16 (_ bv1 32))))
 (let (($x441 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x256 (= $x441 $x318)))
 (let (($x289 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x215 (=> $x289 $x256)))
 (let (($x12 (= ?x16 (_ bv0 32))))
 (let (($x270 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x68 (= $x270 $x12)))
 (let (($x298 (=> $x289 $x68)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x18)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x209)))
 (let (($x214 (= input.spec-%var-l-1.2.0 ?x229)))
 (let (($x285 (=> $x289 $x214)))
 (let (($x52 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x265 (ite $x52 (_ bv0 32) (_ bv1 32))))
 (let (($x31 (bvuge ?x265 (_ bv1 32))))
 (let (($x10 (= $x289 $x31)))
 (let (($x132 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x186 (=> $x132 $x24)))
 (let (($x33 (= ?x265 (_ bv0 32))))
 (let (($x259 (= $x132 $x33)))
 (let (($x36 (and (and (and (and (and $x259 $x186) $x10) $x285) $x298) $x215)))
 (let (($x198 (= $x36 true)))
 (let ((?x159 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x75 (= (_ bv0 3) ?x159)))
 (let (($x219 (= $x75 true)))
 (let (($x95 (= $x219 true)))
 (let (($x117 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x305 (= $x117 true)))
 (let (($x443 (= $x305 true)))
 (let (($x156 (= $x443 true)))
 (let (($x296 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x173 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x141 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x173) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x173))))
 (let (($x199 (and true $x141)))
 (let (($x238 (and $x141 $x199)))
 (let (($x242 (= (bvand ?x25 (_ bv4294967288 32)) ?x25)))
 (let (($x77 (= (bvand ?x94 (_ bv4294967292 32)) ?x94)))
 (let (($x26 (and $x77 $x242)))
 (let (($x243 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x94 (bvsub ?x94 (_ bv4 32))) (bvult ?x94 (bvsub ?x94 (_ bv4 32))))))
 (let (($x151 (and (and (and (and (and $x199 $x243) $x77) $x26) $x238) $x296)))
 (let (($x147 (= true $x151)))
 (let (($x88 (not $x315)))
 (let (($x51 (=> $x88 $x147)))
 (let (($x30 (= $x51 true)))
 (let (($x322 (= $x30 true)))
 (let (($x216 (= $x322 true)))
 (let (($x127 (= $x88 true)))
 (let (($x192 (= $x127 true)))
 (let (($x250 (= $x192 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x43)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x167 $x121)))
 (let (($x100 (and $x112 $x237)))
 (let (($x176 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x176 $x100)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x234 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x205 $x187)))))))
 (let (($x182 (and $x234 $x104)))
 (let (($x220 (= $x182 true)))
 (let (($x65 (= $x220 true)))
 (let (($x53 (= $x65 true)))
 (let ((?x57 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x57)))
 (let (($x206 (= ?x297 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x61 (= $x206 true)))
 (let (($x87 (= $x61 true)))
 (let (($x177 (and $x87 $x53)))
 (let (($x324 (and $x177 $x250)))
 (let (($x255 (and $x324 $x216)))
 (let (($x19 (and $x255 $x156)))
 (let (($x309 (and $x19 $x95)))
 (let (($x37 (and $x309 $x198)))
 (let (($x73 (and $x37 $x107)))
 (let (($x32 (and $x295 $x73)))
 (let (($x306 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x70 (and $x306 $x32)))
 (let (($x278 (bvugt ?x94 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd ?x94 (_ bv3 32))))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x273 (=> (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x152 $x278)))))))
 (let (($x82 (=> (and $x88 (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x152 $x278)))))))
 (let (($x27 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x203 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x13 (_ bv1 32))) (or false (or false (and true (or $x181 $x27)))))))
 (let (($x168 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x13 (_ bv1 32)))) (or false (or false (and true (or $x181 $x27)))))))
 (let (($x42 (and $x168 $x82)))
 (let (($x180 (and $x42 $x70)))
 (let (($x164 (=> $x180 $x58)))
 (not $x164)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3170X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3170X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x171 (concat ?x69 (select input.dst.llvm-mem (bvadd input.ind-%var3170X (_ bv4 32))))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3170X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3170X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x71 (concat ?x251 (concat ?x40 ?x171))))
 (let (($x254 (= ?x71 ?x71)))
 (let ((?x13 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x223))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x158 (bvuge ?x292 (_ bv1 32))))
 (let (($x333 (=> $x158 $x254)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3170X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3170X))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3170X (_ bv2 32))) ?x213)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3170X (_ bv3 32))) ?x59)))
 (let (($x64 (= ?x80 ?x80)))
 (let (($x20 (=> $x158 $x64)))
 (let ((?x94 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x146))))
 (let (($x60 (= (_ bv0 32) ?x25)))
 (let ((?x261 (ite $x60 (_ bv0 32) (_ bv1 32))))
 (let (($x50 (bvuge ?x261 (_ bv1 32))))
 (let (($x444 (= $x158 $x50)))
 (let (($x85 (= ?x261 (_ bv0 32))))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x135 (= $x236 $x85)))
 (let (($x327 (and (and (and (= ?x129 ?x25) (=> $x236 (= false false))) $x135) $x444)))
 (let (($x320 (and (and $x327 $x20) $x333)))
 (let (($x157 (= true true)))
 (let (($x49 (and $x157 $x320)))
 (let (($x58 (= $x49 true)))
 (let (($x143 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x258 (= $x143 $x158)))
 (let (($x295 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x123 (=> $x295 $x258)))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x295 $x86)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x178 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x21 (concat (select input.dst.llvm-mem ?x178) (concat ?x247 (concat ?x190 ?x102)))))
 (let (($x300 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x21)))
 (let (($x67 (=> $x295 $x300)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x341 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x131 (bvuge ?x341 (_ bv1 32))))
 (let (($x5 (= $x295 $x131)))
 (let (($x24 (= false false)))
 (let (($x439 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x55 (=> $x439 $x24)))
 (let (($x230 (= ?x341 (_ bv0 32))))
 (let (($x287 (= $x439 $x230)))
 (let (($x115 (and (and (and (and (and $x287 $x55) $x5) $x67) $x153) $x123)))
 (let (($x107 (= $x115 true)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x130 (concat ?x89 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x207 (concat ?x124 (concat ?x184 ?x130))))
 (let (($x241 (= (_ bv0 32) ?x207)))
 (let ((?x16 (ite $x241 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x16 (_ bv1 32))))
 (let (($x441 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x256 (= $x441 $x318)))
 (let (($x289 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x215 (=> $x289 $x256)))
 (let (($x12 (= ?x16 (_ bv0 32))))
 (let (($x270 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x68 (= $x270 $x12)))
 (let (($x298 (=> $x289 $x68)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x18)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x209)))
 (let (($x214 (= input.spec-%var-l-1.2.0 ?x229)))
 (let (($x285 (=> $x289 $x214)))
 (let (($x52 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x265 (ite $x52 (_ bv0 32) (_ bv1 32))))
 (let (($x31 (bvuge ?x265 (_ bv1 32))))
 (let (($x10 (= $x289 $x31)))
 (let (($x132 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x186 (=> $x132 $x24)))
 (let (($x33 (= ?x265 (_ bv0 32))))
 (let (($x259 (= $x132 $x33)))
 (let (($x36 (and (and (and (and (and $x259 $x186) $x10) $x285) $x298) $x215)))
 (let (($x198 (= $x36 true)))
 (let ((?x159 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x75 (= (_ bv0 3) ?x159)))
 (let (($x219 (= $x75 true)))
 (let (($x95 (= $x219 true)))
 (let (($x117 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x305 (= $x117 true)))
 (let (($x443 (= $x305 true)))
 (let (($x156 (= $x443 true)))
 (let (($x296 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x173 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x141 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x173) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x173))))
 (let (($x199 (and true $x141)))
 (let (($x238 (and $x141 $x199)))
 (let (($x242 (= (bvand ?x25 (_ bv4294967288 32)) ?x25)))
 (let (($x77 (= (bvand ?x94 (_ bv4294967292 32)) ?x94)))
 (let (($x26 (and $x77 $x242)))
 (let (($x243 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x94 (bvsub ?x94 (_ bv4 32))) (bvult ?x94 (bvsub ?x94 (_ bv4 32))))))
 (let (($x151 (and (and (and (and (and $x199 $x243) $x77) $x26) $x238) $x296)))
 (let (($x147 (= true $x151)))
 (let (($x88 (not $x315)))
 (let (($x51 (=> $x88 $x147)))
 (let (($x30 (= $x51 true)))
 (let (($x322 (= $x30 true)))
 (let (($x216 (= $x322 true)))
 (let (($x127 (= $x88 true)))
 (let (($x192 (= $x127 true)))
 (let (($x250 (= $x192 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x43)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (and $x167 $x121)))
 (let (($x100 (and $x112 $x237)))
 (let (($x176 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x176 $x100)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x234 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x205 $x187)))))))
 (let (($x182 (and $x234 $x104)))
 (let (($x220 (= $x182 true)))
 (let (($x65 (= $x220 true)))
 (let (($x53 (= $x65 true)))
 (let ((?x57 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x297 (bvneg ?x57)))
 (let (($x206 (= ?x297 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x61 (= $x206 true)))
 (let (($x87 (= $x61 true)))
 (let (($x177 (and $x87 $x53)))
 (let (($x324 (and $x177 $x250)))
 (let (($x255 (and $x324 $x216)))
 (let (($x19 (and $x255 $x156)))
 (let (($x309 (and $x19 $x95)))
 (let (($x37 (and $x309 $x198)))
 (let (($x73 (and $x37 $x107)))
 (let (($x32 (and $x295 $x73)))
 (let (($x306 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x70 (and $x306 $x32)))
 (let (($x278 (bvugt ?x94 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd ?x94 (_ bv3 32))))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x273 (=> (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x152 $x278)))))))
 (let (($x82 (=> (and $x88 (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x152 $x278)))))))
 (let (($x27 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x203 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x13 (_ bv1 32))) (or false (or false (and true (or $x181 $x27)))))))
 (let (($x168 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x13 (_ bv1 32)))) (or false (or false (and true (or $x181 $x27)))))))
 (let (($x42 (and $x168 $x82)))
 (let (($x180 (and $x42 $x70)))
 (let (($x164 (=> $x180 $x58)))
 (not $x164)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x6 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x5 (or $x6 $x315)))
 (let (($x142 (= $x5 true)))
 (let (($x226 (= $x142 true)))
 (let ((?x189 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x130))))
 (let (($x298 (= (_ bv0 32) ?x68)))
 (let ((?x334 (ite $x298 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x334 (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x198 (= $x215 $x36)))
 (let (($x37 (=> $x6 $x198)))
 (let (($x441 (= ?x334 (_ bv0 32))))
 (let (($x184 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x318 (= $x184 $x441)))
 (let (($x256 (=> $x6 $x318)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x90 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x22 (concat (select input.dst.llvm-mem ?x90) (concat ?x111 (concat ?x229 ?x18)))))
 (let (($x179 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x22)))
 (let (($x124 (=> $x6 $x179)))
 (let ((?x149 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x325 (bvuge ?x149 (_ bv1 32))))
 (let (($x39 (= $x6 $x325)))
 (let (($x113 (= false false)))
 (let (($x174 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x45 (=> $x174 $x113)))
 (let (($x268 (= ?x149 (_ bv0 32))))
 (let (($x195 (= $x174 $x268)))
 (let (($x287 (and (and (and (and (and $x195 $x45) $x39) $x124) $x256) $x37)))
 (let (($x55 (= $x287 true)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x117 (concat ?x103 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x443 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x159 (concat ?x245 (concat ?x443 ?x117))))
 (let (($x75 (= (_ bv0 32) ?x159)))
 (let ((?x219 (ite $x75 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x219 (_ bv1 32))))
 (let (($x132 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x52 (= $x132 $x160)))
 (let (($x291 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x265 (=> $x291 $x52)))
 (let (($x95 (= ?x219 (_ bv0 32))))
 (let (($x30 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x309 (= $x30 $x95)))
 (let (($x128 (=> $x291 $x309)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x196)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x238)))
 (let (($x151 (= input.spec-%var-l-1.2.0 ?x296)))
 (let (($x147 (=> $x291 $x151)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x23 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x74 (bvuge ?x23 (_ bv1 32))))
 (let (($x166 (= $x291 $x74)))
 (let (($x8 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x122 (=> $x8 $x113)))
 (let (($x317 (= ?x23 (_ bv0 32))))
 (let (($x63 (= $x8 $x317)))
 (let (($x280 (and (and (and (and (and $x63 $x122) $x166) $x147) $x128) $x265)))
 (let (($x289 (= $x280 true)))
 (let ((?x172 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x162 (= (_ bv0 3) ?x172)))
 (let (($x125 (= $x162 true)))
 (let (($x279 (= $x125 true)))
 (let (($x136 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x173 (= $x136 true)))
 (let (($x267 (= $x173 true)))
 (let (($x225 (= $x267 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x104)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x237 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x112 $x237)))
 (let (($x220 (and $x100 $x182)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x205 $x220)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x211 $x97)))))))
 (let (($x53 (and $x121 $x65)))
 (let (($x177 (= $x53 true)))
 (let (($x127 (= $x177 true)))
 (let (($x192 (= $x127 true)))
 (let ((?x78 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x78)))
 (let (($x87 (= ?x206 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x81 (= $x87 true)))
 (let (($x316 (= $x81 true)))
 (let (($x250 (and $x316 $x192)))
 (let (($x141 (and $x250 $x225)))
 (let (($x243 (and $x141 $x279)))
 (let (($x31 (and $x243 $x289)))
 (let (($x228 (and $x31 $x55)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x295 (and $x277 $x228)))
 (let ((?x194 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x284 (bvugt ?x194 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x194 (_ bv3 32)))))
 (let (($x306 (=> (bvule ?x194 (bvsub (bvadd ?x194 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x284)))))))
 (let (($x88 (not $x315)))
 (let (($x35 (=> (and $x88 (bvule ?x194 (bvsub (bvadd ?x194 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x208 $x284)))))))
 (let (($x134 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x139 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x189 (_ bv1 32))) (or false (or false (and true (or $x72 $x134)))))))
 (let (($x41 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x189 (_ bv1 32)))) (or false (or false (and true (or $x72 $x134)))))))
 (let (($x54 (and $x41 $x35)))
 (let (($x131 (and $x54 $x295)))
 (let (($x183 (=> $x131 $x226)))
 (not $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x6 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x5 (or $x6 $x315)))
 (let (($x142 (= $x5 true)))
 (let (($x226 (= $x142 true)))
 (let ((?x189 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x130))))
 (let (($x298 (= (_ bv0 32) ?x68)))
 (let ((?x334 (ite $x298 (_ bv0 32) (_ bv1 32))))
 (let (($x36 (bvuge ?x334 (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x198 (= $x215 $x36)))
 (let (($x37 (=> $x6 $x198)))
 (let (($x441 (= ?x334 (_ bv0 32))))
 (let (($x184 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x318 (= $x184 $x441)))
 (let (($x256 (=> $x6 $x318)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x90 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x22 (concat (select input.dst.llvm-mem ?x90) (concat ?x111 (concat ?x229 ?x18)))))
 (let (($x179 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x22)))
 (let (($x124 (=> $x6 $x179)))
 (let ((?x149 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x325 (bvuge ?x149 (_ bv1 32))))
 (let (($x39 (= $x6 $x325)))
 (let (($x113 (= false false)))
 (let (($x174 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x45 (=> $x174 $x113)))
 (let (($x268 (= ?x149 (_ bv0 32))))
 (let (($x195 (= $x174 $x268)))
 (let (($x287 (and (and (and (and (and $x195 $x45) $x39) $x124) $x256) $x37)))
 (let (($x55 (= $x287 true)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x117 (concat ?x103 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x443 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x159 (concat ?x245 (concat ?x443 ?x117))))
 (let (($x75 (= (_ bv0 32) ?x159)))
 (let ((?x219 (ite $x75 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x219 (_ bv1 32))))
 (let (($x132 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x52 (= $x132 $x160)))
 (let (($x291 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x265 (=> $x291 $x52)))
 (let (($x95 (= ?x219 (_ bv0 32))))
 (let (($x30 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x309 (= $x30 $x95)))
 (let (($x128 (=> $x291 $x309)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x196)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x238)))
 (let (($x151 (= input.spec-%var-l-1.2.0 ?x296)))
 (let (($x147 (=> $x291 $x151)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x23 (ite $x77 (_ bv0 32) (_ bv1 32))))
 (let (($x74 (bvuge ?x23 (_ bv1 32))))
 (let (($x166 (= $x291 $x74)))
 (let (($x8 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x122 (=> $x8 $x113)))
 (let (($x317 (= ?x23 (_ bv0 32))))
 (let (($x63 (= $x8 $x317)))
 (let (($x280 (and (and (and (and (and $x63 $x122) $x166) $x147) $x128) $x265)))
 (let (($x289 (= $x280 true)))
 (let ((?x172 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x162 (= (_ bv0 3) ?x172)))
 (let (($x125 (= $x162 true)))
 (let (($x279 (= $x125 true)))
 (let (($x136 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x173 (= $x136 true)))
 (let (($x267 (= $x173 true)))
 (let (($x225 (= $x267 true)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x104)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x237 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x43)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x112 $x237)))
 (let (($x220 (and $x100 $x182)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x205 $x220)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x211 $x97)))))))
 (let (($x53 (and $x121 $x65)))
 (let (($x177 (= $x53 true)))
 (let (($x127 (= $x177 true)))
 (let (($x192 (= $x127 true)))
 (let ((?x78 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x78)))
 (let (($x87 (= ?x206 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x81 (= $x87 true)))
 (let (($x316 (= $x81 true)))
 (let (($x250 (and $x316 $x192)))
 (let (($x141 (and $x250 $x225)))
 (let (($x243 (and $x141 $x279)))
 (let (($x31 (and $x243 $x289)))
 (let (($x228 (and $x31 $x55)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x295 (and $x277 $x228)))
 (let ((?x194 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x284 (bvugt ?x194 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x194 (_ bv3 32)))))
 (let (($x306 (=> (bvule ?x194 (bvsub (bvadd ?x194 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x284)))))))
 (let (($x88 (not $x315)))
 (let (($x35 (=> (and $x88 (bvule ?x194 (bvsub (bvadd ?x194 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x208 $x284)))))))
 (let (($x134 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x139 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x189 (_ bv1 32))) (or false (or false (and true (or $x72 $x134)))))))
 (let (($x41 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x189 (_ bv1 32)))) (or false (or false (and true (or $x72 $x134)))))))
 (let (($x54 (and $x41 $x35)))
 (let (($x131 (and $x54 $x295)))
 (let (($x183 (=> $x131 $x226)))
 (not $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3248X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3248X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x294 (concat ?x251 (select input.dst.llvm-mem (bvadd input.ind-%var3248X (_ bv4 32))))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3248X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3248X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x286 (concat ?x171 (concat ?x271 ?x294))))
 (let (($x71 (= ?x286 ?x286)))
 (let ((?x181 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x202))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x292 (_ bv1 32))))
 (let (($x254 (=> $x143 $x71)))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3248X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3248X))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3248X (_ bv2 32))) ?x281)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3248X (_ bv3 32))) ?x137)))
 (let (($x64 (= ?x80 ?x80)))
 (let (($x20 (=> $x143 $x64)))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x146))))
 (let (($x85 (= (_ bv0 32) ?x25)))
 (let ((?x135 (ite $x85 (_ bv0 32) (_ bv1 32))))
 (let (($x444 (bvuge ?x135 (_ bv1 32))))
 (let (($x327 (= $x143 $x444)))
 (let (($x302 (= ?x135 (_ bv0 32))))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x50 (= $x236 $x302)))
 (let (($x49 (and (and (and (= ?x129 ?x25) (=> $x236 (= false false))) $x50) $x327)))
 (let (($x164 (and (and $x49 $x20) $x254)))
 (let (($x299 (= true true)))
 (let (($x145 (and $x299 $x164)))
 (let (($x47 (= $x145 true)))
 (let (($x126 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x158 (= $x126 $x143)))
 (let (($x206 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x258 (=> $x206 $x158)))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x206 $x86)))
 (let ((?x170 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x260 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x300 (concat (select input.dst.llvm-mem ?x260) (concat ?x138 (concat ?x169 ?x170)))))
 (let (($x67 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x300)))
 (let (($x442 (=> $x206 $x67)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x5 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x301 (bvuge ?x5 (_ bv1 32))))
 (let (($x48 (= $x206 $x301)))
 (let (($x268 (= false false)))
 (let (($x131 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x183 (=> $x131 $x268)))
 (let (($x142 (= ?x5 (_ bv0 32))))
 (let (($x226 (= $x131 $x142)))
 (let (($x32 (and (and (and (and (and $x226 $x183) $x48) $x442) $x153) $x258)))
 (let (($x70 (= $x32 true)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x12 (concat ?x16 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x130 (concat ?x312 (concat ?x207 ?x12))))
 (let (($x241 (= (_ bv0 32) ?x130)))
 (let ((?x68 (ite $x241 (_ bv0 32) (_ bv1 32))))
 (let (($x256 (bvuge ?x68 (_ bv1 32))))
 (let (($x318 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x230 (= $x318 $x256)))
 (let (($x45 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x215 (=> $x45 $x230)))
 (let (($x298 (= ?x68 (_ bv0 32))))
 (let (($x124 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x334 (= $x124 $x298)))
 (let (($x441 (=> $x45 $x334)))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x270)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x209)))
 (let (($x290 (= input.spec-%var-l-1.2.0 ?x214)))
 (let (($x22 (=> $x45 $x290)))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x10 (ite $x31 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x10 (_ bv1 32))))
 (let (($x6 (= $x45 $x235)))
 (let (($x280 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x195 (=> $x280 $x268)))
 (let (($x174 (= ?x10 (_ bv0 32))))
 (let (($x149 (= $x280 $x174)))
 (let (($x55 (and (and (and (and (and $x149 $x195) $x6) $x22) $x441) $x215)))
 (let (($x228 (= $x55 true)))
 (let ((?x128 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x186 (= (_ bv0 3) ?x128)))
 (let (($x132 (= $x186 true)))
 (let (($x160 (= $x132 true)))
 (let (($x156 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x156 true)))
 (let (($x75 (= $x159 true)))
 (let (($x219 (= $x75 true)))
 (let (($x147 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x125 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x8 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x125) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x125))))
 (let (($x185 (and true $x8)))
 (let (($x296 (and $x8 $x185)))
 (let (($x196 (= (bvand ?x25 (_ bv4294967288 32)) ?x25)))
 (let (($x291 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x238 (and $x291 $x196)))
 (let (($x113 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x19 (and (and (and (and (and $x185 $x113) $x291) $x238) $x296) $x147)))
 (let (($x245 (= true $x19)))
 (let (($x88 (not $x315)))
 (let (($x305 (=> $x88 $x245)))
 (let (($x443 (= $x305 true)))
 (let (($x255 (= $x443 true)))
 (let (($x103 (= $x255 true)))
 (let (($x141 (= $x88 true)))
 (let (($x199 (= $x141 true)))
 (let (($x172 (= $x199 true)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x177)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x182 $x65)))
 (let (($x192 (and $x53 $x127)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x234 $x192)))
 (let (($x288 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x288)))))))
 (let (($x324 (and $x104 $x250)))
 (let (($x136 (= $x324 true)))
 (let (($x173 (= $x136 true)))
 (let (($x267 (= $x173 true)))
 (let ((?x81 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x316 (bvneg ?x81)))
 (let (($x200 (= ?x316 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x193 (= $x200 true)))
 (let (($x120 (= $x193 true)))
 (let (($x225 (and $x120 $x267)))
 (let (($x162 (and $x225 $x172)))
 (let (($x216 (and $x162 $x103)))
 (let (($x95 (and $x216 $x219)))
 (let (($x52 (and $x95 $x160)))
 (let (($x295 (and $x52 $x228)))
 (let (($x180 (and $x295 $x70)))
 (let (($x157 (and $x206 $x180)))
 (let (($x297 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x274 (and $x297 $x157)))
 (let (($x82 (bvugt ?x9 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd ?x9 (_ bv3 32))))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x277 (=> (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x273 $x82)))))))
 (let (($x233 (=> (and $x88 (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x273 $x82)))))))
 (let (($x168 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x260)))
 (let (($x278 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x181 (_ bv1 32))) (or false (or false (and true (or $x203 $x168)))))))
 (let (($x178 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x181 (_ bv1 32)))) (or false (or false (and true (or $x203 $x168)))))))
 (let (($x175 (and $x178 $x233)))
 (let (($x340 (and $x175 $x274)))
 (let (($x83 (=> $x340 $x47)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3248X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3248X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x294 (concat ?x251 (select input.dst.llvm-mem (bvadd input.ind-%var3248X (_ bv4 32))))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3248X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3248X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x286 (concat ?x171 (concat ?x271 ?x294))))
 (let (($x71 (= ?x286 ?x286)))
 (let ((?x181 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x202))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x292 (_ bv1 32))))
 (let (($x254 (=> $x143 $x71)))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3248X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3248X))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3248X (_ bv2 32))) ?x281)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3248X (_ bv3 32))) ?x137)))
 (let (($x64 (= ?x80 ?x80)))
 (let (($x20 (=> $x143 $x64)))
 (let ((?x9 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x146))))
 (let (($x85 (= (_ bv0 32) ?x25)))
 (let ((?x135 (ite $x85 (_ bv0 32) (_ bv1 32))))
 (let (($x444 (bvuge ?x135 (_ bv1 32))))
 (let (($x327 (= $x143 $x444)))
 (let (($x302 (= ?x135 (_ bv0 32))))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x50 (= $x236 $x302)))
 (let (($x49 (and (and (and (= ?x129 ?x25) (=> $x236 (= false false))) $x50) $x327)))
 (let (($x164 (and (and $x49 $x20) $x254)))
 (let (($x299 (= true true)))
 (let (($x145 (and $x299 $x164)))
 (let (($x47 (= $x145 true)))
 (let (($x126 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x158 (= $x126 $x143)))
 (let (($x206 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x258 (=> $x206 $x158)))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x206 $x86)))
 (let ((?x170 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x260 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x300 (concat (select input.dst.llvm-mem ?x260) (concat ?x138 (concat ?x169 ?x170)))))
 (let (($x67 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x300)))
 (let (($x442 (=> $x206 $x67)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x5 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x301 (bvuge ?x5 (_ bv1 32))))
 (let (($x48 (= $x206 $x301)))
 (let (($x268 (= false false)))
 (let (($x131 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x183 (=> $x131 $x268)))
 (let (($x142 (= ?x5 (_ bv0 32))))
 (let (($x226 (= $x131 $x142)))
 (let (($x32 (and (and (and (and (and $x226 $x183) $x48) $x442) $x153) $x258)))
 (let (($x70 (= $x32 true)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x12 (concat ?x16 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x130 (concat ?x312 (concat ?x207 ?x12))))
 (let (($x241 (= (_ bv0 32) ?x130)))
 (let ((?x68 (ite $x241 (_ bv0 32) (_ bv1 32))))
 (let (($x256 (bvuge ?x68 (_ bv1 32))))
 (let (($x318 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x230 (= $x318 $x256)))
 (let (($x45 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x215 (=> $x45 $x230)))
 (let (($x298 (= ?x68 (_ bv0 32))))
 (let (($x124 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x334 (= $x124 $x298)))
 (let (($x441 (=> $x45 $x334)))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x270)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x209)))
 (let (($x290 (= input.spec-%var-l-1.2.0 ?x214)))
 (let (($x22 (=> $x45 $x290)))
 (let (($x31 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x10 (ite $x31 (_ bv0 32) (_ bv1 32))))
 (let (($x235 (bvuge ?x10 (_ bv1 32))))
 (let (($x6 (= $x45 $x235)))
 (let (($x280 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x195 (=> $x280 $x268)))
 (let (($x174 (= ?x10 (_ bv0 32))))
 (let (($x149 (= $x280 $x174)))
 (let (($x55 (and (and (and (and (and $x149 $x195) $x6) $x22) $x441) $x215)))
 (let (($x228 (= $x55 true)))
 (let ((?x128 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x186 (= (_ bv0 3) ?x128)))
 (let (($x132 (= $x186 true)))
 (let (($x160 (= $x132 true)))
 (let (($x156 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x156 true)))
 (let (($x75 (= $x159 true)))
 (let (($x219 (= $x75 true)))
 (let (($x147 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x125 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x8 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x125) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x125))))
 (let (($x185 (and true $x8)))
 (let (($x296 (and $x8 $x185)))
 (let (($x196 (= (bvand ?x25 (_ bv4294967288 32)) ?x25)))
 (let (($x291 (= (bvand ?x9 (_ bv4294967292 32)) ?x9)))
 (let (($x238 (and $x291 $x196)))
 (let (($x113 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x9 (bvsub ?x9 (_ bv4 32))) (bvult ?x9 (bvsub ?x9 (_ bv4 32))))))
 (let (($x19 (and (and (and (and (and $x185 $x113) $x291) $x238) $x296) $x147)))
 (let (($x245 (= true $x19)))
 (let (($x88 (not $x315)))
 (let (($x305 (=> $x88 $x245)))
 (let (($x443 (= $x305 true)))
 (let (($x255 (= $x443 true)))
 (let (($x103 (= $x255 true)))
 (let (($x141 (= $x88 true)))
 (let (($x199 (= $x141 true)))
 (let (($x172 (= $x199 true)))
 (let ((?x177 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x177)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x182 $x65)))
 (let (($x192 (and $x53 $x127)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x250 (and $x234 $x192)))
 (let (($x288 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x288)))))))
 (let (($x324 (and $x104 $x250)))
 (let (($x136 (= $x324 true)))
 (let (($x173 (= $x136 true)))
 (let (($x267 (= $x173 true)))
 (let ((?x81 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x316 (bvneg ?x81)))
 (let (($x200 (= ?x316 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x193 (= $x200 true)))
 (let (($x120 (= $x193 true)))
 (let (($x225 (and $x120 $x267)))
 (let (($x162 (and $x225 $x172)))
 (let (($x216 (and $x162 $x103)))
 (let (($x95 (and $x216 $x219)))
 (let (($x52 (and $x95 $x160)))
 (let (($x295 (and $x52 $x228)))
 (let (($x180 (and $x295 $x70)))
 (let (($x157 (and $x206 $x180)))
 (let (($x297 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x274 (and $x297 $x157)))
 (let (($x82 (bvugt ?x9 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd ?x9 (_ bv3 32))))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x277 (=> (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x273 $x82)))))))
 (let (($x233 (=> (and $x88 (bvule ?x9 (bvsub (bvadd ?x9 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x273 $x82)))))))
 (let (($x168 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x260)))
 (let (($x278 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x181 (_ bv1 32))) (or false (or false (and true (or $x203 $x168)))))))
 (let (($x178 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x181 (_ bv1 32)))) (or false (or false (and true (or $x203 $x168)))))))
 (let (($x175 (and $x178 $x233)))
 (let (($x340 (and $x175 $x274)))
 (let (($x83 (=> $x340 $x47)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x48 (= $x315 false)))
 (let (($x115 (= $x48 true)))
 (let ((?x72 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x12))))
 (let (($x441 (= (_ bv0 32) ?x334)))
 (let ((?x287 (ite $x441 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x287 (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x228 (= $x215 $x55)))
 (let (($x111 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x295 (=> $x111 $x228)))
 (let (($x318 (= ?x287 (_ bv0 32))))
 (let (($x207 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x256 (= $x207 $x318)))
 (let (($x230 (=> $x111 $x256)))
 (let ((?x270 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x94 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x341 (concat (select input.dst.llvm-mem ?x94) (concat ?x37 (concat ?x214 ?x270)))))
 (let (($x239 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x341)))
 (let (($x312 (=> $x111 $x239)))
 (let ((?x325 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x439 (bvuge ?x325 (_ bv1 32))))
 (let (($x227 (= $x111 $x439)))
 (let (($x165 (= false false)))
 (let (($x198 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x285 (=> $x198 $x165)))
 (let (($x229 (= ?x325 (_ bv0 32))))
 (let (($x18 (= $x198 $x229)))
 (let (($x226 (and (and (and (and (and $x18 $x285) $x227) $x312) $x230) $x295)))
 (let (($x183 (= $x226 true)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x156 (concat ?x117 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x309 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x128 (concat ?x309 (concat ?x75 ?x156))))
 (let (($x186 (= (_ bv0 32) ?x128)))
 (let ((?x132 (ite $x186 (_ bv0 32) (_ bv1 32))))
 (let (($x289 (bvuge ?x132 (_ bv1 32))))
 (let (($x280 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x31 (= $x280 $x289)))
 (let (($x242 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x10 (=> $x242 $x31)))
 (let (($x160 (= ?x132 (_ bv0 32))))
 (let (($x443 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x52 (= $x443 $x160)))
 (let (($x265 (=> $x242 $x52)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x191)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x296)))
 (let (($x19 (= input.spec-%var-l-1.2.0 ?x147)))
 (let (($x245 (=> $x242 $x19)))
 (let (($x291 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x51 (ite $x291 (_ bv0 32) (_ bv1 32))))
 (let (($x259 (bvuge ?x51 (_ bv1 32))))
 (let (($x221 (= $x242 $x259)))
 (let (($x122 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x79 (=> $x122 $x165)))
 (let (($x74 (= ?x51 (_ bv0 32))))
 (let (($x293 (= $x122 $x74)))
 (let (($x36 (and (and (and (and (and $x293 $x79) $x221) $x245) $x265) $x10)))
 (let (($x45 (= $x36 true)))
 (let ((?x23 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x77 (= (_ bv0 3) ?x23)))
 (let (($x317 (= $x77 true)))
 (let (($x63 (= $x317 true)))
 (let (($x279 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x125 (= $x279 true)))
 (let (($x243 (= $x125 true)))
 (let (($x133 (= $x243 true)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x324 (= (_ bv0 32) ?x250)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x53 $x127)))
 (let (($x136 (and $x192 $x324)))
 (let (($x121 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x121 $x136)))
 (let (($x237 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x237)))))))
 (let (($x267 (and $x65 $x173)))
 (let (($x225 (= $x267 true)))
 (let (($x141 (= $x225 true)))
 (let (($x199 (= $x141 true)))
 (let ((?x187 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x187)))
 (let (($x120 (= ?x200 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x266 (= $x120 true)))
 (let (($x176 (= $x266 true)))
 (let (($x172 (and $x176 $x199)))
 (let (($x8 (and $x172 $x133)))
 (let (($x113 (and $x8 $x63)))
 (let (($x235 (and $x113 $x45)))
 (let (($x123 (and $x235 $x183)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x206 (and $x87 $x123)))
 (let ((?x152 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x35 (bvugt ?x152 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x306 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x152 (_ bv3 32)))))
 (let (($x297 (=> (bvule ?x152 (bvsub (bvadd ?x152 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x306 $x35)))))))
 (let (($x88 (not $x315)))
 (let (($x46 (=> (and $x88 (bvule ?x152 (bvsub (bvadd ?x152 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x306 $x35)))))))
 (let (($x41 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x284 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x72 (_ bv1 32))) (or false (or false (and true (or $x139 $x41)))))))
 (let (($x90 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x72 (_ bv1 32)))) (or false (or false (and true (or $x139 $x41)))))))
 (let (($x109 (and $x90 $x46)))
 (let (($x301 (and $x109 $x206)))
 (let (($x276 (=> $x301 $x115)))
 (not $x276))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x48 (= $x315 false)))
 (let (($x115 (= $x48 true)))
 (let ((?x72 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x12))))
 (let (($x441 (= (_ bv0 32) ?x334)))
 (let ((?x287 (ite $x441 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x287 (_ bv1 32))))
 (let (($x215 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x228 (= $x215 $x55)))
 (let (($x111 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x295 (=> $x111 $x228)))
 (let (($x318 (= ?x287 (_ bv0 32))))
 (let (($x207 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x256 (= $x207 $x318)))
 (let (($x230 (=> $x111 $x256)))
 (let ((?x270 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x94 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x341 (concat (select input.dst.llvm-mem ?x94) (concat ?x37 (concat ?x214 ?x270)))))
 (let (($x239 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x341)))
 (let (($x312 (=> $x111 $x239)))
 (let ((?x325 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x439 (bvuge ?x325 (_ bv1 32))))
 (let (($x227 (= $x111 $x439)))
 (let (($x165 (= false false)))
 (let (($x198 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x285 (=> $x198 $x165)))
 (let (($x229 (= ?x325 (_ bv0 32))))
 (let (($x18 (= $x198 $x229)))
 (let (($x226 (and (and (and (and (and $x18 $x285) $x227) $x312) $x230) $x295)))
 (let (($x183 (= $x226 true)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x156 (concat ?x117 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x309 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x128 (concat ?x309 (concat ?x75 ?x156))))
 (let (($x186 (= (_ bv0 32) ?x128)))
 (let ((?x132 (ite $x186 (_ bv0 32) (_ bv1 32))))
 (let (($x289 (bvuge ?x132 (_ bv1 32))))
 (let (($x280 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x31 (= $x280 $x289)))
 (let (($x242 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x10 (=> $x242 $x31)))
 (let (($x160 (= ?x132 (_ bv0 32))))
 (let (($x443 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x52 (= $x443 $x160)))
 (let (($x265 (=> $x242 $x52)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x191)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x296)))
 (let (($x19 (= input.spec-%var-l-1.2.0 ?x147)))
 (let (($x245 (=> $x242 $x19)))
 (let (($x291 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x51 (ite $x291 (_ bv0 32) (_ bv1 32))))
 (let (($x259 (bvuge ?x51 (_ bv1 32))))
 (let (($x221 (= $x242 $x259)))
 (let (($x122 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x79 (=> $x122 $x165)))
 (let (($x74 (= ?x51 (_ bv0 32))))
 (let (($x293 (= $x122 $x74)))
 (let (($x36 (and (and (and (and (and $x293 $x79) $x221) $x245) $x265) $x10)))
 (let (($x45 (= $x36 true)))
 (let ((?x23 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x77 (= (_ bv0 3) ?x23)))
 (let (($x317 (= $x77 true)))
 (let (($x63 (= $x317 true)))
 (let (($x279 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x125 (= $x279 true)))
 (let (($x243 (= $x125 true)))
 (let (($x133 (= $x243 true)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x324 (= (_ bv0 32) ?x250)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x53 $x127)))
 (let (($x136 (and $x192 $x324)))
 (let (($x121 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x121 $x136)))
 (let (($x237 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x237)))))))
 (let (($x267 (and $x65 $x173)))
 (let (($x225 (= $x267 true)))
 (let (($x141 (= $x225 true)))
 (let (($x199 (= $x141 true)))
 (let ((?x187 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x187)))
 (let (($x120 (= ?x200 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x266 (= $x120 true)))
 (let (($x176 (= $x266 true)))
 (let (($x172 (and $x176 $x199)))
 (let (($x8 (and $x172 $x133)))
 (let (($x113 (and $x8 $x63)))
 (let (($x235 (and $x113 $x45)))
 (let (($x123 (and $x235 $x183)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x206 (and $x87 $x123)))
 (let ((?x152 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x35 (bvugt ?x152 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x306 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x152 (_ bv3 32)))))
 (let (($x297 (=> (bvule ?x152 (bvsub (bvadd ?x152 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x306 $x35)))))))
 (let (($x88 (not $x315)))
 (let (($x46 (=> (and $x88 (bvule ?x152 (bvsub (bvadd ?x152 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x306 $x35)))))))
 (let (($x41 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x284 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x72 (_ bv1 32))) (or false (or false (and true (or $x139 $x41)))))))
 (let (($x90 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x72 (_ bv1 32)))) (or false (or false (and true (or $x139 $x41)))))))
 (let (($x109 (and $x90 $x46)))
 (let (($x301 (and $x109 $x206)))
 (let (($x276 (=> $x301 $x115)))
 (not $x276))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000005 #xff))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8388608 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8388608 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv8388611 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x67 (= $x315 false)))
 (let (($x442 (= $x67 true)))
 (let (($x183 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x209 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x276 (and $x209 $x183)))
 (let (($x21 (not $x276)))
 (let (($x232 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x48 (and $x209 $x232)))
 (let (($x115 (not $x48)))
 (let ((?x203 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x334))))
 (let (($x215 (= (_ bv0 32) ?x142)))
 (let ((?x55 (ite $x215 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (bvuge ?x55 (_ bv1 32))))
 (let (($x206 (= $x183 $x123)))
 (let (($x301 (=> $x209 $x206)))
 (let (($x228 (= ?x55 (_ bv0 32))))
 (let (($x295 (= $x232 $x228)))
 (let (($x226 (=> $x209 $x295)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x194 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x298 (concat (select input.dst.llvm-mem ?x194) (concat ?x93 (concat ?x239 ?x179)))))
 (let (($x89 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x298)))
 (let (($x130 (=> $x209 $x89)))
 (let ((?x39 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x214 (bvuge ?x39 (_ bv1 32))))
 (let (($x270 (= $x209 $x214)))
 (let (($x242 (= false false)))
 (let (($x131 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x37 (=> $x131 $x242)))
 (let (($x124 (= ?x39 (_ bv0 32))))
 (let (($x22 (= $x131 $x124)))
 (let (($x247 (and (and (and (and (and (and $x22 $x37) $x270) $x130) $x226) $x301) $x115)))
 (let (($x169 (and $x247 $x21)))
 (let (($x170 (= $x169 true)))
 (let (($x195 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x221 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x45 (and $x221 $x195)))
 (let (($x235 (not $x45)))
 (let (($x443 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x10 (and $x221 $x443)))
 (let (($x36 (not $x10)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x75 (concat ?x159 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x128 (concat ?x219 (concat ?x117 ?x75))))
 (let (($x186 (= (_ bv0 32) ?x128)))
 (let ((?x132 (ite $x186 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x132 (_ bv1 32))))
 (let (($x289 (= $x195 $x280)))
 (let (($x31 (=> $x221 $x289)))
 (let (($x160 (= ?x132 (_ bv0 32))))
 (let (($x52 (= $x443 $x160)))
 (let (($x265 (=> $x221 $x52)))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x30)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x191)))
 (let (($x245 (= input.spec-%var-l-1.2.0 ?x19)))
 (let (($x268 (=> $x221 $x245)))
 (let (($x293 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x165 (ite $x293 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x165 (_ bv1 32))))
 (let (($x166 (= $x221 $x149)))
 (let (($x51 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x259 (=> $x51 $x242)))
 (let (($x79 (= ?x165 (_ bv0 32))))
 (let (($x174 (= $x51 $x79)))
 (let (($x285 (and (and (and (and (and (and $x174 $x259) $x166) $x268) $x265) $x31) $x36)))
 (let (($x78 (and $x285 $x235)))
 (let (($x111 (= $x78 true)))
 (let ((?x63 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x113 (= (_ bv0 3) ?x63)))
 (let (($x24 (= $x113 true)))
 (let (($x122 (= $x24 true)))
 (let (($x133 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x8 (= $x133 true)))
 (let (($x185 (= $x8 true)))
 (let (($x23 (= $x185 true)))
 (let ((?x173 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x267 (= (_ bv0 32) ?x173)))
 (let ((?x250 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x324 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x250)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x192 $x324)))
 (let (($x225 (and $x136 $x267)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x43 $x225)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x182)))))))
 (let (($x199 (and $x127 $x141)))
 (let (($x172 (= $x199 true)))
 (let (($x162 (= $x172 true)))
 (let (($x279 (= $x162 true)))
 (let ((?x193 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x193)))
 (let (($x176 (= ?x120 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x288 (= $x176 true)))
 (let (($x205 (= $x288 true)))
 (let (($x125 (and $x205 $x279)))
 (let (($x77 (and $x125 $x23)))
 (let (($x33 (and $x77 $x122)))
 (let (($x439 (and $x33 $x111)))
 (let (($x190 (and $x439 $x170)))
 (let (($x316 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x99 (and $x316 $x190)))
 (let ((?x208 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x233 (bvugt ?x208 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x208 (_ bv3 32)))))
 (let (($x87 (=> (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x277 $x233)))))))
 (let (($x88 (not $x315)))
 (let (($x57 (=> (and $x88 (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x277 $x233)))))))
 (let (($x178 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x82 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x203 (_ bv1 32))) (or false (or false (and true (or $x278 $x178)))))))
 (let (($x260 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x203 (_ bv1 32)))) (or false (or false (and true (or $x278 $x178)))))))
 (let (($x42 (and $x260 $x57)))
 (let (($x300 (and $x42 $x99)))
 (let (($x107 (=> $x300 $x442)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x67 (= $x315 false)))
 (let (($x442 (= $x67 true)))
 (let (($x183 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x209 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x276 (and $x209 $x183)))
 (let (($x21 (not $x276)))
 (let (($x232 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x48 (and $x209 $x232)))
 (let (($x115 (not $x48)))
 (let ((?x203 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x334))))
 (let (($x215 (= (_ bv0 32) ?x142)))
 (let ((?x55 (ite $x215 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (bvuge ?x55 (_ bv1 32))))
 (let (($x206 (= $x183 $x123)))
 (let (($x301 (=> $x209 $x206)))
 (let (($x228 (= ?x55 (_ bv0 32))))
 (let (($x295 (= $x232 $x228)))
 (let (($x226 (=> $x209 $x295)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x194 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x298 (concat (select input.dst.llvm-mem ?x194) (concat ?x93 (concat ?x239 ?x179)))))
 (let (($x89 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x298)))
 (let (($x130 (=> $x209 $x89)))
 (let ((?x39 (ite $x315 (_ bv0 32) (_ bv1 32))))
 (let (($x214 (bvuge ?x39 (_ bv1 32))))
 (let (($x270 (= $x209 $x214)))
 (let (($x242 (= false false)))
 (let (($x131 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x37 (=> $x131 $x242)))
 (let (($x124 (= ?x39 (_ bv0 32))))
 (let (($x22 (= $x131 $x124)))
 (let (($x247 (and (and (and (and (and (and $x22 $x37) $x270) $x130) $x226) $x301) $x115)))
 (let (($x169 (and $x247 $x21)))
 (let (($x170 (= $x169 true)))
 (let (($x195 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x221 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x45 (and $x221 $x195)))
 (let (($x235 (not $x45)))
 (let (($x443 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x10 (and $x221 $x443)))
 (let (($x36 (not $x10)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x75 (concat ?x159 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x128 (concat ?x219 (concat ?x117 ?x75))))
 (let (($x186 (= (_ bv0 32) ?x128)))
 (let ((?x132 (ite $x186 (_ bv0 32) (_ bv1 32))))
 (let (($x280 (bvuge ?x132 (_ bv1 32))))
 (let (($x289 (= $x195 $x280)))
 (let (($x31 (=> $x221 $x289)))
 (let (($x160 (= ?x132 (_ bv0 32))))
 (let (($x52 (= $x443 $x160)))
 (let (($x265 (=> $x221 $x52)))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x30)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x191)))
 (let (($x245 (= input.spec-%var-l-1.2.0 ?x19)))
 (let (($x268 (=> $x221 $x245)))
 (let (($x293 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x165 (ite $x293 (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x165 (_ bv1 32))))
 (let (($x166 (= $x221 $x149)))
 (let (($x51 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x259 (=> $x51 $x242)))
 (let (($x79 (= ?x165 (_ bv0 32))))
 (let (($x174 (= $x51 $x79)))
 (let (($x285 (and (and (and (and (and (and $x174 $x259) $x166) $x268) $x265) $x31) $x36)))
 (let (($x78 (and $x285 $x235)))
 (let (($x111 (= $x78 true)))
 (let ((?x63 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x113 (= (_ bv0 3) ?x63)))
 (let (($x24 (= $x113 true)))
 (let (($x122 (= $x24 true)))
 (let (($x133 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x8 (= $x133 true)))
 (let (($x185 (= $x8 true)))
 (let (($x23 (= $x185 true)))
 (let ((?x173 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x267 (= (_ bv0 32) ?x173)))
 (let ((?x250 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x324 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x250)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x192 $x324)))
 (let (($x225 (and $x136 $x267)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x43 $x225)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x182)))))))
 (let (($x199 (and $x127 $x141)))
 (let (($x172 (= $x199 true)))
 (let (($x162 (= $x172 true)))
 (let (($x279 (= $x162 true)))
 (let ((?x193 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x193)))
 (let (($x176 (= ?x120 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x288 (= $x176 true)))
 (let (($x205 (= $x288 true)))
 (let (($x125 (and $x205 $x279)))
 (let (($x77 (and $x125 $x23)))
 (let (($x33 (and $x77 $x122)))
 (let (($x439 (and $x33 $x111)))
 (let (($x190 (and $x439 $x170)))
 (let (($x316 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x99 (and $x316 $x190)))
 (let ((?x208 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x233 (bvugt ?x208 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x208 (_ bv3 32)))))
 (let (($x87 (=> (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x277 $x233)))))))
 (let (($x88 (not $x315)))
 (let (($x57 (=> (and $x88 (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x277 $x233)))))))
 (let (($x178 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x82 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x203 (_ bv1 32))) (or false (or false (and true (or $x278 $x178)))))))
 (let (($x260 (=> (and $x88 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x203 (_ bv1 32)))) (or false (or false (and true (or $x278 $x178)))))))
 (let (($x42 (and $x260 $x57)))
 (let (($x300 (and $x42 $x99)))
 (let (($x107 (=> $x300 $x442)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L3%5%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L3%5%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L3%5%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000005 #xff))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8388608 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8388608 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv8388611 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x203 (not $x14)))
 (let (($x78 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x48 (or $x78 $x203)))
 (let (($x115 (= $x48 true)))
 (let (($x247 (= $x115 true)))
 (let ((?x273 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem ?x273))))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv2 32))) ?x130))))
 (let (($x287 (= (_ bv0 32) ?x441)))
 (let ((?x12 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x142 (bvuge ?x12 (_ bv1 32))))
 (let (($x318 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x215 (= $x318 $x142)))
 (let (($x39 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x55 (=> $x39 $x215)))
 (let (($x241 (= ?x12 (_ bv0 32))))
 (let (($x312 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x184 (= $x312 $x241)))
 (let (($x334 (=> $x39 $x184)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x178 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x93 (concat (select input.dst.llvm-mem ?x178) (concat ?x290 (concat ?x214 ?x27)))))
 (let (($x341 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x93)))
 (let (($x239 (=> $x39 $x341)))
 (let ((?x111 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (bvuge ?x111 (_ bv1 32))))
 (let (($x22 (= $x39 $x124)))
 (let (($x295 (and (and (= $x78 (= ?x111 (_ bv0 32))) (=> $x78 (= false false))) $x22)))
 (let (($x183 (and (and (and $x295 $x239) $x334) $x55)))
 (let (($x123 (= $x183 true)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x216 (concat ?x219 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x309 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x103 (concat ?x75 (concat ?x309 ?x216))))
 (let (($x128 (= (_ bv0 32) ?x103)))
 (let ((?x186 (ite $x128 (_ bv0 32) (_ bv1 32))))
 (let (($x229 (bvuge ?x186 (_ bv1 32))))
 (let (($x265 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x195 (= $x265 $x229)))
 (let (($x149 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x280 (=> $x149 $x195)))
 (let (($x132 (= ?x186 (_ bv0 32))))
 (let (($x305 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x160 (= $x305 $x132)))
 (let (($x52 (=> $x149 $x160)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x222)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x245 (= input.spec-%var-l-1.2.0 ?x19)))
 (let (($x268 (=> $x149 $x245)))
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x174 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x166 (bvuge ?x174 (_ bv1 32))))
 (let (($x198 (= $x149 $x166)))
 (let (($x6 (= false false)))
 (let (($x293 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x221 (=> $x293 $x6)))
 (let (($x242 (= ?x174 (_ bv0 32))))
 (let (($x259 (= $x293 $x242)))
 (let (($x36 (and (and (and (and (and $x259 $x221) $x198) $x268) $x52) $x280)))
 (let (($x285 (= $x36 true)))
 (let ((?x24 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x122 (= (_ bv0 3) ?x24)))
 (let (($x33 (= $x122 true)))
 (let (($x291 (= $x33 true)))
 (let (($x185 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x23 (= $x185 true)))
 (let (($x77 (= $x23 true)))
 (let (($x317 (= $x77 true)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x225)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x136)))
 (let (($x324 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (and $x324 $x173)))
 (let (($x199 (and $x267 $x141)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x97 $x199)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x250 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x167 $x121)))))))
 (let (($x162 (and $x250 $x172)))
 (let (($x279 (= $x162 true)))
 (let (($x125 (= $x279 true)))
 (let (($x243 (= $x125 true)))
 (let ((?x120 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x266 (bvneg ?x120)))
 (let (($x288 (= ?x266 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x205 (= $x288 true)))
 (let (($x237 (= $x205 true)))
 (let (($x133 (and $x237 $x243)))
 (let (($x63 (and $x133 $x317)))
 (let (($x51 (and $x63 $x291)))
 (let (($x45 (and $x51 $x285)))
 (let (($x206 (and $x45 $x123)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x301 (and $x187 $x206)))
 (let ((?x72 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x297 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x72 (_ bv3 32)))))
 (let (($x81 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x297)))))))
 (let (($x35 (=> (and $x203 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x175 $x297)))))))
 (let (($x284 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x306 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x273 (_ bv1 32))) (or false (or false (and true (or $x9 $x284)))))))
 (let (($x88 (=> (and $x203 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x273 (_ bv1 32)))) (or false (or false (and true (or $x9 $x284)))))))
 (let (($x61 (and $x88 $x35)))
 (let (($x138 (and $x61 $x301)))
 (let (($x276 (=> $x138 $x247)))
 (not $x276)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x203 (not $x14)))
 (let (($x78 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x48 (or $x78 $x203)))
 (let (($x115 (= $x48 true)))
 (let (($x247 (= $x115 true)))
 (let ((?x273 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem ?x273))))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv2 32))) ?x130))))
 (let (($x287 (= (_ bv0 32) ?x441)))
 (let ((?x12 (ite $x287 (_ bv0 32) (_ bv1 32))))
 (let (($x142 (bvuge ?x12 (_ bv1 32))))
 (let (($x318 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x215 (= $x318 $x142)))
 (let (($x39 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x55 (=> $x39 $x215)))
 (let (($x241 (= ?x12 (_ bv0 32))))
 (let (($x312 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x184 (= $x312 $x241)))
 (let (($x334 (=> $x39 $x184)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x178 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x93 (concat (select input.dst.llvm-mem ?x178) (concat ?x290 (concat ?x214 ?x27)))))
 (let (($x341 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x93)))
 (let (($x239 (=> $x39 $x341)))
 (let ((?x111 (ite $x14 (_ bv0 32) (_ bv1 32))))
 (let (($x124 (bvuge ?x111 (_ bv1 32))))
 (let (($x22 (= $x39 $x124)))
 (let (($x295 (and (and (= $x78 (= ?x111 (_ bv0 32))) (=> $x78 (= false false))) $x22)))
 (let (($x183 (and (and (and $x295 $x239) $x334) $x55)))
 (let (($x123 (= $x183 true)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x216 (concat ?x219 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x309 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x103 (concat ?x75 (concat ?x309 ?x216))))
 (let (($x128 (= (_ bv0 32) ?x103)))
 (let ((?x186 (ite $x128 (_ bv0 32) (_ bv1 32))))
 (let (($x229 (bvuge ?x186 (_ bv1 32))))
 (let (($x265 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x195 (= $x265 $x229)))
 (let (($x149 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x280 (=> $x149 $x195)))
 (let (($x132 (= ?x186 (_ bv0 32))))
 (let (($x305 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x160 (= $x305 $x132)))
 (let (($x52 (=> $x149 $x160)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x222)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x151)))
 (let (($x245 (= input.spec-%var-l-1.2.0 ?x19)))
 (let (($x268 (=> $x149 $x245)))
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x174 (ite $x79 (_ bv0 32) (_ bv1 32))))
 (let (($x166 (bvuge ?x174 (_ bv1 32))))
 (let (($x198 (= $x149 $x166)))
 (let (($x6 (= false false)))
 (let (($x293 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x221 (=> $x293 $x6)))
 (let (($x242 (= ?x174 (_ bv0 32))))
 (let (($x259 (= $x293 $x242)))
 (let (($x36 (and (and (and (and (and $x259 $x221) $x198) $x268) $x52) $x280)))
 (let (($x285 (= $x36 true)))
 (let ((?x24 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x122 (= (_ bv0 3) ?x24)))
 (let (($x33 (= $x122 true)))
 (let (($x291 (= $x33 true)))
 (let (($x185 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x23 (= $x185 true)))
 (let (($x77 (= $x23 true)))
 (let (($x317 (= $x77 true)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x225)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x136)))
 (let (($x324 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (and $x324 $x173)))
 (let (($x199 (and $x267 $x141)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x97 $x199)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x250 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x167 $x121)))))))
 (let (($x162 (and $x250 $x172)))
 (let (($x279 (= $x162 true)))
 (let (($x125 (= $x279 true)))
 (let (($x243 (= $x125 true)))
 (let ((?x120 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x266 (bvneg ?x120)))
 (let (($x288 (= ?x266 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x205 (= $x288 true)))
 (let (($x237 (= $x205 true)))
 (let (($x133 (and $x237 $x243)))
 (let (($x63 (and $x133 $x317)))
 (let (($x51 (and $x63 $x291)))
 (let (($x45 (and $x51 $x285)))
 (let (($x206 (and $x45 $x123)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x301 (and $x187 $x206)))
 (let ((?x72 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x297 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x72 (_ bv3 32)))))
 (let (($x81 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x297)))))))
 (let (($x35 (=> (and $x203 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x175 $x297)))))))
 (let (($x284 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x306 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x273 (_ bv1 32))) (or false (or false (and true (or $x9 $x284)))))))
 (let (($x88 (=> (and $x203 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x273 (_ bv1 32)))) (or false (or false (and true (or $x9 $x284)))))))
 (let (($x61 (and $x88 $x35)))
 (let (($x138 (and $x61 $x301)))
 (let (($x276 (=> $x138 $x247)))
 (not $x276)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x130 (= input.spec-%var-sum-0.L3%5%bbentry input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x232 (= $x130 true)))
 (let (($x441 (= $x232 true)))
 (let ((?x227 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv1 32))) (select input.dst.llvm-mem ?x227))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv2 32))) ?x124))))
 (let (($x209 (= (_ bv0 32) ?x290)))
 (let ((?x214 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x341 (bvuge ?x214 (_ bv1 32))))
 (let (($x93 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x239 (= $x93 $x341)))
 (let (($x103 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x226 (=> $x103 $x239)))
 (let (($x27 (= ?x214 (_ bv0 32))))
 (let (($x439 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x270 (= $x439 $x27)))
 (let (($x68 (=> $x103 $x270)))
 (let ((?x160 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let ((?x45 (concat ?x285 (concat ?x195 (concat ?x10 ?x160)))))
 (let (($x235 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x45)))
 (let (($x78 (=> $x103 $x235)))
 (let (($x273 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x219 (ite $x273 (_ bv0 32) (_ bv1 32))))
 (let (($x128 (bvuge ?x219 (_ bv1 32))))
 (let (($x186 (= $x103 $x128)))
 (let (($x133 (= false false)))
 (let (($x98 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x159 (=> $x98 $x133)))
 (let (($x255 (= ?x219 (_ bv0 32))))
 (let (($x216 (= $x98 $x255)))
 (let (($x100 (and (and (and (and (and $x216 $x159) $x186) $x78) $x68) $x226)))
 (let (($x16 (= $x100 true)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x322 (concat ?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x147 (concat ?x238 (concat ?x191 ?x322))))
 (let (($x25 (= (_ bv0 32) ?x147)))
 (let ((?x296 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (bvuge ?x296 (_ bv1 32))))
 (let (($x245 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x18 (= $x245 $x268)))
 (let (($x185 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x325 (=> $x185 $x18)))
 (let (($x222 (= ?x296 (_ bv0 32))))
 (let (($x289 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x151 (= $x289 $x222)))
 (let (($x19 (=> $x185 $x151)))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x291)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x165)))
 (let (($x259 (= input.spec-%var-l-1.2.0 ?x242)))
 (let (($x6 (=> $x185 $x259)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x279 (ite $x162 (_ bv0 32) (_ bv1 32))))
 (let (($x23 (bvuge ?x279 (_ bv1 32))))
 (let (($x77 (= $x185 $x23)))
 (let (($x199 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x8 (=> $x199 $x133)))
 (let (($x125 (= ?x279 (_ bv0 32))))
 (let (($x243 (= $x199 $x125)))
 (let (($x117 (and (and (and (and (and $x243 $x8) $x77) $x6) $x19) $x325)))
 (let (($x309 (= $x117 true)))
 (let ((?x177 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x177)))
 (let (($x136 (= ?x97 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x173 (= $x136 true)))
 (let (($x267 (= $x173 true)))
 (let ((?x234 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x234)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x288)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x266 $x205)))
 (let (($x192 (and $x237 $x182)))
 (let (($x233 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x233 $x192)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x81)))))))
 (let (($x167 (and $x120 $x65)))
 (let (($x121 (= $x167 true)))
 (let (($x53 (= $x121 true)))
 (let (($x127 (= $x53 true)))
 (let (($x152 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x82 (= $x152 true)))
 (let (($x260 (= $x82 true)))
 (let (($x306 (= $x260 true)))
 (let ((?x17 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (= (_ bv0 3) ?x17)))
 (let (($x9 (= $x178 true)))
 (let (($x278 (= $x9 true)))
 (let (($x139 (= $x273 true)))
 (let (($x41 (= $x139 true)))
 (let (($x208 (= $x41 true)))
 (let (($x284 (and $x208 $x278)))
 (let (($x88 (and $x284 $x306)))
 (let (($x112 (and $x88 $x127)))
 (let (($x225 (and $x112 $x267)))
 (let (($x156 (and $x225 $x309)))
 (let (($x298 (and $x156 $x16)))
 (let (($x89 (and $x98 $x298)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x207 (and $x94 $x89)))
 (let (($x287 (=> $x207 $x441)))
 (not $x287))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x130 (= input.spec-%var-sum-0.L3%5%bbentry input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x232 (= $x130 true)))
 (let (($x441 (= $x232 true)))
 (let ((?x227 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv1 32))) (select input.dst.llvm-mem ?x227))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv2 32))) ?x124))))
 (let (($x209 (= (_ bv0 32) ?x290)))
 (let ((?x214 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x341 (bvuge ?x214 (_ bv1 32))))
 (let (($x93 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x239 (= $x93 $x341)))
 (let (($x103 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x226 (=> $x103 $x239)))
 (let (($x27 (= ?x214 (_ bv0 32))))
 (let (($x439 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x270 (= $x439 $x27)))
 (let (($x68 (=> $x103 $x270)))
 (let ((?x160 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let ((?x45 (concat ?x285 (concat ?x195 (concat ?x10 ?x160)))))
 (let (($x235 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x45)))
 (let (($x78 (=> $x103 $x235)))
 (let (($x273 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x219 (ite $x273 (_ bv0 32) (_ bv1 32))))
 (let (($x128 (bvuge ?x219 (_ bv1 32))))
 (let (($x186 (= $x103 $x128)))
 (let (($x133 (= false false)))
 (let (($x98 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x159 (=> $x98 $x133)))
 (let (($x255 (= ?x219 (_ bv0 32))))
 (let (($x216 (= $x98 $x255)))
 (let (($x100 (and (and (and (and (and $x216 $x159) $x186) $x78) $x68) $x226)))
 (let (($x16 (= $x100 true)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x322 (concat ?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x147 (concat ?x238 (concat ?x191 ?x322))))
 (let (($x25 (= (_ bv0 32) ?x147)))
 (let ((?x296 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x268 (bvuge ?x296 (_ bv1 32))))
 (let (($x245 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x18 (= $x245 $x268)))
 (let (($x185 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x325 (=> $x185 $x18)))
 (let (($x222 (= ?x296 (_ bv0 32))))
 (let (($x289 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x151 (= $x289 $x222)))
 (let (($x19 (=> $x185 $x151)))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x291)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x165)))
 (let (($x259 (= input.spec-%var-l-1.2.0 ?x242)))
 (let (($x6 (=> $x185 $x259)))
 (let (($x162 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x279 (ite $x162 (_ bv0 32) (_ bv1 32))))
 (let (($x23 (bvuge ?x279 (_ bv1 32))))
 (let (($x77 (= $x185 $x23)))
 (let (($x199 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x8 (=> $x199 $x133)))
 (let (($x125 (= ?x279 (_ bv0 32))))
 (let (($x243 (= $x199 $x125)))
 (let (($x117 (and (and (and (and (and $x243 $x8) $x77) $x6) $x19) $x325)))
 (let (($x309 (= $x117 true)))
 (let ((?x177 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x97 (bvneg ?x177)))
 (let (($x136 (= ?x97 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x173 (= $x136 true)))
 (let (($x267 (= $x173 true)))
 (let ((?x234 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x234)))
 (let ((?x288 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x288)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x266 $x205)))
 (let (($x192 (and $x237 $x182)))
 (let (($x233 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x233 $x192)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x81)))))))
 (let (($x167 (and $x120 $x65)))
 (let (($x121 (= $x167 true)))
 (let (($x53 (= $x121 true)))
 (let (($x127 (= $x53 true)))
 (let (($x152 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x82 (= $x152 true)))
 (let (($x260 (= $x82 true)))
 (let (($x306 (= $x260 true)))
 (let ((?x17 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x178 (= (_ bv0 3) ?x17)))
 (let (($x9 (= $x178 true)))
 (let (($x278 (= $x9 true)))
 (let (($x139 (= $x273 true)))
 (let (($x41 (= $x139 true)))
 (let (($x208 (= $x41 true)))
 (let (($x284 (and $x208 $x278)))
 (let (($x88 (and $x284 $x306)))
 (let (($x112 (and $x88 $x127)))
 (let (($x225 (and $x112 $x267)))
 (let (($x156 (and $x225 $x309)))
 (let (($x298 (and $x156 $x16)))
 (let (($x89 (and $x98 $x298)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x207 (and $x94 $x89)))
 (let (($x287 (=> $x207 $x441)))
 (not $x287))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x94 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x134 (not $x94)))
 (let (($x276 (or $x94 $x134)))
 (let (($x21 (= $x276 true)))
 (let (($x315 (= $x21 true)))
 (let ((?x17 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem ?x17))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv2 32))) ?x207))))
 (let (($x72 (= (_ bv0 32) ?x113)))
 (let ((?x277 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x277 (_ bv1 32))))
 (let (($x102 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x142 (= $x102 $x318)))
 (let (($x228 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x215 (=> $x228 $x142)))
 (let (($x241 (= ?x277 (_ bv0 32))))
 (let (($x100 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x184 (= $x100 $x241)))
 (let (($x334 (=> $x228 $x184)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x152 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x93 (concat (select input.dst.llvm-mem ?x152) (concat ?x270 (concat ?x209 ?x37)))))
 (let (($x341 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x93)))
 (let (($x239 (=> $x228 $x341)))
 (let ((?x5 (ite $x94 (_ bv0 32) (_ bv1 32))))
 (let (($x39 (bvuge ?x5 (_ bv1 32))))
 (let (($x131 (= $x228 $x39)))
 (let (($x196 (= false false)))
 (let (($x227 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x295 (=> $x227 $x196)))
 (let (($x189 (= ?x5 (_ bv0 32))))
 (let (($x22 (= $x227 $x189)))
 (let (($x301 (and (and (and (and (and $x22 $x295) $x131) $x239) $x334) $x215)))
 (let (($x138 (= $x301 true)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x255 (concat ?x219 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x186 (concat ?x128 (concat ?x159 ?x255))))
 (let (($x312 (= (_ bv0 32) ?x186)))
 (let ((?x132 (ite $x312 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x132 (_ bv1 32))))
 (let (($x195 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x10 (= $x195 $x52)))
 (let (($x30 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x160 (=> $x30 $x10)))
 (let (($x36 (= ?x132 (_ bv0 32))))
 (let (($x309 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x285 (= $x309 $x36)))
 (let (($x229 (=> $x30 $x285)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x25)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x19)))
 (let (($x18 (= input.spec-%var-l-1.2.0 ?x268)))
 (let (($x325 (=> $x30 $x18)))
 (let (($x221 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x289 (ite $x221 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (bvuge ?x289 (_ bv1 32))))
 (let (($x31 (= $x30 $x191)))
 (let (($x6 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x238 (=> $x6 $x196)))
 (let (($x149 (= ?x289 (_ bv0 32))))
 (let (($x166 (= $x6 $x149)))
 (let (($x78 (and (and (and (and (and $x166 $x238) $x31) $x325) $x229) $x160)))
 (let (($x256 (= $x78 true)))
 (let ((?x33 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x24 (= (_ bv0 3) ?x33)))
 (let (($x291 (= $x24 true)))
 (let (($x165 (= $x291 true)))
 (let (($x79 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x174 (= $x79 true)))
 (let (($x51 (= $x174 true)))
 (let (($x74 (= $x51 true)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x243)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x279 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x172 $x279)))
 (let (($x8 (and $x125 $x133)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (and $x112 $x8)))
 (let (($x324 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x324)))))))
 (let (($x185 (and $x199 $x305)))
 (let (($x23 (= $x185 true)))
 (let (($x77 (= $x23 true)))
 (let (($x443 (= $x77 true)))
 (let ((?x234 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x234)))
 (let (($x65 (= ?x182 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x167 (= $x65 true)))
 (let (($x121 (= $x167 true)))
 (let (($x317 (and $x121 $x443)))
 (let (($x293 (and $x317 $x74)))
 (let (($x242 (and $x293 $x165)))
 (let (($x111 (and $x242 $x256)))
 (let (($x48 (and $x111 $x138)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x115 (and $x288 $x48)))
 (let ((?x194 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x61 (bvugt ?x194 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x194 (_ bv3 32)))))
 (let (($x266 (=> (bvule ?x194 (bvsub (bvadd ?x194 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x61)))))))
 (let (($x46 (=> (and $x134 (bvule ?x194 (bvsub (bvadd ?x194 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x35 $x61)))))))
 (let (($x260 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x193 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x17 (_ bv1 32))) (or false (or false (and true (or $x82 $x260)))))))
 (let (($x208 (=> (and $x134 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x17 (_ bv1 32)))) (or false (or false (and true (or $x82 $x260)))))))
 (let (($x87 (and $x208 $x46)))
 (let (($x247 (and $x87 $x115)))
 (let (($x168 (=> $x247 $x315)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x94 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x134 (not $x94)))
 (let (($x276 (or $x94 $x134)))
 (let (($x21 (= $x276 true)))
 (let (($x315 (= $x21 true)))
 (let ((?x17 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem ?x17))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv2 32))) ?x207))))
 (let (($x72 (= (_ bv0 32) ?x113)))
 (let ((?x277 (ite $x72 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (bvuge ?x277 (_ bv1 32))))
 (let (($x102 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x142 (= $x102 $x318)))
 (let (($x228 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x215 (=> $x228 $x142)))
 (let (($x241 (= ?x277 (_ bv0 32))))
 (let (($x100 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x184 (= $x100 $x241)))
 (let (($x334 (=> $x228 $x184)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x152 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x93 (concat (select input.dst.llvm-mem ?x152) (concat ?x270 (concat ?x209 ?x37)))))
 (let (($x341 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x93)))
 (let (($x239 (=> $x228 $x341)))
 (let ((?x5 (ite $x94 (_ bv0 32) (_ bv1 32))))
 (let (($x39 (bvuge ?x5 (_ bv1 32))))
 (let (($x131 (= $x228 $x39)))
 (let (($x196 (= false false)))
 (let (($x227 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x295 (=> $x227 $x196)))
 (let (($x189 (= ?x5 (_ bv0 32))))
 (let (($x22 (= $x227 $x189)))
 (let (($x301 (and (and (and (and (and $x22 $x295) $x131) $x239) $x334) $x215)))
 (let (($x138 (= $x301 true)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x255 (concat ?x219 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x186 (concat ?x128 (concat ?x159 ?x255))))
 (let (($x312 (= (_ bv0 32) ?x186)))
 (let ((?x132 (ite $x312 (_ bv0 32) (_ bv1 32))))
 (let (($x52 (bvuge ?x132 (_ bv1 32))))
 (let (($x195 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x10 (= $x195 $x52)))
 (let (($x30 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x160 (=> $x30 $x10)))
 (let (($x36 (= ?x132 (_ bv0 32))))
 (let (($x309 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x285 (= $x309 $x36)))
 (let (($x229 (=> $x30 $x285)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x25)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x19)))
 (let (($x18 (= input.spec-%var-l-1.2.0 ?x268)))
 (let (($x325 (=> $x30 $x18)))
 (let (($x221 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x289 (ite $x221 (_ bv0 32) (_ bv1 32))))
 (let (($x191 (bvuge ?x289 (_ bv1 32))))
 (let (($x31 (= $x30 $x191)))
 (let (($x6 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x238 (=> $x6 $x196)))
 (let (($x149 (= ?x289 (_ bv0 32))))
 (let (($x166 (= $x6 $x149)))
 (let (($x78 (and (and (and (and (and $x166 $x238) $x31) $x325) $x229) $x160)))
 (let (($x256 (= $x78 true)))
 (let ((?x33 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x24 (= (_ bv0 3) ?x33)))
 (let (($x291 (= $x24 true)))
 (let (($x165 (= $x291 true)))
 (let (($x79 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x174 (= $x79 true)))
 (let (($x51 (= $x174 true)))
 (let (($x74 (= $x51 true)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x243)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x279 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x162)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x172 $x279)))
 (let (($x8 (and $x125 $x133)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (and $x112 $x8)))
 (let (($x324 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x97 $x324)))))))
 (let (($x185 (and $x199 $x305)))
 (let (($x23 (= $x185 true)))
 (let (($x77 (= $x23 true)))
 (let (($x443 (= $x77 true)))
 (let ((?x234 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x182 (bvneg ?x234)))
 (let (($x65 (= ?x182 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x167 (= $x65 true)))
 (let (($x121 (= $x167 true)))
 (let (($x317 (and $x121 $x443)))
 (let (($x293 (and $x317 $x74)))
 (let (($x242 (and $x293 $x165)))
 (let (($x111 (and $x242 $x256)))
 (let (($x48 (and $x111 $x138)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x115 (and $x288 $x48)))
 (let ((?x194 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x61 (bvugt ?x194 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x194 (_ bv3 32)))))
 (let (($x266 (=> (bvule ?x194 (bvsub (bvadd ?x194 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x61)))))))
 (let (($x46 (=> (and $x134 (bvule ?x194 (bvsub (bvadd ?x194 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x35 $x61)))))))
 (let (($x260 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x193 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x17 (_ bv1 32))) (or false (or false (and true (or $x82 $x260)))))))
 (let (($x208 (=> (and $x134 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x17 (_ bv1 32)))) (or false (or false (and true (or $x82 $x260)))))))
 (let (($x87 (and $x208 $x46)))
 (let (($x247 (and $x87 $x115)))
 (let (($x168 (=> $x247 $x315)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 82
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x35)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x194 $x233)))
 (let (($x316 (and $x81 $x61)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (and $x9 $x316)))
 (let (($x260 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x284 $x260)))))))
 (let (($x156 (and $x208 $x187)))
 (let (($x103 (= $x156 true)))
 (let (($x128 (= $x103 true)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x238 (concat ?x196 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x146 (concat ?x280 (concat ?x30 ?x238))))
 (let (($x198 (= (_ bv0 32) ?x146)))
 (let ((?x75 (ite $x198 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x75 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x147 (= $x151 $x26)))
 (let (($x23 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x322 (=> $x23 $x147)))
 (let (($x245 (= ?x75 (_ bv0 32))))
 (let (($x95 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x296 (= $x95 $x245)))
 (let (($x222 (=> $x23 $x296)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x74)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x33)))
 (let (($x242 (= input.spec-%var-l-1.2.0 ?x165)))
 (let (($x259 (=> $x23 $x242)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x243 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x243 (_ bv1 32))))
 (let (($x443 (= $x23 $x77)))
 (let (($x305 (= false false)))
 (let (($x279 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x185 (=> $x279 $x305)))
 (let (($x133 (= ?x243 (_ bv0 32))))
 (let (($x8 (= $x279 $x133)))
 (let (($x325 (and (and (and (and (and $x8 $x185) $x443) $x259) $x222) $x322)))
 (let (($x45 (= $x325 true)))
 (let ((?x288 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x250 (concat ?x43 (concat ?x65 (concat ?x237 ?x288)))))
 (let (($x199 (= ?x250 input.dst.llvm-%l)))
 (let (($x127 (= $x199 true)))
 (let (($x112 (= $x127 true)))
 (let (($x141 (= input.dst.llvm-%l ?x250)))
 (let (($x46 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x177 (and $x46 $x141)))
 (let (($x136 (and (and (and $x208 true) $x187) $x177)))
 (let (($x173 (= $x136 true)))
 (let (($x267 (= $x173 true)))
 (let (($x225 (= $x267 true)))
 (let (($x172 (and $x225 $x112)))
 (let (($x117 (and $x172 $x45)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x309 (and $x94 $x117)))
 (let (($x216 (=> $x309 $x128)))
 (not $x216)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x35)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (and $x194 $x233)))
 (let (($x316 (and $x81 $x61)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (and $x9 $x316)))
 (let (($x260 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x284 $x260)))))))
 (let (($x156 (and $x208 $x187)))
 (let (($x103 (= $x156 true)))
 (let (($x128 (= $x103 true)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x238 (concat ?x196 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x146 (concat ?x280 (concat ?x30 ?x238))))
 (let (($x198 (= (_ bv0 32) ?x146)))
 (let ((?x75 (ite $x198 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x75 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x147 (= $x151 $x26)))
 (let (($x23 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x322 (=> $x23 $x147)))
 (let (($x245 (= ?x75 (_ bv0 32))))
 (let (($x95 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x296 (= $x95 $x245)))
 (let (($x222 (=> $x23 $x296)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x74)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x33)))
 (let (($x242 (= input.spec-%var-l-1.2.0 ?x165)))
 (let (($x259 (=> $x23 $x242)))
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x243 (ite $x125 (_ bv0 32) (_ bv1 32))))
 (let (($x77 (bvuge ?x243 (_ bv1 32))))
 (let (($x443 (= $x23 $x77)))
 (let (($x305 (= false false)))
 (let (($x279 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x185 (=> $x279 $x305)))
 (let (($x133 (= ?x243 (_ bv0 32))))
 (let (($x8 (= $x279 $x133)))
 (let (($x325 (and (and (and (and (and $x8 $x185) $x443) $x259) $x222) $x322)))
 (let (($x45 (= $x325 true)))
 (let ((?x288 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x250 (concat ?x43 (concat ?x65 (concat ?x237 ?x288)))))
 (let (($x199 (= ?x250 input.dst.llvm-%l)))
 (let (($x127 (= $x199 true)))
 (let (($x112 (= $x127 true)))
 (let (($x141 (= input.dst.llvm-%l ?x250)))
 (let (($x46 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x177 (and $x46 $x141)))
 (let (($x136 (and (and (and $x208 true) $x187) $x177)))
 (let (($x173 (= $x136 true)))
 (let (($x267 (= $x173 true)))
 (let (($x225 (= $x267 true)))
 (let (($x172 (and $x225 $x112)))
 (let (($x117 (and $x172 $x45)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x309 (and $x94 $x117)))
 (let (($x216 (=> $x309 $x128)))
 (not $x216)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 83
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3576X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3576X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x256 (concat ?x78 (select input.dst.llvm-mem (bvadd input.ind-%var3576X (_ bv4 32))))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3576X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3576X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x22 (concat ?x189 (concat ?x439 ?x256))))
 (let (($x295 (= ?x22 ?x22)))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x305 (ite $x8 (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x305 (_ bv1 32))))
 (let (($x55 (=> $x19 $x295)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3576X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3576X))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3576X (_ bv2 32))) ?x179)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3576X (_ bv3 32))) ?x132)))
 (let (($x235 (= ?x229 ?x229)))
 (let (($x195 (=> $x19 $x235)))
 (let (($x176 (= $x19 $x19)))
 (let (($x185 (= ?x305 (_ bv0 32))))
 (let (($x17 (= $x185 $x185)))
 (let (($x134 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x23 (= false false)))
 (let (($x63 (=> $x185 $x23)))
 (let (($x124 (and (and (and (and (and $x63 $x134) $x17) $x176) $x195) $x55)))
 (let (($x159 (= true true)))
 (let (($x230 (and $x159 $x124)))
 (let (($x27 (= $x230 true)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x166 (concat ?x30 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x198 (concat ?x146 (concat ?x149 ?x166))))
 (let (($x75 (= (_ bv0 32) ?x198)))
 (let ((?x245 (ite $x75 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x245 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x147 (= $x151 $x26)))
 (let (($x443 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x322 (=> $x443 $x147)))
 (let (($x296 (= ?x245 (_ bv0 32))))
 (let (($x221 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x222 (= $x221 $x296)))
 (let (($x18 (=> $x443 $x222)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x51)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x33)))
 (let (($x268 (= input.spec-%var-l-1.2.0 ?x259)))
 (let (($x6 (=> $x443 $x268)))
 (let (($x317 (= $x443 $x19)))
 (let (($x133 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x77 (=> $x133 $x23)))
 (let (($x25 (= $x133 $x185)))
 (let (($x156 (and (and (and (and (and $x25 $x77) $x317) $x6) $x18) $x322)))
 (let (($x103 (= $x156 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x250 (concat ?x288 (concat ?x192 ?x43)))))
 (let (($x172 (= ?x141 input.dst.llvm-%l)))
 (let (($x162 (= $x172 true)))
 (let (($x279 (= $x162 true)))
 (let (($x177 (= input.dst.llvm-%l ?x141)))
 (let (($x46 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x136 (and $x46 $x177)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x316 (= (_ bv0 32) ?x61)))
 (let ((?x233 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x233)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x57 $x81)))
 (let (($x187 (and $x35 $x316)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x324 (and $x90 $x187)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x54)))))))
 (let (($x225 (and (and (and $x194 true) $x324) $x136)))
 (let (($x199 (= $x225 true)))
 (let (($x127 (= $x199 true)))
 (let (($x112 (= $x127 true)))
 (let (($x125 (and $x112 $x279)))
 (let (($x128 (and $x125 $x103)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x216 (and $x94 $x128)))
 (let (($x270 (=> $x216 $x27)))
 (not $x270))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3576X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3576X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x256 (concat ?x78 (select input.dst.llvm-mem (bvadd input.ind-%var3576X (_ bv4 32))))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3576X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3576X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x22 (concat ?x189 (concat ?x439 ?x256))))
 (let (($x295 (= ?x22 ?x22)))
 (let (($x8 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x305 (ite $x8 (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x305 (_ bv1 32))))
 (let (($x55 (=> $x19 $x295)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3576X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3576X))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3576X (_ bv2 32))) ?x179)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3576X (_ bv3 32))) ?x132)))
 (let (($x235 (= ?x229 ?x229)))
 (let (($x195 (=> $x19 $x235)))
 (let (($x176 (= $x19 $x19)))
 (let (($x185 (= ?x305 (_ bv0 32))))
 (let (($x17 (= $x185 $x185)))
 (let (($x134 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x23 (= false false)))
 (let (($x63 (=> $x185 $x23)))
 (let (($x124 (and (and (and (and (and $x63 $x134) $x17) $x176) $x195) $x55)))
 (let (($x159 (= true true)))
 (let (($x230 (and $x159 $x124)))
 (let (($x27 (= $x230 true)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x166 (concat ?x30 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x198 (concat ?x146 (concat ?x149 ?x166))))
 (let (($x75 (= (_ bv0 32) ?x198)))
 (let ((?x245 (ite $x75 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x245 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x147 (= $x151 $x26)))
 (let (($x443 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x322 (=> $x443 $x147)))
 (let (($x296 (= ?x245 (_ bv0 32))))
 (let (($x221 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x222 (= $x221 $x296)))
 (let (($x18 (=> $x443 $x222)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x51)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x33)))
 (let (($x268 (= input.spec-%var-l-1.2.0 ?x259)))
 (let (($x6 (=> $x443 $x268)))
 (let (($x317 (= $x443 $x19)))
 (let (($x133 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x77 (=> $x133 $x23)))
 (let (($x25 (= $x133 $x185)))
 (let (($x156 (and (and (and (and (and $x25 $x77) $x317) $x6) $x18) $x322)))
 (let (($x103 (= $x156 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x250 (concat ?x288 (concat ?x192 ?x43)))))
 (let (($x172 (= ?x141 input.dst.llvm-%l)))
 (let (($x162 (= $x172 true)))
 (let (($x279 (= $x162 true)))
 (let (($x177 (= input.dst.llvm-%l ?x141)))
 (let (($x46 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x136 (and $x46 $x177)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x316 (= (_ bv0 32) ?x61)))
 (let ((?x233 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x233)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x57 $x81)))
 (let (($x187 (and $x35 $x316)))
 (let (($x90 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x324 (and $x90 $x187)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x54)))))))
 (let (($x225 (and (and (and $x194 true) $x324) $x136)))
 (let (($x199 (= $x225 true)))
 (let (($x127 (= $x199 true)))
 (let (($x112 (= $x127 true)))
 (let (($x125 (and $x112 $x279)))
 (let (($x128 (and $x125 $x103)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x216 (and $x94 $x128)))
 (let (($x270 (=> $x216 $x27)))
 (not $x270))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 84
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x176 (= (_ bv0 3) ?x39)))
 (let (($x131 (= $x176 true)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x265 (concat ?x149 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x75 (concat ?x198 (concat ?x280 ?x265))))
 (let (($x245 (= (_ bv0 32) ?x75)))
 (let ((?x296 (ite $x245 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x296 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x147 (= $x151 $x26)))
 (let (($x317 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x322 (=> $x317 $x147)))
 (let (($x222 (= ?x296 (_ bv0 32))))
 (let (($x289 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x18 (= $x289 $x222)))
 (let (($x309 (=> $x317 $x18)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x174)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x33)))
 (let (($x117 (= input.spec-%var-l-1.2.0 ?x6)))
 (let (($x95 (=> $x317 $x117)))
 (let (($x25 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x23 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x23 (_ bv1 32))))
 (let (($x24 (= $x317 $x45)))
 (let (($x443 (= false false)))
 (let (($x185 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x19 (=> $x185 $x443)))
 (let (($x77 (= ?x23 (_ bv0 32))))
 (let (($x325 (= $x185 $x77)))
 (let (($x159 (and (and (and (and (and $x325 $x19) $x24) $x95) $x309) $x322)))
 (let (($x63 (= $x159 true)))
 (let ((?x250 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x177 (concat ?x141 (concat ?x43 (concat ?x237 ?x250)))))
 (let (($x125 (= ?x177 input.dst.llvm-%l)))
 (let (($x243 (= $x125 true)))
 (let (($x133 (= $x243 true)))
 (let (($x136 (= input.dst.llvm-%l ?x177)))
 (let (($x46 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x225 (and $x46 $x136)))
 (let ((?x316 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x316)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x109 $x35)))
 (let (($x324 (and $x61 $x187)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x152 $x324)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x97)))))))
 (let (($x112 (and (and (and $x57 true) $x267) $x225)))
 (let (($x172 (= $x112 true)))
 (let (($x162 (= $x172 true)))
 (let (($x279 (= $x162 true)))
 (let (($x8 (and $x279 $x133)))
 (let (($x134 (and $x8 $x63)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x228 (and $x94 $x134)))
 (let (($x98 (=> $x228 $x131)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x176 (= (_ bv0 3) ?x39)))
 (let (($x131 (= $x176 true)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x265 (concat ?x149 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x75 (concat ?x198 (concat ?x280 ?x265))))
 (let (($x245 (= (_ bv0 32) ?x75)))
 (let ((?x296 (ite $x245 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x296 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x147 (= $x151 $x26)))
 (let (($x317 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x322 (=> $x317 $x147)))
 (let (($x222 (= ?x296 (_ bv0 32))))
 (let (($x289 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x18 (= $x289 $x222)))
 (let (($x309 (=> $x317 $x18)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x174)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x33)))
 (let (($x117 (= input.spec-%var-l-1.2.0 ?x6)))
 (let (($x95 (=> $x317 $x117)))
 (let (($x25 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x23 (ite $x25 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (bvuge ?x23 (_ bv1 32))))
 (let (($x24 (= $x317 $x45)))
 (let (($x443 (= false false)))
 (let (($x185 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x19 (=> $x185 $x443)))
 (let (($x77 (= ?x23 (_ bv0 32))))
 (let (($x325 (= $x185 $x77)))
 (let (($x159 (and (and (and (and (and $x325 $x19) $x24) $x95) $x309) $x322)))
 (let (($x63 (= $x159 true)))
 (let ((?x250 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x177 (concat ?x141 (concat ?x43 (concat ?x237 ?x250)))))
 (let (($x125 (= ?x177 input.dst.llvm-%l)))
 (let (($x243 (= $x125 true)))
 (let (($x133 (= $x243 true)))
 (let (($x136 (= input.dst.llvm-%l ?x177)))
 (let (($x46 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x225 (and $x46 $x136)))
 (let ((?x316 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x316)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x109 $x35)))
 (let (($x324 (and $x61 $x187)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x152 $x324)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x97)))))))
 (let (($x112 (and (and (and $x57 true) $x267) $x225)))
 (let (($x172 (= $x112 true)))
 (let (($x162 (= $x172 true)))
 (let (($x279 (= $x162 true)))
 (let (($x8 (and $x279 $x133)))
 (let (($x134 (and $x8 $x63)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x228 (and $x94 $x134)))
 (let (($x98 (=> $x228 $x131)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 85
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x242 (= $x36 true)))
 (let (($x297 (= $x242 true)))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x196 (concat ?x280 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x245 (concat ?x75 (concat ?x146 ?x196))))
 (let (($x296 (= (_ bv0 32) ?x245)))
 (let ((?x222 (ite $x296 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x222 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x147 (= $x151 $x26)))
 (let (($x24 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x322 (=> $x24 $x147)))
 (let (($x18 (= ?x222 (_ bv0 32))))
 (let (($x31 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x309 (= $x31 $x18)))
 (let (($x216 (=> $x24 $x309)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x122)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x33)))
 (let (($x128 (= input.spec-%var-l-1.2.0 ?x95)))
 (let (($x221 (=> $x24 $x128)))
 (let (($x325 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x443 (ite $x325 (_ bv0 32) (_ bv1 32))))
 (let (($x103 (bvuge ?x443 (_ bv1 32))))
 (let (($x165 (= $x24 $x103)))
 (let (($x317 (= false false)))
 (let (($x77 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x45 (=> $x77 $x317)))
 (let (($x19 (= ?x443 (_ bv0 32))))
 (let (($x156 (= $x77 $x19)))
 (let (($x17 (and (and (and (and (and $x156 $x45) $x165) $x221) $x216) $x322)))
 (let (($x39 (= $x17 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x177 (concat ?x250 (concat ?x192 ?x141)))))
 (let (($x8 (= ?x136 input.dst.llvm-%l)))
 (let (($x305 (= $x8 true)))
 (let (($x185 (= $x305 true)))
 (let (($x225 (= input.dst.llvm-%l ?x136)))
 (let (($x46 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x112 (and $x46 $x225)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x324 (= (_ bv0 32) ?x187)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x316 (and $x233 $x61)))
 (let (($x267 (and $x316 $x324)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x260 $x267)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x194 $x173)))))))
 (let (($x279 (and (and (and $x109 true) $x127) $x112)))
 (let (($x125 (= $x279 true)))
 (let (($x243 (= $x125 true)))
 (let (($x133 (= $x243 true)))
 (let (($x25 (and $x133 $x185)))
 (let (($x176 (and $x25 $x39)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x131 (and $x94 $x176)))
 (let (($x284 (=> $x131 $x297)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x242 (= $x36 true)))
 (let (($x297 (= $x242 true)))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x196 (concat ?x280 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x245 (concat ?x75 (concat ?x146 ?x196))))
 (let (($x296 (= (_ bv0 32) ?x245)))
 (let ((?x222 (ite $x296 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x222 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x147 (= $x151 $x26)))
 (let (($x24 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x322 (=> $x24 $x147)))
 (let (($x18 (= ?x222 (_ bv0 32))))
 (let (($x31 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x309 (= $x31 $x18)))
 (let (($x216 (=> $x24 $x309)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x122)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x33)))
 (let (($x128 (= input.spec-%var-l-1.2.0 ?x95)))
 (let (($x221 (=> $x24 $x128)))
 (let (($x325 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x443 (ite $x325 (_ bv0 32) (_ bv1 32))))
 (let (($x103 (bvuge ?x443 (_ bv1 32))))
 (let (($x165 (= $x24 $x103)))
 (let (($x317 (= false false)))
 (let (($x77 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x45 (=> $x77 $x317)))
 (let (($x19 (= ?x443 (_ bv0 32))))
 (let (($x156 (= $x77 $x19)))
 (let (($x17 (and (and (and (and (and $x156 $x45) $x165) $x221) $x216) $x322)))
 (let (($x39 (= $x17 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x177 (concat ?x250 (concat ?x192 ?x141)))))
 (let (($x8 (= ?x136 input.dst.llvm-%l)))
 (let (($x305 (= $x8 true)))
 (let (($x185 (= $x305 true)))
 (let (($x225 (= input.dst.llvm-%l ?x136)))
 (let (($x46 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x112 (and $x46 $x225)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x324 (= (_ bv0 32) ?x187)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x316 (and $x233 $x61)))
 (let (($x267 (and $x316 $x324)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x260 $x267)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x194 $x173)))))))
 (let (($x279 (and (and (and $x109 true) $x127) $x112)))
 (let (($x125 (= $x279 true)))
 (let (($x243 (= $x125 true)))
 (let (($x133 (= $x243 true)))
 (let (($x25 (and $x133 $x185)))
 (let (($x176 (and $x25 $x39)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x131 (and $x94 $x176)))
 (let (($x284 (=> $x131 $x297)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 86
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3603X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3603X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x439 (concat ?x111 (select input.dst.llvm-mem (bvadd input.ind-%var3603X (_ bv4 32))))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3603X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3603X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x22 (concat ?x227 (concat ?x78 ?x439))))
 (let (($x295 (= ?x22 ?x22)))
 (let (($x156 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x317 (ite $x156 (_ bv0 32) (_ bv1 32))))
 (let (($x63 (bvuge ?x317 (_ bv1 32))))
 (let (($x55 (=> $x63 $x295)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3603X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3603X))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3603X (_ bv2 32))) ?x203)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3603X (_ bv3 32))) ?x179)))
 (let (($x195 (= ?x235 ?x235)))
 (let (($x183 (=> $x63 $x195)))
 (let (($x88 (= $x63 $x63)))
 (let (($x45 (= ?x317 (_ bv0 32))))
 (let (($x82 (= $x45 $x45)))
 (let (($x268 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x24 (= false false)))
 (let (($x167 (=> $x45 $x24)))
 (let (($x290 (and (and (and (and (and $x167 $x268) $x82) $x88) $x183) $x55)))
 (let (($x284 (= true true)))
 (let (($x291 (and $x284 $x290)))
 (let (($x139 (= $x291 true)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x30 (concat ?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x296 (concat ?x245 (concat ?x198 ?x30))))
 (let (($x222 (= (_ bv0 32) ?x296)))
 (let ((?x18 (ite $x222 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x18 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x147 (= $x151 $x26)))
 (let (($x165 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x322 (=> $x165 $x147)))
 (let (($x309 (= ?x18 (_ bv0 32))))
 (let (($x191 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x216 (= $x191 $x309)))
 (let (($x228 (=> $x165 $x216)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x74)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x33)))
 (let (($x134 (= input.spec-%var-l-1.2.0 ?x221)))
 (let (($x289 (=> $x165 $x134)))
 (let (($x259 (= $x165 $x63)))
 (let (($x19 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x103 (=> $x19 $x24)))
 (let (($x159 (= $x19 $x45)))
 (let (($x98 (and (and (and (and (and $x159 $x103) $x259) $x289) $x228) $x322)))
 (let (($x36 (= $x98 true)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x225 (concat ?x136 (concat ?x141 (concat ?x237 ?x177)))))
 (let (($x25 (= ?x225 input.dst.llvm-%l)))
 (let (($x23 (= $x25 true)))
 (let (($x77 (= $x23 true)))
 (let (($x112 (= input.dst.llvm-%l ?x225)))
 (let (($x46 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x279 (and $x46 $x112)))
 (let ((?x324 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x267 (= (_ bv0 32) ?x324)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x316 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x81 $x316)))
 (let (($x127 (and $x187 $x267)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x54 $x127)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x233 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x199)))))))
 (let (($x133 (and (and (and $x233 true) $x162) $x279)))
 (let (($x8 (= $x133 true)))
 (let (($x305 (= $x8 true)))
 (let (($x185 (= $x305 true)))
 (let (($x325 (and $x185 $x77)))
 (let (($x242 (and $x325 $x36)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x297 (and $x94 $x242)))
 (let (($x278 (=> $x297 $x139)))
 (not $x278))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3603X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3603X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x439 (concat ?x111 (select input.dst.llvm-mem (bvadd input.ind-%var3603X (_ bv4 32))))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3603X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3603X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x22 (concat ?x227 (concat ?x78 ?x439))))
 (let (($x295 (= ?x22 ?x22)))
 (let (($x156 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x317 (ite $x156 (_ bv0 32) (_ bv1 32))))
 (let (($x63 (bvuge ?x317 (_ bv1 32))))
 (let (($x55 (=> $x63 $x295)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3603X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3603X))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3603X (_ bv2 32))) ?x203)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3603X (_ bv3 32))) ?x179)))
 (let (($x195 (= ?x235 ?x235)))
 (let (($x183 (=> $x63 $x195)))
 (let (($x88 (= $x63 $x63)))
 (let (($x45 (= ?x317 (_ bv0 32))))
 (let (($x82 (= $x45 $x45)))
 (let (($x268 (= input.dst.llvm-%l input.dst.llvm-%l)))
 (let (($x24 (= false false)))
 (let (($x167 (=> $x45 $x24)))
 (let (($x290 (and (and (and (and (and $x167 $x268) $x82) $x88) $x183) $x55)))
 (let (($x284 (= true true)))
 (let (($x291 (and $x284 $x290)))
 (let (($x139 (= $x291 true)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x30 (concat ?x146 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x296 (concat ?x245 (concat ?x198 ?x30))))
 (let (($x222 (= (_ bv0 32) ?x296)))
 (let ((?x18 (ite $x222 (_ bv0 32) (_ bv1 32))))
 (let (($x26 (bvuge ?x18 (_ bv1 32))))
 (let (($x151 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x147 (= $x151 $x26)))
 (let (($x165 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x322 (=> $x165 $x147)))
 (let (($x309 (= ?x18 (_ bv0 32))))
 (let (($x191 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x216 (= $x191 $x309)))
 (let (($x228 (=> $x165 $x216)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x74)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x33)))
 (let (($x134 (= input.spec-%var-l-1.2.0 ?x221)))
 (let (($x289 (=> $x165 $x134)))
 (let (($x259 (= $x165 $x63)))
 (let (($x19 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x103 (=> $x19 $x24)))
 (let (($x159 (= $x19 $x45)))
 (let (($x98 (and (and (and (and (and $x159 $x103) $x259) $x289) $x228) $x322)))
 (let (($x36 (= $x98 true)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x225 (concat ?x136 (concat ?x141 (concat ?x237 ?x177)))))
 (let (($x25 (= ?x225 input.dst.llvm-%l)))
 (let (($x23 (= $x25 true)))
 (let (($x77 (= $x23 true)))
 (let (($x112 (= input.dst.llvm-%l ?x225)))
 (let (($x46 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x279 (and $x46 $x112)))
 (let ((?x324 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x267 (= (_ bv0 32) ?x324)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x316 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x81 $x316)))
 (let (($x127 (and $x187 $x267)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x54 $x127)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x233 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x199)))))))
 (let (($x133 (and (and (and $x233 true) $x162) $x279)))
 (let (($x8 (= $x133 true)))
 (let (($x305 (= $x8 true)))
 (let (($x185 (= $x305 true)))
 (let (($x325 (and $x185 $x77)))
 (let (($x242 (and $x325 $x36)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x297 (and $x94 $x242)))
 (let (($x278 (=> $x297 $x139)))
 (not $x278))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
==query_number: 87
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3669X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3669X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x40 (concat ?x171 (select input.dst.llvm-mem (bvadd input.ind-%var3669X (_ bv4 32))))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3669X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3669X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x69 (concat ?x294 (concat ?x248 ?x40))))
 (let (($x286 (= ?x69 ?x69)))
 (let ((?x57 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem ?x57))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv2 32))) ?x307))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x126 (bvuge ?x292 (_ bv1 32))))
 (let (($x71 (=> $x126 $x286)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3669X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3669X))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3669X (_ bv2 32))) ?x201)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3669X (_ bv3 32))) ?x304)))
 (let (($x64 (= ?x80 ?x80)))
 (let (($x20 (=> $x126 $x64)))
 (let ((?x193 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x18))))
 (let (($x302 (= (_ bv0 32) ?x26)))
 (let ((?x50 (ite $x302 (_ bv0 32) (_ bv1 32))))
 (let (($x327 (bvuge ?x50 (_ bv1 32))))
 (let (($x49 (= $x126 $x327)))
 (let (($x320 (= ?x50 (_ bv0 32))))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x444 (= $x236 $x320)))
 (let (($x145 (and (and (and (= ?x129 ?x26) (=> $x236 (= false false))) $x444) $x49)))
 (let (($x83 (and (and $x145 $x20) $x71)))
 (let (($x333 (= true true)))
 (let (($x7 (and $x333 $x83)))
 (let (($x29 (= $x7 true)))
 (let (($x73 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x143 (= $x73 $x126)))
 (let (($x205 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x158 (=> $x205 $x143)))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x205 $x86)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x90 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x107 (concat (select input.dst.llvm-mem ?x90) (concat ?x300 (concat ?x170 ?x53)))))
 (let (($x330 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x107)))
 (let (($x181 (=> $x205 $x330)))
 (let (($x94 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x276 (ite $x94 (_ bv0 32) (_ bv1 32))))
 (let (($x104 (bvuge ?x276 (_ bv1 32))))
 (let (($x41 (= $x205 $x104)))
 (let (($x10 (= false false)))
 (let (($x247 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x168 (=> $x247 $x10)))
 (let (($x21 (= ?x276 (_ bv0 32))))
 (let (($x315 (= $x247 $x21)))
 (let (($x157 (and (and (and (and (and $x315 $x168) $x41) $x181) $x153) $x158)))
 (let (($x274 (= $x157 true)))
 (let ((?x287 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x12 (concat ?x287 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x232 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x207 (concat ?x16 (concat ?x232 ?x12))))
 (let (($x441 (= (_ bv0 32) ?x207)))
 (let ((?x113 (ite $x441 (_ bv0 32) (_ bv1 32))))
 (let (($x334 (bvuge ?x113 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x206 (= $x184 $x334)))
 (let (($x295 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x102 (=> $x295 $x206)))
 (let (($x72 (= ?x113 (_ bv0 32))))
 (let (($x239 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x277 (= $x239 $x72)))
 (let (($x241 (=> $x295 $x277)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x117)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x65)))
 (let (($x68 (= input.spec-%var-l-1.2.0 ?x214)))
 (let (($x93 (=> $x295 $x68)))
 (let (($x189 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x111 (ite $x189 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x111 (_ bv1 32))))
 (let (($x290 (= $x295 $x55)))
 (let (($x160 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (=> $x160 $x10)))
 (let (($x5 (= ?x111 (_ bv0 32))))
 (let (($x439 (= $x160 $x5)))
 (let (($x138 (and (and (and (and (and $x439 $x22) $x290) $x93) $x241) $x102)))
 (let (($x48 (= $x138 true)))
 (let ((?x195 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x195)))
 (let (($x270 (= $x183 true)))
 (let (($x52 (= $x270 true)))
 (let (($x186 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x312 (= $x186 true)))
 (let (($x285 (= $x312 true)))
 (let (($x203 (= $x285 true)))
 (let (($x284 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x134 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x191 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x134) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x134))))
 (let (($x238 (and true $x191)))
 (let (($x242 (and $x191 $x238)))
 (let (($x98 (= (bvand ?x26 (_ bv4294967288 32)) ?x26)))
 (let (($x75 (= (bvand ?x193 (_ bv4294967292 32)) ?x193)))
 (let (($x36 (and $x75 $x98)))
 (let (($x198 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x193 (bvsub ?x193 (_ bv4 32))) (bvult ?x193 (bvsub ?x193 (_ bv4 32))))))
 (let (($x230 (and (and (and (and (and $x238 $x198) $x75) $x36) $x242) $x284)))
 (let (($x88 (= true $x230)))
 (let (($x175 (not $x94)))
 (let (($x27 (=> $x175 $x88)))
 (let (($x234 (= $x27 true)))
 (let (($x132 (= $x234 true)))
 (let (($x229 (= $x132 true)))
 (let (($x79 (= $x175 true)))
 (let (($x74 (= $x79 true)))
 (let (($x33 (= $x74 true)))
 (let ((?x259 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x259)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x103 $x165)))
 (let (($x6 (and $x63 $x39)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x185 $x6)))
 (let (($x443 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x325 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x325 $x443)))))))
 (let (($x128 (and $x24 $x95)))
 (let (($x293 (= $x128 true)))
 (let (($x122 (= $x293 true)))
 (let (($x174 (= $x122 true)))
 (let ((?x250 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x250)))
 (let (($x112 (= ?x43 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x279 (= $x112 true)))
 (let (($x133 (= $x279 true)))
 (let (($x51 (and $x133 $x174)))
 (let (($x221 (and $x51 $x33)))
 (let (($x255 (and $x221 $x229)))
 (let (($x179 (and $x255 $x203)))
 (let (($x256 (and $x179 $x52)))
 (let (($x115 (and $x256 $x48)))
 (let (($x340 (and $x115 $x274)))
 (let (($x299 (and $x205 $x340)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x60 (and $x192 $x299)))
 (let (($x120 (bvugt ?x193 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd ?x193 (_ bv3 32))))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x136 (=> (bvule ?x193 (bvsub (bvadd ?x193 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x243 $x120)))))))
 (let (($x187 (=> (and $x175 (bvule ?x193 (bvsub (bvadd ?x193 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x243 $x120)))))))
 (let (($x125 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x316 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x57 (_ bv1 32))) (or false (or false (and true (or $x233 $x125)))))))
 (let (($x97 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x57 (_ bv1 32)))) (or false (or false (and true (or $x233 $x125)))))))
 (let (($x324 (and $x97 $x187)))
 (let (($x261 (and $x324 $x60)))
 (let (($x13 (=> $x261 $x29)))
 (not $x13)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.ind-%var3669X () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L3%5%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L3%5%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L3%5%bbentry () (_ BitVec 32))
(assert
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3669X (_ bv4 32)) (_ bv1 32)))))
 (let ((?x40 (concat ?x171 (select input.dst.llvm-mem (bvadd input.ind-%var3669X (_ bv4 32))))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3669X (_ bv4 32)) (_ bv2 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd input.ind-%var3669X (_ bv4 32)) (_ bv3 32)))))
 (let ((?x69 (concat ?x294 (concat ?x248 ?x40))))
 (let (($x286 (= ?x69 ?x69)))
 (let ((?x57 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem ?x57))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv2 32))) ?x307))))
 (let (($x272 (= (_ bv0 32) ?x129)))
 (let ((?x292 (ite $x272 (_ bv0 32) (_ bv1 32))))
 (let (($x126 (bvuge ?x292 (_ bv1 32))))
 (let (($x71 (=> $x126 $x286)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3669X (_ bv1 32))) (select input.dst.llvm-mem input.ind-%var3669X))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3669X (_ bv2 32))) ?x201)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.ind-%var3669X (_ bv3 32))) ?x304)))
 (let (($x64 (= ?x80 ?x80)))
 (let (($x20 (=> $x126 $x64)))
 (let ((?x193 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x18))))
 (let (($x302 (= (_ bv0 32) ?x26)))
 (let ((?x50 (ite $x302 (_ bv0 32) (_ bv1 32))))
 (let (($x327 (bvuge ?x50 (_ bv1 32))))
 (let (($x49 (= $x126 $x327)))
 (let (($x320 (= ?x50 (_ bv0 32))))
 (let (($x236 (= ?x292 (_ bv0 32))))
 (let (($x444 (= $x236 $x320)))
 (let (($x145 (and (and (and (= ?x129 ?x26) (=> $x236 (= false false))) $x444) $x49)))
 (let (($x83 (and (and $x145 $x20) $x71)))
 (let (($x333 (= true true)))
 (let (($x7 (and $x333 $x83)))
 (let (($x29 (= $x7 true)))
 (let (($x73 (bvuge input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv1 32))))
 (let (($x143 (= $x73 $x126)))
 (let (($x205 (bvuge input.spec-%var-l-0.L3%5%bbentry.0 (_ bv1 32))))
 (let (($x158 (=> $x205 $x143)))
 (let (($x303 (= input.spec-%var-l-0.L3%5%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x303 $x236)))
 (let (($x153 (=> $x205 $x86)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x90 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x107 (concat (select input.dst.llvm-mem ?x90) (concat ?x300 (concat ?x170 ?x53)))))
 (let (($x330 (= input.spec-%var-l-0.L3%5%bbentry.2.0 ?x107)))
 (let (($x181 (=> $x205 $x330)))
 (let (($x94 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x276 (ite $x94 (_ bv0 32) (_ bv1 32))))
 (let (($x104 (bvuge ?x276 (_ bv1 32))))
 (let (($x41 (= $x205 $x104)))
 (let (($x10 (= false false)))
 (let (($x247 (= input.spec-%var-l-0.L3%5%bbentry.0 (_ bv0 32))))
 (let (($x168 (=> $x247 $x10)))
 (let (($x21 (= ?x276 (_ bv0 32))))
 (let (($x315 (= $x247 $x21)))
 (let (($x157 (and (and (and (and (and $x315 $x168) $x41) $x181) $x153) $x158)))
 (let (($x274 (= $x157 true)))
 (let ((?x287 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x12 (concat ?x287 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x232 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x207 (concat ?x16 (concat ?x232 ?x12))))
 (let (($x441 (= (_ bv0 32) ?x207)))
 (let ((?x113 (ite $x441 (_ bv0 32) (_ bv1 32))))
 (let (($x334 (bvuge ?x113 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x206 (= $x184 $x334)))
 (let (($x295 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x102 (=> $x295 $x206)))
 (let (($x72 (= ?x113 (_ bv0 32))))
 (let (($x239 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x277 (= $x239 $x72)))
 (let (($x241 (=> $x295 $x277)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x117)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x65)))
 (let (($x68 (= input.spec-%var-l-1.2.0 ?x214)))
 (let (($x93 (=> $x295 $x68)))
 (let (($x189 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x111 (ite $x189 (_ bv0 32) (_ bv1 32))))
 (let (($x55 (bvuge ?x111 (_ bv1 32))))
 (let (($x290 (= $x295 $x55)))
 (let (($x160 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x22 (=> $x160 $x10)))
 (let (($x5 (= ?x111 (_ bv0 32))))
 (let (($x439 (= $x160 $x5)))
 (let (($x138 (and (and (and (and (and $x439 $x22) $x290) $x93) $x241) $x102)))
 (let (($x48 (= $x138 true)))
 (let ((?x195 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= (_ bv0 3) ?x195)))
 (let (($x270 (= $x183 true)))
 (let (($x52 (= $x270 true)))
 (let (($x186 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x312 (= $x186 true)))
 (let (($x285 (= $x312 true)))
 (let (($x203 (= $x285 true)))
 (let (($x284 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x134 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x191 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x134) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x134))))
 (let (($x238 (and true $x191)))
 (let (($x242 (and $x191 $x238)))
 (let (($x98 (= (bvand ?x26 (_ bv4294967288 32)) ?x26)))
 (let (($x75 (= (bvand ?x193 (_ bv4294967292 32)) ?x193)))
 (let (($x36 (and $x75 $x98)))
 (let (($x198 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x193 (bvsub ?x193 (_ bv4 32))) (bvult ?x193 (bvsub ?x193 (_ bv4 32))))))
 (let (($x230 (and (and (and (and (and $x238 $x198) $x75) $x36) $x242) $x284)))
 (let (($x88 (= true $x230)))
 (let (($x175 (not $x94)))
 (let (($x27 (=> $x175 $x88)))
 (let (($x234 (= $x27 true)))
 (let (($x132 (= $x234 true)))
 (let (($x229 (= $x132 true)))
 (let (($x79 (= $x175 true)))
 (let (($x74 (= $x79 true)))
 (let (($x33 (= $x74 true)))
 (let ((?x259 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x259)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x103 $x165)))
 (let (($x6 (and $x63 $x39)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x185 $x6)))
 (let (($x443 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x325 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x325 $x443)))))))
 (let (($x128 (and $x24 $x95)))
 (let (($x293 (= $x128 true)))
 (let (($x122 (= $x293 true)))
 (let (($x174 (= $x122 true)))
 (let ((?x250 (bvmul input.spec-%var-sum-0.L3%5%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x250)))
 (let (($x112 (= ?x43 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x279 (= $x112 true)))
 (let (($x133 (= $x279 true)))
 (let (($x51 (and $x133 $x174)))
 (let (($x221 (and $x51 $x33)))
 (let (($x255 (and $x221 $x229)))
 (let (($x179 (and $x255 $x203)))
 (let (($x256 (and $x179 $x52)))
 (let (($x115 (and $x256 $x48)))
 (let (($x340 (and $x115 $x274)))
 (let (($x299 (and $x205 $x340)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-5.L3%5%bbentry)))
 (let (($x60 (and $x192 $x299)))
 (let (($x120 (bvugt ?x193 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd ?x193 (_ bv3 32))))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x136 (=> (bvule ?x193 (bvsub (bvadd ?x193 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x243 $x120)))))))
 (let (($x187 (=> (and $x175 (bvule ?x193 (bvsub (bvadd ?x193 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x243 $x120)))))))
 (let (($x125 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x316 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x57 (_ bv1 32))) (or false (or false (and true (or $x233 $x125)))))))
 (let (($x97 (=> (and $x175 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x57 (_ bv1 32)))) (or false (or false (and true (or $x233 $x125)))))))
 (let (($x324 (and $x97 $x187)))
 (let (($x261 (and $x324 $x60)))
 (let (($x13 (=> $x261 $x29)))
 (not $x13)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676137/query
