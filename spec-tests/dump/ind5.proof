=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d E0%0%d
=Edges:
L0%0%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-4.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=Edge: L0%0%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.E0%0%d
1 : 42 { 0x2a +1.500e129 } : BV:32
=spec-%tmpvar-1.E0%0%d
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : unit : UNIT
4 : sum_init(1, 2, 3) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-2.E0%0%d
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : 42 { 0x2a +1.500e129 } : BV:32
3 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : unit : UNIT
6 : sum_init(3, 4, 5) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(1, 2, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%tmpvar-3.E0%0%d
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 42 { 0x2a +1.500e129 } : BV:32
5 : 0 { 0x0 +1.0e1025 } : INT
6 : unit : UNIT
7 : sum_init(1, 5, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
8 : prod_init(3, 4, 7) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
9 : sum_init(1, 2, 8) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-4.E0%0%d
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : 42 { 0x2a +1.500e129 } : BV:32
5 : 0 { 0x0 +1.0e1025 } : INT
6 : unit : UNIT
7 : sum_init(1, 5, 6) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
8 : prod_init(3, 4, 7) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
9 : sum_init(1, 2, 8) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_sum)*ctor_prod)*(ctor_sum*func_ret))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 6 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 7 in src.spec.foo.
REGMEM
spec-%tmpvar-0.E0%0%d
1 : input.spec-%tmpvar-0.E0%0%d : BV:32
=Loc 8 in src.spec.foo.
REGMEM
spec-%tmpvar-1.E0%0%d
1 : input.spec-%tmpvar-1.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 9 in src.spec.foo.
REGMEM
spec-%tmpvar-2.E0%0%d
1 : input.spec-%tmpvar-2.E0%0%d : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=Loc 10 in src.spec.foo.
REGMEM
spec-%tmpvar-3.E0%0%d
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 11 in src.spec.foo.
REGMEM
spec-%tmpvar-4.E0%0%d
1 : input.spec-%tmpvar-4.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d

=live locs at E0%0%d
11, 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
6
=loc definedness at E0%0%d
6, 7, 8, 9, 10, 11

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 7 {input.spec-%tmpvar-0.E0%0%d }
1 : 42 { 0x2a +1.500e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 8 {input.spec-%tmpvar-1.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar19 : BV:32
4 : Lambda56Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda57Var : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 9 {input.spec-%tmpvar-2.E0%0%d }
1 : 42 { 0x2a +1.500e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : unit : UNIT
4 : Indvar20 : BV:32
5 : Lambda59Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda60Var : BV:32
8 : sum(2, 3, 4) : SUM[UNIT,BV:32]
9 : prod(2, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(2, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(2, 3, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 10 {input.spec-%tmpvar-3.E0%0%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 42 { 0x2a +1.500e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indvar21 : BV:32
6 : Lambda62Var : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda63Var : BV:32
9 : sum(4, 2, 5) : SUM[UNIT,BV:32]
10 : prod(4, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(4, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 11 {input.spec-%tmpvar-4.E0%0%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 42 { 0x2a +1.500e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indvar21 : BV:32
6 : Lambda62Var : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda63Var : BV:32
9 : sum(4, 2, 5) : SUM[UNIT,BV:32]
10 : prod(4, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(4, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 7
=loc_expr
140540 : input.spec-%tmpvar-0.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 42 { 0x2a +1.500e129 } : BV:32
=avail_exprs_val.end
=loc 8
=loc_expr
140541 : input.spec-%tmpvar-1.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar19 : BV:32
4 : Lambda56Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda57Var : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.end
=loc 9
=loc_expr
140542 : input.spec-%tmpvar-2.E0%0%d : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 42 { 0x2a +1.500e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : unit : UNIT
4 : Indvar20 : BV:32
5 : Lambda59Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda60Var : BV:32
8 : sum(2, 3, 4) : SUM[UNIT,BV:32]
9 : prod(2, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(2, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(2, 3, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=avail_exprs_val.end
=loc 10
=loc_expr
140543 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 42 { 0x2a +1.500e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indvar21 : BV:32
6 : Lambda62Var : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda63Var : BV:32
9 : sum(4, 2, 5) : SUM[UNIT,BV:32]
10 : prod(4, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(4, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.end
=loc 11
=loc_expr
140538 : input.spec-%tmpvar-4.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 42 { 0x2a +1.500e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indvar21 : BV:32
6 : Lambda62Var : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda63Var : BV:32
9 : sum(4, 2, 5) : SUM[UNIT,BV:32]
10 : prod(4, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(4, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 7 expr
1 : input.spec-%tmpvar-0.E0%0%d : BV:32
=loc 7 spreled-expr
140274 : 42 { 0x2a +1.500e129 } : BV:32
=loc 8 expr
1 : input.spec-%tmpvar-1.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 8 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
140277 : unit : UNIT
140544 : Indvar19 : BV:32
140547 : Lambda56Var : BV:32
140548 : lambda(140547, 140547) : FUNCTION[BV:32 -> BV:32]
140549 : Lambda57Var : BV:32
140545 : sum(140287, 140277, 140544) : SUM[UNIT,BV:32]
140546 : prod(140287, 140545) : PROD[BV:32,SUM[UNIT,BV:32]]
140550 : lambda(140549, 140546) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
140551 : ind(140287, 140544, 140548, 140550) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
140552 : sum(140287, 140277, 140551) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140553 : sym_const(140552) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 9 expr
1 : input.spec-%tmpvar-2.E0%0%d : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=loc 9 spreled-expr
140274 : 42 { 0x2a +1.500e129 } : BV:32
140287 : 0 { 0x0 +1.0e129 } : BV:32
140277 : unit : UNIT
140555 : Indvar20 : BV:32
140558 : Lambda59Var : BV:32
140559 : lambda(140558, 140558) : FUNCTION[BV:32 -> BV:32]
140560 : Lambda60Var : BV:32
140556 : sum(140287, 140277, 140555) : SUM[UNIT,BV:32]
140557 : prod(140287, 140556) : PROD[BV:32,SUM[UNIT,BV:32]]
140561 : lambda(140560, 140557) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
140562 : ind(140287, 140555, 140559, 140561) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
140563 : sum(140287, 140277, 140562) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140564 : prod(140274, 140563) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
140565 : sym_const(140564) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=loc 10 expr
1 : input.spec-%tmpvar-3.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 10 spreled-expr
140290 : 1 { 0x1 +1.11e129 } : BV:32
140277 : unit : UNIT
140274 : 42 { 0x2a +1.500e129 } : BV:32
140287 : 0 { 0x0 +1.0e129 } : BV:32
140568 : Indvar21 : BV:32
140571 : Lambda62Var : BV:32
140572 : lambda(140571, 140571) : FUNCTION[BV:32 -> BV:32]
140573 : Lambda63Var : BV:32
140569 : sum(140287, 140277, 140568) : SUM[UNIT,BV:32]
140570 : prod(140287, 140569) : PROD[BV:32,SUM[UNIT,BV:32]]
140574 : lambda(140573, 140570) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
140575 : ind(140287, 140568, 140572, 140574) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
140576 : sum(140287, 140277, 140575) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140577 : prod(140274, 140576) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
140578 : sum(140290, 140277, 140577) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140579 : sym_const(140578) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 11 expr
1 : input.spec-%tmpvar-4.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 11 spreled-expr
140290 : 1 { 0x1 +1.11e129 } : BV:32
140277 : unit : UNIT
140274 : 42 { 0x2a +1.500e129 } : BV:32
140287 : 0 { 0x0 +1.0e129 } : BV:32
140568 : Indvar21 : BV:32
140571 : Lambda62Var : BV:32
140572 : lambda(140571, 140571) : FUNCTION[BV:32 -> BV:32]
140573 : Lambda63Var : BV:32
140569 : sum(140287, 140277, 140568) : SUM[UNIT,BV:32]
140570 : prod(140287, 140569) : PROD[BV:32,SUM[UNIT,BV:32]]
140574 : lambda(140573, 140570) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
140575 : ind(140287, 140568, 140572, 140574) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
140576 : sum(140287, 140277, 140575) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140577 : prod(140274, 140576) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
140578 : sum(140290, 140277, 140577) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140579 : sym_const(140578) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 6 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 7 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 8 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 9 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 10 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 11 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 7 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 8 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 9 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 10 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 11 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>E0%0%d
=spec-%tmpvar-0.E0%0%d
1 : 42 { 0x2a +1.500e129 } : BV:32
=spec-%tmpvar-1.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar19 : BV:32
4 : Lambda56Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda57Var : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-2.E0%0%d
1 : 42 { 0x2a +1.500e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : unit : UNIT
4 : Indvar20 : BV:32
5 : Lambda59Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda60Var : BV:32
8 : sum(2, 3, 4) : SUM[UNIT,BV:32]
9 : prod(2, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(2, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(2, 3, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%tmpvar-3.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 42 { 0x2a +1.500e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indvar21 : BV:32
6 : Lambda62Var : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda63Var : BV:32
9 : sum(4, 2, 5) : SUM[UNIT,BV:32]
10 : prod(4, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(4, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-4.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 42 { 0x2a +1.500e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indvar21 : BV:32
6 : Lambda62Var : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda63Var : BV:32
9 : sum(4, 2, 5) : SUM[UNIT,BV:32]
10 : prod(4, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(4, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
(L0%0%d=>E0%0%d)
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>E0%0%d
tfg.assumes_around_edge at L0%0%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d E0%0%d
=Edges:
L0%0%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for dst.llvm-mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%l : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%l : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 6 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%l : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=Edge: L0%0%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.E0%0%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.2.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : bvadd(4, 1) : BV:32
=dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.2.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.2.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.2.offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%next.E0%0%d
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%val.E0%0%d
1 : input.dst.llvm-%l : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.llvm-mem.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 42 { 0x2a +1.500e129 } : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : store(1, 2, 3, 10, 11, 12, 13) : ARRAY[BV:32 -> BV:8]
15 : mlvar.dst.llvm.foo.1 : MEMLABEL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvadd(8, 16) : BV:32
18 : bvadd(4, 17) : BV:32
19 : store(14, 2, 15, 18, 5, 12, 13) : ARRAY[BV:32 -> BV:8]
=dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%l : BV:32
2 : 8 { 0x8 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvslt(4, 4) : BOOL
6 : 32 { 0x20 +1.0e1025 } : INT
7 : bvsign_ext(4, 6) : BV:64
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvzero_ext(8, 6) : BV:64
10 : bvmul(7, 9) : BV:64
11 : 63 { 0x3f +1.0e1025 } : INT
12 : bvextract(10, 11, 6) : BV:32
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : eq(12, 4) : BOOL
16 : ite(5, 14, 15) : BOOL
17 : isindexforsize(16, 2) : BOOL
18 : bvmul(4, 8) : BV:32
19 : bvadd(4, 18) : BV:32
20 : bvadd(1, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(17, 21) : BOOL
23 : and(3, 22) : BOOL
24 : bvadd(19, 4) : BV:32
25 : bvadd(1, 24) : BV:32
26 : isgepoffset(25, 4) : BOOL
27 : and(23, 26) : BOOL
28 : 4 { 0x4 +1.0e1025 } : INT
29 : islangaligned(25, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 4 { 0x4 +1.47e129 } : BV:32
32 : bvadd(19, 31) : BV:32
33 : bvadd(1, 32) : BV:32
34 : isgepoffset(33, 31) : BOOL
35 : and(22, 34) : BOOL
36 : and(30, 35) : BOOL
37 : islangaligned(33, 28) : BOOL
38 : and(36, 37) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((((start_pc_edge*  %val = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 0, !dbg !22)*  %val = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 0, !dbg !22)*(  %val = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 0, !dbg !22*  %val = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 0, !dbg !22))*  store i32 42, i32* %val, align 4, !dbg !23)*((  %next = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 1, !dbg !24*  %next = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 1, !dbg !24)*(  %next = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 1, !dbg !24*  %next = getelementptr inbounds %struct.list, %struct.list* %l, i32 0, i32 1, !dbg !24)))*  store %struct.list* null, %struct.list** %next, align 4, !dbg !25)*  ret %struct.list* %l, !dbg !26)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%l : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100003 in dst.llvm.foo.
REGMEM
dst.llvm-%l
1 : input.dst.llvm-%l : BV:32
=Loc 100014 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100017 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100018 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100019 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100022 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100023 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100025 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100026 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100027 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100030 in dst.llvm.foo.
REGMEM
dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.3.total_offset.E0%0%d : BV:32
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100032 in dst.llvm.foo.
REGMEM
dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.2.offset.E0%0%d
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.3.total_offset.E0%0%d : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100037 in dst.llvm.foo.
REGMEM
dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.2.offset.E0%0%d
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=Loc 100038 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%next.E0%0%d
1 : input.dst.llvm-%next.E0%0%d : BV:32
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.llvm-%val.E0%0%d
1 : input.dst.llvm-%val.E0%0%d : BV:32
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.E0%0%d : COUNT
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.E0%0%d
1 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=Loc 100045 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100046 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100047 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100003[f], 100025, 
=live locs at E0%0%d
100003[f], 100045, 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100003, 100023, 100025, 100026, 100027
=loc definedness at E0%0%d
100003, 100023, 100025, 100026, 100027, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044, 100045, 100046, 100047

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100028 {input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.1.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100029 {input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.2.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100030 {input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.3.total_offset.E0%0%d }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100031 {input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.1.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100032 {input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.2.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100033 {input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.1.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100034 {input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.2.total_offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100035 {input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.3.total_offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100036 {input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.1.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100037 {input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.2.offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100038 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100039 {input.dst.llvm-%next.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100040 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100041 {input.dst.llvm-%val.E0%0%d }
1 : input.dst.llvm-%l : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100042 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100043 {input.dst.local_alloc_count.E0%0%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100044 {input.dst.cur_rounding_mode.E0%0%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100045 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 42 { 0x2a +1.500e129 } : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
13 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
14 : memmask(12, 2, 13) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100046 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 42 { 0x2a +1.500e129 } : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
13 : memlabel-mem--arg.0 : MEMLABEL
14 : memmask(12, 2, 13) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100047 {memmask(input.dst.llvm-mem.E0%0%d, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100003
=loc_expr
140331 : input.dst.llvm-%l : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100014
=loc_expr
140465 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140466 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140468 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100018
=loc_expr
140470 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100019
=loc_expr
140472 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100022
=loc_expr
140335 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100023
=loc_expr
140330 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100028
=loc_expr
140582 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100029
=loc_expr
140583 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100030
=loc_expr
140584 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.3.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l : BV:32
=avail_exprs_val.end
=loc 100031
=loc_expr
140585 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100032
=loc_expr
140586 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100033
=loc_expr
140587 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100034
=loc_expr
140588 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100035
=loc_expr
140589 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.3.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100036
=loc_expr
140590 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100037
=loc_expr
140591 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100038
=loc_expr
140592 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100039
=loc_expr
140593 : input.dst.llvm-%next.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100040
=loc_expr
140594 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
140595 : input.dst.llvm-%val.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140596 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100043
=loc_expr
140597 : input.dst.local_alloc_count.E0%0%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100044
=loc_expr
140598 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=loc 100045
=loc_expr
140580 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140328 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140332 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140581 : memmask(140580, 140328, 140332) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 42 { 0x2a +1.500e129 } : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
13 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
14 : memmask(12, 2, 13) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100046
=loc_expr
140580 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140328 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140511 : memlabel-mem--arg.0 : MEMLABEL
140599 : memmask(140580, 140328, 140511) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 42 { 0x2a +1.500e129 } : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
13 : memlabel-mem--arg.0 : MEMLABEL
14 : memmask(12, 2, 13) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100047
=loc_expr
140580 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
140328 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140474 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140600 : memmask(140580, 140328, 140474) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100028 expr
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100028 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100029 expr
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.2.total_offset.E0%0%d : BV:32
=loc 100029 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100031 expr
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100031 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100032 expr
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=loc 100032 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100033 expr
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100033 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100034 expr
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.2.total_offset.E0%0%d : BV:32
=loc 100034 spreled-expr
140320 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100036 expr
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100036 spreled-expr
140287 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100037 expr
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=loc 100037 spreled-expr
140320 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100042 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100042 spreled-expr
140267 : retaddr_const : BV:32
=loc 100043 expr
1 : input.dst.local_alloc_count.E0%0%d : COUNT
=loc 100043 spreled-expr
140335 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100044 expr
1 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=loc 100044 spreled-expr
140334 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100003 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.0, )
=loc_id 100014 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100017 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100018 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100019 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100022 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100023 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.0, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.0, )
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.0, )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.0, )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.0, )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100028 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100029 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100031 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100034 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100036 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100037 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100042 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100043 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>E0%0%d
=dst.cur_rounding_mode.E0%0%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.2.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.3.total_offset.E0%0%d
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.2.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.2.total_offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.3.total_offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.2.offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%next.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%l : BV:32
=dst.llvm-%val.E0%0%d
1 : input.dst.llvm-%l : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.llvm-mem.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%l : BV:32
5 : 42 { 0x2a +1.500e129 } : BV:32
6 : 4 { 0x4 +1.0e1025 } : INT
7 : 0 { 0x0 } : BOOL
8 : store(1, 2, 3, 4, 5, 6, 7) : ARRAY[BV:32 -> BV:8]
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(9, 4) : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : store(8, 2, 3, 10, 11, 6, 7) : ARRAY[BV:32 -> BV:8]
=dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d assume# 0
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : bvadd(1, 2) : BV:32
4 : isgepoffset(3, 1) : BOOL
5 : 1 { 0x1 } : BOOL
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : isgepoffset(2, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 8 { 0x8 +1.0e1025 } : INT
10 : islangaligned(2, 9) : BOOL
11 : and(10, 8) : BOOL
12 : and(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : islangaligned(2, 13) : BOOL
15 : and(4, 8, 12, 14) : BOOL
16 : islangaligned(3, 13) : BOOL
17 : and(15, 16) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
2
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
(L0%0%d=>E0%0%d)
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>E0%0%d
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #0
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #0.ec
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #0.pred
=Comment
undef-behavioursome.edge.L0%0%d=>E0%0%d
=LhsExpr
140320 : 4 { 0x4 +1.47e129 } : BV:32
140331 : input.dst.llvm-%l : BV:32
140539 : bvadd(140320, 140331) : BV:32
140567 : isgepoffset(140539, 140320) : BOOL
140273 : 1 { 0x1 } : BOOL
140287 : 0 { 0x0 +1.0e129 } : BV:32
140526 : isgepoffset(140331, 140287) : BOOL
140623 : and(140273, 140526) : BOOL
140336 : 8 { 0x8 +1.0e1025 } : INT
140337 : islangaligned(140331, 140336) : BOOL
140625 : and(140337, 140623) : BOOL
140628 : and(140526, 140625) : BOOL
140308 : 4 { 0x4 +1.0e1025 } : INT
140630 : islangaligned(140331, 140308) : BOOL
140641 : and(140567, 140623, 140628, 140630) : BOOL
140643 : islangaligned(140539, 140308) : BOOL
140646 : and(140641, 140643) : BOOL
=RhsExpr
140273 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 7
=pc
Lentry%2%d
=linename
line 7
=pc
Lentry%3%d
=linename
line 8
=pc
Lentry%4%d
=linename
line 8
=pc
Lentry%5%d
=linename
line 9
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 6
=pc
Lentry%2%d
=column_name
 at column 10
=pc
Lentry%3%d
=column_name
 at column 6
=pc
Lentry%4%d
=column_name
 at column 11
=pc
Lentry%5%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 7 at column 6)
=pc
Lentry%2%d
=line_and_column
(line 7 at column 10)
=pc
Lentry%3%d
=line_and_column
(line 8 at column 6)
=pc
Lentry%4%d
=line_and_column
(line 8 at column 11)
=pc
Lentry%5%d
=line_and_column
line 9
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%l : L0%0%d : l'
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.2.total_offset : L0%0%d : 0
input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.3.total_offset : L0%0%d : l'
input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.3.total_offset : L0%0%d : (l' + 4)
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.2.offset : L0%0%d : 0
input.dst.llvm-%val : L0%0%d : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.3.total_offset
input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%next : L0%0%d : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.3.total_offset
input.dst.llvm-%ret-reg : L0%0%d : l'
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%val.E0%0%d : L0%0%d : l'
input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.1.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.2.total_offset.E0%0%d : L0%0%d : 4
input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.2.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.3.total_offset.E0%0%d : L0%0%d : (4 + l')
input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.3.total_offset.E0%0%d : L0%0%d : l'
input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.2.offset.E0%0%d : L0%0%d : 4
input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.1.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%next.E0%0%d : L0%0%d : (4 + l')
input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.2.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : l'
input.dst.local_alloc_count.E0%0%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.E0%0%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%val
=dst.llvm-%val loop pc: L0%0%d
=dst.llvm-%val val_scevb
=dst.llvm-%val val_scevb scev
=dst.llvm-%val val_scevb scev loop: L0%0%d
=dst.llvm-%val val_scevb scev scev_overflow_flag: 
=dst.llvm-%val val_scevb scev scev_expr
1 : input.dst.llvm-%l : BV32
=dst.llvm-%val val_scevb scev scev_expr done
=dst.llvm-%val val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val val_scevb signed lower bound: 32:4294967295
=dst.llvm-%val val_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb
=dst.llvm-%val atuse_scevb scev
=dst.llvm-%val atuse_scevb scev loop: L0%0%d
=dst.llvm-%val atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%val atuse_scevb scev scev_expr
1 : input.dst.llvm-%l : BV32
=dst.llvm-%val atuse_scevb scev scev_expr done
=dst.llvm-%val atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atexit_scev nullptr
=dst.llvm-%next
=dst.llvm-%next loop pc: L0%0%d
=dst.llvm-%next val_scevb
=dst.llvm-%next val_scevb scev
=dst.llvm-%next val_scevb scev loop: L0%0%d
=dst.llvm-%next val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next val_scevb scev scev_expr
2 : 00000000000000000000000000000100b
1 : input.dst.llvm-%l : BV32
3 : scev_op_add(2, 1) : loop L0%0%d : nsw
=dst.llvm-%next val_scevb scev scev_expr done
=dst.llvm-%next val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next val_scevb signed lower bound: 32:2147483652
=dst.llvm-%next val_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb
=dst.llvm-%next atuse_scevb scev
=dst.llvm-%next atuse_scevb scev loop: L0%0%d
=dst.llvm-%next atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next atuse_scevb scev scev_expr
2 : 00000000000000000000000000000100b
1 : input.dst.llvm-%l : BV32
3 : scev_op_add(2, 1) : loop L0%0%d : nsw
=dst.llvm-%next atuse_scevb scev scev_expr done
=dst.llvm-%next atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%l : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 5 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.3.total_offset.E0%0%d : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.3.total_offset.E0%0%d : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.2.offset.E0%0%d : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%next.E0%0%d : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%val.E0%0%d : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 18 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%l
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.0, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%val.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.0, )
=LR status for var input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.2.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.2.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.gepoffset.3.total_offset.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.0, )
=LR status for var input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.3.total_offset.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.0, )
=LR status for var input.dst.llvm-%dc703a1e4de135773a3bead72516aa30.intermediate.gepoffset.2.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%next.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.0, )
=LR status for var input.dst.llvm-%5596743e78e16b30fc4260b1c2b49426.intermediate.gepoffset.2.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.0, )
=LR status for var input.dst.local_alloc_count.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.E0%0%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename ind5.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
arg0-is-not-nullptr
=LhsExpr
1 : $llvm-arg-0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
ret-implements-inductive-list
=LhsExpr
1 : $spec-ret : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : $llvm-ret : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : $llvm-md : ARRAY[BV:32 -> BV:8]
6 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(14, 15) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%l : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 6 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%l : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>E0%0%d#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>E0%0%d#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg0-is-not-nullptr
=LhsExpr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%l : BV:32
3 : eq(1, 2) : BOOL
4 : not(3) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%l : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1
=Locs end
=Liveness in foo.A1
=live locs at L0%0%d_L0%0%d

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1

=Branch affecting variable locs in foo.A1

=Relevant Memlabels in foo.A1
=relevant memlabels
=function: foo
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece cvc4.ce6.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin cvc4.ce6 437536c917fd40e5bdda7ad54b9eb6b9
=input.dst.llvm-mem
1 : ([ 0; 4294967291 ] -> 0, [ 4294967292; 4294967292 ] -> 253, [ 4294967293; 4294967293 ] -> 255, [ 4294967294; 4294967294 ] -> 255, [ 4294967295; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%l
1 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
=input.spec-%tmpvar-1.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar96 : BV:32
4 : Lambda368Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda369Var : BV:32
7 : prod(1, 3) : PROD[BV:32,BV:32]
8 : sum(1, 2, 7) : SUM[UNIT,PROD[BV:32,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
11 : prod(1, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-2.E0%0%d
1 : 42 { 0x2a +1.500e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : unit : UNIT
4 : Indvar98 : BV:32
5 : Lambda373Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda374Var : BV:32
8 : sum(2, 3, 4) : SUM[UNIT,BV:32]
9 : prod(2, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(2, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(2, 3, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%tmpvar-0.E0%0%d
1 : 42 { 0x2a +1.500e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
2 : unit : UNIT
3 : 42 { 0x2a +1.500e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indvar94 : BV:32
6 : Lambda363Var : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda364Var : BV:32
9 : prod(4, 5) : PROD[BV:32,BV:32]
10 : sum(4, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : unit : UNIT
3 : 42 { 0x2a +1.500e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indvar100 : BV:32
6 : Lambda378Var : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda379Var : BV:32
9 : prod(4, 5) : PROD[BV:32,BV:32]
10 : sum(4, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.E0%0%d.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d.0
1 : 42 { 0x2a +1.500e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d.0
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d.2.0
1 : 42 { 0x2a +1.500e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d.0
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%tmpvar-4.E0%0%d.2.0
1 : 42 { 0x2a +1.500e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
202303626
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce7.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce7 bdccefccf728e4e26c645544edeef396
=input.dst.llvm-mem
1 : ([ 0; 1342099484 ] -> 254, [ 1342099485; 1342099485 ] -> 167, [ 1342099486; 1342099486 ] -> 254, [ 1342099487; 1342099487 ] -> 79, [ 1342099488; 4294967295 ] -> 254, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1342099483 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1342099484; 1342099487 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1342099488; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1342099484 { 0x4ffed01c +1.99072599e32 } : BV:32
=input.dst.llvm-%l
1 : 1342089214 { 0x4ffea7fe +1.98950171e32 } : BV:32
=input.spec-%tmpvar-1.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indvar112 : BV:32
4 : Lambda408Var : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda409Var : BV:32
7 : prod(1, 3) : PROD[BV:32,BV:32]
8 : sum(1, 2, 7) : SUM[UNIT,PROD[BV:32,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
11 : prod(1, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-2.E0%0%d
1 : 42 { 0x2a +1.500e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : unit : UNIT
4 : Indvar114 : BV:32
5 : Lambda413Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda414Var : BV:32
8 : sum(2, 3, 4) : SUM[UNIT,BV:32]
9 : prod(2, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(2, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(2, 3, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%tmpvar-0.E0%0%d
1 : 42 { 0x2a +1.500e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
2 : unit : UNIT
3 : 42 { 0x2a +1.500e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indvar110 : BV:32
6 : Lambda403Var : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda404Var : BV:32
9 : prod(4, 5) : PROD[BV:32,BV:32]
10 : sum(4, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.E0%0%d
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
2 : unit : UNIT
3 : 42 { 0x2a +1.500e129 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indvar116 : BV:32
6 : Lambda418Var : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda419Var : BV:32
9 : prod(4, 5) : PROD[BV:32,BV:32]
10 : sum(4, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1342099484 { 0x4ffed01c +1.99072599e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1342099487 { 0x4ffed01f +1.99072635e32 } : BV:32
=input.spec-%tmpvar-1.E0%0%d.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d.0
1 : 42 { 0x2a +1.500e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-3.E0%0%d.2.0
1 : 42 { 0x2a +1.500e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-4.E0%0%d.2.0
1 : 42 { 0x2a +1.500e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2109014828
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece yices.ce8.num_edges_traversed0
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(epsilon)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin yices.ce8 b0e6efacbfbd35a92f76d63c64fafba0
=input.dst.llvm-mem
1 : ([ 0; 2 ] -> 0, [ 3; 3 ] -> 128, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar128 : BV:32
3 : Lambda448Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda449Var : BV:32
6 : unit : UNIT
7 : 355659295 { 0x1532ee1f +1.39789187e171 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-2.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indvar130 : BV:32
3 : Lambda453Var : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda454Var : BV:32
6 : 42 { 0x2a +1.500e129 } : BV:32
7 : unit : UNIT
8 : sum(1, 7, 2) : SUM[UNIT,BV:32]
9 : prod(6, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%tmpvar-0.E0%0%d
1 : 42 { 0x2a +1.500e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indvar126 : BV:32
5 : Lambda443Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda444Var : BV:32
8 : 42 { 0x2a +1.500e129 } : BV:32
9 : sum(3, 2, 4) : SUM[UNIT,BV:32]
10 : prod(8, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.E0%0%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indvar132 : BV:32
5 : Lambda458Var : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda459Var : BV:32
8 : 42 { 0x2a +1.500e129 } : BV:32
9 : sum(3, 2, 4) : SUM[UNIT,BV:32]
10 : prod(8, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-1.E0%0%d.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d.0
1 : 42 { 0x2a +1.500e129 } : BV:32
=input.spec-%tmpvar-2.E0%0%d.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d.2.0
1 : 42 { 0x2a +1.500e129 } : BV:32
=input.spec-%tmpvar-3.E0%0%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d.2.0
1 : 42 { 0x2a +1.500e129 } : BV:32
=input.spec-%tmpvar-4.E0%0%d.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
84007017
=counter_example_end
=global nodece 2 num_edges_traversed 0
=global nodece 2 nodece_visted_pcs: 
L0%0%d_L0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
ret-implements-inductive-list
=LhsExpr
1 : input.spec-%tmpvar-4.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L0%0%d_L0%0%d=>E0%0%d_E0%0%d)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
ret-implements-inductive-list
=LhsExpr
1 : input.spec-%tmpvar-4.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l : BV:32
3 : Indvar0 : BV:32
4 : Lambda1Var : BV:32
5 : input.dst.llvm-mem.E0%0%d : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0Var : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140329 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140328 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140474 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140330 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140308 : 4 { 0x4 +1.0e1025 } : INT
140309 : 0 { 0x0 } : BOOL
140475 : select(140329, 140328, 140474, 140330, 140308, 140309) : BV:32
=RhsExpr
140331 : input.dst.llvm-%l : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.pred
=Comment
arg0-is-not-nullptr
=LhsExpr
140287 : 0 { 0x0 +1.0e129 } : BV:32
140331 : input.dst.llvm-%l : BV:32
140695 : eq(140287, 140331) : BOOL
140696 : not(140695) : BOOL
=RhsExpr
140273 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.pred
=Comment
undef-behavioursome.edge.L0%0%d=>E0%0%d
=LhsExpr
140320 : 4 { 0x4 +1.47e129 } : BV:32
140331 : input.dst.llvm-%l : BV:32
140539 : bvadd(140320, 140331) : BV:32
140567 : isgepoffset(140539, 140320) : BOOL
140273 : 1 { 0x1 } : BOOL
140287 : 0 { 0x0 +1.0e129 } : BV:32
140526 : isgepoffset(140331, 140287) : BOOL
140623 : and(140273, 140526) : BOOL
140336 : 8 { 0x8 +1.0e1025 } : INT
140337 : islangaligned(140331, 140336) : BOOL
140625 : and(140337, 140623) : BOOL
140628 : and(140526, 140625) : BOOL
140308 : 4 { 0x4 +1.0e1025 } : INT
140630 : islangaligned(140331, 140308) : BOOL
140641 : and(140567, 140623, 140628, 140630) : BOOL
140643 : islangaligned(140539, 140308) : BOOL
140646 : and(140641, 140643) : BOOL
=RhsExpr
140273 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.pred
=Comment
precond-mlasserts
=LhsExpr
140680 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140681 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140682 : bvule(140680, 140681) : BOOL
140320 : 4 { 0x4 +1.47e129 } : BV:32
140438 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140683 : bvadd(140320, 140438) : BV:32
140684 : bvadd(140680, 140683) : BV:32
140685 : eq(140681, 140684) : BOOL
140686 : and(140682, 140685) : BOOL
140330 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140687 : 3 { 0x3 +1.35e129 } : BV:32
140688 : bvand(140330, 140687) : BV:32
140287 : 0 { 0x0 +1.0e129 } : BV:32
140689 : eq(140688, 140287) : BOOL
140690 : and(140686, 140689) : BOOL
140691 : eq(140330, 140680) : BOOL
140692 : and(140690, 140691) : BOOL
=RhsExpr
140273 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
