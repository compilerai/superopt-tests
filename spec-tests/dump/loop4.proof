=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A2.B2.C1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%13%d L3%14%bbentry L3%17%bbentry L3%20%d L3%21%bbentry L3%24%bbentry L3%26%bbentry L3%27%bbentry L3%30%bbentry L3%31%d L3%32%bbentry L3%33%bbentry E0%0%d
=Edges:
L0%0%d => L3%30%bbentry
L3%30%bbentry => L3%31%d
L3%31%d => L3%33%bbentry
L3%31%d => L3%32%bbentry
L3%32%bbentry => L3%13%d
L3%13%d => L3%17%bbentry
L3%13%d => L3%14%bbentry
L3%14%bbentry => L3%27%bbentry
L3%17%bbentry => L3%20%d
L3%20%d => L3%24%bbentry
L3%20%d => L3%21%bbentry
L3%21%bbentry => L3%26%bbentry
L3%24%bbentry => L3%26%bbentry
L3%26%bbentry => L3%27%bbentry
L3%27%bbentry => E0%0%d
L3%33%bbentry => L3%30%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%13%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%14%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%17%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%20%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%21%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%24%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%26%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%27%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%30%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%31%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%32%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%33%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-n-1 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-25.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L3%30%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-r-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-9.L3%30%bbentry
1 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
2 : map_init(1) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-7.L3%30%bbentry
1 : SORT2EXPR.VAR : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : map_init(1) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-n-0.L3%30%bbentry
1 : input.spec-%var-n-1 : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((func_head*ctor_map)*ctor_bv)*(((((ctor_map*ctor_bv)*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%30%bbentry => L3%31%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%31%d
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
2 : input.spec-%var-n-0.L3%30%bbentry : BV:32
3 : bvsgt(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_bvsgt)
tfg_edge_comment end

=Edge: L3%31%d => L3%33%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%31%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_false_split
tfg_edge_comment end

=Edge: L3%31%d => L3%32%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%31%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:ite_true_split
tfg_edge_comment end

=Edge: L3%32%bbentry => L3%13%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-14.L3%13%d
1 : input.spec-%tmpvar-9.L3%30%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%tmpvar-10.L3%30%bbentry : BV:32
3 : input.spec-%var-r-0.L3%30%bbentry : BV:32
4 : map_set(1, 2, 3) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-13.L3%13%d
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=spec-%tmpvar-17.L3%13%d
1 : input.spec-%tmpvar-7.L3%30%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%tmpvar-8.L3%30%bbentry : BV:32
3 : input.spec-%tmpvar-9.L3%30%bbentry : MAP[BV:32 -> BV:32]
4 : input.spec-%tmpvar-10.L3%30%bbentry : BV:32
5 : input.spec-%var-r-0.L3%30%bbentry : BV:32
6 : map_set(3, 4, 5) : MAP[BV:32 -> BV:32]
7 : map_set(1, 2, 6) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : map_get(7, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=spec-%tmpvar-15.L3%13%d
1 : input.spec-%tmpvar-7.L3%30%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%tmpvar-8.L3%30%bbentry : BV:32
3 : input.spec-%tmpvar-9.L3%30%bbentry : MAP[BV:32 -> BV:32]
4 : input.spec-%tmpvar-10.L3%30%bbentry : BV:32
5 : input.spec-%var-r-0.L3%30%bbentry : BV:32
6 : map_set(3, 4, 5) : MAP[BV:32 -> BV:32]
7 : map_set(1, 2, 6) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=spec-%tmpvar-6.L3%13%d
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=spec-%tmpvar-5.L3%13%d
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=spec-%var-m1-0.L3%13%d
1 : input.spec-%tmpvar-7.L3%30%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%tmpvar-8.L3%30%bbentry : BV:32
3 : input.spec-%tmpvar-9.L3%30%bbentry : MAP[BV:32 -> BV:32]
4 : input.spec-%tmpvar-10.L3%30%bbentry : BV:32
5 : input.spec-%var-r-0.L3%30%bbentry : BV:32
6 : map_set(3, 4, 5) : MAP[BV:32 -> BV:32]
7 : map_set(1, 2, 6) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*ite_true_merge)*func_ret)*(inline_exit*intrinsic_app_map_set))*(((intrinsic_app_map_set*letin_def)*ctor_bv)*intrinsic_app_map_get))
tfg_edge_comment end

=Edge: L3%13%d => L3%17%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:18:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%13%d => L3%14%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:15:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%14%bbentry => L3%27%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u-0.L3%27%bbentry
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-23.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L3%17%bbentry => L3%20%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-20.L3%20%d
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
=spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-m2-0.L3%20%d
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%20%d => L3%24%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:25:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%20%d => L3%21%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:22:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%21%bbentry => L3%26%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-22.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u2-0.L3%26%bbentry
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L3%24%bbentry => L3%26%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-22.L3%26%bbentry
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-y-0.L3%26%bbentry
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L3%26%bbentry => L3%27%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-23.L3%27%bbentry
1 : input.spec-%tmpvar-22.L3%26%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*match_sum_merge_1)
tfg_edge_comment end

=Edge: L3%27%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-25.E0%0%d
1 : input.spec-%tmpvar-23.L3%27%bbentry : BV:32
=spec-%tmpvar-24.E0%0%d
1 : input.spec-%tmpvar-23.L3%27%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*letin_body)*func_ret)
tfg_edge_comment end

=Edge: L3%33%bbentry => L3%30%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-r-0.L3%30%bbentry
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
2 : input.spec-%var-i-0.L3%30%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%30%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%30%bbentry
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%30%bbentry
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
2 : input.spec-%var-i-0.L3%30%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-i-0.L3%30%bbentry
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-n-0.L3%30%bbentry
1 : input.spec-%var-n-0.L3%30%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*ctor_bv)*intrinsic_app_bvadd)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-n-1
1 : input.spec-%var-n-1 : BV:32
=Loc 36 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 37 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 38 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%31%d
1 : input.spec-%tmpvar-0.L3%31%d : BOOL
=Loc 39 in src.spec.foo.
REGMEM
spec-%tmpvar-17.L3%13%d
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=Loc 40 in src.spec.foo.
REGMEM
spec-%tmpvar-20.L3%20%d
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
=Loc 41 in src.spec.foo.
REGMEM
spec-%tmpvar-23.L3%27%bbentry
1 : input.spec-%tmpvar-23.L3%27%bbentry : BV:32
=Loc 42 in src.spec.foo.
REGMEM
spec-%tmpvar-24.E0%0%d
1 : input.spec-%tmpvar-24.E0%0%d : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%tmpvar-25.E0%0%d
1 : input.spec-%tmpvar-25.E0%0%d : BV:32
=Loc 44 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%30%bbentry
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
=Loc 45 in src.spec.foo.
REGMEM
spec-%var-n-0.L3%30%bbentry
1 : input.spec-%var-n-0.L3%30%bbentry : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-19.L3%20%d
1 : input.spec-%tmpvar-19.L3%20%d : BV:32
=Loc 47 in src.spec.foo.
REGMEM
spec-%var-m2-0.L3%20%d
1 : input.spec-%var-m2-0.L3%20%d : MAP[BV:32 -> BV:32]
=Loc 48 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L3%30%bbentry
1 : input.spec-%tmpvar-10.L3%30%bbentry : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%tmpvar-13.L3%13%d
1 : input.spec-%tmpvar-13.L3%13%d : BV:32
=Loc 50 in src.spec.foo.
REGMEM
spec-%tmpvar-14.L3%13%d
1 : input.spec-%tmpvar-14.L3%13%d : MAP[BV:32 -> BV:32]
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-15.L3%13%d
1 : input.spec-%tmpvar-15.L3%13%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 52 in src.spec.foo.
REGMEM
spec-%tmpvar-16.L3%13%d
1 : input.spec-%tmpvar-16.L3%13%d : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L3%13%d
1 : input.spec-%tmpvar-5.L3%13%d : BV:32
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L3%13%d
1 : input.spec-%tmpvar-6.L3%13%d : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L3%30%bbentry
1 : input.spec-%tmpvar-7.L3%30%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 56 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%30%bbentry
1 : input.spec-%tmpvar-8.L3%30%bbentry : BV:32
=Loc 57 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L3%30%bbentry
1 : input.spec-%tmpvar-9.L3%30%bbentry : MAP[BV:32 -> BV:32]
=Loc 58 in src.spec.foo.
REGMEM
spec-%var-m1-0.L3%13%d
1 : input.spec-%var-m1-0.L3%13%d : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 59 in src.spec.foo.
REGMEM
spec-%var-r-0.L3%30%bbentry
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-21.L3%26%bbentry
1 : input.spec-%tmpvar-21.L3%26%bbentry : BV:32
=Loc 61 in src.spec.foo.
REGMEM
spec-%tmpvar-22.L3%26%bbentry
1 : input.spec-%tmpvar-22.L3%26%bbentry : BV:32
=Loc 62 in src.spec.foo.
REGMEM
spec-%var-u2-0.L3%26%bbentry
1 : input.spec-%var-u2-0.L3%26%bbentry : UNIT
=Loc 63 in src.spec.foo.
REGMEM
spec-%var-y-0.L3%26%bbentry
1 : input.spec-%var-y-0.L3%26%bbentry : BV:32
=Loc 64 in src.spec.foo.
REGMEM
spec-%tmpvar-18.L3%27%bbentry
1 : input.spec-%tmpvar-18.L3%27%bbentry : BV:32
=Loc 65 in src.spec.foo.
REGMEM
spec-%var-u-0.L3%27%bbentry
1 : input.spec-%var-u-0.L3%27%bbentry : UNIT
=Loc 66 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L3%30%bbentry
1 : input.spec-%tmpvar-11.L3%30%bbentry : BV:32
=Loc 67 in src.spec.foo.
REGMEM
spec-%tmpvar-12.L3%30%bbentry
1 : input.spec-%tmpvar-12.L3%30%bbentry : BV:32
=Loc 68 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%30%bbentry : BV:32
=Loc 69 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%30%bbentry
1 : input.spec-%tmpvar-1.L3%30%bbentry : BV:32
=Loc 70 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%30%bbentry
1 : input.spec-%tmpvar-2.L3%30%bbentry : BV:32
=Loc 71 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%30%bbentry
1 : input.spec-%tmpvar-3.L3%30%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%13%d
39, 
=live locs at L3%14%bbentry

=live locs at L3%17%bbentry
39, 
=live locs at L3%20%d
40, 
=live locs at L3%21%bbentry

=live locs at L3%24%bbentry
40, 
=live locs at L3%26%bbentry
61, 
=live locs at L3%27%bbentry
41, 
=live locs at L3%30%bbentry
44, 45, 48, 55, 56, 57, 59, 
=live locs at L3%31%d
38, 44, 45, 48, 55, 56, 57, 59, 
=live locs at L3%32%bbentry
48, 55, 56, 57, 59, 
=live locs at L3%33%bbentry
44, 45, 48, 55, 56, 57, 59, 
=live locs at E0%0%d
43[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 36, 37
=loc definedness at L3%13%d
1, 36, 37, 38, 39, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 68
=loc definedness at L3%14%bbentry
1, 36, 37, 38, 39, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 68
=loc definedness at L3%17%bbentry
1, 36, 37, 38, 39, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 68
=loc definedness at L3%20%d
1, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 68
=loc definedness at L3%21%bbentry
1, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 68
=loc definedness at L3%24%bbentry
1, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 68
=loc definedness at L3%26%bbentry
1, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 66, 67, 68
=loc definedness at L3%27%bbentry
1, 36, 37, 38, 39, 41, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 68
=loc definedness at L3%30%bbentry
1, 36, 37, 44, 45, 48, 55, 56, 57, 59, 66, 67, 68
=loc definedness at L3%31%d
1, 36, 37, 38, 44, 45, 48, 55, 56, 57, 59, 66, 67, 68
=loc definedness at L3%32%bbentry
1, 36, 37, 38, 44, 45, 48, 55, 56, 57, 59, 66, 67, 68
=loc definedness at L3%33%bbentry
1, 36, 37, 38, 44, 45, 48, 55, 56, 57, 59, 66, 67, 68
=loc definedness at E0%0%d
1, 36, 37, 38, 39, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 68

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%13%d
39
=branch affecting variable locs at L3%14%bbentry

=branch affecting variable locs at L3%17%bbentry
39
=branch affecting variable locs at L3%20%d
40
=branch affecting variable locs at L3%21%bbentry

=branch affecting variable locs at L3%24%bbentry

=branch affecting variable locs at L3%26%bbentry

=branch affecting variable locs at L3%27%bbentry

=branch affecting variable locs at L3%30%bbentry
44, 45, 59
=branch affecting variable locs at L3%31%d
38, 44, 45, 59
=branch affecting variable locs at L3%32%bbentry
59
=branch affecting variable locs at L3%33%bbentry
44, 45, 59
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%30%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%30%bbentry for loc_id 44 {input.spec-%var-i-0.L3%30%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%30%bbentry for loc_id 45 {input.spec-%var-n-0.L3%30%bbentry }
1 : input.spec-%var-n-1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%30%bbentry for loc_id 48 {input.spec-%tmpvar-10.L3%30%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%30%bbentry for loc_id 55 {input.spec-%tmpvar-7.L3%30%bbentry }
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%30%bbentry for loc_id 56 {input.spec-%tmpvar-8.L3%30%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%30%bbentry for loc_id 57 {input.spec-%tmpvar-9.L3%30%bbentry }
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%30%bbentry for loc_id 59 {input.spec-%var-r-0.L3%30%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%30%bbentry for loc_id 66 {input.spec-%tmpvar-11.L3%30%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%30%bbentry for loc_id 67 {input.spec-%tmpvar-12.L3%30%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%30%bbentry for loc_id 68 {input.src.spec-ghostvar.itervar.1.L3%30%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%30%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%13%d=>L3%14%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%13%d=>L3%14%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%13%d=>L3%17%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%13%d=>L3%17%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%14%bbentry=>L3%27%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%14%bbentry=>L3%27%bbentry for loc_id 41 {input.spec-%tmpvar-23.L3%27%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%14%bbentry=>L3%27%bbentry for loc_id 64 {input.spec-%tmpvar-18.L3%27%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%14%bbentry=>L3%27%bbentry for loc_id 65 {input.spec-%var-u-0.L3%27%bbentry }
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%14%bbentry=>L3%27%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%17%bbentry=>L3%20%d
=graph_with_edge_structures.loc_to_expr_map at L3%17%bbentry=>L3%20%d for loc_id 40 {input.spec-%tmpvar-20.L3%20%d }
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%17%bbentry=>L3%20%d for loc_id 46 {input.spec-%tmpvar-19.L3%20%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%17%bbentry=>L3%20%d for loc_id 47 {input.spec-%var-m2-0.L3%20%d }
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%17%bbentry=>L3%20%d done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%24%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%24%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%26%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%26%bbentry for loc_id 60 {input.spec-%tmpvar-21.L3%26%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%26%bbentry for loc_id 61 {input.spec-%tmpvar-22.L3%26%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%26%bbentry for loc_id 62 {input.spec-%var-u2-0.L3%26%bbentry }
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%26%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%24%bbentry=>L3%26%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%24%bbentry=>L3%26%bbentry for loc_id 61 {input.spec-%tmpvar-22.L3%26%bbentry }
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%24%bbentry=>L3%26%bbentry for loc_id 63 {input.spec-%var-y-0.L3%26%bbentry }
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%24%bbentry=>L3%26%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%26%bbentry=>L3%27%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%26%bbentry=>L3%27%bbentry for loc_id 41 {input.spec-%tmpvar-23.L3%27%bbentry }
1 : input.spec-%tmpvar-22.L3%26%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%26%bbentry=>L3%27%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%27%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%27%bbentry=>E0%0%d for loc_id 42 {input.spec-%tmpvar-24.E0%0%d }
1 : input.spec-%tmpvar-23.L3%27%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%27%bbentry=>E0%0%d for loc_id 43 {input.spec-%tmpvar-25.E0%0%d }
1 : input.spec-%tmpvar-23.L3%27%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%27%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%30%bbentry=>L3%31%d
=graph_with_edge_structures.loc_to_expr_map at L3%30%bbentry=>L3%31%d for loc_id 38 {input.spec-%tmpvar-0.L3%31%d }
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
2 : input.spec-%var-n-0.L3%30%bbentry : BV:32
3 : bvsgt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L3%30%bbentry=>L3%31%d done
=graph_with_edge_structures.loc_to_expr_map at L3%31%d=>L3%32%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%31%d=>L3%32%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%31%d=>L3%33%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%31%d=>L3%33%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%13%d
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%13%d for loc_id 39 {input.spec-%tmpvar-17.L3%13%d }
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : Lambda47 : BV:32
15 : lambda(14, 2) : FUNCTION[BV:32 -> BOOL]
16 : Lambda48 : BV:32
17 : lambda(16, 8) : FUNCTION[BV:32 -> BV:32]
18 : map(15, 17) : MAP[BV:32 -> BV:32]
19 : sym_const(18) : MAP[BV:32 -> BV:32]
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : input.spec-%var-r-0.L3%30%bbentry : BV:32
22 : map_set(19, 20, 21) : MAP[BV:32 -> BV:32]
23 : map_set(13, 8, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map_get(23, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%13%d for loc_id 49 {input.spec-%tmpvar-13.L3%13%d }
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%13%d for loc_id 50 {input.spec-%tmpvar-14.L3%13%d }
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : 1 { 0x1 +1.11e129 } : BV:32
10 : input.spec-%var-r-0.L3%30%bbentry : BV:32
11 : map_set(8, 9, 10) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%13%d for loc_id 51 {input.spec-%tmpvar-15.L3%13%d }
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : Lambda47 : BV:32
15 : lambda(14, 2) : FUNCTION[BV:32 -> BOOL]
16 : Lambda48 : BV:32
17 : lambda(16, 8) : FUNCTION[BV:32 -> BV:32]
18 : map(15, 17) : MAP[BV:32 -> BV:32]
19 : sym_const(18) : MAP[BV:32 -> BV:32]
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : input.spec-%var-r-0.L3%30%bbentry : BV:32
22 : map_set(19, 20, 21) : MAP[BV:32 -> BV:32]
23 : map_set(13, 8, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%13%d for loc_id 52 {input.spec-%tmpvar-16.L3%13%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%13%d for loc_id 53 {input.spec-%tmpvar-5.L3%13%d }
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%13%d for loc_id 54 {input.spec-%tmpvar-6.L3%13%d }
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%13%d for loc_id 58 {input.spec-%var-m1-0.L3%13%d }
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : Lambda47 : BV:32
15 : lambda(14, 2) : FUNCTION[BV:32 -> BOOL]
16 : Lambda48 : BV:32
17 : lambda(16, 8) : FUNCTION[BV:32 -> BV:32]
18 : map(15, 17) : MAP[BV:32 -> BV:32]
19 : sym_const(18) : MAP[BV:32 -> BV:32]
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : input.spec-%var-r-0.L3%30%bbentry : BV:32
22 : map_set(19, 20, 21) : MAP[BV:32 -> BV:32]
23 : map_set(13, 8, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%13%d done
=graph_with_edge_structures.loc_to_expr_map at L3%33%bbentry=>L3%30%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%33%bbentry=>L3%30%bbentry for loc_id 44 {input.spec-%var-i-0.L3%30%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%30%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%33%bbentry=>L3%30%bbentry for loc_id 59 {input.spec-%var-r-0.L3%30%bbentry }
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
2 : input.spec-%var-r-0.L3%30%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%33%bbentry=>L3%30%bbentry for loc_id 68 {input.src.spec-ghostvar.itervar.1.L3%30%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%30%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%33%bbentry=>L3%30%bbentry for loc_id 69 {input.spec-%tmpvar-1.L3%30%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%33%bbentry=>L3%30%bbentry for loc_id 70 {input.spec-%tmpvar-2.L3%30%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%30%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%33%bbentry=>L3%30%bbentry for loc_id 71 {input.spec-%tmpvar-3.L3%30%bbentry }
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
2 : input.spec-%var-r-0.L3%30%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%33%bbentry=>L3%30%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%13%d:
vacuous mls at L3%14%bbentry:
vacuous mls at L3%17%bbentry:
vacuous mls at L3%20%d:
vacuous mls at L3%21%bbentry:
vacuous mls at L3%24%bbentry:
vacuous mls at L3%26%bbentry:
vacuous mls at L3%27%bbentry:
vacuous mls at L3%30%bbentry:
vacuous mls at L3%31%d:
vacuous mls at L3%32%bbentry:
vacuous mls at L3%33%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%13%d:
non-vacuous mls at L3%14%bbentry:
non-vacuous mls at L3%17%bbentry:
non-vacuous mls at L3%20%d:
non-vacuous mls at L3%21%bbentry:
non-vacuous mls at L3%24%bbentry:
non-vacuous mls at L3%26%bbentry:
non-vacuous mls at L3%27%bbentry:
non-vacuous mls at L3%30%bbentry:
non-vacuous mls at L3%31%d:
non-vacuous mls at L3%32%bbentry:
non-vacuous mls at L3%33%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 45
=loc_expr
140356 : input.spec-%var-n-0.L3%30%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-n-1 : BV:32
=avail_exprs_val.end
=loc 46
=loc_expr
140482 : input.spec-%tmpvar-19.L3%20%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 48
=loc_expr
140362 : input.spec-%tmpvar-10.L3%30%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 52
=loc_expr
140488 : input.spec-%tmpvar-16.L3%13%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 55
=loc_expr
140383 : input.spec-%tmpvar-7.L3%30%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 56
=loc_expr
140450 : input.spec-%tmpvar-8.L3%30%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 57
=loc_expr
140361 : input.spec-%tmpvar-9.L3%30%bbentry : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 60
=loc_expr
140493 : input.spec-%tmpvar-21.L3%26%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 64
=loc_expr
140496 : input.spec-%tmpvar-18.L3%27%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 66
=loc_expr
140498 : input.spec-%tmpvar-11.L3%30%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 67
=loc_expr
140499 : input.spec-%tmpvar-12.L3%30%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 69
=loc_expr
140500 : input.spec-%tmpvar-1.L3%30%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 46 expr
1 : input.spec-%tmpvar-19.L3%20%d : BV:32
=loc 46 spreled-expr
140281 : 1 { 0x1 +1.11e129 } : BV:32
=loc 48 expr
1 : input.spec-%tmpvar-10.L3%30%bbentry : BV:32
=loc 48 spreled-expr
140281 : 1 { 0x1 +1.11e129 } : BV:32
=loc 52 expr
1 : input.spec-%tmpvar-16.L3%13%d : BV:32
=loc 52 spreled-expr
140278 : 0 { 0x0 +1.0e129 } : BV:32
=loc 55 expr
1 : input.spec-%tmpvar-7.L3%30%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=loc 55 spreled-expr
140503 : Lambda43 : BV:32
140339 : 0 { 0x0 } : BOOL
140504 : lambda(140503, 140339) : FUNCTION[BV:32 -> BOOL]
140510 : Lambda46 : BV:32
140505 : Lambda44 : BV:32
140506 : lambda(140505, 140339) : FUNCTION[BV:32 -> BOOL]
140507 : Lambda45 : BV:32
140278 : 0 { 0x0 +1.0e129 } : BV:32
140508 : lambda(140507, 140278) : FUNCTION[BV:32 -> BV:32]
140509 : map(140506, 140508) : MAP[BV:32 -> BV:32]
140511 : lambda(140510, 140509) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
140512 : map(140504, 140511) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140517 : sym_const(140512) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=loc 56 expr
1 : input.spec-%tmpvar-8.L3%30%bbentry : BV:32
=loc 56 spreled-expr
140278 : 0 { 0x0 +1.0e129 } : BV:32
=loc 57 expr
1 : input.spec-%tmpvar-9.L3%30%bbentry : MAP[BV:32 -> BV:32]
=loc 57 spreled-expr
140518 : Lambda47 : BV:32
140339 : 0 { 0x0 } : BOOL
140519 : lambda(140518, 140339) : FUNCTION[BV:32 -> BOOL]
140520 : Lambda48 : BV:32
140278 : 0 { 0x0 +1.0e129 } : BV:32
140521 : lambda(140520, 140278) : FUNCTION[BV:32 -> BV:32]
140522 : map(140519, 140521) : MAP[BV:32 -> BV:32]
140523 : sym_const(140522) : MAP[BV:32 -> BV:32]
=loc 60 expr
1 : input.spec-%tmpvar-21.L3%26%bbentry : BV:32
=loc 60 spreled-expr
140278 : 0 { 0x0 +1.0e129 } : BV:32
=loc 64 expr
1 : input.spec-%tmpvar-18.L3%27%bbentry : BV:32
=loc 64 spreled-expr
140278 : 0 { 0x0 +1.0e129 } : BV:32
=loc 66 expr
1 : input.spec-%tmpvar-11.L3%30%bbentry : BV:32
=loc 66 spreled-expr
140281 : 1 { 0x1 +1.11e129 } : BV:32
=loc 67 expr
1 : input.spec-%tmpvar-12.L3%30%bbentry : BV:32
=loc 67 spreled-expr
140278 : 0 { 0x0 +1.0e129 } : BV:32
=loc 69 expr
1 : input.spec-%tmpvar-1.L3%30%bbentry : BV:32
=loc 69 spreled-expr
140281 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 62 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 63 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 64 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 67 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 68 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 69 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 70 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 71 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 46 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 48 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 56 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 57 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 60 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 64 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 67 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 69 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%30%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%13%d=>L3%14%bbentry
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%13%d=>L3%17%bbentry
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%14%bbentry=>L3%27%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%17%bbentry=>L3%20%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%21%bbentry
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%24%bbentry
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%21%bbentry=>L3%26%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%24%bbentry=>L3%26%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%26%bbentry=>L3%27%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%27%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%30%bbentry=>L3%31%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%31%d=>L3%32%bbentry
1 : input.spec-%tmpvar-0.L3%31%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%31%d=>L3%33%bbentry
1 : input.spec-%tmpvar-0.L3%31%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%32%bbentry=>L3%13%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%33%bbentry=>L3%30%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%30%bbentry
=spec-%var-r-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-9.L3%30%bbentry
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-7.L3%30%bbentry
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-n-0.L3%30%bbentry
1 : input.spec-%var-n-1 : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%13%d=>L3%14%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%13%d=>L3%17%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%14%bbentry=>L3%27%bbentry
=spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u-0.L3%27%bbentry
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-23.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%17%bbentry=>L3%20%d
=spec-%tmpvar-20.L3%20%d
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
=spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%var-m2-0.L3%20%d
1 : input.spec-%tmpvar-17.L3%13%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%21%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%24%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%21%bbentry=>L3%26%bbentry
=spec-%tmpvar-22.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u2-0.L3%26%bbentry
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%24%bbentry=>L3%26%bbentry
=spec-%tmpvar-22.L3%26%bbentry
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-y-0.L3%26%bbentry
1 : input.spec-%tmpvar-20.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%26%bbentry=>L3%27%bbentry
=spec-%tmpvar-23.L3%27%bbentry
1 : input.spec-%tmpvar-22.L3%26%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%27%bbentry=>E0%0%d
=spec-%tmpvar-25.E0%0%d
1 : input.spec-%tmpvar-23.L3%27%bbentry : BV:32
=spec-%tmpvar-24.E0%0%d
1 : input.spec-%tmpvar-23.L3%27%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%30%bbentry=>L3%31%d
=spec-%tmpvar-0.L3%31%d
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
2 : input.spec-%var-n-0.L3%30%bbentry : BV:32
3 : bvsgt(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%31%d=>L3%32%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%31%d=>L3%33%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%32%bbentry=>L3%13%d
=spec-%tmpvar-14.L3%13%d
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
9 : 1 { 0x1 +1.11e129 } : BV:32
10 : input.spec-%var-r-0.L3%30%bbentry : BV:32
11 : map_set(8, 9, 10) : MAP[BV:32 -> BV:32]
=spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-13.L3%13%d
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=spec-%tmpvar-17.L3%13%d
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : Lambda47 : BV:32
15 : lambda(14, 2) : FUNCTION[BV:32 -> BOOL]
16 : Lambda48 : BV:32
17 : lambda(16, 8) : FUNCTION[BV:32 -> BV:32]
18 : map(15, 17) : MAP[BV:32 -> BV:32]
19 : sym_const(18) : MAP[BV:32 -> BV:32]
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : input.spec-%var-r-0.L3%30%bbentry : BV:32
22 : map_set(19, 20, 21) : MAP[BV:32 -> BV:32]
23 : map_set(13, 8, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map_get(23, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=spec-%tmpvar-15.L3%13%d
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : Lambda47 : BV:32
15 : lambda(14, 2) : FUNCTION[BV:32 -> BOOL]
16 : Lambda48 : BV:32
17 : lambda(16, 8) : FUNCTION[BV:32 -> BV:32]
18 : map(15, 17) : MAP[BV:32 -> BV:32]
19 : sym_const(18) : MAP[BV:32 -> BV:32]
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : input.spec-%var-r-0.L3%30%bbentry : BV:32
22 : map_set(19, 20, 21) : MAP[BV:32 -> BV:32]
23 : map_set(13, 8, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=spec-%tmpvar-6.L3%13%d
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=spec-%tmpvar-5.L3%13%d
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=spec-%var-m1-0.L3%13%d
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
14 : Lambda47 : BV:32
15 : lambda(14, 2) : FUNCTION[BV:32 -> BOOL]
16 : Lambda48 : BV:32
17 : lambda(16, 8) : FUNCTION[BV:32 -> BV:32]
18 : map(15, 17) : MAP[BV:32 -> BV:32]
19 : sym_const(18) : MAP[BV:32 -> BV:32]
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : input.spec-%var-r-0.L3%30%bbentry : BV:32
22 : map_set(19, 20, 21) : MAP[BV:32 -> BV:32]
23 : map_set(13, 8, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%33%bbentry=>L3%30%bbentry
=spec-%var-r-0.L3%30%bbentry
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
2 : input.spec-%var-r-0.L3%30%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%30%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%30%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%30%bbentry
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
2 : input.spec-%var-r-0.L3%30%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%30%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%30%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%30%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%13%d=>L3%14%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%13%d=>L3%14%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%13%d=>L3%17%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%13%d=>L3%17%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%14%bbentry=>L3%27%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%14%bbentry=>L3%27%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%17%bbentry=>L3%20%d
=graph_with_simplified_assets.simplified_assumes at L3%17%bbentry=>L3%20%d done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%24%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%24%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%26%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%26%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%24%bbentry=>L3%26%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%24%bbentry=>L3%26%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%26%bbentry=>L3%27%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%26%bbentry=>L3%27%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%27%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%27%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%30%bbentry=>L3%31%d
=graph_with_simplified_assets.simplified_assumes at L3%30%bbentry=>L3%31%d done
=graph_with_simplified_assets.simplified_assumes at L3%31%d=>L3%32%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%31%d=>L3%32%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%31%d=>L3%33%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%31%d=>L3%33%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%32%bbentry=>L3%13%d
=graph_with_simplified_assets.simplified_assumes at L3%32%bbentry=>L3%13%d done
=graph_with_simplified_assets.simplified_assumes at L3%33%bbentry=>L3%30%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%33%bbentry=>L3%30%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%13%d for src.spec.foo
=suffixpath_at_L3%13%d.graph_edge_composition
((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*(L3%32%bbentry=>L3%13%d))))
=suffixpath_at_L3%14%bbentry for src.spec.foo
=suffixpath_at_L3%14%bbentry.graph_edge_composition
((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*(L3%13%d=>L3%14%bbentry)))))
=suffixpath_at_L3%17%bbentry for src.spec.foo
=suffixpath_at_L3%17%bbentry.graph_edge_composition
((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*(L3%13%d=>L3%17%bbentry)))))
=suffixpath_at_L3%20%d for src.spec.foo
=suffixpath_at_L3%20%d.graph_edge_composition
((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*((L3%13%d=>L3%17%bbentry)*(L3%17%bbentry=>L3%20%d))))))
=suffixpath_at_L3%21%bbentry for src.spec.foo
=suffixpath_at_L3%21%bbentry.graph_edge_composition
((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*((L3%13%d=>L3%17%bbentry)*((L3%17%bbentry=>L3%20%d)*(L3%20%d=>L3%21%bbentry)))))))
=suffixpath_at_L3%24%bbentry for src.spec.foo
=suffixpath_at_L3%24%bbentry.graph_edge_composition
((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*((L3%13%d=>L3%17%bbentry)*((L3%17%bbentry=>L3%20%d)*(L3%20%d=>L3%24%bbentry)))))))
=suffixpath_at_L3%26%bbentry for src.spec.foo
=suffixpath_at_L3%26%bbentry.graph_edge_composition
(((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*((L3%13%d=>L3%17%bbentry)*((L3%17%bbentry=>L3%20%d)*((L3%20%d=>L3%21%bbentry)*(L3%21%bbentry=>L3%26%bbentry))))))))+((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*((L3%13%d=>L3%17%bbentry)*((L3%17%bbentry=>L3%20%d)*((L3%20%d=>L3%24%bbentry)*(L3%24%bbentry=>L3%26%bbentry)))))))))
=suffixpath_at_L3%27%bbentry for src.spec.foo
=suffixpath_at_L3%27%bbentry.graph_edge_composition
(((((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*((L3%13%d=>L3%17%bbentry)*((L3%17%bbentry=>L3%20%d)*((L3%20%d=>L3%21%bbentry)*(L3%21%bbentry=>L3%26%bbentry))))))))+((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*((L3%13%d=>L3%17%bbentry)*((L3%17%bbentry=>L3%20%d)*((L3%20%d=>L3%24%bbentry)*(L3%24%bbentry=>L3%26%bbentry)))))))))*(L3%26%bbentry=>L3%27%bbentry))+((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*((L3%13%d=>L3%14%bbentry)*(L3%14%bbentry=>L3%27%bbentry)))))))
=suffixpath_at_L3%30%bbentry for src.spec.foo
=suffixpath_at_L3%30%bbentry.graph_edge_composition
(L0%0%d=>L3%30%bbentry)
=suffixpath_at_L3%31%d for src.spec.foo
=suffixpath_at_L3%31%d.graph_edge_composition
((L0%0%d=>L3%30%bbentry)*(L3%30%bbentry=>L3%31%d))
=suffixpath_at_L3%32%bbentry for src.spec.foo
=suffixpath_at_L3%32%bbentry.graph_edge_composition
((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*(L3%31%d=>L3%32%bbentry)))
=suffixpath_at_L3%33%bbentry for src.spec.foo
=suffixpath_at_L3%33%bbentry.graph_edge_composition
((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*(L3%31%d=>L3%33%bbentry)))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*((L3%13%d=>L3%17%bbentry)*((L3%17%bbentry=>L3%20%d)*((L3%20%d=>L3%21%bbentry)*(L3%21%bbentry=>L3%26%bbentry))))))))+((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*((L3%13%d=>L3%17%bbentry)*((L3%17%bbentry=>L3%20%d)*((L3%20%d=>L3%24%bbentry)*(L3%24%bbentry=>L3%26%bbentry)))))))))*(L3%26%bbentry=>L3%27%bbentry))+((L0%0%d=>L3%30%bbentry)*((L3%30%bbentry=>L3%31%d)*((L3%31%d=>L3%32%bbentry)*((L3%32%bbentry=>L3%13%d)*((L3%13%d=>L3%14%bbentry)*(L3%14%bbentry=>L3%27%bbentry)))))))*(L3%27%bbentry=>E0%0%d))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%30%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%30%bbentry done
tfg.assumes_around_edge at L3%13%d=>L3%14%bbentry
tfg.assumes_around_edge at L3%13%d=>L3%14%bbentry done
tfg.assumes_around_edge at L3%13%d=>L3%17%bbentry
tfg.assumes_around_edge at L3%13%d=>L3%17%bbentry done
tfg.assumes_around_edge at L3%14%bbentry=>L3%27%bbentry
tfg.assumes_around_edge at L3%14%bbentry=>L3%27%bbentry done
tfg.assumes_around_edge at L3%17%bbentry=>L3%20%d
tfg.assumes_around_edge at L3%17%bbentry=>L3%20%d done
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry done
tfg.assumes_around_edge at L3%20%d=>L3%24%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%24%bbentry done
tfg.assumes_around_edge at L3%21%bbentry=>L3%26%bbentry
tfg.assumes_around_edge at L3%21%bbentry=>L3%26%bbentry done
tfg.assumes_around_edge at L3%24%bbentry=>L3%26%bbentry
tfg.assumes_around_edge at L3%24%bbentry=>L3%26%bbentry done
tfg.assumes_around_edge at L3%26%bbentry=>L3%27%bbentry
tfg.assumes_around_edge at L3%26%bbentry=>L3%27%bbentry done
tfg.assumes_around_edge at L3%27%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%27%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%30%bbentry=>L3%31%d
tfg.assumes_around_edge at L3%30%bbentry=>L3%31%d done
tfg.assumes_around_edge at L3%31%d=>L3%32%bbentry
tfg.assumes_around_edge at L3%31%d=>L3%32%bbentry done
tfg.assumes_around_edge at L3%31%d=>L3%33%bbentry
tfg.assumes_around_edge at L3%31%d=>L3%33%bbentry done
tfg.assumes_around_edge at L3%32%bbentry=>L3%13%d
tfg.assumes_around_edge at L3%32%bbentry=>L3%13%d done
tfg.assumes_around_edge at L3%33%bbentry=>L3%30%bbentry
tfg.assumes_around_edge at L3%33%bbentry=>L3%30%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%d
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at Lfor.body%1%d
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 17 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !19)*  %r.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !14)*(  %i.0 = phi i32 [ 1, %entry ], [ %inc, %for.inc ], !dbg !18*  br label %for.cond, !dbg !19))*  br label %for.cond, !dbg !19)*(  br label %for.cond, !dbg !19*  br label %for.cond, !dbg !19))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp sle i32 %i.0, %n, !dbg !20)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !22*  br i1 %cmp, label %for.body, label %for.end, !dbg !22)*  br i1 %cmp, label %for.body, label %for.end, !dbg !22)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !22*  br i1 %cmp, label %for.body, label %for.end, !dbg !22)*  br i1 %cmp, label %for.body, label %for.end, !dbg !22)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %r.0, !dbg !30
tfg_edge_comment end

=Edge: Lfor.body%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:(((((  %add = add nsw i32 %r.0, %i.0, !dbg !23*  br label %for.inc, !dbg !25)*  br label %for.inc, !dbg !25)*  br label %for.inc, !dbg !25)*(((((  %inc = add nsw i32 %i.0, 1, !dbg !26*  br label %for.cond, !dbg !27, !llvm.loop !28)*  %r.0 = phi i32 [ 0, %entry ], [ %add, %for.inc ], !dbg !14)*(  %i.0 = phi i32 [ 1, %entry ], [ %inc, %for.inc ], !dbg !18*  br label %for.cond, !dbg !27, !llvm.loop !28))*  br label %for.cond, !dbg !27, !llvm.loop !28)*(  br label %for.cond, !dbg !27, !llvm.loop !28*  br label %for.cond, !dbg !27, !llvm.loop !28)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100011 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100013 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100014 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100015 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100020 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100021 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100023 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100024 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100025 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100026 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100030 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100031 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100032 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100035 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=Loc 100036 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100037 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100038 in dst.llvm.foo.
REGMEM
dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100024, 
=live locs at Lfor.body%1%d
100006, 100024, 100027, 100031, 
=live locs at Lfor.cond%1%bbentry
100006, 100024, 100027[f], 100031, 
=live locs at Lfor.cond%2%d
100006, 100024, 100027[f], 100030, 100031, 
=live locs at Lfor.end%1%d
100024, 100027[f], 
=live locs at E0%0%d
100024, 100027[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100021, 100023, 100024, 100025
=loc definedness at Lfor.body%1%d
100006, 100021, 100023, 100024, 100025, 100027, 100030, 100031, 100032, 100033, 100034, 100039, 100040
=loc definedness at Lfor.cond%1%bbentry
100006, 100021, 100023, 100024, 100025, 100027, 100031, 100032, 100033, 100034, 100039, 100040
=loc definedness at Lfor.cond%2%d
100006, 100021, 100023, 100024, 100025, 100027, 100030, 100031, 100032, 100033, 100034, 100039, 100040
=loc definedness at Lfor.end%1%d
100006, 100021, 100023, 100024, 100025, 100027, 100030, 100031, 100032, 100033, 100034, 100039, 100040
=loc definedness at E0%0%d
100006, 100021, 100023, 100024, 100025, 100026, 100027, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100039, 100040

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006
=branch affecting variable locs at Lfor.body%1%d
100006, 100031
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100031
=branch affecting variable locs at Lfor.cond%2%d
100006, 100030, 100031
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100027 {input.dst.llvm-%r.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100031 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100032 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100033 {input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100034 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100039 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100040 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100027 {input.dst.llvm-%r.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100031 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100034 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100035 {input.dst.llvm-%add.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100036 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100037 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry for loc_id 100038 {input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100030 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100026 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100028 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100029 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140372 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100011
=loc_expr
140430 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100013
=loc_expr
140431 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100014
=loc_expr
140433 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100015
=loc_expr
140435 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140437 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100020
=loc_expr
140378 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100021
=loc_expr
140373 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140710 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100028
=loc_expr
140711 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100029
=loc_expr
140712 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100032
=loc_expr
140713 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 100033
=loc_expr
140714 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100039
=loc_expr
140719 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100040
=loc_expr
140720 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100029 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100029 spreled-expr
140267 : retaddr_const : BV:32
=loc 100032 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100032 spreled-expr
140281 : 1 { 0x1 +1.11e129 } : BV:32
=loc 100033 expr
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100033 spreled-expr
140278 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100039 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100039 spreled-expr
140378 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100040 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100040 spreled-expr
140377 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100011 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100013 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100014 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100015 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100020 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100021 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100023 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100024 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100026 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100031 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100035 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100029 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100032 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100039 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100040 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%add.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%d)))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body%2%d
=linename
line 5
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.end%1%d
=linename
line 6
=pc
Lfor.inc%1%d
=linename
line 3
=pc
Lfor.inc%2%d
=linename
line 3
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 7
=pc
Lfor.body%2%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 21
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 27
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
line 4
=pc
Lfor.body%2%d
=line_and_column
line 5
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 21)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 6
=pc
Lfor.inc%1%d
=line_and_column
(line 3 at column 27)
=pc
Lfor.inc%2%d
=line_and_column
(line 3 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%r.0 : Lfor.cond%1%bbentry : r'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 1
input.dst.llvm-%r.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%add : Lfor.body%2%bbentry : r'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%r.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 1
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%r.0.Lfor.cond%1%bbentry
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: nuw nsw
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000001b
2 : scev_op_addrec(1, 1) : loop Lfor.cond%1%d : nuw nsw
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:1
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%i.0 val_scevb signed lower bound: 32:1
=dst.llvm-%i.0 val_scevb signed upper bound: 32:2147483648
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: nuw nsw
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000001b
2 : scev_op_addrec(1, 1) : loop Lfor.cond%1%d : nuw nsw
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:1
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:1
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: nuw
=dst.llvm-%i.0 atexit_scev scev_expr
1 : 00000000000000000000000000000001b
3 : 00000000000000000000000000000000b
4 : input.dst.llvm-%n : BV32
5 : scev_op_smax(3, 4) : loop L0%0%d : 
6 : scev_op_add(1, 5) : loop L0%0%d : nuw
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%r.0
=dst.llvm-%r.0 loop pc: Lfor.cond%1%d
=dst.llvm-%r.0 val_scevb
=dst.llvm-%r.0 val_scevb scev
=dst.llvm-%r.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%r.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%r.0 val_scevb scev scev_expr
3 : 00000000000000000000000000000000b
1 : 00000000000000000000000000000001b
7 : scev_op_addrec(3, 1, 1) : loop Lfor.cond%1%d : 
=dst.llvm-%r.0 val_scevb scev scev_expr done
=dst.llvm-%r.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%r.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%r.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%r.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%r.0 atuse_scevb
=dst.llvm-%r.0 atuse_scevb scev
=dst.llvm-%r.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%r.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%r.0 atuse_scevb scev scev_expr
3 : 00000000000000000000000000000000b
1 : 00000000000000000000000000000001b
7 : scev_op_addrec(3, 1, 1) : loop Lfor.cond%1%d : 
=dst.llvm-%r.0 atuse_scevb scev scev_expr done
=dst.llvm-%r.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%r.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%r.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%r.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%r.0 atexit_scev
=dst.llvm-%r.0 atexit_scev loop: L0%0%d
=dst.llvm-%r.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%r.0 atexit_scev scev_expr
8 : 11111111111111111111111111111111b
3 : 00000000000000000000000000000000b
4 : input.dst.llvm-%n : BV32
5 : scev_op_smax(3, 4) : loop L0%0%d : 
9 : scev_op_add(8, 5) : loop L0%0%d : nsw
10 : scev_op_zeroext(9) : loop L0%0%d : 
11 : scev_op_zeroext(5) : loop L0%0%d : 
12 : scev_op_mul(10, 11) : loop L0%0%d : 
13 : 000000000000000000000000000000010b
14 : scev_op_udiv(12, 13) : loop L0%0%d : 
15 : scev_op_truncate(14) : loop L0%0%d : 
16 : scev_op_add(15, 5) : loop L0%0%d : 
=dst.llvm-%r.0 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
1 : 00000000000000000000000000000001b
17 : 00000000000000000000000000000010b
18 : scev_op_addrec(1, 17, 1) : loop Lfor.cond%1%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
1 : 00000000000000000000000000000001b
17 : 00000000000000000000000000000010b
18 : scev_op_addrec(1, 17, 1) : loop Lfor.cond%1%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
1 : 00000000000000000000000000000001b
8 : 11111111111111111111111111111111b
3 : 00000000000000000000000000000000b
4 : input.dst.llvm-%n : BV32
5 : scev_op_smax(3, 4) : loop L0%0%d : 
9 : scev_op_add(8, 5) : loop L0%0%d : nsw
10 : scev_op_zeroext(9) : loop L0%0%d : 
11 : scev_op_zeroext(5) : loop L0%0%d : 
12 : scev_op_mul(10, 11) : loop L0%0%d : 
13 : 000000000000000000000000000000010b
14 : scev_op_udiv(12, 13) : loop L0%0%d : 
15 : scev_op_truncate(14) : loop L0%0%d : 
17 : 00000000000000000000000000000010b
19 : scev_op_mul(17, 5) : loop L0%0%d : nuw
20 : scev_op_add(1, 15, 19) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: nuw
=dst.llvm-%inc val_scevb scev scev_expr
17 : 00000000000000000000000000000010b
1 : 00000000000000000000000000000001b
21 : scev_op_addrec(17, 1) : loop Lfor.cond%1%d : nuw
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:2
=dst.llvm-%inc val_scevb unsigned upper bound: 32:2147483650
=dst.llvm-%inc val_scevb signed lower bound: 32:2
=dst.llvm-%inc val_scevb signed upper bound: 32:2147483650
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: nuw
=dst.llvm-%inc atuse_scevb scev scev_expr
17 : 00000000000000000000000000000010b
1 : 00000000000000000000000000000001b
21 : scev_op_addrec(17, 1) : loop Lfor.cond%1%d : nuw
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:2
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:2147483650
=dst.llvm-%inc atuse_scevb signed lower bound: 32:2
=dst.llvm-%inc atuse_scevb signed upper bound: 32:2147483650
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: nuw
=dst.llvm-%inc atexit_scev scev_expr
17 : 00000000000000000000000000000010b
3 : 00000000000000000000000000000000b
4 : input.dst.llvm-%n : BV32
5 : scev_op_smax(3, 4) : loop L0%0%d : 
22 : scev_op_add(17, 5) : loop L0%0%d : nuw
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 5 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 8 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 9 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%add.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%add.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%r.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename loop4.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
equal-arg0
=LhsExpr
1 : $spec-arg-0 : BV:32
2 : $llvm-arg-0 : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%30%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%30%bbentry_Lfor.cond%1%bbentry
L3%30%bbentry_Lfor.cond%1%bbentry => L3%30%bbentry_Lfor.cond%1%bbentry
L3%30%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 17 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%30%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%30%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%30%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%30%bbentry_Lfor.cond%1%bbentry => L3%30%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%30%bbentry to L3%30%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%30%bbentry#{0,0}=>L3%31%d#{0,0})*((L3%31%d#{0,0}=>L3%33%bbentry#{0,0})*(L3%33%bbentry#{0,0}=>L3%30%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%d#{0,0})*(Lfor.body%1%d#{0,0}=>Lfor.cond%1%bbentry#{1,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%30%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%30%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%30%bbentry#{0,0}=>L3%31%d#{0,0})*((L3%31%d#{0,0}=>L3%32%bbentry#{0,0})*((L3%32%bbentry#{0,0}=>L3%13%d#{0,0})*((((L3%13%d#{0,0}=>L3%14%bbentry#{0,0})*(L3%14%bbentry#{0,0}=>L3%27%bbentry#{0,0}))+((L3%13%d#{0,0}=>L3%17%bbentry#{0,0})*((L3%17%bbentry#{0,0}=>L3%20%d#{0,0})*((((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*(L3%21%bbentry#{0,0}=>L3%26%bbentry#{0,0}))+((L3%20%d#{0,0}=>L3%24%bbentry#{0,0})*(L3%24%bbentry#{0,0}=>L3%26%bbentry#{0,0})))*(L3%26%bbentry#{0,0}=>L3%27%bbentry#{0,0})))))*(L3%27%bbentry#{0,0}=>E0%0%d#{0,0})))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
equal-arg0
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : input.dst.llvm-%n : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A2.B2.C1
=Locs end
=Liveness in foo.A2.B2.C1
=live locs at L0%0%d_L0%0%d

=live locs at L3%30%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A2.B2.C1

=Branch affecting variable locs in foo.A2.B2.C1

=Relevant Memlabels in foo.A2.B2.C1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A2.B2.C1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A2.B2.C1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 e9f2318bacabd73e281a4d6663ac9d1
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4240253199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4240253200; 4240253203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4240253204; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4240253200 { 0xfcbd2110 -54714096 -1.47757148e122 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 74893683 { 0x476c973 +1.92802274e137 } : COUNT
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 74893683 { 0x476c973 +1.92802274e137 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4240253200 { 0xfcbd2110 -54714096 -1.47757148e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4240253203 { 0xfcbd2113 -54714093 -1.47757184e122 } : BV:32
=counter_example.random_seed
292789020
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 8d1c3a7abbe6ac21a12382866715e788
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda108 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda111 : BV:32
11 : Lambda109 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda110 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda101 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda102 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=counter_example.random_seed
2166810999
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce27.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce27 bf1123a7e60f0c6c5e2961048bf56b9
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 404348748 { 0x1819df4c +1.20212697e177 } : COUNT
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 404348748 { 0x1819df4c +1.20212697e177 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
3612133708
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3.ce51.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce51 e8fa22c246eb5aa18fe0526f1dfd2f45
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1480752734 { 0x58427e5e +1.51948142e49 } : COUNT
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1480752734 { 0x58427e5e +1.51948142e49 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
3932085731
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce265.num_edges_traversed0
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(epsilon)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce265 63cd41172ceae8c79323bf922a827c50
=input.spec-%var-n-1
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda743 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda746 : BV:32
11 : Lambda744 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda745 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda736 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda737 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=counter_example.random_seed
1790665944
=counter_example_end
=global nodece 4 num_edges_traversed 0
=global nodece 4 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce266.num_edges_traversed0
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(epsilon)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce266 797ca2f7873a9f512e5e54739f9398ba
=input.spec-%var-n-1
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda762 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda765 : BV:32
11 : Lambda763 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda764 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda755 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda756 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=counter_example.random_seed
729059087
=counter_example_end
=global nodece 5 num_edges_traversed 0
=global nodece 5 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce300.num_edges_traversed2
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(epsilon)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce300 d7f19aa2fc31f623a5cf462903f623a
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 404348748 { 0x1819df4c +1.20212697e177 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
3612133708
=counter_example_end
=global nodece 6 num_edges_traversed 2
=global nodece 6 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce317.num_edges_traversed3
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce317 f83728b1697bf23483f64f8fe9e3b49
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 404348748 { 0x1819df4c +1.20212697e177 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
3612133708
=counter_example_end
=global nodece 7 num_edges_traversed 3
=global nodece 7 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3.ce338.num_edges_traversed4
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(epsilon)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce338 f881868edf9a61663368b3a5528d3be1
=input.spec-%var-n-1
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 1, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 16843009 { 0x1010101 +1.784313e131 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 404348748 { 0x1819df4c +1.20212697e177 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
3612133708
=counter_example_end
=global nodece 8 num_edges_traversed 4
=global nodece 8 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce286.num_edges_traversed1
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce286 fca15a7dcfbd3d9886bb51a0a314bc
=input.spec-%var-n-1
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda743 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda746 : BV:32
11 : Lambda744 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda745 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda736 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda737 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 1553768028 { 0x5c9c9e5c +1.22358274e58 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 423119114 { 0x1938490a +1.43972897e179 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=counter_example.random_seed
2840394784
=counter_example_end
=global nodece 9 num_edges_traversed 1
=global nodece 9 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3.ce362.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(epsilon)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3.ce362 cac09bafabebecf6bf38be2c876a5f57
=input.spec-%var-n-1
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda743 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda746 : BV:32
11 : Lambda744 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda745 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda736 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda737 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 1553768029 { 0x5c9c9e5d +1.22358286e58 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 423119115 { 0x1938490b +1.43972909e179 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=counter_example.random_seed
2840394784
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce377.num_edges_traversed1
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce377 b55d4c90a9d94a60d91dfbed601da17e
=input.spec-%var-n-1
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda830 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda833 : BV:32
11 : Lambda831 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda832 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda823 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda824 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 20577759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 20577760; 20577763 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 20577764; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 20577760 { 0x139fde0 +1.45306015e131 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 1346599480 { 0x50437a38 +1.52716732e33 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-0.L3%31%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%30%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.L3%30%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 569089646 { 0x21eb9e6e +1.84077239e196 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 20577760 { 0x139fde0 +1.45306015e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 20577763 { 0x139fde3 +1.45306050e131 } : BV:32
=counter_example.random_seed
4036914513
=counter_example_end
=global nodece 11 num_edges_traversed 1
=global nodece 11 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3.ce408.num_edges_traversed2
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce408 b0d3867bc20ef1841fadeae9fbba5f5
=input.spec-%var-n-1
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda830 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda833 : BV:32
11 : Lambda831 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda832 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda823 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda824 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 20577759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 20577760; 20577763 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 20577764; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 20577760 { 0x139fde0 +1.45306015e131 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 1346599481 { 0x50437a39 +1.52716743e33 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 569089647 { 0x21eb9e6f +1.84077250e196 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 20577760 { 0x139fde0 +1.45306015e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 20577763 { 0x139fde3 +1.45306050e131 } : BV:32
=counter_example.random_seed
4036914513
=counter_example_end
=global nodece 12 num_edges_traversed 2
=global nodece 12 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3.ce432.num_edges_traversed1
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3.ce432 e6a71384dadc8b6854937de714224f4
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda889 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda892 : BV:32
11 : Lambda890 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda891 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda882 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda883 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 600; 603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 604; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 600 { 0x258 +1.7152e129 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 1322797769 { 0x4ed84ac9 +1.68978226e30 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-0.L3%31%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%30%bbentry
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.L3%30%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 501900919 { 0x1dea6677 +1.83125197e188 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483650 { 0x80000002 -2147483646 -1.23e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 600 { 0x258 +1.7152e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 603 { 0x25b +1.7188e129 } : BV:32
=counter_example.random_seed
878278186
=counter_example_end
=global nodece 13 num_edges_traversed 1
=global nodece 13 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3.ce463.num_edges_traversed2
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(epsilon)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3.ce463 9fa4f6b9d91c3d9f8c3f63af0ab63
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda889 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda892 : BV:32
11 : Lambda890 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda891 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda882 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda883 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 600; 603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 604; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 600 { 0x258 +1.7152e129 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 1322797770 { 0x4ed84aca +1.68978238e30 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 501900920 { 0x1dea6678 +1.83125209e188 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 600 { 0x258 +1.7152e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 603 { 0x25b +1.7188e129 } : BV:32
=counter_example.random_seed
878278186
=counter_example_end
=global nodece 14 num_edges_traversed 2
=global nodece 14 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce487.num_edges_traversed1
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce487 329256b26771704f2e860b38c5b25a7
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda948 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda951 : BV:32
11 : Lambda949 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda950 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda941 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda942 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 1383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1384; 1387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1384 { 0x568 +1.16498e129 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%add.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 1802986303 { 0x6b77633f +1.93271625e87 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-0.L3%31%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.L3%30%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1129212625 { 0x434e6ad1 +1.61263477e7 } : BV:32
=input.dst.llvm-%r.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1384 { 0x568 +1.16498e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1387 { 0x56b +1.16534e129 } : BV:32
=counter_example.random_seed
96434719
=counter_example_end
=global nodece 15 num_edges_traversed 1
=global nodece 15 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce518.num_edges_traversed2
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(epsilon)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce518 f4f63d1b687d3abf331bd0b9567accd
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda948 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda951 : BV:32
11 : Lambda949 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda950 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda941 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda942 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 1383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1384; 1387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1384 { 0x568 +1.16498e129 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 1802986304 { 0x6b776340 +1.93271636e87 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1129212626 { 0x434e6ad2 +1.61263489e7 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1384 { 0x568 +1.16498e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1387 { 0x56b +1.16534e129 } : BV:32
=counter_example.random_seed
96434719
=counter_example_end
=global nodece 16 num_edges_traversed 2
=global nodece 16 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 17
=global nodece 17 nodece z3.ce542.num_edges_traversed0
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce542 a0bfa06c6bea1228a918cd431bd647d
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda1042 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1045 : BV:32
11 : Lambda1043 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1044 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda1035 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1036 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 67084287 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67084288; 67084291 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 67084292; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 67084288 { 0x3ffa000 +1.99707031e136 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 67084288 { 0x3ffa000 +1.99707031e136 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 67084291 { 0x3ffa003 +1.99707067e136 } : BV:32
=counter_example.random_seed
2557462802
=counter_example_end
=global nodece 17 num_edges_traversed 0
=global nodece 17 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 18
=global nodece 18 nodece z3v487.ce543.num_edges_traversed0
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3v487.ce543 5a374a29e819e492d01733a3e211a647
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda1061 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1064 : BV:32
11 : Lambda1062 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1063 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda1054 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1055 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.alloc
1 : ([ 0; 409599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 409600; 409603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 409604; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 409600 { 0x64000 +1.4882812e129 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%20%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.L3%26%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 409600 { 0x64000 +1.4882812e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 409603 { 0x64003 +1.4882848e129 } : BV:32
=counter_example.random_seed
2236240678
=counter_example_end
=global nodece 18 num_edges_traversed 0
=global nodece 18 nodece_visted_pcs: 
L3%30%bbentry_Lfor.cond%1%bbentry
=global nodece 19
=global nodece 19 nodece z3.ce785.num_edges_traversed2
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce785 de5691de258872ab53e8e651afbd0
=retaddr_const
1 : 842871893 { 0x323d3455 +1.47815954e229 } : BV:32
=input.spec-%var-n-1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4240253199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4240253200; 4240253203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4240253204; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4240253200 { 0xfcbd2110 -54714096 -1.47757148e122 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%13%d
1 : Lambda1300 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda1301 : BV:32
6 : eq(5, 2) : BOOL
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(6, 7, 7) : BV:32
9 : lambda(5, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(4, 9) : MAP[BV:32 -> BV:32]
11 : sym_const(10) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-0.L3%31%d
1 : 1 { 0x1 } : BOOL
=input.spec-%tmpvar-24.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%13%d
1 : Lambda1304 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda1307 : BV:32
6 : Lambda1305 : BV:32
7 : eq(5, 2) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : eq(6, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(7, 9, 10) : BOOL
12 : lambda(6, 11) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1306 : BV:32
14 : eq(13, 8) : BOOL
15 : ite(14, 2, 2) : BV:32
16 : ite(7, 15, 2) : BV:32
17 : lambda(13, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(12, 17) : MAP[BV:32 -> BV:32]
19 : lambda(5, 18) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
20 : map(4, 19) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
21 : sym_const(20) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-5.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m1-0.L3%13%d
1 : Lambda1310 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda1313 : BV:32
6 : Lambda1311 : BV:32
7 : eq(5, 2) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : eq(6, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(7, 9, 10) : BOOL
12 : lambda(6, 11) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1312 : BV:32
14 : eq(13, 8) : BOOL
15 : ite(14, 2, 2) : BV:32
16 : ite(7, 15, 2) : BV:32
17 : lambda(13, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(12, 17) : MAP[BV:32 -> BV:32]
19 : lambda(5, 18) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
20 : map(4, 19) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
21 : sym_const(20) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.L3%13%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda1320 : BV:32
4 : eq(3, 1) : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda1321 : BV:32
7 : eq(6, 1) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : ite(7, 8, 8) : BV:32
10 : lambda(6, 9) : FUNCTION[BV:32 -> BV:32]
11 : map(5, 10) : MAP[BV:32 -> BV:32]
12 : sum(1, 2, 11) : SUM[UNIT,MAP[BV:32 -> BV:32]]
13 : sym_const(12) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-25.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 842871893 { 0x323d3455 +1.47815954e229 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1368885126 { 0x51978786 +1.18382334e36 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 74893683 { 0x476c973 +1.92802274e137 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4240253200 { 0xfcbd2110 -54714096 -1.47757148e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4240253203 { 0xfcbd2113 -54714093 -1.47757184e122 } : BV:32
=counter_example.random_seed
1877389940
=counter_example_end
=global nodece 19 num_edges_traversed 2
=global nodece 19 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 20
=global nodece 20 nodece z3.ce749.num_edges_traversed2
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce749 831f1fca2b42d88c8d547a0ceb171b
=retaddr_const
1 : 689411808 { 0x291796e0 +1.18429183e211 } : BV:32
=input.spec-%var-n-1
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-r-0.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-7.L3%30%bbentry
1 : Lambda43 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda46 : BV:32
5 : Lambda44 : BV:32
6 : lambda(5, 2) : FUNCTION[BV:32 -> BOOL]
7 : Lambda45 : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : lambda(7, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(6, 9) : MAP[BV:32 -> BV:32]
11 : lambda(4, 10) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
12 : map(3, 11) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
13 : sym_const(12) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-9.L3%30%bbentry
1 : Lambda47 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda48 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%r.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967294 ] -> 0, [ 4294967295; 4294967295 ] -> 128, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4294967291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967292; 4294967295 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.spec-%var-i-0.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-n-0.L3%30%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.1.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%13%d
1 : Lambda1248 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda1249 : BV:32
6 : eq(5, 2) : BOOL
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : ite(6, 7, 7) : BV:32
9 : lambda(5, 8) : FUNCTION[BV:32 -> BV:32]
10 : map(4, 9) : MAP[BV:32 -> BV:32]
11 : sym_const(10) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-0.L3%31%d
1 : 1 { 0x1 } : BOOL
=input.spec-%tmpvar-24.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-23.L3%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-15.L3%13%d
1 : Lambda1252 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda1255 : BV:32
6 : Lambda1253 : BV:32
7 : eq(5, 2) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : eq(6, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(7, 9, 10) : BOOL
12 : lambda(6, 11) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1254 : BV:32
14 : eq(13, 8) : BOOL
15 : ite(14, 2, 2) : BV:32
16 : ite(7, 15, 2) : BV:32
17 : lambda(13, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(12, 17) : MAP[BV:32 -> BV:32]
19 : lambda(5, 18) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
20 : map(4, 19) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
21 : sym_const(20) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-5.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L3%13%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-m1-0.L3%13%d
1 : Lambda1258 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : lambda(1, 3) : FUNCTION[BV:32 -> BOOL]
5 : Lambda1261 : BV:32
6 : Lambda1259 : BV:32
7 : eq(5, 2) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : eq(6, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(7, 9, 10) : BOOL
12 : lambda(6, 11) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1260 : BV:32
14 : eq(13, 8) : BOOL
15 : ite(14, 2, 2) : BV:32
16 : ite(7, 15, 2) : BV:32
17 : lambda(13, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(12, 17) : MAP[BV:32 -> BV:32]
19 : lambda(5, 18) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
20 : map(4, 19) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
21 : sym_const(20) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-17.L3%13%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda1268 : BV:32
4 : eq(3, 1) : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda1269 : BV:32
7 : eq(6, 1) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : ite(7, 8, 8) : BV:32
10 : lambda(6, 9) : FUNCTION[BV:32 -> BV:32]
11 : map(5, 10) : MAP[BV:32 -> BV:32]
12 : sum(1, 2, 11) : SUM[UNIT,MAP[BV:32 -> BV:32]]
13 : sym_const(12) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-12.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-25.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%30%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%30%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-9.L3%30%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-7.L3%30%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%tmpvar-7.L3%30%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 689411808 { 0x291796e0 +1.18429183e211 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1748113673 { 0x68321909 +1.39138901e81 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1480752734 { 0x58427e5e +1.51948142e49 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
864626203
=counter_example_end
=global nodece 20 num_edges_traversed 2
=global nodece 20 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-n-1 : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.spec-%var-n-0.L3%30%bbentry : BV:32
=inductive-invariants point_set point_expr 5
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 17
1 : spec-%tmpvar-9.L3%30%bbentry : MAP[BV:32 -> BV:32]
2 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
3 : map_init(2) : MAP[BV:32 -> BV:32]
4 : eq(1, 3) : BOOL
=inductive-invariants point_set point_expr 18
1 : spec-%tmpvar-7.L3%30%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : SORT2EXPR.VAR : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
3 : map_init(2) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
4 : eq(1, 3) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-i-0.L3%30%bbentry
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.spec-%var-n-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.spec-%var-r-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-i-0.L3%30%bbentry
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.spec-%var-n-0.L3%30%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.spec-%var-r-0.L3%30%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3.ce27
=inductive-invariants point_set point z3.ce27 expr point z3.ce27
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 3 for input.spec-%var-i-0.L3%30%bbentry
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 4 for input.spec-%var-n-0.L3%30%bbentry
16843009
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 5 for input.spec-%var-r-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 6 for input.dst.llvm-%n
16843009
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 done
=inductive-invariants point_set point z3v487.ce28
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 3 for input.spec-%var-i-0.L3%30%bbentry
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 4 for input.spec-%var-n-0.L3%30%bbentry
16843009
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 5 for input.spec-%var-r-0.L3%30%bbentry
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 6 for input.dst.llvm-%n
16843009
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce28 expr point z3v487.ce28 done
=inductive-invariants point_set point z3v487.ce52
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 3 for input.spec-%var-i-0.L3%30%bbentry
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 4 for input.spec-%var-n-0.L3%30%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 5 for input.spec-%var-r-0.L3%30%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 6 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 done
=inductive-invariants point_set point z3.ce51
=inductive-invariants point_set point z3.ce51 expr point z3.ce51
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 2 for input.spec-%var-n-1
2147483648
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 3 for input.spec-%var-i-0.L3%30%bbentry
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 4 for input.spec-%var-n-0.L3%30%bbentry
2147483648
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 5 for input.spec-%var-r-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 6 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 done
=inductive-invariants point_set point z3v487.ce76
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 3 for input.spec-%var-i-0.L3%30%bbentry
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 4 for input.spec-%var-n-0.L3%30%bbentry
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 5 for input.spec-%var-r-0.L3%30%bbentry
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 done
=inductive-invariants point_set point z3.ce75
=inductive-invariants point_set point z3.ce75 expr point z3.ce75
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 3 for input.spec-%var-i-0.L3%30%bbentry
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 4 for input.spec-%var-n-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 5 for input.spec-%var-r-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 done
=inductive-invariants point_set point z3v487.ce100
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 3 for input.spec-%var-i-0.L3%30%bbentry
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 4 for input.spec-%var-n-0.L3%30%bbentry
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 5 for input.spec-%var-r-0.L3%30%bbentry
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 done
=inductive-invariants point_set point z3.ce99
=inductive-invariants point_set point z3.ce99 expr point z3.ce99
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 3 for input.spec-%var-i-0.L3%30%bbentry
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 4 for input.spec-%var-n-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 5 for input.spec-%var-r-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 done
=inductive-invariants point_set point z3v487.ce123
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 3 for input.spec-%var-i-0.L3%30%bbentry
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 4 for input.spec-%var-n-0.L3%30%bbentry
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 5 for input.spec-%var-r-0.L3%30%bbentry
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 done
=inductive-invariants point_set point z3.ce124
=inductive-invariants point_set point z3.ce124 expr point z3.ce124
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 3 for input.spec-%var-i-0.L3%30%bbentry
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 4 for input.spec-%var-n-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 5 for input.spec-%var-r-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 done
=inductive-invariants point_set point z3v487.ce276
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 2 for input.spec-%var-n-1
1073741824
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 3 for input.spec-%var-i-0.L3%30%bbentry
2
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 4 for input.spec-%var-n-0.L3%30%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 5 for input.spec-%var-r-0.L3%30%bbentry
1
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 6 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce276 expr point z3v487.ce276 done
=inductive-invariants point_set point z3.ce286
=inductive-invariants point_set point z3.ce286 expr point z3.ce286
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 2 for input.spec-%var-n-1
16384
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 3 for input.spec-%var-i-0.L3%30%bbentry
2
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 4 for input.spec-%var-n-0.L3%30%bbentry
16384
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 5 for input.spec-%var-r-0.L3%30%bbentry
1
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 6 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce286 expr point z3.ce286 done
=inductive-invariants point_set point z3.ce317
=inductive-invariants point_set point z3.ce317 expr point z3.ce317
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 2 for input.spec-%var-n-1
16843009
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 3 for input.spec-%var-i-0.L3%30%bbentry
3
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 4 for input.spec-%var-n-0.L3%30%bbentry
16843009
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 5 for input.spec-%var-r-0.L3%30%bbentry
3
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 6 for input.dst.llvm-%n
16843009
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce317 expr point z3.ce317 done
=inductive-invariants point_set point z3.ce377
=inductive-invariants point_set point z3.ce377 expr point z3.ce377
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 2 for input.spec-%var-n-1
2147483647
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 3 for input.spec-%var-i-0.L3%30%bbentry
2147483648
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 4 for input.spec-%var-n-0.L3%30%bbentry
2147483647
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 5 for input.spec-%var-r-0.L3%30%bbentry
2147483647
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 6 for input.dst.llvm-%n
2147483647
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce377 expr point z3.ce377 done
=inductive-invariants point_set point z3v487.ce378
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 2 for input.spec-%var-n-1
2147483647
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 3 for input.spec-%var-i-0.L3%30%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 4 for input.spec-%var-n-0.L3%30%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 5 for input.spec-%var-r-0.L3%30%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 6 for input.dst.llvm-%n
2147483647
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce378 expr point z3v487.ce378 done
=inductive-invariants point_set point z3.ce432
=inductive-invariants point_set point z3.ce432 expr point z3.ce432
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 3 for input.spec-%var-i-0.L3%30%bbentry
2147483650
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 4 for input.spec-%var-n-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 5 for input.spec-%var-r-0.L3%30%bbentry
2147483649
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483649
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483650
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce432 expr point z3.ce432 done
=inductive-invariants point_set point z3v487.ce433
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 2 for input.spec-%var-n-1
1073741824
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 3 for input.spec-%var-i-0.L3%30%bbentry
1073741825
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 4 for input.spec-%var-n-0.L3%30%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 5 for input.spec-%var-r-0.L3%30%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 6 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741825
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce433 expr point z3v487.ce433 done
=inductive-invariants point_set point z3.ce487
=inductive-invariants point_set point z3.ce487 expr point z3.ce487
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 3 for input.spec-%var-i-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 4 for input.spec-%var-n-0.L3%30%bbentry
0
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 5 for input.spec-%var-r-0.L3%30%bbentry
4294967295
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce487 expr point z3.ce487 done
=inductive-invariants point_set point z3v487.ce488
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 1 for and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 2 for input.spec-%var-n-1
0
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 3 for input.spec-%var-i-0.L3%30%bbentry
0
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 4 for input.spec-%var-n-0.L3%30%bbentry
0
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 5 for input.spec-%var-r-0.L3%30%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 6 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 7 for input.dst.llvm-%r.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 8 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 11 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 12 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 15 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 val 16 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce488 expr point z3v487.ce488 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%30%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%30%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-n-1 : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.spec-%var-n-0.L3%30%bbentry : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.6
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.4
=LhsExpr
1 : input.spec-%var-n-1 : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-n-0.L3%30%bbentry : BV:32
=predicate done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce27
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce286
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce317
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=4; number of preds=4
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 7->0; 8->0; 
6
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->1; 7->0; 8->0; 
7
-2147483648->0; 2->0; 3->0; 4->0; 5->4294967295; 6->0; 7->1; 8->0; 
8
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->0; 8->1; 
matrix done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 3
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce317
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce377
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce487
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.spec-%var-n-0.L3%30%bbentry : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce27
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce51
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=3; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name src-branches-const-ineq
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 5
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce317
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce432
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=3; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 6
1 : input.dst.llvm-%n : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce3
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3.ce27
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3.ce51
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=3; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const predicate_set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const is assumed eqclass : 0
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 0: z3.ce3
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 1: z3.ce317
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 2: z3.ce377
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 3: z3.ce487
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ces set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_exprs done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini name dst-ineq
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 15
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini point_expr 16
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini predicate_set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini is assumed eqclass : 0
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini visited ce 0: z3.ce3
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini visited ce 1: z3.ce27
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini visited ces set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini summary: number of exprs=8; number of visited CEs=2; number of preds=0
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini-axiom-based
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini-axiom-based name spec-coupling-invariants
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 2 exprs
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini-axiom-based point_expr 17
1 : spec-%tmpvar-9.L3%30%bbentry : MAP[BV:32 -> BV:32]
2 : SORT2EXPR.VAR : MAP[BV:32 -> BV:32]
3 : map_init(2) : MAP[BV:32 -> BV:32]
4 : eq(1, 3) : BOOL
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini-axiom-based point_expr 18
1 : spec-%tmpvar-7.L3%30%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : SORT2EXPR.VAR : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
3 : map_init(2) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
4 : eq(1, 3) : BOOL
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini-axiom-based done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini-axiom-based predicate_set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini-axiom-based is assumed eqclass : 0
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini-axiom-based visited ce 0: z3.ce3
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini-axiom-based visited ces set done
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini-axiom-based summary: number of exprs=2; number of visited CEs=1; number of preds=0
=pc L3%30%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-25.E0%0%d : BV:32
2 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%30%bbentry_Lfor.cond%1%bbentry.to_pcL3%30%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-i-0.L3%30%bbentry : BV:32
6 : input.spec-%var-n-0.L3%30%bbentry : BV:32
7 : bvsgt(5, 6) : BOOL
8 : not(7) : BOOL
9 : or(4, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%30%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
4 : input.spec-%var-i-0.L3%30%bbentry : BV:32
5 : input.spec-%var-n-0.L3%30%bbentry : BV:32
6 : bvsgt(4, 5) : BOOL
7 : or(3, 6) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-25.E0%0%d : BV:32
2 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L3%30%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%30%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-n-0.L3%30%bbentry : BV:32
=SRC Ranking expr 2
1 : input.spec-%var-r-0.L3%30%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-n-1 : BV:32
=DST Ranking expr 0
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%r.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140371 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140370 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140439 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140373 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140440 : 4 { 0x4 +1.0e1025 } : INT
140339 : 0 { 0x0 } : BOOL
140441 : select(140371, 140370, 140439, 140373, 140440, 140339) : BV:32
=RhsExpr
140372 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
equal-arg0
=LhsExpr
140273 : input.spec-%var-n-1 : BV:32
140372 : input.dst.llvm-%n : BV:32
140749 : eq(140273, 140372) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
precond-mlasserts
=LhsExpr
140733 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
140734 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
140735 : bvule(140733, 140734) : BOOL
140721 : 4 { 0x4 +1.47e129 } : BV:32
140736 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140737 : bvadd(140721, 140736) : BV:32
140738 : bvadd(140733, 140737) : BV:32
140739 : eq(140734, 140738) : BOOL
140740 : and(140735, 140739) : BOOL
140373 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140741 : 3 { 0x3 +1.35e129 } : BV:32
140742 : bvand(140373, 140741) : BV:32
140278 : 0 { 0x0 +1.0e129 } : BV:32
140743 : eq(140742, 140278) : BOOL
140744 : and(140740, 140743) : BOOL
140745 : eq(140373, 140733) : BOOL
140746 : and(140744, 140745) : BOOL
140370 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140281 : 1 { 0x1 +1.11e129 } : BV:32
140374 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
140747 : region_agrees_with_memlabel(140370, 140278, 140281, 140374) : BOOL
140748 : and(140746, 140747) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%30%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%30%bbentry_Lfor.cond%1%bbentry=>L3%30%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%30%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%30%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 3
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
