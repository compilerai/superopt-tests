==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x10 $x12)))
 (let (($x19 (and $x11 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x10 $x12)))
 (let (($x19 (and $x11 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x68 (= true false)))
 (let (($x69 (= $x68 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x60 (concat ?x57 (concat ?x53 ?x51)))))
 (let (($x62 (= ?x61 input.dst.llvm-%x)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x27 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x42 (= $x27 true)))
 (let (($x12 (= $x42 true)))
 (let (($x30 (= $x12 true)))
 (let ((?x5 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x5)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x9 $x28)))
 (let (($x37 (and $x10 $x11)))
 (let (($x45 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x45 $x37)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x48)))))))
 (let (($x14 (and $x36 $x33)))
 (let (($x32 (= $x14 true)))
 (let (($x40 (= $x32 true)))
 (let (($x43 (= $x40 true)))
 (let (($x29 (and $x43 $x30)))
 (let (($x65 (and $x29 $x64)))
 (let (($x20 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x66 (and $x20 $x65)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x67 (and $x24 $x66)))
 (let (($x70 (=> $x67 $x69)))
 (not $x70)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x68 (= true false)))
 (let (($x69 (= $x68 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x60 (concat ?x57 (concat ?x53 ?x51)))))
 (let (($x62 (= ?x61 input.dst.llvm-%x)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x27 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x42 (= $x27 true)))
 (let (($x12 (= $x42 true)))
 (let (($x30 (= $x12 true)))
 (let ((?x5 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x5)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x9 $x28)))
 (let (($x37 (and $x10 $x11)))
 (let (($x45 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x45 $x37)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x41 $x48)))))))
 (let (($x14 (and $x36 $x33)))
 (let (($x32 (= $x14 true)))
 (let (($x40 (= $x32 true)))
 (let (($x43 (= $x40 true)))
 (let (($x29 (and $x43 $x30)))
 (let (($x65 (and $x29 $x64)))
 (let (($x20 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x66 (and $x20 $x65)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x67 (and $x24 $x66)))
 (let (($x70 (=> $x67 $x69)))
 (not $x70)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x41 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x41)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x27 $x18)))
 (let (($x33 (and $x42 $x60)))
 (let (($x53 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x53 $x33)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x51)))))))
 (let (($x65 (and $x31 $x22)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x16 (concat ?x49 (concat ?x12 ?x7)))))
 (let (($x48 (= input.dst.llvm-%x ?x30)))
 (let (($x54 (and (and (and $x31 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x22) $x48)))
 (let (($x58 (= $x54 true)))
 (let (($x61 (= $x58 true)))
 (let (($x62 (= $x61 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x63 (and $x21 $x62)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x64 (and $x24 $x63)))
 (let (($x68 (=> $x64 $x67)))
 (not $x68))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x41 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x41)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x27 $x18)))
 (let (($x33 (and $x42 $x60)))
 (let (($x53 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x53 $x33)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x51)))))))
 (let (($x65 (and $x31 $x22)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x16 (concat ?x49 (concat ?x12 ?x7)))))
 (let (($x48 (= input.dst.llvm-%x ?x30)))
 (let (($x54 (and (and (and $x31 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x22) $x48)))
 (let (($x58 (= $x54 true)))
 (let (($x61 (= $x58 true)))
 (let (($x62 (= $x61 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x63 (and $x21 $x62)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x64 (and $x24 $x63)))
 (let (($x68 (=> $x64 $x67)))
 (not $x68))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x68 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x69 (= $x68 true)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x30 (concat ?x7 (concat ?x14 ?x16)))))
 (let (($x54 (= input.dst.llvm-%x ?x48)))
 (let ((?x60 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x60)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x17 $x42)))
 (let (($x22 (and $x41 $x33)))
 (let (($x27 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x27 $x22)))
 (let (($x15 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x59)))))))
 (let (($x62 (and (and (and $x56 $x15) $x38) $x54)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x66 (and $x21 $x65)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x67 (and $x24 $x66)))
 (let (($x6 (=> $x67 $x69)))
 (not $x6))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x68 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x69 (= $x68 true)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x30 (concat ?x7 (concat ?x14 ?x16)))))
 (let (($x54 (= input.dst.llvm-%x ?x48)))
 (let ((?x60 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x60)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x17 $x42)))
 (let (($x22 (and $x41 $x33)))
 (let (($x27 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x27 $x22)))
 (let (($x15 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x59)))))))
 (let (($x62 (and (and (and $x56 $x15) $x38) $x54)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x65 (= $x64 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x66 (and $x21 $x65)))
 (let (($x24 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x67 (and $x24 $x66)))
 (let (($x6 (=> $x67 $x69)))
 (not $x6))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b10000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-x-1 #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x40000000 #xff))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32)
    #x000000ff)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x23 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x23)))
 (let (($x44 (= ?x32 input.dst.llvm-%x)))
 (let (($x43 (= $x44 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x48 (concat ?x16 (concat ?x12 ?x30)))))
 (let (($x62 (= input.dst.llvm-%x ?x54)))
 (let ((?x33 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x33)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x28 $x41)))
 (let (($x38 (and $x60 $x22)))
 (let (($x17 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x17 $x38)))
 (let (($x29 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x5)))))))
 (let (($x65 (and (and (and $x53 $x29) $x61) $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x24 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x69 (and $x24 $x68)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x6 (and $x34 $x69)))
 (let (($x70 (=> $x6 $x43)))
 (not $x70))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x23 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x23)))
 (let (($x44 (= ?x32 input.dst.llvm-%x)))
 (let (($x43 (= $x44 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x48 (concat ?x16 (concat ?x12 ?x30)))))
 (let (($x62 (= input.dst.llvm-%x ?x54)))
 (let ((?x33 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x33)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x28 $x41)))
 (let (($x38 (and $x60 $x22)))
 (let (($x17 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x17 $x38)))
 (let (($x29 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x5)))))))
 (let (($x65 (and (and (and $x53 $x29) $x61) $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x24 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x69 (and $x24 $x68)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x6 (and $x34 $x69)))
 (let (($x70 (=> $x6 $x43)))
 (not $x70))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x62 (= true false)))
 (let (($x65 (= $x62 true)))
 (let ((?x37 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x37)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x22 $x64)))
 (let (($x52 (and $x11 $x48)))
 (let (($x56 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x56 $x52)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x17)))))))
 (let (($x16 (and $x33 $x14)))
 (let (($x40 (= $x16 true)))
 (let (($x12 (= $x40 true)))
 (let (($x30 (= $x12 true)))
 (let ((?x45 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x45)))
 (let (($x35 (= ?x24 input.dst.llvm-%x)))
 (let (($x58 (= $x35 true)))
 (let (($x51 (= $x58 true)))
 (let (($x7 (and $x51 $x30)))
 (let (($x34 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x49 (and $x34 $x7)))
 (let (($x20 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x54 (and $x20 $x49)))
 (let (($x66 (=> $x54 $x65)))
 (not $x66)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x62 (= true false)))
 (let (($x65 (= $x62 true)))
 (let ((?x37 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x37)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x61)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x22 $x64)))
 (let (($x52 (and $x11 $x48)))
 (let (($x56 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x56 $x52)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x17)))))))
 (let (($x16 (and $x33 $x14)))
 (let (($x40 (= $x16 true)))
 (let (($x12 (= $x40 true)))
 (let (($x30 (= $x12 true)))
 (let ((?x45 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x24 (bvneg ?x45)))
 (let (($x35 (= ?x24 input.dst.llvm-%x)))
 (let (($x58 (= $x35 true)))
 (let (($x51 (= $x58 true)))
 (let (($x7 (and $x51 $x30)))
 (let (($x34 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x49 (and $x34 $x7)))
 (let (($x20 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x54 (and $x20 $x49)))
 (let (($x66 (=> $x54 $x65)))
 (not $x66)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x66 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x67 (= $x66 true)))
 (let (($x36 (= $x67 true)))
 (let ((?x16 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x16)))
 (let (($x30 (= ?x40 input.dst.llvm-%x)))
 (let (($x7 (= $x30 true)))
 (let (($x49 (= $x7 true)))
 (let ((?x22 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x22)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x42 $x46)))
 (let (($x61 (and $x56 $x38)))
 (let (($x24 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x24 $x61)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x59)))))))
 (let (($x11 (and $x18 $x64)))
 (let (($x37 (= $x11 true)))
 (let (($x48 (= $x37 true)))
 (let (($x52 (= $x48 true)))
 (let (($x54 (and $x52 $x49)))
 (let (($x53 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x62 (and $x53 $x54)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x65 (and $x34 $x62)))
 (let (($x5 (=> $x65 $x36)))
 (not $x5))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x66 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x67 (= $x66 true)))
 (let (($x36 (= $x67 true)))
 (let ((?x16 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x16)))
 (let (($x30 (= ?x40 input.dst.llvm-%x)))
 (let (($x7 (= $x30 true)))
 (let (($x49 (= $x7 true)))
 (let ((?x22 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x22)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x42 $x46)))
 (let (($x61 (and $x56 $x38)))
 (let (($x24 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x24 $x61)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x59)))))))
 (let (($x11 (and $x18 $x64)))
 (let (($x37 (= $x11 true)))
 (let (($x48 (= $x37 true)))
 (let (($x52 (= $x48 true)))
 (let (($x54 (and $x52 $x49)))
 (let (($x53 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x62 (and $x53 $x54)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x65 (and $x34 $x62)))
 (let (($x5 (=> $x65 $x36)))
 (not $x5))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x12 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x12)))
 (let (($x36 (= ?x30 input.spec-%var-x-1)))
 (let (($x5 (= $x36 true)))
 (let (($x49 (= ?x30 input.dst.llvm-%x)))
 (let (($x54 (= $x49 true)))
 (let (($x62 (= $x54 true)))
 (let ((?x61 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x61)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x33 $x22)))
 (let (($x11 (and $x38 $x64)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x21 $x11)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x29)))))))
 (let (($x48 (and $x41 $x37)))
 (let (($x52 (= $x48 true)))
 (let (($x14 (= $x52 true)))
 (let (($x16 (= $x14 true)))
 (let (($x65 (and $x16 $x62)))
 (let (($x53 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x66 (and $x53 $x65)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x67 (and $x34 $x66)))
 (let (($x68 (=> $x67 $x5)))
 (not $x68)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x12 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x12)))
 (let (($x36 (= ?x30 input.spec-%var-x-1)))
 (let (($x5 (= $x36 true)))
 (let (($x49 (= ?x30 input.dst.llvm-%x)))
 (let (($x54 (= $x49 true)))
 (let (($x62 (= $x54 true)))
 (let ((?x61 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x61)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x33 $x22)))
 (let (($x11 (and $x38 $x64)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x21 $x11)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x29)))))))
 (let (($x48 (and $x41 $x37)))
 (let (($x52 (= $x48 true)))
 (let (($x14 (= $x52 true)))
 (let (($x16 (= $x14 true)))
 (let (($x65 (and $x16 $x62)))
 (let (($x53 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x66 (and $x53 $x65)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x67 (and $x34 $x66)))
 (let (($x68 (=> $x67 $x5)))
 (not $x68)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x5 (= true false)))
 (let (($x68 (= $x5 true)))
 (let ((?x40 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x40)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x37 $x14)))
 (let (($x30 (and $x16 $x12)))
 (let (($x18 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x18 $x30)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x46)))))))
 (let (($x49 (and $x11 $x7)))
 (let (($x54 (= $x49 true)))
 (let (($x62 (= $x54 true)))
 (let (($x65 (= $x62 true)))
 (let ((?x53 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x53)))
 (let (($x13 (= ?x27 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x42 (= $x13 true)))
 (let (($x51 (= $x42 true)))
 (let (($x66 (and $x51 $x65)))
 (let (($x34 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x67 (and $x34 $x66)))
 (let (($x39 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x36 (and $x39 $x67)))
 (let (($x58 (=> $x36 $x68)))
 (not $x58)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x5 (= true false)))
 (let (($x68 (= $x5 true)))
 (let ((?x40 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x40)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x37 $x14)))
 (let (($x30 (and $x16 $x12)))
 (let (($x18 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x18 $x30)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x46)))))))
 (let (($x49 (and $x11 $x7)))
 (let (($x54 (= $x49 true)))
 (let (($x62 (= $x54 true)))
 (let (($x65 (= $x62 true)))
 (let ((?x53 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x27 (bvneg ?x53)))
 (let (($x13 (= ?x27 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x42 (= $x13 true)))
 (let (($x51 (= $x42 true)))
 (let (($x66 (and $x51 $x65)))
 (let (($x34 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x67 (and $x34 $x66)))
 (let (($x39 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x36 (and $x39 $x67)))
 (let (($x58 (=> $x36 $x68)))
 (not $x58)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x68 (= input.spec-%tmpvar-3.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x9 (=> $x68 true)))
 (let (($x23 (= $x9 true)))
 (let (($x32 (= $x23 true)))
 (let (($x58 (= $x68 true)))
 (let (($x63 (= $x58 true)))
 (let (($x29 (= $x63 true)))
 (let ((?x12 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x12)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x48 $x16)))
 (let (($x7 (and $x40 $x30)))
 (let (($x64 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x64 $x7)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x22)))))))
 (let (($x54 (and $x37 $x49)))
 (let (($x62 (= $x54 true)))
 (let (($x65 (= $x62 true)))
 (let (($x66 (= $x65 true)))
 (let ((?x10 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x10)))
 (let (($x27 (= ?x53 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x13 (= $x27 true)))
 (let (($x42 (= $x13 true)))
 (let (($x67 (and $x42 $x66)))
 (let (($x25 (and $x67 $x29)))
 (let (($x45 (and $x25 $x29)))
 (let (($x35 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x69 (and $x35 $x45)))
 (let (($x39 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x6 (and $x39 $x69)))
 (let (($x44 (=> $x6 $x32)))
 (not $x44))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x68 (= input.spec-%tmpvar-3.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x9 (=> $x68 true)))
 (let (($x23 (= $x9 true)))
 (let (($x32 (= $x23 true)))
 (let (($x58 (= $x68 true)))
 (let (($x63 (= $x58 true)))
 (let (($x29 (= $x63 true)))
 (let ((?x12 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x12)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x48 $x16)))
 (let (($x7 (and $x40 $x30)))
 (let (($x64 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x64 $x7)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x22)))))))
 (let (($x54 (and $x37 $x49)))
 (let (($x62 (= $x54 true)))
 (let (($x65 (= $x62 true)))
 (let (($x66 (= $x65 true)))
 (let ((?x10 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x10)))
 (let (($x27 (= ?x53 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x13 (= $x27 true)))
 (let (($x42 (= $x13 true)))
 (let (($x67 (and $x42 $x66)))
 (let (($x25 (and $x67 $x29)))
 (let (($x45 (and $x25 $x29)))
 (let (($x35 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x69 (and $x35 $x45)))
 (let (($x39 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x6 (and $x39 $x69)))
 (let (($x44 (=> $x6 $x32)))
 (not $x44))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x44 (bvadd (_ bv5 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x32 (bvadd (_ bv5 32) input.spec-%tmpvar-3.L3%1%fcallEnd)))
 (let (($x43 (= ?x32 ?x44)))
 (let (($x51 (= $x43 true)))
 (let (($x20 (= $x51 true)))
 (let (($x63 (= input.spec-%tmpvar-3.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x29 (= $x63 true)))
 (let (($x25 (= $x29 true)))
 (let (($x45 (= $x25 true)))
 (let ((?x7 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x7)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x14 $x12)))
 (let (($x54 (and $x30 $x49)))
 (let (($x33 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x33 $x54)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x11)))))))
 (let (($x65 (and $x52 $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x36 (= $x67 true)))
 (let ((?x10 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x10)))
 (let (($x27 (= ?x53 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x13 (= $x27 true)))
 (let (($x42 (= $x13 true)))
 (let (($x5 (and $x42 $x36)))
 (let (($x69 (and $x5 $x45)))
 (let (($x6 (and $x69 $x45)))
 (let (($x31 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x9 (and $x31 $x6)))
 (let (($x15 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x23 (and $x15 $x9)))
 (let (($x70 (=> $x23 $x20)))
 (not $x70))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x44 (bvadd (_ bv5 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x32 (bvadd (_ bv5 32) input.spec-%tmpvar-3.L3%1%fcallEnd)))
 (let (($x43 (= ?x32 ?x44)))
 (let (($x51 (= $x43 true)))
 (let (($x20 (= $x51 true)))
 (let (($x63 (= input.spec-%tmpvar-3.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x29 (= $x63 true)))
 (let (($x25 (= $x29 true)))
 (let (($x45 (= $x25 true)))
 (let ((?x7 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x7)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x14 $x12)))
 (let (($x54 (and $x30 $x49)))
 (let (($x33 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x33 $x54)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x61 $x11)))))))
 (let (($x65 (and $x52 $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x36 (= $x67 true)))
 (let ((?x10 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x10)))
 (let (($x27 (= ?x53 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x13 (= $x27 true)))
 (let (($x42 (= $x13 true)))
 (let (($x5 (and $x42 $x36)))
 (let (($x69 (and $x5 $x45)))
 (let (($x6 (and $x69 $x45)))
 (let (($x31 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x9 (and $x31 $x6)))
 (let (($x15 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x23 (and $x15 $x9)))
 (let (($x70 (=> $x23 $x20)))
 (not $x70))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x12 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x12)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x18 $x16)))
 (let (($x7 (and $x40 $x30)))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x52 $x7)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x38)))))))
 (let (($x8 (and $x24 $x49)))
 (let (($x26 (= $x8 true)))
 (let (($x55 (= $x26 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x25 (concat ?x58 (concat ?x67 ?x65)))))
 (let (($x51 (= ?x45 input.dst.llvm-%x)))
 (let (($x20 (= $x51 true)))
 (let (($x70 (= $x20 true)))
 (let (($x69 (= input.dst.llvm-%x ?x45)))
 (let (($x23 (and (and (and $x24 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x49) $x69)))
 (let (($x32 (= $x23 true)))
 (let (($x44 (= $x32 true)))
 (let (($x43 (= $x44 true)))
 (let (($x71 (and $x43 $x70)))
 (let (($x31 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x60 (and $x31 $x71)))
 (let (($x15 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x21 (and $x15 $x60)))
 (let (($x47 (=> $x21 $x55)))
 (not $x47))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x12 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x12)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x18 $x16)))
 (let (($x7 (and $x40 $x30)))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x52 $x7)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x28 $x38)))))))
 (let (($x8 (and $x24 $x49)))
 (let (($x26 (= $x8 true)))
 (let (($x55 (= $x26 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x25 (concat ?x58 (concat ?x67 ?x65)))))
 (let (($x51 (= ?x45 input.dst.llvm-%x)))
 (let (($x20 (= $x51 true)))
 (let (($x70 (= $x20 true)))
 (let (($x69 (= input.dst.llvm-%x ?x45)))
 (let (($x23 (and (and (and $x24 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x49) $x69)))
 (let (($x32 (= $x23 true)))
 (let (($x44 (= $x32 true)))
 (let (($x43 (= $x44 true)))
 (let (($x71 (and $x43 $x70)))
 (let (($x31 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x60 (and $x31 $x71)))
 (let (($x15 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x21 (and $x15 $x60)))
 (let (($x47 (=> $x21 $x55)))
 (not $x47))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x50 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x50)))
 (let (($x27 (= ?x35 input.dst.llvm-%x)))
 (let (($x62 (= $x27 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x45 (concat ?x65 (concat ?x68 ?x25)))))
 (let (($x71 (= ?x69 input.dst.llvm-%x)))
 (let (($x60 (= $x71 true)))
 (let (($x21 (= $x60 true)))
 (let (($x23 (= input.dst.llvm-%x ?x69)))
 (let ((?x30 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x30)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x33 $x40)))
 (let (($x49 (and $x12 $x7)))
 (let (($x18 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x18 $x49)))
 (let (($x46 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x11)))))))
 (let (($x43 (and (and (and $x64 $x46) $x9) $x23)))
 (let (($x51 (= $x43 true)))
 (let (($x20 (= $x51 true)))
 (let (($x70 (= $x20 true)))
 (let (($x8 (and $x70 $x21)))
 (let (($x31 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x26 (and $x31 $x8)))
 (let (($x15 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x55 (and $x15 $x26)))
 (let (($x72 (=> $x55 $x62)))
 (not $x72))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x50 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x35 (bvneg ?x50)))
 (let (($x27 (= ?x35 input.dst.llvm-%x)))
 (let (($x62 (= $x27 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x45 (concat ?x65 (concat ?x68 ?x25)))))
 (let (($x71 (= ?x69 input.dst.llvm-%x)))
 (let (($x60 (= $x71 true)))
 (let (($x21 (= $x60 true)))
 (let (($x23 (= input.dst.llvm-%x ?x69)))
 (let ((?x30 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x30)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x33 $x40)))
 (let (($x49 (and $x12 $x7)))
 (let (($x18 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x18 $x49)))
 (let (($x46 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x11)))))))
 (let (($x43 (and (and (and $x64 $x46) $x9) $x23)))
 (let (($x51 (= $x43 true)))
 (let (($x20 (= $x51 true)))
 (let (($x70 (= $x20 true)))
 (let (($x8 (and $x70 $x21)))
 (let (($x31 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x26 (and $x31 $x8)))
 (let (($x15 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x55 (and $x15 $x26)))
 (let (($x72 (=> $x55 $x62)))
 (not $x72))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x49 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x7 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x16 (or (bvugt input.memlabel-mem--arg.0_begin ?x18) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x16) (or $x7 $x49)))))))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= ?x6 (_ bv0 32))))
 (let ((?x57 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x48 $x53)))
 (let (($x22 (and $x39 $x61)))
 (let (($x11 (and $x22 $x38)))
 (and $x11 $x66)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x49 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x7 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x16 (or (bvugt input.memlabel-mem--arg.0_begin ?x18) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x16) (or $x7 $x49)))))))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= ?x6 (_ bv0 32))))
 (let ((?x57 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x48 $x53)))
 (let (($x22 (and $x39 $x61)))
 (let (($x11 (and $x22 $x38)))
 (and $x11 $x66)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x29 (= true false)))
 (let (($x74 (= $x29 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x55 (concat ?x21 (concat ?x20 ?x43)))))
 (let (($x50 (= ?x47 input.dst.llvm-%x)))
 (let (($x35 (= $x50 true)))
 (let (($x27 (= $x35 true)))
 (let (($x32 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x17 (= $x32 true)))
 (let (($x25 (= $x17 true)))
 (let (($x58 (= $x25 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x31)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x48 $x30)))
 (let (($x9 (and $x14 $x33)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x45 $x9)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x59)))))))
 (let (($x6 (and $x46 $x63)))
 (let (($x37 (= $x6 true)))
 (let (($x54 (= $x37 true)))
 (let (($x53 (= $x54 true)))
 (let (($x36 (and $x53 $x58)))
 (let (($x62 (and $x36 $x27)))
 (let (($x65 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x72 (and $x65 $x62)))
 (let ((?x13 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x16 (= ?x13 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x73 (and $x16 $x72)))
 (let (($x57 (= ?x13 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x41 (and $x57 $x73)))
 (let (($x75 (=> $x41 $x74)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x29 (= true false)))
 (let (($x74 (= $x29 true)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x55 (concat ?x21 (concat ?x20 ?x43)))))
 (let (($x50 (= ?x47 input.dst.llvm-%x)))
 (let (($x35 (= $x50 true)))
 (let (($x27 (= $x35 true)))
 (let (($x32 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x17 (= $x32 true)))
 (let (($x25 (= $x17 true)))
 (let (($x58 (= $x25 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x31)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x48 $x30)))
 (let (($x9 (and $x14 $x33)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x45 $x9)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x46 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x59)))))))
 (let (($x6 (and $x46 $x63)))
 (let (($x37 (= $x6 true)))
 (let (($x54 (= $x37 true)))
 (let (($x53 (= $x54 true)))
 (let (($x36 (and $x53 $x58)))
 (let (($x62 (and $x36 $x27)))
 (let (($x65 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x72 (and $x65 $x62)))
 (let ((?x13 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x16 (= ?x13 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x73 (and $x16 $x72)))
 (let (($x57 (= ?x13 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x41 (and $x57 $x73)))
 (let (($x75 (=> $x41 $x74)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000000101)
(= input.spec-%tmpvar-1.E0%0%d #b11111111111111111111111111111011)
(= input.spec-%tmpvar-2.E0%0%d #b11111111111111111111111111111011)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32) (_ bv4294967291 32))
(define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32) (_ bv4294967291 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x81 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x61 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x82 (= ?x61 ?x81)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x35 (concat ?x8 (concat ?x51 ?x40)))))
 (let (($x22 (= ?x27 input.dst.llvm-%x)))
 (let (($x68 (= $x22 true)))
 (let (($x23 (= $x68 true)))
 (let (($x62 (= input.dst.llvm-%x ?x27)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x31)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x48 $x56)))
 (let (($x30 (and $x36 $x25)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x55 $x30)))
 (let (($x33 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x12)))))))
 (let (($x41 (and (and (and $x45 $x33) $x6) $x62)))
 (let (($x29 (= $x41 true)))
 (let (($x74 (= $x29 true)))
 (let (($x75 (= $x74 true)))
 (let (($x66 (= $x33 true)))
 (let (($x69 (= $x66 true)))
 (let (($x5 (= $x69 true)))
 (let (($x28 (and $x45 $x6)))
 (let (($x63 (= $x28 true)))
 (let (($x52 (= $x63 true)))
 (let (($x14 (= $x52 true)))
 (let (($x37 (and $x14 $x5)))
 (let (($x76 (and $x37 $x75)))
 (let (($x77 (and $x76 $x23)))
 (let (($x39 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x78 (and $x39 $x77)))
 (let (($x57 (= ?x61 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x79 (and $x57 $x78)))
 (let (($x24 (= ?x61 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x80 (and $x24 $x79)))
 (let (($x85 (=> $x80 $x84)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x81 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x61 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x82 (= ?x61 ?x81)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x35 (concat ?x8 (concat ?x51 ?x40)))))
 (let (($x22 (= ?x27 input.dst.llvm-%x)))
 (let (($x68 (= $x22 true)))
 (let (($x23 (= $x68 true)))
 (let (($x62 (= input.dst.llvm-%x ?x27)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x25 (= (_ bv0 32) ?x31)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x48 $x56)))
 (let (($x30 (and $x36 $x25)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x55 $x30)))
 (let (($x33 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x12)))))))
 (let (($x41 (and (and (and $x45 $x33) $x6) $x62)))
 (let (($x29 (= $x41 true)))
 (let (($x74 (= $x29 true)))
 (let (($x75 (= $x74 true)))
 (let (($x66 (= $x33 true)))
 (let (($x69 (= $x66 true)))
 (let (($x5 (= $x69 true)))
 (let (($x28 (and $x45 $x6)))
 (let (($x63 (= $x28 true)))
 (let (($x52 (= $x63 true)))
 (let (($x14 (= $x52 true)))
 (let (($x37 (and $x14 $x5)))
 (let (($x76 (and $x37 $x75)))
 (let (($x77 (and $x76 $x23)))
 (let (($x39 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x78 (and $x39 $x77)))
 (let (($x57 (= ?x61 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x79 (and $x57 $x78)))
 (let (($x24 (= ?x61 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x80 (and $x24 $x79)))
 (let (($x85 (=> $x80 $x84)))
 (not $x85))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x84 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x61 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x85 (= ?x61 ?x84)))
 (let (($x86 (= $x85 true)))
 (let (($x67 (= $x86 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x51 (concat ?x70 (concat ?x32 ?x72)))))
 (let (($x77 (= ?x40 input.dst.llvm-%x)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x69 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x76 (= $x69 true)))
 (let (($x22 (= $x76 true)))
 (let (($x68 (= $x22 true)))
 (let (($x20 (= input.dst.llvm-%x ?x40)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x30)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x53 $x31)))
 (let (($x28 (and $x25 $x6)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x44 $x28)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x26)))))))
 (let (($x62 (and (and (and $x16 $x69) $x63) $x20)))
 (let (($x41 (= $x62 true)))
 (let (($x29 (= $x41 true)))
 (let (($x74 (= $x29 true)))
 (let (($x52 (and $x16 $x63)))
 (let (($x14 (= $x52 true)))
 (let (($x71 (= $x14 true)))
 (let (($x33 (= $x71 true)))
 (let (($x75 (and $x33 $x74)))
 (let (($x23 (and $x75 $x68)))
 (let (($x80 (and $x23 $x79)))
 (let (($x39 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x81 (and $x39 $x80)))
 (let (($x57 (= ?x61 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x82 (and $x57 $x81)))
 (let (($x24 (= ?x61 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x83 (and $x24 $x82)))
 (let (($x18 (=> $x83 $x67)))
 (not $x18))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x84 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x61 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x85 (= ?x61 ?x84)))
 (let (($x86 (= $x85 true)))
 (let (($x67 (= $x86 true)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x51 (concat ?x70 (concat ?x32 ?x72)))))
 (let (($x77 (= ?x40 input.dst.llvm-%x)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x69 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x76 (= $x69 true)))
 (let (($x22 (= $x76 true)))
 (let (($x68 (= $x22 true)))
 (let (($x20 (= input.dst.llvm-%x ?x40)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x30)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x53 $x31)))
 (let (($x28 (and $x25 $x6)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x44 $x28)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x26)))))))
 (let (($x62 (and (and (and $x16 $x69) $x63) $x20)))
 (let (($x41 (= $x62 true)))
 (let (($x29 (= $x41 true)))
 (let (($x74 (= $x29 true)))
 (let (($x52 (and $x16 $x63)))
 (let (($x14 (= $x52 true)))
 (let (($x71 (= $x14 true)))
 (let (($x33 (= $x71 true)))
 (let (($x75 (and $x33 $x74)))
 (let (($x23 (and $x75 $x68)))
 (let (($x80 (and $x23 $x79)))
 (let (($x39 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x81 (and $x39 $x80)))
 (let (($x57 (= ?x61 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x82 (and $x57 $x81)))
 (let (($x24 (= ?x61 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x83 (and $x24 $x82)))
 (let (($x18 (=> $x83 $x67)))
 (not $x18))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173490/query
