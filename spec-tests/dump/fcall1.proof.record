==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x10 $x12)))
 (let (($x19 (and $x14 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x10 $x12)))
 (let (($x19 (and $x14 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x55 (= true false)))
 (let (($x56 (= $x55 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x31 (concat ?x36 (concat ?x7 ?x15)))))
 (let (($x49 (= ?x48 input.dst.llvm-%x)))
 (let (($x50 (= $x49 true)))
 (let (($x51 (= $x50 true)))
 (let (($x13 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x25 (= $x13 true)))
 (let (($x40 (= $x25 true)))
 (let (($x26 (= $x40 true)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x16)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x37 $x43)))
 (let (($x22 (and $x39 $x46)))
 (let (($x28 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x28 $x22)))
 (let (($x30 (= $x24 true)))
 (let (($x27 (= $x30 true)))
 (let (($x20 (= $x27 true)))
 (let (($x35 (and $x20 $x26)))
 (let (($x52 (and $x35 $x51)))
 (let (($x14 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x53 (and $x14 $x52)))
 (let (($x32 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x54 (and $x32 $x53)))
 (let (($x57 (=> $x54 $x56)))
 (not $x57)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x55 (= true false)))
 (let (($x56 (= $x55 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x31 (concat ?x36 (concat ?x7 ?x15)))))
 (let (($x49 (= ?x48 input.dst.llvm-%x)))
 (let (($x50 (= $x49 true)))
 (let (($x51 (= $x50 true)))
 (let (($x13 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x25 (= $x13 true)))
 (let (($x40 (= $x25 true)))
 (let (($x26 (= $x40 true)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x16)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x37 $x43)))
 (let (($x22 (and $x39 $x46)))
 (let (($x28 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x28 $x22)))
 (let (($x30 (= $x24 true)))
 (let (($x27 (= $x30 true)))
 (let (($x20 (= $x27 true)))
 (let (($x35 (and $x20 $x26)))
 (let (($x52 (and $x35 $x51)))
 (let (($x14 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x53 (and $x14 $x52)))
 (let (($x32 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x54 (and $x32 $x53)))
 (let (($x57 (=> $x54 $x56)))
 (not $x57)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x18 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x18)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x23 $x55)))
 (let (($x49 (and $x52 $x16)))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x20 $x49)))
 (let (($x6 (= $x10 true)))
 (let (($x43 (= $x6 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x35 (concat ?x50 (concat ?x13 ?x45)))))
 (let (($x22 (= input.dst.llvm-%x ?x36)))
 (let (($x12 (and (and (and $x20 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x49) $x22)))
 (let (($x46 (= $x12 true)))
 (let (($x31 (= $x46 true)))
 (let (($x28 (= $x31 true)))
 (let (($x11 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x51 (and $x11 $x28)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x53 (and $x21 $x51)))
 (let (($x39 (=> $x53 $x43)))
 (not $x39))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x18 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x18)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x23 $x55)))
 (let (($x49 (and $x52 $x16)))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x20 $x49)))
 (let (($x6 (= $x10 true)))
 (let (($x43 (= $x6 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x35 (concat ?x50 (concat ?x13 ?x45)))))
 (let (($x22 (= input.dst.llvm-%x ?x36)))
 (let (($x12 (and (and (and $x20 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x49) $x22)))
 (let (($x46 (= $x12 true)))
 (let (($x31 (= $x46 true)))
 (let (($x28 (= $x31 true)))
 (let (($x11 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x51 (and $x11 $x28)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x53 (and $x21 $x51)))
 (let (($x39 (=> $x53 $x43)))
 (not $x39))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x39 (= $x43 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x41 (concat ?x13 (concat ?x42 ?x48)))))
 (let (($x22 (= input.dst.llvm-%x ?x36)))
 (let ((?x56 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x56)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x44 $x29)))
 (let (($x16 (and $x55 $x18)))
 (let (($x54 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and (and (and $x20 $x54) $x16) $x22)))
 (let (($x28 (= $x31 true)))
 (let (($x51 (= $x28 true)))
 (let (($x53 (= $x51 true)))
 (let (($x11 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x10 (and $x11 $x53)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x6 (and $x21 $x10)))
 (let (($x17 (=> $x6 $x39)))
 (not $x17))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x39 (= $x43 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x41 (concat ?x13 (concat ?x42 ?x48)))))
 (let (($x22 (= input.dst.llvm-%x ?x36)))
 (let ((?x56 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x56)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x44 $x29)))
 (let (($x16 (and $x55 $x18)))
 (let (($x54 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and (and (and $x20 $x54) $x16) $x22)))
 (let (($x28 (= $x31 true)))
 (let (($x51 (= $x28 true)))
 (let (($x53 (= $x51 true)))
 (let (($x11 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x10 (and $x11 $x53)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x6 (and $x21 $x10)))
 (let (($x17 (=> $x6 $x39)))
 (not $x17))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b10000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-x-1 #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000000 #xff))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32)
    #x000000ff)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv40960 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv40960 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv40960 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv40963 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x30 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x30)))
 (let (($x24 (= ?x15 input.dst.llvm-%x)))
 (let (($x40 (= $x24 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x45 (concat ?x42 (concat ?x9 ?x25)))))
 (let (($x22 (= input.dst.llvm-%x ?x36)))
 (let ((?x52 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x52)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x34 $x5)))
 (let (($x18 (and $x29 $x56)))
 (let (($x54 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and (and (and $x20 $x54) $x18) $x22)))
 (let (($x53 (= $x51 true)))
 (let (($x10 (= $x53 true)))
 (let (($x6 (= $x10 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x43 (and $x21 $x6)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x39 (and $x37 $x43)))
 (let (($x57 (=> $x39 $x40)))
 (not $x57))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x30 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x15 (bvneg ?x30)))
 (let (($x24 (= ?x15 input.dst.llvm-%x)))
 (let (($x40 (= $x24 true)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x45 (concat ?x42 (concat ?x9 ?x25)))))
 (let (($x22 (= input.dst.llvm-%x ?x36)))
 (let ((?x52 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x52)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x34 $x5)))
 (let (($x18 (and $x29 $x56)))
 (let (($x54 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and (and (and $x20 $x54) $x18) $x22)))
 (let (($x53 (= $x51 true)))
 (let (($x10 (= $x53 true)))
 (let (($x6 (= $x10 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x43 (and $x21 $x6)))
 (let (($x37 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x39 (and $x37 $x43)))
 (let (($x57 (=> $x39 $x40)))
 (not $x57))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x13 (= true false)))
 (let (($x48 (= $x13 true)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x16)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x29 $x56)))
 (let (($x45 (and $x18 $x50)))
 (let (($x23 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x23 $x45)))
 (let (($x7 (= $x35 true)))
 (let (($x42 (= $x7 true)))
 (let (($x41 (= $x42 true)))
 (let ((?x21 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x21)))
 (let (($x54 (= ?x33 input.dst.llvm-%x)))
 (let (($x31 (= $x54 true)))
 (let (($x12 (= $x31 true)))
 (let (($x47 (and $x12 $x41)))
 (let (($x11 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x9 (and $x11 $x47)))
 (let (($x19 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x25 (and $x19 $x9)))
 (let (($x36 (=> $x25 $x48)))
 (not $x36)))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x13 (= true false)))
 (let (($x48 (= $x13 true)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x16)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x29 $x56)))
 (let (($x45 (and $x18 $x50)))
 (let (($x23 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x23 $x45)))
 (let (($x7 (= $x35 true)))
 (let (($x42 (= $x7 true)))
 (let (($x41 (= $x42 true)))
 (let ((?x21 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x21)))
 (let (($x54 (= ?x33 input.dst.llvm-%x)))
 (let (($x31 (= $x54 true)))
 (let (($x12 (= $x31 true)))
 (let (($x47 (and $x12 $x41)))
 (let (($x11 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x9 (and $x11 $x47)))
 (let (($x19 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x25 (and $x19 $x9)))
 (let (($x36 (=> $x25 $x48)))
 (not $x36)))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x13 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x48 (= $x13 true)))
 (let (($x36 (= $x48 true)))
 (let ((?x50 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x50)))
 (let (($x7 (= ?x45 input.dst.llvm-%x)))
 (let (($x42 (= $x7 true)))
 (let (($x41 (= $x42 true)))
 (let ((?x5 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x5)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x21 $x31)))
 (let (($x55 (and $x44 $x29)))
 (let (($x33 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x33 $x55)))
 (let (($x56 (= $x52 true)))
 (let (($x18 (= $x56 true)))
 (let (($x28 (= $x18 true)))
 (let (($x47 (and $x28 $x41)))
 (let (($x37 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x9 (and $x37 $x47)))
 (let (($x26 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x25 (and $x26 $x9)))
 (let (($x22 (=> $x25 $x36)))
 (not $x22))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x13 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x48 (= $x13 true)))
 (let (($x36 (= $x48 true)))
 (let ((?x50 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x50)))
 (let (($x7 (= ?x45 input.dst.llvm-%x)))
 (let (($x42 (= $x7 true)))
 (let (($x41 (= $x42 true)))
 (let ((?x5 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x5)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x21 $x31)))
 (let (($x55 (and $x44 $x29)))
 (let (($x33 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x33 $x55)))
 (let (($x56 (= $x52 true)))
 (let (($x18 (= $x56 true)))
 (let (($x28 (= $x18 true)))
 (let (($x47 (and $x28 $x41)))
 (let (($x37 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x9 (and $x37 $x47)))
 (let (($x26 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x25 (and $x26 $x9)))
 (let (($x22 (=> $x25 $x36)))
 (not $x22))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x50 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x50)))
 (let (($x13 (= ?x45 input.spec-%var-x-1)))
 (let (($x48 (= $x13 true)))
 (let (($x7 (= ?x45 input.dst.llvm-%x)))
 (let (($x42 (= $x7 true)))
 (let (($x41 (= $x42 true)))
 (let ((?x5 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x5)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x21 $x31)))
 (let (($x55 (and $x44 $x29)))
 (let (($x33 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x33 $x55)))
 (let (($x56 (= $x52 true)))
 (let (($x18 (= $x56 true)))
 (let (($x28 (= $x18 true)))
 (let (($x47 (and $x28 $x41)))
 (let (($x37 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x9 (and $x37 $x47)))
 (let (($x26 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x25 (and $x26 $x9)))
 (let (($x36 (=> $x25 $x48)))
 (not $x36)))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x50 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x45 (bvneg ?x50)))
 (let (($x13 (= ?x45 input.spec-%var-x-1)))
 (let (($x48 (= $x13 true)))
 (let (($x7 (= ?x45 input.dst.llvm-%x)))
 (let (($x42 (= $x7 true)))
 (let (($x41 (= $x42 true)))
 (let ((?x5 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x5)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x21 $x31)))
 (let (($x55 (and $x44 $x29)))
 (let (($x33 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x33 $x55)))
 (let (($x56 (= $x52 true)))
 (let (($x18 (= $x56 true)))
 (let (($x28 (= $x18 true)))
 (let (($x47 (and $x28 $x41)))
 (let (($x37 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x9 (and $x37 $x47)))
 (let (($x26 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x25 (and $x26 $x9)))
 (let (($x36 (=> $x25 $x48)))
 (not $x36)))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x25 (= true false)))
 (let (($x13 (= $x25 true)))
 (let ((?x28 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x28)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x5 $x52)))
 (let (($x50 (and $x56 $x16)))
 (let (($x44 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x44 $x50)))
 (let (($x35 (= $x45 true)))
 (let (($x7 (= $x35 true)))
 (let (($x42 (= $x7 true)))
 (let ((?x37 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x37)))
 (let (($x54 (= ?x20 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x21 (= $x54 true)))
 (let (($x34 (= $x21 true)))
 (let (($x41 (and $x34 $x42)))
 (let (($x27 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x47 (and $x27 $x41)))
 (let (($x11 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x9 (and $x11 $x47)))
 (let (($x48 (=> $x9 $x13)))
 (not $x48)))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x25 (= true false)))
 (let (($x13 (= $x25 true)))
 (let ((?x28 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x28)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x5 $x52)))
 (let (($x50 (and $x56 $x16)))
 (let (($x44 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x44 $x50)))
 (let (($x35 (= $x45 true)))
 (let (($x7 (= $x35 true)))
 (let (($x42 (= $x7 true)))
 (let ((?x37 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x37)))
 (let (($x54 (= ?x20 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x21 (= $x54 true)))
 (let (($x34 (= $x21 true)))
 (let (($x41 (and $x34 $x42)))
 (let (($x27 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x47 (and $x27 $x41)))
 (let (($x11 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x9 (and $x11 $x47)))
 (let (($x48 (=> $x9 $x13)))
 (not $x48)))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x25 (= input.spec-%tmpvar-3.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x10 (=> $x25 true)))
 (let (($x6 (= $x10 true)))
 (let (($x43 (= $x6 true)))
 (let (($x13 (= $x25 true)))
 (let (($x48 (= $x13 true)))
 (let (($x36 (= $x48 true)))
 (let ((?x28 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x28)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x5 $x52)))
 (let (($x50 (and $x56 $x16)))
 (let (($x44 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x44 $x50)))
 (let (($x35 (= $x45 true)))
 (let (($x7 (= $x35 true)))
 (let (($x42 (= $x7 true)))
 (let ((?x37 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x37)))
 (let (($x54 (= ?x20 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x21 (= $x54 true)))
 (let (($x34 (= $x21 true)))
 (let (($x41 (and $x34 $x42)))
 (let (($x22 (and $x41 $x36)))
 (let (($x27 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x51 (and $x27 $x22)))
 (let (($x14 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x53 (and $x14 $x51)))
 (let (($x39 (=> $x53 $x43)))
 (not $x39)))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x25 (= input.spec-%tmpvar-3.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x10 (=> $x25 true)))
 (let (($x6 (= $x10 true)))
 (let (($x43 (= $x6 true)))
 (let (($x13 (= $x25 true)))
 (let (($x48 (= $x13 true)))
 (let (($x36 (= $x48 true)))
 (let ((?x28 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x28)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x5 $x52)))
 (let (($x50 (and $x56 $x16)))
 (let (($x44 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x44 $x50)))
 (let (($x35 (= $x45 true)))
 (let (($x7 (= $x35 true)))
 (let (($x42 (= $x7 true)))
 (let ((?x37 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x37)))
 (let (($x54 (= ?x20 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x21 (= $x54 true)))
 (let (($x34 (= $x21 true)))
 (let (($x41 (and $x34 $x42)))
 (let (($x22 (and $x41 $x36)))
 (let (($x27 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x51 (and $x27 $x22)))
 (let (($x14 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x53 (and $x14 $x51)))
 (let (($x39 (=> $x53 $x43)))
 (not $x39)))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x43 (bvadd (_ bv5 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x6 (bvadd (_ bv5 32) input.spec-%tmpvar-3.L2%1%fcallEnd)))
 (let (($x39 (= ?x6 ?x43)))
 (let (($x17 (= $x39 true)))
 (let (($x30 (= $x17 true)))
 (let (($x25 (= input.spec-%tmpvar-3.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (= $x25 true)))
 (let (($x48 (= $x13 true)))
 (let (($x36 (= $x48 true)))
 (let ((?x28 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x28)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x5 $x52)))
 (let (($x50 (and $x56 $x16)))
 (let (($x44 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x44 $x50)))
 (let (($x35 (= $x45 true)))
 (let (($x7 (= $x35 true)))
 (let (($x42 (= $x7 true)))
 (let ((?x37 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x37)))
 (let (($x54 (= ?x20 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x21 (= $x54 true)))
 (let (($x34 (= $x21 true)))
 (let (($x41 (and $x34 $x42)))
 (let (($x22 (and $x41 $x36)))
 (let (($x51 (and $x22 $x36)))
 (let (($x26 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x53 (and $x26 $x51)))
 (let (($x11 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x10 (and $x11 $x53)))
 (let (($x15 (=> $x10 $x30)))
 (not $x15))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x43 (bvadd (_ bv5 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x6 (bvadd (_ bv5 32) input.spec-%tmpvar-3.L2%1%fcallEnd)))
 (let (($x39 (= ?x6 ?x43)))
 (let (($x17 (= $x39 true)))
 (let (($x30 (= $x17 true)))
 (let (($x25 (= input.spec-%tmpvar-3.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (= $x25 true)))
 (let (($x48 (= $x13 true)))
 (let (($x36 (= $x48 true)))
 (let ((?x28 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x28)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x5 $x52)))
 (let (($x50 (and $x56 $x16)))
 (let (($x44 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x44 $x50)))
 (let (($x35 (= $x45 true)))
 (let (($x7 (= $x35 true)))
 (let (($x42 (= $x7 true)))
 (let ((?x37 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x37)))
 (let (($x54 (= ?x20 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x21 (= $x54 true)))
 (let (($x34 (= $x21 true)))
 (let (($x41 (and $x34 $x42)))
 (let (($x22 (and $x41 $x36)))
 (let (($x51 (and $x22 $x36)))
 (let (($x26 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x53 (and $x26 $x51)))
 (let (($x11 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x10 (and $x11 $x53)))
 (let (($x15 (=> $x10 $x30)))
 (not $x15))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x55 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x55)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x32 $x23)))
 (let (($x56 (and $x5 $x52)))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x20 $x56)))
 (let (($x46 (= $x58 true)))
 (let (($x49 (= $x46 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x48 (concat ?x9 (concat ?x7 ?x50)))))
 (let (($x17 (= ?x36 input.dst.llvm-%x)))
 (let (($x30 (= $x17 true)))
 (let (($x15 (= $x30 true)))
 (let (($x22 (= input.dst.llvm-%x ?x36)))
 (let (($x10 (and (and (and $x20 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x56) $x22)))
 (let (($x6 (= $x10 true)))
 (let (($x43 (= $x6 true)))
 (let (($x39 (= $x43 true)))
 (let (($x24 (and $x39 $x15)))
 (let (($x26 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x40 (and $x26 $x24)))
 (let (($x11 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x57 (and $x11 $x40)))
 (let (($x8 (=> $x57 $x49)))
 (not $x8))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x55 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x55)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x32 $x23)))
 (let (($x56 (and $x5 $x52)))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x20 $x56)))
 (let (($x46 (= $x58 true)))
 (let (($x49 (= $x46 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x48 (concat ?x9 (concat ?x7 ?x50)))))
 (let (($x17 (= ?x36 input.dst.llvm-%x)))
 (let (($x30 (= $x17 true)))
 (let (($x15 (= $x30 true)))
 (let (($x22 (= input.dst.llvm-%x ?x36)))
 (let (($x10 (and (and (and $x20 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x56) $x22)))
 (let (($x6 (= $x10 true)))
 (let (($x43 (= $x6 true)))
 (let (($x39 (= $x43 true)))
 (let (($x24 (and $x39 $x15)))
 (let (($x26 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x40 (and $x26 $x24)))
 (let (($x11 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x57 (and $x11 $x40)))
 (let (($x8 (=> $x57 $x49)))
 (not $x8))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x8 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x8)))
 (let (($x28 (= ?x38 input.dst.llvm-%x)))
 (let (($x16 (= $x28 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x25 (concat ?x7 (concat ?x47 ?x13)))))
 (let (($x15 (= ?x36 input.dst.llvm-%x)))
 (let (($x24 (= $x15 true)))
 (let (($x40 (= $x24 true)))
 (let (($x22 (= input.dst.llvm-%x ?x36)))
 (let ((?x29 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x29)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x34 $x44)))
 (let (($x52 (and $x23 $x55)))
 (let (($x21 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and (and (and $x20 $x21) $x52) $x22)))
 (let (($x39 (= $x43 true)))
 (let (($x17 (= $x39 true)))
 (let (($x30 (= $x17 true)))
 (let (($x57 (and $x30 $x40)))
 (let (($x26 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x58 (and $x26 $x57)))
 (let (($x11 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x46 (and $x11 $x58)))
 (let (($x59 (=> $x46 $x16)))
 (not $x59))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x8 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x8)))
 (let (($x28 (= ?x38 input.dst.llvm-%x)))
 (let (($x16 (= $x28 true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x25 (concat ?x7 (concat ?x47 ?x13)))))
 (let (($x15 (= ?x36 input.dst.llvm-%x)))
 (let (($x24 (= $x15 true)))
 (let (($x40 (= $x24 true)))
 (let (($x22 (= input.dst.llvm-%x ?x36)))
 (let ((?x29 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x29)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x34 $x44)))
 (let (($x52 (and $x23 $x55)))
 (let (($x21 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and (and (and $x20 $x21) $x52) $x22)))
 (let (($x39 (= $x43 true)))
 (let (($x17 (= $x39 true)))
 (let (($x30 (= $x17 true)))
 (let (($x57 (and $x30 $x40)))
 (let (($x26 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x58 (and $x26 $x57)))
 (let (($x11 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x46 (and $x11 $x58)))
 (let (($x59 (=> $x46 $x16)))
 (not $x59))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= ?x10 (_ bv0 32))))
 (let ((?x27 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x19 $x37)))
 (let (($x32 (and $x12 $x34)))
 (and $x32 $x31)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x34 (= ?x10 (_ bv0 32))))
 (let ((?x27 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x14)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x19 $x37)))
 (let (($x32 (and $x12 $x34)))
 (and $x32 $x31)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x18 (= true false)))
 (let (($x61 (= $x18 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x46 (concat ?x40 (concat ?x47 ?x20)))))
 (let (($x8 (= ?x49 input.dst.llvm-%x)))
 (let (($x38 (= $x8 true)))
 (let (($x28 (= $x38 true)))
 (let (($x41 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x37 (= $x41 true)))
 (let (($x54 (= $x37 true)))
 (let (($x9 (= $x54 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x32)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x50 $x15)))
 (let (($x31 (and $x7 $x6)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x43 $x31)))
 (let (($x27 (= $x51 true)))
 (let (($x55 (= $x27 true)))
 (let (($x36 (= $x55 true)))
 (let (($x21 (and $x36 $x9)))
 (let (($x16 (and $x21 $x28)))
 (let (($x14 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x59 (and $x14 $x16)))
 (let ((?x29 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x17 (= ?x29 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x60 (and $x17 $x59)))
 (let (($x12 (= ?x29 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x53 (and $x12 $x60)))
 (let (($x62 (=> $x53 $x61)))
 (not $x62))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x18 (= true false)))
 (let (($x61 (= $x18 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x46 (concat ?x40 (concat ?x47 ?x20)))))
 (let (($x8 (= ?x49 input.dst.llvm-%x)))
 (let (($x38 (= $x8 true)))
 (let (($x28 (= $x38 true)))
 (let (($x41 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x37 (= $x41 true)))
 (let (($x54 (= $x37 true)))
 (let (($x9 (= $x54 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x32)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x50 $x15)))
 (let (($x31 (and $x7 $x6)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x43 $x31)))
 (let (($x27 (= $x51 true)))
 (let (($x55 (= $x27 true)))
 (let (($x36 (= $x55 true)))
 (let (($x21 (and $x36 $x9)))
 (let (($x16 (and $x21 $x28)))
 (let (($x14 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x59 (and $x14 $x16)))
 (let ((?x29 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x17 (= ?x29 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x60 (and $x17 $x59)))
 (let (($x12 (= ?x29 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x53 (and $x12 $x60)))
 (let (($x62 (=> $x53 $x61)))
 (not $x62))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000000101)
(= input.spec-%tmpvar-1.E0%0%d #b11111111111111111111111111111011)
(= input.spec-%tmpvar-2.E0%0%d #b11111111111111111111111111111011)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32) (_ bv4294967291 32))
(define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32) (_ bv4294967291 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x61 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x30 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x62 (= ?x30 ?x61)))
 (let (($x63 (= $x62 true)))
 (let (($x11 (= $x63 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x40 (concat ?x58 (concat ?x42 ?x55)))))
 (let (($x39 (= ?x37 input.dst.llvm-%x)))
 (let (($x50 (= $x39 true)))
 (let (($x51 (= $x50 true)))
 (let (($x15 (= input.dst.llvm-%x ?x37)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x32)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x16 $x10)))
 (let (($x17 (and $x20 $x36)))
 (let (($x28 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and (and (and $x14 $x28) $x17) $x15)))
 (let (($x8 (= $x57 true)))
 (let (($x46 (= $x8 true)))
 (let (($x5 (= $x46 true)))
 (let (($x59 (and $x5 $x51)))
 (let (($x38 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x60 (and $x38 $x59)))
 (let (($x6 (= ?x30 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x53 (and $x6 $x60)))
 (let (($x29 (= ?x30 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x18 (and $x29 $x53)))
 (let (($x33 (=> $x18 $x11)))
 (not $x33)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x61 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x30 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x62 (= ?x30 ?x61)))
 (let (($x63 (= $x62 true)))
 (let (($x11 (= $x63 true)))
 (let ((?x55 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x40 (concat ?x58 (concat ?x42 ?x55)))))
 (let (($x39 (= ?x37 input.dst.llvm-%x)))
 (let (($x50 (= $x39 true)))
 (let (($x51 (= $x50 true)))
 (let (($x15 (= input.dst.llvm-%x ?x37)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x32)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x34)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x16 $x10)))
 (let (($x17 (and $x20 $x36)))
 (let (($x28 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and (and (and $x14 $x28) $x17) $x15)))
 (let (($x8 (= $x57 true)))
 (let (($x46 (= $x8 true)))
 (let (($x5 (= $x46 true)))
 (let (($x59 (and $x5 $x51)))
 (let (($x38 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x60 (and $x38 $x59)))
 (let (($x6 (= ?x30 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x53 (and $x6 $x60)))
 (let (($x29 (= ?x30 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x18 (and $x29 $x53)))
 (let (($x33 (=> $x18 $x11)))
 (not $x33)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2709853/query
