==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x10 $x12)))
 (let (($x19 (and $x11 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x10 $x12)))
 (let (($x19 (and $x11 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x63 (= false true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x56 (concat ?x53 (concat ?x49 ?x41)))))
 (let (($x58 (= ?x57 input.dst.llvm-%x)))
 (let (($x59 (= $x58 true)))
 (let (($x9 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x36 (= $x9 true)))
 (let ((?x28 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x28)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x42 $x33)))
 (let (($x22 (and $x38 $x16)))
 (let (($x15 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x15 $x22)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x26)))))))
 (let (($x10 (and $x14 $x19)))
 (let (($x17 (= $x10 true)))
 (let (($x37 (and $x17 $x36)))
 (let (($x60 (and $x37 $x59)))
 (let (($x34 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x61 (and $x34 $x60)))
 (let (($x6 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x62 (and $x6 $x61)))
 (let (($x64 (=> $x62 $x63)))
 (not $x64)))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x63 (= false true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x56 (concat ?x53 (concat ?x49 ?x41)))))
 (let (($x58 (= ?x57 input.dst.llvm-%x)))
 (let (($x59 (= $x58 true)))
 (let (($x9 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x36 (= $x9 true)))
 (let ((?x28 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x28)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x42 $x33)))
 (let (($x22 (and $x38 $x16)))
 (let (($x15 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x15 $x22)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x26)))))))
 (let (($x10 (and $x14 $x19)))
 (let (($x17 (= $x10 true)))
 (let (($x37 (and $x17 $x36)))
 (let (($x60 (and $x37 $x59)))
 (let (($x34 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x61 (and $x34 $x60)))
 (let (($x6 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x62 (and $x6 $x61)))
 (let (($x64 (=> $x62 $x63)))
 (not $x64)))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x36 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x36)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x47 $x53)))
 (let (($x56 (and $x22 $x10)))
 (let (($x54 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x54 $x56)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x38)))))))
 (let (($x63 (and $x43 $x55)))
 (let (($x64 (= $x63 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x31 (concat ?x24 (concat ?x17 ?x49)))))
 (let (($x7 (= input.dst.llvm-%x ?x14)))
 (let (($x59 (and (and (and $x43 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x55) $x7)))
 (let (($x60 (= $x59 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x61 (and $x21 $x60)))
 (let (($x6 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x62 (and $x6 $x61)))
 (let (($x65 (=> $x62 $x64)))
 (not $x65)))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x36 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x36)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x51)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x22 (and $x47 $x53)))
 (let (($x56 (and $x22 $x10)))
 (let (($x54 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x54 $x56)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x38)))))))
 (let (($x63 (and $x43 $x55)))
 (let (($x64 (= $x63 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x31 (concat ?x24 (concat ?x17 ?x49)))))
 (let (($x7 (= input.dst.llvm-%x ?x14)))
 (let (($x59 (and (and (and $x43 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x55) $x7)))
 (let (($x60 (= $x59 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x61 (and $x21 $x60)))
 (let (($x6 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x62 (and $x6 $x61)))
 (let (($x65 (=> $x62 $x64)))
 (not $x65)))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x8 (= $x35 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x14 (concat ?x49 (concat ?x9 ?x31)))))
 (let (($x59 (= input.dst.llvm-%x ?x7)))
 (let ((?x10 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x10)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x44 $x22)))
 (let (($x55 (and $x36 $x56)))
 (let (($x47 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x47 $x55)))
 (let (($x12 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x30)))))))
 (let (($x62 (and (and (and $x45 $x12) $x58) $x59)))
 (let (($x63 (= $x62 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x64 (and $x21 $x63)))
 (let (($x6 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x65 (and $x6 $x64)))
 (let (($x42 (=> $x65 $x8)))
 (not $x42))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x35 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x8 (= $x35 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x14 (concat ?x49 (concat ?x9 ?x31)))))
 (let (($x59 (= input.dst.llvm-%x ?x7)))
 (let ((?x10 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x10)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x53)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x44 $x22)))
 (let (($x55 (and $x36 $x56)))
 (let (($x47 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x47 $x55)))
 (let (($x12 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x30)))))))
 (let (($x62 (and (and (and $x45 $x12) $x58) $x59)))
 (let (($x63 (= $x62 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x64 (and $x21 $x63)))
 (let (($x6 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x65 (and $x6 $x64)))
 (let (($x42 (=> $x65 $x8)))
 (not $x42))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b10000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-x-1 #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x40000000 #xff))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32)
    #x000000ff)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x20 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x20)))
 (let (($x5 (= ?x37 input.dst.llvm-%x)))
 (let (($x39 (= $x5 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x7 (concat ?x31 (concat ?x17 ?x14)))))
 (let (($x62 (= input.dst.llvm-%x ?x59)))
 (let ((?x56 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x56)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x51 $x36)))
 (let (($x58 (and $x10 $x55)))
 (let (($x44 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x44 $x58)))
 (let (($x33 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x28)))))))
 (let (($x65 (and (and (and $x54 $x33) $x61) $x62)))
 (let (($x35 (= $x65 true)))
 (let (($x6 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x8 (and $x6 $x35)))
 (let (($x18 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x42 (and $x18 $x8)))
 (let (($x66 (=> $x42 $x39)))
 (not $x66))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x20 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x20)))
 (let (($x5 (= ?x37 input.dst.llvm-%x)))
 (let (($x39 (= $x5 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x7 (concat ?x31 (concat ?x17 ?x14)))))
 (let (($x62 (= input.dst.llvm-%x ?x59)))
 (let ((?x56 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x56)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x51 $x36)))
 (let (($x58 (and $x10 $x55)))
 (let (($x44 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x44 $x58)))
 (let (($x33 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x28)))))))
 (let (($x65 (and (and (and $x54 $x33) $x61) $x62)))
 (let (($x35 (= $x65 true)))
 (let (($x6 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x8 (and $x6 $x35)))
 (let (($x18 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x42 (and $x18 $x8)))
 (let (($x66 (=> $x42 $x39)))
 (not $x66))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x49 (= false true)))
 (let ((?x48 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x48)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x56 $x61)))
 (let (($x7 (and $x64 $x16)))
 (let (($x27 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x27 $x7)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x47)))))))
 (let (($x9 (and $x10 $x19)))
 (let (($x31 (= $x9 true)))
 (let ((?x6 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x6)))
 (let (($x50 (= ?x29 input.dst.llvm-%x)))
 (let (($x60 (= $x50 true)))
 (let (($x40 (and $x60 $x31)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x17 (and $x21 $x40)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x14 (and $x34 $x17)))
 (let (($x24 (=> $x14 $x49)))
 (not $x24)))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x49 (= false true)))
 (let ((?x48 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x48)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x56 $x61)))
 (let (($x7 (and $x64 $x16)))
 (let (($x27 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x27 $x7)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x47)))))))
 (let (($x9 (and $x10 $x19)))
 (let (($x31 (= $x9 true)))
 (let ((?x6 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x6)))
 (let (($x50 (= ?x29 input.dst.llvm-%x)))
 (let (($x60 (= $x50 true)))
 (let (($x40 (and $x60 $x31)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x17 (and $x21 $x40)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x14 (and $x34 $x17)))
 (let (($x24 (=> $x14 $x49)))
 (not $x24)))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x59 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x38 (= $x59 true)))
 (let ((?x19 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x19)))
 (let (($x40 (= ?x9 input.dst.llvm-%x)))
 (let (($x17 (= $x40 true)))
 (let ((?x55 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x55)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x22 $x27)))
 (let (($x61 (and $x56 $x58)))
 (let (($x29 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x29 $x61)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x45)))))))
 (let (($x48 (and $x53 $x64)))
 (let (($x16 (= $x48 true)))
 (let (($x14 (and $x16 $x17)))
 (let (($x33 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x49 (and $x33 $x14)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x24 (and $x21 $x49)))
 (let (($x30 (=> $x24 $x38)))
 (not $x30))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x59 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x38 (= $x59 true)))
 (let ((?x19 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x19)))
 (let (($x40 (= ?x9 input.dst.llvm-%x)))
 (let (($x17 (= $x40 true)))
 (let ((?x55 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x55)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x28)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x22 $x27)))
 (let (($x61 (and $x56 $x58)))
 (let (($x29 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x29 $x61)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x45)))))))
 (let (($x48 (and $x53 $x64)))
 (let (($x16 (= $x48 true)))
 (let (($x14 (and $x16 $x17)))
 (let (($x33 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x49 (and $x33 $x14)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x24 (and $x21 $x49)))
 (let (($x30 (=> $x24 $x38)))
 (not $x30))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x31 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x31)))
 (let (($x30 (= ?x40 input.spec-%var-x-1)))
 (let (($x62 (= $x30 true)))
 (let (($x14 (= ?x40 input.dst.llvm-%x)))
 (let (($x49 (= $x14 true)))
 (let ((?x61 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x61)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x28 $x55)))
 (let (($x48 (and $x58 $x64)))
 (let (($x15 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x15 $x48)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x47)))))))
 (let (($x7 (and $x10 $x16)))
 (let (($x19 (= $x7 true)))
 (let (($x24 (and $x19 $x49)))
 (let (($x33 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x59 (and $x33 $x24)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x38 (and $x21 $x59)))
 (let (($x60 (=> $x38 $x62)))
 (not $x60))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x31 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x31)))
 (let (($x30 (= ?x40 input.spec-%var-x-1)))
 (let (($x62 (= $x30 true)))
 (let (($x14 (= ?x40 input.dst.llvm-%x)))
 (let (($x49 (= $x14 true)))
 (let ((?x61 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x61)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x28 $x55)))
 (let (($x48 (and $x58 $x64)))
 (let (($x15 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x15 $x48)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x47)))))))
 (let (($x7 (and $x10 $x16)))
 (let (($x19 (= $x7 true)))
 (let (($x24 (and $x19 $x49)))
 (let (($x33 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x59 (and $x33 $x24)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x38 (and $x21 $x59)))
 (let (($x60 (=> $x38 $x62)))
 (not $x60))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x62 (= false true)))
 (let ((?x31 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x31)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x48 $x19)))
 (let (($x17 (and $x9 $x40)))
 (let (($x44 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x44 $x17)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x28)))))))
 (let (($x49 (and $x64 $x14)))
 (let (($x24 (= $x49 true)))
 (let ((?x54 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x54)))
 (let (($x43 (= ?x57 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x22 (= $x43 true)))
 (let (($x59 (and $x22 $x24)))
 (let (($x41 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x38 (and $x41 $x59)))
 (let (($x18 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x30 (and $x18 $x38)))
 (let (($x60 (=> $x30 $x62)))
 (not $x60)))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x62 (= false true)))
 (let ((?x31 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x31)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x48 $x19)))
 (let (($x17 (and $x9 $x40)))
 (let (($x44 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x44 $x17)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x28)))))))
 (let (($x49 (and $x64 $x14)))
 (let (($x24 (= $x49 true)))
 (let ((?x54 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x54)))
 (let (($x43 (= ?x57 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x22 (= $x43 true)))
 (let (($x59 (and $x22 $x24)))
 (let (($x41 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x38 (and $x41 $x59)))
 (let (($x18 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x30 (and $x18 $x38)))
 (let (($x60 (=> $x30 $x62)))
 (not $x60)))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x60 (= input.spec-%tmpvar-3.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x65 (=> $x60 true)))
 (let (($x35 (= $x65 true)))
 (let (($x6 (= $x60 true)))
 (let ((?x40 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x40)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x16 $x9)))
 (let (($x14 (and $x31 $x17)))
 (let (($x61 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x61 $x14)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x56)))))))
 (let (($x24 (and $x48 $x49)))
 (let (($x59 (= $x24 true)))
 (let ((?x33 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x33)))
 (let (($x57 (= ?x54 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x43 (= $x57 true)))
 (let (($x38 (and $x43 $x59)))
 (let (($x45 (and $x38 $x6)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x63 (and $x21 $x45)))
 (let (($x50 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x13 (and $x50 $x63)))
 (let (($x8 (=> $x13 $x35)))
 (not $x8)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x60 (= input.spec-%tmpvar-3.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x65 (=> $x60 true)))
 (let (($x35 (= $x65 true)))
 (let (($x6 (= $x60 true)))
 (let ((?x40 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x40)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x19)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x16 $x9)))
 (let (($x14 (and $x31 $x17)))
 (let (($x61 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x61 $x14)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x56)))))))
 (let (($x24 (and $x48 $x49)))
 (let (($x59 (= $x24 true)))
 (let ((?x33 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x33)))
 (let (($x57 (= ?x54 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x43 (= $x57 true)))
 (let (($x38 (and $x43 $x59)))
 (let (($x45 (and $x38 $x6)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x63 (and $x21 $x45)))
 (let (($x50 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x13 (and $x50 $x63)))
 (let (($x8 (=> $x13 $x35)))
 (not $x8)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x22 (bvadd (_ bv5 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x42 (bvadd (_ bv5 32) input.spec-%tmpvar-3.L3%1%fcallEnd)))
 (let (($x53 (= ?x42 ?x22)))
 (let (($x52 (= $x53 true)))
 (let (($x45 (= input.spec-%tmpvar-3.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x63 (= $x45 true)))
 (let ((?x14 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x14)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x19 $x40)))
 (let (($x24 (and $x17 $x49)))
 (let (($x15 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x15 $x24)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x64)))))))
 (let (($x38 (and $x7 $x59)))
 (let (($x30 (= $x38 true)))
 (let ((?x33 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x33)))
 (let (($x57 (= ?x54 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x43 (= $x57 true)))
 (let (($x62 (and $x43 $x30)))
 (let (($x13 (and $x62 $x63)))
 (let (($x65 (and $x13 $x63)))
 (let (($x36 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x35 (and $x36 $x65)))
 (let (($x32 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x8 (and $x32 $x35)))
 (let (($x20 (=> $x8 $x52)))
 (not $x20))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x22 (bvadd (_ bv5 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x42 (bvadd (_ bv5 32) input.spec-%tmpvar-3.L3%1%fcallEnd)))
 (let (($x53 (= ?x42 ?x22)))
 (let (($x52 (= $x53 true)))
 (let (($x45 (= input.spec-%tmpvar-3.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x63 (= $x45 true)))
 (let ((?x14 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x14)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x19 $x40)))
 (let (($x24 (and $x17 $x49)))
 (let (($x15 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x15 $x24)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x64)))))))
 (let (($x38 (and $x7 $x59)))
 (let (($x30 (= $x38 true)))
 (let ((?x33 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x33)))
 (let (($x57 (= ?x54 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x43 (= $x57 true)))
 (let (($x62 (and $x43 $x30)))
 (let (($x13 (and $x62 $x63)))
 (let (($x65 (and $x13 $x63)))
 (let (($x36 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x35 (and $x36 $x65)))
 (let (($x32 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x8 (and $x32 $x35)))
 (let (($x20 (=> $x8 $x52)))
 (not $x20))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x17 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x17)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x15 $x31)))
 (let (($x49 (and $x40 $x14)))
 (let (($x44 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x44 $x49)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x58)))))))
 (let (($x67 (and $x61 $x24)))
 (let (($x23 (= $x67 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x8 (concat ?x13 (concat ?x60 ?x30)))))
 (let (($x46 (= ?x42 input.dst.llvm-%x)))
 (let (($x51 (= $x46 true)))
 (let (($x22 (= input.dst.llvm-%x ?x42)))
 (let (($x20 (and (and (and $x61 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x24) $x22)))
 (let (($x37 (= $x20 true)))
 (let (($x5 (and $x37 $x51)))
 (let (($x36 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x39 (and $x36 $x5)))
 (let (($x32 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x66 (and $x32 $x39)))
 (let (($x25 (=> $x66 $x23)))
 (not $x25))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x17 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x17)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x15 $x31)))
 (let (($x49 (and $x40 $x14)))
 (let (($x44 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x44 $x49)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x58)))))))
 (let (($x67 (and $x61 $x24)))
 (let (($x23 (= $x67 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x8 (concat ?x13 (concat ?x60 ?x30)))))
 (let (($x46 (= ?x42 input.dst.llvm-%x)))
 (let (($x51 (= $x46 true)))
 (let (($x22 (= input.dst.llvm-%x ?x42)))
 (let (($x20 (and (and (and $x61 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x24) $x22)))
 (let (($x37 (= $x20 true)))
 (let (($x5 (and $x37 $x51)))
 (let (($x36 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x39 (and $x36 $x5)))
 (let (($x32 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x66 (and $x32 $x39)))
 (let (($x25 (=> $x66 $x23)))
 (not $x25))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x21 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x21)))
 (let (($x38 (= ?x57 input.dst.llvm-%x)))
 (let (($x68 (= $x38 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x42 (concat ?x30 (concat ?x63 ?x8)))))
 (let (($x39 (= ?x22 input.dst.llvm-%x)))
 (let (($x66 (= $x39 true)))
 (let (($x20 (= input.dst.llvm-%x ?x22)))
 (let ((?x14 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x14)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x19 $x40)))
 (let (($x24 (and $x17 $x49)))
 (let (($x15 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x15 $x24)))
 (let (($x27 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x47)))))))
 (let (($x51 (and (and (and $x7 $x27) $x52) $x20)))
 (let (($x5 (= $x51 true)))
 (let (($x67 (and $x5 $x66)))
 (let (($x36 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x23 (and $x36 $x67)))
 (let (($x32 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x25 (and $x32 $x23)))
 (let (($x69 (=> $x25 $x68)))
 (not $x69)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x21 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x21)))
 (let (($x38 (= ?x57 input.dst.llvm-%x)))
 (let (($x68 (= $x38 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x42 (concat ?x30 (concat ?x63 ?x8)))))
 (let (($x39 (= ?x22 input.dst.llvm-%x)))
 (let (($x66 (= $x39 true)))
 (let (($x20 (= input.dst.llvm-%x ?x22)))
 (let ((?x14 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x14)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x19 $x40)))
 (let (($x24 (and $x17 $x49)))
 (let (($x15 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x15 $x24)))
 (let (($x27 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x47)))))))
 (let (($x51 (and (and (and $x7 $x27) $x52) $x20)))
 (let (($x5 (= $x51 true)))
 (let (($x67 (and $x5 $x66)))
 (let (($x36 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L3%1%fcallEnd)))
 (let (($x23 (and $x36 $x67)))
 (let (($x32 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x25 (and $x32 $x23)))
 (let (($x69 (=> $x25 $x68)))
 (not $x69)))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x24 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x31 (or (bvugt input.memlabel-mem--arg.0_begin ?x15) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x31) (or $x49 $x24)))))))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= ?x53 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x10 $x54)))
 (let (($x64 (and $x50 $x56)))
 (let (($x47 (and $x64 $x58)))
 (and $x47 $x62)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x24 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x31 (or (bvugt input.memlabel-mem--arg.0_begin ?x15) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x31) (or $x49 $x24)))))))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= ?x53 (_ bv0 32))))
 (let ((?x18 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x10 $x54)))
 (let (($x64 (and $x50 $x56)))
 (let (($x47 (and $x64 $x58)))
 (and $x47 $x62)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x70 (= false true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x23 (concat ?x39 (concat ?x22 ?x13)))))
 (let (($x11 (= ?x25 input.dst.llvm-%x)))
 (let (($x21 (= $x11 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x26)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x48 $x16)))
 (let (($x14 (and $x41 $x17)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x14)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x59)))))))
 (let (($x24 (and $x53 $x50)))
 (let (($x46 (= $x24 true)))
 (let (($x55 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x60 (= $x55 true)))
 (let (($x45 (and $x60 $x46)))
 (let (($x57 (and $x45 $x21)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x38 (and $x40 $x57)))
 (let ((?x61 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x32 (= ?x61 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x68 (and $x32 $x38)))
 (let (($x58 (= ?x61 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x69 (and $x58 $x68)))
 (let (($x28 (=> $x69 $x70)))
 (not $x28))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x70 (= false true)))
 (let ((?x13 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x23 (concat ?x39 (concat ?x22 ?x13)))))
 (let (($x11 (= ?x25 input.dst.llvm-%x)))
 (let (($x21 (= $x11 true)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x26)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x48 $x16)))
 (let (($x14 (and $x41 $x17)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x7 $x14)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x59)))))))
 (let (($x24 (and $x53 $x50)))
 (let (($x46 (= $x24 true)))
 (let (($x55 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x60 (= $x55 true)))
 (let (($x45 (and $x60 $x46)))
 (let (($x57 (and $x45 $x21)))
 (let (($x40 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x38 (and $x40 $x57)))
 (let ((?x61 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x32 (= ?x61 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x68 (and $x32 $x38)))
 (let (($x58 (= ?x61 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x69 (and $x58 $x68)))
 (let (($x28 (=> $x69 $x70)))
 (not $x28))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000000101)
(= input.spec-%tmpvar-1.E0%0%d #b11111111111111111111111111111011)
(= input.spec-%tmpvar-2.E0%0%d #b11111111111111111111111111111011)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32) (_ bv4294967291 32))
(define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32) (_ bv4294967291 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x37 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x61 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x8 (= ?x61 ?x37)))
 (let (($x71 (= $x8 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x66 (concat ?x43 (concat ?x48 ?x14)))))
 (let (($x68 (= ?x25 input.dst.llvm-%x)))
 (let (($x69 (= $x68 true)))
 (let (($x11 (= input.dst.llvm-%x ?x25)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x59)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x16 $x45)))
 (let (($x53 (and $x46 $x64)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x22 $x53)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x5)))))))
 (let (($x7 (and $x67 $x52)))
 (let (($x21 (and $x7 $x11)))
 (let (($x19 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x57 (and $x19 $x21)))
 (let (($x38 (= $x57 true)))
 (let (($x70 (and $x38 $x69)))
 (let (($x15 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x28 (and $x15 $x70)))
 (let (($x58 (= ?x61 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x35 (and $x58 $x28)))
 (let (($x12 (= ?x61 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x30 (and $x12 $x35)))
 (let (($x72 (=> $x30 $x71)))
 (not $x72)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x37 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x61 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x8 (= ?x61 ?x37)))
 (let (($x71 (= $x8 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x66 (concat ?x43 (concat ?x48 ?x14)))))
 (let (($x68 (= ?x25 input.dst.llvm-%x)))
 (let (($x69 (= $x68 true)))
 (let (($x11 (= input.dst.llvm-%x ?x25)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x59)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x16 $x45)))
 (let (($x53 (and $x46 $x64)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x22 $x53)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x5)))))))
 (let (($x7 (and $x67 $x52)))
 (let (($x21 (and $x7 $x11)))
 (let (($x19 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x57 (and $x19 $x21)))
 (let (($x38 (= $x57 true)))
 (let (($x70 (and $x38 $x69)))
 (let (($x15 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x28 (and $x15 $x70)))
 (let (($x58 (= ?x61 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x35 (and $x58 $x28)))
 (let (($x12 (= ?x61 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x30 (and $x12 $x35)))
 (let (($x72 (=> $x30 $x71)))
 (not $x72)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791955/query
