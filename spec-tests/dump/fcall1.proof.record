==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x10 $x12)))
 (let (($x19 (and $x11 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x10 $x12)))
 (let (($x19 (and $x11 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x65 (= true false)))
 (let (($x66 (= $x65 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x58 (concat ?x55 (concat ?x51 ?x49)))))
 (let (($x60 (= ?x59 input.dst.llvm-%x)))
 (let (($x61 (= $x60 true)))
 (let (($x32 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x14 (= $x32 true)))
 (let (($x40 (= $x14 true)))
 (let ((?x17 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x17)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x42 $x28)))
 (let (($x5 (and $x16 $x10)))
 (let (($x39 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x39 $x5)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x46)))))))
 (let (($x9 (and $x19 $x36)))
 (let (($x37 (= $x9 true)))
 (let (($x11 (= $x37 true)))
 (let (($x43 (and $x11 $x40)))
 (let (($x62 (and $x43 $x61)))
 (let (($x20 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x63 (and $x20 $x62)))
 (let (($x13 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x64 (and $x13 $x63)))
 (let (($x67 (=> $x64 $x66)))
 (not $x67))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x65 (= true false)))
 (let (($x66 (= $x65 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x58 (concat ?x55 (concat ?x51 ?x49)))))
 (let (($x60 (= ?x59 input.dst.llvm-%x)))
 (let (($x61 (= $x60 true)))
 (let (($x32 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x14 (= $x32 true)))
 (let (($x40 (= $x14 true)))
 (let ((?x17 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x17)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x42 $x28)))
 (let (($x5 (and $x16 $x10)))
 (let (($x39 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x39 $x5)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x46)))))))
 (let (($x9 (and $x19 $x36)))
 (let (($x37 (= $x9 true)))
 (let (($x11 (= $x37 true)))
 (let (($x43 (and $x11 $x40)))
 (let (($x62 (and $x43 $x61)))
 (let (($x20 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x63 (and $x20 $x62)))
 (let (($x13 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x64 (and $x13 $x63)))
 (let (($x67 (=> $x64 $x66)))
 (not $x67))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x32 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x32)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x35 $x38)))
 (let (($x45 (and $x37 $x54)))
 (let (($x16 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x16 $x45)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x52)))))))
 (let (($x64 (and $x18 $x58)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x9 (concat ?x43 (concat ?x40 ?x10)))))
 (let (($x22 (= input.dst.llvm-%x ?x48)))
 (let (($x59 (and (and (and $x18 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x58) $x22)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x62 (and $x21 $x61)))
 (let (($x13 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x63 (and $x13 $x62)))
 (let (($x67 (=> $x63 $x66)))
 (not $x67)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x32 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x32)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x35 $x38)))
 (let (($x45 (and $x37 $x54)))
 (let (($x16 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x16 $x45)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x18 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x52)))))))
 (let (($x64 (and $x18 $x58)))
 (let (($x65 (= $x64 true)))
 (let (($x66 (= $x65 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x9 (concat ?x43 (concat ?x40 ?x10)))))
 (let (($x22 (= input.dst.llvm-%x ?x48)))
 (let (($x59 (and (and (and $x18 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x58) $x22)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x62 (and $x21 $x61)))
 (let (($x13 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x63 (and $x13 $x62)))
 (let (($x67 (=> $x63 $x66)))
 (not $x67)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x68 (= $x67 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x48 (concat ?x10 (concat ?x29 ?x9)))))
 (let (($x59 (= input.dst.llvm-%x ?x22)))
 (let ((?x54 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x54)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x46 $x37)))
 (let (($x58 (and $x32 $x45)))
 (let (($x35 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x35 $x58)))
 (let (($x19 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x14)))))))
 (let (($x62 (and (and (and $x24 $x19) $x56) $x59)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x65 (and $x21 $x64)))
 (let (($x13 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x66 (and $x13 $x65)))
 (let (($x6 (=> $x66 $x68)))
 (not $x6)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x67 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x68 (= $x67 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x48 (concat ?x10 (concat ?x29 ?x9)))))
 (let (($x59 (= input.dst.llvm-%x ?x22)))
 (let ((?x54 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x54)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x46 $x37)))
 (let (($x58 (and $x32 $x45)))
 (let (($x35 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x35 $x58)))
 (let (($x19 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x14)))))))
 (let (($x62 (and (and (and $x24 $x19) $x56) $x59)))
 (let (($x63 (= $x62 true)))
 (let (($x64 (= $x63 true)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x65 (and $x21 $x64)))
 (let (($x13 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x66 (and $x13 $x65)))
 (let (($x6 (=> $x66 $x68)))
 (not $x6)))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b10000000000000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-x-1 #b10000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd #b10000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
(= input.dst.llvm-mem @fun_11)
(function @fun_11
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_11 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x40000000 #xff))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32)
    #x000000ff)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv1 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv2147483648 32) (_ bv1 8)))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x23 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x23)))
 (let (($x5 (= ?x53 input.dst.llvm-%x)))
 (let (($x36 (= $x5 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x22 (concat ?x9 (concat ?x40 ?x48)))))
 (let (($x62 (= input.dst.llvm-%x ?x59)))
 (let ((?x45 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x45)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x47 $x32)))
 (let (($x56 (and $x54 $x58)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x46 $x56)))
 (let (($x44 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x17)))))))
 (let (($x65 (and (and (and $x16 $x44) $x61) $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x13 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x68 (and $x13 $x67)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x6 (and $x34 $x68)))
 (let (($x26 (=> $x6 $x36)))
 (not $x26)))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x23 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x53 (bvneg ?x23)))
 (let (($x5 (= ?x53 input.dst.llvm-%x)))
 (let (($x36 (= $x5 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x22 (concat ?x9 (concat ?x40 ?x48)))))
 (let (($x62 (= input.dst.llvm-%x ?x59)))
 (let ((?x45 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x45)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x37)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x47 $x32)))
 (let (($x56 (and $x54 $x58)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x46 $x56)))
 (let (($x44 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x17)))))))
 (let (($x65 (and (and (and $x16 $x44) $x61) $x62)))
 (let (($x66 (= $x65 true)))
 (let (($x67 (= $x66 true)))
 (let (($x13 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x68 (and $x13 $x67)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x6 (and $x34 $x68)))
 (let (($x26 (=> $x6 $x36)))
 (not $x26)))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x43 (= true false)))
 (let (($x59 (= $x43 true)))
 (let ((?x55 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x55)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x45 $x61)))
 (let (($x22 (and $x64 $x15)))
 (let (($x27 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x27 $x22)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x35)))))))
 (let (($x29 (and $x54 $x11)))
 (let (($x9 (= $x29 true)))
 (let (($x33 (= $x9 true)))
 (let ((?x13 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x13)))
 (let (($x7 (= ?x30 input.dst.llvm-%x)))
 (let (($x60 (= $x7 true)))
 (let (($x40 (and $x60 $x33)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x48 (and $x21 $x40)))
 (let (($x20 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x10 (and $x20 $x48)))
 (let (($x62 (=> $x10 $x59)))
 (not $x62)))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x43 (= true false)))
 (let (($x59 (= $x43 true)))
 (let ((?x55 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x55)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x45 $x61)))
 (let (($x22 (and $x64 $x15)))
 (let (($x27 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x27 $x22)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x63 $x35)))))))
 (let (($x29 (and $x54 $x11)))
 (let (($x9 (= $x29 true)))
 (let (($x33 (= $x9 true)))
 (let ((?x13 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x13)))
 (let (($x7 (= ?x30 input.dst.llvm-%x)))
 (let (($x60 (= $x7 true)))
 (let (($x40 (and $x60 $x33)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x48 (and $x21 $x40)))
 (let (($x20 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x10 (and $x20 $x48)))
 (let (($x62 (=> $x10 $x59)))
 (not $x62)))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x62 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x65 (= $x62 true)))
 (let (($x52 (= $x65 true)))
 (let ((?x29 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x29)))
 (let (($x40 (= ?x9 input.dst.llvm-%x)))
 (let (($x48 (= $x40 true)))
 (let ((?x58 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x58)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x37 $x27)))
 (let (($x61 (and $x45 $x56)))
 (let (($x30 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x30 $x61)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x24)))))))
 (let (($x55 (and $x38 $x64)))
 (let (($x15 (= $x55 true)))
 (let (($x22 (= $x15 true)))
 (let (($x10 (and $x22 $x48)))
 (let (($x44 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x43 (and $x44 $x10)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x59 (and $x21 $x43)))
 (let (($x14 (=> $x59 $x52)))
 (not $x14))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x62 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x65 (= $x62 true)))
 (let (($x52 (= $x65 true)))
 (let ((?x29 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x29)))
 (let (($x40 (= ?x9 input.dst.llvm-%x)))
 (let (($x48 (= $x40 true)))
 (let ((?x58 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x58)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x37 $x27)))
 (let (($x61 (and $x45 $x56)))
 (let (($x30 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x30 $x61)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x24)))))))
 (let (($x55 (and $x38 $x64)))
 (let (($x15 (= $x55 true)))
 (let (($x22 (= $x15 true)))
 (let (($x10 (and $x22 $x48)))
 (let (($x44 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x43 (and $x44 $x10)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x59 (and $x21 $x43)))
 (let (($x14 (=> $x59 $x52)))
 (not $x14))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x33 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x33)))
 (let (($x52 (= ?x40 input.spec-%var-x-1)))
 (let (($x14 (= $x52 true)))
 (let (($x10 (= ?x40 input.dst.llvm-%x)))
 (let (($x43 (= $x10 true)))
 (let ((?x61 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x61)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x17 $x58)))
 (let (($x55 (and $x56 $x64)))
 (let (($x39 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x39 $x55)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x35)))))))
 (let (($x22 (and $x54 $x15)))
 (let (($x11 (= $x22 true)))
 (let (($x29 (= $x11 true)))
 (let (($x59 (and $x29 $x43)))
 (let (($x44 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x62 (and $x44 $x59)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x65 (and $x21 $x62)))
 (let (($x66 (=> $x65 $x14)))
 (not $x66)))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x33 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x40 (bvneg ?x33)))
 (let (($x52 (= ?x40 input.spec-%var-x-1)))
 (let (($x14 (= $x52 true)))
 (let (($x10 (= ?x40 input.dst.llvm-%x)))
 (let (($x43 (= $x10 true)))
 (let ((?x61 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x61)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x45)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x17 $x58)))
 (let (($x55 (and $x56 $x64)))
 (let (($x39 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x39 $x55)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x35)))))))
 (let (($x22 (and $x54 $x15)))
 (let (($x11 (= $x22 true)))
 (let (($x29 (= $x11 true)))
 (let (($x59 (and $x29 $x43)))
 (let (($x44 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x62 (and $x44 $x59)))
 (let (($x21 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x65 (and $x21 $x62)))
 (let (($x66 (=> $x65 $x14)))
 (not $x66)))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x14 (= true false)))
 (let (($x66 (= $x14 true)))
 (let ((?x9 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x9)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x55 $x11)))
 (let (($x40 (and $x29 $x33)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x46 $x40)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x17)))))))
 (let (($x10 (and $x64 $x48)))
 (let (($x43 (= $x10 true)))
 (let (($x59 (= $x43 true)))
 (let ((?x16 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x16)))
 (let (($x18 (= ?x57 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x37 (= $x18 true)))
 (let (($x62 (and $x37 $x59)))
 (let (($x25 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x65 (and $x25 $x62)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x52 (and $x34 $x65)))
 (let (($x60 (=> $x52 $x66)))
 (not $x60)))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x14 (= true false)))
 (let (($x66 (= $x14 true)))
 (let ((?x9 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x9)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x22)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x55 $x11)))
 (let (($x40 (and $x29 $x33)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (and $x46 $x40)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x17)))))))
 (let (($x10 (and $x64 $x48)))
 (let (($x43 (= $x10 true)))
 (let (($x59 (= $x43 true)))
 (let ((?x16 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x57 (bvneg ?x16)))
 (let (($x18 (= ?x57 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x37 (= $x18 true)))
 (let (($x62 (and $x37 $x59)))
 (let (($x25 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x65 (and $x25 $x62)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x52 (and $x34 $x65)))
 (let (($x60 (=> $x52 $x66)))
 (not $x60)))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd #b00000000000000000000000000000000)
(= input.spec-%var-x-1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-4.E0%0%d #b00000000000000000000000000000101)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-x-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32) (_ bv5 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x66 (= input.spec-%tmpvar-3.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x67 (=> $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x6 (= $x68 true)))
 (let (($x60 (= $x66 true)))
 (let (($x63 (= $x60 true)))
 (let ((?x33 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x33)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x15 $x29)))
 (let (($x48 (and $x9 $x40)))
 (let (($x61 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x61 $x48)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x45)))))))
 (let (($x43 (and $x55 $x10)))
 (let (($x59 (= $x43 true)))
 (let (($x62 (= $x59 true)))
 (let ((?x44 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x44)))
 (let (($x57 (= ?x16 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x18 (= $x57 true)))
 (let (($x65 (and $x18 $x62)))
 (let (($x24 (and $x65 $x63)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x41 (and $x21 $x24)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x13 (and $x34 $x41)))
 (let (($x42 (=> $x13 $x6)))
 (not $x42))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let (($x66 (= input.spec-%tmpvar-3.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x67 (=> $x66 true)))
 (let (($x68 (= $x67 true)))
 (let (($x6 (= $x68 true)))
 (let (($x60 (= $x66 true)))
 (let (($x63 (= $x60 true)))
 (let ((?x33 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x33)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x15 $x29)))
 (let (($x48 (and $x9 $x40)))
 (let (($x61 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x61 $x48)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x45)))))))
 (let (($x43 (and $x55 $x10)))
 (let (($x59 (= $x43 true)))
 (let (($x62 (= $x59 true)))
 (let ((?x44 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x44)))
 (let (($x57 (= ?x16 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x18 (= $x57 true)))
 (let (($x65 (and $x18 $x62)))
 (let (($x24 (and $x65 $x63)))
 (let (($x21 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x41 (and $x21 $x24)))
 (let (($x34 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x13 (and $x34 $x41)))
 (let (($x42 (=> $x13 $x6)))
 (not $x42))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x23 (bvadd (_ bv5 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x42 (bvadd (_ bv5 32) input.spec-%tmpvar-3.L2%1%fcallEnd)))
 (let (($x37 (= ?x42 ?x23)))
 (let (($x38 (= $x37 true)))
 (let (($x53 (= $x38 true)))
 (let (($x63 (= input.spec-%tmpvar-3.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x24 (= $x63 true)))
 (let (($x41 (= $x24 true)))
 (let ((?x48 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x48)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x11 $x33)))
 (let (($x43 (and $x40 $x10)))
 (let (($x39 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x39 $x43)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x64)))))))
 (let (($x62 (and $x22 $x59)))
 (let (($x65 (= $x62 true)))
 (let (($x52 (= $x65 true)))
 (let ((?x44 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x44)))
 (let (($x57 (= ?x16 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x18 (= $x57 true)))
 (let (($x14 (and $x18 $x52)))
 (let (($x13 (and $x14 $x41)))
 (let (($x67 (and $x13 $x41)))
 (let (($x32 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x68 (and $x32 $x67)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x6 (and $x7 $x68)))
 (let (($x5 (=> $x6 $x53)))
 (not $x5)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x23 (bvadd (_ bv5 32) input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let ((?x42 (bvadd (_ bv5 32) input.spec-%tmpvar-3.L2%1%fcallEnd)))
 (let (($x37 (= ?x42 ?x23)))
 (let (($x38 (= $x37 true)))
 (let (($x53 (= $x38 true)))
 (let (($x63 (= input.spec-%tmpvar-3.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x24 (= $x63 true)))
 (let (($x41 (= $x24 true)))
 (let ((?x48 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x48)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x11 $x33)))
 (let (($x43 (and $x40 $x10)))
 (let (($x39 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x39 $x43)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x64)))))))
 (let (($x62 (and $x22 $x59)))
 (let (($x65 (= $x62 true)))
 (let (($x52 (= $x65 true)))
 (let ((?x44 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x44)))
 (let (($x57 (= ?x16 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x18 (= $x57 true)))
 (let (($x14 (and $x18 $x52)))
 (let (($x13 (and $x14 $x41)))
 (let (($x67 (and $x13 $x41)))
 (let (($x32 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x68 (and $x32 $x67)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x6 (and $x7 $x68)))
 (let (($x5 (=> $x6 $x53)))
 (not $x5)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x40 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x40)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x39 $x9)))
 (let (($x10 (and $x33 $x48)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x46 $x10)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x56)))))))
 (let (($x31 (and $x61 $x43)))
 (let (($x8 (= $x31 true)))
 (let (($x50 (= $x8 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x67 (concat ?x24 (concat ?x14 ?x65)))))
 (let (($x5 (= ?x68 input.dst.llvm-%x)))
 (let (($x36 (= $x5 true)))
 (let (($x6 (= input.dst.llvm-%x ?x68)))
 (let (($x37 (and (and (and $x61 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x43) $x6)))
 (let (($x38 (= $x37 true)))
 (let (($x53 (= $x38 true)))
 (let (($x51 (and $x53 $x36)))
 (let (($x32 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x47 (and $x32 $x51)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x26 (and $x7 $x47)))
 (let (($x49 (=> $x26 $x50)))
 (not $x49))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x40 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x40)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x39 $x9)))
 (let (($x10 (and $x33 $x48)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x46 $x10)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x58 $x56)))))))
 (let (($x31 (and $x61 $x43)))
 (let (($x8 (= $x31 true)))
 (let (($x50 (= $x8 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x67 (concat ?x24 (concat ?x14 ?x65)))))
 (let (($x5 (= ?x68 input.dst.llvm-%x)))
 (let (($x36 (= $x5 true)))
 (let (($x6 (= input.dst.llvm-%x ?x68)))
 (let (($x37 (and (and (and $x61 (= input.spec-%var-x-1 input.dst.llvm-%x)) $x43) $x6)))
 (let (($x38 (= $x37 true)))
 (let (($x53 (= $x38 true)))
 (let (($x51 (and $x53 $x36)))
 (let (($x32 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x47 (and $x32 $x51)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x26 (and $x7 $x47)))
 (let (($x49 (=> $x26 $x50)))
 (not $x49))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x69 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x69)))
 (let (($x57 (= ?x21 input.dst.llvm-%x)))
 (let (($x62 (= $x57 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x68 (concat ?x65 (concat ?x63 ?x67)))))
 (let (($x47 (= ?x6 input.dst.llvm-%x)))
 (let (($x26 (= $x47 true)))
 (let (($x37 (= input.dst.llvm-%x ?x6)))
 (let ((?x48 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x48)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x11 $x33)))
 (let (($x43 (and $x40 $x10)))
 (let (($x39 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x39 $x43)))
 (let (($x27 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x35)))))))
 (let (($x5 (and (and (and $x22 $x27) $x23) $x37)))
 (let (($x36 (= $x5 true)))
 (let (($x51 (= $x36 true)))
 (let (($x31 (and $x51 $x26)))
 (let (($x32 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x8 (and $x32 $x31)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x50 (and $x7 $x8)))
 (let (($x70 (=> $x50 $x62)))
 (not $x70))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x69 (bvmul input.spec-%var-x-1 (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x69)))
 (let (($x57 (= ?x21 input.dst.llvm-%x)))
 (let (($x62 (= $x57 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x68 (concat ?x65 (concat ?x63 ?x67)))))
 (let (($x47 (= ?x6 input.dst.llvm-%x)))
 (let (($x26 (= $x47 true)))
 (let (($x37 (= input.dst.llvm-%x ?x6)))
 (let ((?x48 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x48)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x11 $x33)))
 (let (($x43 (and $x40 $x10)))
 (let (($x39 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x39 $x43)))
 (let (($x27 (= input.spec-%var-x-1 input.dst.llvm-%x)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x35)))))))
 (let (($x5 (and (and (and $x22 $x27) $x23) $x37)))
 (let (($x36 (= $x5 true)))
 (let (($x51 (= $x36 true)))
 (let (($x31 (and $x51 $x26)))
 (let (($x32 (= input.spec-%var-x-1 input.spec-fcall_arg_copy.0.spec-%var-x-1.L2%1%fcallEnd)))
 (let (($x8 (and $x32 $x31)))
 (let (($x7 (= (_ bv5 32) input.spec-%tmpvar-4.E0%0%d)))
 (let (($x50 (and $x7 $x8)))
 (let (($x70 (=> $x50 $x62)))
 (not $x70))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x43 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x10 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x9 (or (bvugt input.memlabel-mem--arg.0_begin ?x39) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x9) (or $x10 $x43)))))))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= ?x42 (_ bv0 32))))
 (let ((?x12 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x54 $x16)))
 (let (($x64 (and $x34 $x45)))
 (let (($x35 (and $x64 $x56)))
 (and $x35 $x52)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x43 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x10 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x9 (or (bvugt input.memlabel-mem--arg.0_begin ?x39) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x9) (or $x10 $x43)))))))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= ?x42 (_ bv0 32))))
 (let ((?x12 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x44)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x34 (and $x54 $x16)))
 (let (($x64 (and $x34 $x45)))
 (let (($x35 (and $x64 $x56)))
 (and $x35 $x52)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x17 (= true false)))
 (let (($x13 (= $x17 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x50 (concat ?x26 (concat ?x5 ?x6)))))
 (let (($x69 (= ?x49 input.dst.llvm-%x)))
 (let (($x21 (= $x69 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x11)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x40 $x34)))
 (let (($x23 (and $x29 $x32)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x65 $x23)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x10)))))))
 (let (($x52 (and $x25 $x41)))
 (let (($x39 (= $x52 true)))
 (let (($x63 (= $x39 true)))
 (let (($x43 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x53 (= $x43 true)))
 (let (($x60 (= $x53 true)))
 (let (($x67 (and $x60 $x63)))
 (let (($x57 (and $x67 $x21)))
 (let (($x22 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x62 (and $x22 $x57)))
 (let ((?x56 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x45 (= ?x56 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x70 (and $x45 $x62)))
 (let (($x12 (= ?x56 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x71 (and $x12 $x70)))
 (let (($x72 (=> $x71 $x13)))
 (not $x72)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let (($x17 (= true false)))
 (let (($x13 (= $x17 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x50 (concat ?x26 (concat ?x5 ?x6)))))
 (let (($x69 (= ?x49 input.dst.llvm-%x)))
 (let (($x21 (= $x69 true)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x11)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x48)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x40 $x34)))
 (let (($x23 (and $x29 $x32)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x65 $x23)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x10)))))))
 (let (($x52 (and $x25 $x41)))
 (let (($x39 (= $x52 true)))
 (let (($x63 (= $x39 true)))
 (let (($x43 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x53 (= $x43 true)))
 (let (($x60 (= $x53 true)))
 (let (($x67 (and $x60 $x63)))
 (let (($x57 (and $x67 $x21)))
 (let (($x22 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x62 (and $x22 $x57)))
 (let ((?x56 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x45 (= ?x56 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x70 (and $x45 $x62)))
 (let (($x12 (= ?x56 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x71 (and $x12 $x70)))
 (let (($x72 (=> $x71 $x13)))
 (not $x72)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.E0%0%d #b00000000000000000000000000000101)
(= input.spec-%tmpvar-1.E0%0%d #b11111111111111111111111111111011)
(= input.spec-%tmpvar-2.E0%0%d #b11111111111111111111111111111011)
(= input.dst.llvm-mem @fun_4)
(function @fun_4
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32) (_ bv4294967291 32))
(define-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32) (_ bv4294967291 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x73 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x56 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x35 (= ?x56 ?x73)))
 (let (($x58 (= $x35 true)))
 (let (($x66 (= $x58 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x6 (concat ?x60 (concat ?x22 ?x29)))))
 (let (($x62 (= ?x36 input.dst.llvm-%x)))
 (let (($x70 (= $x62 true)))
 (let (($x31 (= input.dst.llvm-%x ?x36)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x15)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x14 $x39)))
 (let (($x16 (and $x40 $x27)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x37 $x16)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x43)))))))
 (let (($x65 (and $x10 $x32)))
 (let (($x49 (and $x65 $x31)))
 (let (($x18 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x69 (and $x18 $x49)))
 (let (($x21 (= $x69 true)))
 (let (($x57 (= $x21 true)))
 (let (($x71 (and $x57 $x70)))
 (let (($x59 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x17 (and $x59 $x71)))
 (let (($x12 (= ?x56 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x13 (and $x12 $x17)))
 (let (($x7 (= ?x56 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x72 (and $x7 $x13)))
 (let (($x74 (=> $x72 $x66)))
 (not $x74)))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.E0%0%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.E0%0%d () (_ BitVec 32))
(assert
 (let ((?x73 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x56 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x35 (= ?x56 ?x73)))
 (let (($x58 (= $x35 true)))
 (let (($x66 (= $x58 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x36 (concat ?x6 (concat ?x60 (concat ?x22 ?x29)))))
 (let (($x62 (= ?x36 input.dst.llvm-%x)))
 (let (($x70 (= $x62 true)))
 (let (($x31 (= input.dst.llvm-%x ?x36)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x15)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x55)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x14 $x39)))
 (let (($x16 (and $x40 $x27)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x37 $x16)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x43)))))))
 (let (($x65 (and $x10 $x32)))
 (let (($x49 (and $x65 $x31)))
 (let (($x18 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x69 (and $x18 $x49)))
 (let (($x21 (= $x69 true)))
 (let (($x57 (= $x21 true)))
 (let (($x71 (and $x57 $x70)))
 (let (($x59 (= (_ bv5 32) input.spec-%tmpvar-0.E0%0%d)))
 (let (($x17 (and $x59 $x71)))
 (let (($x12 (= ?x56 input.spec-%tmpvar-1.E0%0%d)))
 (let (($x13 (and $x12 $x17)))
 (let (($x7 (= ?x56 input.spec-%tmpvar-2.E0%0%d)))
 (let (($x72 (and $x7 $x13)))
 (let (($x74 (=> $x72 $x66)))
 (not $x74)))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462229/query
