==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x10 $x8)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x10 $x8)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7b97677f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6314253b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791617/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x376 (= false true)))
 (let ((?x351 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x353 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x360 (concat ?x359 (concat ?x356 (concat ?x353 ?x351)))))
 (let (($x361 (= ?x360 input.dst.llvm-%y)))
 (let (($x362 (= $x361 true)))
 (let ((?x336 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x338 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x342 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x345 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x346 (concat ?x345 (concat ?x342 (concat ?x338 ?x336)))))
 (let (($x347 (= ?x346 input.dst.llvm-%x)))
 (let (($x348 (= $x347 true)))
 (let (($x331 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x332 (= $x331 true)))
 (let ((?x318 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x319 (= (_ bv0 32) ?x318)))
 (let ((?x316 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x317 (= (_ bv0 32) ?x316)))
 (let ((?x314 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x315 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x314)))
 (let ((?x310 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x310)))
 (let (($x308 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x308 $x311)))
 (let (($x307 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x313 (and $x307 $x312)))
 (let (($x306 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x304 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (and $x297 $x298)))
 (let (($x300 (not $x299)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x296 (and $x294 $x295)))
 (let (($x302 (and (not $x296) $x300)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (and $x288 $x289)))
 (let (($x291 (not $x290)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (and $x266 $x267)))
 (let (($x293 (and (not $x287) $x291)))
 (let (($x325 (and (and (and (and (and (and $x293 $x302) $x304) $x306) $x313) $x315) $x317)))
 (let (($x326 (and $x325 $x319)))
 (let (($x280 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x272 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x272)))
 (let (($x274 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x272)))
 (let (($x284 (or false (or false (and (and true (or $x273 $x274)) (or $x279 $x280))))))
 (let (($x286 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x284)))
 (let (($x327 (and $x286 $x326)))
 (let (($x328 (= $x327 true)))
 (let (($x262 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x263 (= $x262 true)))
 (let (($x329 (and $x263 $x328)))
 (let (($x333 (and $x329 $x332)))
 (let (($x349 (and $x333 $x348)))
 (let (($x363 (and $x349 $x362)))
 (let (($x256 (forall ((input.ind-%var661X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x50 (= input.ind-%var661X input.spec-%var-y-0)))
 (let ((?x19 (ite $x50 ?x8 (_ bv0 32))))
 (let (($x29 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x200 (ite $x29 ?x19 (_ bv0 32))))
 (let ((?x246 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var661X)))
 (let (($x233 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var661X)))
 (let (($x228 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x228 $x233) (= ?x246 ?x200)))))))))))
 ))
 (let (($x241 (forall ((input.ind-%var660X (_ BitVec 32)) )(let (($x50 (= input.ind-%var660X input.spec-%var-y-0)))
 (let (($x29 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x187 (ite $x29 $x50 false)))
 (let (($x233 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var660X)))
 (let (($x228 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x228 (= $x233 $x187))))))))
 ))
 (let (($x29 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x224 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x224 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x230 (= $x228 $x229)))
 (let (($x26 (= false false)))
 (let (($x223 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x227 (=> $x223 $x26)))
 (let (($x225 (= ?x224 (_ bv0 32))))
 (let (($x226 (= $x223 $x225)))
 (let (($x260 (and (and (and (and $x226 $x227) $x230) $x241) $x256)))
 (let (($x364 (and $x260 $x363)))
 (let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x7 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x35 (ite $x7 ?x8 (_ bv0 32))))
 (let ((?x55 (ite $x29 ?x35 (_ bv0 32))))
 (let (($x217 (= input.spec-%tmpvar-6.L2%13%d.2 ?x55)))
 (let (($x213 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x218 (=> $x213 $x217)))
 (let (($x207 (ite $x29 $x7 false)))
 (let ((?x209 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x209 (_ bv1 32))))
 (let (($x215 (= $x213 $x214)))
 (let (($x206 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x212 (=> $x206 $x26)))
 (let (($x210 (= ?x209 (_ bv0 32))))
 (let (($x211 (= $x206 $x210)))
 (let (($x221 (and (and (and $x211 $x212) $x215) $x218)))
 (let (($x365 (and $x221 $x364)))
 (let (($x203 (forall ((input.ind-%var697X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x50 (= input.ind-%var697X input.spec-%var-y-0)))
 (let ((?x19 (ite $x50 ?x8 (_ bv0 32))))
 (let (($x29 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x200 (ite $x29 ?x19 (_ bv0 32))))
 (let ((?x193 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var697X)))
 (let (($x182 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var697X)))
 (=> $x182 (= ?x193 ?x200))))))))))
 ))
 (let (($x189 (forall ((input.ind-%var696X (_ BitVec 32)) )(let (($x50 (= input.ind-%var696X input.spec-%var-y-0)))
 (let (($x29 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x187 (ite $x29 $x50 false)))
 (let (($x182 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var696X)))
 (= $x182 $x187))))))
 ))
 (let (($x204 (and $x189 $x203)))
 (let (($x366 (and $x204 $x365)))
 (let (($x177 (forall ((input.ind-%var731X (_ BitVec 32)) (input.ind-%var733X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var731X input.ind-%var733X)))
 (let (($x163 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var731X)))
 (=> (and $x163 $x158) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var731X input.ind-%var733X) (_ bv0 32))))))
 ))
 (let (($x165 (forall ((input.ind-%var731X (_ BitVec 32)) (input.ind-%var732X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var731X)))
 (=> $x163 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var731X input.ind-%var732X) false))))
 ))
 (let (($x153 (forall ((input.ind-%var730X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var730X)))
 (= $x149 false)))
 ))
 (let (($x179 (and (and $x153 $x165) $x177)))
 (let (($x367 (and $x179 $x366)))
 (let (($x145 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var749X)))
 (=> $x131 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var749X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var748X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var748X)))
 (= $x131 false)))
 ))
 (let (($x146 (and $x135 $x145)))
 (let (($x368 (and $x146 $x367)))
 (let (($x128 (= ?x8 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x369 (and $x128 $x368)))
 (let (($x125 (forall ((input.ind-%var765X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x50 (= input.ind-%var765X input.spec-%var-y-0)))
 (let ((?x19 (ite $x50 ?x8 (_ bv0 32))))
 (let ((?x117 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var765X)))
 (let (($x108 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var765X)))
 (=> $x108 (= ?x117 ?x19))))))))
 ))
 (let (($x113 (forall ((input.ind-%var764X (_ BitVec 32)) )(let (($x50 (= input.ind-%var764X input.spec-%var-y-0)))
 (let (($x108 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var764X)))
 (= $x108 $x50))))
 ))
 (let (($x126 (and $x113 $x125)))
 (let (($x370 (and $x126 $x369)))
 (let (($x103 (forall ((input.ind-%var795X (_ BitVec 32)) (input.ind-%var797X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x50 (= input.ind-%var797X input.spec-%var-y-0)))
 (let ((?x19 (ite $x50 ?x8 (_ bv0 32))))
 (let (($x40 (= input.ind-%var795X input.spec-%var-x-0)))
 (let ((?x78 (ite $x40 ?x19 (_ bv0 32))))
 (let ((?x93 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var795X input.ind-%var797X)))
 (let (($x30 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var795X input.ind-%var797X)))
 (let (($x88 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var795X)))
 (=> (and $x88 $x30) (= ?x93 ?x78)))))))))))
 ))
 (let (($x58 (forall ((input.ind-%var795X (_ BitVec 32)) (input.ind-%var796X (_ BitVec 32)) )(let (($x50 (= input.ind-%var796X input.spec-%var-y-0)))
 (let (($x40 (= input.ind-%var795X input.spec-%var-x-0)))
 (let (($x45 (ite $x40 $x50 false)))
 (let (($x30 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var795X input.ind-%var796X)))
 (let (($x88 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var795X)))
 (=> $x88 (= $x30 $x45))))))))
 ))
 (let (($x71 (forall ((input.ind-%var794X (_ BitVec 32)) )(let (($x31 (= input.ind-%var794X input.spec-%var-x-0)))
 (let (($x74 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var794X)))
 (= $x74 $x31))))
 ))
 (let (($x105 (and (and $x71 $x58) $x103)))
 (let (($x371 (and $x105 $x370)))
 (let (($x83 (forall ((input.ind-%var827X (_ BitVec 32)) (input.ind-%var829X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x50 (= input.ind-%var829X input.spec-%var-y-0)))
 (let ((?x19 (ite $x50 ?x8 (_ bv0 32))))
 (let (($x40 (= input.ind-%var827X input.spec-%var-x-0)))
 (let ((?x78 (ite $x40 ?x19 (_ bv0 32))))
 (let ((?x54 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var827X input.ind-%var829X)))
 (let (($x68 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var827X input.ind-%var829X)))
 (let (($x41 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var827X)))
 (=> (and $x41 $x68) (= ?x54 ?x78)))))))))))
 ))
 (let (($x39 (forall ((input.ind-%var827X (_ BitVec 32)) (input.ind-%var828X (_ BitVec 32)) )(let (($x50 (= input.ind-%var828X input.spec-%var-y-0)))
 (let (($x40 (= input.ind-%var827X input.spec-%var-x-0)))
 (let (($x45 (ite $x40 $x50 false)))
 (let (($x68 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var827X input.ind-%var828X)))
 (let (($x41 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var827X)))
 (=> $x41 (= $x68 $x45))))))))
 ))
 (let (($x46 (forall ((input.ind-%var826X (_ BitVec 32)) )(let (($x31 (= input.ind-%var826X input.spec-%var-x-0)))
 (let (($x64 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var826X)))
 (= $x64 $x31))))
 ))
 (let (($x16 (and (and $x46 $x39) $x83)))
 (let (($x372 (and $x16 $x371)))
 (let (($x373 (and $x26 $x372)))
 (let (($x37 (= input.spec-%var-m2-0.L2%18%bbentry ?x55)))
 (let (($x374 (and $x37 $x373)))
 (let (($x375 (and $x26 $x374)))
 (let (($x377 (=> $x375 $x376)))
 (not $x377)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x376 (= false true)))
 (let ((?x351 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x353 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x360 (concat ?x359 (concat ?x356 (concat ?x353 ?x351)))))
 (let (($x361 (= ?x360 input.dst.llvm-%y)))
 (let (($x362 (= $x361 true)))
 (let ((?x336 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x338 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x342 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x345 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x346 (concat ?x345 (concat ?x342 (concat ?x338 ?x336)))))
 (let (($x347 (= ?x346 input.dst.llvm-%x)))
 (let (($x348 (= $x347 true)))
 (let (($x331 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x332 (= $x331 true)))
 (let ((?x318 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x319 (= (_ bv0 32) ?x318)))
 (let ((?x316 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x317 (= (_ bv0 32) ?x316)))
 (let ((?x314 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x315 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x314)))
 (let ((?x310 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x310)))
 (let (($x308 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x308 $x311)))
 (let (($x307 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x313 (and $x307 $x312)))
 (let (($x306 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x304 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (and $x297 $x298)))
 (let (($x300 (not $x299)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x296 (and $x294 $x295)))
 (let (($x302 (and (not $x296) $x300)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (and $x288 $x289)))
 (let (($x291 (not $x290)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (and $x266 $x267)))
 (let (($x293 (and (not $x287) $x291)))
 (let (($x325 (and (and (and (and (and (and $x293 $x302) $x304) $x306) $x313) $x315) $x317)))
 (let (($x326 (and $x325 $x319)))
 (let (($x280 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x272 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x272)))
 (let (($x274 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x272)))
 (let (($x284 (or false (or false (and (and true (or $x273 $x274)) (or $x279 $x280))))))
 (let (($x286 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x284)))
 (let (($x327 (and $x286 $x326)))
 (let (($x328 (= $x327 true)))
 (let (($x262 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x263 (= $x262 true)))
 (let (($x329 (and $x263 $x328)))
 (let (($x333 (and $x329 $x332)))
 (let (($x349 (and $x333 $x348)))
 (let (($x363 (and $x349 $x362)))
 (let (($x256 (forall ((input.ind-%var661X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x50 (= input.ind-%var661X input.spec-%var-y-0)))
 (let ((?x19 (ite $x50 ?x8 (_ bv0 32))))
 (let (($x29 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x200 (ite $x29 ?x19 (_ bv0 32))))
 (let ((?x246 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var661X)))
 (let (($x233 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var661X)))
 (let (($x228 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x228 $x233) (= ?x246 ?x200)))))))))))
 ))
 (let (($x241 (forall ((input.ind-%var660X (_ BitVec 32)) )(let (($x50 (= input.ind-%var660X input.spec-%var-y-0)))
 (let (($x29 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x187 (ite $x29 $x50 false)))
 (let (($x233 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var660X)))
 (let (($x228 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x228 (= $x233 $x187))))))))
 ))
 (let (($x29 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x224 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x224 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x230 (= $x228 $x229)))
 (let (($x26 (= false false)))
 (let (($x223 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x227 (=> $x223 $x26)))
 (let (($x225 (= ?x224 (_ bv0 32))))
 (let (($x226 (= $x223 $x225)))
 (let (($x260 (and (and (and (and $x226 $x227) $x230) $x241) $x256)))
 (let (($x364 (and $x260 $x363)))
 (let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x7 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x35 (ite $x7 ?x8 (_ bv0 32))))
 (let ((?x55 (ite $x29 ?x35 (_ bv0 32))))
 (let (($x217 (= input.spec-%tmpvar-6.L2%13%d.2 ?x55)))
 (let (($x213 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x218 (=> $x213 $x217)))
 (let (($x207 (ite $x29 $x7 false)))
 (let ((?x209 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x209 (_ bv1 32))))
 (let (($x215 (= $x213 $x214)))
 (let (($x206 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x212 (=> $x206 $x26)))
 (let (($x210 (= ?x209 (_ bv0 32))))
 (let (($x211 (= $x206 $x210)))
 (let (($x221 (and (and (and $x211 $x212) $x215) $x218)))
 (let (($x365 (and $x221 $x364)))
 (let (($x203 (forall ((input.ind-%var697X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x50 (= input.ind-%var697X input.spec-%var-y-0)))
 (let ((?x19 (ite $x50 ?x8 (_ bv0 32))))
 (let (($x29 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x200 (ite $x29 ?x19 (_ bv0 32))))
 (let ((?x193 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var697X)))
 (let (($x182 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var697X)))
 (=> $x182 (= ?x193 ?x200))))))))))
 ))
 (let (($x189 (forall ((input.ind-%var696X (_ BitVec 32)) )(let (($x50 (= input.ind-%var696X input.spec-%var-y-0)))
 (let (($x29 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x187 (ite $x29 $x50 false)))
 (let (($x182 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var696X)))
 (= $x182 $x187))))))
 ))
 (let (($x204 (and $x189 $x203)))
 (let (($x366 (and $x204 $x365)))
 (let (($x177 (forall ((input.ind-%var731X (_ BitVec 32)) (input.ind-%var733X (_ BitVec 32)) )(let (($x158 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var731X input.ind-%var733X)))
 (let (($x163 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var731X)))
 (=> (and $x163 $x158) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var731X input.ind-%var733X) (_ bv0 32))))))
 ))
 (let (($x165 (forall ((input.ind-%var731X (_ BitVec 32)) (input.ind-%var732X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var731X)))
 (=> $x163 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var731X input.ind-%var732X) false))))
 ))
 (let (($x153 (forall ((input.ind-%var730X (_ BitVec 32)) )(let (($x149 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var730X)))
 (= $x149 false)))
 ))
 (let (($x179 (and (and $x153 $x165) $x177)))
 (let (($x367 (and $x179 $x366)))
 (let (($x145 (forall ((input.ind-%var749X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var749X)))
 (=> $x131 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var749X) (_ bv0 32)))))
 ))
 (let (($x135 (forall ((input.ind-%var748X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var748X)))
 (= $x131 false)))
 ))
 (let (($x146 (and $x135 $x145)))
 (let (($x368 (and $x146 $x367)))
 (let (($x128 (= ?x8 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x369 (and $x128 $x368)))
 (let (($x125 (forall ((input.ind-%var765X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x50 (= input.ind-%var765X input.spec-%var-y-0)))
 (let ((?x19 (ite $x50 ?x8 (_ bv0 32))))
 (let ((?x117 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var765X)))
 (let (($x108 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var765X)))
 (=> $x108 (= ?x117 ?x19))))))))
 ))
 (let (($x113 (forall ((input.ind-%var764X (_ BitVec 32)) )(let (($x50 (= input.ind-%var764X input.spec-%var-y-0)))
 (let (($x108 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var764X)))
 (= $x108 $x50))))
 ))
 (let (($x126 (and $x113 $x125)))
 (let (($x370 (and $x126 $x369)))
 (let (($x103 (forall ((input.ind-%var795X (_ BitVec 32)) (input.ind-%var797X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x50 (= input.ind-%var797X input.spec-%var-y-0)))
 (let ((?x19 (ite $x50 ?x8 (_ bv0 32))))
 (let (($x40 (= input.ind-%var795X input.spec-%var-x-0)))
 (let ((?x78 (ite $x40 ?x19 (_ bv0 32))))
 (let ((?x93 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var795X input.ind-%var797X)))
 (let (($x30 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var795X input.ind-%var797X)))
 (let (($x88 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var795X)))
 (=> (and $x88 $x30) (= ?x93 ?x78)))))))))))
 ))
 (let (($x58 (forall ((input.ind-%var795X (_ BitVec 32)) (input.ind-%var796X (_ BitVec 32)) )(let (($x50 (= input.ind-%var796X input.spec-%var-y-0)))
 (let (($x40 (= input.ind-%var795X input.spec-%var-x-0)))
 (let (($x45 (ite $x40 $x50 false)))
 (let (($x30 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var795X input.ind-%var796X)))
 (let (($x88 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var795X)))
 (=> $x88 (= $x30 $x45))))))))
 ))
 (let (($x71 (forall ((input.ind-%var794X (_ BitVec 32)) )(let (($x31 (= input.ind-%var794X input.spec-%var-x-0)))
 (let (($x74 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var794X)))
 (= $x74 $x31))))
 ))
 (let (($x105 (and (and $x71 $x58) $x103)))
 (let (($x371 (and $x105 $x370)))
 (let (($x83 (forall ((input.ind-%var827X (_ BitVec 32)) (input.ind-%var829X (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x50 (= input.ind-%var829X input.spec-%var-y-0)))
 (let ((?x19 (ite $x50 ?x8 (_ bv0 32))))
 (let (($x40 (= input.ind-%var827X input.spec-%var-x-0)))
 (let ((?x78 (ite $x40 ?x19 (_ bv0 32))))
 (let ((?x54 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var827X input.ind-%var829X)))
 (let (($x68 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var827X input.ind-%var829X)))
 (let (($x41 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var827X)))
 (=> (and $x41 $x68) (= ?x54 ?x78)))))))))))
 ))
 (let (($x39 (forall ((input.ind-%var827X (_ BitVec 32)) (input.ind-%var828X (_ BitVec 32)) )(let (($x50 (= input.ind-%var828X input.spec-%var-y-0)))
 (let (($x40 (= input.ind-%var827X input.spec-%var-x-0)))
 (let (($x45 (ite $x40 $x50 false)))
 (let (($x68 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var827X input.ind-%var828X)))
 (let (($x41 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var827X)))
 (=> $x41 (= $x68 $x45))))))))
 ))
 (let (($x46 (forall ((input.ind-%var826X (_ BitVec 32)) )(let (($x31 (= input.ind-%var826X input.spec-%var-x-0)))
 (let (($x64 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var826X)))
 (= $x64 $x31))))
 ))
 (let (($x16 (and (and $x46 $x39) $x83)))
 (let (($x372 (and $x16 $x371)))
 (let (($x373 (and $x26 $x372)))
 (let (($x37 (= input.spec-%var-m2-0.L2%18%bbentry ?x55)))
 (let (($x374 (and $x37 $x373)))
 (let (($x375 (and $x26 $x374)))
 (let (($x377 (=> $x375 $x376)))
 (not $x377)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x040f9e80)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!122))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc0105804)
  (define-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x040f9e83)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc0105807)
  (define-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32)
    #x201c6ac1)
  (define-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32)
    #x201c6ac1)
  (define-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32)
    #x201c6ac1)
  (define-fun input.spec-%var-y-0 () (_ BitVec 32)
    #x0b9c6a80)
  (define-fun input.dst.llvm-%y () (_ BitVec 32)
    #x0b9c6a80)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x040f9e80)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x14800041)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x14800041)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc0105804)
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1!143 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0b9c6a80) true
      false))
  (define-fun k!131 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0b9c6a80) #x0b9c6a80
      #x00000000))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-0.L2%13%d.0.1!143 (k!131 x!0)))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1!137 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x0b9c6a80) #x201c6ac1
      #x00000006))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-0.L2%13%d.1.1!137 (k!131 x!0)))
  (define-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!122 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0105806) #x80
    (ite (= x!0 #x040f9e80) #x80
    (ite (= x!0 #x040f9e83) #x0b
    (ite (= x!0 #x040f9e82) #x9c
    (ite (= x!0 #xc0105805) #x00
    (ite (= x!0 #xc0105807) #x14
    (ite (= x!0 #xc0105804) #x41
      #x6a))))))))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1!141 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x0b9c6a80) #x201c6ac1
      #x00000007))
  (define-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1!139 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0b9c6a80) true
      false))
  (define-fun k!132 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0b9c6a80) #x0b9c6a80
      #x00000000))
  (define-fun k!125 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0b9c6a80) #x0b9c6a80
      #x00000000))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1!134 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x0b9c6a80) #x201c6ac1
      #x00000005))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%tmpvar-5.L2%8%d.2.1.1!141 (k!132 x!0)))
  (define-fun k!124 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x14800041) #x14800041
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1!140 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x14800041) (= x!1 #x0b9c6a80)) true
      false))
  (define-fun k!123 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0b9c6a80) #x0b9c6a80
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.1.1.0.1!140 (k!124 x!0) (k!123 x!1)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1!144 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0b9c6a80) true
      false))
  (define-fun k!126 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x14800041) #x14800041
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1!133 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x14800041) (= x!1 #x0b9c6a80)) #x201c6ac1
      #x00000004))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%8%d.1.1.1.1!133 (k!126 x!0) (k!125 x!1)))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-5.L2%8%d.2.0.1!144 (k!132 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1!135 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x14800041) (= x!1 #x0b9c6a80)) true
      false))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.1.1.0.1!135 (k!126 x!0) (k!125 x!1)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1!136 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x14800041) true
      false))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.0.1!136 (k!126 x!0)))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1!138 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x14800041) true
      false))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.0.1!138 (k!124 x!0)))
  (define-fun k!127 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0b9c6a80) #x0b9c6a80
      #x00000000))
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-3.L2%8%d.0.1!139 (k!127 x!0)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1!142 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x14800041) (= x!1 #x0b9c6a80)) #x201c6ac1
      #x00000008))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m-0.L2%8%d.1.1.1.1!142 (k!124 x!0) (k!123 x!1)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-3.L2%8%d.1.1!134 (k!127 x!0)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000001c)
  (define-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!122))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000001f)
  (define-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32)
    #x88010206)
  (define-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32)
    #x88010206)
  (define-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32)
    #x88010206)
  (define-fun input.spec-%var-y-0 () (_ BitVec 32)
    #x800001c4)
  (define-fun input.dst.llvm-%y () (_ BitVec 32)
    #x800001c4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x08010042)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x08010042)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000001c)
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1!143 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x08010042) (= x!1 #x800001c4)) #x88010206
      #x0000000c))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1!134 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (and (= x!0 #x08010042) (= x!1 #x800001c4)))
  (define-fun k!126 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x08010042) #x08010042
      #x00000000))
  (define-fun k!125 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x800001c4) #x800001c4
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.1.1.0.1!134 (k!126 x!0) (k!125 x!1)))
  (define-fun k!127 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x800001c4) #x800001c4
      #x00000000))
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1!138 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x800001c4))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1!140 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x08010042))
  (define-fun k!124 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x08010042) #x08010042
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.0.1!140 (k!124 x!0)))
  (define-fun k!131 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x800001c4) #x800001c4
      #x00000000))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1!139 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x800001c4) #x88010206
      #x00000007))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-0.L2%13%d.1.1!139 (k!131 x!0)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-3.L2%8%d.0.1!138 (k!127 x!0)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!123 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x800001c4) #x800001c4
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1!141 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (and (= x!0 #x08010042) (= x!1 #x800001c4)))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.1.1.0.1!141 (k!124 x!0) (k!123 x!1)))
  (define-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1!142 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x800001c4))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1!144 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x08010042))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m-0.L2%8%d.1.1.1.1!143 (k!124 x!0) (k!123 x!1)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.0.1!144 (k!126 x!0)))
  (define-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1!137 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x800001c4) #x88010206
      #x00000006))
  (define-fun k!122 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000001f) #x08
    (ite (= x!0 #x0000001c) #x42
    (ite (= x!0 #x0000001e) #x01
    (ite (= x!0 #x0000000b) #x80
    (ite (= x!0 #x00000008) #xc4
    (ite (= x!0 #x00000009) #x01
      #x00)))))))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1!136 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x800001c4) #x88010206
      #x00000005))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1!135 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x800001c4))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-0.L2%13%d.0.1!135 (k!131 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1!133 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x08010042) (= x!1 #x800001c4)) #x88010206
      #x00000004))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%8%d.1.1.1.1!133 (k!126 x!0) (k!125 x!1)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!132 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x800001c4) #x800001c4
      #x00000000))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-3.L2%8%d.1.1!136 (k!127 x!0)))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%tmpvar-5.L2%8%d.2.1.1!137 (k!132 x!0)))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-5.L2%8%d.2.0.1!142 (k!132 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791617/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x7 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x332 (ite $x7 $x29 false)))
 (let ((?x334 (ite $x332 (_ bv1 32) (_ bv0 32))))
 (let (($x344 (= ?x334 (_ bv0 32))))
 (let (($x342 (bvuge ?x334 (_ bv1 32))))
 (let (($x12 (or $x342 $x344)))
 (let ((?x358 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x358 (_ bv1 32))))
 (let (($x22 (and $x353 $x12)))
 (let (($x359 (= ?x358 (_ bv0 32))))
 (let (($x17 (or $x359 $x22)))
 (let (($x379 (or false $x17)))
 (let (($x380 (= $x379 true)))
 (let (($x14 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x81 (= $x14 true)))
 (let (($x67 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x62 (= $x67 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x59 (concat ?x98 (concat ?x85 ?x96)))))
 (let (($x75 (= ?x91 input.dst.llvm-%y)))
 (let (($x82 (= $x75 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x9 (concat ?x57 (concat ?x66 (concat ?x76 ?x115)))))
 (let (($x79 (= ?x9 input.dst.llvm-%x)))
 (let (($x60 (= $x79 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x142)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x141)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x130)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x136 $x168)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (and $x118 $x173)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x147 $x148)))
 (let (($x166 (not $x151)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x199 $x154)))
 (let (($x160 (and (not $x155) $x166)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (and $x181 $x186)))
 (let (($x198 (not $x197)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (and $x231 $x235)))
 (let (($x191 (and (not $x196) $x198)))
 (let (($x110 (and (and (and (and (and (and $x191 $x160) $x172) $x161) $x129) $x133) $x137)))
 (let (($x119 (and $x110 $x38)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x232 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x232)))
 (let (($x237 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x195 (or false (or false (and (and true (or $x236 $x237)) (or $x180 $x184))))))
 (let (($x185 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x195)))
 (let (($x120 (and $x185 $x119)))
 (let (($x107 (= $x120 true)))
 (let (($x42 (and $x107 $x60)))
 (let (($x33 (and $x42 $x82)))
 (let (($x27 (and $x33 $x62)))
 (let (($x89 (and $x27 $x81)))
 (let (($x247 (forall ((input.ind-%var2351X (_ BitVec 32)) )(let ((?x264 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x74 (= input.ind-%var2351X input.spec-%var-y-0)))
 (let ((?x117 (ite $x74 ?x264 (_ bv0 32))))
 (let (($x7 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x319 (ite $x7 ?x117 (_ bv0 32))))
 (let ((?x373 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2351X)))
 (let (($x360 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2351X)))
 (let (($x352 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x352 $x360) (= ?x373 ?x319)))))))))))
 ))
 (let (($x368 (forall ((input.ind-%var2350X (_ BitVec 32)) )(let (($x74 (= input.ind-%var2350X input.spec-%var-y-0)))
 (let (($x7 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x309 (ite $x7 $x74 false)))
 (let (($x360 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2350X)))
 (let (($x352 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x352 (= $x360 $x309))))))))
 ))
 (let (($x352 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x351 (= $x352 $x353)))
 (let (($x10 (= false false)))
 (let (($x349 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x356 (=> $x349 $x10)))
 (let (($x355 (= $x349 $x359)))
 (let (($x159 (and (and (and (and $x355 $x356) $x351) $x368) $x247)))
 (let (($x53 (and $x159 $x89)))
 (let ((?x264 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x8 (ite $x29 ?x264 (_ bv0 32))))
 (let ((?x55 (ite $x7 ?x8 (_ bv0 32))))
 (let (($x336 (= input.spec-%tmpvar-6.L2%13%d.2 ?x55)))
 (let (($x341 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x339 (=> $x341 $x336)))
 (let (($x337 (= $x341 $x342)))
 (let (($x331 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x340 (=> $x331 $x10)))
 (let (($x345 (= $x331 $x344)))
 (let (($x347 (and (and (and $x345 $x340) $x337) $x339)))
 (let (($x48 (and $x347 $x53)))
 (let (($x328 (forall ((input.ind-%var2385X (_ BitVec 32)) )(let ((?x264 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x74 (= input.ind-%var2385X input.spec-%var-y-0)))
 (let ((?x117 (ite $x74 ?x264 (_ bv0 32))))
 (let (($x7 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x319 (ite $x7 ?x117 (_ bv0 32))))
 (let ((?x314 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2385X)))
 (let (($x305 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2385X)))
 (=> $x305 (= ?x314 ?x319))))))))))
 ))
 (let (($x311 (forall ((input.ind-%var2384X (_ BitVec 32)) )(let (($x74 (= input.ind-%var2384X input.spec-%var-y-0)))
 (let (($x7 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x309 (ite $x7 $x74 false)))
 (let (($x305 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2384X)))
 (= $x305 $x309))))))
 ))
 (let (($x329 (and $x311 $x328)))
 (let (($x32 (and $x329 $x48)))
 (let (($x302 (forall ((input.ind-%var2403X (_ BitVec 32)) (input.ind-%var2405X (_ BitVec 32)) )(let (($x284 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2403X input.ind-%var2405X)))
 (let (($x292 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2403X)))
 (=> (and $x292 $x284) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2403X input.ind-%var2405X) (_ bv0 32))))))
 ))
 (let (($x289 (forall ((input.ind-%var2403X (_ BitVec 32)) (input.ind-%var2404X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2403X)))
 (=> $x292 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2403X input.ind-%var2404X) false))))
 ))
 (let (($x278 (forall ((input.ind-%var2402X (_ BitVec 32)) )(let (($x275 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2402X)))
 (= $x275 false)))
 ))
 (let (($x303 (and (and $x278 $x289) $x302)))
 (let (($x15 (and $x303 $x32)))
 (let (($x272 (forall ((input.ind-%var2415X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2415X)))
 (=> $x259 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2415X) (_ bv0 32)))))
 ))
 (let (($x255 (forall ((input.ind-%var2414X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2414X)))
 (= $x259 false)))
 ))
 (let (($x273 (and $x255 $x272)))
 (let (($x49 (and $x273 $x15)))
 (let (($x239 (= ?x264 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x6 (and $x239 $x49)))
 (let (($x230 (forall ((input.ind-%var2429X (_ BitVec 32)) )(let ((?x264 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x74 (= input.ind-%var2429X input.spec-%var-y-0)))
 (let ((?x117 (ite $x74 ?x264 (_ bv0 32))))
 (let ((?x223 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2429X)))
 (let (($x213 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2429X)))
 (=> $x213 (= ?x223 ?x117))))))))
 ))
 (let (($x217 (forall ((input.ind-%var2428X (_ BitVec 32)) )(let (($x74 (= input.ind-%var2428X input.spec-%var-y-0)))
 (let (($x213 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2428X)))
 (= $x213 $x74))))
 ))
 (let (($x258 (and $x217 $x230)))
 (let (($x18 (and $x258 $x6)))
 (let (($x210 (forall ((input.ind-%var2455X (_ BitVec 32)) (input.ind-%var2457X (_ BitVec 32)) )(let ((?x264 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x74 (= input.ind-%var2457X input.spec-%var-y-0)))
 (let ((?x117 (ite $x74 ?x264 (_ bv0 32))))
 (let (($x80 (= input.ind-%var2455X input.spec-%var-x-0)))
 (let ((?x123 (ite $x80 ?x117 (_ bv0 32))))
 (let ((?x200 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2455X input.ind-%var2457X)))
 (let (($x162 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2455X input.ind-%var2457X)))
 (let (($x177 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2455X)))
 (=> (and $x177 $x162) (= ?x200 ?x123)))))))))))
 ))
 (let (($x182 (forall ((input.ind-%var2455X (_ BitVec 32)) (input.ind-%var2456X (_ BitVec 32)) )(let (($x74 (= input.ind-%var2456X input.spec-%var-y-0)))
 (let (($x80 (= input.ind-%var2455X input.spec-%var-x-0)))
 (let (($x71 (ite $x80 $x74 false)))
 (let (($x162 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2455X input.ind-%var2456X)))
 (let (($x177 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2455X)))
 (=> $x177 (= $x162 $x71))))))))
 ))
 (let (($x149 (forall ((input.ind-%var2454X (_ BitVec 32)) )(let (($x68 (= input.ind-%var2454X input.spec-%var-x-0)))
 (let (($x139 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2454X)))
 (= $x139 $x68))))
 ))
 (let (($x26 (and (and $x149 $x182) $x210)))
 (let (($x69 (and $x26 $x18)))
 (let (($x127 (forall ((input.ind-%var2483X (_ BitVec 32)) (input.ind-%var2485X (_ BitVec 32)) )(let ((?x264 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x74 (= input.ind-%var2485X input.spec-%var-y-0)))
 (let ((?x117 (ite $x74 ?x264 (_ bv0 32))))
 (let (($x80 (= input.ind-%var2483X input.spec-%var-x-0)))
 (let ((?x123 (ite $x80 ?x117 (_ bv0 32))))
 (let ((?x100 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2483X input.ind-%var2485X)))
 (let (($x54 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2483X input.ind-%var2485X)))
 (let (($x30 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2483X)))
 (=> (and $x30 $x54) (= ?x100 ?x123)))))))))))
 ))
 (let (($x90 (forall ((input.ind-%var2483X (_ BitVec 32)) (input.ind-%var2484X (_ BitVec 32)) )(let (($x74 (= input.ind-%var2484X input.spec-%var-y-0)))
 (let (($x80 (= input.ind-%var2483X input.spec-%var-x-0)))
 (let (($x71 (ite $x80 $x74 false)))
 (let (($x54 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2483X input.ind-%var2484X)))
 (let (($x30 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2483X)))
 (=> $x30 (= $x54 $x71))))))))
 ))
 (let (($x50 (forall ((input.ind-%var2482X (_ BitVec 32)) )(let (($x68 (= input.ind-%var2482X input.spec-%var-x-0)))
 (let (($x63 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2482X)))
 (= $x63 $x68))))
 ))
 (let (($x131 (and (and $x50 $x90) $x127)))
 (let (($x84 (and $x131 $x69)))
 (let (($x23 (and $x10 $x84)))
 (let (($x37 (= input.spec-%var-m2-0.L2%18%bbentry ?x55)))
 (let (($x44 (and $x37 $x23)))
 (let (($x73 (and $x10 $x44)))
 (let (($x381 (=> $x73 $x380)))
 (not $x381)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x7 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x332 (ite $x7 $x29 false)))
 (let ((?x334 (ite $x332 (_ bv1 32) (_ bv0 32))))
 (let (($x344 (= ?x334 (_ bv0 32))))
 (let (($x342 (bvuge ?x334 (_ bv1 32))))
 (let (($x12 (or $x342 $x344)))
 (let ((?x358 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x358 (_ bv1 32))))
 (let (($x22 (and $x353 $x12)))
 (let (($x359 (= ?x358 (_ bv0 32))))
 (let (($x17 (or $x359 $x22)))
 (let (($x379 (or false $x17)))
 (let (($x380 (= $x379 true)))
 (let (($x14 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x81 (= $x14 true)))
 (let (($x67 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x62 (= $x67 true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x59 (concat ?x98 (concat ?x85 ?x96)))))
 (let (($x75 (= ?x91 input.dst.llvm-%y)))
 (let (($x82 (= $x75 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x9 (concat ?x57 (concat ?x66 (concat ?x76 ?x115)))))
 (let (($x79 (= ?x9 input.dst.llvm-%x)))
 (let (($x60 (= $x79 true)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x142)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x141)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x130)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x136 $x168)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (and $x118 $x173)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x147 $x148)))
 (let (($x166 (not $x151)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x199 $x154)))
 (let (($x160 (and (not $x155) $x166)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (and $x181 $x186)))
 (let (($x198 (not $x197)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (and $x231 $x235)))
 (let (($x191 (and (not $x196) $x198)))
 (let (($x110 (and (and (and (and (and (and $x191 $x160) $x172) $x161) $x129) $x133) $x137)))
 (let (($x119 (and $x110 $x38)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x232 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x232)))
 (let (($x237 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x195 (or false (or false (and (and true (or $x236 $x237)) (or $x180 $x184))))))
 (let (($x185 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x195)))
 (let (($x120 (and $x185 $x119)))
 (let (($x107 (= $x120 true)))
 (let (($x42 (and $x107 $x60)))
 (let (($x33 (and $x42 $x82)))
 (let (($x27 (and $x33 $x62)))
 (let (($x89 (and $x27 $x81)))
 (let (($x247 (forall ((input.ind-%var2351X (_ BitVec 32)) )(let ((?x264 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x74 (= input.ind-%var2351X input.spec-%var-y-0)))
 (let ((?x117 (ite $x74 ?x264 (_ bv0 32))))
 (let (($x7 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x319 (ite $x7 ?x117 (_ bv0 32))))
 (let ((?x373 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2351X)))
 (let (($x360 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2351X)))
 (let (($x352 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x352 $x360) (= ?x373 ?x319)))))))))))
 ))
 (let (($x368 (forall ((input.ind-%var2350X (_ BitVec 32)) )(let (($x74 (= input.ind-%var2350X input.spec-%var-y-0)))
 (let (($x7 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x309 (ite $x7 $x74 false)))
 (let (($x360 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2350X)))
 (let (($x352 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x352 (= $x360 $x309))))))))
 ))
 (let (($x352 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x351 (= $x352 $x353)))
 (let (($x10 (= false false)))
 (let (($x349 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x356 (=> $x349 $x10)))
 (let (($x355 (= $x349 $x359)))
 (let (($x159 (and (and (and (and $x355 $x356) $x351) $x368) $x247)))
 (let (($x53 (and $x159 $x89)))
 (let ((?x264 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x8 (ite $x29 ?x264 (_ bv0 32))))
 (let ((?x55 (ite $x7 ?x8 (_ bv0 32))))
 (let (($x336 (= input.spec-%tmpvar-6.L2%13%d.2 ?x55)))
 (let (($x341 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x339 (=> $x341 $x336)))
 (let (($x337 (= $x341 $x342)))
 (let (($x331 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x340 (=> $x331 $x10)))
 (let (($x345 (= $x331 $x344)))
 (let (($x347 (and (and (and $x345 $x340) $x337) $x339)))
 (let (($x48 (and $x347 $x53)))
 (let (($x328 (forall ((input.ind-%var2385X (_ BitVec 32)) )(let ((?x264 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x74 (= input.ind-%var2385X input.spec-%var-y-0)))
 (let ((?x117 (ite $x74 ?x264 (_ bv0 32))))
 (let (($x7 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x319 (ite $x7 ?x117 (_ bv0 32))))
 (let ((?x314 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2385X)))
 (let (($x305 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2385X)))
 (=> $x305 (= ?x314 ?x319))))))))))
 ))
 (let (($x311 (forall ((input.ind-%var2384X (_ BitVec 32)) )(let (($x74 (= input.ind-%var2384X input.spec-%var-y-0)))
 (let (($x7 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x309 (ite $x7 $x74 false)))
 (let (($x305 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2384X)))
 (= $x305 $x309))))))
 ))
 (let (($x329 (and $x311 $x328)))
 (let (($x32 (and $x329 $x48)))
 (let (($x302 (forall ((input.ind-%var2403X (_ BitVec 32)) (input.ind-%var2405X (_ BitVec 32)) )(let (($x284 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2403X input.ind-%var2405X)))
 (let (($x292 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2403X)))
 (=> (and $x292 $x284) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2403X input.ind-%var2405X) (_ bv0 32))))))
 ))
 (let (($x289 (forall ((input.ind-%var2403X (_ BitVec 32)) (input.ind-%var2404X (_ BitVec 32)) )(let (($x292 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2403X)))
 (=> $x292 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2403X input.ind-%var2404X) false))))
 ))
 (let (($x278 (forall ((input.ind-%var2402X (_ BitVec 32)) )(let (($x275 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2402X)))
 (= $x275 false)))
 ))
 (let (($x303 (and (and $x278 $x289) $x302)))
 (let (($x15 (and $x303 $x32)))
 (let (($x272 (forall ((input.ind-%var2415X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2415X)))
 (=> $x259 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2415X) (_ bv0 32)))))
 ))
 (let (($x255 (forall ((input.ind-%var2414X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2414X)))
 (= $x259 false)))
 ))
 (let (($x273 (and $x255 $x272)))
 (let (($x49 (and $x273 $x15)))
 (let (($x239 (= ?x264 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x6 (and $x239 $x49)))
 (let (($x230 (forall ((input.ind-%var2429X (_ BitVec 32)) )(let ((?x264 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x74 (= input.ind-%var2429X input.spec-%var-y-0)))
 (let ((?x117 (ite $x74 ?x264 (_ bv0 32))))
 (let ((?x223 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2429X)))
 (let (($x213 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2429X)))
 (=> $x213 (= ?x223 ?x117))))))))
 ))
 (let (($x217 (forall ((input.ind-%var2428X (_ BitVec 32)) )(let (($x74 (= input.ind-%var2428X input.spec-%var-y-0)))
 (let (($x213 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2428X)))
 (= $x213 $x74))))
 ))
 (let (($x258 (and $x217 $x230)))
 (let (($x18 (and $x258 $x6)))
 (let (($x210 (forall ((input.ind-%var2455X (_ BitVec 32)) (input.ind-%var2457X (_ BitVec 32)) )(let ((?x264 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x74 (= input.ind-%var2457X input.spec-%var-y-0)))
 (let ((?x117 (ite $x74 ?x264 (_ bv0 32))))
 (let (($x80 (= input.ind-%var2455X input.spec-%var-x-0)))
 (let ((?x123 (ite $x80 ?x117 (_ bv0 32))))
 (let ((?x200 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2455X input.ind-%var2457X)))
 (let (($x162 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2455X input.ind-%var2457X)))
 (let (($x177 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2455X)))
 (=> (and $x177 $x162) (= ?x200 ?x123)))))))))))
 ))
 (let (($x182 (forall ((input.ind-%var2455X (_ BitVec 32)) (input.ind-%var2456X (_ BitVec 32)) )(let (($x74 (= input.ind-%var2456X input.spec-%var-y-0)))
 (let (($x80 (= input.ind-%var2455X input.spec-%var-x-0)))
 (let (($x71 (ite $x80 $x74 false)))
 (let (($x162 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2455X input.ind-%var2456X)))
 (let (($x177 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2455X)))
 (=> $x177 (= $x162 $x71))))))))
 ))
 (let (($x149 (forall ((input.ind-%var2454X (_ BitVec 32)) )(let (($x68 (= input.ind-%var2454X input.spec-%var-x-0)))
 (let (($x139 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2454X)))
 (= $x139 $x68))))
 ))
 (let (($x26 (and (and $x149 $x182) $x210)))
 (let (($x69 (and $x26 $x18)))
 (let (($x127 (forall ((input.ind-%var2483X (_ BitVec 32)) (input.ind-%var2485X (_ BitVec 32)) )(let ((?x264 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x74 (= input.ind-%var2485X input.spec-%var-y-0)))
 (let ((?x117 (ite $x74 ?x264 (_ bv0 32))))
 (let (($x80 (= input.ind-%var2483X input.spec-%var-x-0)))
 (let ((?x123 (ite $x80 ?x117 (_ bv0 32))))
 (let ((?x100 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2483X input.ind-%var2485X)))
 (let (($x54 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2483X input.ind-%var2485X)))
 (let (($x30 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2483X)))
 (=> (and $x30 $x54) (= ?x100 ?x123)))))))))))
 ))
 (let (($x90 (forall ((input.ind-%var2483X (_ BitVec 32)) (input.ind-%var2484X (_ BitVec 32)) )(let (($x74 (= input.ind-%var2484X input.spec-%var-y-0)))
 (let (($x80 (= input.ind-%var2483X input.spec-%var-x-0)))
 (let (($x71 (ite $x80 $x74 false)))
 (let (($x54 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2483X input.ind-%var2484X)))
 (let (($x30 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2483X)))
 (=> $x30 (= $x54 $x71))))))))
 ))
 (let (($x50 (forall ((input.ind-%var2482X (_ BitVec 32)) )(let (($x68 (= input.ind-%var2482X input.spec-%var-x-0)))
 (let (($x63 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2482X)))
 (= $x63 $x68))))
 ))
 (let (($x131 (and (and $x50 $x90) $x127)))
 (let (($x84 (and $x131 $x69)))
 (let (($x23 (and $x10 $x84)))
 (let (($x37 (= input.spec-%var-m2-0.L2%18%bbentry ?x55)))
 (let (($x44 (and $x37 $x23)))
 (let (($x73 (and $x10 $x44)))
 (let (($x381 (=> $x73 $x380)))
 (not $x381)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791617/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x24 (ite $x99 ?x34 (_ bv0 32))))
 (let (($x80 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x29 (ite $x80 ?x24 (_ bv0 32))))
 (let ((?x104 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x101 (= ?x104 ?x29)))
 (let (($x113 (= $x101 true)))
 (let ((?x226 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x134 (concat ?x152 (concat ?x220 ?x226)))))
 (let (($x206 (= ?x144 input.dst.llvm-%x)))
 (let (($x64 (= $x206 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x193 (concat ?x204 (concat ?x203 (concat ?x178 ?x135)))))
 (let (($x78 (= ?x193 input.dst.llvm-%y)))
 (let (($x188 (= $x78 true)))
 (let (($x205 (= input.dst.llvm-%y ?x193)))
 (let (($x187 (= input.dst.llvm-%x ?x144)))
 (let (($x163 (and $x187 $x205)))
 (let ((?x267 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x267)))
 (let ((?x301 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x282 (= (_ bv0 32) ?x301)))
 (let ((?x318 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x294 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x318)))
 (let ((?x325 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x283 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x325)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (and $x265 $x283)))
 (let (($x371 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x313 (and $x371 $x266)))
 (let (($x370 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x321 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x376 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x357 (and $x376 $x316)))
 (let (($x364 (not $x357)))
 (let (($x307 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x363 (and $x290 $x307)))
 (let (($x377 (and (not $x363) $x364)))
 (let (($x324 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x271 (and $x362 $x324)))
 (let (($x274 (not $x271)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x322 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x354 (and $x322 $x372)))
 (let (($x375 (and (not $x354) $x274)))
 (let (($x222 (and (and (and (and (and (and $x375 $x377) $x321) $x370) $x313) $x294) $x282)))
 (let (($x212 (and $x222 $x260)))
 (let (($x263 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x281 (or false (or false (and (and true (or $x46 $x19)) (or $x241 $x246))))))
 (let (($x304 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x281)))
 (let (($x36 (and (and (and $x304 $x263) $x212) $x163)))
 (let (($x276 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x20 (and $x276 $x36)))
 (let (($x58 (= $x20 true)))
 (let (($x189 (and $x58 $x188)))
 (let (($x41 (and $x189 $x64)))
 (let (($x122 (ite $x80 $x99 false)))
 (let ((?x115 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x115 (_ bv1 32))))
 (let ((?x97 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x97 (_ bv1 32))))
 (let (($x306 (and $x33 $x79)))
 (let (($x11 (and $x306 $x41)))
 (let (($x245 (forall ((input.ind-%var2601X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2601X input.spec-%var-y-0)))
 (let ((?x210 (ite $x329 ?x34 (_ bv0 32))))
 (let (($x80 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x107 (ite $x80 ?x210 (_ bv0 32))))
 (let ((?x44 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2601X)))
 (let (($x14 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2601X)))
 (let (($x82 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x82 $x14) (= ?x44 ?x107)))))))))))
 ))
 (let (($x6 (forall ((input.ind-%var2600X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2600X input.spec-%var-y-0)))
 (let (($x80 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x173 (ite $x80 $x329 false)))
 (let (($x14 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2600X)))
 (let (($x82 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x82 (= $x14 $x173))))))))
 ))
 (let (($x82 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x67 (= $x82 $x33)))
 (let (($x8 (= false false)))
 (let (($x96 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x75 (=> $x96 $x8)))
 (let (($x70 (= ?x97 (_ bv0 32))))
 (let (($x91 (= $x96 $x70)))
 (let (($x374 (and (and (and (and $x91 $x75) $x67) $x6) $x245)))
 (let (($x61 (and $x374 $x11)))
 (let (($x86 (= input.spec-%tmpvar-6.L2%13%d.2 ?x29)))
 (let (($x28 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x59 (=> $x28 $x86)))
 (let (($x60 (= $x28 $x79)))
 (let (($x66 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x9 (=> $x66 $x8)))
 (let (($x13 (= ?x115 (_ bv0 32))))
 (let (($x72 (= $x66 $x13)))
 (let (($x51 (and (and (and $x72 $x9) $x60) $x59)))
 (let (($x103 (and $x51 $x61)))
 (let (($x57 (forall ((input.ind-%var2635X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2635X input.spec-%var-y-0)))
 (let ((?x210 (ite $x329 ?x34 (_ bv0 32))))
 (let (($x80 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x107 (ite $x80 ?x210 (_ bv0 32))))
 (let ((?x141 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2635X)))
 (let (($x118 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2635X)))
 (=> $x118 (= ?x141 ?x107))))))))))
 ))
 (let (($x116 (forall ((input.ind-%var2634X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2634X input.spec-%var-y-0)))
 (let (($x80 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x173 (ite $x80 $x329 false)))
 (let (($x118 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2634X)))
 (= $x118 $x173))))))
 ))
 (let (($x47 (and $x116 $x57)))
 (let (($x105 (and $x47 $x103)))
 (let (($x172 (forall ((input.ind-%var2653X (_ BitVec 32)) (input.ind-%var2655X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2653X input.ind-%var2655X)))
 (let (($x197 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2653X)))
 (=> (and $x197 $x235) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2653X input.ind-%var2655X) (_ bv0 32))))))
 ))
 (let (($x191 (forall ((input.ind-%var2653X (_ BitVec 32)) (input.ind-%var2654X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2653X)))
 (=> $x197 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2653X input.ind-%var2654X) false))))
 ))
 (let (($x244 (forall ((input.ind-%var2652X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2652X)))
 (= $x180 false)))
 ))
 (let (($x156 (and (and $x244 $x191) $x172)))
 (let (($x5 (and $x156 $x105)))
 (let (($x237 (forall ((input.ind-%var2665X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2665X)))
 (=> $x150 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2665X) (_ bv0 32)))))
 ))
 (let (($x234 (forall ((input.ind-%var2664X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2664X)))
 (= $x150 false)))
 ))
 (let (($x238 (and $x234 $x237)))
 (let (($x83 (and $x238 $x5)))
 (let (($x366 (= ?x34 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x108 (and $x366 $x83)))
 (let (($x351 (forall ((input.ind-%var2679X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2679X input.spec-%var-y-0)))
 (let ((?x210 (ite $x329 ?x34 (_ bv0 32))))
 (let ((?x349 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2679X)))
 (let (($x341 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2679X)))
 (=> $x341 (= ?x349 ?x210))))))))
 ))
 (let (($x336 (forall ((input.ind-%var2678X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2678X input.spec-%var-y-0)))
 (let (($x341 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2678X)))
 (= $x341 $x329))))
 ))
 (let (($x194 (and $x336 $x351)))
 (let (($x93 (and $x194 $x108)))
 (let (($x344 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2707X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2707X input.spec-%var-y-0)))
 (let ((?x210 (ite $x329 ?x34 (_ bv0 32))))
 (let (($x117 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let ((?x127 (ite $x117 ?x210 (_ bv0 32))))
 (let ((?x262 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x54 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x314 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2705X)))
 (=> (and $x314 $x54) (= ?x262 ?x127)))))))))))
 ))
 (let (($x295 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2706X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2706X input.spec-%var-y-0)))
 (let (($x117 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let (($x230 (ite $x117 $x329 false)))
 (let (($x54 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2706X)))
 (let (($x314 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2705X)))
 (=> $x314 (= $x54 $x230))))))))
 ))
 (let (($x182 (forall ((input.ind-%var2704X (_ BitVec 32)) )(let (($x71 (= input.ind-%var2704X input.spec-%var-x-0)))
 (let (($x272 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2704X)))
 (= $x272 $x71))))
 ))
 (let (($x10 (and (and $x182 $x295) $x344)))
 (let (($x112 (and $x10 $x93)))
 (let (($x278 (forall ((input.ind-%var2733X (_ BitVec 32)) (input.ind-%var2735X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2735X input.spec-%var-y-0)))
 (let ((?x210 (ite $x329 ?x34 (_ bv0 32))))
 (let (($x117 (= input.ind-%var2733X input.spec-%var-x-0)))
 (let ((?x127 (ite $x117 ?x210 (_ bv0 32))))
 (let ((?x176 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2733X input.ind-%var2735X)))
 (let (($x300 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2733X input.ind-%var2735X)))
 (let (($x284 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2733X)))
 (=> (and $x284 $x300) (= ?x176 ?x127)))))))))))
 ))
 (let (($x87 (forall ((input.ind-%var2733X (_ BitVec 32)) (input.ind-%var2734X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2734X input.spec-%var-y-0)))
 (let (($x117 (= input.ind-%var2733X input.spec-%var-x-0)))
 (let (($x230 (ite $x117 $x329 false)))
 (let (($x300 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2733X input.ind-%var2734X)))
 (let (($x284 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2733X)))
 (=> $x284 (= $x300 $x230))))))))
 ))
 (let (($x125 (forall ((input.ind-%var2732X (_ BitVec 32)) )(let (($x71 (= input.ind-%var2732X input.spec-%var-x-0)))
 (let (($x63 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2732X)))
 (= $x63 $x71))))
 ))
 (let (($x258 (and (and $x125 $x87) $x278)))
 (let (($x21 (and $x258 $x112)))
 (let (($x16 (and $x8 $x21)))
 (let (($x264 (= input.spec-%var-m2-0.L2%18%bbentry ?x29)))
 (let (($x242 (and $x264 $x16)))
 (let (($x39 (and $x8 $x242)))
 (let (($x383 (=> $x39 $x113)))
 (not $x383)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x24 (ite $x99 ?x34 (_ bv0 32))))
 (let (($x80 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x29 (ite $x80 ?x24 (_ bv0 32))))
 (let ((?x104 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x101 (= ?x104 ?x29)))
 (let (($x113 (= $x101 true)))
 (let ((?x226 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x134 (concat ?x152 (concat ?x220 ?x226)))))
 (let (($x206 (= ?x144 input.dst.llvm-%x)))
 (let (($x64 (= $x206 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x193 (concat ?x204 (concat ?x203 (concat ?x178 ?x135)))))
 (let (($x78 (= ?x193 input.dst.llvm-%y)))
 (let (($x188 (= $x78 true)))
 (let (($x205 (= input.dst.llvm-%y ?x193)))
 (let (($x187 (= input.dst.llvm-%x ?x144)))
 (let (($x163 (and $x187 $x205)))
 (let ((?x267 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x267)))
 (let ((?x301 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x282 (= (_ bv0 32) ?x301)))
 (let ((?x318 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x294 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x318)))
 (let ((?x325 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x283 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x325)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (and $x265 $x283)))
 (let (($x371 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x313 (and $x371 $x266)))
 (let (($x370 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x321 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x376 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x357 (and $x376 $x316)))
 (let (($x364 (not $x357)))
 (let (($x307 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x363 (and $x290 $x307)))
 (let (($x377 (and (not $x363) $x364)))
 (let (($x324 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x271 (and $x362 $x324)))
 (let (($x274 (not $x271)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x322 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x354 (and $x322 $x372)))
 (let (($x375 (and (not $x354) $x274)))
 (let (($x222 (and (and (and (and (and (and $x375 $x377) $x321) $x370) $x313) $x294) $x282)))
 (let (($x212 (and $x222 $x260)))
 (let (($x263 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x281 (or false (or false (and (and true (or $x46 $x19)) (or $x241 $x246))))))
 (let (($x304 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x281)))
 (let (($x36 (and (and (and $x304 $x263) $x212) $x163)))
 (let (($x276 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x20 (and $x276 $x36)))
 (let (($x58 (= $x20 true)))
 (let (($x189 (and $x58 $x188)))
 (let (($x41 (and $x189 $x64)))
 (let (($x122 (ite $x80 $x99 false)))
 (let ((?x115 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (bvuge ?x115 (_ bv1 32))))
 (let ((?x97 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x97 (_ bv1 32))))
 (let (($x306 (and $x33 $x79)))
 (let (($x11 (and $x306 $x41)))
 (let (($x245 (forall ((input.ind-%var2601X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2601X input.spec-%var-y-0)))
 (let ((?x210 (ite $x329 ?x34 (_ bv0 32))))
 (let (($x80 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x107 (ite $x80 ?x210 (_ bv0 32))))
 (let ((?x44 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2601X)))
 (let (($x14 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2601X)))
 (let (($x82 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x82 $x14) (= ?x44 ?x107)))))))))))
 ))
 (let (($x6 (forall ((input.ind-%var2600X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2600X input.spec-%var-y-0)))
 (let (($x80 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x173 (ite $x80 $x329 false)))
 (let (($x14 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2600X)))
 (let (($x82 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x82 (= $x14 $x173))))))))
 ))
 (let (($x82 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x67 (= $x82 $x33)))
 (let (($x8 (= false false)))
 (let (($x96 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x75 (=> $x96 $x8)))
 (let (($x70 (= ?x97 (_ bv0 32))))
 (let (($x91 (= $x96 $x70)))
 (let (($x374 (and (and (and (and $x91 $x75) $x67) $x6) $x245)))
 (let (($x61 (and $x374 $x11)))
 (let (($x86 (= input.spec-%tmpvar-6.L2%13%d.2 ?x29)))
 (let (($x28 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x59 (=> $x28 $x86)))
 (let (($x60 (= $x28 $x79)))
 (let (($x66 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x9 (=> $x66 $x8)))
 (let (($x13 (= ?x115 (_ bv0 32))))
 (let (($x72 (= $x66 $x13)))
 (let (($x51 (and (and (and $x72 $x9) $x60) $x59)))
 (let (($x103 (and $x51 $x61)))
 (let (($x57 (forall ((input.ind-%var2635X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2635X input.spec-%var-y-0)))
 (let ((?x210 (ite $x329 ?x34 (_ bv0 32))))
 (let (($x80 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x107 (ite $x80 ?x210 (_ bv0 32))))
 (let ((?x141 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2635X)))
 (let (($x118 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2635X)))
 (=> $x118 (= ?x141 ?x107))))))))))
 ))
 (let (($x116 (forall ((input.ind-%var2634X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2634X input.spec-%var-y-0)))
 (let (($x80 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x173 (ite $x80 $x329 false)))
 (let (($x118 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2634X)))
 (= $x118 $x173))))))
 ))
 (let (($x47 (and $x116 $x57)))
 (let (($x105 (and $x47 $x103)))
 (let (($x172 (forall ((input.ind-%var2653X (_ BitVec 32)) (input.ind-%var2655X (_ BitVec 32)) )(let (($x235 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2653X input.ind-%var2655X)))
 (let (($x197 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2653X)))
 (=> (and $x197 $x235) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2653X input.ind-%var2655X) (_ bv0 32))))))
 ))
 (let (($x191 (forall ((input.ind-%var2653X (_ BitVec 32)) (input.ind-%var2654X (_ BitVec 32)) )(let (($x197 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2653X)))
 (=> $x197 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2653X input.ind-%var2654X) false))))
 ))
 (let (($x244 (forall ((input.ind-%var2652X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2652X)))
 (= $x180 false)))
 ))
 (let (($x156 (and (and $x244 $x191) $x172)))
 (let (($x5 (and $x156 $x105)))
 (let (($x237 (forall ((input.ind-%var2665X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2665X)))
 (=> $x150 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2665X) (_ bv0 32)))))
 ))
 (let (($x234 (forall ((input.ind-%var2664X (_ BitVec 32)) )(let (($x150 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2664X)))
 (= $x150 false)))
 ))
 (let (($x238 (and $x234 $x237)))
 (let (($x83 (and $x238 $x5)))
 (let (($x366 (= ?x34 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x108 (and $x366 $x83)))
 (let (($x351 (forall ((input.ind-%var2679X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2679X input.spec-%var-y-0)))
 (let ((?x210 (ite $x329 ?x34 (_ bv0 32))))
 (let ((?x349 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2679X)))
 (let (($x341 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2679X)))
 (=> $x341 (= ?x349 ?x210))))))))
 ))
 (let (($x336 (forall ((input.ind-%var2678X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2678X input.spec-%var-y-0)))
 (let (($x341 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2678X)))
 (= $x341 $x329))))
 ))
 (let (($x194 (and $x336 $x351)))
 (let (($x93 (and $x194 $x108)))
 (let (($x344 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2707X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2707X input.spec-%var-y-0)))
 (let ((?x210 (ite $x329 ?x34 (_ bv0 32))))
 (let (($x117 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let ((?x127 (ite $x117 ?x210 (_ bv0 32))))
 (let ((?x262 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x54 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x314 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2705X)))
 (=> (and $x314 $x54) (= ?x262 ?x127)))))))))))
 ))
 (let (($x295 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2706X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2706X input.spec-%var-y-0)))
 (let (($x117 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let (($x230 (ite $x117 $x329 false)))
 (let (($x54 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2706X)))
 (let (($x314 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2705X)))
 (=> $x314 (= $x54 $x230))))))))
 ))
 (let (($x182 (forall ((input.ind-%var2704X (_ BitVec 32)) )(let (($x71 (= input.ind-%var2704X input.spec-%var-x-0)))
 (let (($x272 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2704X)))
 (= $x272 $x71))))
 ))
 (let (($x10 (and (and $x182 $x295) $x344)))
 (let (($x112 (and $x10 $x93)))
 (let (($x278 (forall ((input.ind-%var2733X (_ BitVec 32)) (input.ind-%var2735X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2735X input.spec-%var-y-0)))
 (let ((?x210 (ite $x329 ?x34 (_ bv0 32))))
 (let (($x117 (= input.ind-%var2733X input.spec-%var-x-0)))
 (let ((?x127 (ite $x117 ?x210 (_ bv0 32))))
 (let ((?x176 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2733X input.ind-%var2735X)))
 (let (($x300 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2733X input.ind-%var2735X)))
 (let (($x284 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2733X)))
 (=> (and $x284 $x300) (= ?x176 ?x127)))))))))))
 ))
 (let (($x87 (forall ((input.ind-%var2733X (_ BitVec 32)) (input.ind-%var2734X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2734X input.spec-%var-y-0)))
 (let (($x117 (= input.ind-%var2733X input.spec-%var-x-0)))
 (let (($x230 (ite $x117 $x329 false)))
 (let (($x300 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2733X input.ind-%var2734X)))
 (let (($x284 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2733X)))
 (=> $x284 (= $x300 $x230))))))))
 ))
 (let (($x125 (forall ((input.ind-%var2732X (_ BitVec 32)) )(let (($x71 (= input.ind-%var2732X input.spec-%var-x-0)))
 (let (($x63 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2732X)))
 (= $x63 $x71))))
 ))
 (let (($x258 (and (and $x125 $x87) $x278)))
 (let (($x21 (and $x258 $x112)))
 (let (($x16 (and $x8 $x21)))
 (let (($x264 (= input.spec-%var-m2-0.L2%18%bbentry ?x29)))
 (let (($x242 (and $x264 $x16)))
 (let (($x39 (and $x8 $x242)))
 (let (($x383 (=> $x39 $x113)))
 (not $x383)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791617/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x217 (= input.spec-%var-y-0 ?x162)))
 (let (($x52 (= $x217 true)))
 (let ((?x337 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x355 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x211 (concat ?x146 (concat ?x347 (concat ?x355 ?x337)))))
 (let (($x288 (= ?x211 input.dst.llvm-%x)))
 (let (($x302 (= $x288 true)))
 (let ((?x311 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x259 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x309 (concat ?x123 (concat ?x239 (concat ?x259 ?x311)))))
 (let (($x207 (= ?x309 input.dst.llvm-%y)))
 (let (($x179 (= $x207 true)))
 (let (($x229 (= input.dst.llvm-%y ?x309)))
 (let (($x275 (= input.dst.llvm-%x ?x211)))
 (let (($x208 (and $x275 $x229)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x151)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x120)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x109)))
 (let ((?x380 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x380)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x69 $x38)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (and $x168 $x119)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x167 $x53)))
 (let (($x142 (not $x22)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x184 $x12)))
 (let (($x48 (and (not $x199) $x142)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x23 $x62)))
 (let (($x110 (not $x89)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x106 $x161)))
 (let (($x192 (and (not $x138) $x110)))
 (let (($x232 (and (and (and (and (and (and $x192 $x48) $x17) $x114) $x231) $x133) $x157)))
 (let (($x339 (and $x232 $x185)))
 (let (($x148 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x367 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x273 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x273)))
 (let (($x327 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x273)))
 (let (($x132 (or false (or false (and (and true (or $x74 $x327)) (or $x190 $x367))))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x287 (and (and (and $x195 $x148) $x339) $x208)))
 (let (($x136 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x216 (and $x136 $x287)))
 (let (($x37 (= $x216 true)))
 (let (($x328 (and $x37 $x179)))
 (let (($x331 (and $x328 $x302)))
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x134 (ite $x43 $x99 false)))
 (let ((?x257 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= ?x257 (_ bv0 32))))
 (let ((?x135 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x135 (_ bv1 32))))
 (let (($x81 (and $x163 $x152)))
 (let (($x55 (and $x81 $x331)))
 (let (($x384 (forall ((input.ind-%var2845X (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x90 (= input.ind-%var2845X input.spec-%var-y-0)))
 (let ((?x352 (ite $x90 ?x7 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x222 (ite $x43 ?x352 (_ bv0 32))))
 (let ((?x93 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2845X)))
 (let (($x78 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2845X)))
 (let (($x205 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x205 $x78) (= ?x93 ?x222)))))))))))
 ))
 (let (($x103 (forall ((input.ind-%var2844X (_ BitVec 32)) )(let (($x90 (= input.ind-%var2844X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x371 (ite $x43 $x90 false)))
 (let (($x78 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2844X)))
 (let (($x205 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x205 (= $x78 $x371))))))))
 ))
 (let (($x205 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x36 (= $x205 $x163)))
 (let (($x35 (= false false)))
 (let (($x178 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x193 (=> $x178 $x35)))
 (let (($x175 (= ?x135 (_ bv0 32))))
 (let (($x158 (= $x178 $x175)))
 (let (($x225 (and (and (and (and $x158 $x193) $x36) $x103) $x384)))
 (let (($x30 (and $x225 $x55)))
 (let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x29 (ite $x99 ?x7 (_ bv0 32))))
 (let ((?x264 (ite $x43 ?x29 (_ bv0 32))))
 (let (($x187 (= input.spec-%tmpvar-6.L2%13%d.2 ?x264)))
 (let (($x226 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x170 (=> $x226 $x187)))
 (let (($x227 (bvuge ?x257 (_ bv1 32))))
 (let (($x45 (= $x226 $x227)))
 (let (($x153 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x220 (=> $x153 $x35)))
 (let (($x219 (= $x153 $x152)))
 (let (($x203 (and (and (and $x219 $x220) $x45) $x170)))
 (let (($x223 (and $x203 $x30)))
 (let (($x212 (forall ((input.ind-%var2879X (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x90 (= input.ind-%var2879X input.spec-%var-y-0)))
 (let ((?x352 (ite $x90 ?x7 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x222 (ite $x43 ?x352 (_ bv0 32))))
 (let ((?x313 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2879X)))
 (let (($x321 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2879X)))
 (=> $x321 (= ?x313 ?x222))))))))))
 ))
 (let (($x317 (forall ((input.ind-%var2878X (_ BitVec 32)) )(let (($x90 (= input.ind-%var2878X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x371 (ite $x43 $x90 false)))
 (let (($x321 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2878X)))
 (= $x321 $x371))))))
 ))
 (let (($x25 (and $x317 $x212)))
 (let (($x292 (and $x25 $x223)))
 (let (($x357 (forall ((input.ind-%var2897X (_ BitVec 32)) (input.ind-%var2899X (_ BitVec 32)) )(let (($x304 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2897X input.ind-%var2899X)))
 (let (($x372 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2897X)))
 (=> (and $x372 $x304) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2897X input.ind-%var2899X) (_ bv0 32))))))
 ))
 (let (($x277 (forall ((input.ind-%var2897X (_ BitVec 32)) (input.ind-%var2898X (_ BitVec 32)) )(let (($x372 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2897X)))
 (=> $x372 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2897X input.ind-%var2898X) false))))
 ))
 (let (($x246 (forall ((input.ind-%var2896X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2896X)))
 (= $x256 false)))
 ))
 (let (($x377 (and (and $x246 $x277) $x357)))
 (let (($x68 (and $x377 $x292)))
 (let (($x46 (forall ((input.ind-%var2909X (_ BitVec 32)) )(let (($x382 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2909X)))
 (=> $x382 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2909X) (_ bv0 32)))))
 ))
 (let (($x245 (forall ((input.ind-%var2908X (_ BitVec 32)) )(let (($x382 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2908X)))
 (= $x382 false)))
 ))
 (let (($x164 (and $x245 $x46)))
 (let (($x40 (and $x164 $x68)))
 (let (($x49 (= ?x7 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x285 (and $x49 $x40)))
 (let (($x121 (forall ((input.ind-%var2923X (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x90 (= input.ind-%var2923X input.spec-%var-y-0)))
 (let ((?x352 (ite $x90 ?x7 (_ bv0 32))))
 (let ((?x97 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2923X)))
 (let (($x79 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2923X)))
 (=> $x79 (= ?x97 ?x352))))))))
 ))
 (let (($x59 (forall ((input.ind-%var2922X (_ BitVec 32)) )(let (($x90 (= input.ind-%var2922X input.spec-%var-y-0)))
 (let (($x79 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2922X)))
 (= $x79 $x90))))
 ))
 (let (($x14 (and $x59 $x121)))
 (let (($x326 (and $x14 $x285)))
 (let (($x72 (forall ((input.ind-%var2949X (_ BitVec 32)) (input.ind-%var2951X (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x90 (= input.ind-%var2951X input.spec-%var-y-0)))
 (let ((?x352 (ite $x90 ?x7 (_ bv0 32))))
 (let (($x182 (= input.ind-%var2949X input.spec-%var-x-0)))
 (let ((?x353 (ite $x182 ?x352 (_ bv0 32))))
 (let ((?x111 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2949X input.ind-%var2951X)))
 (let (($x198 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2949X input.ind-%var2951X)))
 (let (($x156 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2949X)))
 (=> (and $x156 $x198) (= ?x111 ?x353)))))))))))
 ))
 (let (($x173 (forall ((input.ind-%var2949X (_ BitVec 32)) (input.ind-%var2950X (_ BitVec 32)) )(let (($x90 (= input.ind-%var2950X input.spec-%var-y-0)))
 (let (($x182 (= input.ind-%var2949X input.spec-%var-x-0)))
 (let (($x314 (ite $x182 $x90 false)))
 (let (($x198 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2949X input.ind-%var2950X)))
 (let (($x156 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2949X)))
 (=> $x156 (= $x198 $x314))))))))
 ))
 (let (($x243 (forall ((input.ind-%var2948X (_ BitVec 32)) )(let (($x117 (= input.ind-%var2948X input.spec-%var-x-0)))
 (let (($x236 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2948X)))
 (= $x236 $x117))))
 ))
 (let (($x9 (and (and $x243 $x173) $x72)))
 (let (($x209 (and $x9 $x326)))
 (let (($x366 (forall ((input.ind-%var2977X (_ BitVec 32)) (input.ind-%var2979X (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x90 (= input.ind-%var2979X input.spec-%var-y-0)))
 (let ((?x352 (ite $x90 ?x7 (_ bv0 32))))
 (let (($x182 (= input.ind-%var2977X input.spec-%var-x-0)))
 (let ((?x353 (ite $x182 ?x352 (_ bv0 32))))
 (let ((?x334 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2977X input.ind-%var2979X)))
 (let (($x210 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2977X input.ind-%var2979X)))
 (let (($x299 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2977X)))
 (=> (and $x299 $x210) (= ?x334 ?x353)))))))))))
 ))
 (let (($x295 (forall ((input.ind-%var2977X (_ BitVec 32)) (input.ind-%var2978X (_ BitVec 32)) )(let (($x90 (= input.ind-%var2978X input.spec-%var-y-0)))
 (let (($x182 (= input.ind-%var2977X input.spec-%var-x-0)))
 (let (($x314 (ite $x182 $x90 false)))
 (let (($x210 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2977X input.ind-%var2978X)))
 (let (($x299 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2977X)))
 (=> $x299 (= $x210 $x314))))))))
 ))
 (let (($x230 (forall ((input.ind-%var2976X (_ BitVec 32)) )(let (($x117 (= input.ind-%var2976X input.spec-%var-x-0)))
 (let (($x125 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2976X)))
 (= $x125 $x117))))
 ))
 (let (($x350 (and (and $x230 $x295) $x366)))
 (let (($x305 (and $x350 $x209)))
 (let (($x50 (and $x35 $x305)))
 (let (($x31 (= input.spec-%var-m2-0.L2%18%bbentry ?x264)))
 (let (($x149 (and $x31 $x50)))
 (let (($x298 (and $x35 $x149)))
 (let (($x369 (=> $x298 $x52)))
 (not $x369)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x162 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x217 (= input.spec-%var-y-0 ?x162)))
 (let (($x52 (= $x217 true)))
 (let ((?x337 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x355 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x211 (concat ?x146 (concat ?x347 (concat ?x355 ?x337)))))
 (let (($x288 (= ?x211 input.dst.llvm-%x)))
 (let (($x302 (= $x288 true)))
 (let ((?x311 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x259 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x309 (concat ?x123 (concat ?x239 (concat ?x259 ?x311)))))
 (let (($x207 (= ?x309 input.dst.llvm-%y)))
 (let (($x179 (= $x207 true)))
 (let (($x229 (= input.dst.llvm-%y ?x309)))
 (let (($x275 (= input.dst.llvm-%x ?x211)))
 (let (($x208 (and $x275 $x229)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x151)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x120)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x109)))
 (let ((?x380 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x380)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (and $x69 $x38)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (and $x168 $x119)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x167 $x53)))
 (let (($x142 (not $x22)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x184 $x12)))
 (let (($x48 (and (not $x199) $x142)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x23 $x62)))
 (let (($x110 (not $x89)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x106 $x161)))
 (let (($x192 (and (not $x138) $x110)))
 (let (($x232 (and (and (and (and (and (and $x192 $x48) $x17) $x114) $x231) $x133) $x157)))
 (let (($x339 (and $x232 $x185)))
 (let (($x148 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x367 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x273 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x273)))
 (let (($x327 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x273)))
 (let (($x132 (or false (or false (and (and true (or $x74 $x327)) (or $x190 $x367))))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x287 (and (and (and $x195 $x148) $x339) $x208)))
 (let (($x136 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x216 (and $x136 $x287)))
 (let (($x37 (= $x216 true)))
 (let (($x328 (and $x37 $x179)))
 (let (($x331 (and $x328 $x302)))
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x134 (ite $x43 $x99 false)))
 (let ((?x257 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (= ?x257 (_ bv0 32))))
 (let ((?x135 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x135 (_ bv1 32))))
 (let (($x81 (and $x163 $x152)))
 (let (($x55 (and $x81 $x331)))
 (let (($x384 (forall ((input.ind-%var2845X (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x90 (= input.ind-%var2845X input.spec-%var-y-0)))
 (let ((?x352 (ite $x90 ?x7 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x222 (ite $x43 ?x352 (_ bv0 32))))
 (let ((?x93 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2845X)))
 (let (($x78 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2845X)))
 (let (($x205 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x205 $x78) (= ?x93 ?x222)))))))))))
 ))
 (let (($x103 (forall ((input.ind-%var2844X (_ BitVec 32)) )(let (($x90 (= input.ind-%var2844X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x371 (ite $x43 $x90 false)))
 (let (($x78 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2844X)))
 (let (($x205 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x205 (= $x78 $x371))))))))
 ))
 (let (($x205 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x36 (= $x205 $x163)))
 (let (($x35 (= false false)))
 (let (($x178 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x193 (=> $x178 $x35)))
 (let (($x175 (= ?x135 (_ bv0 32))))
 (let (($x158 (= $x178 $x175)))
 (let (($x225 (and (and (and (and $x158 $x193) $x36) $x103) $x384)))
 (let (($x30 (and $x225 $x55)))
 (let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x29 (ite $x99 ?x7 (_ bv0 32))))
 (let ((?x264 (ite $x43 ?x29 (_ bv0 32))))
 (let (($x187 (= input.spec-%tmpvar-6.L2%13%d.2 ?x264)))
 (let (($x226 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x170 (=> $x226 $x187)))
 (let (($x227 (bvuge ?x257 (_ bv1 32))))
 (let (($x45 (= $x226 $x227)))
 (let (($x153 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x220 (=> $x153 $x35)))
 (let (($x219 (= $x153 $x152)))
 (let (($x203 (and (and (and $x219 $x220) $x45) $x170)))
 (let (($x223 (and $x203 $x30)))
 (let (($x212 (forall ((input.ind-%var2879X (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x90 (= input.ind-%var2879X input.spec-%var-y-0)))
 (let ((?x352 (ite $x90 ?x7 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x222 (ite $x43 ?x352 (_ bv0 32))))
 (let ((?x313 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2879X)))
 (let (($x321 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2879X)))
 (=> $x321 (= ?x313 ?x222))))))))))
 ))
 (let (($x317 (forall ((input.ind-%var2878X (_ BitVec 32)) )(let (($x90 (= input.ind-%var2878X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x371 (ite $x43 $x90 false)))
 (let (($x321 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2878X)))
 (= $x321 $x371))))))
 ))
 (let (($x25 (and $x317 $x212)))
 (let (($x292 (and $x25 $x223)))
 (let (($x357 (forall ((input.ind-%var2897X (_ BitVec 32)) (input.ind-%var2899X (_ BitVec 32)) )(let (($x304 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2897X input.ind-%var2899X)))
 (let (($x372 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2897X)))
 (=> (and $x372 $x304) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2897X input.ind-%var2899X) (_ bv0 32))))))
 ))
 (let (($x277 (forall ((input.ind-%var2897X (_ BitVec 32)) (input.ind-%var2898X (_ BitVec 32)) )(let (($x372 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2897X)))
 (=> $x372 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2897X input.ind-%var2898X) false))))
 ))
 (let (($x246 (forall ((input.ind-%var2896X (_ BitVec 32)) )(let (($x256 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2896X)))
 (= $x256 false)))
 ))
 (let (($x377 (and (and $x246 $x277) $x357)))
 (let (($x68 (and $x377 $x292)))
 (let (($x46 (forall ((input.ind-%var2909X (_ BitVec 32)) )(let (($x382 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2909X)))
 (=> $x382 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2909X) (_ bv0 32)))))
 ))
 (let (($x245 (forall ((input.ind-%var2908X (_ BitVec 32)) )(let (($x382 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2908X)))
 (= $x382 false)))
 ))
 (let (($x164 (and $x245 $x46)))
 (let (($x40 (and $x164 $x68)))
 (let (($x49 (= ?x7 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x285 (and $x49 $x40)))
 (let (($x121 (forall ((input.ind-%var2923X (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x90 (= input.ind-%var2923X input.spec-%var-y-0)))
 (let ((?x352 (ite $x90 ?x7 (_ bv0 32))))
 (let ((?x97 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2923X)))
 (let (($x79 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2923X)))
 (=> $x79 (= ?x97 ?x352))))))))
 ))
 (let (($x59 (forall ((input.ind-%var2922X (_ BitVec 32)) )(let (($x90 (= input.ind-%var2922X input.spec-%var-y-0)))
 (let (($x79 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2922X)))
 (= $x79 $x90))))
 ))
 (let (($x14 (and $x59 $x121)))
 (let (($x326 (and $x14 $x285)))
 (let (($x72 (forall ((input.ind-%var2949X (_ BitVec 32)) (input.ind-%var2951X (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x90 (= input.ind-%var2951X input.spec-%var-y-0)))
 (let ((?x352 (ite $x90 ?x7 (_ bv0 32))))
 (let (($x182 (= input.ind-%var2949X input.spec-%var-x-0)))
 (let ((?x353 (ite $x182 ?x352 (_ bv0 32))))
 (let ((?x111 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2949X input.ind-%var2951X)))
 (let (($x198 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2949X input.ind-%var2951X)))
 (let (($x156 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2949X)))
 (=> (and $x156 $x198) (= ?x111 ?x353)))))))))))
 ))
 (let (($x173 (forall ((input.ind-%var2949X (_ BitVec 32)) (input.ind-%var2950X (_ BitVec 32)) )(let (($x90 (= input.ind-%var2950X input.spec-%var-y-0)))
 (let (($x182 (= input.ind-%var2949X input.spec-%var-x-0)))
 (let (($x314 (ite $x182 $x90 false)))
 (let (($x198 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2949X input.ind-%var2950X)))
 (let (($x156 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2949X)))
 (=> $x156 (= $x198 $x314))))))))
 ))
 (let (($x243 (forall ((input.ind-%var2948X (_ BitVec 32)) )(let (($x117 (= input.ind-%var2948X input.spec-%var-x-0)))
 (let (($x236 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2948X)))
 (= $x236 $x117))))
 ))
 (let (($x9 (and (and $x243 $x173) $x72)))
 (let (($x209 (and $x9 $x326)))
 (let (($x366 (forall ((input.ind-%var2977X (_ BitVec 32)) (input.ind-%var2979X (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x90 (= input.ind-%var2979X input.spec-%var-y-0)))
 (let ((?x352 (ite $x90 ?x7 (_ bv0 32))))
 (let (($x182 (= input.ind-%var2977X input.spec-%var-x-0)))
 (let ((?x353 (ite $x182 ?x352 (_ bv0 32))))
 (let ((?x334 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2977X input.ind-%var2979X)))
 (let (($x210 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2977X input.ind-%var2979X)))
 (let (($x299 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2977X)))
 (=> (and $x299 $x210) (= ?x334 ?x353)))))))))))
 ))
 (let (($x295 (forall ((input.ind-%var2977X (_ BitVec 32)) (input.ind-%var2978X (_ BitVec 32)) )(let (($x90 (= input.ind-%var2978X input.spec-%var-y-0)))
 (let (($x182 (= input.ind-%var2977X input.spec-%var-x-0)))
 (let (($x314 (ite $x182 $x90 false)))
 (let (($x210 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2977X input.ind-%var2978X)))
 (let (($x299 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2977X)))
 (=> $x299 (= $x210 $x314))))))))
 ))
 (let (($x230 (forall ((input.ind-%var2976X (_ BitVec 32)) )(let (($x117 (= input.ind-%var2976X input.spec-%var-x-0)))
 (let (($x125 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2976X)))
 (= $x125 $x117))))
 ))
 (let (($x350 (and (and $x230 $x295) $x366)))
 (let (($x305 (and $x350 $x209)))
 (let (($x50 (and $x35 $x305)))
 (let (($x31 (= input.spec-%var-m2-0.L2%18%bbentry ?x264)))
 (let (($x149 (and $x31 $x50)))
 (let (($x298 (and $x35 $x149)))
 (let (($x369 (=> $x298 $x52)))
 (not $x369)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791617/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x272 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x18 (= input.spec-%var-x-0 ?x272)))
 (let (($x279 (= $x18 true)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x244 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x177 (concat ?x244 (concat ?x95 (concat ?x91 ?x92)))))
 (let (($x319 (= ?x177 input.dst.llvm-%x)))
 (let (($x116 (= $x319 true)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x47 (concat ?x56 (concat ?x94 ?x237)))))
 (let (($x63 (= ?x186 input.dst.llvm-%y)))
 (let (($x284 (= $x63 true)))
 (let (($x160 (= input.dst.llvm-%y ?x186)))
 (let (($x197 (= input.dst.llvm-%x ?x177)))
 (let (($x77 (and $x197 $x160)))
 (let ((?x274 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x307 (= (_ bv0 32) ?x274)))
 (let ((?x283 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x282 (= (_ bv0 32) ?x283)))
 (let ((?x281 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x263 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x281)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (and $x297 $x104)))
 (let (($x378 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x301 (and $x378 $x218)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x362 $x370)))
 (let (($x16 (not $x206)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x102 $x241)))
 (let (($x58 (and (not $x21) $x16)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x308 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x308 $x108)))
 (let (($x189 (not $x20)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x268 $x266)))
 (let (($x19 (and (not $x291) $x189)))
 (let (($x363 (and (and (and (and (and (and $x19 $x58) $x41) $x39) $x301) $x263) $x282)))
 (let (($x323 (and $x363 $x307)))
 (let (($x254 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x315 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x374 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x191 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x325 (or false (or false (and (and true (or $x249 $x191)) (or $x374 $x315))))))
 (let (($x312 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x325)))
 (let (($x235 (and (and (and $x312 $x254) $x323) $x77)))
 (let (($x112 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x169 (and $x112 $x235)))
 (let (($x124 (= $x169 true)))
 (let (($x345 (and $x124 $x284)))
 (let (($x141 (and $x345 $x116)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x311 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x311 (_ bv0 32))))
 (let (($x122 (and $x26 $x141)))
 (let (($x100 (forall ((input.ind-%var3089X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var3089X input.spec-%var-y-0)))
 (let ((?x33 (ite $x180 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x232 (ite $x43 ?x33 (_ bv0 32))))
 (let ((?x326 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3089X)))
 (let (($x207 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3089X)))
 (let (($x229 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x229 $x207) (= ?x326 ?x232)))))))))))
 ))
 (let (($x223 (forall ((input.ind-%var3088X (_ BitVec 32)) )(let (($x180 (= input.ind-%var3088X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x168 (ite $x43 $x180 false)))
 (let (($x207 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3088X)))
 (let (($x229 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x229 (= $x207 $x168))))))))
 ))
 (let (($x208 (bvuge ?x311 (_ bv1 32))))
 (let (($x229 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x287 (= $x229 $x208)))
 (let (($x7 (= false false)))
 (let (($x259 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x309 (=> $x259 $x7)))
 (let (($x253 (= $x259 $x26)))
 (let (($x340 (and (and (and (and $x253 $x309) $x287) $x223) $x100)))
 (let (($x71 (and $x340 $x122)))
 (let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x264 (ite $x99 ?x24 (_ bv0 32))))
 (let ((?x31 (ite $x43 ?x264 (_ bv0 32))))
 (let (($x275 (= input.spec-%tmpvar-6.L2%13%d.2 ?x31)))
 (let (($x337 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x255 (=> $x337 $x275)))
 (let (($x146 (ite $x43 $x99 false)))
 (let ((?x356 (ite $x146 (_ bv1 32) (_ bv0 32))))
 (let (($x343 (bvuge ?x356 (_ bv1 32))))
 (let (($x183 (= $x337 $x343)))
 (let (($x126 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x355 (=> $x126 $x7)))
 (let (($x347 (= ?x356 (_ bv0 32))))
 (let (($x359 (= $x126 $x347)))
 (let (($x239 (and (and (and $x359 $x355) $x183) $x255)))
 (let (($x300 (and $x239 $x71)))
 (let (($x339 (forall ((input.ind-%var3123X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var3123X input.spec-%var-y-0)))
 (let ((?x33 (ite $x180 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x232 (ite $x43 ?x33 (_ bv0 32))))
 (let ((?x231 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3123X)))
 (let (($x17 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3123X)))
 (=> $x17 (= ?x231 ?x232))))))))))
 ))
 (let (($x84 (forall ((input.ind-%var3122X (_ BitVec 32)) )(let (($x180 (= input.ind-%var3122X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x168 (ite $x43 $x180 false)))
 (let (($x17 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3122X)))
 (= $x17 $x168))))))
 ))
 (let (($x320 (and $x84 $x339)))
 (let (($x139 (and $x320 $x300)))
 (let (($x22 (forall ((input.ind-%var3141X (_ BitVec 32)) (input.ind-%var3143X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3141X input.ind-%var3143X)))
 (let (($x161 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3141X)))
 (=> (and $x161 $x195) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3141X input.ind-%var3143X) (_ bv0 32))))))
 ))
 (let (($x250 (forall ((input.ind-%var3141X (_ BitVec 32)) (input.ind-%var3142X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3141X)))
 (=> $x161 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3141X input.ind-%var3142X) false))))
 ))
 (let (($x367 (forall ((input.ind-%var3140X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3140X)))
 (= $x289 false)))
 ))
 (let (($x48 (and (and $x367 $x250) $x22)))
 (let (($x278 (and $x48 $x139)))
 (let (($x74 (forall ((input.ind-%var3153X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3153X)))
 (=> $x113 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3153X) (_ bv0 32)))))
 ))
 (let (($x384 (forall ((input.ind-%var3152X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3152X)))
 (= $x113 false)))
 ))
 (let (($x358 (and $x384 $x74)))
 (let (($x10 (and $x358 $x278)))
 (let (($x61 (= ?x24 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x341 (and $x61 $x10)))
 (let (($x296 (forall ((input.ind-%var3167X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var3167X input.spec-%var-y-0)))
 (let ((?x33 (ite $x180 ?x24 (_ bv0 32))))
 (let ((?x135 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3167X)))
 (let (($x227 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3167X)))
 (=> $x227 (= ?x135 ?x33))))))))
 ))
 (let (($x170 (forall ((input.ind-%var3166X (_ BitVec 32)) )(let (($x180 (= input.ind-%var3166X input.spec-%var-y-0)))
 (let (($x227 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3166X)))
 (= $x227 $x180))))
 ))
 (let (($x78 (and $x170 $x296)))
 (let (($x131 (and $x78 $x341)))
 (let (($x219 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3195X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var3195X input.spec-%var-y-0)))
 (let ((?x33 (ite $x180 ?x24 (_ bv0 32))))
 (let (($x243 (= input.ind-%var3193X input.spec-%var-x-0)))
 (let ((?x67 (ite $x243 ?x33 (_ bv0 32))))
 (let ((?x267 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3193X input.ind-%var3195X)))
 (let (($x354 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3195X)))
 (let (($x377 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3193X)))
 (=> (and $x377 $x354) (= ?x267 ?x67)))))))))))
 ))
 (let (($x371 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3194X (_ BitVec 32)) )(let (($x180 (= input.ind-%var3194X input.spec-%var-y-0)))
 (let (($x243 (= input.ind-%var3193X input.spec-%var-x-0)))
 (let (($x156 (ite $x243 $x180 false)))
 (let (($x354 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3194X)))
 (let (($x377 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3193X)))
 (=> $x377 (= $x354 $x156))))))))
 ))
 (let (($x240 (forall ((input.ind-%var3192X (_ BitVec 32)) )(let (($x182 (= input.ind-%var3192X input.spec-%var-x-0)))
 (let (($x143 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3192X)))
 (= $x143 $x182))))
 ))
 (let (($x220 (and (and $x240 $x371) $x219)))
 (let (($x258 (and $x220 $x131)))
 (let (($x49 (forall ((input.ind-%var3221X (_ BitVec 32)) (input.ind-%var3223X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var3223X input.spec-%var-y-0)))
 (let ((?x33 (ite $x180 ?x24 (_ bv0 32))))
 (let (($x243 (= input.ind-%var3221X input.spec-%var-x-0)))
 (let ((?x67 (ite $x243 ?x33 (_ bv0 32))))
 (let ((?x13 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3221X input.ind-%var3223X)))
 (let (($x352 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3221X input.ind-%var3223X)))
 (let (($x172 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3221X)))
 (=> (and $x172 $x352) (= ?x13 ?x67)))))))))))
 ))
 (let (($x173 (forall ((input.ind-%var3221X (_ BitVec 32)) (input.ind-%var3222X (_ BitVec 32)) )(let (($x180 (= input.ind-%var3222X input.spec-%var-y-0)))
 (let (($x243 (= input.ind-%var3221X input.spec-%var-x-0)))
 (let (($x156 (ite $x243 $x180 false)))
 (let (($x352 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3221X input.ind-%var3222X)))
 (let (($x172 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3221X)))
 (=> $x172 (= $x352 $x156))))))))
 ))
 (let (($x314 (forall ((input.ind-%var3220X (_ BitVec 32)) )(let (($x182 (= input.ind-%var3220X input.spec-%var-x-0)))
 (let (($x230 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3220X)))
 (= $x230 $x182))))
 ))
 (let (($x171 (and (and $x314 $x173) $x49)))
 (let (($x338 (and $x171 $x258)))
 (let (($x332 (and $x7 $x338)))
 (let (($x88 (= input.spec-%var-m2-0.L2%18%bbentry ?x31)))
 (let (($x336 (and $x88 $x332)))
 (let (($x87 (and $x7 $x336)))
 (let (($x333 (=> $x87 $x279)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x272 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x18 (= input.spec-%var-x-0 ?x272)))
 (let (($x279 (= $x18 true)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x244 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x177 (concat ?x244 (concat ?x95 (concat ?x91 ?x92)))))
 (let (($x319 (= ?x177 input.dst.llvm-%x)))
 (let (($x116 (= $x319 true)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x47 (concat ?x56 (concat ?x94 ?x237)))))
 (let (($x63 (= ?x186 input.dst.llvm-%y)))
 (let (($x284 (= $x63 true)))
 (let (($x160 (= input.dst.llvm-%y ?x186)))
 (let (($x197 (= input.dst.llvm-%x ?x177)))
 (let (($x77 (and $x197 $x160)))
 (let ((?x274 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x307 (= (_ bv0 32) ?x274)))
 (let ((?x283 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x282 (= (_ bv0 32) ?x283)))
 (let ((?x281 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x263 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x281)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x83)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (and $x297 $x104)))
 (let (($x378 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x301 (and $x378 $x218)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x362 $x370)))
 (let (($x16 (not $x206)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x102 $x241)))
 (let (($x58 (and (not $x21) $x16)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x308 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x308 $x108)))
 (let (($x189 (not $x20)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x268 $x266)))
 (let (($x19 (and (not $x291) $x189)))
 (let (($x363 (and (and (and (and (and (and $x19 $x58) $x41) $x39) $x301) $x263) $x282)))
 (let (($x323 (and $x363 $x307)))
 (let (($x254 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x315 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x374 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x191 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x325 (or false (or false (and (and true (or $x249 $x191)) (or $x374 $x315))))))
 (let (($x312 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x325)))
 (let (($x235 (and (and (and $x312 $x254) $x323) $x77)))
 (let (($x112 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x169 (and $x112 $x235)))
 (let (($x124 (= $x169 true)))
 (let (($x345 (and $x124 $x284)))
 (let (($x141 (and $x345 $x116)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x311 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x311 (_ bv0 32))))
 (let (($x122 (and $x26 $x141)))
 (let (($x100 (forall ((input.ind-%var3089X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var3089X input.spec-%var-y-0)))
 (let ((?x33 (ite $x180 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x232 (ite $x43 ?x33 (_ bv0 32))))
 (let ((?x326 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3089X)))
 (let (($x207 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3089X)))
 (let (($x229 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x229 $x207) (= ?x326 ?x232)))))))))))
 ))
 (let (($x223 (forall ((input.ind-%var3088X (_ BitVec 32)) )(let (($x180 (= input.ind-%var3088X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x168 (ite $x43 $x180 false)))
 (let (($x207 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3088X)))
 (let (($x229 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x229 (= $x207 $x168))))))))
 ))
 (let (($x208 (bvuge ?x311 (_ bv1 32))))
 (let (($x229 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x287 (= $x229 $x208)))
 (let (($x7 (= false false)))
 (let (($x259 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x309 (=> $x259 $x7)))
 (let (($x253 (= $x259 $x26)))
 (let (($x340 (and (and (and (and $x253 $x309) $x287) $x223) $x100)))
 (let (($x71 (and $x340 $x122)))
 (let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x264 (ite $x99 ?x24 (_ bv0 32))))
 (let ((?x31 (ite $x43 ?x264 (_ bv0 32))))
 (let (($x275 (= input.spec-%tmpvar-6.L2%13%d.2 ?x31)))
 (let (($x337 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x255 (=> $x337 $x275)))
 (let (($x146 (ite $x43 $x99 false)))
 (let ((?x356 (ite $x146 (_ bv1 32) (_ bv0 32))))
 (let (($x343 (bvuge ?x356 (_ bv1 32))))
 (let (($x183 (= $x337 $x343)))
 (let (($x126 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x355 (=> $x126 $x7)))
 (let (($x347 (= ?x356 (_ bv0 32))))
 (let (($x359 (= $x126 $x347)))
 (let (($x239 (and (and (and $x359 $x355) $x183) $x255)))
 (let (($x300 (and $x239 $x71)))
 (let (($x339 (forall ((input.ind-%var3123X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var3123X input.spec-%var-y-0)))
 (let ((?x33 (ite $x180 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x232 (ite $x43 ?x33 (_ bv0 32))))
 (let ((?x231 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3123X)))
 (let (($x17 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3123X)))
 (=> $x17 (= ?x231 ?x232))))))))))
 ))
 (let (($x84 (forall ((input.ind-%var3122X (_ BitVec 32)) )(let (($x180 (= input.ind-%var3122X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x168 (ite $x43 $x180 false)))
 (let (($x17 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3122X)))
 (= $x17 $x168))))))
 ))
 (let (($x320 (and $x84 $x339)))
 (let (($x139 (and $x320 $x300)))
 (let (($x22 (forall ((input.ind-%var3141X (_ BitVec 32)) (input.ind-%var3143X (_ BitVec 32)) )(let (($x195 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3141X input.ind-%var3143X)))
 (let (($x161 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3141X)))
 (=> (and $x161 $x195) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3141X input.ind-%var3143X) (_ bv0 32))))))
 ))
 (let (($x250 (forall ((input.ind-%var3141X (_ BitVec 32)) (input.ind-%var3142X (_ BitVec 32)) )(let (($x161 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3141X)))
 (=> $x161 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3141X input.ind-%var3142X) false))))
 ))
 (let (($x367 (forall ((input.ind-%var3140X (_ BitVec 32)) )(let (($x289 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3140X)))
 (= $x289 false)))
 ))
 (let (($x48 (and (and $x367 $x250) $x22)))
 (let (($x278 (and $x48 $x139)))
 (let (($x74 (forall ((input.ind-%var3153X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3153X)))
 (=> $x113 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3153X) (_ bv0 32)))))
 ))
 (let (($x384 (forall ((input.ind-%var3152X (_ BitVec 32)) )(let (($x113 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3152X)))
 (= $x113 false)))
 ))
 (let (($x358 (and $x384 $x74)))
 (let (($x10 (and $x358 $x278)))
 (let (($x61 (= ?x24 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x341 (and $x61 $x10)))
 (let (($x296 (forall ((input.ind-%var3167X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var3167X input.spec-%var-y-0)))
 (let ((?x33 (ite $x180 ?x24 (_ bv0 32))))
 (let ((?x135 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3167X)))
 (let (($x227 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3167X)))
 (=> $x227 (= ?x135 ?x33))))))))
 ))
 (let (($x170 (forall ((input.ind-%var3166X (_ BitVec 32)) )(let (($x180 (= input.ind-%var3166X input.spec-%var-y-0)))
 (let (($x227 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3166X)))
 (= $x227 $x180))))
 ))
 (let (($x78 (and $x170 $x296)))
 (let (($x131 (and $x78 $x341)))
 (let (($x219 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3195X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var3195X input.spec-%var-y-0)))
 (let ((?x33 (ite $x180 ?x24 (_ bv0 32))))
 (let (($x243 (= input.ind-%var3193X input.spec-%var-x-0)))
 (let ((?x67 (ite $x243 ?x33 (_ bv0 32))))
 (let ((?x267 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3193X input.ind-%var3195X)))
 (let (($x354 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3195X)))
 (let (($x377 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3193X)))
 (=> (and $x377 $x354) (= ?x267 ?x67)))))))))))
 ))
 (let (($x371 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3194X (_ BitVec 32)) )(let (($x180 (= input.ind-%var3194X input.spec-%var-y-0)))
 (let (($x243 (= input.ind-%var3193X input.spec-%var-x-0)))
 (let (($x156 (ite $x243 $x180 false)))
 (let (($x354 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3194X)))
 (let (($x377 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3193X)))
 (=> $x377 (= $x354 $x156))))))))
 ))
 (let (($x240 (forall ((input.ind-%var3192X (_ BitVec 32)) )(let (($x182 (= input.ind-%var3192X input.spec-%var-x-0)))
 (let (($x143 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3192X)))
 (= $x143 $x182))))
 ))
 (let (($x220 (and (and $x240 $x371) $x219)))
 (let (($x258 (and $x220 $x131)))
 (let (($x49 (forall ((input.ind-%var3221X (_ BitVec 32)) (input.ind-%var3223X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x180 (= input.ind-%var3223X input.spec-%var-y-0)))
 (let ((?x33 (ite $x180 ?x24 (_ bv0 32))))
 (let (($x243 (= input.ind-%var3221X input.spec-%var-x-0)))
 (let ((?x67 (ite $x243 ?x33 (_ bv0 32))))
 (let ((?x13 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3221X input.ind-%var3223X)))
 (let (($x352 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3221X input.ind-%var3223X)))
 (let (($x172 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3221X)))
 (=> (and $x172 $x352) (= ?x13 ?x67)))))))))))
 ))
 (let (($x173 (forall ((input.ind-%var3221X (_ BitVec 32)) (input.ind-%var3222X (_ BitVec 32)) )(let (($x180 (= input.ind-%var3222X input.spec-%var-y-0)))
 (let (($x243 (= input.ind-%var3221X input.spec-%var-x-0)))
 (let (($x156 (ite $x243 $x180 false)))
 (let (($x352 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3221X input.ind-%var3222X)))
 (let (($x172 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3221X)))
 (=> $x172 (= $x352 $x156))))))))
 ))
 (let (($x314 (forall ((input.ind-%var3220X (_ BitVec 32)) )(let (($x182 (= input.ind-%var3220X input.spec-%var-x-0)))
 (let (($x230 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3220X)))
 (= $x230 $x182))))
 ))
 (let (($x171 (and (and $x314 $x173) $x49)))
 (let (($x338 (and $x171 $x258)))
 (let (($x332 (and $x7 $x338)))
 (let (($x88 (= input.spec-%var-m2-0.L2%18%bbentry ?x31)))
 (let (($x336 (and $x88 $x332)))
 (let (($x87 (and $x7 $x336)))
 (let (($x333 (=> $x87 $x279)))
 (not $x333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791617/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x28 (ite $x43 $x99 false)))
 (let ((?x95 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x95 (_ bv0 32))))
 (let (($x85 (bvuge ?x95 (_ bv1 32))))
 (let (($x76 (or $x85 $x98)))
 (let ((?x248 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x248 (_ bv1 32))))
 (let (($x59 (and $x235 $x76)))
 (let (($x147 (= ?x248 (_ bv0 32))))
 (let (($x295 (or $x147 $x59)))
 (let (($x236 (or false $x295)))
 (let (($x150 (= $x236 true)))
 (let (($x299 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x8 (= $x299 true)))
 (let (($x105 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x233 (= $x105 true)))
 (let ((?x364 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x365 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x215 (concat ?x365 (concat ?x212 (concat ?x164 ?x364)))))
 (let (($x153 (= ?x215 input.dst.llvm-%y)))
 (let (($x304 (= $x153 true)))
 (let ((?x178 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x246 (concat ?x205 (concat ?x144 (concat ?x202 ?x178)))))
 (let (($x372 (= ?x246 input.dst.llvm-%x)))
 (let (($x245 (= $x372 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x148)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x120)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x162)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x149 $x154)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (and $x331 $x68)))
 (let (($x302 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (and $x200 $x190)))
 (let (($x23 (not $x305)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x328 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x327 (and $x328 $x109)))
 (let (($x288 (and (not $x327) $x23)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x373 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x373 $x119)))
 (let (($x379 (not $x181)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x368 (and $x155 $x228)))
 (let (($x216 (and (not $x368) $x379)))
 (let (($x81 (and (and (and (and (and (and $x216 $x288) $x133) $x302) $x40) $x166) $x132)))
 (let (($x62 (and $x81 $x38)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x45)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x101 (or false (or false (and (and true (or $x175 $x201)) (or $x72 $x225))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x89 (and $x140 $x62)))
 (let (($x199 (= $x89 true)))
 (let (($x46 (and $x199 $x245)))
 (let (($x316 (and $x46 $x304)))
 (let (($x125 (and $x316 $x233)))
 (let (($x351 (and $x125 $x8)))
 (let (($x293 (forall ((input.ind-%var3329X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var3329X input.spec-%var-y-0)))
 (let ((?x135 (ite $x143 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x274 (ite $x43 ?x135 (_ bv0 32))))
 (let ((?x258 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3329X)))
 (let (($x284 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3329X)))
 (let (($x77 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x77 $x284) (= ?x258 ?x274)))))))))))
 ))
 (let (($x139 (forall ((input.ind-%var3328X (_ BitVec 32)) )(let (($x143 (= input.ind-%var3328X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x297 (ite $x43 $x143 false)))
 (let (($x284 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3328X)))
 (let (($x77 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x77 (= $x284 $x297))))))))
 ))
 (let (($x77 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x169 (= $x77 $x235)))
 (let (($x7 (= false false)))
 (let (($x237 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x160 (=> $x237 $x7)))
 (let (($x186 (= $x237 $x147)))
 (let (($x179 (and (and (and (and $x186 $x160) $x169) $x139) $x293)))
 (let (($x317 (and $x179 $x351)))
 (let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x264 (ite $x99 ?x24 (_ bv0 32))))
 (let ((?x31 (ite $x43 ?x264 (_ bv0 32))))
 (let (($x57 (= input.spec-%tmpvar-6.L2%13%d.2 ?x31)))
 (let (($x75 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x47 (=> $x75 $x57)))
 (let (($x177 (= $x75 $x85)))
 (let (($x244 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x92 (=> $x244 $x7)))
 (let (($x91 (= $x244 $x98)))
 (let (($x129 (and (and (and $x91 $x92) $x177) $x47)))
 (let (($x313 (and $x129 $x317)))
 (let (($x66 (forall ((input.ind-%var3363X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var3363X input.spec-%var-y-0)))
 (let ((?x135 (ite $x143 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x274 (ite $x43 ?x135 (_ bv0 32))))
 (let ((?x324 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3363X)))
 (let (($x174 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3363X)))
 (=> $x174 (= ?x324 ?x274))))))))))
 ))
 (let (($x83 (forall ((input.ind-%var3362X (_ BitVec 32)) )(let (($x143 (= input.ind-%var3362X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x297 (ite $x43 $x143 false)))
 (let (($x174 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3362X)))
 (= $x174 $x297))))))
 ))
 (let (($x51 (and $x83 $x66)))
 (let (($x134 (and $x51 $x313)))
 (let (($x16 (forall ((input.ind-%var3381X (_ BitVec 32)) (input.ind-%var3383X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3381X input.ind-%var3383X)))
 (let (($x291 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3381X)))
 (=> (and $x291 $x261) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3381X input.ind-%var3383X) (_ bv0 32))))))
 ))
 (let (($x308 (forall ((input.ind-%var3381X (_ BitVec 32)) (input.ind-%var3382X (_ BitVec 32)) )(let (($x291 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3381X)))
 (=> $x291 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3381X input.ind-%var3382X) false))))
 ))
 (let (($x6 (forall ((input.ind-%var3380X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3380X)))
 (= $x127 false)))
 ))
 (let (($x280 (and (and $x6 $x308) $x16)))
 (let (($x117 (and $x280 $x134)))
 (let (($x60 (forall ((input.ind-%var3393X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3393X)))
 (=> $x52 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3393X) (_ bv0 32)))))
 ))
 (let (($x100 (forall ((input.ind-%var3392X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3392X)))
 (= $x52 false)))
 ))
 (let (($x191 (and $x100 $x60)))
 (let (($x210 (and $x191 $x117)))
 (let (($x30 (= ?x24 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x360 (and $x30 $x210)))
 (let (($x251 (forall ((input.ind-%var3407X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var3407X input.spec-%var-y-0)))
 (let ((?x135 (ite $x143 ?x24 (_ bv0 32))))
 (let ((?x311 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3407X)))
 (let (($x343 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3407X)))
 (=> $x343 (= ?x311 ?x135))))))))
 ))
 (let (($x255 (forall ((input.ind-%var3406X (_ BitVec 32)) )(let (($x143 (= input.ind-%var3406X input.spec-%var-y-0)))
 (let (($x343 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3406X)))
 (= $x343 $x143))))
 ))
 (let (($x207 (and $x255 $x251)))
 (let (($x366 (and $x207 $x360)))
 (let (($x347 (forall ((input.ind-%var3433X (_ BitVec 32)) (input.ind-%var3435X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var3435X input.spec-%var-y-0)))
 (let ((?x135 (ite $x143 ?x24 (_ bv0 32))))
 (let (($x256 (= input.ind-%var3433X input.spec-%var-x-0)))
 (let ((?x163 (ite $x256 ?x135 (_ bv0 32))))
 (let ((?x232 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3433X input.ind-%var3435X)))
 (let (($x106 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3433X input.ind-%var3435X)))
 (let (($x22 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3433X)))
 (=> (and $x22 $x106) (= ?x232 ?x163)))))))))))
 ))
 (let (($x17 (forall ((input.ind-%var3433X (_ BitVec 32)) (input.ind-%var3434X (_ BitVec 32)) )(let (($x143 (= input.ind-%var3434X input.spec-%var-y-0)))
 (let (($x256 (= input.ind-%var3433X input.spec-%var-x-0)))
 (let (($x240 (ite $x256 $x143 false)))
 (let (($x106 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3433X input.ind-%var3434X)))
 (let (($x22 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3433X)))
 (=> $x22 (= $x106 $x240))))))))
 ))
 (let (($x289 (forall ((input.ind-%var3432X (_ BitVec 32)) )(let (($x352 (= input.ind-%var3432X input.spec-%var-x-0)))
 (let (($x136 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3432X)))
 (= $x136 $x352))))
 ))
 (let (($x355 (and (and $x289 $x17) $x347)))
 (let (($x9 (and $x355 $x366)))
 (let (($x11 (forall ((input.ind-%var3461X (_ BitVec 32)) (input.ind-%var3463X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var3463X input.spec-%var-y-0)))
 (let ((?x135 (ite $x143 ?x24 (_ bv0 32))))
 (let (($x256 (= input.ind-%var3461X input.spec-%var-x-0)))
 (let ((?x163 (ite $x256 ?x135 (_ bv0 32))))
 (let ((?x221 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3461X input.ind-%var3463X)))
 (let (($x13 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3461X input.ind-%var3463X)))
 (let (($x354 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3461X)))
 (=> (and $x354 $x13) (= ?x221 ?x163)))))))))))
 ))
 (let (($x321 (forall ((input.ind-%var3461X (_ BitVec 32)) (input.ind-%var3462X (_ BitVec 32)) )(let (($x143 (= input.ind-%var3462X input.spec-%var-y-0)))
 (let (($x256 (= input.ind-%var3461X input.spec-%var-x-0)))
 (let (($x240 (ite $x256 $x143 false)))
 (let (($x13 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3461X input.ind-%var3462X)))
 (let (($x354 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3461X)))
 (=> $x354 (= $x13 $x240))))))))
 ))
 (let (($x180 (forall ((input.ind-%var3460X (_ BitVec 32)) )(let (($x352 (= input.ind-%var3460X input.spec-%var-x-0)))
 (let (($x90 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3460X)))
 (= $x90 $x352))))
 ))
 (let (($x113 (and (and $x180 $x321) $x11)))
 (let (($x79 (and $x113 $x9)))
 (let (($x194 (and $x7 $x79)))
 (let (($x88 (= input.spec-%var-m2-0.L2%18%bbentry ?x31)))
 (let (($x350 (and $x88 $x194)))
 (let (($x86 (and $x7 $x350)))
 (let (($x115 (=> $x86 $x150)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x28 (ite $x43 $x99 false)))
 (let ((?x95 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x95 (_ bv0 32))))
 (let (($x85 (bvuge ?x95 (_ bv1 32))))
 (let (($x76 (or $x85 $x98)))
 (let ((?x248 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x248 (_ bv1 32))))
 (let (($x59 (and $x235 $x76)))
 (let (($x147 (= ?x248 (_ bv0 32))))
 (let (($x295 (or $x147 $x59)))
 (let (($x236 (or false $x295)))
 (let (($x150 (= $x236 true)))
 (let (($x299 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x8 (= $x299 true)))
 (let (($x105 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x233 (= $x105 true)))
 (let ((?x364 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x365 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x215 (concat ?x365 (concat ?x212 (concat ?x164 ?x364)))))
 (let (($x153 (= ?x215 input.dst.llvm-%y)))
 (let (($x304 (= $x153 true)))
 (let ((?x178 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x246 (concat ?x205 (concat ?x144 (concat ?x202 ?x178)))))
 (let (($x372 (= ?x246 input.dst.llvm-%x)))
 (let (($x245 (= $x372 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x148)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x120)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x162)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x149 $x154)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (and $x331 $x68)))
 (let (($x302 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (and $x200 $x190)))
 (let (($x23 (not $x305)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x328 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x327 (and $x328 $x109)))
 (let (($x288 (and (not $x327) $x23)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x373 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x373 $x119)))
 (let (($x379 (not $x181)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x368 (and $x155 $x228)))
 (let (($x216 (and (not $x368) $x379)))
 (let (($x81 (and (and (and (and (and (and $x216 $x288) $x133) $x302) $x40) $x166) $x132)))
 (let (($x62 (and $x81 $x38)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x45 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x45)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x101 (or false (or false (and (and true (or $x175 $x201)) (or $x72 $x225))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x89 (and $x140 $x62)))
 (let (($x199 (= $x89 true)))
 (let (($x46 (and $x199 $x245)))
 (let (($x316 (and $x46 $x304)))
 (let (($x125 (and $x316 $x233)))
 (let (($x351 (and $x125 $x8)))
 (let (($x293 (forall ((input.ind-%var3329X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var3329X input.spec-%var-y-0)))
 (let ((?x135 (ite $x143 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x274 (ite $x43 ?x135 (_ bv0 32))))
 (let ((?x258 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3329X)))
 (let (($x284 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3329X)))
 (let (($x77 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x77 $x284) (= ?x258 ?x274)))))))))))
 ))
 (let (($x139 (forall ((input.ind-%var3328X (_ BitVec 32)) )(let (($x143 (= input.ind-%var3328X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x297 (ite $x43 $x143 false)))
 (let (($x284 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3328X)))
 (let (($x77 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x77 (= $x284 $x297))))))))
 ))
 (let (($x77 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x169 (= $x77 $x235)))
 (let (($x7 (= false false)))
 (let (($x237 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x160 (=> $x237 $x7)))
 (let (($x186 (= $x237 $x147)))
 (let (($x179 (and (and (and (and $x186 $x160) $x169) $x139) $x293)))
 (let (($x317 (and $x179 $x351)))
 (let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x264 (ite $x99 ?x24 (_ bv0 32))))
 (let ((?x31 (ite $x43 ?x264 (_ bv0 32))))
 (let (($x57 (= input.spec-%tmpvar-6.L2%13%d.2 ?x31)))
 (let (($x75 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x47 (=> $x75 $x57)))
 (let (($x177 (= $x75 $x85)))
 (let (($x244 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x92 (=> $x244 $x7)))
 (let (($x91 (= $x244 $x98)))
 (let (($x129 (and (and (and $x91 $x92) $x177) $x47)))
 (let (($x313 (and $x129 $x317)))
 (let (($x66 (forall ((input.ind-%var3363X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var3363X input.spec-%var-y-0)))
 (let ((?x135 (ite $x143 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x274 (ite $x43 ?x135 (_ bv0 32))))
 (let ((?x324 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3363X)))
 (let (($x174 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3363X)))
 (=> $x174 (= ?x324 ?x274))))))))))
 ))
 (let (($x83 (forall ((input.ind-%var3362X (_ BitVec 32)) )(let (($x143 (= input.ind-%var3362X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x297 (ite $x43 $x143 false)))
 (let (($x174 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3362X)))
 (= $x174 $x297))))))
 ))
 (let (($x51 (and $x83 $x66)))
 (let (($x134 (and $x51 $x313)))
 (let (($x16 (forall ((input.ind-%var3381X (_ BitVec 32)) (input.ind-%var3383X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3381X input.ind-%var3383X)))
 (let (($x291 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3381X)))
 (=> (and $x291 $x261) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3381X input.ind-%var3383X) (_ bv0 32))))))
 ))
 (let (($x308 (forall ((input.ind-%var3381X (_ BitVec 32)) (input.ind-%var3382X (_ BitVec 32)) )(let (($x291 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3381X)))
 (=> $x291 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3381X input.ind-%var3382X) false))))
 ))
 (let (($x6 (forall ((input.ind-%var3380X (_ BitVec 32)) )(let (($x127 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3380X)))
 (= $x127 false)))
 ))
 (let (($x280 (and (and $x6 $x308) $x16)))
 (let (($x117 (and $x280 $x134)))
 (let (($x60 (forall ((input.ind-%var3393X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3393X)))
 (=> $x52 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3393X) (_ bv0 32)))))
 ))
 (let (($x100 (forall ((input.ind-%var3392X (_ BitVec 32)) )(let (($x52 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3392X)))
 (= $x52 false)))
 ))
 (let (($x191 (and $x100 $x60)))
 (let (($x210 (and $x191 $x117)))
 (let (($x30 (= ?x24 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x360 (and $x30 $x210)))
 (let (($x251 (forall ((input.ind-%var3407X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var3407X input.spec-%var-y-0)))
 (let ((?x135 (ite $x143 ?x24 (_ bv0 32))))
 (let ((?x311 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3407X)))
 (let (($x343 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3407X)))
 (=> $x343 (= ?x311 ?x135))))))))
 ))
 (let (($x255 (forall ((input.ind-%var3406X (_ BitVec 32)) )(let (($x143 (= input.ind-%var3406X input.spec-%var-y-0)))
 (let (($x343 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3406X)))
 (= $x343 $x143))))
 ))
 (let (($x207 (and $x255 $x251)))
 (let (($x366 (and $x207 $x360)))
 (let (($x347 (forall ((input.ind-%var3433X (_ BitVec 32)) (input.ind-%var3435X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var3435X input.spec-%var-y-0)))
 (let ((?x135 (ite $x143 ?x24 (_ bv0 32))))
 (let (($x256 (= input.ind-%var3433X input.spec-%var-x-0)))
 (let ((?x163 (ite $x256 ?x135 (_ bv0 32))))
 (let ((?x232 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3433X input.ind-%var3435X)))
 (let (($x106 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3433X input.ind-%var3435X)))
 (let (($x22 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3433X)))
 (=> (and $x22 $x106) (= ?x232 ?x163)))))))))))
 ))
 (let (($x17 (forall ((input.ind-%var3433X (_ BitVec 32)) (input.ind-%var3434X (_ BitVec 32)) )(let (($x143 (= input.ind-%var3434X input.spec-%var-y-0)))
 (let (($x256 (= input.ind-%var3433X input.spec-%var-x-0)))
 (let (($x240 (ite $x256 $x143 false)))
 (let (($x106 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3433X input.ind-%var3434X)))
 (let (($x22 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3433X)))
 (=> $x22 (= $x106 $x240))))))))
 ))
 (let (($x289 (forall ((input.ind-%var3432X (_ BitVec 32)) )(let (($x352 (= input.ind-%var3432X input.spec-%var-x-0)))
 (let (($x136 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3432X)))
 (= $x136 $x352))))
 ))
 (let (($x355 (and (and $x289 $x17) $x347)))
 (let (($x9 (and $x355 $x366)))
 (let (($x11 (forall ((input.ind-%var3461X (_ BitVec 32)) (input.ind-%var3463X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var3463X input.spec-%var-y-0)))
 (let ((?x135 (ite $x143 ?x24 (_ bv0 32))))
 (let (($x256 (= input.ind-%var3461X input.spec-%var-x-0)))
 (let ((?x163 (ite $x256 ?x135 (_ bv0 32))))
 (let ((?x221 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3461X input.ind-%var3463X)))
 (let (($x13 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3461X input.ind-%var3463X)))
 (let (($x354 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3461X)))
 (=> (and $x354 $x13) (= ?x221 ?x163)))))))))))
 ))
 (let (($x321 (forall ((input.ind-%var3461X (_ BitVec 32)) (input.ind-%var3462X (_ BitVec 32)) )(let (($x143 (= input.ind-%var3462X input.spec-%var-y-0)))
 (let (($x256 (= input.ind-%var3461X input.spec-%var-x-0)))
 (let (($x240 (ite $x256 $x143 false)))
 (let (($x13 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3461X input.ind-%var3462X)))
 (let (($x354 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3461X)))
 (=> $x354 (= $x13 $x240))))))))
 ))
 (let (($x180 (forall ((input.ind-%var3460X (_ BitVec 32)) )(let (($x352 (= input.ind-%var3460X input.spec-%var-x-0)))
 (let (($x90 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3460X)))
 (= $x90 $x352))))
 ))
 (let (($x113 (and (and $x180 $x321) $x11)))
 (let (($x79 (and $x113 $x9)))
 (let (($x194 (and $x7 $x79)))
 (let (($x88 (= input.spec-%var-m2-0.L2%18%bbentry ?x31)))
 (let (($x350 (and $x88 $x194)))
 (let (($x86 (and $x7 $x350)))
 (let (($x115 (=> $x86 $x150)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791617/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x264 (ite $x99 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x31 (ite $x43 ?x264 (_ bv0 32))))
 (let ((?x35 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x257 (= ?x35 ?x31)))
 (let (($x170 (= $x257 true)))
 (let ((?x309 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x367 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x383 (concat ?x367 (concat ?x247 (concat ?x211 ?x309)))))
 (let (($x69 (= ?x383 input.dst.llvm-%x)))
 (let (($x84 (= $x69 true)))
 (let ((?x250 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x320 (concat ?x192 (concat ?x185 (concat ?x74 ?x250)))))
 (let (($x334 (= ?x320 input.dst.llvm-%y)))
 (let (($x371 (= $x334 true)))
 (let (($x231 (= input.dst.llvm-%y ?x320)))
 (let (($x273 (= input.dst.llvm-%x ?x383)))
 (let (($x348 (and $x273 $x231)))
 (let ((?x268 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x268)))
 (let ((?x21 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x325 (= (_ bv0 32) ?x21)))
 (let ((?x363 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x363)))
 (let ((?x282 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x312 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x282)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x18 $x312)))
 (let (($x341 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (and $x341 $x107)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x336 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x336 $x271)))
 (let (($x141 (not $x63)))
 (let (($x306 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x108 $x306)))
 (let (($x87 (and (not $x116) $x141)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x319 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x319 $x263)))
 (let (($x310 (not $x65)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (and $x39 $x131)))
 (let (($x332 (and (not $x124) $x310)))
 (let (($x259 (and (and (and (and (and (and $x332 $x87) $x41) $x10) $x218) $x19) $x325)))
 (let (($x123 (and $x259 $x188)))
 (let (($x44 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x217 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x314 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x381 (or false (or false (and (and true (or $x314 $x33)) (or $x213 $x217))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x381)))
 (let (($x173 (and (and (and $x64 $x44) $x123) $x348)))
 (let (($x374 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x198 (and $x374 $x173)))
 (let (($x329 (= $x198 true)))
 (let (($x67 (and $x329 $x371)))
 (let (($x126 (and $x67 $x84)))
 (let (($x202 (ite $x43 $x99 false)))
 (let ((?x158 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x158 (_ bv1 32))))
 (let ((?x25 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x25 (_ bv1 32))))
 (let (($x242 (and $x316 $x245)))
 (let (($x230 (and $x242 $x126)))
 (let (($x159 (forall ((input.ind-%var3579X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x136 (= input.ind-%var3579X input.spec-%var-y-0)))
 (let ((?x311 (ite $x136 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x252 (ite $x43 ?x311 (_ bv0 32))))
 (let ((?x350 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3579X)))
 (let (($x299 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3579X)))
 (let (($x304 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x304 $x299) (= ?x350 ?x252)))))))))))
 ))
 (let (($x360 (forall ((input.ind-%var3578X (_ BitVec 32)) )(let (($x136 (= input.ind-%var3578X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x40 (ite $x43 $x136 false)))
 (let (($x299 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3578X)))
 (let (($x304 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x304 (= $x299 $x40))))))))
 ))
 (let (($x304 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x105 (= $x304 $x316)))
 (let (($x7 (= false false)))
 (let (($x376 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x153 (=> $x376 $x7)))
 (let (($x215 (= ?x25 (_ bv0 32))))
 (let (($x222 (= $x376 $x215)))
 (let (($x338 (and (and (and (and $x222 $x153) $x105) $x360) $x159)))
 (let (($x172 (and $x338 $x230)))
 (let (($x365 (= input.spec-%tmpvar-6.L2%13%d.2 ?x31)))
 (let (($x372 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x375 (=> $x372 $x365)))
 (let (($x46 (= $x372 $x245)))
 (let (($x204 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x54 (=> $x204 $x7)))
 (let (($x286 (= ?x158 (_ bv0 32))))
 (let (($x246 (= $x204 $x286)))
 (let (($x164 (and (and (and $x246 $x54) $x46) $x375)))
 (let (($x121 (and $x164 $x172)))
 (let (($x193 (forall ((input.ind-%var3613X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x136 (= input.ind-%var3613X input.spec-%var-y-0)))
 (let ((?x311 (ite $x136 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x252 (ite $x43 ?x311 (_ bv0 32))))
 (let ((?x132 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3613X)))
 (let (($x149 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3613X)))
 (=> $x149 (= ?x132 ?x252))))))))))
 ))
 (let (($x162 (forall ((input.ind-%var3612X (_ BitVec 32)) )(let (($x136 (= input.ind-%var3612X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x40 (ite $x43 $x136 false)))
 (let (($x149 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3612X)))
 (= $x149 $x40))))))
 ))
 (let (($x226 (and $x162 $x193)))
 (let (($x15 (and $x226 $x121)))
 (let (($x110 (forall ((input.ind-%var3631X (_ BitVec 32)) (input.ind-%var3633X (_ BitVec 32)) )(let (($x368 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3631X input.ind-%var3633X)))
 (let (($x379 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3631X)))
 (=> (and $x379 $x368) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3631X input.ind-%var3633X) (_ bv0 32))))))
 ))
 (let (($x328 (forall ((input.ind-%var3631X (_ BitVec 32)) (input.ind-%var3632X (_ BitVec 32)) )(let (($x379 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3631X)))
 (=> $x379 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3631X input.ind-%var3632X) false))))
 ))
 (let (($x165 (forall ((input.ind-%var3630X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3630X)))
 (= $x353 false)))
 ))
 (let (($x302 (and (and $x165 $x328) $x110)))
 (let (($x219 (and $x302 $x15)))
 (let (($x277 (forall ((input.ind-%var3643X (_ BitVec 32)) )(let (($x333 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3643X)))
 (=> $x333 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3643X) (_ bv0 32)))))
 ))
 (let (($x293 (forall ((input.ind-%var3642X (_ BitVec 32)) )(let (($x333 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3642X)))
 (= $x333 false)))
 ))
 (let (($x260 (and $x293 $x277)))
 (let (($x220 (and $x260 $x219)))
 (let (($x300 (= ?x24 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x382 (and $x300 $x220)))
 (let (($x234 (forall ((input.ind-%var3657X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x136 (= input.ind-%var3657X input.spec-%var-y-0)))
 (let ((?x311 (ite $x136 ?x24 (_ bv0 32))))
 (let ((?x248 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3657X)))
 (let (($x85 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3657X)))
 (=> $x85 (= ?x248 ?x311))))))))
 ))
 (let (($x47 (forall ((input.ind-%var3656X (_ BitVec 32)) )(let (($x136 (= input.ind-%var3656X input.spec-%var-y-0)))
 (let (($x85 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3656X)))
 (= $x85 $x136))))
 ))
 (let (($x284 (and $x47 $x234)))
 (let (($x49 (and $x284 $x382)))
 (let (($x98 (forall ((input.ind-%var3683X (_ BitVec 32)) (input.ind-%var3685X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x136 (= input.ind-%var3685X input.spec-%var-y-0)))
 (let ((?x311 (ite $x136 ?x24 (_ bv0 32))))
 (let (($x358 (= input.ind-%var3683X input.spec-%var-x-0)))
 (let ((?x208 (ite $x358 ?x311 (_ bv0 32))))
 (let ((?x274 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3683X input.ind-%var3685X)))
 (let (($x266 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3683X input.ind-%var3685X)))
 (let (($x16 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3683X)))
 (=> (and $x16 $x266) (= ?x274 ?x208)))))))))))
 ))
 (let (($x174 (forall ((input.ind-%var3683X (_ BitVec 32)) (input.ind-%var3684X (_ BitVec 32)) )(let (($x136 (= input.ind-%var3684X input.spec-%var-y-0)))
 (let (($x358 (= input.ind-%var3683X input.spec-%var-x-0)))
 (let (($x289 (ite $x358 $x136 false)))
 (let (($x266 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3683X input.ind-%var3684X)))
 (let (($x16 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3683X)))
 (=> $x16 (= $x266 $x289))))))))
 ))
 (let (($x127 (forall ((input.ind-%var3682X (_ BitVec 32)) )(let (($x13 (= input.ind-%var3682X input.spec-%var-x-0)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3682X)))
 (= $x290 $x13))))
 ))
 (let (($x92 (and (and $x127 $x174) $x98)))
 (let (($x227 (and $x92 $x49)))
 (let (($x55 (forall ((input.ind-%var3711X (_ BitVec 32)) (input.ind-%var3713X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x136 (= input.ind-%var3713X input.spec-%var-y-0)))
 (let ((?x311 (ite $x136 ?x24 (_ bv0 32))))
 (let (($x358 (= input.ind-%var3711X input.spec-%var-x-0)))
 (let ((?x208 (ite $x358 ?x311 (_ bv0 32))))
 (let ((?x146 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3711X input.ind-%var3713X)))
 (let (($x221 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3711X input.ind-%var3713X)))
 (let (($x106 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3711X)))
 (=> (and $x106 $x221) (= ?x146 ?x208)))))))))))
 ))
 (let (($x48 (forall ((input.ind-%var3711X (_ BitVec 32)) (input.ind-%var3712X (_ BitVec 32)) )(let (($x136 (= input.ind-%var3712X input.spec-%var-y-0)))
 (let (($x358 (= input.ind-%var3711X input.spec-%var-x-0)))
 (let (($x289 (ite $x358 $x136 false)))
 (let (($x221 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3711X input.ind-%var3712X)))
 (let (($x106 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3711X)))
 (=> $x106 (= $x221 $x289))))))))
 ))
 (let (($x143 (forall ((input.ind-%var3710X (_ BitVec 32)) )(let (($x13 (= input.ind-%var3710X input.spec-%var-x-0)))
 (let (($x243 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3710X)))
 (= $x243 $x13))))
 ))
 (let (($x52 (and (and $x143 $x48) $x55)))
 (let (($x267 (and $x52 $x227)))
 (let (($x187 (and $x7 $x267)))
 (let (($x88 (= input.spec-%var-m2-0.L2%18%bbentry ?x31)))
 (let (($x118 (and $x88 $x187)))
 (let (($x171 (and $x7 $x118)))
 (let (($x97 (=> $x171 $x170)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x264 (ite $x99 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x31 (ite $x43 ?x264 (_ bv0 32))))
 (let ((?x35 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x257 (= ?x35 ?x31)))
 (let (($x170 (= $x257 true)))
 (let ((?x309 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x367 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x383 (concat ?x367 (concat ?x247 (concat ?x211 ?x309)))))
 (let (($x69 (= ?x383 input.dst.llvm-%x)))
 (let (($x84 (= $x69 true)))
 (let ((?x250 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x320 (concat ?x192 (concat ?x185 (concat ?x74 ?x250)))))
 (let (($x334 (= ?x320 input.dst.llvm-%y)))
 (let (($x371 (= $x334 true)))
 (let (($x231 (= input.dst.llvm-%y ?x320)))
 (let (($x273 (= input.dst.llvm-%x ?x383)))
 (let (($x348 (and $x273 $x231)))
 (let ((?x268 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x268)))
 (let ((?x21 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x325 (= (_ bv0 32) ?x21)))
 (let ((?x363 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x363)))
 (let ((?x282 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x312 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x282)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x18 $x312)))
 (let (($x341 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (and $x341 $x107)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x336 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x336 $x271)))
 (let (($x141 (not $x63)))
 (let (($x306 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x108 $x306)))
 (let (($x87 (and (not $x116) $x141)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x319 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x319 $x263)))
 (let (($x310 (not $x65)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (and $x39 $x131)))
 (let (($x332 (and (not $x124) $x310)))
 (let (($x259 (and (and (and (and (and (and $x332 $x87) $x41) $x10) $x218) $x19) $x325)))
 (let (($x123 (and $x259 $x188)))
 (let (($x44 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x217 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x314 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x381 (or false (or false (and (and true (or $x314 $x33)) (or $x213 $x217))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x381)))
 (let (($x173 (and (and (and $x64 $x44) $x123) $x348)))
 (let (($x374 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x198 (and $x374 $x173)))
 (let (($x329 (= $x198 true)))
 (let (($x67 (and $x329 $x371)))
 (let (($x126 (and $x67 $x84)))
 (let (($x202 (ite $x43 $x99 false)))
 (let ((?x158 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x158 (_ bv1 32))))
 (let ((?x25 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x25 (_ bv1 32))))
 (let (($x242 (and $x316 $x245)))
 (let (($x230 (and $x242 $x126)))
 (let (($x159 (forall ((input.ind-%var3579X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x136 (= input.ind-%var3579X input.spec-%var-y-0)))
 (let ((?x311 (ite $x136 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x252 (ite $x43 ?x311 (_ bv0 32))))
 (let ((?x350 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3579X)))
 (let (($x299 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3579X)))
 (let (($x304 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x304 $x299) (= ?x350 ?x252)))))))))))
 ))
 (let (($x360 (forall ((input.ind-%var3578X (_ BitVec 32)) )(let (($x136 (= input.ind-%var3578X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x40 (ite $x43 $x136 false)))
 (let (($x299 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3578X)))
 (let (($x304 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x304 (= $x299 $x40))))))))
 ))
 (let (($x304 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x105 (= $x304 $x316)))
 (let (($x7 (= false false)))
 (let (($x376 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x153 (=> $x376 $x7)))
 (let (($x215 (= ?x25 (_ bv0 32))))
 (let (($x222 (= $x376 $x215)))
 (let (($x338 (and (and (and (and $x222 $x153) $x105) $x360) $x159)))
 (let (($x172 (and $x338 $x230)))
 (let (($x365 (= input.spec-%tmpvar-6.L2%13%d.2 ?x31)))
 (let (($x372 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x375 (=> $x372 $x365)))
 (let (($x46 (= $x372 $x245)))
 (let (($x204 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x54 (=> $x204 $x7)))
 (let (($x286 (= ?x158 (_ bv0 32))))
 (let (($x246 (= $x204 $x286)))
 (let (($x164 (and (and (and $x246 $x54) $x46) $x375)))
 (let (($x121 (and $x164 $x172)))
 (let (($x193 (forall ((input.ind-%var3613X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x136 (= input.ind-%var3613X input.spec-%var-y-0)))
 (let ((?x311 (ite $x136 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x252 (ite $x43 ?x311 (_ bv0 32))))
 (let ((?x132 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3613X)))
 (let (($x149 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3613X)))
 (=> $x149 (= ?x132 ?x252))))))))))
 ))
 (let (($x162 (forall ((input.ind-%var3612X (_ BitVec 32)) )(let (($x136 (= input.ind-%var3612X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x40 (ite $x43 $x136 false)))
 (let (($x149 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3612X)))
 (= $x149 $x40))))))
 ))
 (let (($x226 (and $x162 $x193)))
 (let (($x15 (and $x226 $x121)))
 (let (($x110 (forall ((input.ind-%var3631X (_ BitVec 32)) (input.ind-%var3633X (_ BitVec 32)) )(let (($x368 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3631X input.ind-%var3633X)))
 (let (($x379 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3631X)))
 (=> (and $x379 $x368) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3631X input.ind-%var3633X) (_ bv0 32))))))
 ))
 (let (($x328 (forall ((input.ind-%var3631X (_ BitVec 32)) (input.ind-%var3632X (_ BitVec 32)) )(let (($x379 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3631X)))
 (=> $x379 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3631X input.ind-%var3632X) false))))
 ))
 (let (($x165 (forall ((input.ind-%var3630X (_ BitVec 32)) )(let (($x353 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3630X)))
 (= $x353 false)))
 ))
 (let (($x302 (and (and $x165 $x328) $x110)))
 (let (($x219 (and $x302 $x15)))
 (let (($x277 (forall ((input.ind-%var3643X (_ BitVec 32)) )(let (($x333 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3643X)))
 (=> $x333 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3643X) (_ bv0 32)))))
 ))
 (let (($x293 (forall ((input.ind-%var3642X (_ BitVec 32)) )(let (($x333 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3642X)))
 (= $x333 false)))
 ))
 (let (($x260 (and $x293 $x277)))
 (let (($x220 (and $x260 $x219)))
 (let (($x300 (= ?x24 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x382 (and $x300 $x220)))
 (let (($x234 (forall ((input.ind-%var3657X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x136 (= input.ind-%var3657X input.spec-%var-y-0)))
 (let ((?x311 (ite $x136 ?x24 (_ bv0 32))))
 (let ((?x248 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3657X)))
 (let (($x85 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3657X)))
 (=> $x85 (= ?x248 ?x311))))))))
 ))
 (let (($x47 (forall ((input.ind-%var3656X (_ BitVec 32)) )(let (($x136 (= input.ind-%var3656X input.spec-%var-y-0)))
 (let (($x85 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3656X)))
 (= $x85 $x136))))
 ))
 (let (($x284 (and $x47 $x234)))
 (let (($x49 (and $x284 $x382)))
 (let (($x98 (forall ((input.ind-%var3683X (_ BitVec 32)) (input.ind-%var3685X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x136 (= input.ind-%var3685X input.spec-%var-y-0)))
 (let ((?x311 (ite $x136 ?x24 (_ bv0 32))))
 (let (($x358 (= input.ind-%var3683X input.spec-%var-x-0)))
 (let ((?x208 (ite $x358 ?x311 (_ bv0 32))))
 (let ((?x274 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3683X input.ind-%var3685X)))
 (let (($x266 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3683X input.ind-%var3685X)))
 (let (($x16 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3683X)))
 (=> (and $x16 $x266) (= ?x274 ?x208)))))))))))
 ))
 (let (($x174 (forall ((input.ind-%var3683X (_ BitVec 32)) (input.ind-%var3684X (_ BitVec 32)) )(let (($x136 (= input.ind-%var3684X input.spec-%var-y-0)))
 (let (($x358 (= input.ind-%var3683X input.spec-%var-x-0)))
 (let (($x289 (ite $x358 $x136 false)))
 (let (($x266 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3683X input.ind-%var3684X)))
 (let (($x16 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3683X)))
 (=> $x16 (= $x266 $x289))))))))
 ))
 (let (($x127 (forall ((input.ind-%var3682X (_ BitVec 32)) )(let (($x13 (= input.ind-%var3682X input.spec-%var-x-0)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3682X)))
 (= $x290 $x13))))
 ))
 (let (($x92 (and (and $x127 $x174) $x98)))
 (let (($x227 (and $x92 $x49)))
 (let (($x55 (forall ((input.ind-%var3711X (_ BitVec 32)) (input.ind-%var3713X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x136 (= input.ind-%var3713X input.spec-%var-y-0)))
 (let ((?x311 (ite $x136 ?x24 (_ bv0 32))))
 (let (($x358 (= input.ind-%var3711X input.spec-%var-x-0)))
 (let ((?x208 (ite $x358 ?x311 (_ bv0 32))))
 (let ((?x146 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3711X input.ind-%var3713X)))
 (let (($x221 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3711X input.ind-%var3713X)))
 (let (($x106 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3711X)))
 (=> (and $x106 $x221) (= ?x146 ?x208)))))))))))
 ))
 (let (($x48 (forall ((input.ind-%var3711X (_ BitVec 32)) (input.ind-%var3712X (_ BitVec 32)) )(let (($x136 (= input.ind-%var3712X input.spec-%var-y-0)))
 (let (($x358 (= input.ind-%var3711X input.spec-%var-x-0)))
 (let (($x289 (ite $x358 $x136 false)))
 (let (($x221 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3711X input.ind-%var3712X)))
 (let (($x106 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3711X)))
 (=> $x106 (= $x221 $x289))))))))
 ))
 (let (($x143 (forall ((input.ind-%var3710X (_ BitVec 32)) )(let (($x13 (= input.ind-%var3710X input.spec-%var-x-0)))
 (let (($x243 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3710X)))
 (= $x243 $x13))))
 ))
 (let (($x52 (and (and $x143 $x48) $x55)))
 (let (($x267 (and $x52 $x227)))
 (let (($x187 (and $x7 $x267)))
 (let (($x88 (= input.spec-%var-m2-0.L2%18%bbentry ?x31)))
 (let (($x118 (and $x88 $x187)))
 (let (($x171 (and $x7 $x118)))
 (let (($x97 (=> $x171 $x170)))
 (not $x97)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791617/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x357 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x113 (= input.spec-%var-y-0 ?x357)))
 (let (($x359 (= $x113 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x278 (concat ?x240 (concat ?x94 (concat ?x160 ?x56)))))
 (let (($x17 (= ?x278 input.dst.llvm-%x)))
 (let (($x163 (= $x17 true)))
 (let ((?x249 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x261 (concat ?x66 (concat ?x58 (concat ?x308 ?x249)))))
 (let (($x377 (= ?x261 input.dst.llvm-%y)))
 (let (($x182 (= $x377 true)))
 (let (($x102 (= input.dst.llvm-%y ?x261)))
 (let (($x6 (= input.dst.llvm-%x ?x278)))
 (let (($x51 (and $x6 $x102)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x23)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x199)))
 (let ((?x373 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x373)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x9 $x62)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (and $x68 $x89)))
 (let (($x331 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x154 $x317)))
 (let (($x38 (not $x59)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x73 $x76)))
 (let (($x313 (and (not $x109) $x38)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x351 (and $x194 $x233)))
 (let (($x148 (not $x351)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x120 $x12)))
 (let (($x72 (and (not $x32) $x148)))
 (let (($x175 (and (and (and (and (and (and $x72 $x313) $x295) $x331) $x228) $x330) $x200)))
 (let (($x129 (and $x175 $x155)))
 (let (($x305 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x307 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x45 (or false (or false (and (and true (or $x318 $x307)) (or $x184 $x139))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x45)))
 (let (($x291 (and (and (and $x140 $x305) $x129) $x51)))
 (let (($x298 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x362 (and $x298 $x291)))
 (let (($x321 (= $x362 true)))
 (let (($x14 (and $x321 $x182)))
 (let (($x5 (and $x14 $x163)))
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x367 (ite $x43 $x99 false)))
 (let ((?x229 (ite $x367 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x229 (_ bv0 32))))
 (let ((?x250 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x250 (_ bv1 32))))
 (let (($x8 (and $x348 $x247)))
 (let (($x83 (and $x8 $x5)))
 (let (($x349 (forall ((input.ind-%var3823X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x290 (= input.ind-%var3823X input.spec-%var-y-0)))
 (let ((?x248 (ite $x290 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x259 (ite $x43 ?x248 (_ bv0 32))))
 (let ((?x49 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3823X)))
 (let (($x334 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3823X)))
 (let (($x231 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x231 $x334) (= ?x49 ?x259)))))))))))
 ))
 (let (($x121 (forall ((input.ind-%var3822X (_ BitVec 32)) )(let (($x290 (= input.ind-%var3822X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x341 (ite $x43 $x290 false)))
 (let (($x334 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3822X)))
 (let (($x231 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x231 (= $x334 $x341))))))))
 ))
 (let (($x231 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x173 (= $x231 $x348)))
 (let (($x7 (= false false)))
 (let (($x74 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x320 (=> $x74 $x7)))
 (let (($x142 (= ?x250 (_ bv0 32))))
 (let (($x339 (= $x74 $x142)))
 (let (($x253 (and (and (and (and $x339 $x320) $x173) $x121) $x349)))
 (let (($x244 (and $x253 $x83)))
 (let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x264 (ite $x99 ?x24 (_ bv0 32))))
 (let ((?x31 (ite $x43 ?x264 (_ bv0 32))))
 (let (($x273 (= input.spec-%tmpvar-6.L2%13%d.2 ?x31)))
 (let (($x309 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x195 (=> $x309 $x273)))
 (let (($x137 (bvuge ?x229 (_ bv1 32))))
 (let (($x156 (= $x309 $x137)))
 (let (($x292 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x211 (=> $x292 $x7)))
 (let (($x337 (= $x292 $x247)))
 (let (($x185 (and (and (and $x337 $x211) $x156) $x195)))
 (let (($x90 (and $x185 $x244)))
 (let (($x123 (forall ((input.ind-%var3857X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x290 (= input.ind-%var3857X input.spec-%var-y-0)))
 (let ((?x248 (ite $x290 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x259 (ite $x43 ?x248 (_ bv0 32))))
 (let ((?x218 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3857X)))
 (let (($x41 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3857X)))
 (=> $x41 (= ?x218 ?x259))))))))))
 ))
 (let (($x283 (forall ((input.ind-%var3856X (_ BitVec 32)) )(let (($x290 (= input.ind-%var3856X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x341 (ite $x43 $x290 false)))
 (let (($x41 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3856X)))
 (= $x41 $x341))))))
 ))
 (let (($x27 (and $x283 $x123)))
 (let (($x354 (and $x27 $x90)))
 (let (($x63 (forall ((input.ind-%var3875X (_ BitVec 32)) (input.ind-%var3877X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3875X input.ind-%var3877X)))
 (let (($x131 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3875X)))
 (=> (and $x131 $x64) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3875X input.ind-%var3877X) (_ bv0 32))))))
 ))
 (let (($x344 (forall ((input.ind-%var3875X (_ BitVec 32)) (input.ind-%var3876X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3875X)))
 (=> $x131 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3875X input.ind-%var3876X) false))))
 ))
 (let (($x217 (forall ((input.ind-%var3874X (_ BitVec 32)) )(let (($x340 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3874X)))
 (= $x340 false)))
 ))
 (let (($x87 (and (and $x217 $x344) $x63)))
 (let (($x36 (and $x87 $x354)))
 (let (($x314 (forall ((input.ind-%var3887X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3887X)))
 (=> $x111 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3887X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var3886X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3886X)))
 (= $x111 false)))
 ))
 (let (($x138 (and $x159 $x314)))
 (let (($x78 (and $x138 $x36)))
 (let (($x210 (= ?x24 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x347 (and $x210 $x78)))
 (let (($x203 (forall ((input.ind-%var3901X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x290 (= input.ind-%var3901X input.spec-%var-y-0)))
 (let ((?x248 (ite $x290 ?x24 (_ bv0 32))))
 (let ((?x25 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3901X)))
 (let (($x245 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3901X)))
 (=> $x245 (= ?x25 ?x248))))))))
 ))
 (let (($x375 (forall ((input.ind-%var3900X (_ BitVec 32)) )(let (($x290 (= input.ind-%var3900X input.spec-%var-y-0)))
 (let (($x245 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3900X)))
 (= $x245 $x290))))
 ))
 (let (($x299 (and $x375 $x203)))
 (let (($x355 (and $x299 $x347)))
 (let (($x286 (forall ((input.ind-%var3927X (_ BitVec 32)) (input.ind-%var3929X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x290 (= input.ind-%var3929X input.spec-%var-y-0)))
 (let ((?x248 (ite $x290 ?x24 (_ bv0 32))))
 (let (($x191 (= input.ind-%var3927X input.spec-%var-x-0)))
 (let ((?x235 (ite $x191 ?x248 (_ bv0 32))))
 (let ((?x252 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3927X input.ind-%var3929X)))
 (let (($x181 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3927X input.ind-%var3929X)))
 (let (($x110 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3927X)))
 (=> (and $x110 $x181) (= ?x252 ?x235)))))))))))
 ))
 (let (($x149 (forall ((input.ind-%var3927X (_ BitVec 32)) (input.ind-%var3928X (_ BitVec 32)) )(let (($x290 (= input.ind-%var3928X input.spec-%var-y-0)))
 (let (($x191 (= input.ind-%var3927X input.spec-%var-x-0)))
 (let (($x127 (ite $x191 $x290 false)))
 (let (($x181 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3927X input.ind-%var3928X)))
 (let (($x110 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3927X)))
 (=> $x110 (= $x181 $x127))))))))
 ))
 (let (($x353 (forall ((input.ind-%var3926X (_ BitVec 32)) )(let (($x221 (= input.ind-%var3926X input.spec-%var-x-0)))
 (let (($x380 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3926X)))
 (= $x380 $x221))))
 ))
 (let (($x54 (and (and $x353 $x149) $x286)))
 (let (($x61 (and $x54 $x355)))
 (let (($x71 (forall ((input.ind-%var3955X (_ BitVec 32)) (input.ind-%var3957X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x290 (= input.ind-%var3957X input.spec-%var-y-0)))
 (let ((?x248 (ite $x290 ?x24 (_ bv0 32))))
 (let (($x191 (= input.ind-%var3955X input.spec-%var-x-0)))
 (let ((?x235 (ite $x191 ?x248 (_ bv0 32))))
 (let ((?x28 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3955X input.ind-%var3957X)))
 (let (($x146 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3955X input.ind-%var3957X)))
 (let (($x266 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3955X)))
 (=> (and $x266 $x146) (= ?x28 ?x235)))))))))))
 ))
 (let (($x280 (forall ((input.ind-%var3955X (_ BitVec 32)) (input.ind-%var3956X (_ BitVec 32)) )(let (($x290 (= input.ind-%var3956X input.spec-%var-y-0)))
 (let (($x191 (= input.ind-%var3955X input.spec-%var-x-0)))
 (let (($x127 (ite $x191 $x290 false)))
 (let (($x146 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3955X input.ind-%var3956X)))
 (let (($x266 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3955X)))
 (=> $x266 (= $x146 $x127))))))))
 ))
 (let (($x136 (forall ((input.ind-%var3954X (_ BitVec 32)) )(let (($x221 (= input.ind-%var3954X input.spec-%var-x-0)))
 (let (($x256 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3954X)))
 (= $x256 $x221))))
 ))
 (let (($x333 (and (and $x136 $x280) $x71)))
 (let (($x11 (and $x333 $x61)))
 (let (($x343 (and $x7 $x11)))
 (let (($x88 (= input.spec-%var-m2-0.L2%18%bbentry ?x31)))
 (let (($x232 (and $x88 $x343)))
 (let (($x275 (and $x7 $x232)))
 (let (($x346 (=> $x275 $x359)))
 (not $x346)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x357 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x113 (= input.spec-%var-y-0 ?x357)))
 (let (($x359 (= $x113 true)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x278 (concat ?x240 (concat ?x94 (concat ?x160 ?x56)))))
 (let (($x17 (= ?x278 input.dst.llvm-%x)))
 (let (($x163 (= $x17 true)))
 (let ((?x249 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x261 (concat ?x66 (concat ?x58 (concat ?x308 ?x249)))))
 (let (($x377 (= ?x261 input.dst.llvm-%y)))
 (let (($x182 (= $x377 true)))
 (let (($x102 (= input.dst.llvm-%y ?x261)))
 (let (($x6 (= input.dst.llvm-%x ?x278)))
 (let (($x51 (and $x6 $x102)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x23)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x199)))
 (let ((?x373 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x373)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x9 $x62)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (and $x68 $x89)))
 (let (($x331 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x154 $x317)))
 (let (($x38 (not $x59)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x73 $x76)))
 (let (($x313 (and (not $x109) $x38)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x351 (and $x194 $x233)))
 (let (($x148 (not $x351)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x120 $x12)))
 (let (($x72 (and (not $x32) $x148)))
 (let (($x175 (and (and (and (and (and (and $x72 $x313) $x295) $x331) $x228) $x330) $x200)))
 (let (($x129 (and $x175 $x155)))
 (let (($x305 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x307 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x45 (or false (or false (and (and true (or $x318 $x307)) (or $x184 $x139))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x45)))
 (let (($x291 (and (and (and $x140 $x305) $x129) $x51)))
 (let (($x298 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x362 (and $x298 $x291)))
 (let (($x321 (= $x362 true)))
 (let (($x14 (and $x321 $x182)))
 (let (($x5 (and $x14 $x163)))
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x367 (ite $x43 $x99 false)))
 (let ((?x229 (ite $x367 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x229 (_ bv0 32))))
 (let ((?x250 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x250 (_ bv1 32))))
 (let (($x8 (and $x348 $x247)))
 (let (($x83 (and $x8 $x5)))
 (let (($x349 (forall ((input.ind-%var3823X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x290 (= input.ind-%var3823X input.spec-%var-y-0)))
 (let ((?x248 (ite $x290 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x259 (ite $x43 ?x248 (_ bv0 32))))
 (let ((?x49 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3823X)))
 (let (($x334 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3823X)))
 (let (($x231 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x231 $x334) (= ?x49 ?x259)))))))))))
 ))
 (let (($x121 (forall ((input.ind-%var3822X (_ BitVec 32)) )(let (($x290 (= input.ind-%var3822X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x341 (ite $x43 $x290 false)))
 (let (($x334 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3822X)))
 (let (($x231 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x231 (= $x334 $x341))))))))
 ))
 (let (($x231 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x173 (= $x231 $x348)))
 (let (($x7 (= false false)))
 (let (($x74 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x320 (=> $x74 $x7)))
 (let (($x142 (= ?x250 (_ bv0 32))))
 (let (($x339 (= $x74 $x142)))
 (let (($x253 (and (and (and (and $x339 $x320) $x173) $x121) $x349)))
 (let (($x244 (and $x253 $x83)))
 (let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x264 (ite $x99 ?x24 (_ bv0 32))))
 (let ((?x31 (ite $x43 ?x264 (_ bv0 32))))
 (let (($x273 (= input.spec-%tmpvar-6.L2%13%d.2 ?x31)))
 (let (($x309 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x195 (=> $x309 $x273)))
 (let (($x137 (bvuge ?x229 (_ bv1 32))))
 (let (($x156 (= $x309 $x137)))
 (let (($x292 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x211 (=> $x292 $x7)))
 (let (($x337 (= $x292 $x247)))
 (let (($x185 (and (and (and $x337 $x211) $x156) $x195)))
 (let (($x90 (and $x185 $x244)))
 (let (($x123 (forall ((input.ind-%var3857X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x290 (= input.ind-%var3857X input.spec-%var-y-0)))
 (let ((?x248 (ite $x290 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x259 (ite $x43 ?x248 (_ bv0 32))))
 (let ((?x218 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3857X)))
 (let (($x41 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3857X)))
 (=> $x41 (= ?x218 ?x259))))))))))
 ))
 (let (($x283 (forall ((input.ind-%var3856X (_ BitVec 32)) )(let (($x290 (= input.ind-%var3856X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x341 (ite $x43 $x290 false)))
 (let (($x41 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3856X)))
 (= $x41 $x341))))))
 ))
 (let (($x27 (and $x283 $x123)))
 (let (($x354 (and $x27 $x90)))
 (let (($x63 (forall ((input.ind-%var3875X (_ BitVec 32)) (input.ind-%var3877X (_ BitVec 32)) )(let (($x64 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3875X input.ind-%var3877X)))
 (let (($x131 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3875X)))
 (=> (and $x131 $x64) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3875X input.ind-%var3877X) (_ bv0 32))))))
 ))
 (let (($x344 (forall ((input.ind-%var3875X (_ BitVec 32)) (input.ind-%var3876X (_ BitVec 32)) )(let (($x131 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3875X)))
 (=> $x131 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3875X input.ind-%var3876X) false))))
 ))
 (let (($x217 (forall ((input.ind-%var3874X (_ BitVec 32)) )(let (($x340 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3874X)))
 (= $x340 false)))
 ))
 (let (($x87 (and (and $x217 $x344) $x63)))
 (let (($x36 (and $x87 $x354)))
 (let (($x314 (forall ((input.ind-%var3887X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3887X)))
 (=> $x111 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3887X) (_ bv0 32)))))
 ))
 (let (($x159 (forall ((input.ind-%var3886X (_ BitVec 32)) )(let (($x111 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3886X)))
 (= $x111 false)))
 ))
 (let (($x138 (and $x159 $x314)))
 (let (($x78 (and $x138 $x36)))
 (let (($x210 (= ?x24 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x347 (and $x210 $x78)))
 (let (($x203 (forall ((input.ind-%var3901X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x290 (= input.ind-%var3901X input.spec-%var-y-0)))
 (let ((?x248 (ite $x290 ?x24 (_ bv0 32))))
 (let ((?x25 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3901X)))
 (let (($x245 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3901X)))
 (=> $x245 (= ?x25 ?x248))))))))
 ))
 (let (($x375 (forall ((input.ind-%var3900X (_ BitVec 32)) )(let (($x290 (= input.ind-%var3900X input.spec-%var-y-0)))
 (let (($x245 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3900X)))
 (= $x245 $x290))))
 ))
 (let (($x299 (and $x375 $x203)))
 (let (($x355 (and $x299 $x347)))
 (let (($x286 (forall ((input.ind-%var3927X (_ BitVec 32)) (input.ind-%var3929X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x290 (= input.ind-%var3929X input.spec-%var-y-0)))
 (let ((?x248 (ite $x290 ?x24 (_ bv0 32))))
 (let (($x191 (= input.ind-%var3927X input.spec-%var-x-0)))
 (let ((?x235 (ite $x191 ?x248 (_ bv0 32))))
 (let ((?x252 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3927X input.ind-%var3929X)))
 (let (($x181 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3927X input.ind-%var3929X)))
 (let (($x110 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3927X)))
 (=> (and $x110 $x181) (= ?x252 ?x235)))))))))))
 ))
 (let (($x149 (forall ((input.ind-%var3927X (_ BitVec 32)) (input.ind-%var3928X (_ BitVec 32)) )(let (($x290 (= input.ind-%var3928X input.spec-%var-y-0)))
 (let (($x191 (= input.ind-%var3927X input.spec-%var-x-0)))
 (let (($x127 (ite $x191 $x290 false)))
 (let (($x181 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3927X input.ind-%var3928X)))
 (let (($x110 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3927X)))
 (=> $x110 (= $x181 $x127))))))))
 ))
 (let (($x353 (forall ((input.ind-%var3926X (_ BitVec 32)) )(let (($x221 (= input.ind-%var3926X input.spec-%var-x-0)))
 (let (($x380 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3926X)))
 (= $x380 $x221))))
 ))
 (let (($x54 (and (and $x353 $x149) $x286)))
 (let (($x61 (and $x54 $x355)))
 (let (($x71 (forall ((input.ind-%var3955X (_ BitVec 32)) (input.ind-%var3957X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x290 (= input.ind-%var3957X input.spec-%var-y-0)))
 (let ((?x248 (ite $x290 ?x24 (_ bv0 32))))
 (let (($x191 (= input.ind-%var3955X input.spec-%var-x-0)))
 (let ((?x235 (ite $x191 ?x248 (_ bv0 32))))
 (let ((?x28 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3955X input.ind-%var3957X)))
 (let (($x146 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3955X input.ind-%var3957X)))
 (let (($x266 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3955X)))
 (=> (and $x266 $x146) (= ?x28 ?x235)))))))))))
 ))
 (let (($x280 (forall ((input.ind-%var3955X (_ BitVec 32)) (input.ind-%var3956X (_ BitVec 32)) )(let (($x290 (= input.ind-%var3956X input.spec-%var-y-0)))
 (let (($x191 (= input.ind-%var3955X input.spec-%var-x-0)))
 (let (($x127 (ite $x191 $x290 false)))
 (let (($x146 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3955X input.ind-%var3956X)))
 (let (($x266 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3955X)))
 (=> $x266 (= $x146 $x127))))))))
 ))
 (let (($x136 (forall ((input.ind-%var3954X (_ BitVec 32)) )(let (($x221 (= input.ind-%var3954X input.spec-%var-x-0)))
 (let (($x256 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3954X)))
 (= $x256 $x221))))
 ))
 (let (($x333 (and (and $x136 $x280) $x71)))
 (let (($x11 (and $x333 $x61)))
 (let (($x343 (and $x7 $x11)))
 (let (($x88 (= input.spec-%var-m2-0.L2%18%bbentry ?x31)))
 (let (($x232 (and $x88 $x343)))
 (let (($x275 (and $x7 $x232)))
 (let (($x346 (=> $x275 $x359)))
 (not $x346)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791617/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x57 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x53 (= input.spec-%var-x-0 ?x57)))
 (let (($x52 (= $x53 true)))
 (let ((?x212 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x289 (concat ?x103 (concat ?x265 (concat ?x222 ?x212)))))
 (let (($x296 (= ?x289 input.dst.llvm-%x)))
 (let (($x174 (= $x296 true)))
 (let ((?x262 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x193 (concat ?x205 (concat ?x277 (concat ?x40 ?x262)))))
 (let (($x48 (= ?x193 input.dst.llvm-%y)))
 (let (($x22 (= $x48 true)))
 (let (($x368 (= input.dst.llvm-%y ?x193)))
 (let (($x366 (= input.dst.llvm-%x ?x289)))
 (let (($x190 (and $x366 $x368)))
 (let ((?x310 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x306 (= (_ bv0 32) ?x310)))
 (let ((?x312 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x325 (= (_ bv0 32) ?x312)))
 (let ((?x381 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x381)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x239 (and $x294 $x35)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (and $x272 $x239)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x319 $x10)))
 (let (($x187 (not $x69)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x152 $x213)))
 (let (($x329 (and (not $x267) $x187)))
 (let (($x382 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x378 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (and $x378 $x382)))
 (let (($x67 (not $x198)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x224 $x107)))
 (let (($x33 (and (not $x20) $x67)))
 (let (($x116 (and (and (and (and (and (and $x33 $x329) $x126) $x171) $x21) $x44) $x325)))
 (let (($x301 (and $x116 $x306)))
 (let (($x326 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x281 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x215 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x338 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x215)))
 (let (($x216 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x335 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x282 (or false (or false (and (and true (or $x335 $x216)) (or $x338 $x281))))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x282)))
 (let (($x144 (and (and (and $x104 $x326) $x301) $x190)))
 (let (($x227 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x379 (and $x227 $x144)))
 (let (($x157 (= $x379 true)))
 (let (($x352 (and $x157 $x22)))
 (let (($x208 (and $x352 $x174)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x249 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x249 (_ bv0 32))))
 (let (($x130 (and $x100 $x208)))
 (let (($x255 (forall ((input.ind-%var4067X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x380 (= input.ind-%var4067X input.spec-%var-y-0)))
 (let ((?x25 (ite $x380 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x175 (ite $x43 ?x25 (_ bv0 32))))
 (let ((?x355 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var4067X)))
 (let (($x377 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var4067X)))
 (let (($x102 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x102 $x377) (= ?x355 ?x175)))))))))))
 ))
 (let (($x90 (forall ((input.ind-%var4066X (_ BitVec 32)) )(let (($x380 (= input.ind-%var4066X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x68 (ite $x43 $x380 false)))
 (let (($x377 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var4066X)))
 (let (($x102 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x102 (= $x377 $x68))))))))
 ))
 (let (($x51 (bvuge ?x249 (_ bv1 32))))
 (let (($x102 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x291 (= $x102 $x51)))
 (let (($x7 (= false false)))
 (let (($x308 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x261 (=> $x308 $x7)))
 (let (($x370 (= $x308 $x100)))
 (let (($x238 (and (and (and (and $x370 $x261) $x291) $x90) $x255)))
 (let (($x162 (and $x238 $x130)))
 (let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x264 (ite $x99 ?x24 (_ bv0 32))))
 (let ((?x31 (ite $x43 ?x264 (_ bv0 32))))
 (let (($x6 (= input.spec-%tmpvar-6.L2%13%d.2 ?x31)))
 (let (($x56 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x323 (=> $x56 $x6)))
 (let (($x240 (ite $x43 $x99 false)))
 (let ((?x269 (ite $x240 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x269 (_ bv1 32))))
 (let (($x77 (= $x56 $x75)))
 (let (($x315 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x160 (=> $x315 $x7)))
 (let (($x94 (= ?x269 (_ bv0 32))))
 (let (($x186 (= $x315 $x94)))
 (let (($x58 (and (and (and $x186 $x160) $x77) $x323)))
 (let (($x204 (and $x58 $x162)))
 (let (($x129 (forall ((input.ind-%var4101X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x380 (= input.ind-%var4101X input.spec-%var-y-0)))
 (let ((?x25 (ite $x380 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x175 (ite $x43 ?x25 (_ bv0 32))))
 (let ((?x228 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var4101X)))
 (let (($x295 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var4101X)))
 (=> $x295 (= ?x228 ?x175))))))))))
 ))
 (let (($x79 (forall ((input.ind-%var4100X (_ BitVec 32)) )(let (($x380 (= input.ind-%var4100X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x68 (ite $x43 $x380 false)))
 (let (($x295 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var4100X)))
 (= $x295 $x68))))))
 ))
 (let (($x82 (and $x79 $x129)))
 (let (($x243 (and $x82 $x204)))
 (let (($x59 (forall ((input.ind-%var4119X (_ BitVec 32)) (input.ind-%var4121X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var4119X input.ind-%var4121X)))
 (let (($x12 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var4119X)))
 (=> (and $x12 $x140) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var4119X input.ind-%var4121X) (_ bv0 32))))))
 ))
 (let (($x176 (forall ((input.ind-%var4119X (_ BitVec 32)) (input.ind-%var4120X (_ BitVec 32)) )(let (($x12 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var4119X)))
 (=> $x12 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var4119X input.ind-%var4120X) false))))
 ))
 (let (($x139 (forall ((input.ind-%var4118X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var4118X)))
 (= $x135 false)))
 ))
 (let (($x313 (and (and $x139 $x176) $x59)))
 (let (($x106 (and $x313 $x243)))
 (let (($x318 (forall ((input.ind-%var4131X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var4131X)))
 (=> $x170 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var4131X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var4130X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var4130X)))
 (= $x170 false)))
 ))
 (let (($x147 (and $x349 $x318)))
 (let (($x287 (and $x147 $x106)))
 (let (($x172 (= ?x24 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x207 (and $x172 $x287)))
 (let (($x241 (forall ((input.ind-%var4145X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x380 (= input.ind-%var4145X input.spec-%var-y-0)))
 (let ((?x25 (ite $x380 ?x24 (_ bv0 32))))
 (let ((?x250 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var4145X)))
 (let (($x137 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var4145X)))
 (=> $x137 (= ?x250 ?x25))))))))
 ))
 (let (($x195 (forall ((input.ind-%var4144X (_ BitVec 32)) )(let (($x380 (= input.ind-%var4144X input.spec-%var-y-0)))
 (let (($x137 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var4144X)))
 (= $x137 $x380))))
 ))
 (let (($x334 (and $x195 $x241)))
 (let (($x98 (and $x334 $x207)))
 (let (($x247 (forall ((input.ind-%var4171X (_ BitVec 32)) (input.ind-%var4173X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x380 (= input.ind-%var4173X input.spec-%var-y-0)))
 (let ((?x25 (ite $x380 ?x24 (_ bv0 32))))
 (let (($x260 (= input.ind-%var4171X input.spec-%var-x-0)))
 (let ((?x316 (ite $x260 ?x25 (_ bv0 32))))
 (let ((?x259 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var4171X input.ind-%var4173X)))
 (let (($x39 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var4171X input.ind-%var4173X)))
 (let (($x63 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var4171X)))
 (=> (and $x63 $x39) (= ?x259 ?x316)))))))))))
 ))
 (let (($x41 (forall ((input.ind-%var4171X (_ BitVec 32)) (input.ind-%var4172X (_ BitVec 32)) )(let (($x380 (= input.ind-%var4172X input.spec-%var-y-0)))
 (let (($x260 (= input.ind-%var4171X input.spec-%var-x-0)))
 (let (($x353 (ite $x260 $x380 false)))
 (let (($x39 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var4171X input.ind-%var4172X)))
 (let (($x63 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var4171X)))
 (=> $x63 (= $x39 $x353))))))))
 ))
 (let (($x340 (forall ((input.ind-%var4170X (_ BitVec 32)) )(let (($x146 (= input.ind-%var4170X input.spec-%var-x-0)))
 (let (($x374 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var4170X)))
 (= $x374 $x146))))
 ))
 (let (($x211 (and (and $x340 $x41) $x247)))
 (let (($x92 (and $x211 $x98)))
 (let (($x117 (forall ((input.ind-%var4199X (_ BitVec 32)) (input.ind-%var4201X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x380 (= input.ind-%var4201X input.spec-%var-y-0)))
 (let ((?x25 (ite $x380 ?x24 (_ bv0 32))))
 (let (($x260 (= input.ind-%var4199X input.spec-%var-x-0)))
 (let ((?x316 (ite $x260 ?x25 (_ bv0 32))))
 (let ((?x202 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var4199X input.ind-%var4201X)))
 (let (($x28 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var4199X input.ind-%var4201X)))
 (let (($x181 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var4199X)))
 (=> (and $x181 $x28) (= ?x202 ?x316)))))))))))
 ))
 (let (($x302 (forall ((input.ind-%var4199X (_ BitVec 32)) (input.ind-%var4200X (_ BitVec 32)) )(let (($x380 (= input.ind-%var4200X input.spec-%var-y-0)))
 (let (($x260 (= input.ind-%var4199X input.spec-%var-x-0)))
 (let (($x353 (ite $x260 $x380 false)))
 (let (($x28 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var4199X input.ind-%var4200X)))
 (let (($x181 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var4199X)))
 (=> $x181 (= $x28 $x353))))))))
 ))
 (let (($x290 (forall ((input.ind-%var4198X (_ BitVec 32)) )(let (($x146 (= input.ind-%var4198X input.spec-%var-x-0)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var4198X)))
 (= $x358 $x146))))
 ))
 (let (($x111 (and (and $x290 $x302) $x117)))
 (let (($x30 (and $x111 $x92)))
 (let (($x55 (and $x7 $x30)))
 (let (($x88 (= input.spec-%var-m2-0.L2%18%bbentry ?x31)))
 (let (($x85 (and $x88 $x55)))
 (let (($x274 (and $x7 $x85)))
 (let (($x91 (=> $x274 $x52)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x57 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x53 (= input.spec-%var-x-0 ?x57)))
 (let (($x52 (= $x53 true)))
 (let ((?x212 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x265 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x289 (concat ?x103 (concat ?x265 (concat ?x222 ?x212)))))
 (let (($x296 (= ?x289 input.dst.llvm-%x)))
 (let (($x174 (= $x296 true)))
 (let ((?x262 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x193 (concat ?x205 (concat ?x277 (concat ?x40 ?x262)))))
 (let (($x48 (= ?x193 input.dst.llvm-%y)))
 (let (($x22 (= $x48 true)))
 (let (($x368 (= input.dst.llvm-%y ?x193)))
 (let (($x366 (= input.dst.llvm-%x ?x289)))
 (let (($x190 (and $x366 $x368)))
 (let ((?x310 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x306 (= (_ bv0 32) ?x310)))
 (let ((?x312 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x325 (= (_ bv0 32) ?x312)))
 (let ((?x381 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x381)))
 (let ((?x220 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x239 (and $x294 $x35)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (and $x272 $x239)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x319 $x10)))
 (let (($x187 (not $x69)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x152 $x213)))
 (let (($x329 (and (not $x267) $x187)))
 (let (($x382 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x378 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (and $x378 $x382)))
 (let (($x67 (not $x198)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x224 $x107)))
 (let (($x33 (and (not $x20) $x67)))
 (let (($x116 (and (and (and (and (and (and $x33 $x329) $x126) $x171) $x21) $x44) $x325)))
 (let (($x301 (and $x116 $x306)))
 (let (($x326 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x281 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let ((?x215 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x338 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x215)))
 (let (($x216 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x335 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x282 (or false (or false (and (and true (or $x335 $x216)) (or $x338 $x281))))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x282)))
 (let (($x144 (and (and (and $x104 $x326) $x301) $x190)))
 (let (($x227 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x379 (and $x227 $x144)))
 (let (($x157 (= $x379 true)))
 (let (($x352 (and $x157 $x22)))
 (let (($x208 (and $x352 $x174)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x249 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x249 (_ bv0 32))))
 (let (($x130 (and $x100 $x208)))
 (let (($x255 (forall ((input.ind-%var4067X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x380 (= input.ind-%var4067X input.spec-%var-y-0)))
 (let ((?x25 (ite $x380 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x175 (ite $x43 ?x25 (_ bv0 32))))
 (let ((?x355 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var4067X)))
 (let (($x377 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var4067X)))
 (let (($x102 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x102 $x377) (= ?x355 ?x175)))))))))))
 ))
 (let (($x90 (forall ((input.ind-%var4066X (_ BitVec 32)) )(let (($x380 (= input.ind-%var4066X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x68 (ite $x43 $x380 false)))
 (let (($x377 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var4066X)))
 (let (($x102 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x102 (= $x377 $x68))))))))
 ))
 (let (($x51 (bvuge ?x249 (_ bv1 32))))
 (let (($x102 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x291 (= $x102 $x51)))
 (let (($x7 (= false false)))
 (let (($x308 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x261 (=> $x308 $x7)))
 (let (($x370 (= $x308 $x100)))
 (let (($x238 (and (and (and (and $x370 $x261) $x291) $x90) $x255)))
 (let (($x162 (and $x238 $x130)))
 (let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x99 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x264 (ite $x99 ?x24 (_ bv0 32))))
 (let ((?x31 (ite $x43 ?x264 (_ bv0 32))))
 (let (($x6 (= input.spec-%tmpvar-6.L2%13%d.2 ?x31)))
 (let (($x56 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x323 (=> $x56 $x6)))
 (let (($x240 (ite $x43 $x99 false)))
 (let ((?x269 (ite $x240 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x269 (_ bv1 32))))
 (let (($x77 (= $x56 $x75)))
 (let (($x315 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x160 (=> $x315 $x7)))
 (let (($x94 (= ?x269 (_ bv0 32))))
 (let (($x186 (= $x315 $x94)))
 (let (($x58 (and (and (and $x186 $x160) $x77) $x323)))
 (let (($x204 (and $x58 $x162)))
 (let (($x129 (forall ((input.ind-%var4101X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x380 (= input.ind-%var4101X input.spec-%var-y-0)))
 (let ((?x25 (ite $x380 ?x24 (_ bv0 32))))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x175 (ite $x43 ?x25 (_ bv0 32))))
 (let ((?x228 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var4101X)))
 (let (($x295 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var4101X)))
 (=> $x295 (= ?x228 ?x175))))))))))
 ))
 (let (($x79 (forall ((input.ind-%var4100X (_ BitVec 32)) )(let (($x380 (= input.ind-%var4100X input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x68 (ite $x43 $x380 false)))
 (let (($x295 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var4100X)))
 (= $x295 $x68))))))
 ))
 (let (($x82 (and $x79 $x129)))
 (let (($x243 (and $x82 $x204)))
 (let (($x59 (forall ((input.ind-%var4119X (_ BitVec 32)) (input.ind-%var4121X (_ BitVec 32)) )(let (($x140 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var4119X input.ind-%var4121X)))
 (let (($x12 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var4119X)))
 (=> (and $x12 $x140) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var4119X input.ind-%var4121X) (_ bv0 32))))))
 ))
 (let (($x176 (forall ((input.ind-%var4119X (_ BitVec 32)) (input.ind-%var4120X (_ BitVec 32)) )(let (($x12 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var4119X)))
 (=> $x12 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var4119X input.ind-%var4120X) false))))
 ))
 (let (($x139 (forall ((input.ind-%var4118X (_ BitVec 32)) )(let (($x135 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var4118X)))
 (= $x135 false)))
 ))
 (let (($x313 (and (and $x139 $x176) $x59)))
 (let (($x106 (and $x313 $x243)))
 (let (($x318 (forall ((input.ind-%var4131X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var4131X)))
 (=> $x170 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var4131X) (_ bv0 32)))))
 ))
 (let (($x349 (forall ((input.ind-%var4130X (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var4130X)))
 (= $x170 false)))
 ))
 (let (($x147 (and $x349 $x318)))
 (let (($x287 (and $x147 $x106)))
 (let (($x172 (= ?x24 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x207 (and $x172 $x287)))
 (let (($x241 (forall ((input.ind-%var4145X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x380 (= input.ind-%var4145X input.spec-%var-y-0)))
 (let ((?x25 (ite $x380 ?x24 (_ bv0 32))))
 (let ((?x250 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var4145X)))
 (let (($x137 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var4145X)))
 (=> $x137 (= ?x250 ?x25))))))))
 ))
 (let (($x195 (forall ((input.ind-%var4144X (_ BitVec 32)) )(let (($x380 (= input.ind-%var4144X input.spec-%var-y-0)))
 (let (($x137 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var4144X)))
 (= $x137 $x380))))
 ))
 (let (($x334 (and $x195 $x241)))
 (let (($x98 (and $x334 $x207)))
 (let (($x247 (forall ((input.ind-%var4171X (_ BitVec 32)) (input.ind-%var4173X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x380 (= input.ind-%var4173X input.spec-%var-y-0)))
 (let ((?x25 (ite $x380 ?x24 (_ bv0 32))))
 (let (($x260 (= input.ind-%var4171X input.spec-%var-x-0)))
 (let ((?x316 (ite $x260 ?x25 (_ bv0 32))))
 (let ((?x259 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var4171X input.ind-%var4173X)))
 (let (($x39 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var4171X input.ind-%var4173X)))
 (let (($x63 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var4171X)))
 (=> (and $x63 $x39) (= ?x259 ?x316)))))))))))
 ))
 (let (($x41 (forall ((input.ind-%var4171X (_ BitVec 32)) (input.ind-%var4172X (_ BitVec 32)) )(let (($x380 (= input.ind-%var4172X input.spec-%var-y-0)))
 (let (($x260 (= input.ind-%var4171X input.spec-%var-x-0)))
 (let (($x353 (ite $x260 $x380 false)))
 (let (($x39 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var4171X input.ind-%var4172X)))
 (let (($x63 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var4171X)))
 (=> $x63 (= $x39 $x353))))))))
 ))
 (let (($x340 (forall ((input.ind-%var4170X (_ BitVec 32)) )(let (($x146 (= input.ind-%var4170X input.spec-%var-x-0)))
 (let (($x374 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var4170X)))
 (= $x374 $x146))))
 ))
 (let (($x211 (and (and $x340 $x41) $x247)))
 (let (($x92 (and $x211 $x98)))
 (let (($x117 (forall ((input.ind-%var4199X (_ BitVec 32)) (input.ind-%var4201X (_ BitVec 32)) )(let ((?x24 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x380 (= input.ind-%var4201X input.spec-%var-y-0)))
 (let ((?x25 (ite $x380 ?x24 (_ bv0 32))))
 (let (($x260 (= input.ind-%var4199X input.spec-%var-x-0)))
 (let ((?x316 (ite $x260 ?x25 (_ bv0 32))))
 (let ((?x202 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var4199X input.ind-%var4201X)))
 (let (($x28 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var4199X input.ind-%var4201X)))
 (let (($x181 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var4199X)))
 (=> (and $x181 $x28) (= ?x202 ?x316)))))))))))
 ))
 (let (($x302 (forall ((input.ind-%var4199X (_ BitVec 32)) (input.ind-%var4200X (_ BitVec 32)) )(let (($x380 (= input.ind-%var4200X input.spec-%var-y-0)))
 (let (($x260 (= input.ind-%var4199X input.spec-%var-x-0)))
 (let (($x353 (ite $x260 $x380 false)))
 (let (($x28 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var4199X input.ind-%var4200X)))
 (let (($x181 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var4199X)))
 (=> $x181 (= $x28 $x353))))))))
 ))
 (let (($x290 (forall ((input.ind-%var4198X (_ BitVec 32)) )(let (($x146 (= input.ind-%var4198X input.spec-%var-x-0)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var4198X)))
 (= $x358 $x146))))
 ))
 (let (($x111 (and (and $x290 $x302) $x117)))
 (let (($x30 (and $x111 $x92)))
 (let (($x55 (and $x7 $x30)))
 (let (($x88 (= input.spec-%var-m2-0.L2%18%bbentry ?x31)))
 (let (($x85 (and $x88 $x55)))
 (let (($x274 (and $x7 $x85)))
 (let (($x91 (=> $x274 $x52)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791617/query
