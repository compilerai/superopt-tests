==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x11)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (and $x8 $x7)))
 (let (($x17 (and $x6 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x11)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (and $x8 $x7)))
 (let (($x17 (and $x6 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv1661363587 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3191897543 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888340/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x1087 (= true false)))
 (let (($x1088 (= $x1087 true)))
 (let ((?x1061 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x1063 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x1066 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x1069 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x1070 (concat ?x1069 (concat ?x1066 (concat ?x1063 ?x1061)))))
 (let (($x1071 (= ?x1070 input.dst.llvm-%y)))
 (let (($x1072 (= $x1071 true)))
 (let (($x1073 (= $x1072 true)))
 (let ((?x1045 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x1047 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x1051 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x1054 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x1055 (concat ?x1054 (concat ?x1051 (concat ?x1047 ?x1045)))))
 (let (($x1056 (= ?x1055 input.dst.llvm-%x)))
 (let (($x1057 (= $x1056 true)))
 (let (($x1058 (= $x1057 true)))
 (let (($x1037 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x1038 (= $x1037 true)))
 (let (($x1039 (= $x1038 true)))
 (let (($x1040 (= $x1039 true)))
 (let ((?x1023 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1024 (= (_ bv0 32) ?x1023)))
 (let ((?x1021 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x1022 (= (_ bv0 32) ?x1021)))
 (let ((?x1019 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x1020 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1019)))
 (let ((?x1015 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x1016 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x1015)))
 (let (($x1013 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x1017 (and $x1013 $x1016)))
 (let (($x1012 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1018 (and $x1012 $x1017)))
 (let (($x1011 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x1009 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x1003 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x1002 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x1004 (and $x1002 $x1003)))
 (let (($x1005 (not $x1004)))
 (let (($x1000 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x999 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x1001 (and $x999 $x1000)))
 (let (($x1007 (and (not $x1001) $x1005)))
 (let (($x994 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x993 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x995 (and $x993 $x994)))
 (let (($x996 (not $x995)))
 (let (($x990 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x988 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x991 (and $x988 $x990)))
 (let (($x998 (and (not $x991) $x996)))
 (let (($x1030 (and (and (and (and (and (and $x998 $x1007) $x1009) $x1011) $x1018) $x1020) $x1022)))
 (let (($x1031 (and $x1030 $x1024)))
 (let (($x1032 (= $x1031 true)))
 (let (($x1033 (= $x1032 true)))
 (let (($x1034 (= $x1033 true)))
 (let (($x982 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x983 (= $x982 true)))
 (let (($x984 (= $x983 true)))
 (let (($x985 (= $x984 true)))
 (let (($x1035 (and $x985 $x1034)))
 (let (($x1041 (and $x1035 $x1040)))
 (let (($x1059 (and $x1041 $x1058)))
 (let (($x1074 (and $x1059 $x1073)))
 (let (($x979 (forall ((Lambda155Var (_ BitVec 32)) )(let ((?x46 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x267 (= Lambda155Var input.spec-%var-y-0)))
 (let ((?x331 (ite $x267 ?x46 (_ bv0 32))))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x802 (ite $x101 ?x331 (_ bv0 32))))
 (let (($x863 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let ((?x925 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x953 (bvuge ?x925 (_ bv1 32))))
 (=> (and $x953 $x863) (= (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda155Var) ?x802)))))))))))
 ))
 (let (($x957 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x267 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x752 (ite (ite $x101 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x782 (bvuge ?x752 (_ bv1 32))))
 (let ((?x925 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x953 (bvuge ?x925 (_ bv1 32))))
 (let (($x863 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x863 (= $x953 $x782)))))))))))
 ))
 (let (($x934 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let (($x863 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x931 (=> $x863 $x47)))
 (let ((?x925 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x926 (= ?x925 (_ bv0 32))))
 (=> (and $x926 $x863) $x47)))))))
 ))
 (let (($x929 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x267 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x752 (ite (ite $x101 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x756 (= ?x752 (_ bv0 32))))
 (let ((?x925 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x926 (= ?x925 (_ bv0 32))))
 (let (($x863 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x863 (= $x926 $x756)))))))))))
 ))
 (let ((?x858 (ite (or false (= input.spec-%var-x-0 input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x863 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x871 (= $x863 (bvuge ?x858 (_ bv1 32)))))
 (let (($x47 (= false false)))
 (let (($x850 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x861 (=> $x850 $x47)))
 (let (($x860 (= $x850 (= ?x858 (_ bv0 32)))))
 (let (($x862 (and $x860 $x861)))
 (let (($x872 (and $x862 $x871)))
 (let (($x930 (and $x872 $x929)))
 (let (($x935 (and $x930 $x934)))
 (let (($x958 (and $x935 $x957)))
 (let (($x980 (and $x958 $x979)))
 (let (($x1075 (and $x980 $x1074)))
 (let ((?x46 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x111 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x113 (ite $x101 (ite $x111 ?x46 (_ bv0 32)) (_ bv0 32))))
 (let (($x841 (= input.spec-%tmpvar-6.L1%13%d.2 ?x113)))
 (let (($x828 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x843 (=> $x828 $x841)))
 (let (($x835 (= $x828 (bvuge (ite (ite $x101 (or false $x111) false) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x810 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x822 (=> $x810 $x47)))
 (let (($x817 (= $x810 (= (ite (ite $x101 (or false $x111) false) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x823 (and $x817 $x822)))
 (let (($x840 (and $x823 $x835)))
 (let (($x844 (and $x840 $x843)))
 (let (($x1076 (and $x844 $x1075)))
 (let (($x806 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x46 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x267 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x331 (ite $x267 ?x46 (_ bv0 32))))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x802 (ite $x101 ?x331 (_ bv0 32))))
 (let ((?x758 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x783 (bvuge ?x758 (_ bv1 32))))
 (=> $x783 (= (input.spec-%var-m1-0.L1%13%d.1.1 Lambda157Var) ?x802))))))))))
 ))
 (let (($x786 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x267 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x752 (ite (ite $x101 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x782 (bvuge ?x752 (_ bv1 32))))
 (let ((?x758 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x783 (bvuge ?x758 (_ bv1 32))))
 (= $x783 $x782)))))))))
 ))
 (let (($x764 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x758 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x759 (= ?x758 (_ bv0 32))))
 (=> $x759 $x47)))))
 ))
 (let (($x761 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x267 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x752 (ite (ite $x101 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x756 (= ?x752 (_ bv0 32))))
 (let ((?x758 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x759 (= ?x758 (_ bv0 32))))
 (= $x759 $x756)))))))))
 ))
 (let (($x765 (and $x761 $x764)))
 (let (($x787 (and $x765 $x786)))
 (let (($x807 (and $x787 $x806)))
 (let (($x1077 (and $x807 $x1076)))
 (let (($x705 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x667 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x662 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x686 (bvuge ?x662 (_ bv1 32))))
 (=> (and $x686 $x667) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) (_ bv0 32)))))))
 ))
 (let (($x690 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x542 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x564 (bvuge ?x542 (_ bv1 32))))
 (let ((?x662 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x686 (bvuge ?x662 (_ bv1 32))))
 (let (($x667 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x667 (= $x686 $x564))))))))
 ))
 (let (($x675 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let (($x667 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x662 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x663 (= ?x662 (_ bv0 32))))
 (=> (and $x663 $x667) $x47))))))
 ))
 (let (($x669 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x542 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x542 (_ bv0 32))))
 (let ((?x662 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x663 (= ?x662 (_ bv0 32))))
 (let (($x667 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x667 (= $x663 $x545))))))))
 ))
 (let (($x628 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x542 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x564 (bvuge ?x542 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x564))))
 ))
 (let (($x617 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x611 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (= ?x611 (_ bv0 32))))
 (=> $x612 $x47)))))
 ))
 (let (($x614 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x542 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x542 (_ bv0 32))))
 (let ((?x611 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (= ?x611 (_ bv0 32))))
 (= $x612 $x545))))))
 ))
 (let (($x618 (and $x614 $x617)))
 (let (($x629 (and $x618 $x628)))
 (let (($x670 (and $x629 $x669)))
 (let (($x676 (and $x670 $x675)))
 (let (($x691 (and $x676 $x690)))
 (let (($x706 (and $x691 $x705)))
 (let (($x1078 (and $x706 $x1077)))
 (let (($x580 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x551 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x567 (bvuge ?x551 (_ bv1 32))))
 (=> $x567 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda157Var) (_ bv0 32))))))
 ))
 (let (($x569 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x542 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x564 (bvuge ?x542 (_ bv1 32))))
 (let ((?x551 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x567 (bvuge ?x551 (_ bv1 32))))
 (= $x567 $x564))))))
 ))
 (let (($x557 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x551 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x552 (= ?x551 (_ bv0 32))))
 (=> $x552 $x47)))))
 ))
 (let (($x554 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x542 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x542 (_ bv0 32))))
 (let ((?x551 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x552 (= ?x551 (_ bv0 32))))
 (= $x552 $x545))))))
 ))
 (let (($x558 (and $x554 $x557)))
 (let (($x570 (and $x558 $x569)))
 (let (($x581 (and $x570 $x580)))
 (let (($x1079 (and $x581 $x1078)))
 (let (($x527 (= ?x46 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x1080 (and $x527 $x1079)))
 (let (($x524 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x46 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x267 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x331 (ite $x267 ?x46 (_ bv0 32))))
 (let ((?x485 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x485 (_ bv1 32))))
 (=> $x507 (= (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda157Var) ?x331))))))))
 ))
 (let (($x509 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x267 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let ((?x482 (ite $x268 (_ bv1 32) (_ bv0 32))))
 (let ((?x485 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x485 (_ bv1 32))))
 (= $x507 (bvuge ?x482 (_ bv1 32)))))))))
 ))
 (let (($x491 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x485 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (= ?x485 (_ bv0 32))))
 (=> $x486 $x47)))))
 ))
 (let (($x488 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x485 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (= ?x485 (_ bv0 32))))
 (= $x486 (= (ite (or false (= Lambda157Var input.spec-%var-y-0)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x492 (and $x488 $x491)))
 (let (($x510 (and $x492 $x509)))
 (let (($x525 (and $x510 $x524)))
 (let (($x1081 (and $x525 $x1080)))
 (let (($x443 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x46 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x267 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x331 (ite $x267 ?x46 (_ bv0 32))))
 (let (($x269 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x332 (ite $x269 ?x331 (_ bv0 32))))
 (let (($x409 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x404 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x404 (_ bv1 32))))
 (=> (and $x426 $x409) (= (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x332)))))))))))
 ))
 (let (($x430 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x267 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x269 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x271 (ite (ite $x269 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x271 (_ bv1 32))))
 (let ((?x404 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x404 (_ bv1 32))))
 (let (($x409 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x409 (= $x426 $x306)))))))))))
 ))
 (let (($x417 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let (($x409 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x404 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (= ?x404 (_ bv0 32))))
 (=> (and $x405 $x409) $x47))))))
 ))
 (let (($x411 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x267 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x269 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x271 (ite (ite $x269 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (let ((?x404 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (= ?x404 (_ bv0 32))))
 (let (($x409 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x409 (= $x405 $x272)))))))))))
 ))
 (let (($x379 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x169 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x169 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x193))))
 ))
 (let (($x369 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x363 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x363 (_ bv0 32))))
 (=> $x364 $x47)))))
 ))
 (let (($x366 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x169 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let ((?x363 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x363 (_ bv0 32))))
 (= $x364 $x170))))))
 ))
 (let (($x370 (and $x366 $x369)))
 (let (($x380 (and $x370 $x379)))
 (let (($x412 (and $x380 $x411)))
 (let (($x418 (and $x412 $x417)))
 (let (($x431 (and $x418 $x430)))
 (let (($x444 (and $x431 $x443)))
 (let (($x1082 (and $x444 $x1081)))
 (let (($x337 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x46 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x267 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x331 (ite $x267 ?x46 (_ bv0 32))))
 (let (($x269 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x332 (ite $x269 ?x331 (_ bv0 32))))
 (let (($x279 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x274 (_ bv1 32))))
 (=> (and $x309 $x279) (= (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x332)))))))))))
 ))
 (let (($x312 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x267 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x269 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x271 (ite (ite $x269 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x271 (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x274 (_ bv1 32))))
 (let (($x279 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x279 (= $x309 $x306)))))))))))
 ))
 (let (($x287 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let (($x279 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x274 (_ bv0 32))))
 (=> (and $x275 $x279) $x47))))))
 ))
 (let (($x281 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x267 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x269 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x271 (ite (ite $x269 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (let ((?x274 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x274 (_ bv0 32))))
 (let (($x279 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x279 (= $x275 $x272)))))))))))
 ))
 (let (($x196 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x169 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x169 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x193))))
 ))
 (let (($x178 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x172 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x172 (_ bv0 32))))
 (=> $x173 $x47)))))
 ))
 (let (($x175 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x169 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let ((?x172 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x172 (_ bv0 32))))
 (= $x173 $x170))))))
 ))
 (let (($x179 (and $x175 $x178)))
 (let (($x197 (and $x179 $x196)))
 (let (($x282 (and $x197 $x281)))
 (let (($x288 (and $x282 $x287)))
 (let (($x313 (and $x288 $x312)))
 (let (($x338 (and $x313 $x337)))
 (let (($x1083 (and $x338 $x1082)))
 (let (($x1084 (and $x47 $x1083)))
 (let (($x98 (= input.spec-%var-m2-0.L1%18%bbentry ?x113)))
 (let (($x1085 (and $x98 $x1084)))
 (let (($x1086 (and $x47 $x1085)))
 (let (($x1089 (=> $x1086 $x1088)))
 (not $x1089)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x1087 (= true false)))
 (let (($x1088 (= $x1087 true)))
 (let ((?x1061 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x1063 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x1066 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x1069 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x1070 (concat ?x1069 (concat ?x1066 (concat ?x1063 ?x1061)))))
 (let (($x1071 (= ?x1070 input.dst.llvm-%y)))
 (let (($x1072 (= $x1071 true)))
 (let (($x1073 (= $x1072 true)))
 (let ((?x1045 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x1047 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x1051 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x1054 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x1055 (concat ?x1054 (concat ?x1051 (concat ?x1047 ?x1045)))))
 (let (($x1056 (= ?x1055 input.dst.llvm-%x)))
 (let (($x1057 (= $x1056 true)))
 (let (($x1058 (= $x1057 true)))
 (let (($x1037 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x1038 (= $x1037 true)))
 (let (($x1039 (= $x1038 true)))
 (let (($x1040 (= $x1039 true)))
 (let ((?x1023 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1024 (= (_ bv0 32) ?x1023)))
 (let ((?x1021 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x1022 (= (_ bv0 32) ?x1021)))
 (let ((?x1019 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x1020 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1019)))
 (let ((?x1015 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x1016 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x1015)))
 (let (($x1013 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x1017 (and $x1013 $x1016)))
 (let (($x1012 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1018 (and $x1012 $x1017)))
 (let (($x1011 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x1009 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x1003 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x1002 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x1004 (and $x1002 $x1003)))
 (let (($x1005 (not $x1004)))
 (let (($x1000 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x999 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x1001 (and $x999 $x1000)))
 (let (($x1007 (and (not $x1001) $x1005)))
 (let (($x994 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x993 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x995 (and $x993 $x994)))
 (let (($x996 (not $x995)))
 (let (($x990 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x988 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x991 (and $x988 $x990)))
 (let (($x998 (and (not $x991) $x996)))
 (let (($x1030 (and (and (and (and (and (and $x998 $x1007) $x1009) $x1011) $x1018) $x1020) $x1022)))
 (let (($x1031 (and $x1030 $x1024)))
 (let (($x1032 (= $x1031 true)))
 (let (($x1033 (= $x1032 true)))
 (let (($x1034 (= $x1033 true)))
 (let (($x982 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x983 (= $x982 true)))
 (let (($x984 (= $x983 true)))
 (let (($x985 (= $x984 true)))
 (let (($x1035 (and $x985 $x1034)))
 (let (($x1041 (and $x1035 $x1040)))
 (let (($x1059 (and $x1041 $x1058)))
 (let (($x1074 (and $x1059 $x1073)))
 (let (($x979 (forall ((Lambda155Var (_ BitVec 32)) )(let ((?x46 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x267 (= Lambda155Var input.spec-%var-y-0)))
 (let ((?x331 (ite $x267 ?x46 (_ bv0 32))))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x802 (ite $x101 ?x331 (_ bv0 32))))
 (let (($x863 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let ((?x925 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x953 (bvuge ?x925 (_ bv1 32))))
 (=> (and $x953 $x863) (= (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda155Var) ?x802)))))))))))
 ))
 (let (($x957 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x267 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x752 (ite (ite $x101 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x782 (bvuge ?x752 (_ bv1 32))))
 (let ((?x925 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x953 (bvuge ?x925 (_ bv1 32))))
 (let (($x863 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x863 (= $x953 $x782)))))))))))
 ))
 (let (($x934 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let (($x863 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x931 (=> $x863 $x47)))
 (let ((?x925 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x926 (= ?x925 (_ bv0 32))))
 (=> (and $x926 $x863) $x47)))))))
 ))
 (let (($x929 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x267 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x752 (ite (ite $x101 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x756 (= ?x752 (_ bv0 32))))
 (let ((?x925 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x926 (= ?x925 (_ bv0 32))))
 (let (($x863 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x863 (= $x926 $x756)))))))))))
 ))
 (let ((?x858 (ite (or false (= input.spec-%var-x-0 input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x863 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x871 (= $x863 (bvuge ?x858 (_ bv1 32)))))
 (let (($x47 (= false false)))
 (let (($x850 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x861 (=> $x850 $x47)))
 (let (($x860 (= $x850 (= ?x858 (_ bv0 32)))))
 (let (($x862 (and $x860 $x861)))
 (let (($x872 (and $x862 $x871)))
 (let (($x930 (and $x872 $x929)))
 (let (($x935 (and $x930 $x934)))
 (let (($x958 (and $x935 $x957)))
 (let (($x980 (and $x958 $x979)))
 (let (($x1075 (and $x980 $x1074)))
 (let ((?x46 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x111 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x113 (ite $x101 (ite $x111 ?x46 (_ bv0 32)) (_ bv0 32))))
 (let (($x841 (= input.spec-%tmpvar-6.L1%13%d.2 ?x113)))
 (let (($x828 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x843 (=> $x828 $x841)))
 (let (($x835 (= $x828 (bvuge (ite (ite $x101 (or false $x111) false) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x810 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x822 (=> $x810 $x47)))
 (let (($x817 (= $x810 (= (ite (ite $x101 (or false $x111) false) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x823 (and $x817 $x822)))
 (let (($x840 (and $x823 $x835)))
 (let (($x844 (and $x840 $x843)))
 (let (($x1076 (and $x844 $x1075)))
 (let (($x806 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x46 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x267 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x331 (ite $x267 ?x46 (_ bv0 32))))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x802 (ite $x101 ?x331 (_ bv0 32))))
 (let ((?x758 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x783 (bvuge ?x758 (_ bv1 32))))
 (=> $x783 (= (input.spec-%var-m1-0.L1%13%d.1.1 Lambda157Var) ?x802))))))))))
 ))
 (let (($x786 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x267 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x752 (ite (ite $x101 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x782 (bvuge ?x752 (_ bv1 32))))
 (let ((?x758 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x783 (bvuge ?x758 (_ bv1 32))))
 (= $x783 $x782)))))))))
 ))
 (let (($x764 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x758 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x759 (= ?x758 (_ bv0 32))))
 (=> $x759 $x47)))))
 ))
 (let (($x761 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x267 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x101 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x752 (ite (ite $x101 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x756 (= ?x752 (_ bv0 32))))
 (let ((?x758 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x759 (= ?x758 (_ bv0 32))))
 (= $x759 $x756)))))))))
 ))
 (let (($x765 (and $x761 $x764)))
 (let (($x787 (and $x765 $x786)))
 (let (($x807 (and $x787 $x806)))
 (let (($x1077 (and $x807 $x1076)))
 (let (($x705 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x667 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x662 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x686 (bvuge ?x662 (_ bv1 32))))
 (=> (and $x686 $x667) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) (_ bv0 32)))))))
 ))
 (let (($x690 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x542 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x564 (bvuge ?x542 (_ bv1 32))))
 (let ((?x662 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x686 (bvuge ?x662 (_ bv1 32))))
 (let (($x667 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x667 (= $x686 $x564))))))))
 ))
 (let (($x675 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let (($x667 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x662 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x663 (= ?x662 (_ bv0 32))))
 (=> (and $x663 $x667) $x47))))))
 ))
 (let (($x669 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x542 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x542 (_ bv0 32))))
 (let ((?x662 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x663 (= ?x662 (_ bv0 32))))
 (let (($x667 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x667 (= $x663 $x545))))))))
 ))
 (let (($x628 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x542 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x564 (bvuge ?x542 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x564))))
 ))
 (let (($x617 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x611 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (= ?x611 (_ bv0 32))))
 (=> $x612 $x47)))))
 ))
 (let (($x614 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x542 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x542 (_ bv0 32))))
 (let ((?x611 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (= ?x611 (_ bv0 32))))
 (= $x612 $x545))))))
 ))
 (let (($x618 (and $x614 $x617)))
 (let (($x629 (and $x618 $x628)))
 (let (($x670 (and $x629 $x669)))
 (let (($x676 (and $x670 $x675)))
 (let (($x691 (and $x676 $x690)))
 (let (($x706 (and $x691 $x705)))
 (let (($x1078 (and $x706 $x1077)))
 (let (($x580 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x551 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x567 (bvuge ?x551 (_ bv1 32))))
 (=> $x567 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda157Var) (_ bv0 32))))))
 ))
 (let (($x569 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x542 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x564 (bvuge ?x542 (_ bv1 32))))
 (let ((?x551 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x567 (bvuge ?x551 (_ bv1 32))))
 (= $x567 $x564))))))
 ))
 (let (($x557 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x551 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x552 (= ?x551 (_ bv0 32))))
 (=> $x552 $x47)))))
 ))
 (let (($x554 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x542 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x542 (_ bv0 32))))
 (let ((?x551 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x552 (= ?x551 (_ bv0 32))))
 (= $x552 $x545))))))
 ))
 (let (($x558 (and $x554 $x557)))
 (let (($x570 (and $x558 $x569)))
 (let (($x581 (and $x570 $x580)))
 (let (($x1079 (and $x581 $x1078)))
 (let (($x527 (= ?x46 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x1080 (and $x527 $x1079)))
 (let (($x524 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x46 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x267 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x331 (ite $x267 ?x46 (_ bv0 32))))
 (let ((?x485 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x485 (_ bv1 32))))
 (=> $x507 (= (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda157Var) ?x331))))))))
 ))
 (let (($x509 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x267 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let ((?x482 (ite $x268 (_ bv1 32) (_ bv0 32))))
 (let ((?x485 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x485 (_ bv1 32))))
 (= $x507 (bvuge ?x482 (_ bv1 32)))))))))
 ))
 (let (($x491 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x485 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (= ?x485 (_ bv0 32))))
 (=> $x486 $x47)))))
 ))
 (let (($x488 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x485 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (= ?x485 (_ bv0 32))))
 (= $x486 (= (ite (or false (= Lambda157Var input.spec-%var-y-0)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x492 (and $x488 $x491)))
 (let (($x510 (and $x492 $x509)))
 (let (($x525 (and $x510 $x524)))
 (let (($x1081 (and $x525 $x1080)))
 (let (($x443 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x46 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x267 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x331 (ite $x267 ?x46 (_ bv0 32))))
 (let (($x269 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x332 (ite $x269 ?x331 (_ bv0 32))))
 (let (($x409 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x404 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x404 (_ bv1 32))))
 (=> (and $x426 $x409) (= (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x332)))))))))))
 ))
 (let (($x430 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x267 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x269 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x271 (ite (ite $x269 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x271 (_ bv1 32))))
 (let ((?x404 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x404 (_ bv1 32))))
 (let (($x409 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x409 (= $x426 $x306)))))))))))
 ))
 (let (($x417 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let (($x409 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x404 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (= ?x404 (_ bv0 32))))
 (=> (and $x405 $x409) $x47))))))
 ))
 (let (($x411 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x267 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x269 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x271 (ite (ite $x269 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (let ((?x404 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (= ?x404 (_ bv0 32))))
 (let (($x409 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x409 (= $x405 $x272)))))))))))
 ))
 (let (($x379 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x169 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x169 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x193))))
 ))
 (let (($x369 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x363 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x363 (_ bv0 32))))
 (=> $x364 $x47)))))
 ))
 (let (($x366 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x169 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let ((?x363 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x363 (_ bv0 32))))
 (= $x364 $x170))))))
 ))
 (let (($x370 (and $x366 $x369)))
 (let (($x380 (and $x370 $x379)))
 (let (($x412 (and $x380 $x411)))
 (let (($x418 (and $x412 $x417)))
 (let (($x431 (and $x418 $x430)))
 (let (($x444 (and $x431 $x443)))
 (let (($x1082 (and $x444 $x1081)))
 (let (($x337 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x46 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x267 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x331 (ite $x267 ?x46 (_ bv0 32))))
 (let (($x269 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x332 (ite $x269 ?x331 (_ bv0 32))))
 (let (($x279 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x274 (_ bv1 32))))
 (=> (and $x309 $x279) (= (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x332)))))))))))
 ))
 (let (($x312 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x267 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x269 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x271 (ite (ite $x269 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x271 (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x274 (_ bv1 32))))
 (let (($x279 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x279 (= $x309 $x306)))))))))))
 ))
 (let (($x287 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let (($x279 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x274 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x274 (_ bv0 32))))
 (=> (and $x275 $x279) $x47))))))
 ))
 (let (($x281 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x267 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x268 (or false $x267)))
 (let (($x269 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x271 (ite (ite $x269 $x268 false) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (let ((?x274 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x274 (_ bv0 32))))
 (let (($x279 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x279 (= $x275 $x272)))))))))))
 ))
 (let (($x196 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x169 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x169 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x193))))
 ))
 (let (($x178 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x47 (= false false)))
 (let ((?x172 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x172 (_ bv0 32))))
 (=> $x173 $x47)))))
 ))
 (let (($x175 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x169 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let ((?x172 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x172 (_ bv0 32))))
 (= $x173 $x170))))))
 ))
 (let (($x179 (and $x175 $x178)))
 (let (($x197 (and $x179 $x196)))
 (let (($x282 (and $x197 $x281)))
 (let (($x288 (and $x282 $x287)))
 (let (($x313 (and $x288 $x312)))
 (let (($x338 (and $x313 $x337)))
 (let (($x1083 (and $x338 $x1082)))
 (let (($x1084 (and $x47 $x1083)))
 (let (($x98 (= input.spec-%var-m2-0.L1%18%bbentry ?x113)))
 (let (($x1085 (and $x98 $x1084)))
 (let (($x1086 (and $x47 $x1085)))
 (let (($x1089 (=> $x1086 $x1088)))
 (not $x1089)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32)
    #x00040000)
  (define-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf9e65b90)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!122))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xee5269c8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xee5269cb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf9e65b93)
  (define-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32)
    #x60123004)
  (define-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32)
    #x60123004)
  (define-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32)
    #x60123004)
  (define-fun input.spec-%var-y-0 () (_ BitVec 32)
    #x40023003)
  (define-fun input.dst.llvm-%y () (_ BitVec 32)
    #x40023003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf9e65b90)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x20100001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x20100001)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xee5269c8)
  (define-fun input.spec-%var-m-0.L1%8%d.0.1!144 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x20100001) true
      false))
  (define-fun k!124 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x20100001) #x20100001
      #x00000000))
  (define-fun input.spec-%var-m-0.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L1%8%d.0.1!144 (k!124 x!0)))
  (define-fun k!122 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xee5269ca) #x10
    (ite (= x!0 #xf9e65b90) #x03
    (ite (= x!0 #xf9e65b93) #x40
    (ite (= x!0 #xf9e65b92) #x02
    (ite (= x!0 #xee5269c9) #x00
    (ite (= x!0 #xee5269cb) #x20
    (ite (= x!0 #xee5269c8) #x01
      #x30))))))))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.0.1!141 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x20100001) (= x!1 #x40023003)) true
      false))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1!139 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x20100001) (= x!1 #x40023003)) true
      false))
  (define-fun k!132 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x40023003) #x40023003
      #x00000000))
  (define-fun input.spec-%var-m1-0.L1%13%d.1.1!135 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x40023003) #x60123004
      #x00000006))
  (define-fun k!125 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x40023003) #x40023003
      #x00000000))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.0.1!138 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x40023003) true
      false))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.1.1!134 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x20100001) (= x!1 #x40023003)) #x60123004
      #x00000005))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.1.1!142 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x40023003) #x60123004
      #x00000008))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%tmpvar-5.L1%8%d.2.1.1!142 (k!132 x!0)))
  (define-fun input.spec-%tmpvar-3.L1%8%d.0.1!136 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x40023003) true
      false))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1!140 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x20100001) (= x!1 #x40023003)) #x60123004
      #x00000007))
  (define-fun k!126 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x20100001) #x20100001
      #x00000000))
  (define-fun input.spec-%tmpvar-3.L1%8%d.1.1!133 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x40023003) #x60123004
      #x00000004))
  (define-fun k!127 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x40023003) #x40023003
      #x00000000))
  (define-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-3.L1%8%d.1.1!133 (k!127 x!0)))
  (define-fun k!123 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x40023003) #x40023003
      #x00000000))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m-0.L1%8%d.1.1.1.1!134 (k!124 x!0) (k!123 x!1)))
  (define-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!131 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x40023003) #x40023003
      #x00000000))
  (define-fun input.spec-%var-m1-0.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-0.L1%13%d.1.1!135 (k!131 x!0)))
  (define-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-3.L1%8%d.0.1!136 (k!127 x!0)))
  (define-fun input.spec-%var-m1-0.L1%13%d.0.1!137 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x40023003) true
      false))
  (define-fun input.spec-%var-m1-0.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-0.L1%13%d.0.1!137 (k!131 x!0)))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-5.L1%8%d.2.0.1!138 (k!132 x!0)))
  (define-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L1%8%d.1.1.0.1!139 (k!126 x!0) (k!125 x!1)))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L1%8%d.1.1.1.1!140 (k!126 x!0) (k!125 x!1)))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L1%8%d.1.1.0.1!141 (k!124 x!0) (k!123 x!1)))
  (define-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-4.L1%8%d.0.1!143 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x20100001) true
      false))
  (define-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L1%8%d.0.1!143 (k!126 x!0)))
  (define-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!122))
  (define-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32)
    #x00150816)
  (define-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32)
    #x00150816)
  (define-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32)
    #x00150816)
  (define-fun input.spec-%var-y-0 () (_ BitVec 32)
    #x0010a614)
  (define-fun input.dst.llvm-%y () (_ BitVec 32)
    #x0010a614)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00046202)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00046202)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.0.1!141 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0010a614))
  (define-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!131 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0010a614) #x0010a614
      #x00000000))
  (define-fun input.spec-%var-m1-0.L1%13%d.1.1!134 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x0010a614) #x00150816
      #x00000008))
  (define-fun input.spec-%var-m1-0.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-0.L1%13%d.1.1!134 (k!131 x!0)))
  (define-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun k!127 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0010a614) #x0010a614
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1!140 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (and (= x!0 #x00046202) (= x!1 #x0010a614)))
  (define-fun k!123 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0010a614) #x0010a614
      #x00000000))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.0.1!135 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (and (= x!0 #x00046202) (= x!1 #x0010a614)))
  (define-fun k!124 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00046202) #x00046202
      #x00000000))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L1%8%d.1.1.0.1!135 (k!124 x!0) (k!123 x!1)))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.1.1!136 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x00046202) (= x!1 #x0010a614)) #x00150816
      #x00000009))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m-0.L1%8%d.1.1.1.1!136 (k!124 x!0) (k!123 x!1)))
  (define-fun k!126 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00046202) #x00046202
      #x00000000))
  (define-fun input.spec-%tmpvar-3.L1%8%d.1.1!144 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x0010a614) #x00150816
      #x0000000c))
  (define-fun input.spec-%tmpvar-3.L1%8%d.0.1!138 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0010a614))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.1.1!137 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x0010a614) #x00150816
      #x0000000a))
  (define-fun k!132 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0010a614) #x0010a614
      #x00000000))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%tmpvar-5.L1%8%d.2.1.1!137 (k!132 x!0)))
  (define-fun k!125 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0010a614) #x0010a614
      #x00000000))
  (define-fun input.spec-%var-m-0.L1%8%d.0.1!142 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00046202))
  (define-fun input.spec-%var-m1-0.L1%13%d.0.1!133 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0010a614))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-5.L1%8%d.2.0.1!141 (k!132 x!0)))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L1%8%d.1.1.0.1!140 (k!126 x!0) (k!125 x!1)))
  (define-fun input.spec-%var-m-0.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L1%8%d.0.1!142 (k!124 x!0)))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1!143 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x00046202) (= x!1 #x0010a614)) #x00150816
      #x0000000b))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L1%8%d.1.1.1.1!143 (k!126 x!0) (k!125 x!1)))
  (define-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%8%d.0.1!139 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00046202))
  (define-fun k!122 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x02
    (ite (= x!0 #x00000006) #x04
    (ite (= x!0 #x00000000) #x14
    (ite (= x!0 #x00000005) #x62
    (ite (= x!0 #x00000001) #xa6
    (ite (= x!0 #x00000002) #x10
      #x00)))))))
  (define-fun input.spec-%var-m1-0.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-0.L1%13%d.0.1!133 (k!131 x!0)))
  (define-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-3.L1%8%d.0.1!138 (k!127 x!0)))
  (define-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L1%8%d.0.1!139 (k!126 x!0)))
  (define-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-3.L1%8%d.1.1!144 (k!127 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888340/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x463 (ite $x439 (or false (= input.spec-%var-y-0 input.spec-%var-y-0)) false)))
 (let ((?x461 (ite $x463 (_ bv1 32) (_ bv0 32))))
 (let (($x481 (bvuge ?x461 (_ bv1 32))))
 (let (($x462 (= ?x461 (_ bv0 32))))
 (let (($x326 (or $x462 $x481)))
 (let ((?x512 (ite (or false $x439) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x512 (_ bv1 32))))
 (let (($x322 (and $x352 $x326)))
 (let (($x514 (= ?x512 (_ bv0 32))))
 (let (($x329 (or $x514 $x322)))
 (let (($x330 (or false $x329)))
 (let (($x1091 (= $x330 true)))
 (let (($x1092 (= $x1091 true)))
 (let (($x260 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x261 (= $x260 true)))
 (let (($x244 (= $x261 true)))
 (let (($x257 (= $x244 true)))
 (let (($x207 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x215 (= $x207 true)))
 (let (($x216 (= $x215 true)))
 (let (($x210 (= $x216 true)))
 (let ((?x190 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x205 (concat ?x212 (concat ?x201 (concat ?x200 ?x190)))))
 (let (($x208 (= ?x205 input.dst.llvm-%y)))
 (let (($x209 (= $x208 true)))
 (let (($x214 (= $x209 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x145 (concat ?x127 (concat ?x131 ?x128)))))
 (let (($x176 (= ?x144 input.dst.llvm-%x)))
 (let (($x180 (= $x176 true)))
 (let (($x181 (= $x180 true)))
 (let ((?x323 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x324 (= (_ bv0 32) ?x323)))
 (let ((?x321 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x320 (= (_ bv0 32) ?x321)))
 (let ((?x435 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x319 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x435)))
 (let ((?x422 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x425 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x422)))
 (let (($x427 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x432 (and $x427 $x425)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x433 (and $x292 $x432)))
 (let (($x295 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x421 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x298 (and $x421 $x296)))
 (let (($x297 (not $x298)))
 (let (($x423 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x420 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x424 (and $x420 $x423)))
 (let (($x302 (and (not $x424) $x297)))
 (let (($x395 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x399 (and $x266 $x395)))
 (let (($x413 (not $x399)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x403 $x263)))
 (let (($x419 (and (not $x264) $x413)))
 (let (($x328 (and (and (and (and (and (and $x419 $x302) $x304) $x295) $x433) $x319) $x320)))
 (let (($x434 (and $x328 $x324)))
 (let (($x437 (= $x434 true)))
 (let (($x438 (= $x437 true)))
 (let (($x125 (= $x438 true)))
 (let (($x182 (and $x125 $x181)))
 (let (($x202 (and $x182 $x214)))
 (let (($x259 (and $x202 $x210)))
 (let (($x283 (and $x259 $x257)))
 (let (($x230 (forall ((Lambda155Var (_ BitVec 32)) )(let ((?x174 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x989 (= Lambda155Var input.spec-%var-y-0)))
 (let ((?x1055 (ite $x989 ?x174 (_ bv0 32))))
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x561 (ite $x439 ?x1055 (_ bv0 32))))
 (let (($x517 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let ((?x381 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x381 (_ bv1 32))))
 (=> (and $x213 $x517) (= (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda155Var) ?x561)))))))))))
 ))
 (let (($x252 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x989 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x655 (ite (ite $x439 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x700 (bvuge ?x655 (_ bv1 32))))
 (let ((?x381 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x381 (_ bv1 32))))
 (let (($x517 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x517 (= $x213 $x700)))))))))))
 ))
 (let (($x391 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x517 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x387 (=> $x517 $x279)))
 (let ((?x381 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (= ?x381 (_ bv0 32))))
 (=> (and $x385 $x517) $x279)))))))
 ))
 (let (($x393 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x989 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x655 (ite (ite $x439 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x655 (_ bv0 32))))
 (let ((?x381 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (= ?x381 (_ bv0 32))))
 (let (($x517 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x517 (= $x385 $x650)))))))))))
 ))
 (let (($x517 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x356 (= $x517 $x352)))
 (let (($x279 (= false false)))
 (let (($x500 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x516 (=> $x500 $x279)))
 (let (($x515 (= $x500 $x514)))
 (let (($x513 (and $x515 $x516)))
 (let (($x355 (and $x513 $x356)))
 (let (($x394 (and $x355 $x393)))
 (let (($x396 (and $x394 $x391)))
 (let (($x231 (and $x396 $x252)))
 (let (($x232 (and $x231 $x230)))
 (let (($x284 (and $x232 $x283)))
 (let ((?x174 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x483 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x488 (ite $x439 (ite $x483 ?x174 (_ bv0 32)) (_ bv0 32))))
 (let (($x480 (= input.spec-%tmpvar-6.L1%13%d.2 ?x488)))
 (let (($x464 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x489 (=> $x464 $x480)))
 (let (($x473 (= $x464 $x481)))
 (let (($x574 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x465 (=> $x574 $x279)))
 (let (($x454 (= $x574 $x462)))
 (let (($x469 (and $x454 $x465)))
 (let (($x479 (and $x469 $x473)))
 (let (($x493 (and $x479 $x489)))
 (let (($x289 (and $x493 $x284)))
 (let (($x566 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x174 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x989 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x1055 (ite $x989 ?x174 (_ bv0 32))))
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x561 (ite $x439 ?x1055 (_ bv0 32))))
 (let ((?x660 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (bvuge ?x660 (_ bv1 32))))
 (=> $x535 (= (input.spec-%var-m1-0.L1%13%d.1.1 Lambda157Var) ?x561))))))))))
 ))
 (let (($x534 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x989 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x655 (ite (ite $x439 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x700 (bvuge ?x655 (_ bv1 32))))
 (let ((?x660 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (bvuge ?x660 (_ bv1 32))))
 (= $x535 $x700)))))))))
 ))
 (let (($x677 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x660 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x661 (= ?x660 (_ bv0 32))))
 (=> $x661 $x279)))))
 ))
 (let (($x657 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x989 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x655 (ite (ite $x439 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x655 (_ bv0 32))))
 (let ((?x660 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x661 (= ?x660 (_ bv0 32))))
 (= $x661 $x650)))))))))
 ))
 (let (($x678 (and $x657 $x677)))
 (let (($x536 (and $x678 $x534)))
 (let (($x571 (and $x536 $x566)))
 (let (($x290 (and $x571 $x289)))
 (let (($x591 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x762 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x478 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x789 (bvuge ?x478 (_ bv1 32))))
 (=> (and $x789 $x762) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) (_ bv0 32)))))))
 ))
 (let (($x796 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x912 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x917 (bvuge ?x912 (_ bv1 32))))
 (let ((?x478 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x789 (bvuge ?x478 (_ bv1 32))))
 (let (($x762 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x762 (= $x789 $x917))))))))
 ))
 (let (($x777 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x762 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x478 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x753 (= ?x478 (_ bv0 32))))
 (=> (and $x753 $x762) $x279))))))
 ))
 (let (($x767 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x912 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x913 (= ?x912 (_ bv0 32))))
 (let ((?x478 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x753 (= ?x478 (_ bv0 32))))
 (let (($x762 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x762 (= $x753 $x913))))))))
 ))
 (let (($x717 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x912 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x917 (bvuge ?x912 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x917))))
 ))
 (let (($x839 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x831 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x833 (= ?x831 (_ bv0 32))))
 (=> $x833 $x279)))))
 ))
 (let (($x836 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x912 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x913 (= ?x912 (_ bv0 32))))
 (let ((?x831 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x833 (= ?x831 (_ bv0 32))))
 (= $x833 $x913))))))
 ))
 (let (($x834 (and $x836 $x839)))
 (let (($x718 (and $x834 $x717)))
 (let (($x768 (and $x718 $x767)))
 (let (($x778 (and $x768 $x777)))
 (let (($x797 (and $x778 $x796)))
 (let (($x595 (and $x797 $x591)))
 (let (($x293 (and $x595 $x290)))
 (let (($x940 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x901 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x936 (bvuge ?x901 (_ bv1 32))))
 (=> $x936 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda157Var) (_ bv0 32))))))
 ))
 (let (($x938 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x912 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x917 (bvuge ?x912 (_ bv1 32))))
 (let ((?x901 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x936 (bvuge ?x901 (_ bv1 32))))
 (= $x936 $x917))))))
 ))
 (let (($x915 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x901 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x914 (= ?x901 (_ bv0 32))))
 (=> $x914 $x279)))))
 ))
 (let (($x888 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x912 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x913 (= ?x912 (_ bv0 32))))
 (let ((?x901 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x914 (= ?x901 (_ bv0 32))))
 (= $x914 $x913))))))
 ))
 (let (($x916 (and $x888 $x915)))
 (let (($x939 (and $x916 $x938)))
 (let (($x946 (and $x939 $x940)))
 (let (($x294 (and $x946 $x293)))
 (let (($x885 (= ?x174 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x291 (and $x885 $x294)))
 (let (($x882 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x174 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x989 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x1055 (ite $x989 ?x174 (_ bv0 32))))
 (let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x873 (bvuge ?x107 (_ bv1 32))))
 (=> $x873 (= (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda157Var) ?x1055))))))))
 ))
 (let (($x853 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x989 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let ((?x100 (ite $x990 (_ bv1 32) (_ bv0 32))))
 (let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x873 (bvuge ?x107 (_ bv1 32))))
 (= $x873 (bvuge ?x100 (_ bv1 32)))))))))
 ))
 (let (($x90 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x107 (_ bv0 32))))
 (=> $x86 $x279)))))
 ))
 (let (($x89 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x107 (_ bv0 32))))
 (= $x86 (= (ite (or false (= Lambda157Var input.spec-%var-y-0)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x91 (and $x89 $x90)))
 (let (($x854 (and $x91 $x853)))
 (let (($x883 (and $x854 $x882)))
 (let (($x307 (and $x883 $x291)))
 (let (($x74 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x174 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x989 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x1055 (ite $x989 ?x174 (_ bv0 32))))
 (let (($x991 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x1056 (ite $x991 ?x1055 (_ bv0 32))))
 (let (($x121 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x116 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x116 (_ bv1 32))))
 (=> (and $x82 $x121) (= (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x1056)))))))))))
 ))
 (let (($x75 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x989 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x991 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x992 (ite (ite $x991 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x1030 (bvuge ?x992 (_ bv1 32))))
 (let ((?x116 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x116 (_ bv1 32))))
 (let (($x121 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x121 (= $x82 $x1030)))))))))))
 ))
 (let (($x52 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x121 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x116 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x116 (_ bv0 32))))
 (=> (and $x117 $x121) $x279))))))
 ))
 (let (($x7 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x989 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x991 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x992 (ite (ite $x991 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x993 (= ?x992 (_ bv0 32))))
 (let ((?x116 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x116 (_ bv0 32))))
 (let (($x121 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x121 (= $x117 $x993)))))))))))
 ))
 (let (($x709 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x669 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x761 (bvuge ?x669 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x761))))
 ))
 (let (($x846 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x1088 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1089 (= ?x1088 (_ bv0 32))))
 (=> $x1089 $x279)))))
 ))
 (let (($x1043 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x669 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x670 (= ?x669 (_ bv0 32))))
 (let ((?x1088 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1089 (= ?x1088 (_ bv0 32))))
 (= $x1089 $x670))))))
 ))
 (let (($x847 (and $x1043 $x846)))
 (let (($x710 (and $x847 $x709)))
 (let (($x35 (and $x710 $x7)))
 (let (($x31 (and $x35 $x52)))
 (let (($x39 (and $x31 $x75)))
 (let (($x71 (and $x39 $x74)))
 (let (($x300 (and $x71 $x307)))
 (let (($x1069 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x174 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x989 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x1055 (ite $x989 ?x174 (_ bv0 32))))
 (let (($x991 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x1056 (ite $x991 ?x1055 (_ bv0 32))))
 (let (($x1001 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x995 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1031 (bvuge ?x995 (_ bv1 32))))
 (=> (and $x1031 $x1001) (= (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x1056)))))))))))
 ))
 (let (($x1034 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x989 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x991 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x992 (ite (ite $x991 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x1030 (bvuge ?x992 (_ bv1 32))))
 (let ((?x995 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1031 (bvuge ?x995 (_ bv1 32))))
 (let (($x1001 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x1001 (= $x1031 $x1030)))))))))))
 ))
 (let (($x1008 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x1001 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x995 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x996 (= ?x995 (_ bv0 32))))
 (=> (and $x996 $x1001) $x279))))))
 ))
 (let (($x1002 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x989 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x991 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x992 (ite (ite $x991 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x993 (= ?x992 (_ bv0 32))))
 (let ((?x995 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x996 (= ?x995 (_ bv0 32))))
 (let (($x1001 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x1001 (= $x996 $x993)))))))))))
 ))
 (let (($x765 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x669 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x761 (bvuge ?x669 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x761))))
 ))
 (let (($x690 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x674 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x675 (= ?x674 (_ bv0 32))))
 (=> $x675 $x279)))))
 ))
 (let (($x686 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x669 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x670 (= ?x669 (_ bv0 32))))
 (let ((?x674 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x675 (= ?x674 (_ bv0 32))))
 (= $x675 $x670))))))
 ))
 (let (($x691 (and $x686 $x690)))
 (let (($x783 (and $x691 $x765)))
 (let (($x1003 (and $x783 $x1002)))
 (let (($x1009 (and $x1003 $x1008)))
 (let (($x1035 (and $x1009 $x1034)))
 (let (($x1065 (and $x1035 $x1069)))
 (let (($x305 (and $x1065 $x300)))
 (let (($x314 (and $x279 $x305)))
 (let (($x429 (= input.spec-%var-m2-0.L1%18%bbentry ?x488)))
 (let (($x315 (and $x429 $x314)))
 (let (($x317 (and $x279 $x315)))
 (let (($x1093 (=> $x317 $x1092)))
 (not $x1093)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x463 (ite $x439 (or false (= input.spec-%var-y-0 input.spec-%var-y-0)) false)))
 (let ((?x461 (ite $x463 (_ bv1 32) (_ bv0 32))))
 (let (($x481 (bvuge ?x461 (_ bv1 32))))
 (let (($x462 (= ?x461 (_ bv0 32))))
 (let (($x326 (or $x462 $x481)))
 (let ((?x512 (ite (or false $x439) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x512 (_ bv1 32))))
 (let (($x322 (and $x352 $x326)))
 (let (($x514 (= ?x512 (_ bv0 32))))
 (let (($x329 (or $x514 $x322)))
 (let (($x330 (or false $x329)))
 (let (($x1091 (= $x330 true)))
 (let (($x1092 (= $x1091 true)))
 (let (($x260 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x261 (= $x260 true)))
 (let (($x244 (= $x261 true)))
 (let (($x257 (= $x244 true)))
 (let (($x207 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x215 (= $x207 true)))
 (let (($x216 (= $x215 true)))
 (let (($x210 (= $x216 true)))
 (let ((?x190 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x205 (concat ?x212 (concat ?x201 (concat ?x200 ?x190)))))
 (let (($x208 (= ?x205 input.dst.llvm-%y)))
 (let (($x209 (= $x208 true)))
 (let (($x214 (= $x209 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x145 (concat ?x127 (concat ?x131 ?x128)))))
 (let (($x176 (= ?x144 input.dst.llvm-%x)))
 (let (($x180 (= $x176 true)))
 (let (($x181 (= $x180 true)))
 (let ((?x323 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x324 (= (_ bv0 32) ?x323)))
 (let ((?x321 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x320 (= (_ bv0 32) ?x321)))
 (let ((?x435 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x319 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x435)))
 (let ((?x422 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x425 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x422)))
 (let (($x427 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x432 (and $x427 $x425)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x433 (and $x292 $x432)))
 (let (($x295 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x421 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x298 (and $x421 $x296)))
 (let (($x297 (not $x298)))
 (let (($x423 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x420 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x424 (and $x420 $x423)))
 (let (($x302 (and (not $x424) $x297)))
 (let (($x395 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x399 (and $x266 $x395)))
 (let (($x413 (not $x399)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x403 $x263)))
 (let (($x419 (and (not $x264) $x413)))
 (let (($x328 (and (and (and (and (and (and $x419 $x302) $x304) $x295) $x433) $x319) $x320)))
 (let (($x434 (and $x328 $x324)))
 (let (($x437 (= $x434 true)))
 (let (($x438 (= $x437 true)))
 (let (($x125 (= $x438 true)))
 (let (($x182 (and $x125 $x181)))
 (let (($x202 (and $x182 $x214)))
 (let (($x259 (and $x202 $x210)))
 (let (($x283 (and $x259 $x257)))
 (let (($x230 (forall ((Lambda155Var (_ BitVec 32)) )(let ((?x174 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x989 (= Lambda155Var input.spec-%var-y-0)))
 (let ((?x1055 (ite $x989 ?x174 (_ bv0 32))))
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x561 (ite $x439 ?x1055 (_ bv0 32))))
 (let (($x517 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let ((?x381 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x381 (_ bv1 32))))
 (=> (and $x213 $x517) (= (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda155Var) ?x561)))))))))))
 ))
 (let (($x252 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x989 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x655 (ite (ite $x439 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x700 (bvuge ?x655 (_ bv1 32))))
 (let ((?x381 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x381 (_ bv1 32))))
 (let (($x517 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x517 (= $x213 $x700)))))))))))
 ))
 (let (($x391 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x517 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x387 (=> $x517 $x279)))
 (let ((?x381 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (= ?x381 (_ bv0 32))))
 (=> (and $x385 $x517) $x279)))))))
 ))
 (let (($x393 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x989 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x655 (ite (ite $x439 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x655 (_ bv0 32))))
 (let ((?x381 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (= ?x381 (_ bv0 32))))
 (let (($x517 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x517 (= $x385 $x650)))))))))))
 ))
 (let (($x517 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x356 (= $x517 $x352)))
 (let (($x279 (= false false)))
 (let (($x500 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x516 (=> $x500 $x279)))
 (let (($x515 (= $x500 $x514)))
 (let (($x513 (and $x515 $x516)))
 (let (($x355 (and $x513 $x356)))
 (let (($x394 (and $x355 $x393)))
 (let (($x396 (and $x394 $x391)))
 (let (($x231 (and $x396 $x252)))
 (let (($x232 (and $x231 $x230)))
 (let (($x284 (and $x232 $x283)))
 (let ((?x174 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x483 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x488 (ite $x439 (ite $x483 ?x174 (_ bv0 32)) (_ bv0 32))))
 (let (($x480 (= input.spec-%tmpvar-6.L1%13%d.2 ?x488)))
 (let (($x464 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x489 (=> $x464 $x480)))
 (let (($x473 (= $x464 $x481)))
 (let (($x574 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x465 (=> $x574 $x279)))
 (let (($x454 (= $x574 $x462)))
 (let (($x469 (and $x454 $x465)))
 (let (($x479 (and $x469 $x473)))
 (let (($x493 (and $x479 $x489)))
 (let (($x289 (and $x493 $x284)))
 (let (($x566 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x174 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x989 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x1055 (ite $x989 ?x174 (_ bv0 32))))
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x561 (ite $x439 ?x1055 (_ bv0 32))))
 (let ((?x660 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (bvuge ?x660 (_ bv1 32))))
 (=> $x535 (= (input.spec-%var-m1-0.L1%13%d.1.1 Lambda157Var) ?x561))))))))))
 ))
 (let (($x534 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x989 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x655 (ite (ite $x439 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x700 (bvuge ?x655 (_ bv1 32))))
 (let ((?x660 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (bvuge ?x660 (_ bv1 32))))
 (= $x535 $x700)))))))))
 ))
 (let (($x677 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x660 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x661 (= ?x660 (_ bv0 32))))
 (=> $x661 $x279)))))
 ))
 (let (($x657 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x989 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x439 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x655 (ite (ite $x439 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x655 (_ bv0 32))))
 (let ((?x660 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x661 (= ?x660 (_ bv0 32))))
 (= $x661 $x650)))))))))
 ))
 (let (($x678 (and $x657 $x677)))
 (let (($x536 (and $x678 $x534)))
 (let (($x571 (and $x536 $x566)))
 (let (($x290 (and $x571 $x289)))
 (let (($x591 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x762 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x478 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x789 (bvuge ?x478 (_ bv1 32))))
 (=> (and $x789 $x762) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) (_ bv0 32)))))))
 ))
 (let (($x796 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x912 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x917 (bvuge ?x912 (_ bv1 32))))
 (let ((?x478 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x789 (bvuge ?x478 (_ bv1 32))))
 (let (($x762 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x762 (= $x789 $x917))))))))
 ))
 (let (($x777 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x762 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x478 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x753 (= ?x478 (_ bv0 32))))
 (=> (and $x753 $x762) $x279))))))
 ))
 (let (($x767 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x912 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x913 (= ?x912 (_ bv0 32))))
 (let ((?x478 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x753 (= ?x478 (_ bv0 32))))
 (let (($x762 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x762 (= $x753 $x913))))))))
 ))
 (let (($x717 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x912 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x917 (bvuge ?x912 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x917))))
 ))
 (let (($x839 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x831 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x833 (= ?x831 (_ bv0 32))))
 (=> $x833 $x279)))))
 ))
 (let (($x836 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x912 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x913 (= ?x912 (_ bv0 32))))
 (let ((?x831 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x833 (= ?x831 (_ bv0 32))))
 (= $x833 $x913))))))
 ))
 (let (($x834 (and $x836 $x839)))
 (let (($x718 (and $x834 $x717)))
 (let (($x768 (and $x718 $x767)))
 (let (($x778 (and $x768 $x777)))
 (let (($x797 (and $x778 $x796)))
 (let (($x595 (and $x797 $x591)))
 (let (($x293 (and $x595 $x290)))
 (let (($x940 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x901 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x936 (bvuge ?x901 (_ bv1 32))))
 (=> $x936 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda157Var) (_ bv0 32))))))
 ))
 (let (($x938 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x912 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x917 (bvuge ?x912 (_ bv1 32))))
 (let ((?x901 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x936 (bvuge ?x901 (_ bv1 32))))
 (= $x936 $x917))))))
 ))
 (let (($x915 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x901 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x914 (= ?x901 (_ bv0 32))))
 (=> $x914 $x279)))))
 ))
 (let (($x888 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x912 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x913 (= ?x912 (_ bv0 32))))
 (let ((?x901 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x914 (= ?x901 (_ bv0 32))))
 (= $x914 $x913))))))
 ))
 (let (($x916 (and $x888 $x915)))
 (let (($x939 (and $x916 $x938)))
 (let (($x946 (and $x939 $x940)))
 (let (($x294 (and $x946 $x293)))
 (let (($x885 (= ?x174 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x291 (and $x885 $x294)))
 (let (($x882 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x174 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x989 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x1055 (ite $x989 ?x174 (_ bv0 32))))
 (let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x873 (bvuge ?x107 (_ bv1 32))))
 (=> $x873 (= (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda157Var) ?x1055))))))))
 ))
 (let (($x853 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x989 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let ((?x100 (ite $x990 (_ bv1 32) (_ bv0 32))))
 (let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x873 (bvuge ?x107 (_ bv1 32))))
 (= $x873 (bvuge ?x100 (_ bv1 32)))))))))
 ))
 (let (($x90 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x107 (_ bv0 32))))
 (=> $x86 $x279)))))
 ))
 (let (($x89 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x107 (_ bv0 32))))
 (= $x86 (= (ite (or false (= Lambda157Var input.spec-%var-y-0)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x91 (and $x89 $x90)))
 (let (($x854 (and $x91 $x853)))
 (let (($x883 (and $x854 $x882)))
 (let (($x307 (and $x883 $x291)))
 (let (($x74 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x174 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x989 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x1055 (ite $x989 ?x174 (_ bv0 32))))
 (let (($x991 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x1056 (ite $x991 ?x1055 (_ bv0 32))))
 (let (($x121 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x116 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x116 (_ bv1 32))))
 (=> (and $x82 $x121) (= (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x1056)))))))))))
 ))
 (let (($x75 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x989 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x991 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x992 (ite (ite $x991 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x1030 (bvuge ?x992 (_ bv1 32))))
 (let ((?x116 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x116 (_ bv1 32))))
 (let (($x121 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x121 (= $x82 $x1030)))))))))))
 ))
 (let (($x52 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x121 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x116 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x116 (_ bv0 32))))
 (=> (and $x117 $x121) $x279))))))
 ))
 (let (($x7 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x989 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x991 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x992 (ite (ite $x991 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x993 (= ?x992 (_ bv0 32))))
 (let ((?x116 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x116 (_ bv0 32))))
 (let (($x121 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x121 (= $x117 $x993)))))))))))
 ))
 (let (($x709 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x669 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x761 (bvuge ?x669 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x761))))
 ))
 (let (($x846 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x1088 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1089 (= ?x1088 (_ bv0 32))))
 (=> $x1089 $x279)))))
 ))
 (let (($x1043 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x669 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x670 (= ?x669 (_ bv0 32))))
 (let ((?x1088 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1089 (= ?x1088 (_ bv0 32))))
 (= $x1089 $x670))))))
 ))
 (let (($x847 (and $x1043 $x846)))
 (let (($x710 (and $x847 $x709)))
 (let (($x35 (and $x710 $x7)))
 (let (($x31 (and $x35 $x52)))
 (let (($x39 (and $x31 $x75)))
 (let (($x71 (and $x39 $x74)))
 (let (($x300 (and $x71 $x307)))
 (let (($x1069 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x174 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x989 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x1055 (ite $x989 ?x174 (_ bv0 32))))
 (let (($x991 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x1056 (ite $x991 ?x1055 (_ bv0 32))))
 (let (($x1001 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x995 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1031 (bvuge ?x995 (_ bv1 32))))
 (=> (and $x1031 $x1001) (= (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x1056)))))))))))
 ))
 (let (($x1034 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x989 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x991 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x992 (ite (ite $x991 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x1030 (bvuge ?x992 (_ bv1 32))))
 (let ((?x995 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1031 (bvuge ?x995 (_ bv1 32))))
 (let (($x1001 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x1001 (= $x1031 $x1030)))))))))))
 ))
 (let (($x1008 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x1001 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x995 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x996 (= ?x995 (_ bv0 32))))
 (=> (and $x996 $x1001) $x279))))))
 ))
 (let (($x1002 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x989 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x990 (or false $x989)))
 (let (($x991 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x992 (ite (ite $x991 $x990 false) (_ bv1 32) (_ bv0 32))))
 (let (($x993 (= ?x992 (_ bv0 32))))
 (let ((?x995 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x996 (= ?x995 (_ bv0 32))))
 (let (($x1001 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x1001 (= $x996 $x993)))))))))))
 ))
 (let (($x765 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x669 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x761 (bvuge ?x669 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x761))))
 ))
 (let (($x690 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x674 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x675 (= ?x674 (_ bv0 32))))
 (=> $x675 $x279)))))
 ))
 (let (($x686 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x669 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x670 (= ?x669 (_ bv0 32))))
 (let ((?x674 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x675 (= ?x674 (_ bv0 32))))
 (= $x675 $x670))))))
 ))
 (let (($x691 (and $x686 $x690)))
 (let (($x783 (and $x691 $x765)))
 (let (($x1003 (and $x783 $x1002)))
 (let (($x1009 (and $x1003 $x1008)))
 (let (($x1035 (and $x1009 $x1034)))
 (let (($x1065 (and $x1035 $x1069)))
 (let (($x305 (and $x1065 $x300)))
 (let (($x314 (and $x279 $x305)))
 (let (($x429 (= input.spec-%var-m2-0.L1%18%bbentry ?x488)))
 (let (($x315 (and $x429 $x314)))
 (let (($x317 (and $x279 $x315)))
 (let (($x1093 (=> $x317 $x1092)))
 (not $x1093)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888340/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x664 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x108 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x89 (ite $x73 (ite $x108 ?x664 (_ bv0 32)) (_ bv0 32))))
 (let ((?x1022 (bvadd input.dst.llvm-%x input.dst.llvm-%y)))
 (let (($x1036 (= ?x1022 ?x89)))
 (let (($x1037 (= $x1036 true)))
 (let (($x1039 (= $x1037 true)))
 (let ((?x1047 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x521 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x527 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x542 (concat ?x527 (concat ?x521 (concat ?x66 ?x1047)))))
 (let (($x822 (= ?x542 input.dst.llvm-%x)))
 (let (($x823 (= $x822 true)))
 (let (($x824 (= $x823 true)))
 (let ((?x525 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x526 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x578 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x688 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x701 (concat ?x688 (concat ?x578 (concat ?x526 ?x525)))))
 (let (($x810 (= ?x701 input.dst.llvm-%y)))
 (let (($x817 (= $x810 true)))
 (let (($x803 (= $x817 true)))
 (let (($x702 (= input.dst.llvm-%y ?x701)))
 (let (($x552 (= input.dst.llvm-%x ?x542)))
 (let (($x703 (and $x552 $x702)))
 (let ((?x1050 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1051 (= (_ bv0 32) ?x1050)))
 (let ((?x1042 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x1049 (= (_ bv0 32) ?x1042)))
 (let ((?x1041 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x1053 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1041)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x1024 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x1024 $x12)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x68 $x16)))
 (let (($x1027 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x1018 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x1029 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x1015 (and $x41 $x59)))
 (let (($x1017 (not $x1015)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x21 $x38)))
 (let (($x1019 (and (not $x55) $x1017)))
 (let (($x988 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x987 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x449 (and $x987 $x988)))
 (let (($x342 (not $x449)))
 (let (($x984 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x345 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x985 (and $x345 $x984)))
 (let (($x53 (and (not $x985) $x342)))
 (let (($x802 (and (and (and (and (and (and $x53 $x1019) $x1029) $x1018) $x1027) $x45) $x1053)))
 (let (($x825 (and (and (and $x802 $x1049) $x1051) $x703)))
 (let (($x860 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x826 (and $x860 $x825)))
 (let (($x805 (= $x826 true)))
 (let (($x806 (= $x805 true)))
 (let (($x808 (= $x806 true)))
 (let (($x807 (and $x808 $x803)))
 (let (($x981 (and $x807 $x824)))
 (let ((?x26 (ite (ite $x73 (or false $x108) false) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x26 (_ bv1 32))))
 (let ((?x102 (ite (or false $x73) (_ bv1 32) (_ bv0 32))))
 (let (($x1074 (bvuge ?x102 (_ bv1 32))))
 (let (($x978 (and $x1074 $x69)))
 (let (($x982 (and $x978 $x981)))
 (let (($x957 (forall ((Lambda155Var (_ BitVec 32)) )(let ((?x664 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x266 (= Lambda155Var input.spec-%var-y-0)))
 (let ((?x190 (ite $x266 ?x664 (_ bv0 32))))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x905 (ite $x73 ?x190 (_ bv0 32))))
 (let (($x865 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let ((?x875 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x840 (bvuge ?x875 (_ bv1 32))))
 (=> (and $x840 $x865) (= (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda155Var) ?x905)))))))))))
 ))
 (let (($x827 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x266 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x724 (ite (ite $x73 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x790 (bvuge ?x724 (_ bv1 32))))
 (let ((?x875 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x840 (bvuge ?x875 (_ bv1 32))))
 (let (($x865 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x865 (= $x840 $x790)))))))))))
 ))
 (let (($x448 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x865 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x584 (=> $x865 $x279)))
 (let ((?x875 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x756 (= ?x875 (_ bv0 32))))
 (=> (and $x756 $x865) $x279)))))))
 ))
 (let (($x582 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x266 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x724 (ite (ite $x73 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x737 (= ?x724 (_ bv0 32))))
 (let ((?x875 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x756 (= ?x875 (_ bv0 32))))
 (let (($x865 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x865 (= $x756 $x737)))))))))))
 ))
 (let (($x865 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x1071 (= $x865 $x1074)))
 (let (($x279 (= false false)))
 (let (($x109 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x855 (=> $x109 $x279)))
 (let (($x85 (= $x109 (= ?x102 (_ bv0 32)))))
 (let (($x856 (and $x85 $x855)))
 (let (($x1072 (and $x856 $x1071)))
 (let (($x586 (and $x1072 $x582)))
 (let (($x588 (and $x586 $x448)))
 (let (($x933 (and $x588 $x827)))
 (let (($x930 (and $x933 $x957)))
 (let (($x983 (and $x930 $x982)))
 (let (($x49 (= input.spec-%tmpvar-6.L1%13%d.2 ?x89)))
 (let (($x62 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x9 (=> $x62 $x49)))
 (let (($x50 (= $x62 $x69)))
 (let (($x932 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x67 (=> $x932 $x279)))
 (let (($x54 (= $x932 (= ?x26 (_ bv0 32)))))
 (let (($x37 (and $x54 $x67)))
 (let (($x8 (and $x37 $x50)))
 (let (($x83 (and $x8 $x9)))
 (let (($x931 (and $x83 $x983)))
 (let (($x922 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x664 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x266 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x190 (ite $x266 ?x664 (_ bv0 32))))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x905 (ite $x73 ?x190 (_ bv0 32))))
 (let ((?x742 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x799 (bvuge ?x742 (_ bv1 32))))
 (=> $x799 (= (input.spec-%var-m1-0.L1%13%d.1.1 Lambda157Var) ?x905))))))))))
 ))
 (let (($x114 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x266 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x724 (ite (ite $x73 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x790 (bvuge ?x724 (_ bv1 32))))
 (let ((?x742 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x799 (bvuge ?x742 (_ bv1 32))))
 (= $x799 $x790)))))))))
 ))
 (let (($x721 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x742 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (= ?x742 (_ bv0 32))))
 (=> $x734 $x279)))))
 ))
 (let (($x748 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x266 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x724 (ite (ite $x73 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x737 (= ?x724 (_ bv0 32))))
 (let ((?x742 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (= ?x742 (_ bv0 32))))
 (= $x734 $x737)))))))))
 ))
 (let (($x723 (and $x748 $x721)))
 (let (($x892 (and $x723 $x114)))
 (let (($x923 (and $x892 $x922)))
 (let (($x979 (and $x923 $x931)))
 (let (($x782 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x651 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x635 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x635 (_ bv1 32))))
 (=> (and $x695 $x651) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) (_ bv0 32)))))))
 ))
 (let (($x538 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x161 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x161 (_ bv1 32))))
 (let ((?x635 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x635 (_ bv1 32))))
 (let (($x651 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x651 (= $x695 $x375))))))))
 ))
 (let (($x683 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x651 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x635 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (= ?x635 (_ bv0 32))))
 (=> (and $x648 $x651) $x279))))))
 ))
 (let (($x653 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x161 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x161 (_ bv0 32))))
 (let ((?x635 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (= ?x635 (_ bv0 32))))
 (let (($x651 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x651 (= $x648 $x149))))))))
 ))
 (let (($x594 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x161 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x161 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x375))))
 ))
 (let (($x470 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x458 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x458 (_ bv0 32))))
 (=> $x452 $x279)))))
 ))
 (let (($x575 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x161 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x161 (_ bv0 32))))
 (let ((?x458 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x458 (_ bv0 32))))
 (= $x452 $x149))))))
 ))
 (let (($x460 (and $x575 $x470)))
 (let (($x597 (and $x460 $x594)))
 (let (($x644 (and $x597 $x653)))
 (let (($x684 (and $x644 $x683)))
 (let (($x543 (and $x684 $x538)))
 (let (($x969 (and $x543 $x782)))
 (let (($x1004 (and $x969 $x979)))
 (let (($x220 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x146 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x382 (bvuge ?x146 (_ bv1 32))))
 (=> $x382 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda157Var) (_ bv0 32))))))
 ))
 (let (($x188 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x161 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x161 (_ bv1 32))))
 (let ((?x146 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x382 (bvuge ?x146 (_ bv1 32))))
 (= $x382 $x375))))))
 ))
 (let (($x360 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x146 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x146 (_ bv0 32))))
 (=> $x163 $x279)))))
 ))
 (let (($x361 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x161 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x161 (_ bv0 32))))
 (let ((?x146 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x146 (_ bv0 32))))
 (= $x163 $x149))))))
 ))
 (let (($x158 (and $x361 $x360)))
 (let (($x388 (and $x158 $x188)))
 (let (($x227 (and $x388 $x220)))
 (let (($x1005 (and $x227 $x1004)))
 (let (($x134 (= ?x664 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x1026 (and $x134 $x1005)))
 (let (($x138 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x664 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x266 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x190 (ite $x266 ?x664 (_ bv0 32))))
 (let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x440 (bvuge ?x312 (_ bv1 32))))
 (=> $x440 (= (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda157Var) ?x190))))))))
 ))
 (let (($x400 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x266 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let ((?x407 (ite $x395 (_ bv1 32) (_ bv0 32))))
 (let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x440 (bvuge ?x312 (_ bv1 32))))
 (= $x440 (bvuge ?x407 (_ bv1 32)))))))))
 ))
 (let (($x417 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x431 (= ?x312 (_ bv0 32))))
 (=> $x431 $x279)))))
 ))
 (let (($x441 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x431 (= ?x312 (_ bv0 32))))
 (= $x431 (= (ite (or false (= Lambda157Var input.spec-%var-y-0)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x410 (and $x441 $x417)))
 (let (($x405 (and $x410 $x400)))
 (let (($x140 (and $x405 $x138)))
 (let (($x1010 (and $x140 $x1026)))
 (let (($x275 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x664 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x266 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x190 (ite $x266 ?x664 (_ bv0 32))))
 (let (($x399 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x199 (ite $x399 ?x190 (_ bv0 32))))
 (let (($x507 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x1064 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x1064 (_ bv1 32))))
 (=> (and $x173 $x507) (= (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x199)))))))))))
 ))
 (let (($x177 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x266 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x399 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x419 (ite (ite $x399 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x419 (_ bv1 32))))
 (let ((?x1064 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x1064 (_ bv1 32))))
 (let (($x507 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x507 (= $x173 $x438)))))))))))
 ))
 (let (($x111 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x507 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x1064 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1067 (= ?x1064 (_ bv0 32))))
 (=> (and $x1067 $x507) $x279))))))
 ))
 (let (($x508 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x266 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x399 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x419 (ite (ite $x399 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x420 (= ?x419 (_ bv0 32))))
 (let ((?x1064 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1067 (= ?x1064 (_ bv0 32))))
 (let (($x507 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x507 (= $x1067 $x420)))))))))))
 ))
 (let (($x353 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x767 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x767 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x657))))
 ))
 (let (($x1094 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x322 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x322 (_ bv0 32))))
 (=> $x329 $x279)))))
 ))
 (let (($x1091 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x767 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x768 (= ?x767 (_ bv0 32))))
 (let ((?x322 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x322 (_ bv0 32))))
 (= $x329 $x768))))))
 ))
 (let (($x123 (and $x1091 $x1094)))
 (let (($x354 (and $x123 $x353)))
 (let (($x509 (and $x354 $x508)))
 (let (($x64 (and $x509 $x111)))
 (let (($x47 (and $x64 $x177)))
 (let (($x271 (and $x47 $x275)))
 (let (($x1012 (and $x271 $x1010)))
 (let (($x209 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x664 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x266 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x190 (ite $x266 ?x664 (_ bv0 32))))
 (let (($x399 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x199 (ite $x399 ?x190 (_ bv0 32))))
 (let (($x297 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x424 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x424 (_ bv1 32))))
 (=> (and $x150 $x297) (= (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x199)))))))))))
 ))
 (let (($x129 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x266 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x399 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x419 (ite (ite $x399 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x419 (_ bv1 32))))
 (let ((?x424 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x424 (_ bv1 32))))
 (let (($x297 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x297 (= $x150 $x438)))))))))))
 ))
 (let (($x316 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x297 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x424 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x301 (= ?x424 (_ bv0 32))))
 (=> (and $x301 $x297) $x279))))))
 ))
 (let (($x325 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x266 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x399 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x419 (ite (ite $x399 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x420 (= ?x419 (_ bv0 32))))
 (let ((?x424 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x301 (= ?x424 (_ bv0 32))))
 (let (($x297 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x297 (= $x301 $x420)))))))))))
 ))
 (let (($x678 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x767 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x767 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x657))))
 ))
 (let (($x796 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x773 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x777 (= ?x773 (_ bv0 32))))
 (=> $x777 $x279)))))
 ))
 (let (($x789 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x767 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x768 (= ?x767 (_ bv0 32))))
 (let ((?x773 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x777 (= ?x773 (_ bv0 32))))
 (= $x777 $x768))))))
 ))
 (let (($x797 (and $x789 $x796)))
 (let (($x535 (and $x797 $x678)))
 (let (($x303 (and $x535 $x325)))
 (let (($x292 (and $x303 $x316)))
 (let (($x127 (and $x292 $x129)))
 (let (($x214 (and $x127 $x209)))
 (let (($x1013 (and $x214 $x1012)))
 (let (($x1011 (and $x279 $x1013)))
 (let (($x24 (= input.spec-%var-m2-0.L1%18%bbentry ?x89)))
 (let (($x1023 (and $x24 $x1011)))
 (let (($x1028 (and $x279 $x1023)))
 (let (($x1046 (=> $x1028 $x1039)))
 (not $x1046))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x664 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x108 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x89 (ite $x73 (ite $x108 ?x664 (_ bv0 32)) (_ bv0 32))))
 (let ((?x1022 (bvadd input.dst.llvm-%x input.dst.llvm-%y)))
 (let (($x1036 (= ?x1022 ?x89)))
 (let (($x1037 (= $x1036 true)))
 (let (($x1039 (= $x1037 true)))
 (let ((?x1047 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x521 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x527 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x542 (concat ?x527 (concat ?x521 (concat ?x66 ?x1047)))))
 (let (($x822 (= ?x542 input.dst.llvm-%x)))
 (let (($x823 (= $x822 true)))
 (let (($x824 (= $x823 true)))
 (let ((?x525 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x526 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x578 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x688 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x701 (concat ?x688 (concat ?x578 (concat ?x526 ?x525)))))
 (let (($x810 (= ?x701 input.dst.llvm-%y)))
 (let (($x817 (= $x810 true)))
 (let (($x803 (= $x817 true)))
 (let (($x702 (= input.dst.llvm-%y ?x701)))
 (let (($x552 (= input.dst.llvm-%x ?x542)))
 (let (($x703 (and $x552 $x702)))
 (let ((?x1050 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1051 (= (_ bv0 32) ?x1050)))
 (let ((?x1042 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x1049 (= (_ bv0 32) ?x1042)))
 (let ((?x1041 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x1053 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1041)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x1024 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x1024 $x12)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x68 $x16)))
 (let (($x1027 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x1018 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x1029 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x1015 (and $x41 $x59)))
 (let (($x1017 (not $x1015)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x21 $x38)))
 (let (($x1019 (and (not $x55) $x1017)))
 (let (($x988 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x987 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x449 (and $x987 $x988)))
 (let (($x342 (not $x449)))
 (let (($x984 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x345 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x985 (and $x345 $x984)))
 (let (($x53 (and (not $x985) $x342)))
 (let (($x802 (and (and (and (and (and (and $x53 $x1019) $x1029) $x1018) $x1027) $x45) $x1053)))
 (let (($x825 (and (and (and $x802 $x1049) $x1051) $x703)))
 (let (($x860 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x826 (and $x860 $x825)))
 (let (($x805 (= $x826 true)))
 (let (($x806 (= $x805 true)))
 (let (($x808 (= $x806 true)))
 (let (($x807 (and $x808 $x803)))
 (let (($x981 (and $x807 $x824)))
 (let ((?x26 (ite (ite $x73 (or false $x108) false) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x26 (_ bv1 32))))
 (let ((?x102 (ite (or false $x73) (_ bv1 32) (_ bv0 32))))
 (let (($x1074 (bvuge ?x102 (_ bv1 32))))
 (let (($x978 (and $x1074 $x69)))
 (let (($x982 (and $x978 $x981)))
 (let (($x957 (forall ((Lambda155Var (_ BitVec 32)) )(let ((?x664 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x266 (= Lambda155Var input.spec-%var-y-0)))
 (let ((?x190 (ite $x266 ?x664 (_ bv0 32))))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x905 (ite $x73 ?x190 (_ bv0 32))))
 (let (($x865 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let ((?x875 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x840 (bvuge ?x875 (_ bv1 32))))
 (=> (and $x840 $x865) (= (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda155Var) ?x905)))))))))))
 ))
 (let (($x827 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x266 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x724 (ite (ite $x73 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x790 (bvuge ?x724 (_ bv1 32))))
 (let ((?x875 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x840 (bvuge ?x875 (_ bv1 32))))
 (let (($x865 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x865 (= $x840 $x790)))))))))))
 ))
 (let (($x448 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x865 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x584 (=> $x865 $x279)))
 (let ((?x875 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x756 (= ?x875 (_ bv0 32))))
 (=> (and $x756 $x865) $x279)))))))
 ))
 (let (($x582 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x266 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x724 (ite (ite $x73 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x737 (= ?x724 (_ bv0 32))))
 (let ((?x875 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x756 (= ?x875 (_ bv0 32))))
 (let (($x865 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x865 (= $x756 $x737)))))))))))
 ))
 (let (($x865 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x1071 (= $x865 $x1074)))
 (let (($x279 (= false false)))
 (let (($x109 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x855 (=> $x109 $x279)))
 (let (($x85 (= $x109 (= ?x102 (_ bv0 32)))))
 (let (($x856 (and $x85 $x855)))
 (let (($x1072 (and $x856 $x1071)))
 (let (($x586 (and $x1072 $x582)))
 (let (($x588 (and $x586 $x448)))
 (let (($x933 (and $x588 $x827)))
 (let (($x930 (and $x933 $x957)))
 (let (($x983 (and $x930 $x982)))
 (let (($x49 (= input.spec-%tmpvar-6.L1%13%d.2 ?x89)))
 (let (($x62 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x9 (=> $x62 $x49)))
 (let (($x50 (= $x62 $x69)))
 (let (($x932 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x67 (=> $x932 $x279)))
 (let (($x54 (= $x932 (= ?x26 (_ bv0 32)))))
 (let (($x37 (and $x54 $x67)))
 (let (($x8 (and $x37 $x50)))
 (let (($x83 (and $x8 $x9)))
 (let (($x931 (and $x83 $x983)))
 (let (($x922 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x664 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x266 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x190 (ite $x266 ?x664 (_ bv0 32))))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x905 (ite $x73 ?x190 (_ bv0 32))))
 (let ((?x742 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x799 (bvuge ?x742 (_ bv1 32))))
 (=> $x799 (= (input.spec-%var-m1-0.L1%13%d.1.1 Lambda157Var) ?x905))))))))))
 ))
 (let (($x114 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x266 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x724 (ite (ite $x73 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x790 (bvuge ?x724 (_ bv1 32))))
 (let ((?x742 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x799 (bvuge ?x742 (_ bv1 32))))
 (= $x799 $x790)))))))))
 ))
 (let (($x721 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x742 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (= ?x742 (_ bv0 32))))
 (=> $x734 $x279)))))
 ))
 (let (($x748 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x266 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x73 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x724 (ite (ite $x73 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x737 (= ?x724 (_ bv0 32))))
 (let ((?x742 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (= ?x742 (_ bv0 32))))
 (= $x734 $x737)))))))))
 ))
 (let (($x723 (and $x748 $x721)))
 (let (($x892 (and $x723 $x114)))
 (let (($x923 (and $x892 $x922)))
 (let (($x979 (and $x923 $x931)))
 (let (($x782 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x651 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x635 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x635 (_ bv1 32))))
 (=> (and $x695 $x651) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) (_ bv0 32)))))))
 ))
 (let (($x538 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x161 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x161 (_ bv1 32))))
 (let ((?x635 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x635 (_ bv1 32))))
 (let (($x651 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x651 (= $x695 $x375))))))))
 ))
 (let (($x683 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x651 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x635 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (= ?x635 (_ bv0 32))))
 (=> (and $x648 $x651) $x279))))))
 ))
 (let (($x653 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x161 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x161 (_ bv0 32))))
 (let ((?x635 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (= ?x635 (_ bv0 32))))
 (let (($x651 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x651 (= $x648 $x149))))))))
 ))
 (let (($x594 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x161 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x161 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x375))))
 ))
 (let (($x470 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x458 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x458 (_ bv0 32))))
 (=> $x452 $x279)))))
 ))
 (let (($x575 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x161 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x161 (_ bv0 32))))
 (let ((?x458 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x458 (_ bv0 32))))
 (= $x452 $x149))))))
 ))
 (let (($x460 (and $x575 $x470)))
 (let (($x597 (and $x460 $x594)))
 (let (($x644 (and $x597 $x653)))
 (let (($x684 (and $x644 $x683)))
 (let (($x543 (and $x684 $x538)))
 (let (($x969 (and $x543 $x782)))
 (let (($x1004 (and $x969 $x979)))
 (let (($x220 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x146 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x382 (bvuge ?x146 (_ bv1 32))))
 (=> $x382 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda157Var) (_ bv0 32))))))
 ))
 (let (($x188 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x161 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x161 (_ bv1 32))))
 (let ((?x146 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x382 (bvuge ?x146 (_ bv1 32))))
 (= $x382 $x375))))))
 ))
 (let (($x360 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x146 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x146 (_ bv0 32))))
 (=> $x163 $x279)))))
 ))
 (let (($x361 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x161 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x161 (_ bv0 32))))
 (let ((?x146 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x146 (_ bv0 32))))
 (= $x163 $x149))))))
 ))
 (let (($x158 (and $x361 $x360)))
 (let (($x388 (and $x158 $x188)))
 (let (($x227 (and $x388 $x220)))
 (let (($x1005 (and $x227 $x1004)))
 (let (($x134 (= ?x664 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x1026 (and $x134 $x1005)))
 (let (($x138 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x664 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x266 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x190 (ite $x266 ?x664 (_ bv0 32))))
 (let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x440 (bvuge ?x312 (_ bv1 32))))
 (=> $x440 (= (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda157Var) ?x190))))))))
 ))
 (let (($x400 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x266 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let ((?x407 (ite $x395 (_ bv1 32) (_ bv0 32))))
 (let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x440 (bvuge ?x312 (_ bv1 32))))
 (= $x440 (bvuge ?x407 (_ bv1 32)))))))))
 ))
 (let (($x417 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x431 (= ?x312 (_ bv0 32))))
 (=> $x431 $x279)))))
 ))
 (let (($x441 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x431 (= ?x312 (_ bv0 32))))
 (= $x431 (= (ite (or false (= Lambda157Var input.spec-%var-y-0)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x410 (and $x441 $x417)))
 (let (($x405 (and $x410 $x400)))
 (let (($x140 (and $x405 $x138)))
 (let (($x1010 (and $x140 $x1026)))
 (let (($x275 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x664 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x266 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x190 (ite $x266 ?x664 (_ bv0 32))))
 (let (($x399 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x199 (ite $x399 ?x190 (_ bv0 32))))
 (let (($x507 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x1064 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x1064 (_ bv1 32))))
 (=> (and $x173 $x507) (= (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x199)))))))))))
 ))
 (let (($x177 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x266 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x399 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x419 (ite (ite $x399 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x419 (_ bv1 32))))
 (let ((?x1064 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x1064 (_ bv1 32))))
 (let (($x507 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x507 (= $x173 $x438)))))))))))
 ))
 (let (($x111 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x507 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x1064 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1067 (= ?x1064 (_ bv0 32))))
 (=> (and $x1067 $x507) $x279))))))
 ))
 (let (($x508 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x266 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x399 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x419 (ite (ite $x399 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x420 (= ?x419 (_ bv0 32))))
 (let ((?x1064 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1067 (= ?x1064 (_ bv0 32))))
 (let (($x507 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x507 (= $x1067 $x420)))))))))))
 ))
 (let (($x353 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x767 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x767 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x657))))
 ))
 (let (($x1094 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x322 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x322 (_ bv0 32))))
 (=> $x329 $x279)))))
 ))
 (let (($x1091 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x767 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x768 (= ?x767 (_ bv0 32))))
 (let ((?x322 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x322 (_ bv0 32))))
 (= $x329 $x768))))))
 ))
 (let (($x123 (and $x1091 $x1094)))
 (let (($x354 (and $x123 $x353)))
 (let (($x509 (and $x354 $x508)))
 (let (($x64 (and $x509 $x111)))
 (let (($x47 (and $x64 $x177)))
 (let (($x271 (and $x47 $x275)))
 (let (($x1012 (and $x271 $x1010)))
 (let (($x209 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x664 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x266 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x190 (ite $x266 ?x664 (_ bv0 32))))
 (let (($x399 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x199 (ite $x399 ?x190 (_ bv0 32))))
 (let (($x297 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x424 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x424 (_ bv1 32))))
 (=> (and $x150 $x297) (= (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x199)))))))))))
 ))
 (let (($x129 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x266 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x399 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x419 (ite (ite $x399 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (bvuge ?x419 (_ bv1 32))))
 (let ((?x424 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x424 (_ bv1 32))))
 (let (($x297 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x297 (= $x150 $x438)))))))))))
 ))
 (let (($x316 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let (($x297 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x424 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x301 (= ?x424 (_ bv0 32))))
 (=> (and $x301 $x297) $x279))))))
 ))
 (let (($x325 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x266 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x395 (or false $x266)))
 (let (($x399 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x419 (ite (ite $x399 $x395 false) (_ bv1 32) (_ bv0 32))))
 (let (($x420 (= ?x419 (_ bv0 32))))
 (let ((?x424 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x301 (= ?x424 (_ bv0 32))))
 (let (($x297 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x297 (= $x301 $x420)))))))))))
 ))
 (let (($x678 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x767 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x657 (bvuge ?x767 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x657))))
 ))
 (let (($x796 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x279 (= false false)))
 (let ((?x773 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x777 (= ?x773 (_ bv0 32))))
 (=> $x777 $x279)))))
 ))
 (let (($x789 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x767 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x768 (= ?x767 (_ bv0 32))))
 (let ((?x773 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x777 (= ?x773 (_ bv0 32))))
 (= $x777 $x768))))))
 ))
 (let (($x797 (and $x789 $x796)))
 (let (($x535 (and $x797 $x678)))
 (let (($x303 (and $x535 $x325)))
 (let (($x292 (and $x303 $x316)))
 (let (($x127 (and $x292 $x129)))
 (let (($x214 (and $x127 $x209)))
 (let (($x1013 (and $x214 $x1012)))
 (let (($x1011 (and $x279 $x1013)))
 (let (($x24 (= input.spec-%var-m2-0.L1%18%bbentry ?x89)))
 (let (($x1023 (and $x24 $x1011)))
 (let (($x1028 (and $x279 $x1023)))
 (let (($x1046 (=> $x1028 $x1039)))
 (not $x1046))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 432 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888340/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 (bvadd input.dst.llvm-%x input.dst.llvm-%y)))
 (let (($x133 (= input.spec-%var-y-0 ?x131)))
 (let (($x212 (= $x133 true)))
 (let (($x180 (= $x212 true)))
 (let ((?x196 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x880 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x914 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x913 (concat ?x914 (concat ?x880 (concat ?x258 ?x196)))))
 (let (($x459 (= ?x913 input.dst.llvm-%x)))
 (let (($x401 (= $x459 true)))
 (let (($x402 (= $x401 true)))
 (let ((?x884 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x831 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x478 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x592 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x589 (concat ?x592 (concat ?x478 (concat ?x831 ?x884)))))
 (let (($x562 (= ?x589 input.dst.llvm-%y)))
 (let (($x571 (= $x562 true)))
 (let (($x465 (= $x571 true)))
 (let (($x590 (= input.dst.llvm-%y ?x589)))
 (let (($x883 (= input.dst.llvm-%x ?x913)))
 (let (($x655 (and $x883 $x590)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x130)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x182)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x179)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (and $x81 $x193)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x98 $x144)))
 (let (($x122 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x425 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x321 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x327 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x435 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x319 (and $x435 $x327)))
 (let (($x328 (not $x319)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x166 $x171)))
 (let (($x324 (and (not $x112) $x328)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x906 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x510 (and $x906 $x61)))
 (let (($x23 (not $x510)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x414 (and $x262 $x264)))
 (let (($x11 (and (not $x414) $x23)))
 (let (($x563 (and (and (and (and (and (and $x11 $x324) $x321) $x425) $x122) $x176) $x181)))
 (let (($x565 (and (and (and $x563 $x211) $x128) $x655)))
 (let (($x1062 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x566 (and $x1062 $x565)))
 (let (($x572 (= $x566 true)))
 (let (($x574 (= $x572 true)))
 (let (($x454 (= $x574 true)))
 (let (($x469 (and $x454 $x465)))
 (let (($x403 (and $x469 $x402)))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x365 (ite $x194 (or false (= input.spec-%var-y-0 input.spec-%var-y-0)) false)))
 (let ((?x273 (ite $x365 (_ bv1 32) (_ bv0 32))))
 (let (($x363 (= ?x273 (_ bv0 32))))
 (let ((?x415 (ite (or false $x194) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x415 (_ bv1 32))))
 (let (($x515 (and $x244 $x363)))
 (let (($x387 (and $x515 $x403)))
 (let (($x246 (forall ((Lambda155Var (_ BitVec 32)) )(let ((?x778 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x985 (= Lambda155Var input.spec-%var-y-0)))
 (let ((?x551 (ite $x985 ?x778 (_ bv0 32))))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x160 (ite $x194 ?x551 (_ bv0 32))))
 (let (($x505 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let ((?x499 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (bvuge ?x499 (_ bv1 32))))
 (=> (and $x512 $x505) (= (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda155Var) ?x160)))))))))))
 ))
 (let (($x251 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x985 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x621 (ite (ite $x194 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x621 (_ bv1 32))))
 (let ((?x499 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (bvuge ?x499 (_ bv1 32))))
 (let (($x505 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x505 (= $x512 $x540)))))))))))
 ))
 (let (($x959 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x505 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x903 (=> $x505 $x297)))
 (let ((?x499 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x598 (= ?x499 (_ bv0 32))))
 (=> (and $x598 $x505) $x297)))))))
 ))
 (let (($x600 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x985 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x621 (ite (ite $x194 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x621 (_ bv0 32))))
 (let ((?x499 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x598 (= ?x499 (_ bv0 32))))
 (let (($x505 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x505 (= $x598 $x619)))))))))))
 ))
 (let (($x505 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x257 (= $x505 $x244)))
 (let (($x297 (= false false)))
 (let (($x428 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x503 (=> $x428 $x297)))
 (let (($x502 (= $x428 (= ?x415 (_ bv0 32)))))
 (let (($x504 (and $x502 $x503)))
 (let (($x290 (and $x504 $x257)))
 (let (($x951 (and $x290 $x600)))
 (let (($x963 (and $x951 $x959)))
 (let (($x213 (and $x963 $x251)))
 (let (($x391 (and $x213 $x246)))
 (let (($x230 (and $x391 $x387)))
 (let ((?x778 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x408 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x441 (ite $x194 (ite $x408 ?x778 (_ bv0 32)) (_ bv0 32))))
 (let (($x313 (= input.spec-%tmpvar-6.L1%13%d.2 ?x441)))
 (let (($x288 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x333 (=> $x288 $x313)))
 (let (($x378 (= $x288 (bvuge ?x273 (_ bv1 32)))))
 (let (($x389 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x175 (=> $x389 $x297)))
 (let (($x306 (= $x389 $x363)))
 (let (($x269 (and $x306 $x175)))
 (let (($x285 (and $x269 $x378)))
 (let (($x336 (and $x285 $x333)))
 (let (($x304 (and $x336 $x230)))
 (let (($x184 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x778 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x985 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x551 (ite $x985 ?x778 (_ bv0 32))))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x160 (ite $x194 ?x551 (_ bv0 32))))
 (let ((?x640 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x546 (bvuge ?x640 (_ bv1 32))))
 (=> $x546 (= (input.spec-%var-m1-0.L1%13%d.1.1 Lambda157Var) ?x160))))))))))
 ))
 (let (($x154 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x985 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x621 (ite (ite $x194 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x621 (_ bv1 32))))
 (let ((?x640 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x546 (bvuge ?x640 (_ bv1 32))))
 (= $x546 $x540)))))))))
 ))
 (let (($x671 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x640 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (= ?x640 (_ bv0 32))))
 (=> $x643 $x297)))))
 ))
 (let (($x615 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x985 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x621 (ite (ite $x194 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x621 (_ bv0 32))))
 (let ((?x640 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (= ?x640 (_ bv0 32))))
 (= $x643 $x619)))))))))
 ))
 (let (($x681 (and $x615 $x671)))
 (let (($x359 (and $x681 $x154)))
 (let (($x191 (and $x359 $x184)))
 (let (($x318 (and $x191 $x304)))
 (let (($x239 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x747 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x741 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x518 (bvuge ?x741 (_ bv1 32))))
 (=> (and $x518 $x747) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) (_ bv0 32)))))))
 ))
 (let (($x894 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x667 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x751 (bvuge ?x667 (_ bv1 32))))
 (let ((?x741 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x518 (bvuge ?x741 (_ bv1 32))))
 (let (($x747 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x747 (= $x518 $x751))))))))
 ))
 (let (($x771 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x747 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x741 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x338 (= ?x741 (_ bv0 32))))
 (=> (and $x338 $x747) $x297))))))
 ))
 (let (($x749 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x667 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x1084 (= ?x667 (_ bv0 32))))
 (let ((?x741 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x338 (= ?x741 (_ bv0 32))))
 (let (($x747 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x747 (= $x338 $x1084))))))))
 ))
 (let (($x971 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x667 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x751 (bvuge ?x667 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x751))))
 ))
 (let (($x63 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x944 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x942 (= ?x944 (_ bv0 32))))
 (=> $x942 $x297)))))
 ))
 (let (($x76 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x667 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x1084 (= ?x667 (_ bv0 32))))
 (let ((?x944 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x942 (= ?x944 (_ bv0 32))))
 (= $x942 $x1084))))))
 ))
 (let (($x57 (and $x76 $x63)))
 (let (($x961 (and $x57 $x971)))
 (let (($x769 (and $x961 $x749)))
 (let (($x784 (and $x769 $x771)))
 (let (($x893 (and $x784 $x894)))
 (let (($x234 (and $x893 $x239)))
 (let (($x427 (and $x234 $x318)))
 (let (($x835 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x554 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x876 (bvuge ?x554 (_ bv1 32))))
 (=> $x876 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda157Var) (_ bv0 32))))))
 ))
 (let (($x528 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x667 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x751 (bvuge ?x667 (_ bv1 32))))
 (let ((?x554 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x876 (bvuge ?x554 (_ bv1 32))))
 (= $x876 $x751))))))
 ))
 (let (($x616 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x554 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (= ?x554 (_ bv0 32))))
 (=> $x612 $x297)))))
 ))
 (let (($x1060 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x667 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x1084 (= ?x667 (_ bv0 32))))
 (let ((?x554 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (= ?x554 (_ bv0 32))))
 (= $x612 $x1084))))))
 ))
 (let (($x569 (and $x1060 $x616)))
 (let (($x530 (and $x569 $x528)))
 (let (($x529 (and $x530 $x835)))
 (let (($x308 (and $x529 $x427)))
 (let (($x580 (= ?x778 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x432 (and $x580 $x308)))
 (let (($x1078 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x778 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x985 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x551 (ite $x985 ?x778 (_ bv0 32))))
 (let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x107 (_ bv1 32))))
 (=> $x120 (= (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda157Var) ?x551))))))))
 ))
 (let (($x1073 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x985 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let ((?x710 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x107 (_ bv1 32))))
 (= $x120 (bvuge ?x710 (_ bv1 32)))))))))
 ))
 (let (($x670 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x107 (_ bv0 32))))
 (=> $x70 $x297)))))
 ))
 (let (($x1030 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x107 (_ bv0 32))))
 (= $x70 (= (ite (or false (= Lambda157Var input.spec-%var-y-0)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x1007 (and $x1030 $x670)))
 (let (($x110 (and $x1007 $x1073)))
 (let (($x1076 (and $x110 $x1078)))
 (let (($x433 (and $x1076 $x432)))
 (let (($x1068 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x778 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x985 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x551 (ite $x985 ?x778 (_ bv0 32))))
 (let (($x986 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x577 (ite $x986 ?x551 (_ bv0 32))))
 (let (($x852 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x260 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x686 (bvuge ?x260 (_ bv1 32))))
 (=> (and $x686 $x852) (= (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x577)))))))))))
 ))
 (let (($x783 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x985 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x986 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x988 (ite (ite $x986 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x1049 (bvuge ?x988 (_ bv1 32))))
 (let ((?x260 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x686 (bvuge ?x260 (_ bv1 32))))
 (let (($x852 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x852 (= $x686 $x1049)))))))))))
 ))
 (let (($x46 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x852 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x260 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x260 (_ bv0 32))))
 (=> (and $x90 $x852) $x297))))))
 ))
 (let (($x854 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x985 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x986 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x988 (ite (ite $x986 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (= ?x988 (_ bv0 32))))
 (let ((?x260 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x260 (_ bv0 32))))
 (let (($x852 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x852 (= $x90 $x449)))))))))))
 ))
 (let (($x964 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x653 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x748 (bvuge ?x653 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x748))))
 ))
 (let (($x545 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x1036 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1037 (= ?x1036 (_ bv0 32))))
 (=> $x1037 $x297)))))
 ))
 (let (($x1046 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x653 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (= ?x653 (_ bv0 32))))
 (let ((?x1036 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1037 (= ?x1036 (_ bv0 32))))
 (= $x1037 $x644))))))
 ))
 (let (($x28 (and $x1046 $x545)))
 (let (($x967 (and $x28 $x964)))
 (let (($x282 (and $x967 $x854)))
 (let (($x487 (and $x282 $x46)))
 (let (($x991 (and $x487 $x783)))
 (let (($x765 (and $x991 $x1068)))
 (let (($x422 (and $x765 $x433)))
 (let (($x826 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x778 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x985 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x551 (ite $x985 ?x778 (_ bv0 32))))
 (let (($x986 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x577 (ite $x986 ?x551 (_ bv0 32))))
 (let (($x41 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x53 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1051 (bvuge ?x53 (_ bv1 32))))
 (=> (and $x1051 $x41) (= (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x577)))))))))))
 ))
 (let (($x523 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x985 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x986 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x988 (ite (ite $x986 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x1049 (bvuge ?x988 (_ bv1 32))))
 (let ((?x53 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1051 (bvuge ?x53 (_ bv1 32))))
 (let (($x41 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x41 (= $x1051 $x1049)))))))))))
 ))
 (let (($x752 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x41 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x53 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x53 (_ bv0 32))))
 (=> (and $x21 $x41) $x297))))))
 ))
 (let (($x1015 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x985 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x986 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x988 (ite (ite $x986 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (= ?x988 (_ bv0 32))))
 (let ((?x53 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x53 (_ bv0 32))))
 (let (($x41 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x41 (= $x21 $x449)))))))))))
 ))
 (let (($x723 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x653 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x748 (bvuge ?x653 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x748))))
 ))
 (let (($x538 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x679 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x683 (= ?x679 (_ bv0 32))))
 (=> $x683 $x297)))))
 ))
 (let (($x695 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x653 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (= ?x653 (_ bv0 32))))
 (let ((?x679 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x683 (= ?x679 (_ bv0 32))))
 (= $x683 $x644))))))
 ))
 (let (($x543 (and $x695 $x538)))
 (let (($x799 (and $x543 $x723)))
 (let (($x1017 (and $x799 $x1015)))
 (let (($x1021 (and $x1017 $x752)))
 (let (($x527 (and $x1021 $x523)))
 (let (($x805 (and $x527 $x826)))
 (let (($x125 (and $x805 $x422)))
 (let (($x320 (and $x297 $x125)))
 (let (($x169 (= input.spec-%var-m2-0.L1%18%bbentry ?x441)))
 (let (($x437 (and $x169 $x320)))
 (let (($x132 (and $x297 $x437)))
 (let (($x192 (=> $x132 $x180)))
 (not $x192)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 (bvadd input.dst.llvm-%x input.dst.llvm-%y)))
 (let (($x133 (= input.spec-%var-y-0 ?x131)))
 (let (($x212 (= $x133 true)))
 (let (($x180 (= $x212 true)))
 (let ((?x196 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x880 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x914 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x913 (concat ?x914 (concat ?x880 (concat ?x258 ?x196)))))
 (let (($x459 (= ?x913 input.dst.llvm-%x)))
 (let (($x401 (= $x459 true)))
 (let (($x402 (= $x401 true)))
 (let ((?x884 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x831 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x478 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x592 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x589 (concat ?x592 (concat ?x478 (concat ?x831 ?x884)))))
 (let (($x562 (= ?x589 input.dst.llvm-%y)))
 (let (($x571 (= $x562 true)))
 (let (($x465 (= $x571 true)))
 (let (($x590 (= input.dst.llvm-%y ?x589)))
 (let (($x883 (= input.dst.llvm-%x ?x913)))
 (let (($x655 (and $x883 $x590)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x130)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x182)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x179)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (and $x81 $x193)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x98 $x144)))
 (let (($x122 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x425 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x321 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x327 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x435 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x319 (and $x435 $x327)))
 (let (($x328 (not $x319)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x166 $x171)))
 (let (($x324 (and (not $x112) $x328)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x906 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x510 (and $x906 $x61)))
 (let (($x23 (not $x510)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x414 (and $x262 $x264)))
 (let (($x11 (and (not $x414) $x23)))
 (let (($x563 (and (and (and (and (and (and $x11 $x324) $x321) $x425) $x122) $x176) $x181)))
 (let (($x565 (and (and (and $x563 $x211) $x128) $x655)))
 (let (($x1062 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x566 (and $x1062 $x565)))
 (let (($x572 (= $x566 true)))
 (let (($x574 (= $x572 true)))
 (let (($x454 (= $x574 true)))
 (let (($x469 (and $x454 $x465)))
 (let (($x403 (and $x469 $x402)))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x365 (ite $x194 (or false (= input.spec-%var-y-0 input.spec-%var-y-0)) false)))
 (let ((?x273 (ite $x365 (_ bv1 32) (_ bv0 32))))
 (let (($x363 (= ?x273 (_ bv0 32))))
 (let ((?x415 (ite (or false $x194) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x415 (_ bv1 32))))
 (let (($x515 (and $x244 $x363)))
 (let (($x387 (and $x515 $x403)))
 (let (($x246 (forall ((Lambda155Var (_ BitVec 32)) )(let ((?x778 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x985 (= Lambda155Var input.spec-%var-y-0)))
 (let ((?x551 (ite $x985 ?x778 (_ bv0 32))))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x160 (ite $x194 ?x551 (_ bv0 32))))
 (let (($x505 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let ((?x499 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (bvuge ?x499 (_ bv1 32))))
 (=> (and $x512 $x505) (= (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda155Var) ?x160)))))))))))
 ))
 (let (($x251 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x985 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x621 (ite (ite $x194 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x621 (_ bv1 32))))
 (let ((?x499 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (bvuge ?x499 (_ bv1 32))))
 (let (($x505 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x505 (= $x512 $x540)))))))))))
 ))
 (let (($x959 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x505 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x903 (=> $x505 $x297)))
 (let ((?x499 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x598 (= ?x499 (_ bv0 32))))
 (=> (and $x598 $x505) $x297)))))))
 ))
 (let (($x600 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x985 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x621 (ite (ite $x194 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x621 (_ bv0 32))))
 (let ((?x499 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x598 (= ?x499 (_ bv0 32))))
 (let (($x505 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x505 (= $x598 $x619)))))))))))
 ))
 (let (($x505 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x257 (= $x505 $x244)))
 (let (($x297 (= false false)))
 (let (($x428 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x503 (=> $x428 $x297)))
 (let (($x502 (= $x428 (= ?x415 (_ bv0 32)))))
 (let (($x504 (and $x502 $x503)))
 (let (($x290 (and $x504 $x257)))
 (let (($x951 (and $x290 $x600)))
 (let (($x963 (and $x951 $x959)))
 (let (($x213 (and $x963 $x251)))
 (let (($x391 (and $x213 $x246)))
 (let (($x230 (and $x391 $x387)))
 (let ((?x778 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x408 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x441 (ite $x194 (ite $x408 ?x778 (_ bv0 32)) (_ bv0 32))))
 (let (($x313 (= input.spec-%tmpvar-6.L1%13%d.2 ?x441)))
 (let (($x288 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x333 (=> $x288 $x313)))
 (let (($x378 (= $x288 (bvuge ?x273 (_ bv1 32)))))
 (let (($x389 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x175 (=> $x389 $x297)))
 (let (($x306 (= $x389 $x363)))
 (let (($x269 (and $x306 $x175)))
 (let (($x285 (and $x269 $x378)))
 (let (($x336 (and $x285 $x333)))
 (let (($x304 (and $x336 $x230)))
 (let (($x184 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x778 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x985 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x551 (ite $x985 ?x778 (_ bv0 32))))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x160 (ite $x194 ?x551 (_ bv0 32))))
 (let ((?x640 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x546 (bvuge ?x640 (_ bv1 32))))
 (=> $x546 (= (input.spec-%var-m1-0.L1%13%d.1.1 Lambda157Var) ?x160))))))))))
 ))
 (let (($x154 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x985 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x621 (ite (ite $x194 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x621 (_ bv1 32))))
 (let ((?x640 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x546 (bvuge ?x640 (_ bv1 32))))
 (= $x546 $x540)))))))))
 ))
 (let (($x671 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x640 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (= ?x640 (_ bv0 32))))
 (=> $x643 $x297)))))
 ))
 (let (($x615 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x985 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x194 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x621 (ite (ite $x194 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x621 (_ bv0 32))))
 (let ((?x640 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x643 (= ?x640 (_ bv0 32))))
 (= $x643 $x619)))))))))
 ))
 (let (($x681 (and $x615 $x671)))
 (let (($x359 (and $x681 $x154)))
 (let (($x191 (and $x359 $x184)))
 (let (($x318 (and $x191 $x304)))
 (let (($x239 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x747 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x741 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x518 (bvuge ?x741 (_ bv1 32))))
 (=> (and $x518 $x747) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) (_ bv0 32)))))))
 ))
 (let (($x894 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x667 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x751 (bvuge ?x667 (_ bv1 32))))
 (let ((?x741 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x518 (bvuge ?x741 (_ bv1 32))))
 (let (($x747 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x747 (= $x518 $x751))))))))
 ))
 (let (($x771 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x747 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x741 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x338 (= ?x741 (_ bv0 32))))
 (=> (and $x338 $x747) $x297))))))
 ))
 (let (($x749 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x667 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x1084 (= ?x667 (_ bv0 32))))
 (let ((?x741 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x338 (= ?x741 (_ bv0 32))))
 (let (($x747 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x747 (= $x338 $x1084))))))))
 ))
 (let (($x971 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x667 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x751 (bvuge ?x667 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x751))))
 ))
 (let (($x63 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x944 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x942 (= ?x944 (_ bv0 32))))
 (=> $x942 $x297)))))
 ))
 (let (($x76 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x667 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x1084 (= ?x667 (_ bv0 32))))
 (let ((?x944 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x942 (= ?x944 (_ bv0 32))))
 (= $x942 $x1084))))))
 ))
 (let (($x57 (and $x76 $x63)))
 (let (($x961 (and $x57 $x971)))
 (let (($x769 (and $x961 $x749)))
 (let (($x784 (and $x769 $x771)))
 (let (($x893 (and $x784 $x894)))
 (let (($x234 (and $x893 $x239)))
 (let (($x427 (and $x234 $x318)))
 (let (($x835 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x554 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x876 (bvuge ?x554 (_ bv1 32))))
 (=> $x876 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda157Var) (_ bv0 32))))))
 ))
 (let (($x528 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x667 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x751 (bvuge ?x667 (_ bv1 32))))
 (let ((?x554 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x876 (bvuge ?x554 (_ bv1 32))))
 (= $x876 $x751))))))
 ))
 (let (($x616 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x554 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (= ?x554 (_ bv0 32))))
 (=> $x612 $x297)))))
 ))
 (let (($x1060 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x667 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x1084 (= ?x667 (_ bv0 32))))
 (let ((?x554 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (= ?x554 (_ bv0 32))))
 (= $x612 $x1084))))))
 ))
 (let (($x569 (and $x1060 $x616)))
 (let (($x530 (and $x569 $x528)))
 (let (($x529 (and $x530 $x835)))
 (let (($x308 (and $x529 $x427)))
 (let (($x580 (= ?x778 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x432 (and $x580 $x308)))
 (let (($x1078 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x778 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x985 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x551 (ite $x985 ?x778 (_ bv0 32))))
 (let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x107 (_ bv1 32))))
 (=> $x120 (= (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda157Var) ?x551))))))))
 ))
 (let (($x1073 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x985 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let ((?x710 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x107 (_ bv1 32))))
 (= $x120 (bvuge ?x710 (_ bv1 32)))))))))
 ))
 (let (($x670 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x107 (_ bv0 32))))
 (=> $x70 $x297)))))
 ))
 (let (($x1030 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x107 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x107 (_ bv0 32))))
 (= $x70 (= (ite (or false (= Lambda157Var input.spec-%var-y-0)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x1007 (and $x1030 $x670)))
 (let (($x110 (and $x1007 $x1073)))
 (let (($x1076 (and $x110 $x1078)))
 (let (($x433 (and $x1076 $x432)))
 (let (($x1068 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x778 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x985 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x551 (ite $x985 ?x778 (_ bv0 32))))
 (let (($x986 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x577 (ite $x986 ?x551 (_ bv0 32))))
 (let (($x852 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x260 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x686 (bvuge ?x260 (_ bv1 32))))
 (=> (and $x686 $x852) (= (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x577)))))))))))
 ))
 (let (($x783 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x985 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x986 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x988 (ite (ite $x986 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x1049 (bvuge ?x988 (_ bv1 32))))
 (let ((?x260 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x686 (bvuge ?x260 (_ bv1 32))))
 (let (($x852 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x852 (= $x686 $x1049)))))))))))
 ))
 (let (($x46 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x852 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x260 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x260 (_ bv0 32))))
 (=> (and $x90 $x852) $x297))))))
 ))
 (let (($x854 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x985 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x986 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x988 (ite (ite $x986 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (= ?x988 (_ bv0 32))))
 (let ((?x260 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x260 (_ bv0 32))))
 (let (($x852 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x852 (= $x90 $x449)))))))))))
 ))
 (let (($x964 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x653 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x748 (bvuge ?x653 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x748))))
 ))
 (let (($x545 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x1036 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1037 (= ?x1036 (_ bv0 32))))
 (=> $x1037 $x297)))))
 ))
 (let (($x1046 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x653 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (= ?x653 (_ bv0 32))))
 (let ((?x1036 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1037 (= ?x1036 (_ bv0 32))))
 (= $x1037 $x644))))))
 ))
 (let (($x28 (and $x1046 $x545)))
 (let (($x967 (and $x28 $x964)))
 (let (($x282 (and $x967 $x854)))
 (let (($x487 (and $x282 $x46)))
 (let (($x991 (and $x487 $x783)))
 (let (($x765 (and $x991 $x1068)))
 (let (($x422 (and $x765 $x433)))
 (let (($x826 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x778 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x985 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x551 (ite $x985 ?x778 (_ bv0 32))))
 (let (($x986 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x577 (ite $x986 ?x551 (_ bv0 32))))
 (let (($x41 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x53 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1051 (bvuge ?x53 (_ bv1 32))))
 (=> (and $x1051 $x41) (= (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x577)))))))))))
 ))
 (let (($x523 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x985 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x986 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x988 (ite (ite $x986 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x1049 (bvuge ?x988 (_ bv1 32))))
 (let ((?x53 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1051 (bvuge ?x53 (_ bv1 32))))
 (let (($x41 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x41 (= $x1051 $x1049)))))))))))
 ))
 (let (($x752 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x41 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x53 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x53 (_ bv0 32))))
 (=> (and $x21 $x41) $x297))))))
 ))
 (let (($x1015 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x985 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x36 (or false $x985)))
 (let (($x986 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x988 (ite (ite $x986 $x36 false) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (= ?x988 (_ bv0 32))))
 (let ((?x53 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x53 (_ bv0 32))))
 (let (($x41 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x41 (= $x21 $x449)))))))))))
 ))
 (let (($x723 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x653 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x748 (bvuge ?x653 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x748))))
 ))
 (let (($x538 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x297 (= false false)))
 (let ((?x679 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x683 (= ?x679 (_ bv0 32))))
 (=> $x683 $x297)))))
 ))
 (let (($x695 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x653 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (= ?x653 (_ bv0 32))))
 (let ((?x679 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x683 (= ?x679 (_ bv0 32))))
 (= $x683 $x644))))))
 ))
 (let (($x543 (and $x695 $x538)))
 (let (($x799 (and $x543 $x723)))
 (let (($x1017 (and $x799 $x1015)))
 (let (($x1021 (and $x1017 $x752)))
 (let (($x527 (and $x1021 $x523)))
 (let (($x805 (and $x527 $x826)))
 (let (($x125 (and $x805 $x422)))
 (let (($x320 (and $x297 $x125)))
 (let (($x169 (= input.spec-%var-m2-0.L1%18%bbentry ?x441)))
 (let (($x437 (and $x169 $x320)))
 (let (($x132 (and $x297 $x437)))
 (let (($x192 (=> $x132 $x180)))
 (not $x192)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888340/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 (bvadd input.dst.llvm-%x input.dst.llvm-%y)))
 (let (($x524 (= input.spec-%var-x-0 ?x43)))
 (let (($x1045 (= $x524 true)))
 (let (($x611 (= $x1045 true)))
 (let ((?x550 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x1069 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x161 (concat ?x348 (concat ?x1069 ?x550)))))
 (let (($x37 (= ?x163 input.dst.llvm-%x)))
 (let (($x56 (= $x37 true)))
 (let (($x978 (= $x56 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x559 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x555 (concat ?x559 (concat ?x217 (concat ?x146 ?x157)))))
 (let (($x54 (= ?x555 input.dst.llvm-%y)))
 (let (($x890 (= $x54 true)))
 (let (($x923 (= $x890 true)))
 (let (($x560 (= input.dst.llvm-%y ?x555)))
 (let (($x149 (= input.dst.llvm-%x ?x163)))
 (let (($x490 (and $x149 $x560)))
 (let ((?x688 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x688)))
 (let ((?x552 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x662 (= (_ bv0 32) ?x552)))
 (let ((?x522 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x522)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x52)))
 (let (($x673 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x1006 (and $x673 $x117)))
 (let (($x1050 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1047 (and $x1050 $x1006)))
 (let (($x1043 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x1024 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x802 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x429 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x429 $x29)))
 (let (($x22 (not $x12)))
 (let (($x993 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x488 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x668 (and $x488 $x993)))
 (let (($x1041 (and (not $x668) $x22)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x984 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x984 $x310)))
 (let (($x172 (not $x207)))
 (let (($x344 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x345 (and $x259 $x344)))
 (let (($x663 (and (not $x345) $x172)))
 (let (($x892 (and (and (and (and (and (and $x663 $x1041) $x802) $x1024) $x1043) $x1047) $x48)))
 (let (($x26 (and (and (and $x892 $x662) $x66) $x490)))
 (let (($x856 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x921 (and $x856 $x26)))
 (let (($x922 (= $x921 true)))
 (let (($x924 (= $x922 true)))
 (let (($x932 (= $x924 true)))
 (let (($x67 (and $x932 $x923)))
 (let (($x934 (and $x67 $x978)))
 (let ((?x19 (ite (or false (= input.spec-%var-x-0 input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x19 (_ bv0 32))))
 (let (($x860 (and $x88 $x934)))
 (let (($x935 (forall ((Lambda155Var (_ BitVec 32)) )(let ((?x684 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x414 (= Lambda155Var input.spec-%var-y-0)))
 (let ((?x945 (ite $x414 ?x684 (_ bv0 32))))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x848 (ite $x82 ?x945 (_ bv0 32))))
 (let (($x867 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let ((?x1080 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x1080 (_ bv1 32))))
 (=> (and $x102 $x867) (= (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda155Var) ?x848)))))))))))
 ))
 (let (($x863 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x414 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x711 (ite (ite $x82 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x899 (bvuge ?x711 (_ bv1 32))))
 (let ((?x1080 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x1080 (_ bv1 32))))
 (let (($x867 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x867 (= $x102 $x899)))))))))))
 ))
 (let (($x228 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x867 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x155 (=> $x867 $x41)))
 (let ((?x1080 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x966 (= ?x1080 (_ bv0 32))))
 (=> (and $x966 $x867) $x41)))))))
 ))
 (let (($x224 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x414 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x711 (ite (ite $x82 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x830 (= ?x711 (_ bv0 32))))
 (let ((?x1080 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x966 (= ?x1080 (_ bv0 32))))
 (let (($x867 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x867 (= $x966 $x830)))))))))))
 ))
 (let (($x867 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x981 (= $x867 (bvuge ?x19 (_ bv1 32)))))
 (let (($x41 (= false false)))
 (let (($x25 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x99 (=> $x25 $x41)))
 (let (($x15 (= $x25 $x88)))
 (let (($x104 (and $x15 $x99)))
 (let (($x979 (and $x104 $x981)))
 (let (($x225 (and $x979 $x224)))
 (let (($x136 (and $x225 $x228)))
 (let (($x840 (and $x136 $x863)))
 (let (($x448 (and $x840 $x935)))
 (let (($x584 (and $x448 $x860)))
 (let ((?x684 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x689 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x1030 (ite $x82 (ite $x689 ?x684 (_ bv0 32)) (_ bv0 32))))
 (let (($x990 (= input.spec-%tmpvar-6.L1%13%d.2 ?x1030)))
 (let (($x1056 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x1055 (=> $x1056 $x990)))
 (let (($x116 (= $x1056 (bvuge (ite (ite $x82 (or false $x689) false) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x339 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x989 (=> $x339 $x41)))
 (let (($x1031 (= $x339 (= (ite (ite $x82 (or false $x689) false) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x761 (and $x1031 $x989)))
 (let (($x997 (and $x761 $x116)))
 (let (($x708 (and $x997 $x1055)))
 (let (($x957 (and $x708 $x584)))
 (let (($x759 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x684 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x414 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x945 (ite $x414 ?x684 (_ bv0 32))))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x848 (ite $x82 ?x945 (_ bv0 32))))
 (let ((?x821 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x887 (bvuge ?x821 (_ bv1 32))))
 (=> $x887 (= (input.spec-%var-m1-0.L1%13%d.1.1 Lambda157Var) ?x848))))))))))
 ))
 (let (($x614 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x414 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x711 (ite (ite $x82 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x899 (bvuge ?x711 (_ bv1 32))))
 (let ((?x821 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x887 (bvuge ?x821 (_ bv1 32))))
 (= $x887 $x899)))))))))
 ))
 (let (($x772 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x821 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x818 (= ?x821 (_ bv0 32))))
 (=> $x818 $x41)))))
 ))
 (let (($x729 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x414 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x711 (ite (ite $x82 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x830 (= ?x711 (_ bv0 32))))
 (let ((?x821 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x818 (= ?x821 (_ bv0 32))))
 (= $x818 $x830)))))))))
 ))
 (let (($x779 (and $x729 $x772)))
 (let (($x1083 (and $x779 $x614)))
 (let (($x705 (and $x1083 $x759)))
 (let (($x1019 (and $x705 $x957)))
 (let (($x926 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x647 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x620 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x620 (_ bv1 32))))
 (=> (and $x539 $x647) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) (_ bv0 32)))))))
 ))
 (let (($x162 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x939 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x939 (_ bv1 32))))
 (let ((?x620 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x620 (_ bv1 32))))
 (let (($x647 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x647 (= $x539 $x498))))))))
 ))
 (let (($x687 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x647 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x620 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1087 (= ?x620 (_ bv0 32))))
 (=> (and $x1087 $x647) $x41))))))
 ))
 (let (($x645 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x939 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x833 (= ?x939 (_ bv0 32))))
 (let ((?x620 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1087 (= ?x620 (_ bv0 32))))
 (let (($x647 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x647 (= $x1087 $x833))))))))
 ))
 (let (($x240 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x939 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x939 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x498))))
 ))
 (let (($x335 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x398 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x397 (= ?x398 (_ bv0 32))))
 (=> $x397 $x41)))))
 ))
 (let (($x369 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x939 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x833 (= ?x939 (_ bv0 32))))
 (let ((?x398 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x397 (= ?x398 (_ bv0 32))))
 (= $x397 $x833))))))
 ))
 (let (($x274 (and $x369 $x335)))
 (let (($x255 (and $x274 $x240)))
 (let (($x692 (and $x255 $x645)))
 (let (($x532 (and $x692 $x687)))
 (let (($x141 (and $x532 $x162)))
 (let (($x925 (and $x141 $x926)))
 (let (($x704 (and $x925 $x1019)))
 (let (($x464 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x314 (_ bv1 32))))
 (=> $x659 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda157Var) (_ bv0 32))))))
 ))
 (let (($x965 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x939 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x939 (_ bv1 32))))
 (let ((?x314 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x314 (_ bv1 32))))
 (= $x659 $x498))))))
 ))
 (let (($x716 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x314 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x836 (= ?x314 (_ bv0 32))))
 (=> $x836 $x41)))))
 ))
 (let (($x124 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x939 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x833 (= ?x939 (_ bv0 32))))
 (let ((?x314 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x836 (= ?x314 (_ bv0 32))))
 (= $x836 $x833))))))
 ))
 (let (($x811 (and $x124 $x716)))
 (let (($x78 (and $x811 $x965)))
 (let (($x32 (and $x78 $x464)))
 (let (($x1018 (and $x32 $x704)))
 (let (($x916 (= ?x684 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x760 (and $x916 $x1018)))
 (let (($x294 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x684 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x414 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x945 (ite $x414 ?x684 (_ bv0 32))))
 (let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1066 (bvuge ?x312 (_ bv1 32))))
 (=> $x1066 (= (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda157Var) ?x945))))))))
 ))
 (let (($x307 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x414 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let ((?x507 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1066 (bvuge ?x312 (_ bv1 32))))
 (= $x1066 (bvuge ?x507 (_ bv1 32)))))))))
 ))
 (let (($x51 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x312 (_ bv0 32))))
 (=> $x278 $x41)))))
 ))
 (let (($x1064 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x312 (_ bv0 32))))
 (= $x278 (= (ite (or false (= Lambda157Var input.spec-%var-y-0)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x64 (and $x1064 $x51)))
 (let (($x442 (and $x64 $x307)))
 (let (($x917 (and $x442 $x294)))
 (let (($x786 (and $x917 $x760)))
 (let (($x150 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x684 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x414 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x945 (ite $x414 ?x684 (_ bv0 32))))
 (let (($x265 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x794 (ite $x265 ?x945 (_ bv0 32))))
 (let (($x444 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x822 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x766 (bvuge ?x822 (_ bv1 32))))
 (=> (and $x766 $x444) (= (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x794)))))))))))
 ))
 (let (($x796 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x414 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x265 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x265 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x61 (_ bv1 32))))
 (let ((?x822 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x766 (bvuge ?x822 (_ bv1 32))))
 (let (($x444 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x444 (= $x766 $x211)))))))))))
 ))
 (let (($x483 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x444 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x822 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x417 (= ?x822 (_ bv0 32))))
 (=> (and $x417 $x444) $x41))))))
 ))
 (let (($x405 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x414 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x265 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x265 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x510 (= ?x61 (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x417 (= ?x822 (_ bv0 32))))
 (let (($x444 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x444 (= $x417 $x510)))))))))))
 ))
 (let (($x235 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x749 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x615 (bvuge ?x749 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x615))))
 ))
 (let (($x909 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x133 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x133 (_ bv0 32))))
 (=> $x212 $x41)))))
 ))
 (let (($x192 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x749 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x769 (= ?x749 (_ bv0 32))))
 (let ((?x133 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x133 (_ bv0 32))))
 (= $x212 $x769))))))
 ))
 (let (($x201 (and $x192 $x909)))
 (let (($x249 (and $x201 $x235)))
 (let (($x343 (and $x249 $x405)))
 (let (($x94 (and $x343 $x483)))
 (let (($x797 (and $x94 $x796)))
 (let (($x395 (and $x797 $x150)))
 (let (($x68 (and $x395 $x786)))
 (let (($x566 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x684 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x414 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x945 (ite $x414 ?x684 (_ bv0 32))))
 (let (($x265 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x794 (ite $x265 ?x945 (_ bv0 32))))
 (let (($x435 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x11 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x11 (_ bv1 32))))
 (=> (and $x128 $x435) (= (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x794)))))))))))
 ))
 (let (($x912 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x414 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x265 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x265 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x61 (_ bv1 32))))
 (let ((?x11 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x11 (_ bv1 32))))
 (let (($x435 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x435 (= $x128 $x211)))))))))))
 ))
 (let (($x534 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x435 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x11 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x11 (_ bv0 32))))
 (=> (and $x166 $x435) $x41))))))
 ))
 (let (($x319 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x414 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x265 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x265 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x510 (= ?x61 (_ bv0 32))))
 (let ((?x11 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x11 (_ bv0 32))))
 (let (($x435 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x435 (= $x166 $x510)))))))))))
 ))
 (let (($x681 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x749 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x615 (bvuge ?x749 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x615))))
 ))
 (let (($x894 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x775 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x771 (= ?x775 (_ bv0 32))))
 (=> $x771 $x41)))))
 ))
 (let (($x518 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x749 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x769 (= ?x749 (_ bv0 32))))
 (let ((?x775 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x771 (= ?x775 (_ bv0 32))))
 (= $x771 $x769))))))
 ))
 (let (($x893 (and $x518 $x894)))
 (let (($x546 (and $x893 $x681)))
 (let (($x328 (and $x546 $x319)))
 (let (($x436 (and $x328 $x534)))
 (let (($x914 (and $x436 $x912)))
 (let (($x572 (and $x914 $x566)))
 (let (($x1014 (and $x572 $x68)))
 (let (($x787 (and $x41 $x1014)))
 (let (($x709 (= input.spec-%var-m2-0.L1%18%bbentry ?x1030)))
 (let (($x45 (and $x709 $x787)))
 (let (($x1042 (and $x41 $x45)))
 (let (($x542 (=> $x1042 $x611)))
 (not $x542)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 (bvadd input.dst.llvm-%x input.dst.llvm-%y)))
 (let (($x524 (= input.spec-%var-x-0 ?x43)))
 (let (($x1045 (= $x524 true)))
 (let (($x611 (= $x1045 true)))
 (let ((?x550 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x1069 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x161 (concat ?x348 (concat ?x1069 ?x550)))))
 (let (($x37 (= ?x163 input.dst.llvm-%x)))
 (let (($x56 (= $x37 true)))
 (let (($x978 (= $x56 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x559 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x555 (concat ?x559 (concat ?x217 (concat ?x146 ?x157)))))
 (let (($x54 (= ?x555 input.dst.llvm-%y)))
 (let (($x890 (= $x54 true)))
 (let (($x923 (= $x890 true)))
 (let (($x560 (= input.dst.llvm-%y ?x555)))
 (let (($x149 (= input.dst.llvm-%x ?x163)))
 (let (($x490 (and $x149 $x560)))
 (let ((?x688 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x688)))
 (let ((?x552 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x662 (= (_ bv0 32) ?x552)))
 (let ((?x522 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x522)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x52)))
 (let (($x673 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x1006 (and $x673 $x117)))
 (let (($x1050 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1047 (and $x1050 $x1006)))
 (let (($x1043 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x1024 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x802 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x429 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x429 $x29)))
 (let (($x22 (not $x12)))
 (let (($x993 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x488 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x668 (and $x488 $x993)))
 (let (($x1041 (and (not $x668) $x22)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x984 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x984 $x310)))
 (let (($x172 (not $x207)))
 (let (($x344 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x345 (and $x259 $x344)))
 (let (($x663 (and (not $x345) $x172)))
 (let (($x892 (and (and (and (and (and (and $x663 $x1041) $x802) $x1024) $x1043) $x1047) $x48)))
 (let (($x26 (and (and (and $x892 $x662) $x66) $x490)))
 (let (($x856 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x921 (and $x856 $x26)))
 (let (($x922 (= $x921 true)))
 (let (($x924 (= $x922 true)))
 (let (($x932 (= $x924 true)))
 (let (($x67 (and $x932 $x923)))
 (let (($x934 (and $x67 $x978)))
 (let ((?x19 (ite (or false (= input.spec-%var-x-0 input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (= ?x19 (_ bv0 32))))
 (let (($x860 (and $x88 $x934)))
 (let (($x935 (forall ((Lambda155Var (_ BitVec 32)) )(let ((?x684 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x414 (= Lambda155Var input.spec-%var-y-0)))
 (let ((?x945 (ite $x414 ?x684 (_ bv0 32))))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x848 (ite $x82 ?x945 (_ bv0 32))))
 (let (($x867 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let ((?x1080 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x1080 (_ bv1 32))))
 (=> (and $x102 $x867) (= (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda155Var) ?x848)))))))))))
 ))
 (let (($x863 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x414 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x711 (ite (ite $x82 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x899 (bvuge ?x711 (_ bv1 32))))
 (let ((?x1080 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x1080 (_ bv1 32))))
 (let (($x867 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x867 (= $x102 $x899)))))))))))
 ))
 (let (($x228 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x867 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x155 (=> $x867 $x41)))
 (let ((?x1080 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x966 (= ?x1080 (_ bv0 32))))
 (=> (and $x966 $x867) $x41)))))))
 ))
 (let (($x224 (forall ((Lambda155Var (_ BitVec 32)) )(let (($x414 (= Lambda155Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x711 (ite (ite $x82 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x830 (= ?x711 (_ bv0 32))))
 (let ((?x1080 (ite (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda155Var) (_ bv1 32) (_ bv0 32))))
 (let (($x966 (= ?x1080 (_ bv0 32))))
 (let (($x867 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x867 (= $x966 $x830)))))))))))
 ))
 (let (($x867 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x981 (= $x867 (bvuge ?x19 (_ bv1 32)))))
 (let (($x41 (= false false)))
 (let (($x25 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x99 (=> $x25 $x41)))
 (let (($x15 (= $x25 $x88)))
 (let (($x104 (and $x15 $x99)))
 (let (($x979 (and $x104 $x981)))
 (let (($x225 (and $x979 $x224)))
 (let (($x136 (and $x225 $x228)))
 (let (($x840 (and $x136 $x863)))
 (let (($x448 (and $x840 $x935)))
 (let (($x584 (and $x448 $x860)))
 (let ((?x684 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x689 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x1030 (ite $x82 (ite $x689 ?x684 (_ bv0 32)) (_ bv0 32))))
 (let (($x990 (= input.spec-%tmpvar-6.L1%13%d.2 ?x1030)))
 (let (($x1056 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x1055 (=> $x1056 $x990)))
 (let (($x116 (= $x1056 (bvuge (ite (ite $x82 (or false $x689) false) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))
 (let (($x339 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x989 (=> $x339 $x41)))
 (let (($x1031 (= $x339 (= (ite (ite $x82 (or false $x689) false) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))
 (let (($x761 (and $x1031 $x989)))
 (let (($x997 (and $x761 $x116)))
 (let (($x708 (and $x997 $x1055)))
 (let (($x957 (and $x708 $x584)))
 (let (($x759 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x684 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x414 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x945 (ite $x414 ?x684 (_ bv0 32))))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x848 (ite $x82 ?x945 (_ bv0 32))))
 (let ((?x821 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x887 (bvuge ?x821 (_ bv1 32))))
 (=> $x887 (= (input.spec-%var-m1-0.L1%13%d.1.1 Lambda157Var) ?x848))))))))))
 ))
 (let (($x614 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x414 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x711 (ite (ite $x82 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x899 (bvuge ?x711 (_ bv1 32))))
 (let ((?x821 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x887 (bvuge ?x821 (_ bv1 32))))
 (= $x887 $x899)))))))))
 ))
 (let (($x772 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x821 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x818 (= ?x821 (_ bv0 32))))
 (=> $x818 $x41)))))
 ))
 (let (($x729 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x414 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x82 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x711 (ite (ite $x82 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x830 (= ?x711 (_ bv0 32))))
 (let ((?x821 (ite (input.spec-%var-m1-0.L1%13%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x818 (= ?x821 (_ bv0 32))))
 (= $x818 $x830)))))))))
 ))
 (let (($x779 (and $x729 $x772)))
 (let (($x1083 (and $x779 $x614)))
 (let (($x705 (and $x1083 $x759)))
 (let (($x1019 (and $x705 $x957)))
 (let (($x926 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x647 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x620 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x620 (_ bv1 32))))
 (=> (and $x539 $x647) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) (_ bv0 32)))))))
 ))
 (let (($x162 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x939 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x939 (_ bv1 32))))
 (let ((?x620 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x620 (_ bv1 32))))
 (let (($x647 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x647 (= $x539 $x498))))))))
 ))
 (let (($x687 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x647 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x620 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1087 (= ?x620 (_ bv0 32))))
 (=> (and $x1087 $x647) $x41))))))
 ))
 (let (($x645 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x939 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x833 (= ?x939 (_ bv0 32))))
 (let ((?x620 (ite (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1087 (= ?x620 (_ bv0 32))))
 (let (($x647 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x647 (= $x1087 $x833))))))))
 ))
 (let (($x240 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x939 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x939 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x498))))
 ))
 (let (($x335 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x398 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x397 (= ?x398 (_ bv0 32))))
 (=> $x397 $x41)))))
 ))
 (let (($x369 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x939 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x833 (= ?x939 (_ bv0 32))))
 (let ((?x398 (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x397 (= ?x398 (_ bv0 32))))
 (= $x397 $x833))))))
 ))
 (let (($x274 (and $x369 $x335)))
 (let (($x255 (and $x274 $x240)))
 (let (($x692 (and $x255 $x645)))
 (let (($x532 (and $x692 $x687)))
 (let (($x141 (and $x532 $x162)))
 (let (($x925 (and $x141 $x926)))
 (let (($x704 (and $x925 $x1019)))
 (let (($x464 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x314 (_ bv1 32))))
 (=> $x659 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda157Var) (_ bv0 32))))))
 ))
 (let (($x965 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x939 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x498 (bvuge ?x939 (_ bv1 32))))
 (let ((?x314 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x314 (_ bv1 32))))
 (= $x659 $x498))))))
 ))
 (let (($x716 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x314 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x836 (= ?x314 (_ bv0 32))))
 (=> $x836 $x41)))))
 ))
 (let (($x124 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x939 (ite false (_ bv1 32) (_ bv0 32))))
 (let (($x833 (= ?x939 (_ bv0 32))))
 (let ((?x314 (ite (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x836 (= ?x314 (_ bv0 32))))
 (= $x836 $x833))))))
 ))
 (let (($x811 (and $x124 $x716)))
 (let (($x78 (and $x811 $x965)))
 (let (($x32 (and $x78 $x464)))
 (let (($x1018 (and $x32 $x704)))
 (let (($x916 (= ?x684 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x760 (and $x916 $x1018)))
 (let (($x294 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x684 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x414 (= Lambda157Var input.spec-%var-y-0)))
 (let ((?x945 (ite $x414 ?x684 (_ bv0 32))))
 (let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1066 (bvuge ?x312 (_ bv1 32))))
 (=> $x1066 (= (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda157Var) ?x945))))))))
 ))
 (let (($x307 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x414 (= Lambda157Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let ((?x507 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x1066 (bvuge ?x312 (_ bv1 32))))
 (= $x1066 (bvuge ?x507 (_ bv1 32)))))))))
 ))
 (let (($x51 (forall ((Lambda157Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x312 (_ bv0 32))))
 (=> $x278 $x41)))))
 ))
 (let (($x1064 (forall ((Lambda157Var (_ BitVec 32)) )(let ((?x312 (ite (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda157Var) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x312 (_ bv0 32))))
 (= $x278 (= (ite (or false (= Lambda157Var input.spec-%var-y-0)) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x64 (and $x1064 $x51)))
 (let (($x442 (and $x64 $x307)))
 (let (($x917 (and $x442 $x294)))
 (let (($x786 (and $x917 $x760)))
 (let (($x150 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x684 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x414 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x945 (ite $x414 ?x684 (_ bv0 32))))
 (let (($x265 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x794 (ite $x265 ?x945 (_ bv0 32))))
 (let (($x444 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x822 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x766 (bvuge ?x822 (_ bv1 32))))
 (=> (and $x766 $x444) (= (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x794)))))))))))
 ))
 (let (($x796 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x414 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x265 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x265 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x61 (_ bv1 32))))
 (let ((?x822 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x766 (bvuge ?x822 (_ bv1 32))))
 (let (($x444 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x444 (= $x766 $x211)))))))))))
 ))
 (let (($x483 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x444 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x822 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x417 (= ?x822 (_ bv0 32))))
 (=> (and $x417 $x444) $x41))))))
 ))
 (let (($x405 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x414 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x265 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x265 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x510 (= ?x61 (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x417 (= ?x822 (_ bv0 32))))
 (let (($x444 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x444 (= $x417 $x510)))))))))))
 ))
 (let (($x235 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x749 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x615 (bvuge ?x749 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x615))))
 ))
 (let (($x909 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x133 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x133 (_ bv0 32))))
 (=> $x212 $x41)))))
 ))
 (let (($x192 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x749 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x769 (= ?x749 (_ bv0 32))))
 (let ((?x133 (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x133 (_ bv0 32))))
 (= $x212 $x769))))))
 ))
 (let (($x201 (and $x192 $x909)))
 (let (($x249 (and $x201 $x235)))
 (let (($x343 (and $x249 $x405)))
 (let (($x94 (and $x343 $x483)))
 (let (($x797 (and $x94 $x796)))
 (let (($x395 (and $x797 $x150)))
 (let (($x68 (and $x395 $x786)))
 (let (($x566 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let ((?x684 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x414 (= Lambda161Var input.spec-%var-y-0)))
 (let ((?x945 (ite $x414 ?x684 (_ bv0 32))))
 (let (($x265 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x794 (ite $x265 ?x945 (_ bv0 32))))
 (let (($x435 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x11 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x11 (_ bv1 32))))
 (=> (and $x128 $x435) (= (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda160Var Lambda161Var) ?x794)))))))))))
 ))
 (let (($x912 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x414 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x265 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x265 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x61 (_ bv1 32))))
 (let ((?x11 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x11 (_ bv1 32))))
 (let (($x435 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x435 (= $x128 $x211)))))))))))
 ))
 (let (($x534 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let (($x435 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let ((?x11 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x11 (_ bv0 32))))
 (=> (and $x166 $x435) $x41))))))
 ))
 (let (($x319 (forall ((Lambda160Var (_ BitVec 32)) (Lambda161Var (_ BitVec 32)) )(let (($x414 (= Lambda161Var input.spec-%var-y-0)))
 (let (($x113 (or false $x414)))
 (let (($x265 (= Lambda160Var input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x265 $x113 false) (_ bv1 32) (_ bv0 32))))
 (let (($x510 (= ?x61 (_ bv0 32))))
 (let ((?x11 (ite (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda160Var Lambda161Var) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x11 (_ bv0 32))))
 (let (($x435 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x435 (= $x166 $x510)))))))))))
 ))
 (let (($x681 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x749 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x615 (bvuge ?x749 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x615))))
 ))
 (let (($x894 (forall ((Lambda160Var (_ BitVec 32)) )(let (($x41 (= false false)))
 (let ((?x775 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x771 (= ?x775 (_ bv0 32))))
 (=> $x771 $x41)))))
 ))
 (let (($x518 (forall ((Lambda160Var (_ BitVec 32)) )(let ((?x749 (ite (or false (= Lambda160Var input.spec-%var-x-0)) (_ bv1 32) (_ bv0 32))))
 (let (($x769 (= ?x749 (_ bv0 32))))
 (let ((?x775 (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda160Var) (_ bv1 32) (_ bv0 32))))
 (let (($x771 (= ?x775 (_ bv0 32))))
 (= $x771 $x769))))))
 ))
 (let (($x893 (and $x518 $x894)))
 (let (($x546 (and $x893 $x681)))
 (let (($x328 (and $x546 $x319)))
 (let (($x436 (and $x328 $x534)))
 (let (($x914 (and $x436 $x912)))
 (let (($x572 (and $x914 $x566)))
 (let (($x1014 (and $x572 $x68)))
 (let (($x787 (and $x41 $x1014)))
 (let (($x709 (= input.spec-%var-m2-0.L1%18%bbentry ?x1030)))
 (let (($x45 (and $x709 $x787)))
 (let (($x1042 (and $x41 $x45)))
 (let (($x542 (=> $x1042 $x611)))
 (not $x542)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2888340/query
