==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x10 $x8)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x10 $x8)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6314253b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7b97677f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460578/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x527 (= true false)))
 (let (($x528 (= $x527 true)))
 (let ((?x502 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x504 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x507 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x510 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x511 (concat ?x510 (concat ?x507 (concat ?x504 ?x502)))))
 (let (($x512 (= ?x511 input.dst.llvm-%y)))
 (let (($x513 (= $x512 true)))
 (let ((?x487 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x489 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x493 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x496 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x497 (concat ?x496 (concat ?x493 (concat ?x489 ?x487)))))
 (let (($x498 (= ?x497 input.dst.llvm-%x)))
 (let (($x499 (= $x498 true)))
 (let ((?x472 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x473 (= (_ bv0 32) ?x472)))
 (let ((?x470 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x471 (= (_ bv0 32) ?x470)))
 (let ((?x468 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x469 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x468)))
 (let ((?x464 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x465 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x464)))
 (let (($x462 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x466 (and $x462 $x465)))
 (let (($x461 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x467 (and $x461 $x466)))
 (let (($x460 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x458 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x452 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x451 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x453 (and $x451 $x452)))
 (let (($x454 (not $x453)))
 (let (($x449 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x448 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x450 (and $x448 $x449)))
 (let (($x456 (and (not $x450) $x454)))
 (let (($x443 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x442 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x444 (and $x442 $x443)))
 (let (($x445 (not $x444)))
 (let (($x421 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x420 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x441 (and $x420 $x421)))
 (let (($x447 (and (not $x441) $x445)))
 (let (($x479 (and (and (and (and (and (and $x447 $x456) $x458) $x460) $x467) $x469) $x471)))
 (let (($x480 (and $x479 $x473)))
 (let (($x434 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x426 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x433 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x426)))
 (let (($x428 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x427 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x426)))
 (let (($x438 (or false (or false (and (and true (or $x427 $x428)) (or $x433 $x434))))))
 (let (($x440 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x438)))
 (let (($x481 (and $x440 $x480)))
 (let (($x482 (= $x481 true)))
 (let (($x483 (= $x482 true)))
 (let (($x414 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x415 (= $x414 true)))
 (let (($x416 (= $x415 true)))
 (let (($x410 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x411 (= $x410 true)))
 (let (($x412 (= $x411 true)))
 (let (($x417 (and $x412 $x416)))
 (let (($x484 (and $x417 $x483)))
 (let (($x500 (and $x484 $x499)))
 (let (($x514 (and $x500 $x513)))
 (let (($x407 (forall ((Lambda99 (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x71 (= Lambda99 input.spec-%var-y-0)))
 (let ((?x100 (ite $x71 ?x7 (_ bv0 32))))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x332 (ite $x36 ?x100 (_ bv0 32))))
 (let ((?x397 (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda99)))
 (let (($x360 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x366 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x376 (ite $x366 (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x376 (_ bv1 32))))
 (=> (and $x391 $x360) (= ?x397 ?x332)))))))))))))
 ))
 (let (($x394 (forall ((Lambda99 (_ BitVec 32)) )(let (($x71 (= Lambda99 input.spec-%var-y-0)))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x308 (ite (ite $x36 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x308 (_ bv1 32))))
 (let (($x366 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x376 (ite $x366 (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x376 (_ bv1 32))))
 (let (($x360 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x360 (= $x391 $x321)))))))))))
 ))
 (let (($x385 (forall ((Lambda99 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x360 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x382 (=> $x360 $x29)))
 (let (($x366 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x376 (ite $x366 (_ bv1 32) (_ bv0 32))))
 (let (($x377 (= ?x376 (_ bv0 32))))
 (=> (and $x377 $x360) $x29))))))))
 ))
 (let (($x380 (forall ((Lambda99 (_ BitVec 32)) )(let (($x71 (= Lambda99 input.spec-%var-y-0)))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x308 (ite (ite $x36 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x308 (_ bv0 32))))
 (let (($x366 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x376 (ite $x366 (_ bv1 32) (_ bv0 32))))
 (let (($x377 (= ?x376 (_ bv0 32))))
 (let (($x360 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x360 (= $x377 $x309)))))))))))
 ))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x355 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x355 (_ bv1 32))))
 (let (($x360 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x362 (= $x360 $x361)))
 (let (($x29 (= false false)))
 (let (($x354 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x358 (=> $x354 $x29)))
 (let (($x356 (= ?x355 (_ bv0 32))))
 (let (($x357 (= $x354 $x356)))
 (let (($x359 (and $x357 $x358)))
 (let (($x363 (and $x359 $x362)))
 (let (($x381 (and $x363 $x380)))
 (let (($x386 (and $x381 $x385)))
 (let (($x395 (and $x386 $x394)))
 (let (($x408 (and $x395 $x407)))
 (let (($x515 (and $x408 $x514)))
 (let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x34 (ite $x25 ?x7 (_ bv0 32))))
 (let ((?x35 (ite $x36 ?x34 (_ bv0 32))))
 (let (($x350 (= input.spec-%tmpvar-6.L1%13%d.2 ?x35)))
 (let (($x345 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x351 (=> $x345 $x350)))
 (let (($x339 (ite $x36 $x25 false)))
 (let ((?x340 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x346 (bvuge ?x340 (_ bv1 32))))
 (let (($x347 (= $x345 $x346)))
 (let (($x338 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x343 (=> $x338 $x29)))
 (let (($x341 (= ?x340 (_ bv0 32))))
 (let (($x342 (= $x338 $x341)))
 (let (($x344 (and $x342 $x343)))
 (let (($x348 (and $x344 $x347)))
 (let (($x352 (and $x348 $x351)))
 (let (($x516 (and $x352 $x515)))
 (let (($x335 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x71 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x100 (ite $x71 ?x7 (_ bv0 32))))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x332 (ite $x36 ?x100 (_ bv0 32))))
 (let ((?x327 (input.spec-%var-m1-0.L1%13%d.1.1 Lambda101)))
 (let (($x299 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x310 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x310 (_ bv1 32))))
 (=> $x322 (= ?x327 ?x332))))))))))))
 ))
 (let (($x324 (forall ((Lambda101 (_ BitVec 32)) )(let (($x71 (= Lambda101 input.spec-%var-y-0)))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x308 (ite (ite $x36 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x308 (_ bv1 32))))
 (let (($x299 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x310 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x310 (_ bv1 32))))
 (= $x322 $x321)))))))))
 ))
 (let (($x316 (forall ((Lambda101 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x299 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x310 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x310 (_ bv0 32))))
 (=> $x311 $x29))))))
 ))
 (let (($x313 (forall ((Lambda101 (_ BitVec 32)) )(let (($x71 (= Lambda101 input.spec-%var-y-0)))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x308 (ite (ite $x36 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x308 (_ bv0 32))))
 (let (($x299 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x310 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x310 (_ bv0 32))))
 (= $x311 $x309)))))))))
 ))
 (let (($x317 (and $x313 $x316)))
 (let (($x325 (and $x317 $x324)))
 (let (($x336 (and $x325 $x335)))
 (let (($x517 (and $x336 $x516)))
 (let (($x296 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x269 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x258 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x264 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x264 (_ bv1 32))))
 (=> (and $x282 $x269) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda104 Lambda105) (_ bv0 32))))))))
 ))
 (let (($x285 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x264 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x264 (_ bv1 32))))
 (let (($x269 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x269 (= $x282 false)))))))
 ))
 (let (($x277 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x269 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x258 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x264 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x264 (_ bv0 32))))
 (=> (and $x265 $x269) $x29)))))))
 ))
 (let (($x271 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x264 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x264 (_ bv0 32))))
 (let (($x269 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x269 (= $x265 true)))))))
 ))
 (let (($x255 (forall ((Lambda104 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x249 (forall ((Lambda104 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x238 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x243 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x243 (_ bv0 32))))
 (=> $x244 $x29))))))
 ))
 (let (($x246 (forall ((Lambda104 (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x243 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x243 (_ bv0 32))))
 (= $x244 true)))))
 ))
 (let (($x250 (and $x246 $x249)))
 (let (($x256 (and $x250 $x255)))
 (let (($x272 (and $x256 $x271)))
 (let (($x278 (and $x272 $x277)))
 (let (($x286 (and $x278 $x285)))
 (let (($x297 (and $x286 $x296)))
 (let (($x518 (and $x297 $x517)))
 (let (($x235 (forall ((Lambda101 (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x214 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (bvuge ?x214 (_ bv1 32))))
 (=> $x224 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda101) (_ bv0 32)))))))
 ))
 (let (($x226 (forall ((Lambda101 (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x214 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (bvuge ?x214 (_ bv1 32))))
 (= $x224 false)))))
 ))
 (let (($x220 (forall ((Lambda101 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x209 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x214 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x214 (_ bv0 32))))
 (=> $x215 $x29))))))
 ))
 (let (($x217 (forall ((Lambda101 (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x214 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x214 (_ bv0 32))))
 (= $x215 true)))))
 ))
 (let (($x221 (and $x217 $x220)))
 (let (($x227 (and $x221 $x226)))
 (let (($x236 (and $x227 $x235)))
 (let (($x519 (and $x236 $x518)))
 (let (($x207 (= ?x7 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x520 (and $x207 $x519)))
 (let (($x204 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x71 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x100 (ite $x71 ?x7 (_ bv0 32))))
 (let ((?x197 (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda101)))
 (let (($x170 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x180 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x180 (_ bv1 32))))
 (=> $x192 (= ?x197 ?x100))))))))))
 ))
 (let (($x194 (forall ((Lambda101 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x180 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x180 (_ bv1 32))))
 (= $x192 (bvuge (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x186 (forall ((Lambda101 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x170 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x180 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (=> $x181 $x29))))))
 ))
 (let (($x183 (forall ((Lambda101 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x180 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (= $x181 (= (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x187 (and $x183 $x186)))
 (let (($x195 (and $x187 $x194)))
 (let (($x205 (and $x195 $x204)))
 (let (($x521 (and $x205 $x520)))
 (let (($x166 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x71 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x100 (ite $x71 ?x7 (_ bv0 32))))
 (let (($x80 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x101 (ite $x80 ?x100 (_ bv0 32))))
 (let ((?x158 (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x139 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x128 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x134 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x134 (_ bv1 32))))
 (=> (and $x152 $x139) (= ?x158 ?x101)))))))))))))
 ))
 (let (($x155 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= Lambda105 input.spec-%var-y-0)))
 (let (($x80 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x80 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x61 (_ bv1 32))))
 (let (($x128 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x134 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x134 (_ bv1 32))))
 (let (($x139 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x139 (= $x152 $x88)))))))))))
 ))
 (let (($x147 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x139 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x128 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x134 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x134 (_ bv0 32))))
 (=> (and $x135 $x139) $x29)))))))
 ))
 (let (($x141 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= Lambda105 input.spec-%var-y-0)))
 (let (($x80 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x80 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (= ?x61 (_ bv0 32))))
 (let (($x128 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x134 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x134 (_ bv0 32))))
 (let (($x139 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x139 (= $x135 $x24)))))))))))
 ))
 (let (($x125 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x10 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x10 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x21))))
 ))
 (let (($x119 (forall ((Lambda104 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x108 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x113 (ite $x108 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x113 (_ bv0 32))))
 (=> $x114 $x29))))))
 ))
 (let (($x116 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x10 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x10 (_ bv0 32))))
 (let (($x108 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x113 (ite $x108 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x113 (_ bv0 32))))
 (= $x114 $x44)))))))
 ))
 (let (($x120 (and $x116 $x119)))
 (let (($x126 (and $x120 $x125)))
 (let (($x142 (and $x126 $x141)))
 (let (($x148 (and $x142 $x147)))
 (let (($x156 (and $x148 $x155)))
 (let (($x167 (and $x156 $x166)))
 (let (($x522 (and $x167 $x521)))
 (let (($x105 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x71 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x100 (ite $x71 ?x7 (_ bv0 32))))
 (let (($x80 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x101 (ite $x80 ?x100 (_ bv0 32))))
 (let ((?x93 (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x64 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x65 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x70 (ite $x65 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x70 (_ bv1 32))))
 (=> (and $x90 $x64) (= ?x93 ?x101)))))))))))))
 ))
 (let (($x59 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= Lambda105 input.spec-%var-y-0)))
 (let (($x80 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x80 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x61 (_ bv1 32))))
 (let (($x65 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x70 (ite $x65 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x70 (_ bv1 32))))
 (let (($x64 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x64 (= $x90 $x88)))))))))))
 ))
 (let (($x50 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x64 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x65 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x70 (ite $x65 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x70 (_ bv0 32))))
 (=> (and $x73 $x64) $x29)))))))
 ))
 (let (($x17 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= Lambda105 input.spec-%var-y-0)))
 (let (($x80 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x80 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (= ?x61 (_ bv0 32))))
 (let (($x65 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x70 (ite $x65 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x70 (_ bv0 32))))
 (let (($x64 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x64 (= $x73 $x24)))))))))))
 ))
 (let (($x89 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x10 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x10 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x21))))
 ))
 (let (($x67 (forall ((Lambda104 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x23 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x14 (ite $x23 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x14 (_ bv0 32))))
 (=> $x19 $x29))))))
 ))
 (let (($x76 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x10 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x10 (_ bv0 32))))
 (let (($x23 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x14 (ite $x23 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x14 (_ bv0 32))))
 (= $x19 $x44)))))))
 ))
 (let (($x46 (and $x76 $x67)))
 (let (($x53 (and $x46 $x89)))
 (let (($x11 (and $x53 $x17)))
 (let (($x62 (and $x11 $x50)))
 (let (($x91 (and $x62 $x59)))
 (let (($x106 (and $x91 $x105)))
 (let (($x523 (and $x106 $x522)))
 (let (($x524 (and $x29 $x523)))
 (let (($x55 (= input.spec-%var-m2-0.L1%18%bbentry ?x35)))
 (let (($x525 (and $x55 $x524)))
 (let (($x526 (and $x29 $x525)))
 (let (($x529 (=> $x526 $x528)))
 (not $x529)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x527 (= true false)))
 (let (($x528 (= $x527 true)))
 (let ((?x502 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x504 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x507 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x510 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x511 (concat ?x510 (concat ?x507 (concat ?x504 ?x502)))))
 (let (($x512 (= ?x511 input.dst.llvm-%y)))
 (let (($x513 (= $x512 true)))
 (let ((?x487 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x489 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x493 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x496 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x497 (concat ?x496 (concat ?x493 (concat ?x489 ?x487)))))
 (let (($x498 (= ?x497 input.dst.llvm-%x)))
 (let (($x499 (= $x498 true)))
 (let ((?x472 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x473 (= (_ bv0 32) ?x472)))
 (let ((?x470 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x471 (= (_ bv0 32) ?x470)))
 (let ((?x468 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x469 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x468)))
 (let ((?x464 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x465 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x464)))
 (let (($x462 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x466 (and $x462 $x465)))
 (let (($x461 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x467 (and $x461 $x466)))
 (let (($x460 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x458 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x452 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x451 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x453 (and $x451 $x452)))
 (let (($x454 (not $x453)))
 (let (($x449 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x448 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x450 (and $x448 $x449)))
 (let (($x456 (and (not $x450) $x454)))
 (let (($x443 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x442 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x444 (and $x442 $x443)))
 (let (($x445 (not $x444)))
 (let (($x421 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x420 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x441 (and $x420 $x421)))
 (let (($x447 (and (not $x441) $x445)))
 (let (($x479 (and (and (and (and (and (and $x447 $x456) $x458) $x460) $x467) $x469) $x471)))
 (let (($x480 (and $x479 $x473)))
 (let (($x434 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x426 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x433 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x426)))
 (let (($x428 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x427 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x426)))
 (let (($x438 (or false (or false (and (and true (or $x427 $x428)) (or $x433 $x434))))))
 (let (($x440 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x438)))
 (let (($x481 (and $x440 $x480)))
 (let (($x482 (= $x481 true)))
 (let (($x483 (= $x482 true)))
 (let (($x414 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x415 (= $x414 true)))
 (let (($x416 (= $x415 true)))
 (let (($x410 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x411 (= $x410 true)))
 (let (($x412 (= $x411 true)))
 (let (($x417 (and $x412 $x416)))
 (let (($x484 (and $x417 $x483)))
 (let (($x500 (and $x484 $x499)))
 (let (($x514 (and $x500 $x513)))
 (let (($x407 (forall ((Lambda99 (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x71 (= Lambda99 input.spec-%var-y-0)))
 (let ((?x100 (ite $x71 ?x7 (_ bv0 32))))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x332 (ite $x36 ?x100 (_ bv0 32))))
 (let ((?x397 (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda99)))
 (let (($x360 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x366 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x376 (ite $x366 (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x376 (_ bv1 32))))
 (=> (and $x391 $x360) (= ?x397 ?x332)))))))))))))
 ))
 (let (($x394 (forall ((Lambda99 (_ BitVec 32)) )(let (($x71 (= Lambda99 input.spec-%var-y-0)))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x308 (ite (ite $x36 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x308 (_ bv1 32))))
 (let (($x366 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x376 (ite $x366 (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x376 (_ bv1 32))))
 (let (($x360 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x360 (= $x391 $x321)))))))))))
 ))
 (let (($x385 (forall ((Lambda99 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x360 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x382 (=> $x360 $x29)))
 (let (($x366 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x376 (ite $x366 (_ bv1 32) (_ bv0 32))))
 (let (($x377 (= ?x376 (_ bv0 32))))
 (=> (and $x377 $x360) $x29))))))))
 ))
 (let (($x380 (forall ((Lambda99 (_ BitVec 32)) )(let (($x71 (= Lambda99 input.spec-%var-y-0)))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x308 (ite (ite $x36 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x308 (_ bv0 32))))
 (let (($x366 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x376 (ite $x366 (_ bv1 32) (_ bv0 32))))
 (let (($x377 (= ?x376 (_ bv0 32))))
 (let (($x360 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x360 (= $x377 $x309)))))))))))
 ))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x355 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x355 (_ bv1 32))))
 (let (($x360 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x362 (= $x360 $x361)))
 (let (($x29 (= false false)))
 (let (($x354 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x358 (=> $x354 $x29)))
 (let (($x356 (= ?x355 (_ bv0 32))))
 (let (($x357 (= $x354 $x356)))
 (let (($x359 (and $x357 $x358)))
 (let (($x363 (and $x359 $x362)))
 (let (($x381 (and $x363 $x380)))
 (let (($x386 (and $x381 $x385)))
 (let (($x395 (and $x386 $x394)))
 (let (($x408 (and $x395 $x407)))
 (let (($x515 (and $x408 $x514)))
 (let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x25 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x34 (ite $x25 ?x7 (_ bv0 32))))
 (let ((?x35 (ite $x36 ?x34 (_ bv0 32))))
 (let (($x350 (= input.spec-%tmpvar-6.L1%13%d.2 ?x35)))
 (let (($x345 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x351 (=> $x345 $x350)))
 (let (($x339 (ite $x36 $x25 false)))
 (let ((?x340 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x346 (bvuge ?x340 (_ bv1 32))))
 (let (($x347 (= $x345 $x346)))
 (let (($x338 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x343 (=> $x338 $x29)))
 (let (($x341 (= ?x340 (_ bv0 32))))
 (let (($x342 (= $x338 $x341)))
 (let (($x344 (and $x342 $x343)))
 (let (($x348 (and $x344 $x347)))
 (let (($x352 (and $x348 $x351)))
 (let (($x516 (and $x352 $x515)))
 (let (($x335 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x71 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x100 (ite $x71 ?x7 (_ bv0 32))))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x332 (ite $x36 ?x100 (_ bv0 32))))
 (let ((?x327 (input.spec-%var-m1-0.L1%13%d.1.1 Lambda101)))
 (let (($x299 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x310 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x310 (_ bv1 32))))
 (=> $x322 (= ?x327 ?x332))))))))))))
 ))
 (let (($x324 (forall ((Lambda101 (_ BitVec 32)) )(let (($x71 (= Lambda101 input.spec-%var-y-0)))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x308 (ite (ite $x36 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x308 (_ bv1 32))))
 (let (($x299 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x310 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x310 (_ bv1 32))))
 (= $x322 $x321)))))))))
 ))
 (let (($x316 (forall ((Lambda101 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x299 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x310 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x310 (_ bv0 32))))
 (=> $x311 $x29))))))
 ))
 (let (($x313 (forall ((Lambda101 (_ BitVec 32)) )(let (($x71 (= Lambda101 input.spec-%var-y-0)))
 (let (($x36 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x308 (ite (ite $x36 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x308 (_ bv0 32))))
 (let (($x299 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x310 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x310 (_ bv0 32))))
 (= $x311 $x309)))))))))
 ))
 (let (($x317 (and $x313 $x316)))
 (let (($x325 (and $x317 $x324)))
 (let (($x336 (and $x325 $x335)))
 (let (($x517 (and $x336 $x516)))
 (let (($x296 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x269 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x258 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x264 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x264 (_ bv1 32))))
 (=> (and $x282 $x269) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda104 Lambda105) (_ bv0 32))))))))
 ))
 (let (($x285 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x264 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x264 (_ bv1 32))))
 (let (($x269 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x269 (= $x282 false)))))))
 ))
 (let (($x277 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x269 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x258 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x264 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x264 (_ bv0 32))))
 (=> (and $x265 $x269) $x29)))))))
 ))
 (let (($x271 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x258 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x264 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x264 (_ bv0 32))))
 (let (($x269 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x269 (= $x265 true)))))))
 ))
 (let (($x255 (forall ((Lambda104 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x249 (forall ((Lambda104 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x238 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x243 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x243 (_ bv0 32))))
 (=> $x244 $x29))))))
 ))
 (let (($x246 (forall ((Lambda104 (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x243 (ite $x238 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x243 (_ bv0 32))))
 (= $x244 true)))))
 ))
 (let (($x250 (and $x246 $x249)))
 (let (($x256 (and $x250 $x255)))
 (let (($x272 (and $x256 $x271)))
 (let (($x278 (and $x272 $x277)))
 (let (($x286 (and $x278 $x285)))
 (let (($x297 (and $x286 $x296)))
 (let (($x518 (and $x297 $x517)))
 (let (($x235 (forall ((Lambda101 (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x214 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (bvuge ?x214 (_ bv1 32))))
 (=> $x224 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda101) (_ bv0 32)))))))
 ))
 (let (($x226 (forall ((Lambda101 (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x214 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (bvuge ?x214 (_ bv1 32))))
 (= $x224 false)))))
 ))
 (let (($x220 (forall ((Lambda101 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x209 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x214 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x214 (_ bv0 32))))
 (=> $x215 $x29))))))
 ))
 (let (($x217 (forall ((Lambda101 (_ BitVec 32)) )(let (($x209 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x214 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x214 (_ bv0 32))))
 (= $x215 true)))))
 ))
 (let (($x221 (and $x217 $x220)))
 (let (($x227 (and $x221 $x226)))
 (let (($x236 (and $x227 $x235)))
 (let (($x519 (and $x236 $x518)))
 (let (($x207 (= ?x7 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x520 (and $x207 $x519)))
 (let (($x204 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x71 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x100 (ite $x71 ?x7 (_ bv0 32))))
 (let ((?x197 (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda101)))
 (let (($x170 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x180 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x180 (_ bv1 32))))
 (=> $x192 (= ?x197 ?x100))))))))))
 ))
 (let (($x194 (forall ((Lambda101 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x180 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x180 (_ bv1 32))))
 (= $x192 (bvuge (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x186 (forall ((Lambda101 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x170 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x180 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (=> $x181 $x29))))))
 ))
 (let (($x183 (forall ((Lambda101 (_ BitVec 32)) )(let (($x170 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x180 (ite $x170 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (= $x181 (= (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x187 (and $x183 $x186)))
 (let (($x195 (and $x187 $x194)))
 (let (($x205 (and $x195 $x204)))
 (let (($x521 (and $x205 $x520)))
 (let (($x166 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x71 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x100 (ite $x71 ?x7 (_ bv0 32))))
 (let (($x80 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x101 (ite $x80 ?x100 (_ bv0 32))))
 (let ((?x158 (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x139 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x128 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x134 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x134 (_ bv1 32))))
 (=> (and $x152 $x139) (= ?x158 ?x101)))))))))))))
 ))
 (let (($x155 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= Lambda105 input.spec-%var-y-0)))
 (let (($x80 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x80 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x61 (_ bv1 32))))
 (let (($x128 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x134 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x134 (_ bv1 32))))
 (let (($x139 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x139 (= $x152 $x88)))))))))))
 ))
 (let (($x147 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x139 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x128 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x134 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x134 (_ bv0 32))))
 (=> (and $x135 $x139) $x29)))))))
 ))
 (let (($x141 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= Lambda105 input.spec-%var-y-0)))
 (let (($x80 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x80 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (= ?x61 (_ bv0 32))))
 (let (($x128 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x134 (ite $x128 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x134 (_ bv0 32))))
 (let (($x139 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x139 (= $x135 $x24)))))))))))
 ))
 (let (($x125 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x10 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x10 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x21))))
 ))
 (let (($x119 (forall ((Lambda104 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x108 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x113 (ite $x108 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x113 (_ bv0 32))))
 (=> $x114 $x29))))))
 ))
 (let (($x116 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x10 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x10 (_ bv0 32))))
 (let (($x108 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x113 (ite $x108 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x113 (_ bv0 32))))
 (= $x114 $x44)))))))
 ))
 (let (($x120 (and $x116 $x119)))
 (let (($x126 (and $x120 $x125)))
 (let (($x142 (and $x126 $x141)))
 (let (($x148 (and $x142 $x147)))
 (let (($x156 (and $x148 $x155)))
 (let (($x167 (and $x156 $x166)))
 (let (($x522 (and $x167 $x521)))
 (let (($x105 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x7 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x71 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x100 (ite $x71 ?x7 (_ bv0 32))))
 (let (($x80 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x101 (ite $x80 ?x100 (_ bv0 32))))
 (let ((?x93 (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x64 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x65 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x70 (ite $x65 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x70 (_ bv1 32))))
 (=> (and $x90 $x64) (= ?x93 ?x101)))))))))))))
 ))
 (let (($x59 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= Lambda105 input.spec-%var-y-0)))
 (let (($x80 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x80 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x61 (_ bv1 32))))
 (let (($x65 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x70 (ite $x65 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x70 (_ bv1 32))))
 (let (($x64 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x64 (= $x90 $x88)))))))))))
 ))
 (let (($x50 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x64 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x65 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x70 (ite $x65 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x70 (_ bv0 32))))
 (=> (and $x73 $x64) $x29)))))))
 ))
 (let (($x17 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= Lambda105 input.spec-%var-y-0)))
 (let (($x80 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x61 (ite (ite $x80 $x71 false) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (= ?x61 (_ bv0 32))))
 (let (($x65 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x70 (ite $x65 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x70 (_ bv0 32))))
 (let (($x64 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x64 (= $x73 $x24)))))))))))
 ))
 (let (($x89 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x10 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x10 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x21))))
 ))
 (let (($x67 (forall ((Lambda104 (_ BitVec 32)) )(let (($x29 (= false false)))
 (let (($x23 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x14 (ite $x23 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x14 (_ bv0 32))))
 (=> $x19 $x29))))))
 ))
 (let (($x76 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x10 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x10 (_ bv0 32))))
 (let (($x23 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x14 (ite $x23 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x14 (_ bv0 32))))
 (= $x19 $x44)))))))
 ))
 (let (($x46 (and $x76 $x67)))
 (let (($x53 (and $x46 $x89)))
 (let (($x11 (and $x53 $x17)))
 (let (($x62 (and $x11 $x50)))
 (let (($x91 (and $x62 $x59)))
 (let (($x106 (and $x91 $x105)))
 (let (($x523 (and $x106 $x522)))
 (let (($x524 (and $x29 $x523)))
 (let (($x55 (= input.spec-%var-m2-0.L1%18%bbentry ?x35)))
 (let (($x525 (and $x55 $x524)))
 (let (($x526 (and $x29 $x525)))
 (let (($x529 (=> $x526 $x528)))
 (not $x529)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32)
    #x00000800)
  (define-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8bbf04fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!122))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1a7cd4f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1a7cd4fb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8bbf04ff)
  (define-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32)
    #x00040048)
  (define-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32)
    #x00040048)
  (define-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32)
    #x00040048)
  (define-fun input.spec-%var-y-0 () (_ BitVec 32)
    #x05800003)
  (define-fun input.dst.llvm-%y () (_ BitVec 32)
    #x05800003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8bbf04fc)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #xfa840045)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xfa840045)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1a7cd4f8)
  (define-fun input.spec-%var-m-0.L1%8%d.0.1!144 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #xfa840045) true
      false))
  (define-fun k!124 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xfa840045) #xfa840045
      #x00000000))
  (define-fun input.spec-%var-m-0.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L1%8%d.0.1!144 (k!124 x!0)))
  (define-fun k!122 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x8bbf04fd) #x00
    (ite (= x!0 #x1a7cd4fa) #x84
    (ite (= x!0 #x8bbf04fc) #x03
    (ite (= x!0 #x8bbf04ff) #x05
    (ite (= x!0 #x1a7cd4f9) #x00
    (ite (= x!0 #x1a7cd4fb) #xfa
    (ite (= x!0 #x1a7cd4f8) #x45
      #x80))))))))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.0.1!141 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (ite (and (= x!0 #xfa840045) (= x!1 #x05800003)) true
      false))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1!139 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (ite (and (= x!0 #xfa840045) (= x!1 #x05800003)) true
      false))
  (define-fun k!132 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x05800003) #x05800003
      #x00000000))
  (define-fun input.spec-%var-m1-0.L1%13%d.1.1!135 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x05800003) #x00040048
      #x00000006))
  (define-fun k!125 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x05800003) #x05800003
      #x00000000))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.0.1!138 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x05800003) true
      false))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.1.1!134 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #xfa840045) (= x!1 #x05800003)) #x00040048
      #x00000005))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.1.1!142 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x05800003) #x00040048
      #x00000008))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%tmpvar-5.L1%8%d.2.1.1!142 (k!132 x!0)))
  (define-fun input.spec-%tmpvar-3.L1%8%d.0.1!136 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x05800003) true
      false))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1!140 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #xfa840045) (= x!1 #x05800003)) #x00040048
      #x00000007))
  (define-fun k!126 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xfa840045) #xfa840045
      #x00000000))
  (define-fun input.spec-%tmpvar-3.L1%8%d.1.1!133 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x05800003) #x00040048
      #x00000004))
  (define-fun k!127 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x05800003) #x05800003
      #x00000000))
  (define-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-3.L1%8%d.1.1!133 (k!127 x!0)))
  (define-fun k!123 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x05800003) #x05800003
      #x00000000))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m-0.L1%8%d.1.1.1.1!134 (k!124 x!0) (k!123 x!1)))
  (define-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!131 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x05800003) #x05800003
      #x00000000))
  (define-fun input.spec-%var-m1-0.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-0.L1%13%d.1.1!135 (k!131 x!0)))
  (define-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-3.L1%8%d.0.1!136 (k!127 x!0)))
  (define-fun input.spec-%var-m1-0.L1%13%d.0.1!137 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x05800003) true
      false))
  (define-fun input.spec-%var-m1-0.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-0.L1%13%d.0.1!137 (k!131 x!0)))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-5.L1%8%d.2.0.1!138 (k!132 x!0)))
  (define-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L1%8%d.1.1.0.1!139 (k!126 x!0) (k!125 x!1)))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L1%8%d.1.1.1.1!140 (k!126 x!0) (k!125 x!1)))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L1%8%d.1.1.0.1!141 (k!124 x!0) (k!123 x!1)))
  (define-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-4.L1%8%d.0.1!143 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #xfa840045) true
      false))
  (define-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L1%8%d.0.1!143 (k!126 x!0)))
  (define-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!122))
  (define-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00002003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32)
    #x70c06100)
  (define-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32)
    #x70c06100)
  (define-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32)
    #x70c06100)
  (define-fun input.spec-%var-y-0 () (_ BitVec 32)
    #x10101820)
  (define-fun input.dst.llvm-%y () (_ BitVec 32)
    #x10101820)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x60b048e0)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x60b048e0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00002000)
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.0.1!141 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x10101820))
  (define-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!131 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x10101820) #x10101820
      #x00000000))
  (define-fun input.spec-%var-m1-0.L1%13%d.1.1!134 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x10101820) #x70c06100
      #x00000008))
  (define-fun input.spec-%var-m1-0.L1%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-0.L1%13%d.1.1!134 (k!131 x!0)))
  (define-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun k!127 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x10101820) #x10101820
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1!140 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (and (= x!0 #x60b048e0) (= x!1 #x10101820)))
  (define-fun k!123 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x10101820) #x10101820
      #x00000000))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.0.1!135 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (and (= x!0 #x60b048e0) (= x!1 #x10101820)))
  (define-fun k!124 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x60b048e0) #x60b048e0
      #x00000000))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L1%8%d.1.1.0.1!135 (k!124 x!0) (k!123 x!1)))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.1.1!136 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x60b048e0) (= x!1 #x10101820)) #x70c06100
      #x00000009))
  (define-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m-0.L1%8%d.1.1.1.1!136 (k!124 x!0) (k!123 x!1)))
  (define-fun k!126 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x60b048e0) #x60b048e0
      #x00000000))
  (define-fun input.spec-%tmpvar-3.L1%8%d.1.1!144 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x10101820) #x70c06100
      #x0000000c))
  (define-fun input.spec-%tmpvar-3.L1%8%d.0.1!138 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x10101820))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.1.1!137 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x10101820) #x70c06100
      #x0000000a))
  (define-fun k!132 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x10101820) #x10101820
      #x00000000))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%tmpvar-5.L1%8%d.2.1.1!137 (k!132 x!0)))
  (define-fun k!125 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x10101820) #x10101820
      #x00000000))
  (define-fun input.spec-%var-m-0.L1%8%d.0.1!142 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x60b048e0))
  (define-fun input.spec-%var-m1-0.L1%13%d.0.1!133 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x10101820))
  (define-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-5.L1%8%d.2.0.1!141 (k!132 x!0)))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L1%8%d.1.1.0.1!140 (k!126 x!0) (k!125 x!1)))
  (define-fun input.spec-%var-m-0.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L1%8%d.0.1!142 (k!124 x!0)))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1!143 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x60b048e0) (= x!1 #x10101820)) #x70c06100
      #x0000000b))
  (define-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L1%8%d.1.1.1.1!143 (k!126 x!0) (k!125 x!1)))
  (define-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%8%d.0.1!139 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x60b048e0))
  (define-fun k!122 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00002003) #x60
    (ite (= x!0 #x00002000) #xe0
    (ite (= x!0 #x00002002) #xb0
    (ite (= x!0 #x00002001) #x48
    (ite (= x!0 #x00000004) #x20
    (ite (= x!0 #x00000005) #x18
      #x10)))))))
  (define-fun input.spec-%var-m1-0.L1%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-0.L1%13%d.0.1!133 (k!131 x!0)))
  (define-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-3.L1%8%d.0.1!138 (k!127 x!0)))
  (define-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L1%8%d.0.1!139 (k!126 x!0)))
  (define-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-3.L1%8%d.1.1!144 (k!127 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460578/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x497 (ite $x8 $x36 false)))
 (let ((?x498 (ite $x497 (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x498 (_ bv1 32))))
 (let (($x499 (= ?x498 (_ bv0 32))))
 (let (($x400 (or $x499 $x507)))
 (let ((?x514 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x520 (bvuge ?x514 (_ bv1 32))))
 (let (($x401 (and $x520 $x400)))
 (let (($x515 (= ?x514 (_ bv0 32))))
 (let (($x402 (or $x515 $x401)))
 (let (($x403 (or false $x402)))
 (let (($x531 (= $x403 true)))
 (let (($x532 (= $x531 true)))
 (let (($x365 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x368 (= $x365 true)))
 (let (($x369 (= $x368 true)))
 (let (($x330 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x331 (= $x330 true)))
 (let (($x367 (= $x331 true)))
 (let ((?x328 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x301 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x318 (concat ?x314 (concat ?x304 (concat ?x301 ?x328)))))
 (let (($x320 (= ?x318 input.dst.llvm-%y)))
 (let (($x326 (= $x320 true)))
 (let ((?x252 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x281 (concat ?x280 (concat ?x273 (concat ?x260 ?x252)))))
 (let (($x290 (= ?x281 input.dst.llvm-%x)))
 (let (($x291 (= $x290 true)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x222)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x213)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x201)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x230 (and $x199 $x210)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (and $x196 $x230)))
 (let (($x190 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x172 $x173)))
 (let (($x175 (not $x174)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x171 $x198)))
 (let (($x177 (and (not $x169) $x175)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x150 $x151)))
 (let (($x160 (not $x157)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x96 $x97)))
 (let (($x162 (and (not $x149) $x160)))
 (let (($x289 (and (and (and (and (and (and $x162 $x177) $x188) $x190) $x208) $x212) $x218)))
 (let (($x237 (and $x289 $x223)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x159 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x159)))
 (let (($x133 (or false (or false (and (and true (or $x107 $x110)) (or $x122 $x127))))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x133)))
 (let (($x240 (and $x144 $x237)))
 (let (($x241 (= $x240 true)))
 (let (($x242 (= $x241 true)))
 (let (($x292 (and $x242 $x291)))
 (let (($x329 (and $x292 $x326)))
 (let (($x398 (and $x329 $x367)))
 (let (($x370 (and $x398 $x369)))
 (let (($x86 (forall ((Lambda99 (_ BitVec 32)) )(let ((?x418 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x93 (= Lambda99 input.spec-%var-y-0)))
 (let ((?x156 (ite $x93 ?x418 (_ bv0 32))))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x492 (ite $x8 ?x156 (_ bv0 32))))
 (let ((?x47 (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda99)))
 (let (($x519 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x525 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x37 (ite $x525 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x37 (_ bv1 32))))
 (=> (and $x69 $x519) (= ?x47 ?x492)))))))))))))
 ))
 (let (($x41 (forall ((Lambda99 (_ BitVec 32)) )(let (($x93 (= Lambda99 input.spec-%var-y-0)))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x462 (ite (ite $x8 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x462 (_ bv1 32))))
 (let (($x525 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x37 (ite $x525 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x37 (_ bv1 32))))
 (let (($x519 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x519 (= $x69 $x472)))))))))))
 ))
 (let (($x38 (forall ((Lambda99 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x519 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x94 (=> $x519 $x48)))
 (let (($x525 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x37 (ite $x525 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x37 (_ bv0 32))))
 (=> (and $x5 $x519) $x48))))))))
 ))
 (let (($x27 (forall ((Lambda99 (_ BitVec 32)) )(let (($x93 (= Lambda99 input.spec-%var-y-0)))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x462 (ite (ite $x8 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x463 (= ?x462 (_ bv0 32))))
 (let (($x525 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x37 (ite $x525 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x37 (_ bv0 32))))
 (let (($x519 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x519 (= $x5 $x463)))))))))))
 ))
 (let (($x519 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x521 (= $x519 $x520)))
 (let (($x48 (= false false)))
 (let (($x513 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x517 (=> $x513 $x48)))
 (let (($x516 (= $x513 $x515)))
 (let (($x518 (and $x516 $x517)))
 (let (($x522 (and $x518 $x521)))
 (let (($x16 (and $x522 $x27)))
 (let (($x52 (and $x16 $x38)))
 (let (($x45 (and $x52 $x41)))
 (let (($x87 (and $x45 $x86)))
 (let (($x371 (and $x87 $x370)))
 (let ((?x418 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x7 (ite $x36 ?x418 (_ bv0 32))))
 (let ((?x35 (ite $x8 ?x7 (_ bv0 32))))
 (let (($x505 (= input.spec-%tmpvar-6.L1%13%d.2 ?x35)))
 (let (($x506 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x508 (=> $x506 $x505)))
 (let (($x503 (= $x506 $x507)))
 (let (($x494 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x509 (=> $x494 $x48)))
 (let (($x500 (= $x494 $x499)))
 (let (($x510 (and $x500 $x509)))
 (let (($x504 (and $x510 $x503)))
 (let (($x511 (and $x504 $x508)))
 (let (($x372 (and $x511 $x371)))
 (let (($x489 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x418 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x93 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x156 (ite $x93 ?x418 (_ bv0 32))))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x492 (ite $x8 ?x156 (_ bv0 32))))
 (let ((?x484 (input.spec-%var-m1-0.L1%13%d.1.1 Lambda101)))
 (let (($x456 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x464 (ite $x456 (_ bv1 32) (_ bv0 32))))
 (let (($x473 (bvuge ?x464 (_ bv1 32))))
 (=> $x473 (= ?x484 ?x492))))))))))))
 ))
 (let (($x481 (forall ((Lambda101 (_ BitVec 32)) )(let (($x93 (= Lambda101 input.spec-%var-y-0)))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x462 (ite (ite $x8 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x462 (_ bv1 32))))
 (let (($x456 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x464 (ite $x456 (_ bv1 32) (_ bv0 32))))
 (let (($x473 (bvuge ?x464 (_ bv1 32))))
 (= $x473 $x472)))))))))
 ))
 (let (($x469 (forall ((Lambda101 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x456 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x464 (ite $x456 (_ bv1 32) (_ bv0 32))))
 (let (($x465 (= ?x464 (_ bv0 32))))
 (=> $x465 $x48))))))
 ))
 (let (($x467 (forall ((Lambda101 (_ BitVec 32)) )(let (($x93 (= Lambda101 input.spec-%var-y-0)))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x462 (ite (ite $x8 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x463 (= ?x462 (_ bv0 32))))
 (let (($x456 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x464 (ite $x456 (_ bv1 32) (_ bv0 32))))
 (let (($x465 (= ?x464 (_ bv0 32))))
 (= $x465 $x463)))))))))
 ))
 (let (($x478 (and $x467 $x469)))
 (let (($x482 (and $x478 $x481)))
 (let (($x487 (and $x482 $x489)))
 (let (($x373 (and $x487 $x372)))
 (let (($x452 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x425 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x413 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x423 (ite $x413 (_ bv1 32) (_ bv0 32))))
 (let (($x420 (bvuge ?x423 (_ bv1 32))))
 (=> (and $x420 $x425) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda104 Lambda105) (_ bv0 32))))))))
 ))
 (let (($x446 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x413 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x423 (ite $x413 (_ bv1 32) (_ bv0 32))))
 (let (($x420 (bvuge ?x423 (_ bv1 32))))
 (let (($x425 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x425 (= $x420 false)))))))
 ))
 (let (($x435 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x425 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x413 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x423 (ite $x413 (_ bv1 32) (_ bv0 32))))
 (let (($x439 (= ?x423 (_ bv0 32))))
 (=> (and $x439 $x425) $x48)))))))
 ))
 (let (($x429 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x413 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x423 (ite $x413 (_ bv1 32) (_ bv0 32))))
 (let (($x439 (= ?x423 (_ bv0 32))))
 (let (($x425 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x425 (= $x439 true)))))))
 ))
 (let (($x410 (forall ((Lambda104 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x404 (forall ((Lambda104 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x381 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x391 (ite $x381 (_ bv1 32) (_ bv0 32))))
 (let (($x392 (= ?x391 (_ bv0 32))))
 (=> $x392 $x48))))))
 ))
 (let (($x394 (forall ((Lambda104 (_ BitVec 32)) )(let (($x381 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x391 (ite $x381 (_ bv1 32) (_ bv0 32))))
 (let (($x392 (= ?x391 (_ bv0 32))))
 (= $x392 true)))))
 ))
 (let (($x405 (and $x394 $x404)))
 (let (($x411 (and $x405 $x410)))
 (let (($x430 (and $x411 $x429)))
 (let (($x436 (and $x430 $x435)))
 (let (($x442 (and $x436 $x446)))
 (let (($x453 (and $x442 $x452)))
 (let (($x374 (and $x453 $x373)))
 (let (($x378 (forall ((Lambda101 (_ BitVec 32)) )(let (($x341 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x346 (ite $x341 (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x346 (_ bv1 32))))
 (=> $x356 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda101) (_ bv0 32)))))))
 ))
 (let (($x358 (forall ((Lambda101 (_ BitVec 32)) )(let (($x341 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x346 (ite $x341 (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x346 (_ bv1 32))))
 (= $x356 false)))))
 ))
 (let (($x352 (forall ((Lambda101 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x341 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x346 (ite $x341 (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x346 (_ bv0 32))))
 (=> $x347 $x48))))))
 ))
 (let (($x349 (forall ((Lambda101 (_ BitVec 32)) )(let (($x341 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x346 (ite $x341 (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x346 (_ bv0 32))))
 (= $x347 true)))))
 ))
 (let (($x353 (and $x349 $x352)))
 (let (($x359 (and $x353 $x358)))
 (let (($x379 (and $x359 $x378)))
 (let (($x375 (and $x379 $x374)))
 (let (($x339 (= ?x418 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x383 (and $x339 $x375)))
 (let (($x336 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x418 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x93 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x156 (ite $x93 ?x418 (_ bv0 32))))
 (let ((?x324 (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda101)))
 (let (($x277 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x295 (ite $x277 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x295 (_ bv1 32))))
 (=> $x316 (= ?x324 ?x156))))))))))
 ))
 (let (($x322 (forall ((Lambda101 (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x295 (ite $x277 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x295 (_ bv1 32))))
 (= $x316 (bvuge (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x307 (forall ((Lambda101 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x277 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x295 (ite $x277 (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x295 (_ bv0 32))))
 (=> $x296 $x48))))))
 ))
 (let (($x299 (forall ((Lambda101 (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x295 (ite $x277 (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x295 (_ bv0 32))))
 (= $x296 (= (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x308 (and $x299 $x307)))
 (let (($x321 (and $x308 $x322)))
 (let (($x337 (and $x321 $x336)))
 (let (($x387 (and $x337 $x383)))
 (let (($x271 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x418 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x93 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x156 (ite $x93 ?x418 (_ bv0 32))))
 (let (($x100 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x158 (ite $x100 ?x156 (_ bv0 32))))
 (let ((?x267 (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x226 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x207 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x219 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x219 (_ bv1 32))))
 (=> (and $x249 $x226) (= ?x267 ?x158)))))))))))))
 ))
 (let (($x254 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x93 (= Lambda105 input.spec-%var-y-0)))
 (let (($x100 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x102 (ite (ite $x100 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x102 (_ bv1 32))))
 (let (($x207 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x219 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x219 (_ bv1 32))))
 (let (($x226 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x226 (= $x249 $x134)))))))))))
 ))
 (let (($x243 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x226 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x207 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x219 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x219 (_ bv0 32))))
 (=> (and $x220 $x226) $x48)))))))
 ))
 (let (($x229 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x93 (= Lambda105 input.spec-%var-y-0)))
 (let (($x100 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x102 (ite (ite $x100 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x102 (_ bv0 32))))
 (let (($x207 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x219 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x219 (_ bv0 32))))
 (let (($x226 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x226 (= $x220 $x103)))))))))))
 ))
 (let (($x204 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x46 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x46 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x80))))
 ))
 (let (($x193 (forall ((Lambda104 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x180 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x183 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x183 (_ bv0 32))))
 (=> $x185 $x48))))))
 ))
 (let (($x187 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x46 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x46 (_ bv0 32))))
 (let (($x180 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x183 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x183 (_ bv0 32))))
 (= $x185 $x82)))))))
 ))
 (let (($x194 (and $x187 $x193)))
 (let (($x205 (and $x194 $x204)))
 (let (($x233 (and $x205 $x229)))
 (let (($x244 (and $x233 $x243)))
 (let (($x255 (and $x244 $x254)))
 (let (($x272 (and $x255 $x271)))
 (let (($x388 (and $x272 $x387)))
 (let (($x166 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x418 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x93 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x156 (ite $x93 ?x418 (_ bv0 32))))
 (let (($x100 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x158 (ite $x100 ?x156 (_ bv0 32))))
 (let ((?x146 (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x114 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x72 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x104 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x104 (_ bv1 32))))
 (=> (and $x135 $x114) (= ?x146 ?x158)))))))))))))
 ))
 (let (($x141 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x93 (= Lambda105 input.spec-%var-y-0)))
 (let (($x100 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x102 (ite (ite $x100 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x102 (_ bv1 32))))
 (let (($x72 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x104 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x104 (_ bv1 32))))
 (let (($x114 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x114 (= $x135 $x134)))))))))))
 ))
 (let (($x125 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x114 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x72 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x104 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x104 (_ bv0 32))))
 (=> (and $x105 $x114) $x48)))))))
 ))
 (let (($x116 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x93 (= Lambda105 input.spec-%var-y-0)))
 (let (($x100 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x102 (ite (ite $x100 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x102 (_ bv0 32))))
 (let (($x72 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x104 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x104 (_ bv0 32))))
 (let (($x114 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x114 (= $x105 $x103)))))))))))
 ))
 (let (($x61 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x46 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x46 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x80))))
 ))
 (let (($x20 (forall ((Lambda104 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x14 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x21 (ite $x14 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x21 (_ bv0 32))))
 (=> $x84 $x48))))))
 ))
 (let (($x53 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x46 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x46 (_ bv0 32))))
 (let (($x14 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x21 (ite $x14 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x21 (_ bv0 32))))
 (= $x84 $x82)))))))
 ))
 (let (($x64 (and $x53 $x20)))
 (let (($x24 (and $x64 $x61)))
 (let (($x118 (and $x24 $x116)))
 (let (($x126 (and $x118 $x125)))
 (let (($x142 (and $x126 $x141)))
 (let (($x167 (and $x142 $x166)))
 (let (($x389 (and $x167 $x388)))
 (let (($x390 (and $x48 $x389)))
 (let (($x55 (= input.spec-%var-m2-0.L1%18%bbentry ?x35)))
 (let (($x396 (and $x55 $x390)))
 (let (($x399 (and $x48 $x396)))
 (let (($x533 (=> $x399 $x532)))
 (not $x533)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x497 (ite $x8 $x36 false)))
 (let ((?x498 (ite $x497 (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x498 (_ bv1 32))))
 (let (($x499 (= ?x498 (_ bv0 32))))
 (let (($x400 (or $x499 $x507)))
 (let ((?x514 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x520 (bvuge ?x514 (_ bv1 32))))
 (let (($x401 (and $x520 $x400)))
 (let (($x515 (= ?x514 (_ bv0 32))))
 (let (($x402 (or $x515 $x401)))
 (let (($x403 (or false $x402)))
 (let (($x531 (= $x403 true)))
 (let (($x532 (= $x531 true)))
 (let (($x365 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x368 (= $x365 true)))
 (let (($x369 (= $x368 true)))
 (let (($x330 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x331 (= $x330 true)))
 (let (($x367 (= $x331 true)))
 (let ((?x328 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x301 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x318 (concat ?x314 (concat ?x304 (concat ?x301 ?x328)))))
 (let (($x320 (= ?x318 input.dst.llvm-%y)))
 (let (($x326 (= $x320 true)))
 (let ((?x252 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x281 (concat ?x280 (concat ?x273 (concat ?x260 ?x252)))))
 (let (($x290 (= ?x281 input.dst.llvm-%x)))
 (let (($x291 (= $x290 true)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x223 (= (_ bv0 32) ?x222)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x213)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x201)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x230 (and $x199 $x210)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (and $x196 $x230)))
 (let (($x190 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x172 $x173)))
 (let (($x175 (not $x174)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x171 $x198)))
 (let (($x177 (and (not $x169) $x175)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x150 $x151)))
 (let (($x160 (not $x157)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x96 $x97)))
 (let (($x162 (and (not $x149) $x160)))
 (let (($x289 (and (and (and (and (and (and $x162 $x177) $x188) $x190) $x208) $x212) $x218)))
 (let (($x237 (and $x289 $x223)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x159 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x159)))
 (let (($x133 (or false (or false (and (and true (or $x107 $x110)) (or $x122 $x127))))))
 (let (($x144 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x133)))
 (let (($x240 (and $x144 $x237)))
 (let (($x241 (= $x240 true)))
 (let (($x242 (= $x241 true)))
 (let (($x292 (and $x242 $x291)))
 (let (($x329 (and $x292 $x326)))
 (let (($x398 (and $x329 $x367)))
 (let (($x370 (and $x398 $x369)))
 (let (($x86 (forall ((Lambda99 (_ BitVec 32)) )(let ((?x418 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x93 (= Lambda99 input.spec-%var-y-0)))
 (let ((?x156 (ite $x93 ?x418 (_ bv0 32))))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x492 (ite $x8 ?x156 (_ bv0 32))))
 (let ((?x47 (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda99)))
 (let (($x519 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x525 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x37 (ite $x525 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x37 (_ bv1 32))))
 (=> (and $x69 $x519) (= ?x47 ?x492)))))))))))))
 ))
 (let (($x41 (forall ((Lambda99 (_ BitVec 32)) )(let (($x93 (= Lambda99 input.spec-%var-y-0)))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x462 (ite (ite $x8 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x462 (_ bv1 32))))
 (let (($x525 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x37 (ite $x525 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x37 (_ bv1 32))))
 (let (($x519 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x519 (= $x69 $x472)))))))))))
 ))
 (let (($x38 (forall ((Lambda99 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x519 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x94 (=> $x519 $x48)))
 (let (($x525 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x37 (ite $x525 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x37 (_ bv0 32))))
 (=> (and $x5 $x519) $x48))))))))
 ))
 (let (($x27 (forall ((Lambda99 (_ BitVec 32)) )(let (($x93 (= Lambda99 input.spec-%var-y-0)))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x462 (ite (ite $x8 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x463 (= ?x462 (_ bv0 32))))
 (let (($x525 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x37 (ite $x525 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x37 (_ bv0 32))))
 (let (($x519 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x519 (= $x5 $x463)))))))))))
 ))
 (let (($x519 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x521 (= $x519 $x520)))
 (let (($x48 (= false false)))
 (let (($x513 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x517 (=> $x513 $x48)))
 (let (($x516 (= $x513 $x515)))
 (let (($x518 (and $x516 $x517)))
 (let (($x522 (and $x518 $x521)))
 (let (($x16 (and $x522 $x27)))
 (let (($x52 (and $x16 $x38)))
 (let (($x45 (and $x52 $x41)))
 (let (($x87 (and $x45 $x86)))
 (let (($x371 (and $x87 $x370)))
 (let ((?x418 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x7 (ite $x36 ?x418 (_ bv0 32))))
 (let ((?x35 (ite $x8 ?x7 (_ bv0 32))))
 (let (($x505 (= input.spec-%tmpvar-6.L1%13%d.2 ?x35)))
 (let (($x506 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x508 (=> $x506 $x505)))
 (let (($x503 (= $x506 $x507)))
 (let (($x494 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x509 (=> $x494 $x48)))
 (let (($x500 (= $x494 $x499)))
 (let (($x510 (and $x500 $x509)))
 (let (($x504 (and $x510 $x503)))
 (let (($x511 (and $x504 $x508)))
 (let (($x372 (and $x511 $x371)))
 (let (($x489 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x418 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x93 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x156 (ite $x93 ?x418 (_ bv0 32))))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x492 (ite $x8 ?x156 (_ bv0 32))))
 (let ((?x484 (input.spec-%var-m1-0.L1%13%d.1.1 Lambda101)))
 (let (($x456 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x464 (ite $x456 (_ bv1 32) (_ bv0 32))))
 (let (($x473 (bvuge ?x464 (_ bv1 32))))
 (=> $x473 (= ?x484 ?x492))))))))))))
 ))
 (let (($x481 (forall ((Lambda101 (_ BitVec 32)) )(let (($x93 (= Lambda101 input.spec-%var-y-0)))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x462 (ite (ite $x8 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x462 (_ bv1 32))))
 (let (($x456 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x464 (ite $x456 (_ bv1 32) (_ bv0 32))))
 (let (($x473 (bvuge ?x464 (_ bv1 32))))
 (= $x473 $x472)))))))))
 ))
 (let (($x469 (forall ((Lambda101 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x456 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x464 (ite $x456 (_ bv1 32) (_ bv0 32))))
 (let (($x465 (= ?x464 (_ bv0 32))))
 (=> $x465 $x48))))))
 ))
 (let (($x467 (forall ((Lambda101 (_ BitVec 32)) )(let (($x93 (= Lambda101 input.spec-%var-y-0)))
 (let (($x8 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x462 (ite (ite $x8 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x463 (= ?x462 (_ bv0 32))))
 (let (($x456 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x464 (ite $x456 (_ bv1 32) (_ bv0 32))))
 (let (($x465 (= ?x464 (_ bv0 32))))
 (= $x465 $x463)))))))))
 ))
 (let (($x478 (and $x467 $x469)))
 (let (($x482 (and $x478 $x481)))
 (let (($x487 (and $x482 $x489)))
 (let (($x373 (and $x487 $x372)))
 (let (($x452 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x425 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x413 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x423 (ite $x413 (_ bv1 32) (_ bv0 32))))
 (let (($x420 (bvuge ?x423 (_ bv1 32))))
 (=> (and $x420 $x425) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda104 Lambda105) (_ bv0 32))))))))
 ))
 (let (($x446 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x413 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x423 (ite $x413 (_ bv1 32) (_ bv0 32))))
 (let (($x420 (bvuge ?x423 (_ bv1 32))))
 (let (($x425 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x425 (= $x420 false)))))))
 ))
 (let (($x435 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x425 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x413 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x423 (ite $x413 (_ bv1 32) (_ bv0 32))))
 (let (($x439 (= ?x423 (_ bv0 32))))
 (=> (and $x439 $x425) $x48)))))))
 ))
 (let (($x429 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x413 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x423 (ite $x413 (_ bv1 32) (_ bv0 32))))
 (let (($x439 (= ?x423 (_ bv0 32))))
 (let (($x425 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x425 (= $x439 true)))))))
 ))
 (let (($x410 (forall ((Lambda104 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x404 (forall ((Lambda104 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x381 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x391 (ite $x381 (_ bv1 32) (_ bv0 32))))
 (let (($x392 (= ?x391 (_ bv0 32))))
 (=> $x392 $x48))))))
 ))
 (let (($x394 (forall ((Lambda104 (_ BitVec 32)) )(let (($x381 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x391 (ite $x381 (_ bv1 32) (_ bv0 32))))
 (let (($x392 (= ?x391 (_ bv0 32))))
 (= $x392 true)))))
 ))
 (let (($x405 (and $x394 $x404)))
 (let (($x411 (and $x405 $x410)))
 (let (($x430 (and $x411 $x429)))
 (let (($x436 (and $x430 $x435)))
 (let (($x442 (and $x436 $x446)))
 (let (($x453 (and $x442 $x452)))
 (let (($x374 (and $x453 $x373)))
 (let (($x378 (forall ((Lambda101 (_ BitVec 32)) )(let (($x341 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x346 (ite $x341 (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x346 (_ bv1 32))))
 (=> $x356 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda101) (_ bv0 32)))))))
 ))
 (let (($x358 (forall ((Lambda101 (_ BitVec 32)) )(let (($x341 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x346 (ite $x341 (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x346 (_ bv1 32))))
 (= $x356 false)))))
 ))
 (let (($x352 (forall ((Lambda101 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x341 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x346 (ite $x341 (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x346 (_ bv0 32))))
 (=> $x347 $x48))))))
 ))
 (let (($x349 (forall ((Lambda101 (_ BitVec 32)) )(let (($x341 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x346 (ite $x341 (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x346 (_ bv0 32))))
 (= $x347 true)))))
 ))
 (let (($x353 (and $x349 $x352)))
 (let (($x359 (and $x353 $x358)))
 (let (($x379 (and $x359 $x378)))
 (let (($x375 (and $x379 $x374)))
 (let (($x339 (= ?x418 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x383 (and $x339 $x375)))
 (let (($x336 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x418 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x93 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x156 (ite $x93 ?x418 (_ bv0 32))))
 (let ((?x324 (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda101)))
 (let (($x277 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x295 (ite $x277 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x295 (_ bv1 32))))
 (=> $x316 (= ?x324 ?x156))))))))))
 ))
 (let (($x322 (forall ((Lambda101 (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x295 (ite $x277 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x295 (_ bv1 32))))
 (= $x316 (bvuge (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x307 (forall ((Lambda101 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x277 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x295 (ite $x277 (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x295 (_ bv0 32))))
 (=> $x296 $x48))))))
 ))
 (let (($x299 (forall ((Lambda101 (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x295 (ite $x277 (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x295 (_ bv0 32))))
 (= $x296 (= (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x308 (and $x299 $x307)))
 (let (($x321 (and $x308 $x322)))
 (let (($x337 (and $x321 $x336)))
 (let (($x387 (and $x337 $x383)))
 (let (($x271 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x418 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x93 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x156 (ite $x93 ?x418 (_ bv0 32))))
 (let (($x100 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x158 (ite $x100 ?x156 (_ bv0 32))))
 (let ((?x267 (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x226 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x207 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x219 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x219 (_ bv1 32))))
 (=> (and $x249 $x226) (= ?x267 ?x158)))))))))))))
 ))
 (let (($x254 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x93 (= Lambda105 input.spec-%var-y-0)))
 (let (($x100 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x102 (ite (ite $x100 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x102 (_ bv1 32))))
 (let (($x207 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x219 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x219 (_ bv1 32))))
 (let (($x226 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x226 (= $x249 $x134)))))))))))
 ))
 (let (($x243 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x226 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x207 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x219 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x219 (_ bv0 32))))
 (=> (and $x220 $x226) $x48)))))))
 ))
 (let (($x229 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x93 (= Lambda105 input.spec-%var-y-0)))
 (let (($x100 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x102 (ite (ite $x100 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x102 (_ bv0 32))))
 (let (($x207 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x219 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x219 (_ bv0 32))))
 (let (($x226 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x226 (= $x220 $x103)))))))))))
 ))
 (let (($x204 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x46 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x46 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x80))))
 ))
 (let (($x193 (forall ((Lambda104 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x180 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x183 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x183 (_ bv0 32))))
 (=> $x185 $x48))))))
 ))
 (let (($x187 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x46 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x46 (_ bv0 32))))
 (let (($x180 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x183 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x183 (_ bv0 32))))
 (= $x185 $x82)))))))
 ))
 (let (($x194 (and $x187 $x193)))
 (let (($x205 (and $x194 $x204)))
 (let (($x233 (and $x205 $x229)))
 (let (($x244 (and $x233 $x243)))
 (let (($x255 (and $x244 $x254)))
 (let (($x272 (and $x255 $x271)))
 (let (($x388 (and $x272 $x387)))
 (let (($x166 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x418 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x93 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x156 (ite $x93 ?x418 (_ bv0 32))))
 (let (($x100 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x158 (ite $x100 ?x156 (_ bv0 32))))
 (let ((?x146 (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x114 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x72 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x104 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x104 (_ bv1 32))))
 (=> (and $x135 $x114) (= ?x146 ?x158)))))))))))))
 ))
 (let (($x141 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x93 (= Lambda105 input.spec-%var-y-0)))
 (let (($x100 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x102 (ite (ite $x100 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x102 (_ bv1 32))))
 (let (($x72 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x104 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x104 (_ bv1 32))))
 (let (($x114 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x114 (= $x135 $x134)))))))))))
 ))
 (let (($x125 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x114 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x72 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x104 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x104 (_ bv0 32))))
 (=> (and $x105 $x114) $x48)))))))
 ))
 (let (($x116 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x93 (= Lambda105 input.spec-%var-y-0)))
 (let (($x100 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x102 (ite (ite $x100 $x93 false) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x102 (_ bv0 32))))
 (let (($x72 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x104 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x104 (_ bv0 32))))
 (let (($x114 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x114 (= $x105 $x103)))))))))))
 ))
 (let (($x61 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x46 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x46 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x80))))
 ))
 (let (($x20 (forall ((Lambda104 (_ BitVec 32)) )(let (($x48 (= false false)))
 (let (($x14 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x21 (ite $x14 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x21 (_ bv0 32))))
 (=> $x84 $x48))))))
 ))
 (let (($x53 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x46 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x46 (_ bv0 32))))
 (let (($x14 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x21 (ite $x14 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x21 (_ bv0 32))))
 (= $x84 $x82)))))))
 ))
 (let (($x64 (and $x53 $x20)))
 (let (($x24 (and $x64 $x61)))
 (let (($x118 (and $x24 $x116)))
 (let (($x126 (and $x118 $x125)))
 (let (($x142 (and $x126 $x141)))
 (let (($x167 (and $x142 $x166)))
 (let (($x389 (and $x167 $x388)))
 (let (($x390 (and $x48 $x389)))
 (let (($x55 (= input.spec-%var-m2-0.L1%18%bbentry ?x35)))
 (let (($x396 (and $x55 $x390)))
 (let (($x399 (and $x48 $x396)))
 (let (($x533 (=> $x399 $x532)))
 (not $x533)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460578/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x319 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x22 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x8 (ite $x22 ?x319 (_ bv0 32))))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x43 (ite $x89 ?x8 (_ bv0 32))))
 (let ((?x18 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x66 (= ?x18 ?x43)))
 (let (($x78 (= $x66 true)))
 (let (($x75 (= $x78 true)))
 (let ((?x395 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x407 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x417 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x433 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x437 (concat ?x433 (concat ?x417 (concat ?x407 ?x395)))))
 (let (($x526 (= ?x437 input.dst.llvm-%x)))
 (let (($x49 (= $x526 true)))
 (let ((?x443 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x448 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x485 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x458 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x475 (concat ?x458 (concat ?x485 (concat ?x448 ?x443)))))
 (let (($x495 (= ?x475 input.dst.llvm-%y)))
 (let (($x496 (= $x495 true)))
 (let (($x459 (= input.dst.llvm-%y ?x475)))
 (let (($x438 (= input.dst.llvm-%x ?x437)))
 (let ((?x355 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x360 (= (_ bv0 32) ?x355)))
 (let ((?x350 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x354 (= (_ bv0 32) ?x350)))
 (let ((?x344 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x345 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x344)))
 (let ((?x342 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x362 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x342)))
 (let (($x332 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x340 (and $x332 $x362)))
 (let (($x327 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x343 (and $x327 $x340)))
 (let (($x323 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x283 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (and $x283 $x284)))
 (let (($x286 (not $x285)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x325 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x282 (and $x325 $x276)))
 (let (($x310 (and (not $x282) $x286)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (and $x248 $x256)))
 (let (($x258 (not $x269)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x153 $x154)))
 (let (($x278 (and (not $x246) $x258)))
 (let (($x380 (and (and (and (and (and (and $x278 $x310) $x312) $x323) $x343) $x345) $x354)))
 (let (($x384 (and $x380 $x360)))
 (let (($x214 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x234 (or false (or false (and (and true (or $x178 $x179)) (or $x206 $x214))))))
 (let (($x245 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x234)))
 (let (($x477 (and (and (and $x245 $x384) $x438) $x459)))
 (let (($x145 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x470 (and $x145 $x477)))
 (let (($x139 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x471 (and $x139 $x470)))
 (let (($x479 (= $x471 true)))
 (let (($x483 (= $x479 true)))
 (let (($x491 (and $x483 $x496)))
 (let (($x524 (and $x491 $x49)))
 (let (($x301 (ite $x89 $x22 false)))
 (let ((?x328 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x328 (_ bv1 32))))
 (let ((?x371 (ite $x89 (_ bv1 32) (_ bv0 32))))
 (let (($x387 (bvuge ?x371 (_ bv1 32))))
 (let (($x137 (and $x387 $x329)))
 (let (($x527 (and $x137 $x524)))
 (let (($x119 (forall ((Lambda99 (_ BitVec 32)) )(let ((?x319 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x84 (= Lambda99 input.spec-%var-y-0)))
 (let ((?x255 (ite $x84 ?x319 (_ bv0 32))))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x291 (ite $x89 ?x255 (_ bv0 32))))
 (let ((?x73 (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda99)))
 (let (($x383 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x399 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x95 (ite $x399 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x95 (_ bv1 32))))
 (=> (and $x76 $x383) (= ?x73 ?x291)))))))))))))
 ))
 (let (($x9 (forall ((Lambda99 (_ BitVec 32)) )(let (($x84 (= Lambda99 input.spec-%var-y-0)))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x259 (ite (ite $x89 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x259 (_ bv1 32))))
 (let (($x399 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x95 (ite $x399 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x95 (_ bv1 32))))
 (let (($x383 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x383 (= $x76 $x262)))))))))))
 ))
 (let (($x56 (forall ((Lambda99 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x383 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x364 (=> $x383 $x80)))
 (let (($x399 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x95 (ite $x399 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x95 (_ bv0 32))))
 (=> (and $x300 $x383) $x80))))))))
 ))
 (let (($x12 (forall ((Lambda99 (_ BitVec 32)) )(let (($x84 (= Lambda99 input.spec-%var-y-0)))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x259 (ite (ite $x89 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x259 (_ bv0 32))))
 (let (($x399 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x95 (ite $x399 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x95 (_ bv0 32))))
 (let (($x383 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x383 (= $x300 $x213)))))))))))
 ))
 (let (($x383 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x388 (= $x383 $x387)))
 (let (($x80 (= false false)))
 (let (($x370 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x374 (=> $x370 $x80)))
 (let (($x372 (= ?x371 (_ bv0 32))))
 (let (($x373 (= $x370 $x372)))
 (let (($x375 (and $x373 $x374)))
 (let (($x389 (and $x375 $x388)))
 (let (($x6 (and $x389 $x12)))
 (let (($x147 (and $x6 $x56)))
 (let (($x65 (and $x147 $x9)))
 (let (($x120 (and $x65 $x119)))
 (let (($x528 (and $x120 $x527)))
 (let (($x398 (= input.spec-%tmpvar-6.L1%13%d.2 ?x43)))
 (let (($x326 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x365 (=> $x326 $x398)))
 (let (($x330 (= $x326 $x329)))
 (let (($x298 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x318 (=> $x298 $x80)))
 (let (($x302 (= ?x328 (_ bv0 32))))
 (let (($x305 (= $x298 $x302)))
 (let (($x320 (and $x305 $x318)))
 (let (($x331 (and $x320 $x330)))
 (let (($x368 (and $x331 $x365)))
 (let (($x529 (and $x368 $x528)))
 (let (($x314 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x319 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x84 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x255 (ite $x84 ?x319 (_ bv0 32))))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x291 (ite $x89 ?x255 (_ bv0 32))))
 (let ((?x261 (input.spec-%var-m1-0.L1%13%d.1.1 Lambda101)))
 (let (($x199 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x218 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x218 (_ bv1 32))))
 (=> $x263 (= ?x261 ?x291))))))))))))
 ))
 (let (($x257 (forall ((Lambda101 (_ BitVec 32)) )(let (($x84 (= Lambda101 input.spec-%var-y-0)))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x259 (ite (ite $x89 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x259 (_ bv1 32))))
 (let (($x199 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x218 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x218 (_ bv1 32))))
 (= $x263 $x262)))))))))
 ))
 (let (($x241 (forall ((Lambda101 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x199 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x218 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x289 (= ?x218 (_ bv0 32))))
 (=> $x289 $x80))))))
 ))
 (let (($x223 (forall ((Lambda101 (_ BitVec 32)) )(let (($x84 (= Lambda101 input.spec-%var-y-0)))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x259 (ite (ite $x89 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x259 (_ bv0 32))))
 (let (($x199 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x218 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x289 (= ?x218 (_ bv0 32))))
 (= $x289 $x213)))))))))
 ))
 (let (($x242 (and $x223 $x241)))
 (let (($x260 (and $x242 $x257)))
 (let (($x303 (and $x260 $x314)))
 (let (($x530 (and $x303 $x529)))
 (let (($x190 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x131 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x159 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x117 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x117 (_ bv1 32))))
 (=> (and $x171 $x131) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda104 Lambda105) (_ bv0 32))))))))
 ))
 (let (($x176 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x117 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x117 (_ bv1 32))))
 (let (($x131 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x131 (= $x171 false)))))))
 ))
 (let (($x150 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x131 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x159 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x117 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x117 (_ bv0 32))))
 (=> (and $x122 $x131) $x80)))))))
 ))
 (let (($x133 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x117 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x117 (_ bv0 32))))
 (let (($x131 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x131 (= $x122 true)))))))
 ))
 (let (($x99 (forall ((Lambda104 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x42 (forall ((Lambda104 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x16 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x69 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x69 (_ bv0 32))))
 (=> $x77 $x80))))))
 ))
 (let (($x41 (forall ((Lambda104 (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x69 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x69 (_ bv0 32))))
 (= $x77 true)))))
 ))
 (let (($x39 (and $x41 $x42)))
 (let (($x143 (and $x39 $x99)))
 (let (($x144 (and $x143 $x133)))
 (let (($x151 (and $x144 $x150)))
 (let (($x172 (and $x151 $x176)))
 (let (($x232 (and $x172 $x190)))
 (let (($x419 (and $x232 $x530)))
 (let (($x51 (forall ((Lambda101 (_ BitVec 32)) )(let (($x499 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x507 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x507 (_ bv1 32))))
 (=> $x515 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda101) (_ bv0 32)))))))
 ))
 (let (($x517 (forall ((Lambda101 (_ BitVec 32)) )(let (($x499 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x507 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x507 (_ bv1 32))))
 (= $x515 false)))))
 ))
 (let (($x511 (forall ((Lambda101 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x499 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x507 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x503 (= ?x507 (_ bv0 32))))
 (=> $x503 $x80))))))
 ))
 (let (($x502 (forall ((Lambda101 (_ BitVec 32)) )(let (($x499 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x507 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x503 (= ?x507 (_ bv0 32))))
 (= $x503 true)))))
 ))
 (let (($x512 (and $x502 $x511)))
 (let (($x518 (and $x512 $x517)))
 (let (($x26 (and $x518 $x51)))
 (let (($x501 (and $x26 $x419)))
 (let (($x497 (= ?x319 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x486 (and $x497 $x501)))
 (let (($x487 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x319 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x84 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x255 (ite $x84 ?x319 (_ bv0 32))))
 (let ((?x481 (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda101)))
 (let (($x435 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x451 (ite $x435 (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x451 (_ bv1 32))))
 (=> $x469 (= ?x481 ?x255))))))))))
 ))
 (let (($x473 (forall ((Lambda101 (_ BitVec 32)) )(let (($x435 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x451 (ite $x435 (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x451 (_ bv1 32))))
 (= $x469 (bvuge (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x461 (forall ((Lambda101 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x435 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x451 (ite $x435 (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x451 (_ bv0 32))))
 (=> $x452 $x80))))))
 ))
 (let (($x456 (forall ((Lambda101 (_ BitVec 32)) )(let (($x435 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x451 (ite $x435 (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x451 (_ bv0 32))))
 (= $x452 (= (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x462 (and $x456 $x461)))
 (let (($x472 (and $x462 $x473)))
 (let (($x490 (and $x472 $x487)))
 (let (($x168 (and $x490 $x486)))
 (let (($x429 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x319 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x84 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x255 (ite $x84 ?x319 (_ bv0 32))))
 (let (($x67 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x267 (ite $x67 ?x255 (_ bv0 32))))
 (let ((?x426 (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x358 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x339 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x351 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x351 (_ bv1 32))))
 (=> (and $x404 $x358) (= ?x426 ?x267)))))))))))))
 ))
 (let (($x409 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x84 (= Lambda105 input.spec-%var-y-0)))
 (let (($x67 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x124 (ite (ite $x67 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x124 (_ bv1 32))))
 (let (($x339 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x351 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x351 (_ bv1 32))))
 (let (($x358 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x358 (= $x404 $x114)))))))))))
 ))
 (let (($x391 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x358 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x339 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x351 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x352 (= ?x351 (_ bv0 32))))
 (=> (and $x352 $x358) $x80)))))))
 ))
 (let (($x361 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x84 (= Lambda105 input.spec-%var-y-0)))
 (let (($x67 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x124 (ite (ite $x67 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x124 (_ bv0 32))))
 (let (($x339 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x351 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x352 (= ?x351 (_ bv0 32))))
 (let (($x358 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x358 (= $x352 $x165)))))))))))
 ))
 (let (($x336 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x116 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x116 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x20))))
 ))
 (let (($x317 (forall ((Lambda104 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x295 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x299 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x299 (_ bv0 32))))
 (=> $x311 $x80))))))
 ))
 (let (($x308 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x116 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x116 (_ bv0 32))))
 (let (($x295 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x299 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x299 (_ bv0 32))))
 (= $x311 $x85)))))))
 ))
 (let (($x322 (and $x308 $x317)))
 (let (($x337 (and $x322 $x336)))
 (let (($x376 (and $x337 $x361)))
 (let (($x392 (and $x376 $x391)))
 (let (($x410 (and $x392 $x409)))
 (let (($x430 (and $x410 $x429)))
 (let (($x30 (and $x430 $x168)))
 (let (($x271 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x319 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x84 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x255 (ite $x84 ?x319 (_ bv0 32))))
 (let (($x67 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x267 (ite $x67 ?x255 (_ bv0 32))))
 (let ((?x101 (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x125 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x93 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x191 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x191 (_ bv1 32))))
 (=> (and $x140 $x125) (= ?x101 ?x267)))))))))))))
 ))
 (let (($x224 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x84 (= Lambda105 input.spec-%var-y-0)))
 (let (($x67 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x124 (ite (ite $x67 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x124 (_ bv1 32))))
 (let (($x93 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x191 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x191 (_ bv1 32))))
 (let (($x125 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x125 (= $x140 $x114)))))))))))
 ))
 (let (($x53 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x125 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x93 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x191 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x191 (_ bv0 32))))
 (=> (and $x185 $x125) $x80)))))))
 ))
 (let (($x102 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x84 (= Lambda105 input.spec-%var-y-0)))
 (let (($x67 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x124 (ite (ite $x67 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x124 (_ bv0 32))))
 (let (($x93 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x191 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x191 (_ bv0 32))))
 (let (($x125 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x125 (= $x185 $x165)))))))))))
 ))
 (let (($x163 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x116 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x116 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x20))))
 ))
 (let (($x219 (forall ((Lambda104 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x55 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x164 (ite $x55 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x164 (_ bv0 32))))
 (=> $x166 $x80))))))
 ))
 (let (($x207 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x116 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x116 (_ bv0 32))))
 (let (($x55 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x164 (ite $x55 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x164 (_ bv0 32))))
 (= $x166 $x85)))))))
 ))
 (let (($x233 (and $x207 $x219)))
 (let (($x250 (and $x233 $x163)))
 (let (($x244 (and $x250 $x102)))
 (let (($x28 (and $x244 $x53)))
 (let (($x193 (and $x28 $x224)))
 (let (($x272 (and $x193 $x271)))
 (let (($x63 (and $x272 $x30)))
 (let (($x60 (and $x80 $x63)))
 (let (($x36 (= input.spec-%var-m2-0.L1%18%bbentry ?x43)))
 (let (($x31 (and $x36 $x60)))
 (let (($x68 (and $x80 $x31)))
 (let (($x83 (=> $x68 $x75)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x319 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x22 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x8 (ite $x22 ?x319 (_ bv0 32))))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x43 (ite $x89 ?x8 (_ bv0 32))))
 (let ((?x18 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x66 (= ?x18 ?x43)))
 (let (($x78 (= $x66 true)))
 (let (($x75 (= $x78 true)))
 (let ((?x395 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x407 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x417 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x433 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x437 (concat ?x433 (concat ?x417 (concat ?x407 ?x395)))))
 (let (($x526 (= ?x437 input.dst.llvm-%x)))
 (let (($x49 (= $x526 true)))
 (let ((?x443 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x448 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x485 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x458 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x475 (concat ?x458 (concat ?x485 (concat ?x448 ?x443)))))
 (let (($x495 (= ?x475 input.dst.llvm-%y)))
 (let (($x496 (= $x495 true)))
 (let (($x459 (= input.dst.llvm-%y ?x475)))
 (let (($x438 (= input.dst.llvm-%x ?x437)))
 (let ((?x355 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x360 (= (_ bv0 32) ?x355)))
 (let ((?x350 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x354 (= (_ bv0 32) ?x350)))
 (let ((?x344 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x345 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x344)))
 (let ((?x342 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x362 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x342)))
 (let (($x332 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x340 (and $x332 $x362)))
 (let (($x327 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x343 (and $x327 $x340)))
 (let (($x323 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x283 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (and $x283 $x284)))
 (let (($x286 (not $x285)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x325 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x282 (and $x325 $x276)))
 (let (($x310 (and (not $x282) $x286)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (and $x248 $x256)))
 (let (($x258 (not $x269)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x153 $x154)))
 (let (($x278 (and (not $x246) $x258)))
 (let (($x380 (and (and (and (and (and (and $x278 $x310) $x312) $x323) $x343) $x345) $x354)))
 (let (($x384 (and $x380 $x360)))
 (let (($x214 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x234 (or false (or false (and (and true (or $x178 $x179)) (or $x206 $x214))))))
 (let (($x245 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x234)))
 (let (($x477 (and (and (and $x245 $x384) $x438) $x459)))
 (let (($x145 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x470 (and $x145 $x477)))
 (let (($x139 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x471 (and $x139 $x470)))
 (let (($x479 (= $x471 true)))
 (let (($x483 (= $x479 true)))
 (let (($x491 (and $x483 $x496)))
 (let (($x524 (and $x491 $x49)))
 (let (($x301 (ite $x89 $x22 false)))
 (let ((?x328 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x328 (_ bv1 32))))
 (let ((?x371 (ite $x89 (_ bv1 32) (_ bv0 32))))
 (let (($x387 (bvuge ?x371 (_ bv1 32))))
 (let (($x137 (and $x387 $x329)))
 (let (($x527 (and $x137 $x524)))
 (let (($x119 (forall ((Lambda99 (_ BitVec 32)) )(let ((?x319 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x84 (= Lambda99 input.spec-%var-y-0)))
 (let ((?x255 (ite $x84 ?x319 (_ bv0 32))))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x291 (ite $x89 ?x255 (_ bv0 32))))
 (let ((?x73 (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda99)))
 (let (($x383 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x399 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x95 (ite $x399 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x95 (_ bv1 32))))
 (=> (and $x76 $x383) (= ?x73 ?x291)))))))))))))
 ))
 (let (($x9 (forall ((Lambda99 (_ BitVec 32)) )(let (($x84 (= Lambda99 input.spec-%var-y-0)))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x259 (ite (ite $x89 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x259 (_ bv1 32))))
 (let (($x399 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x95 (ite $x399 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x95 (_ bv1 32))))
 (let (($x383 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x383 (= $x76 $x262)))))))))))
 ))
 (let (($x56 (forall ((Lambda99 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x383 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x364 (=> $x383 $x80)))
 (let (($x399 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x95 (ite $x399 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x95 (_ bv0 32))))
 (=> (and $x300 $x383) $x80))))))))
 ))
 (let (($x12 (forall ((Lambda99 (_ BitVec 32)) )(let (($x84 (= Lambda99 input.spec-%var-y-0)))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x259 (ite (ite $x89 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x259 (_ bv0 32))))
 (let (($x399 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x95 (ite $x399 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x95 (_ bv0 32))))
 (let (($x383 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x383 (= $x300 $x213)))))))))))
 ))
 (let (($x383 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x388 (= $x383 $x387)))
 (let (($x80 (= false false)))
 (let (($x370 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x374 (=> $x370 $x80)))
 (let (($x372 (= ?x371 (_ bv0 32))))
 (let (($x373 (= $x370 $x372)))
 (let (($x375 (and $x373 $x374)))
 (let (($x389 (and $x375 $x388)))
 (let (($x6 (and $x389 $x12)))
 (let (($x147 (and $x6 $x56)))
 (let (($x65 (and $x147 $x9)))
 (let (($x120 (and $x65 $x119)))
 (let (($x528 (and $x120 $x527)))
 (let (($x398 (= input.spec-%tmpvar-6.L1%13%d.2 ?x43)))
 (let (($x326 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x365 (=> $x326 $x398)))
 (let (($x330 (= $x326 $x329)))
 (let (($x298 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x318 (=> $x298 $x80)))
 (let (($x302 (= ?x328 (_ bv0 32))))
 (let (($x305 (= $x298 $x302)))
 (let (($x320 (and $x305 $x318)))
 (let (($x331 (and $x320 $x330)))
 (let (($x368 (and $x331 $x365)))
 (let (($x529 (and $x368 $x528)))
 (let (($x314 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x319 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x84 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x255 (ite $x84 ?x319 (_ bv0 32))))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x291 (ite $x89 ?x255 (_ bv0 32))))
 (let ((?x261 (input.spec-%var-m1-0.L1%13%d.1.1 Lambda101)))
 (let (($x199 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x218 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x218 (_ bv1 32))))
 (=> $x263 (= ?x261 ?x291))))))))))))
 ))
 (let (($x257 (forall ((Lambda101 (_ BitVec 32)) )(let (($x84 (= Lambda101 input.spec-%var-y-0)))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x259 (ite (ite $x89 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x259 (_ bv1 32))))
 (let (($x199 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x218 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x218 (_ bv1 32))))
 (= $x263 $x262)))))))))
 ))
 (let (($x241 (forall ((Lambda101 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x199 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x218 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x289 (= ?x218 (_ bv0 32))))
 (=> $x289 $x80))))))
 ))
 (let (($x223 (forall ((Lambda101 (_ BitVec 32)) )(let (($x84 (= Lambda101 input.spec-%var-y-0)))
 (let (($x89 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x259 (ite (ite $x89 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x259 (_ bv0 32))))
 (let (($x199 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x218 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x289 (= ?x218 (_ bv0 32))))
 (= $x289 $x213)))))))))
 ))
 (let (($x242 (and $x223 $x241)))
 (let (($x260 (and $x242 $x257)))
 (let (($x303 (and $x260 $x314)))
 (let (($x530 (and $x303 $x529)))
 (let (($x190 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x131 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x159 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x117 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x117 (_ bv1 32))))
 (=> (and $x171 $x131) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda104 Lambda105) (_ bv0 32))))))))
 ))
 (let (($x176 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x117 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x117 (_ bv1 32))))
 (let (($x131 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x131 (= $x171 false)))))))
 ))
 (let (($x150 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x131 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x159 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x117 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x117 (_ bv0 32))))
 (=> (and $x122 $x131) $x80)))))))
 ))
 (let (($x133 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x117 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x117 (_ bv0 32))))
 (let (($x131 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x131 (= $x122 true)))))))
 ))
 (let (($x99 (forall ((Lambda104 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x42 (forall ((Lambda104 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x16 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x69 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x69 (_ bv0 32))))
 (=> $x77 $x80))))))
 ))
 (let (($x41 (forall ((Lambda104 (_ BitVec 32)) )(let (($x16 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x69 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x69 (_ bv0 32))))
 (= $x77 true)))))
 ))
 (let (($x39 (and $x41 $x42)))
 (let (($x143 (and $x39 $x99)))
 (let (($x144 (and $x143 $x133)))
 (let (($x151 (and $x144 $x150)))
 (let (($x172 (and $x151 $x176)))
 (let (($x232 (and $x172 $x190)))
 (let (($x419 (and $x232 $x530)))
 (let (($x51 (forall ((Lambda101 (_ BitVec 32)) )(let (($x499 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x507 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x507 (_ bv1 32))))
 (=> $x515 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda101) (_ bv0 32)))))))
 ))
 (let (($x517 (forall ((Lambda101 (_ BitVec 32)) )(let (($x499 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x507 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x507 (_ bv1 32))))
 (= $x515 false)))))
 ))
 (let (($x511 (forall ((Lambda101 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x499 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x507 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x503 (= ?x507 (_ bv0 32))))
 (=> $x503 $x80))))))
 ))
 (let (($x502 (forall ((Lambda101 (_ BitVec 32)) )(let (($x499 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x507 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x503 (= ?x507 (_ bv0 32))))
 (= $x503 true)))))
 ))
 (let (($x512 (and $x502 $x511)))
 (let (($x518 (and $x512 $x517)))
 (let (($x26 (and $x518 $x51)))
 (let (($x501 (and $x26 $x419)))
 (let (($x497 (= ?x319 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x486 (and $x497 $x501)))
 (let (($x487 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x319 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x84 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x255 (ite $x84 ?x319 (_ bv0 32))))
 (let ((?x481 (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda101)))
 (let (($x435 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x451 (ite $x435 (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x451 (_ bv1 32))))
 (=> $x469 (= ?x481 ?x255))))))))))
 ))
 (let (($x473 (forall ((Lambda101 (_ BitVec 32)) )(let (($x435 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x451 (ite $x435 (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x451 (_ bv1 32))))
 (= $x469 (bvuge (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x461 (forall ((Lambda101 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x435 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x451 (ite $x435 (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x451 (_ bv0 32))))
 (=> $x452 $x80))))))
 ))
 (let (($x456 (forall ((Lambda101 (_ BitVec 32)) )(let (($x435 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x451 (ite $x435 (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x451 (_ bv0 32))))
 (= $x452 (= (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x462 (and $x456 $x461)))
 (let (($x472 (and $x462 $x473)))
 (let (($x490 (and $x472 $x487)))
 (let (($x168 (and $x490 $x486)))
 (let (($x429 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x319 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x84 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x255 (ite $x84 ?x319 (_ bv0 32))))
 (let (($x67 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x267 (ite $x67 ?x255 (_ bv0 32))))
 (let ((?x426 (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x358 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x339 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x351 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x351 (_ bv1 32))))
 (=> (and $x404 $x358) (= ?x426 ?x267)))))))))))))
 ))
 (let (($x409 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x84 (= Lambda105 input.spec-%var-y-0)))
 (let (($x67 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x124 (ite (ite $x67 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x124 (_ bv1 32))))
 (let (($x339 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x351 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x351 (_ bv1 32))))
 (let (($x358 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x358 (= $x404 $x114)))))))))))
 ))
 (let (($x391 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x358 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x339 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x351 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x352 (= ?x351 (_ bv0 32))))
 (=> (and $x352 $x358) $x80)))))))
 ))
 (let (($x361 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x84 (= Lambda105 input.spec-%var-y-0)))
 (let (($x67 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x124 (ite (ite $x67 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x124 (_ bv0 32))))
 (let (($x339 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x351 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x352 (= ?x351 (_ bv0 32))))
 (let (($x358 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x358 (= $x352 $x165)))))))))))
 ))
 (let (($x336 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x116 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x116 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x20))))
 ))
 (let (($x317 (forall ((Lambda104 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x295 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x299 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x299 (_ bv0 32))))
 (=> $x311 $x80))))))
 ))
 (let (($x308 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x116 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x116 (_ bv0 32))))
 (let (($x295 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x299 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x299 (_ bv0 32))))
 (= $x311 $x85)))))))
 ))
 (let (($x322 (and $x308 $x317)))
 (let (($x337 (and $x322 $x336)))
 (let (($x376 (and $x337 $x361)))
 (let (($x392 (and $x376 $x391)))
 (let (($x410 (and $x392 $x409)))
 (let (($x430 (and $x410 $x429)))
 (let (($x30 (and $x430 $x168)))
 (let (($x271 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x319 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x84 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x255 (ite $x84 ?x319 (_ bv0 32))))
 (let (($x67 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x267 (ite $x67 ?x255 (_ bv0 32))))
 (let ((?x101 (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x125 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x93 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x191 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x191 (_ bv1 32))))
 (=> (and $x140 $x125) (= ?x101 ?x267)))))))))))))
 ))
 (let (($x224 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x84 (= Lambda105 input.spec-%var-y-0)))
 (let (($x67 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x124 (ite (ite $x67 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x124 (_ bv1 32))))
 (let (($x93 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x191 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x191 (_ bv1 32))))
 (let (($x125 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x125 (= $x140 $x114)))))))))))
 ))
 (let (($x53 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x125 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x93 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x191 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x191 (_ bv0 32))))
 (=> (and $x185 $x125) $x80)))))))
 ))
 (let (($x102 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x84 (= Lambda105 input.spec-%var-y-0)))
 (let (($x67 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x124 (ite (ite $x67 $x84 false) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x124 (_ bv0 32))))
 (let (($x93 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x191 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x191 (_ bv0 32))))
 (let (($x125 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x125 (= $x185 $x165)))))))))))
 ))
 (let (($x163 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x116 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x116 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x20))))
 ))
 (let (($x219 (forall ((Lambda104 (_ BitVec 32)) )(let (($x80 (= false false)))
 (let (($x55 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x164 (ite $x55 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x164 (_ bv0 32))))
 (=> $x166 $x80))))))
 ))
 (let (($x207 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x116 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x116 (_ bv0 32))))
 (let (($x55 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x164 (ite $x55 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (= ?x164 (_ bv0 32))))
 (= $x166 $x85)))))))
 ))
 (let (($x233 (and $x207 $x219)))
 (let (($x250 (and $x233 $x163)))
 (let (($x244 (and $x250 $x102)))
 (let (($x28 (and $x244 $x53)))
 (let (($x193 (and $x28 $x224)))
 (let (($x272 (and $x193 $x271)))
 (let (($x63 (and $x272 $x30)))
 (let (($x60 (and $x80 $x63)))
 (let (($x36 (= input.spec-%var-m2-0.L1%18%bbentry ?x43)))
 (let (($x31 (and $x36 $x60)))
 (let (($x68 (and $x80 $x31)))
 (let (($x83 (=> $x68 $x75)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 457 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460578/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x70 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x50 (= input.spec-%var-y-0 ?x70)))
 (let (($x62 (= $x50 true)))
 (let (($x90 (= $x62 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x97 (concat ?x111 (concat ?x86 ?x45)))))
 (let (($x400 (= ?x157 input.dst.llvm-%x)))
 (let (($x17 (= $x400 true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x230 (concat ?x210 (concat ?x274 (concat ?x228 ?x173)))))
 (let (($x281 (= ?x230 input.dst.llvm-%y)))
 (let (($x287 (= $x281 true)))
 (let (($x208 (= input.dst.llvm-%y ?x230)))
 (let (($x160 (= input.dst.llvm-%x ?x157)))
 (let ((?x514 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x519 (= (_ bv0 32) ?x514)))
 (let ((?x505 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x513 (= (_ bv0 32) ?x505)))
 (let ((?x510 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x506 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x510)))
 (let ((?x500 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x521 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x500)))
 (let (($x492 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x498 (and $x492 $x521)))
 (let (($x484 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x509 (and $x484 $x498)))
 (let (($x480 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x466 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x441 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x421 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x446 (and $x421 $x441)))
 (let (($x442 (not $x446)))
 (let (($x434 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x482 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x420 (and $x482 $x434)))
 (let (($x464 (and (not $x420) $x442)))
 (let (($x411 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x397 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x425 (and $x397 $x411)))
 (let (($x413 (not $x425)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x394 (and $x183 $x204)))
 (let (($x436 (and (not $x394) $x413)))
 (let (($x27 (and (and (and (and (and (and $x436 $x464) $x466) $x480) $x509) $x506) $x513)))
 (let (($x40 (and $x27 $x519)))
 (let (($x346 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x277 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x338 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x277)))
 (let (($x294 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x277)))
 (let (($x377 (or false (or false (and (and true (or $x293 $x294)) (or $x338 $x346))))))
 (let (($x393 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x377)))
 (let (($x237 (and (and (and $x393 $x40) $x160) $x208)))
 (let (($x220 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x247 (and $x220 $x237)))
 (let (($x32 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x279 (and $x32 $x247)))
 (let (($x280 (= $x279 true)))
 (let (($x252 (= $x280 true)))
 (let (($x290 (and $x252 $x287)))
 (let (($x396 (and $x290 $x17)))
 (let (($x22 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x448 (ite $x105 $x22 false)))
 (let ((?x443 (ite $x448 (_ bv1 32) (_ bv0 32))))
 (let (($x449 (= ?x443 (_ bv0 32))))
 (let ((?x524 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x501 (bvuge ?x524 (_ bv1 32))))
 (let (($x203 (and $x501 $x449)))
 (let (($x401 (and $x203 $x396)))
 (let (($x48 (forall ((Lambda99 (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x255 (= Lambda99 input.spec-%var-y-0)))
 (let ((?x426 (ite $x255 ?x25 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x438 (ite $x105 ?x426 (_ bv0 32))))
 (let ((?x205 (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda99)))
 (let (($x419 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x60 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x152 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x152 (_ bv1 32))))
 (=> (and $x115 $x419) (= ?x205 ?x438)))))))))))))
 ))
 (let (($x64 (forall ((Lambda99 (_ BitVec 32)) )(let (($x255 (= Lambda99 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x343 (ite (ite $x105 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x431 (bvuge ?x343 (_ bv1 32))))
 (let (($x60 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x152 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x152 (_ bv1 32))))
 (let (($x419 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x419 (= $x115 $x431)))))))))))
 ))
 (let (($x134 (forall ((Lambda99 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x419 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x523 (=> $x419 $x71)))
 (let (($x60 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x152 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x440 (= ?x152 (_ bv0 32))))
 (=> (and $x440 $x419) $x71))))))))
 ))
 (let (($x418 (forall ((Lambda99 (_ BitVec 32)) )(let (($x255 (= Lambda99 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x343 (ite (ite $x105 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x343 (_ bv0 32))))
 (let (($x60 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x152 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x440 (= ?x152 (_ bv0 32))))
 (let (($x419 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x419 (= $x440 $x414)))))))))))
 ))
 (let (($x419 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x486 (= $x419 $x501)))
 (let (($x71 (= false false)))
 (let (($x49 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x529 (=> $x49 $x71)))
 (let (($x527 (= ?x524 (_ bv0 32))))
 (let (($x528 (= $x49 $x527)))
 (let (($x530 (and $x528 $x529)))
 (let (($x168 (and $x530 $x486)))
 (let (($x24 (and $x168 $x418)))
 (let (($x146 (and $x24 $x134)))
 (let (($x253 (and $x146 $x64)))
 (let (($x156 (and $x253 $x48)))
 (let (($x402 (and $x156 $x401)))
 (let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x43 (ite $x22 ?x25 (_ bv0 32))))
 (let ((?x36 (ite $x105 ?x43 (_ bv0 32))))
 (let (($x495 (= input.spec-%tmpvar-6.L1%13%d.2 ?x36)))
 (let (($x477 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x496 (=> $x477 $x495)))
 (let (($x470 (bvuge ?x443 (_ bv1 32))))
 (let (($x471 (= $x477 $x470)))
 (let (($x447 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x475 (=> $x447 $x71)))
 (let (($x454 (= $x447 $x449)))
 (let (($x459 (and $x454 $x475)))
 (let (($x479 (and $x459 $x471)))
 (let (($x491 (and $x479 $x496)))
 (let (($x403 (and $x491 $x402)))
 (let (($x458 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x255 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x426 (ite $x255 ?x25 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x438 (ite $x105 ?x426 (_ bv0 32))))
 (let ((?x407 (input.spec-%var-m1-0.L1%13%d.1.1 Lambda101)))
 (let (($x313 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x344 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x433 (bvuge ?x344 (_ bv1 32))))
 (=> $x433 (= ?x407 ?x438))))))))))))
 ))
 (let (($x416 (forall ((Lambda101 (_ BitVec 32)) )(let (($x255 (= Lambda101 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x343 (ite (ite $x105 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x431 (bvuge ?x343 (_ bv1 32))))
 (let (($x313 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x344 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x433 (bvuge ?x344 (_ bv1 32))))
 (= $x433 $x431)))))))))
 ))
 (let (($x355 (forall ((Lambda101 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x313 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x344 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x344 (_ bv0 32))))
 (=> $x345 $x71))))))
 ))
 (let (($x350 (forall ((Lambda101 (_ BitVec 32)) )(let (($x255 (= Lambda101 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x343 (ite (ite $x105 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x343 (_ bv0 32))))
 (let (($x313 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x344 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x344 (_ bv0 32))))
 (= $x345 $x414)))))))))
 ))
 (let (($x360 (and $x350 $x355)))
 (let (($x417 (and $x360 $x416)))
 (let (($x474 (and $x417 $x458)))
 (let (($x531 (and $x474 $x403)))
 (let (($x309 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x206 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x155 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x268 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x268 (_ bv1 32))))
 (=> (and $x256 $x206) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda104 Lambda105) (_ bv0 32))))))))
 ))
 (let (($x278 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x268 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x268 (_ bv1 32))))
 (let (($x206 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x206 (= $x256 false)))))))
 ))
 (let (($x153 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x206 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x155 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x268 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x179 (= ?x268 (_ bv0 32))))
 (=> (and $x179 $x206) $x71)))))))
 ))
 (let (($x214 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x268 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x179 (= ?x268 (_ bv0 32))))
 (let (($x206 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x206 (= $x179 true)))))))
 ))
 (let (($x139 (forall ((Lambda104 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x59 (forall ((Lambda104 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x364 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x29 (ite $x364 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x29 (_ bv0 32))))
 (=> $x81 $x71))))))
 ))
 (let (($x65 (forall ((Lambda104 (_ BitVec 32)) )(let (($x364 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x29 (ite $x364 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x29 (_ bv0 32))))
 (= $x81 true)))))
 ))
 (let (($x91 (and $x65 $x59)))
 (let (($x128 (and $x91 $x139)))
 (let (($x215 (and $x128 $x214)))
 (let (($x154 (and $x215 $x153)))
 (let (($x325 (and $x154 $x278)))
 (let (($x312 (and $x325 $x309)))
 (let (($x532 (and $x312 $x531)))
 (let (($x275 (forall ((Lambda101 (_ BitVec 32)) )(let (($x305 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x330 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x330 (_ bv1 32))))
 (=> $x373 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda101) (_ bv0 32)))))))
 ))
 (let (($x375 (forall ((Lambda101 (_ BitVec 32)) )(let (($x305 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x330 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x330 (_ bv1 32))))
 (= $x373 false)))))
 ))
 (let (($x369 (forall ((Lambda101 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x305 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x330 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x331 (= ?x330 (_ bv0 32))))
 (=> $x331 $x71))))))
 ))
 (let (($x398 (forall ((Lambda101 (_ BitVec 32)) )(let (($x305 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x330 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x331 (= ?x330 (_ bv0 32))))
 (= $x331 true)))))
 ))
 (let (($x370 (and $x398 $x369)))
 (let (($x383 (and $x370 $x375)))
 (let (($x12 (and $x383 $x275)))
 (let (($x533 (and $x12 $x532)))
 (let (($x328 (= ?x25 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x534 (and $x328 $x533)))
 (let (($x304 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x255 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x426 (ite $x255 ?x25 (_ bv0 32))))
 (let ((?x260 (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda101)))
 (let (($x151 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x190 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x190 (_ bv1 32))))
 (=> $x242 (= ?x260 ?x426))))))))))
 ))
 (let (($x262 (forall ((Lambda101 (_ BitVec 32)) )(let (($x151 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x190 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x190 (_ bv1 32))))
 (= $x242 (bvuge (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x259 (forall ((Lambda101 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x151 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x190 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x190 (_ bv0 32))))
 (=> $x232 $x71))))))
 ))
 (let (($x218 (forall ((Lambda101 (_ BitVec 32)) )(let (($x151 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x190 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x190 (_ bv0 32))))
 (= $x232 (= (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x213 (and $x218 $x259)))
 (let (($x273 (and $x213 $x262)))
 (let (($x298 (and $x273 $x304)))
 (let (($x92 (and $x298 $x534)))
 (let (($x144 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x255 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x426 (ite $x255 ?x25 (_ bv0 32))))
 (let (($x267 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x439 (ite $x267 ?x426 (_ bv0 32))))
 (let ((?x130 (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x518 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x499 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x511 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x511 (_ bv1 32))))
 (=> (and $x39 $x518) (= ?x130 ?x439)))))))))))))
 ))
 (let (($x99 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x255 (= Lambda105 input.spec-%var-y-0)))
 (let (($x267 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x266 (ite (ite $x267 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x266 (_ bv1 32))))
 (let (($x499 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x511 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x511 (_ bv1 32))))
 (let (($x518 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x518 (= $x39 $x352)))))))))))
 ))
 (let (($x77 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x518 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x499 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x511 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x511 (_ bv0 32))))
 (=> (and $x512 $x518) $x71)))))))
 ))
 (let (($x37 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x255 (= Lambda105 input.spec-%var-y-0)))
 (let (($x267 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x266 (ite (ite $x267 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x270 (= ?x266 (_ bv0 32))))
 (let (($x499 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x511 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x511 (_ bv0 32))))
 (let (($x518 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x518 (= $x512 $x270)))))))))))
 ))
 (let (($x490 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x72 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x72 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x84))))
 ))
 (let (($x473 (forall ((Lambda104 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x452 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x465 (ite $x452 (_ bv1 32) (_ bv0 32))))
 (let (($x461 (= ?x465 (_ bv0 32))))
 (=> $x461 $x71))))))
 ))
 (let (($x469 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x72 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x72 (_ bv0 32))))
 (let (($x452 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x465 (ite $x452 (_ bv1 32) (_ bv0 32))))
 (let (($x461 (= ?x465 (_ bv0 32))))
 (= $x461 $x20)))))))
 ))
 (let (($x472 (and $x469 $x473)))
 (let (($x494 (and $x472 $x490)))
 (let (($x5 (and $x494 $x37)))
 (let (($x33 (and $x5 $x77)))
 (let (($x143 (and $x33 $x99)))
 (let (($x149 (and $x143 $x144)))
 (let (($x74 (and $x149 $x92)))
 (let (($x430 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x255 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x426 (ite $x255 ?x25 (_ bv0 32))))
 (let (($x267 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x439 (ite $x267 ?x426 (_ bv0 32))))
 (let ((?x391 (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x307 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x229 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x271 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x271 (_ bv1 32))))
 (=> (and $x353 $x307) (= ?x391 ?x439)))))))))))))
 ))
 (let (($x376 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x255 (= Lambda105 input.spec-%var-y-0)))
 (let (($x267 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x266 (ite (ite $x267 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x266 (_ bv1 32))))
 (let (($x229 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x271 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x271 (_ bv1 32))))
 (let (($x307 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x307 (= $x353 $x352)))))))))))
 ))
 (let (($x337 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x307 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x229 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x271 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (=> (and $x272 $x307) $x71)))))))
 ))
 (let (($x315 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x255 (= Lambda105 input.spec-%var-y-0)))
 (let (($x267 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x266 (ite (ite $x267 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x270 (= ?x266 (_ bv0 32))))
 (let (($x229 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x271 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (let (($x307 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x307 (= $x272 $x270)))))))))))
 ))
 (let (($x165 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x72 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x72 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x84))))
 ))
 (let (($x125 (forall ((Lambda104 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x166 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x104 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x104 (_ bv0 32))))
 (=> $x163 $x71))))))
 ))
 (let (($x167 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x72 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x72 (_ bv0 32))))
 (let (($x166 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x104 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x104 (_ bv0 32))))
 (= $x163 $x20)))))))
 ))
 (let (($x93 (and $x167 $x125)))
 (let (($x136 (and $x93 $x165)))
 (let (($x317 (and $x136 $x315)))
 (let (($x356 (and $x317 $x337)))
 (let (($x379 (and $x356 $x376)))
 (let (($x435 (and $x379 $x430)))
 (let (($x23 (and $x435 $x74)))
 (let (($x10 (and $x71 $x23)))
 (let (($x35 (= input.spec-%var-m2-0.L1%18%bbentry ?x36)))
 (let (($x44 (and $x35 $x10)))
 (let (($x15 (and $x71 $x44)))
 (let (($x88 (=> $x15 $x90)))
 (not $x88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x70 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x50 (= input.spec-%var-y-0 ?x70)))
 (let (($x62 (= $x50 true)))
 (let (($x90 (= $x62 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x97 (concat ?x111 (concat ?x86 ?x45)))))
 (let (($x400 (= ?x157 input.dst.llvm-%x)))
 (let (($x17 (= $x400 true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x230 (concat ?x210 (concat ?x274 (concat ?x228 ?x173)))))
 (let (($x281 (= ?x230 input.dst.llvm-%y)))
 (let (($x287 (= $x281 true)))
 (let (($x208 (= input.dst.llvm-%y ?x230)))
 (let (($x160 (= input.dst.llvm-%x ?x157)))
 (let ((?x514 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x519 (= (_ bv0 32) ?x514)))
 (let ((?x505 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x513 (= (_ bv0 32) ?x505)))
 (let ((?x510 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x506 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x510)))
 (let ((?x500 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x521 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x500)))
 (let (($x492 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x498 (and $x492 $x521)))
 (let (($x484 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x509 (and $x484 $x498)))
 (let (($x480 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x466 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x441 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x421 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x446 (and $x421 $x441)))
 (let (($x442 (not $x446)))
 (let (($x434 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x482 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x420 (and $x482 $x434)))
 (let (($x464 (and (not $x420) $x442)))
 (let (($x411 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x397 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x425 (and $x397 $x411)))
 (let (($x413 (not $x425)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x394 (and $x183 $x204)))
 (let (($x436 (and (not $x394) $x413)))
 (let (($x27 (and (and (and (and (and (and $x436 $x464) $x466) $x480) $x509) $x506) $x513)))
 (let (($x40 (and $x27 $x519)))
 (let (($x346 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x277 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x338 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x277)))
 (let (($x294 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x277)))
 (let (($x377 (or false (or false (and (and true (or $x293 $x294)) (or $x338 $x346))))))
 (let (($x393 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x377)))
 (let (($x237 (and (and (and $x393 $x40) $x160) $x208)))
 (let (($x220 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x247 (and $x220 $x237)))
 (let (($x32 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x279 (and $x32 $x247)))
 (let (($x280 (= $x279 true)))
 (let (($x252 (= $x280 true)))
 (let (($x290 (and $x252 $x287)))
 (let (($x396 (and $x290 $x17)))
 (let (($x22 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x448 (ite $x105 $x22 false)))
 (let ((?x443 (ite $x448 (_ bv1 32) (_ bv0 32))))
 (let (($x449 (= ?x443 (_ bv0 32))))
 (let ((?x524 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x501 (bvuge ?x524 (_ bv1 32))))
 (let (($x203 (and $x501 $x449)))
 (let (($x401 (and $x203 $x396)))
 (let (($x48 (forall ((Lambda99 (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x255 (= Lambda99 input.spec-%var-y-0)))
 (let ((?x426 (ite $x255 ?x25 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x438 (ite $x105 ?x426 (_ bv0 32))))
 (let ((?x205 (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda99)))
 (let (($x419 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x60 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x152 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x152 (_ bv1 32))))
 (=> (and $x115 $x419) (= ?x205 ?x438)))))))))))))
 ))
 (let (($x64 (forall ((Lambda99 (_ BitVec 32)) )(let (($x255 (= Lambda99 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x343 (ite (ite $x105 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x431 (bvuge ?x343 (_ bv1 32))))
 (let (($x60 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x152 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x152 (_ bv1 32))))
 (let (($x419 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x419 (= $x115 $x431)))))))))))
 ))
 (let (($x134 (forall ((Lambda99 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x419 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x523 (=> $x419 $x71)))
 (let (($x60 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x152 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x440 (= ?x152 (_ bv0 32))))
 (=> (and $x440 $x419) $x71))))))))
 ))
 (let (($x418 (forall ((Lambda99 (_ BitVec 32)) )(let (($x255 (= Lambda99 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x343 (ite (ite $x105 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x343 (_ bv0 32))))
 (let (($x60 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x152 (ite $x60 (_ bv1 32) (_ bv0 32))))
 (let (($x440 (= ?x152 (_ bv0 32))))
 (let (($x419 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x419 (= $x440 $x414)))))))))))
 ))
 (let (($x419 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x486 (= $x419 $x501)))
 (let (($x71 (= false false)))
 (let (($x49 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x529 (=> $x49 $x71)))
 (let (($x527 (= ?x524 (_ bv0 32))))
 (let (($x528 (= $x49 $x527)))
 (let (($x530 (and $x528 $x529)))
 (let (($x168 (and $x530 $x486)))
 (let (($x24 (and $x168 $x418)))
 (let (($x146 (and $x24 $x134)))
 (let (($x253 (and $x146 $x64)))
 (let (($x156 (and $x253 $x48)))
 (let (($x402 (and $x156 $x401)))
 (let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x43 (ite $x22 ?x25 (_ bv0 32))))
 (let ((?x36 (ite $x105 ?x43 (_ bv0 32))))
 (let (($x495 (= input.spec-%tmpvar-6.L1%13%d.2 ?x36)))
 (let (($x477 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x496 (=> $x477 $x495)))
 (let (($x470 (bvuge ?x443 (_ bv1 32))))
 (let (($x471 (= $x477 $x470)))
 (let (($x447 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x475 (=> $x447 $x71)))
 (let (($x454 (= $x447 $x449)))
 (let (($x459 (and $x454 $x475)))
 (let (($x479 (and $x459 $x471)))
 (let (($x491 (and $x479 $x496)))
 (let (($x403 (and $x491 $x402)))
 (let (($x458 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x255 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x426 (ite $x255 ?x25 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x438 (ite $x105 ?x426 (_ bv0 32))))
 (let ((?x407 (input.spec-%var-m1-0.L1%13%d.1.1 Lambda101)))
 (let (($x313 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x344 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x433 (bvuge ?x344 (_ bv1 32))))
 (=> $x433 (= ?x407 ?x438))))))))))))
 ))
 (let (($x416 (forall ((Lambda101 (_ BitVec 32)) )(let (($x255 (= Lambda101 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x343 (ite (ite $x105 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x431 (bvuge ?x343 (_ bv1 32))))
 (let (($x313 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x344 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x433 (bvuge ?x344 (_ bv1 32))))
 (= $x433 $x431)))))))))
 ))
 (let (($x355 (forall ((Lambda101 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x313 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x344 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x344 (_ bv0 32))))
 (=> $x345 $x71))))))
 ))
 (let (($x350 (forall ((Lambda101 (_ BitVec 32)) )(let (($x255 (= Lambda101 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x343 (ite (ite $x105 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x343 (_ bv0 32))))
 (let (($x313 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x344 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x344 (_ bv0 32))))
 (= $x345 $x414)))))))))
 ))
 (let (($x360 (and $x350 $x355)))
 (let (($x417 (and $x360 $x416)))
 (let (($x474 (and $x417 $x458)))
 (let (($x531 (and $x474 $x403)))
 (let (($x309 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x206 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x155 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x268 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x268 (_ bv1 32))))
 (=> (and $x256 $x206) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda104 Lambda105) (_ bv0 32))))))))
 ))
 (let (($x278 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x268 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x256 (bvuge ?x268 (_ bv1 32))))
 (let (($x206 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x206 (= $x256 false)))))))
 ))
 (let (($x153 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x206 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x155 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x268 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x179 (= ?x268 (_ bv0 32))))
 (=> (and $x179 $x206) $x71)))))))
 ))
 (let (($x214 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x155 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x268 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x179 (= ?x268 (_ bv0 32))))
 (let (($x206 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x206 (= $x179 true)))))))
 ))
 (let (($x139 (forall ((Lambda104 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x59 (forall ((Lambda104 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x364 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x29 (ite $x364 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x29 (_ bv0 32))))
 (=> $x81 $x71))))))
 ))
 (let (($x65 (forall ((Lambda104 (_ BitVec 32)) )(let (($x364 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x29 (ite $x364 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x29 (_ bv0 32))))
 (= $x81 true)))))
 ))
 (let (($x91 (and $x65 $x59)))
 (let (($x128 (and $x91 $x139)))
 (let (($x215 (and $x128 $x214)))
 (let (($x154 (and $x215 $x153)))
 (let (($x325 (and $x154 $x278)))
 (let (($x312 (and $x325 $x309)))
 (let (($x532 (and $x312 $x531)))
 (let (($x275 (forall ((Lambda101 (_ BitVec 32)) )(let (($x305 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x330 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x330 (_ bv1 32))))
 (=> $x373 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda101) (_ bv0 32)))))))
 ))
 (let (($x375 (forall ((Lambda101 (_ BitVec 32)) )(let (($x305 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x330 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x330 (_ bv1 32))))
 (= $x373 false)))))
 ))
 (let (($x369 (forall ((Lambda101 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x305 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x330 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x331 (= ?x330 (_ bv0 32))))
 (=> $x331 $x71))))))
 ))
 (let (($x398 (forall ((Lambda101 (_ BitVec 32)) )(let (($x305 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x330 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x331 (= ?x330 (_ bv0 32))))
 (= $x331 true)))))
 ))
 (let (($x370 (and $x398 $x369)))
 (let (($x383 (and $x370 $x375)))
 (let (($x12 (and $x383 $x275)))
 (let (($x533 (and $x12 $x532)))
 (let (($x328 (= ?x25 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x534 (and $x328 $x533)))
 (let (($x304 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x255 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x426 (ite $x255 ?x25 (_ bv0 32))))
 (let ((?x260 (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda101)))
 (let (($x151 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x190 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x190 (_ bv1 32))))
 (=> $x242 (= ?x260 ?x426))))))))))
 ))
 (let (($x262 (forall ((Lambda101 (_ BitVec 32)) )(let (($x151 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x190 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x190 (_ bv1 32))))
 (= $x242 (bvuge (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x259 (forall ((Lambda101 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x151 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x190 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x190 (_ bv0 32))))
 (=> $x232 $x71))))))
 ))
 (let (($x218 (forall ((Lambda101 (_ BitVec 32)) )(let (($x151 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x190 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x190 (_ bv0 32))))
 (= $x232 (= (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x213 (and $x218 $x259)))
 (let (($x273 (and $x213 $x262)))
 (let (($x298 (and $x273 $x304)))
 (let (($x92 (and $x298 $x534)))
 (let (($x144 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x255 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x426 (ite $x255 ?x25 (_ bv0 32))))
 (let (($x267 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x439 (ite $x267 ?x426 (_ bv0 32))))
 (let ((?x130 (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x518 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x499 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x511 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x511 (_ bv1 32))))
 (=> (and $x39 $x518) (= ?x130 ?x439)))))))))))))
 ))
 (let (($x99 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x255 (= Lambda105 input.spec-%var-y-0)))
 (let (($x267 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x266 (ite (ite $x267 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x266 (_ bv1 32))))
 (let (($x499 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x511 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x511 (_ bv1 32))))
 (let (($x518 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x518 (= $x39 $x352)))))))))))
 ))
 (let (($x77 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x518 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x499 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x511 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x511 (_ bv0 32))))
 (=> (and $x512 $x518) $x71)))))))
 ))
 (let (($x37 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x255 (= Lambda105 input.spec-%var-y-0)))
 (let (($x267 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x266 (ite (ite $x267 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x270 (= ?x266 (_ bv0 32))))
 (let (($x499 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x511 (ite $x499 (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x511 (_ bv0 32))))
 (let (($x518 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x518 (= $x512 $x270)))))))))))
 ))
 (let (($x490 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x72 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x72 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x84))))
 ))
 (let (($x473 (forall ((Lambda104 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x452 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x465 (ite $x452 (_ bv1 32) (_ bv0 32))))
 (let (($x461 (= ?x465 (_ bv0 32))))
 (=> $x461 $x71))))))
 ))
 (let (($x469 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x72 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x72 (_ bv0 32))))
 (let (($x452 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x465 (ite $x452 (_ bv1 32) (_ bv0 32))))
 (let (($x461 (= ?x465 (_ bv0 32))))
 (= $x461 $x20)))))))
 ))
 (let (($x472 (and $x469 $x473)))
 (let (($x494 (and $x472 $x490)))
 (let (($x5 (and $x494 $x37)))
 (let (($x33 (and $x5 $x77)))
 (let (($x143 (and $x33 $x99)))
 (let (($x149 (and $x143 $x144)))
 (let (($x74 (and $x149 $x92)))
 (let (($x430 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x255 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x426 (ite $x255 ?x25 (_ bv0 32))))
 (let (($x267 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x439 (ite $x267 ?x426 (_ bv0 32))))
 (let ((?x391 (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x307 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x229 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x271 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x271 (_ bv1 32))))
 (=> (and $x353 $x307) (= ?x391 ?x439)))))))))))))
 ))
 (let (($x376 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x255 (= Lambda105 input.spec-%var-y-0)))
 (let (($x267 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x266 (ite (ite $x267 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x266 (_ bv1 32))))
 (let (($x229 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x271 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x271 (_ bv1 32))))
 (let (($x307 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x307 (= $x353 $x352)))))))))))
 ))
 (let (($x337 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x307 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x229 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x271 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (=> (and $x272 $x307) $x71)))))))
 ))
 (let (($x315 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x255 (= Lambda105 input.spec-%var-y-0)))
 (let (($x267 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x266 (ite (ite $x267 $x255 false) (_ bv1 32) (_ bv0 32))))
 (let (($x270 (= ?x266 (_ bv0 32))))
 (let (($x229 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x271 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (let (($x307 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x307 (= $x272 $x270)))))))))))
 ))
 (let (($x165 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x72 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x72 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x84))))
 ))
 (let (($x125 (forall ((Lambda104 (_ BitVec 32)) )(let (($x71 (= false false)))
 (let (($x166 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x104 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x104 (_ bv0 32))))
 (=> $x163 $x71))))))
 ))
 (let (($x167 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x72 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (= ?x72 (_ bv0 32))))
 (let (($x166 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x104 (ite $x166 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x104 (_ bv0 32))))
 (= $x163 $x20)))))))
 ))
 (let (($x93 (and $x167 $x125)))
 (let (($x136 (and $x93 $x165)))
 (let (($x317 (and $x136 $x315)))
 (let (($x356 (and $x317 $x337)))
 (let (($x379 (and $x356 $x376)))
 (let (($x435 (and $x379 $x430)))
 (let (($x23 (and $x435 $x74)))
 (let (($x10 (and $x71 $x23)))
 (let (($x35 (= input.spec-%var-m2-0.L1%18%bbentry ?x36)))
 (let (($x44 (and $x35 $x10)))
 (let (($x15 (and $x71 $x44)))
 (let (($x88 (=> $x15 $x90)))
 (not $x88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460578/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x187 (= input.spec-%var-x-0 ?x11)))
 (let (($x100 (= $x187 true)))
 (let (($x249 (= $x100 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x217 (concat ?x216 (concat ?x209 (concat ?x119 ?x76)))))
 (let (($x437 (= ?x217 input.dst.llvm-%x)))
 (let (($x31 (= $x437 true)))
 (let ((?x248 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x382 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x327 (concat ?x382 (concat ?x323 (concat ?x283 ?x248)))))
 (let (($x406 (= ?x327 input.dst.llvm-%y)))
 (let (($x412 (= $x406 true)))
 (let (($x332 (= input.dst.llvm-%y ?x327)))
 (let (($x246 (= input.dst.llvm-%x ?x217)))
 (let ((?x371 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x372 (= (_ bv0 32) ?x371)))
 (let ((?x329 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x365 (= (_ bv0 32) ?x329)))
 (let ((?x320 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x326 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x320)))
 (let ((?x306 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x318 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x306)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x389 (and $x291 $x318)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x302 (and $x257 $x389)))
 (let (($x240 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x198 $x169)))
 (let (($x172 (not $x176)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (and $x171 $x261)))
 (let (($x188 (and (not $x150) $x172)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x47 $x42)))
 (let (($x159 (not $x127)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x405 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x405 $x408)))
 (let (($x122 (and (not $x41) $x159)))
 (let (($x288 (and (and (and (and (and (and $x122 $x188) $x222) $x240) $x302) $x326) $x365)))
 (let (($x6 (and $x288 $x372)))
 (let (($x497 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x488 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x455 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x451 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x508 (or false (or false (and (and true (or $x451 $x455)) (or $x488 $x497))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x508)))
 (let (($x362 (and (and (and $x26 $x6) $x246) $x332)))
 (let (($x351 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x354 (and $x351 $x362)))
 (let (($x358 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x384 (and $x358 $x354)))
 (let (($x460 (= $x384 true)))
 (let (($x385 (= $x460 true)))
 (let (($x422 (and $x385 $x412)))
 (let (($x243 (and $x422 $x31)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x396 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x401 (= ?x396 (_ bv0 32))))
 (let (($x63 (and $x401 $x243)))
 (let (($x322 (forall ((Lambda99 (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x426 (= Lambda99 input.spec-%var-y-0)))
 (let ((?x130 (ite $x426 ?x8 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x160 (ite $x105 ?x130 (_ bv0 32))))
 (let ((?x67 (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda99)))
 (let (($x532 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x10 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x142 (_ bv1 32))))
 (=> (and $x80 $x532) (= ?x67 ?x160)))))))))))))
 ))
 (let (($x236 (forall ((Lambda99 (_ BitVec 32)) )(let (($x426 (= Lambda99 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x509 (ite (ite $x105 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x509 (_ bv1 32))))
 (let (($x10 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x142 (_ bv1 32))))
 (let (($x532 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x532 (= $x80 $x96)))))))))))
 ))
 (let (($x53 (forall ((Lambda99 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x532 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x390 (=> $x532 $x25)))
 (let (($x10 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x142 (_ bv0 32))))
 (=> (and $x162 $x532) $x25))))))))
 ))
 (let (($x55 (forall ((Lambda99 (_ BitVec 32)) )(let (($x426 (= Lambda99 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x509 (ite (ite $x105 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x509 (_ bv0 32))))
 (let (($x10 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x142 (_ bv0 32))))
 (let (($x532 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x532 (= $x162 $x107)))))))))))
 ))
 (let (($x533 (bvuge ?x396 (_ bv1 32))))
 (let (($x532 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x534 (= $x532 $x533)))
 (let (($x25 (= false false)))
 (let (($x17 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x403 (=> $x17 $x25)))
 (let (($x402 (= $x17 $x401)))
 (let (($x531 (and $x402 $x403)))
 (let (($x92 (and $x531 $x534)))
 (let (($x227 (and $x92 $x55)))
 (let (($x392 (and $x227 $x53)))
 (let (($x191 (and $x392 $x236)))
 (let (($x334 (and $x191 $x322)))
 (let (($x68 (and $x334 $x63)))
 (let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x22 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x36 (ite $x22 ?x8 (_ bv0 32))))
 (let ((?x35 (ite $x105 ?x36 (_ bv0 32))))
 (let (($x281 (= input.spec-%tmpvar-6.L1%13%d.2 ?x35)))
 (let (($x237 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x287 (=> $x237 $x281)))
 (let (($x228 (ite $x105 $x22 false)))
 (let ((?x173 (ite $x228 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x173 (_ bv1 32))))
 (let (($x279 (= $x237 $x247)))
 (let (($x177 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x230 (=> $x177 $x25)))
 (let (($x184 (= ?x173 (_ bv0 32))))
 (let (($x196 (= $x177 $x184)))
 (let (($x208 (and $x196 $x230)))
 (let (($x280 (and $x208 $x279)))
 (let (($x290 (and $x280 $x287)))
 (let (($x18 (and $x290 $x68)))
 (let (($x210 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x426 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x130 (ite $x426 ?x8 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x160 (ite $x105 ?x130 (_ bv0 32))))
 (let ((?x86 (input.spec-%var-m1-0.L1%13%d.1.1 Lambda101)))
 (let (($x467 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x510 (ite $x467 (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x510 (_ bv1 32))))
 (=> $x97 (= ?x86 ?x160))))))))))))
 ))
 (let (($x110 (forall ((Lambda101 (_ BitVec 32)) )(let (($x426 (= Lambda101 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x509 (ite (ite $x105 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x509 (_ bv1 32))))
 (let (($x467 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x510 (ite $x467 (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x510 (_ bv1 32))))
 (= $x97 $x96)))))))))
 ))
 (let (($x514 (forall ((Lambda101 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x467 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x510 (ite $x467 (_ bv1 32) (_ bv0 32))))
 (let (($x506 (= ?x510 (_ bv0 32))))
 (=> $x506 $x25))))))
 ))
 (let (($x505 (forall ((Lambda101 (_ BitVec 32)) )(let (($x426 (= Lambda101 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x509 (ite (ite $x105 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x509 (_ bv0 32))))
 (let (($x467 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x510 (ite $x467 (_ bv1 32) (_ bv0 32))))
 (let (($x506 (= ?x510 (_ bv0 32))))
 (= $x506 $x107)))))))))
 ))
 (let (($x519 (and $x505 $x514)))
 (let (($x111 (and $x519 $x110)))
 (let (($x200 (and $x111 $x210)))
 (let (($x66 (and $x200 $x18)))
 (let (($x463 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x338 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x254 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x427 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x411 (bvuge ?x427 (_ bv1 32))))
 (=> (and $x411 $x338) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda104 Lambda105) (_ bv0 32))))))))
 ))
 (let (($x436 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x427 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x411 (bvuge ?x427 (_ bv1 32))))
 (let (($x338 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x338 (= $x411 false)))))))
 ))
 (let (($x183 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x338 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x254 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x427 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x427 (_ bv0 32))))
 (=> (and $x294 $x338) $x25)))))))
 ))
 (let (($x346 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x427 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x427 (_ bv0 32))))
 (let (($x338 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x338 (= $x294 true)))))))
 ))
 (let (($x32 (forall ((Lambda104 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x46 (forall ((Lambda104 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x523 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x61 (ite $x523 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x61 (_ bv0 32))))
 (=> $x21 $x25))))))
 ))
 (let (($x253 (forall ((Lambda104 (_ BitVec 32)) )(let (($x523 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x61 (ite $x523 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x61 (_ bv0 32))))
 (= $x21 true)))))
 ))
 (let (($x238 (and $x253 $x46)))
 (let (($x113 (and $x238 $x32)))
 (let (($x347 (and $x113 $x346)))
 (let (($x204 (and $x347 $x183)))
 (let (($x482 (and $x204 $x436)))
 (let (($x466 (and $x482 $x463)))
 (let (($x78 (and $x466 $x66)))
 (let (($x432 (forall ((Lambda101 (_ BitVec 32)) )(let (($x454 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x471 (ite $x454 (_ bv1 32) (_ bv0 32))))
 (let (($x528 (bvuge ?x471 (_ bv1 32))))
 (=> $x528 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda101) (_ bv0 32)))))))
 ))
 (let (($x530 (forall ((Lambda101 (_ BitVec 32)) )(let (($x454 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x471 (ite $x454 (_ bv1 32) (_ bv0 32))))
 (let (($x528 (bvuge ?x471 (_ bv1 32))))
 (= $x528 false)))))
 ))
 (let (($x526 (forall ((Lambda101 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x454 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x471 (ite $x454 (_ bv1 32) (_ bv0 32))))
 (let (($x479 (= ?x471 (_ bv0 32))))
 (=> $x479 $x25))))))
 ))
 (let (($x495 (forall ((Lambda101 (_ BitVec 32)) )(let (($x454 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x471 (ite $x454 (_ bv1 32) (_ bv0 32))))
 (let (($x479 (= ?x471 (_ bv0 32))))
 (= $x479 true)))))
 ))
 (let (($x49 (and $x495 $x526)))
 (let (($x419 (and $x49 $x530)))
 (let (($x418 (and $x419 $x432)))
 (let (($x75 (and $x418 $x78)))
 (let (($x443 (= ?x8 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x83 (and $x443 $x75)))
 (let (($x485 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x426 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x130 (ite $x426 ?x8 (_ bv0 32))))
 (let ((?x417 (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda101)))
 (let (($x154 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x309 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x309 (_ bv1 32))))
 (=> $x360 (= ?x417 ?x130))))))))))
 ))
 (let (($x431 (forall ((Lambda101 (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x309 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x309 (_ bv1 32))))
 (= $x360 (bvuge (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x343 (forall ((Lambda101 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x154 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x309 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x309 (_ bv0 32))))
 (=> $x312 $x25))))))
 ))
 (let (($x344 (forall ((Lambda101 (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x309 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x309 (_ bv0 32))))
 (= $x312 (= (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x414 (and $x344 $x343)))
 (let (($x415 (and $x414 $x431)))
 (let (($x447 (and $x415 $x485)))
 (let (($x13 (and $x447 $x83)))
 (let (($x215 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x426 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x130 (ite $x426 ?x8 (_ bv0 32))))
 (let (($x439 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x121 (ite $x439 ?x130 (_ bv0 32))))
 (let ((?x195 (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x383 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x305 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x369 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x369 (_ bv1 32))))
 (=> (and $x91 $x383) (= ?x195 ?x121)))))))))))))
 ))
 (let (($x139 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x426 (= Lambda105 input.spec-%var-y-0)))
 (let (($x439 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x428 (ite (ite $x439 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (bvuge ?x428 (_ bv1 32))))
 (let (($x305 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x369 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x369 (_ bv1 32))))
 (let (($x383 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x383 (= $x91 $x512)))))))))))
 ))
 (let (($x81 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x383 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x305 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x369 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x369 (_ bv0 32))))
 (=> (and $x370 $x383) $x25)))))))
 ))
 (let (($x300 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x426 (= Lambda105 input.spec-%var-y-0)))
 (let (($x439 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x428 (ite (ite $x439 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (= ?x428 (_ bv0 32))))
 (let (($x305 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x369 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x369 (_ bv0 32))))
 (let (($x383 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x383 (= $x370 $x429)))))))))))
 ))
 (let (($x298 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x194 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x194 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x255))))
 ))
 (let (($x262 (forall ((Lambda104 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x232 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x212 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x212 (_ bv0 32))))
 (=> $x259 $x25))))))
 ))
 (let (($x242 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x194 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x194 (_ bv0 32))))
 (let (($x232 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x212 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x212 (_ bv0 32))))
 (= $x259 $x84)))))))
 ))
 (let (($x273 (and $x242 $x262)))
 (let (($x301 (and $x273 $x298)))
 (let (($x251 (and $x301 $x300)))
 (let (($x9 (and $x251 $x81)))
 (let (($x128 (and $x9 $x139)))
 (let (($x234 (and $x128 $x215)))
 (let (($x148 (and $x234 $x13)))
 (let (($x149 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x426 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x130 (ite $x426 ?x8 (_ bv0 32))))
 (let (($x439 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x121 (ite $x439 ?x130 (_ bv0 32))))
 (let ((?x77 (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x462 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x336 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x430 (ite $x336 (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x430 (_ bv1 32))))
 (=> (and $x515 $x462) (= ?x77 ?x121)))))))))))))
 ))
 (let (($x5 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x426 (= Lambda105 input.spec-%var-y-0)))
 (let (($x439 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x428 (ite (ite $x439 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (bvuge ?x428 (_ bv1 32))))
 (let (($x336 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x430 (ite $x336 (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x430 (_ bv1 32))))
 (let (($x462 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x462 (= $x515 $x512)))))))))))
 ))
 (let (($x494 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x462 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x336 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x430 (ite $x336 (_ bv1 32) (_ bv0 32))))
 (let (($x435 (= ?x430 (_ bv0 32))))
 (=> (and $x435 $x462) $x25)))))))
 ))
 (let (($x478 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x426 (= Lambda105 input.spec-%var-y-0)))
 (let (($x439 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x428 (ite (ite $x439 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (= ?x428 (_ bv0 32))))
 (let (($x336 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x430 (ite $x336 (_ bv1 32) (_ bv0 32))))
 (let (($x435 (= ?x430 (_ bv0 32))))
 (let (($x462 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x462 (= $x435 $x429)))))))))))
 ))
 (let (($x270 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x194 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x194 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x255))))
 ))
 (let (($x307 (forall ((Lambda104 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x163 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x124 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x124 (_ bv0 32))))
 (=> $x165 $x25))))))
 ))
 (let (($x123 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x194 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x194 (_ bv0 32))))
 (let (($x163 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x124 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x124 (_ bv0 32))))
 (= $x165 $x84)))))))
 ))
 (let (($x229 (and $x123 $x307)))
 (let (($x295 (and $x229 $x270)))
 (let (($x473 (and $x295 $x478)))
 (let (($x516 (and $x473 $x494)))
 (let (($x16 (and $x516 $x5)))
 (let (($x151 (and $x16 $x149)))
 (let (($x225 (and $x151 $x148)))
 (let (($x7 (and $x25 $x225)))
 (let (($x164 (= input.spec-%var-m2-0.L1%18%bbentry ?x35)))
 (let (($x103 (and $x164 $x7)))
 (let (($x106 (and $x25 $x103)))
 (let (($x126 (=> $x106 $x249)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L1%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L1%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-2.L1%8%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L1%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L1%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-0.L1%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x11 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x187 (= input.spec-%var-x-0 ?x11)))
 (let (($x100 (= $x187 true)))
 (let (($x249 (= $x100 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x217 (concat ?x216 (concat ?x209 (concat ?x119 ?x76)))))
 (let (($x437 (= ?x217 input.dst.llvm-%x)))
 (let (($x31 (= $x437 true)))
 (let ((?x248 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x382 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x327 (concat ?x382 (concat ?x323 (concat ?x283 ?x248)))))
 (let (($x406 (= ?x327 input.dst.llvm-%y)))
 (let (($x412 (= $x406 true)))
 (let (($x332 (= input.dst.llvm-%y ?x327)))
 (let (($x246 (= input.dst.llvm-%x ?x217)))
 (let ((?x371 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x372 (= (_ bv0 32) ?x371)))
 (let ((?x329 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x365 (= (_ bv0 32) ?x329)))
 (let ((?x320 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x326 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x320)))
 (let ((?x306 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x318 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x306)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x389 (and $x291 $x318)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x302 (and $x257 $x389)))
 (let (($x240 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x198 $x169)))
 (let (($x172 (not $x176)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (and $x171 $x261)))
 (let (($x188 (and (not $x150) $x172)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x47 $x42)))
 (let (($x159 (not $x127)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x405 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x405 $x408)))
 (let (($x122 (and (not $x41) $x159)))
 (let (($x288 (and (and (and (and (and (and $x122 $x188) $x222) $x240) $x302) $x326) $x365)))
 (let (($x6 (and $x288 $x372)))
 (let (($x497 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x488 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x455 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x451 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x131)))
 (let (($x508 (or false (or false (and (and true (or $x451 $x455)) (or $x488 $x497))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x508)))
 (let (($x362 (and (and (and $x26 $x6) $x246) $x332)))
 (let (($x351 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x354 (and $x351 $x362)))
 (let (($x358 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x384 (and $x358 $x354)))
 (let (($x460 (= $x384 true)))
 (let (($x385 (= $x460 true)))
 (let (($x422 (and $x385 $x412)))
 (let (($x243 (and $x422 $x31)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x396 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x401 (= ?x396 (_ bv0 32))))
 (let (($x63 (and $x401 $x243)))
 (let (($x322 (forall ((Lambda99 (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x426 (= Lambda99 input.spec-%var-y-0)))
 (let ((?x130 (ite $x426 ?x8 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x160 (ite $x105 ?x130 (_ bv0 32))))
 (let ((?x67 (input.spec-%tmpvar-5.L1%8%d.2.1.1 Lambda99)))
 (let (($x532 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x10 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x142 (_ bv1 32))))
 (=> (and $x80 $x532) (= ?x67 ?x160)))))))))))))
 ))
 (let (($x236 (forall ((Lambda99 (_ BitVec 32)) )(let (($x426 (= Lambda99 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x509 (ite (ite $x105 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x509 (_ bv1 32))))
 (let (($x10 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x142 (_ bv1 32))))
 (let (($x532 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x532 (= $x80 $x96)))))))))))
 ))
 (let (($x53 (forall ((Lambda99 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x532 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x390 (=> $x532 $x25)))
 (let (($x10 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x142 (_ bv0 32))))
 (=> (and $x162 $x532) $x25))))))))
 ))
 (let (($x55 (forall ((Lambda99 (_ BitVec 32)) )(let (($x426 (= Lambda99 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x509 (ite (ite $x105 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x509 (_ bv0 32))))
 (let (($x10 (input.spec-%tmpvar-5.L1%8%d.2.0.1 Lambda99)))
 (let ((?x142 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x142 (_ bv0 32))))
 (let (($x532 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (=> $x532 (= $x162 $x107)))))))))))
 ))
 (let (($x533 (bvuge ?x396 (_ bv1 32))))
 (let (($x532 (bvuge input.spec-%tmpvar-5.L1%8%d.0 (_ bv1 32))))
 (let (($x534 (= $x532 $x533)))
 (let (($x25 (= false false)))
 (let (($x17 (= input.spec-%tmpvar-5.L1%8%d.0 (_ bv0 32))))
 (let (($x403 (=> $x17 $x25)))
 (let (($x402 (= $x17 $x401)))
 (let (($x531 (and $x402 $x403)))
 (let (($x92 (and $x531 $x534)))
 (let (($x227 (and $x92 $x55)))
 (let (($x392 (and $x227 $x53)))
 (let (($x191 (and $x392 $x236)))
 (let (($x334 (and $x191 $x322)))
 (let (($x68 (and $x334 $x63)))
 (let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x22 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x36 (ite $x22 ?x8 (_ bv0 32))))
 (let ((?x35 (ite $x105 ?x36 (_ bv0 32))))
 (let (($x281 (= input.spec-%tmpvar-6.L1%13%d.2 ?x35)))
 (let (($x237 (bvuge input.spec-%tmpvar-6.L1%13%d.0 (_ bv1 32))))
 (let (($x287 (=> $x237 $x281)))
 (let (($x228 (ite $x105 $x22 false)))
 (let ((?x173 (ite $x228 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x173 (_ bv1 32))))
 (let (($x279 (= $x237 $x247)))
 (let (($x177 (= input.spec-%tmpvar-6.L1%13%d.0 (_ bv0 32))))
 (let (($x230 (=> $x177 $x25)))
 (let (($x184 (= ?x173 (_ bv0 32))))
 (let (($x196 (= $x177 $x184)))
 (let (($x208 (and $x196 $x230)))
 (let (($x280 (and $x208 $x279)))
 (let (($x290 (and $x280 $x287)))
 (let (($x18 (and $x290 $x68)))
 (let (($x210 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x426 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x130 (ite $x426 ?x8 (_ bv0 32))))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x160 (ite $x105 ?x130 (_ bv0 32))))
 (let ((?x86 (input.spec-%var-m1-0.L1%13%d.1.1 Lambda101)))
 (let (($x467 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x510 (ite $x467 (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x510 (_ bv1 32))))
 (=> $x97 (= ?x86 ?x160))))))))))))
 ))
 (let (($x110 (forall ((Lambda101 (_ BitVec 32)) )(let (($x426 (= Lambda101 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x509 (ite (ite $x105 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (bvuge ?x509 (_ bv1 32))))
 (let (($x467 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x510 (ite $x467 (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x510 (_ bv1 32))))
 (= $x97 $x96)))))))))
 ))
 (let (($x514 (forall ((Lambda101 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x467 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x510 (ite $x467 (_ bv1 32) (_ bv0 32))))
 (let (($x506 (= ?x510 (_ bv0 32))))
 (=> $x506 $x25))))))
 ))
 (let (($x505 (forall ((Lambda101 (_ BitVec 32)) )(let (($x426 (= Lambda101 input.spec-%var-y-0)))
 (let (($x105 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x509 (ite (ite $x105 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x509 (_ bv0 32))))
 (let (($x467 (input.spec-%var-m1-0.L1%13%d.0.1 Lambda101)))
 (let ((?x510 (ite $x467 (_ bv1 32) (_ bv0 32))))
 (let (($x506 (= ?x510 (_ bv0 32))))
 (= $x506 $x107)))))))))
 ))
 (let (($x519 (and $x505 $x514)))
 (let (($x111 (and $x519 $x110)))
 (let (($x200 (and $x111 $x210)))
 (let (($x66 (and $x200 $x18)))
 (let (($x463 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x338 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x254 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x427 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x411 (bvuge ?x427 (_ bv1 32))))
 (=> (and $x411 $x338) (= (input.spec-%tmpvar-0.L1%8%d.1.1.1.1 Lambda104 Lambda105) (_ bv0 32))))))))
 ))
 (let (($x436 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x427 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x411 (bvuge ?x427 (_ bv1 32))))
 (let (($x338 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x338 (= $x411 false)))))))
 ))
 (let (($x183 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x338 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x254 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x427 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x427 (_ bv0 32))))
 (=> (and $x294 $x338) $x25)))))))
 ))
 (let (($x346 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x427 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x427 (_ bv0 32))))
 (let (($x338 (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x338 (= $x294 true)))))))
 ))
 (let (($x32 (forall ((Lambda104 (_ BitVec 32)) )(= (bvuge (ite (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) false))
 ))
 (let (($x46 (forall ((Lambda104 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x523 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x61 (ite $x523 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x61 (_ bv0 32))))
 (=> $x21 $x25))))))
 ))
 (let (($x253 (forall ((Lambda104 (_ BitVec 32)) )(let (($x523 (input.spec-%tmpvar-0.L1%8%d.0.1 Lambda104)))
 (let ((?x61 (ite $x523 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x61 (_ bv0 32))))
 (= $x21 true)))))
 ))
 (let (($x238 (and $x253 $x46)))
 (let (($x113 (and $x238 $x32)))
 (let (($x347 (and $x113 $x346)))
 (let (($x204 (and $x347 $x183)))
 (let (($x482 (and $x204 $x436)))
 (let (($x466 (and $x482 $x463)))
 (let (($x78 (and $x466 $x66)))
 (let (($x432 (forall ((Lambda101 (_ BitVec 32)) )(let (($x454 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x471 (ite $x454 (_ bv1 32) (_ bv0 32))))
 (let (($x528 (bvuge ?x471 (_ bv1 32))))
 (=> $x528 (= (input.spec-%tmpvar-1.L1%8%d.1.1 Lambda101) (_ bv0 32)))))))
 ))
 (let (($x530 (forall ((Lambda101 (_ BitVec 32)) )(let (($x454 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x471 (ite $x454 (_ bv1 32) (_ bv0 32))))
 (let (($x528 (bvuge ?x471 (_ bv1 32))))
 (= $x528 false)))))
 ))
 (let (($x526 (forall ((Lambda101 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x454 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x471 (ite $x454 (_ bv1 32) (_ bv0 32))))
 (let (($x479 (= ?x471 (_ bv0 32))))
 (=> $x479 $x25))))))
 ))
 (let (($x495 (forall ((Lambda101 (_ BitVec 32)) )(let (($x454 (input.spec-%tmpvar-1.L1%8%d.0.1 Lambda101)))
 (let ((?x471 (ite $x454 (_ bv1 32) (_ bv0 32))))
 (let (($x479 (= ?x471 (_ bv0 32))))
 (= $x479 true)))))
 ))
 (let (($x49 (and $x495 $x526)))
 (let (($x419 (and $x49 $x530)))
 (let (($x418 (and $x419 $x432)))
 (let (($x75 (and $x418 $x78)))
 (let (($x443 (= ?x8 input.spec-%tmpvar-2.L1%8%d)))
 (let (($x83 (and $x443 $x75)))
 (let (($x485 (forall ((Lambda101 (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x426 (= Lambda101 input.spec-%var-y-0)))
 (let ((?x130 (ite $x426 ?x8 (_ bv0 32))))
 (let ((?x417 (input.spec-%tmpvar-3.L1%8%d.1.1 Lambda101)))
 (let (($x154 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x309 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x309 (_ bv1 32))))
 (=> $x360 (= ?x417 ?x130))))))))))
 ))
 (let (($x431 (forall ((Lambda101 (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x309 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x309 (_ bv1 32))))
 (= $x360 (bvuge (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x343 (forall ((Lambda101 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x154 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x309 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x309 (_ bv0 32))))
 (=> $x312 $x25))))))
 ))
 (let (($x344 (forall ((Lambda101 (_ BitVec 32)) )(let (($x154 (input.spec-%tmpvar-3.L1%8%d.0.1 Lambda101)))
 (let ((?x309 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x309 (_ bv0 32))))
 (= $x312 (= (ite (= Lambda101 input.spec-%var-y-0) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x414 (and $x344 $x343)))
 (let (($x415 (and $x414 $x431)))
 (let (($x447 (and $x415 $x485)))
 (let (($x13 (and $x447 $x83)))
 (let (($x215 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x426 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x130 (ite $x426 ?x8 (_ bv0 32))))
 (let (($x439 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x121 (ite $x439 ?x130 (_ bv0 32))))
 (let ((?x195 (input.spec-%tmpvar-4.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x383 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x305 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x369 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x369 (_ bv1 32))))
 (=> (and $x91 $x383) (= ?x195 ?x121)))))))))))))
 ))
 (let (($x139 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x426 (= Lambda105 input.spec-%var-y-0)))
 (let (($x439 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x428 (ite (ite $x439 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (bvuge ?x428 (_ bv1 32))))
 (let (($x305 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x369 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x369 (_ bv1 32))))
 (let (($x383 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x383 (= $x91 $x512)))))))))))
 ))
 (let (($x81 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x383 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x305 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x369 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x369 (_ bv0 32))))
 (=> (and $x370 $x383) $x25)))))))
 ))
 (let (($x300 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x426 (= Lambda105 input.spec-%var-y-0)))
 (let (($x439 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x428 (ite (ite $x439 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (= ?x428 (_ bv0 32))))
 (let (($x305 (input.spec-%tmpvar-4.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x369 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x369 (_ bv0 32))))
 (let (($x383 (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x383 (= $x370 $x429)))))))))))
 ))
 (let (($x298 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x194 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x194 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x255))))
 ))
 (let (($x262 (forall ((Lambda104 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x232 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x212 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x212 (_ bv0 32))))
 (=> $x259 $x25))))))
 ))
 (let (($x242 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x194 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x194 (_ bv0 32))))
 (let (($x232 (input.spec-%tmpvar-4.L1%8%d.0.1 Lambda104)))
 (let ((?x212 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x212 (_ bv0 32))))
 (= $x259 $x84)))))))
 ))
 (let (($x273 (and $x242 $x262)))
 (let (($x301 (and $x273 $x298)))
 (let (($x251 (and $x301 $x300)))
 (let (($x9 (and $x251 $x81)))
 (let (($x128 (and $x9 $x139)))
 (let (($x234 (and $x128 $x215)))
 (let (($x148 (and $x234 $x13)))
 (let (($x149 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let ((?x8 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x426 (= Lambda105 input.spec-%var-y-0)))
 (let ((?x130 (ite $x426 ?x8 (_ bv0 32))))
 (let (($x439 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x121 (ite $x439 ?x130 (_ bv0 32))))
 (let ((?x77 (input.spec-%var-m-0.L1%8%d.1.1.1.1 Lambda104 Lambda105)))
 (let (($x462 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x336 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x430 (ite $x336 (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x430 (_ bv1 32))))
 (=> (and $x515 $x462) (= ?x77 ?x121)))))))))))))
 ))
 (let (($x5 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x426 (= Lambda105 input.spec-%var-y-0)))
 (let (($x439 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x428 (ite (ite $x439 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (bvuge ?x428 (_ bv1 32))))
 (let (($x336 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x430 (ite $x336 (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x430 (_ bv1 32))))
 (let (($x462 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x462 (= $x515 $x512)))))))))))
 ))
 (let (($x494 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x462 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (let (($x336 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x430 (ite $x336 (_ bv1 32) (_ bv0 32))))
 (let (($x435 (= ?x430 (_ bv0 32))))
 (=> (and $x435 $x462) $x25)))))))
 ))
 (let (($x478 (forall ((Lambda104 (_ BitVec 32)) (Lambda105 (_ BitVec 32)) )(let (($x426 (= Lambda105 input.spec-%var-y-0)))
 (let (($x439 (= Lambda104 input.spec-%var-x-0)))
 (let ((?x428 (ite (ite $x439 $x426 false) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (= ?x428 (_ bv0 32))))
 (let (($x336 (input.spec-%var-m-0.L1%8%d.1.1.0.1 Lambda104 Lambda105)))
 (let ((?x430 (ite $x336 (_ bv1 32) (_ bv0 32))))
 (let (($x435 (= ?x430 (_ bv0 32))))
 (let (($x462 (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))
 (=> $x462 (= $x435 $x429)))))))))))
 ))
 (let (($x270 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x194 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x194 (_ bv1 32))))
 (= (bvuge (ite (input.spec-%var-m-0.L1%8%d.0.1 Lambda104) (_ bv1 32) (_ bv0 32)) (_ bv1 32)) $x255))))
 ))
 (let (($x307 (forall ((Lambda104 (_ BitVec 32)) )(let (($x25 (= false false)))
 (let (($x163 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x124 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x124 (_ bv0 32))))
 (=> $x165 $x25))))))
 ))
 (let (($x123 (forall ((Lambda104 (_ BitVec 32)) )(let ((?x194 (ite (= Lambda104 input.spec-%var-x-0) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x194 (_ bv0 32))))
 (let (($x163 (input.spec-%var-m-0.L1%8%d.0.1 Lambda104)))
 (let ((?x124 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x124 (_ bv0 32))))
 (= $x165 $x84)))))))
 ))
 (let (($x229 (and $x123 $x307)))
 (let (($x295 (and $x229 $x270)))
 (let (($x473 (and $x295 $x478)))
 (let (($x516 (and $x473 $x494)))
 (let (($x16 (and $x516 $x5)))
 (let (($x151 (and $x16 $x149)))
 (let (($x225 (and $x151 $x148)))
 (let (($x7 (and $x25 $x225)))
 (let (($x164 (= input.spec-%var-m2-0.L1%18%bbentry ?x35)))
 (let (($x103 (and $x164 $x7)))
 (let (($x106 (and $x25 $x103)))
 (let (($x126 (=> $x106 $x249)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 456 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460578/query
