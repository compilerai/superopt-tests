==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x10 $x8)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x10 $x8)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675918/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x392 (= true false)))
 (let (($x393 (= $x392 true)))
 (let (($x383 (forall ((input.ind-%var1003X (_ BitVec 32)) (input.ind-%var1005X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var1005X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x320 (= input.ind-%var1003X input.spec-%var-x-0)))
 (let ((?x337 (ite $x320 ?x165 (_ bv0 32))))
 (let ((?x373 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var1003X input.ind-%var1005X)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1003X input.ind-%var1005X)))
 (let (($x366 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1003X)))
 (=> (and $x366 $x358) (= ?x373 ?x337)))))))))))
 ))
 (let (($x368 (forall ((input.ind-%var1003X (_ BitVec 32)) (input.ind-%var1004X (_ BitVec 32)) )(let (($x149 (= input.ind-%var1004X input.spec-%var-y-0)))
 (let (($x320 (= input.ind-%var1003X input.spec-%var-x-0)))
 (let (($x321 (ite $x320 $x149 false)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1003X input.ind-%var1004X)))
 (let (($x366 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1003X)))
 (=> $x366 (= $x358 $x321))))))))
 ))
 (let (($x353 (forall ((input.ind-%var1002X (_ BitVec 32)) )(let (($x306 (= input.ind-%var1002X input.spec-%var-x-0)))
 (let (($x348 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1002X)))
 (= $x348 $x306))))
 ))
 (let (($x385 (and (and $x353 $x368) $x383)))
 (let (($x386 (= $x385 true)))
 (let (($x341 (forall ((input.ind-%var983X (_ BitVec 32)) (input.ind-%var985X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var985X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x320 (= input.ind-%var983X input.spec-%var-x-0)))
 (let ((?x337 (ite $x320 ?x165 (_ bv0 32))))
 (let ((?x330 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var983X input.ind-%var985X)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var983X input.ind-%var985X)))
 (let (($x323 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var983X)))
 (=> (and $x323 $x313) (= ?x330 ?x337)))))))))))
 ))
 (let (($x325 (forall ((input.ind-%var983X (_ BitVec 32)) (input.ind-%var984X (_ BitVec 32)) )(let (($x149 (= input.ind-%var984X input.spec-%var-y-0)))
 (let (($x320 (= input.ind-%var983X input.spec-%var-x-0)))
 (let (($x321 (ite $x320 $x149 false)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var983X input.ind-%var984X)))
 (let (($x323 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var983X)))
 (=> $x323 (= $x313 $x321))))))))
 ))
 (let (($x308 (forall ((input.ind-%var982X (_ BitVec 32)) )(let (($x306 (= input.ind-%var982X input.spec-%var-x-0)))
 (let (($x302 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var982X)))
 (= $x302 $x306))))
 ))
 (let (($x343 (and (and $x308 $x325) $x341)))
 (let (($x344 (= $x343 true)))
 (let (($x296 (forall ((input.ind-%var965X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var965X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let ((?x288 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var965X)))
 (let (($x279 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var965X)))
 (=> $x279 (= ?x288 ?x165))))))))
 ))
 (let (($x284 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x149 (= input.ind-%var964X input.spec-%var-y-0)))
 (let (($x279 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var964X)))
 (= $x279 $x149))))
 ))
 (let (($x297 (and $x284 $x296)))
 (let (($x298 (= $x297 true)))
 (let (($x273 (forall ((input.ind-%var955X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var955X)))
 (=> $x259 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var955X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var954X)))
 (= $x259 false)))
 ))
 (let (($x274 (and $x263 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x252 (forall ((input.ind-%var941X (_ BitVec 32)) (input.ind-%var943X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var941X input.ind-%var943X)))
 (let (($x238 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var941X)))
 (=> (and $x238 $x233) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var941X input.ind-%var943X) (_ bv0 32))))))
 ))
 (let (($x240 (forall ((input.ind-%var941X (_ BitVec 32)) (input.ind-%var942X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var941X)))
 (=> $x238 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var941X input.ind-%var942X) false))))
 ))
 (let (($x226 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var940X)))
 (= $x222 false)))
 ))
 (let (($x254 (and (and $x226 $x240) $x252)))
 (let (($x255 (= $x254 true)))
 (let (($x216 (forall ((input.ind-%var915X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var915X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x166 (ite $x48 ?x165 (_ bv0 32))))
 (let ((?x207 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var915X)))
 (let (($x197 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var915X)))
 (=> $x197 (= ?x207 ?x166))))))))))
 ))
 (let (($x203 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x149 (= input.ind-%var914X input.spec-%var-y-0)))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x150 (ite $x48 $x149 false)))
 (let (($x197 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var914X)))
 (= $x197 $x150))))))
 ))
 (let (($x217 (and $x203 $x216)))
 (let (($x218 (= $x217 true)))
 (let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x43 ?x69 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x29 (ite $x48 ?x55 (_ bv0 32))))
 (let (($x188 (= input.spec-%tmpvar-6.L2%13%d.2 ?x29)))
 (let (($x184 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x189 (=> $x184 $x188)))
 (let (($x179 (ite $x48 $x43 false)))
 (let ((?x180 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x180 (_ bv1 32))))
 (let (($x186 (= $x184 $x185)))
 (let (($x10 (= false false)))
 (let (($x178 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x183 (=> $x178 $x10)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x182 (= $x178 $x181)))
 (let (($x192 (and (and (and $x182 $x183) $x186) $x189)))
 (let (($x193 (= $x192 true)))
 (let (($x170 (forall ((input.ind-%var895X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var895X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x166 (ite $x48 ?x165 (_ bv0 32))))
 (let ((?x158 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var895X)))
 (let (($x143 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var895X)))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x131 $x143) (= ?x158 ?x166)))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var894X (_ BitVec 32)) )(let (($x149 (= input.ind-%var894X input.spec-%var-y-0)))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x150 (ite $x48 $x149 false)))
 (let (($x143 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var894X)))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x131 (= $x143 $x150))))))))
 ))
 (let ((?x132 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (= ?x132 (_ bv0 32))))
 (let (($x135 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x138 (= $x135 $x137)))
 (let (($x136 (=> $x135 $x10)))
 (let (($x133 (bvuge ?x132 (_ bv1 32))))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x134 (= $x131 $x133)))
 (let (($x174 (and (and (and (and $x134 $x136) $x138) $x153) $x170)))
 (let (($x175 (= $x174 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x124 (concat ?x121 (concat ?x118 ?x116)))))
 (let (($x126 (= ?x125 input.dst.llvm-%y)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x106 (concat ?x102 ?x100)))))
 (let (($x111 (= ?x110 input.dst.llvm-%x)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let (($x93 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x9)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x16)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x82)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x65 $x89)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x28 $x53)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x50 $x78)))
 (let (($x80 (not $x62)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x11 $x42)))
 (let (($x32 (and (not $x72) $x80)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x67 $x46)))
 (let (($x56 (not $x49)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x70 $x17)))
 (let (($x45 (and (not $x81) $x56)))
 (let (($x87 (and (and (and (and (and (and $x45 $x32) $x73) $x6) $x18) $x20) $x26)))
 (let (($x88 (and $x87 $x75)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x85 (or false (or false (and (and true (or $x23 $x27)) (or $x15 $x63))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x90 (and $x68 $x88)))
 (let (($x58 (= $x90 true)))
 (let (($x57 (= $x58 true)))
 (let (($x59 (= $x57 true)))
 (let (($x37 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (= $x37 true)))
 (let (($x40 (= $x51 true)))
 (let (($x33 (= $x40 true)))
 (let (($x91 (and $x33 $x59)))
 (let (($x97 (and $x91 $x96)))
 (let (($x114 (and $x97 $x113)))
 (let (($x129 (and $x114 $x128)))
 (let (($x176 (and $x129 $x175)))
 (let (($x194 (and $x176 $x193)))
 (let (($x219 (and $x194 $x218)))
 (let (($x256 (and $x219 $x255)))
 (let (($x276 (and $x256 $x275)))
 (let (($x299 (and $x276 $x298)))
 (let (($x345 (and $x299 $x344)))
 (let (($x387 (and $x345 $x386)))
 (let (($x36 (= ?x69 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x388 (and $x36 $x387)))
 (let (($x389 (and $x10 $x388)))
 (let (($x77 (= input.spec-%var-m2-0.L2%18%bbentry ?x29)))
 (let (($x390 (and $x77 $x389)))
 (let (($x391 (and $x10 $x390)))
 (let (($x394 (=> $x391 $x393)))
 (not $x394))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x392 (= true false)))
 (let (($x393 (= $x392 true)))
 (let (($x383 (forall ((input.ind-%var1003X (_ BitVec 32)) (input.ind-%var1005X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var1005X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x320 (= input.ind-%var1003X input.spec-%var-x-0)))
 (let ((?x337 (ite $x320 ?x165 (_ bv0 32))))
 (let ((?x373 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var1003X input.ind-%var1005X)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1003X input.ind-%var1005X)))
 (let (($x366 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1003X)))
 (=> (and $x366 $x358) (= ?x373 ?x337)))))))))))
 ))
 (let (($x368 (forall ((input.ind-%var1003X (_ BitVec 32)) (input.ind-%var1004X (_ BitVec 32)) )(let (($x149 (= input.ind-%var1004X input.spec-%var-y-0)))
 (let (($x320 (= input.ind-%var1003X input.spec-%var-x-0)))
 (let (($x321 (ite $x320 $x149 false)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1003X input.ind-%var1004X)))
 (let (($x366 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1003X)))
 (=> $x366 (= $x358 $x321))))))))
 ))
 (let (($x353 (forall ((input.ind-%var1002X (_ BitVec 32)) )(let (($x306 (= input.ind-%var1002X input.spec-%var-x-0)))
 (let (($x348 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1002X)))
 (= $x348 $x306))))
 ))
 (let (($x385 (and (and $x353 $x368) $x383)))
 (let (($x386 (= $x385 true)))
 (let (($x341 (forall ((input.ind-%var983X (_ BitVec 32)) (input.ind-%var985X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var985X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x320 (= input.ind-%var983X input.spec-%var-x-0)))
 (let ((?x337 (ite $x320 ?x165 (_ bv0 32))))
 (let ((?x330 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var983X input.ind-%var985X)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var983X input.ind-%var985X)))
 (let (($x323 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var983X)))
 (=> (and $x323 $x313) (= ?x330 ?x337)))))))))))
 ))
 (let (($x325 (forall ((input.ind-%var983X (_ BitVec 32)) (input.ind-%var984X (_ BitVec 32)) )(let (($x149 (= input.ind-%var984X input.spec-%var-y-0)))
 (let (($x320 (= input.ind-%var983X input.spec-%var-x-0)))
 (let (($x321 (ite $x320 $x149 false)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var983X input.ind-%var984X)))
 (let (($x323 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var983X)))
 (=> $x323 (= $x313 $x321))))))))
 ))
 (let (($x308 (forall ((input.ind-%var982X (_ BitVec 32)) )(let (($x306 (= input.ind-%var982X input.spec-%var-x-0)))
 (let (($x302 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var982X)))
 (= $x302 $x306))))
 ))
 (let (($x343 (and (and $x308 $x325) $x341)))
 (let (($x344 (= $x343 true)))
 (let (($x296 (forall ((input.ind-%var965X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var965X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let ((?x288 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var965X)))
 (let (($x279 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var965X)))
 (=> $x279 (= ?x288 ?x165))))))))
 ))
 (let (($x284 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x149 (= input.ind-%var964X input.spec-%var-y-0)))
 (let (($x279 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var964X)))
 (= $x279 $x149))))
 ))
 (let (($x297 (and $x284 $x296)))
 (let (($x298 (= $x297 true)))
 (let (($x273 (forall ((input.ind-%var955X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var955X)))
 (=> $x259 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var955X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var954X)))
 (= $x259 false)))
 ))
 (let (($x274 (and $x263 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x252 (forall ((input.ind-%var941X (_ BitVec 32)) (input.ind-%var943X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var941X input.ind-%var943X)))
 (let (($x238 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var941X)))
 (=> (and $x238 $x233) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var941X input.ind-%var943X) (_ bv0 32))))))
 ))
 (let (($x240 (forall ((input.ind-%var941X (_ BitVec 32)) (input.ind-%var942X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var941X)))
 (=> $x238 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var941X input.ind-%var942X) false))))
 ))
 (let (($x226 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var940X)))
 (= $x222 false)))
 ))
 (let (($x254 (and (and $x226 $x240) $x252)))
 (let (($x255 (= $x254 true)))
 (let (($x216 (forall ((input.ind-%var915X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var915X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x166 (ite $x48 ?x165 (_ bv0 32))))
 (let ((?x207 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var915X)))
 (let (($x197 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var915X)))
 (=> $x197 (= ?x207 ?x166))))))))))
 ))
 (let (($x203 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x149 (= input.ind-%var914X input.spec-%var-y-0)))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x150 (ite $x48 $x149 false)))
 (let (($x197 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var914X)))
 (= $x197 $x150))))))
 ))
 (let (($x217 (and $x203 $x216)))
 (let (($x218 (= $x217 true)))
 (let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x43 ?x69 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x29 (ite $x48 ?x55 (_ bv0 32))))
 (let (($x188 (= input.spec-%tmpvar-6.L2%13%d.2 ?x29)))
 (let (($x184 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x189 (=> $x184 $x188)))
 (let (($x179 (ite $x48 $x43 false)))
 (let ((?x180 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x180 (_ bv1 32))))
 (let (($x186 (= $x184 $x185)))
 (let (($x10 (= false false)))
 (let (($x178 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x183 (=> $x178 $x10)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x182 (= $x178 $x181)))
 (let (($x192 (and (and (and $x182 $x183) $x186) $x189)))
 (let (($x193 (= $x192 true)))
 (let (($x170 (forall ((input.ind-%var895X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var895X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x166 (ite $x48 ?x165 (_ bv0 32))))
 (let ((?x158 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var895X)))
 (let (($x143 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var895X)))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x131 $x143) (= ?x158 ?x166)))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var894X (_ BitVec 32)) )(let (($x149 (= input.ind-%var894X input.spec-%var-y-0)))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x150 (ite $x48 $x149 false)))
 (let (($x143 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var894X)))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x131 (= $x143 $x150))))))))
 ))
 (let ((?x132 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (= ?x132 (_ bv0 32))))
 (let (($x135 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x138 (= $x135 $x137)))
 (let (($x136 (=> $x135 $x10)))
 (let (($x133 (bvuge ?x132 (_ bv1 32))))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x134 (= $x131 $x133)))
 (let (($x174 (and (and (and (and $x134 $x136) $x138) $x153) $x170)))
 (let (($x175 (= $x174 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x124 (concat ?x121 (concat ?x118 ?x116)))))
 (let (($x126 (= ?x125 input.dst.llvm-%y)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x106 (concat ?x102 ?x100)))))
 (let (($x111 (= ?x110 input.dst.llvm-%x)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let (($x93 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x9)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x16)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x82)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x65 $x89)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x28 $x53)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x50 $x78)))
 (let (($x80 (not $x62)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x11 $x42)))
 (let (($x32 (and (not $x72) $x80)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x67 $x46)))
 (let (($x56 (not $x49)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x70 $x17)))
 (let (($x45 (and (not $x81) $x56)))
 (let (($x87 (and (and (and (and (and (and $x45 $x32) $x73) $x6) $x18) $x20) $x26)))
 (let (($x88 (and $x87 $x75)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x85 (or false (or false (and (and true (or $x23 $x27)) (or $x15 $x63))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x90 (and $x68 $x88)))
 (let (($x58 (= $x90 true)))
 (let (($x57 (= $x58 true)))
 (let (($x59 (= $x57 true)))
 (let (($x37 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (= $x37 true)))
 (let (($x40 (= $x51 true)))
 (let (($x33 (= $x40 true)))
 (let (($x91 (and $x33 $x59)))
 (let (($x97 (and $x91 $x96)))
 (let (($x114 (and $x97 $x113)))
 (let (($x129 (and $x114 $x128)))
 (let (($x176 (and $x129 $x175)))
 (let (($x194 (and $x176 $x193)))
 (let (($x219 (and $x194 $x218)))
 (let (($x256 (and $x219 $x255)))
 (let (($x276 (and $x256 $x275)))
 (let (($x299 (and $x276 $x298)))
 (let (($x345 (and $x299 $x344)))
 (let (($x387 (and $x345 $x386)))
 (let (($x36 (= ?x69 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x388 (and $x36 $x387)))
 (let (($x389 (and $x10 $x388)))
 (let (($x77 (= input.spec-%var-m2-0.L2%18%bbentry ?x29)))
 (let (($x390 (and $x77 $x389)))
 (let (($x391 (and $x10 $x390)))
 (let (($x394 (=> $x391 $x393)))
 (not $x394))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x36022de0)
  (define-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32)
    #x00008000)
  (define-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!122))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00008600)
  (define-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32)
    #x53160500)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x36022de3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00008603)
  (define-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32)
    #x53160500)
  (define-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32)
    #x53160500)
  (define-fun input.spec-%var-y-0 () (_ BitVec 32)
    #x50440000)
  (define-fun input.dst.llvm-%y () (_ BitVec 32)
    #x50440000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00008600)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x02d20500)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x02d20500)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x36022de0)
  (define-fun k!128 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1!133 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (and (= x!0 #x02d20500) (= x!1 #x50440000)))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1!143 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x02d20500) (= x!1 #x50440000)) #x53160500
      #x00000008))
  (define-fun k!130 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x02d20500) #x02d20500
      #x00000000))
  (define-fun k!129 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.1.1.0.1!133 (k!130 x!0) (k!129 x!1)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1!138 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x50440000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1!134 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x02d20500) (= x!1 #x50440000)) #x53160500
      #x00000004))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1!139 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x02d20500))
  (define-fun k!132 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x02d20500) #x02d20500
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.0.1!139 (k!132 x!0)))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1!140 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x50440000) #x53160500
      #x00000007))
  (define-fun k!124 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-0.L2%13%d.1.1!140 (k!124 x!0)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-3.L2%8%d.0.1!138 (k!128 x!0)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!131 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1!141 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (and (= x!0 #x02d20500) (= x!1 #x50440000)))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.1.1.0.1!141 (k!132 x!0) (k!131 x!1)))
  (define-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1!142 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x50440000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1!144 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x02d20500))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m-0.L2%8%d.1.1.1.1!143 (k!132 x!0) (k!131 x!1)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.0.1!144 (k!130 x!0)))
  (define-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!123 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1!137 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x50440000) #x53160500
      #x00000006))
  (define-fun k!122 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x36022de3) #x02
    (ite (= x!0 #x00008603) #x50
    (ite (= x!0 #x36022de2) #xd2
    (ite (= x!0 #x00008602) #x44
    (ite (= x!0 #x36022de1) #x05
      #x00))))))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1!136 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x50440000) #x53160500
      #x00000005))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1!135 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x50440000))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-0.L2%13%d.0.1!135 (k!124 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%8%d.1.1.1.1!134 (k!130 x!0) (k!129 x!1)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-3.L2%8%d.1.1!136 (k!128 x!0)))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%tmpvar-5.L2%8%d.2.1.1!137 (k!123 x!0)))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-5.L2%8%d.2.0.1!142 (k!123 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0f41e1fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!122))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd7020838)
  (define-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32)
    #x00020000)
  (define-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32)
    #x20020684)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd702083b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0f41e1ff)
  (define-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32)
    #x20020684)
  (define-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32)
    #x20020684)
  (define-fun input.spec-%var-y-0 () (_ BitVec 32)
    #x00000470)
  (define-fun input.dst.llvm-%y () (_ BitVec 32)
    #x00000470)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0f41e1fc)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x20020214)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x20020214)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd7020838)
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1!136 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x20020214) true
      false))
  (define-fun k!124 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1!135 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000470) #x20020684
      #x00000005))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-0.L2%13%d.1.1!135 (k!124 x!0)))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1!134 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000470) true
      false))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-0.L2%13%d.0.1!134 (k!124 x!0)))
  (define-fun k!128 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!122 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd702083a) #x02
    (ite (= x!0 #x0f41e1fc) #x70
    (ite (= x!0 #x0f41e1ff) #x00
    (ite (= x!0 #x0f41e1fe) #x00
    (ite (= x!0 #xd7020839) #x02
    (ite (= x!0 #xd702083b) #x20
    (ite (= x!0 #xd7020838) #x14
      #x04))))))))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1!141 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000470) #x20020684
      #x00000006))
  (define-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1!138 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000470) true
      false))
  (define-fun k!132 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x20020214) #x20020214
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1!140 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x20020214) (= x!1 #x00000470)) true
      false))
  (define-fun k!131 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.1.1.0.1!140 (k!132 x!0) (k!131 x!1)))
  (define-fun k!123 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%tmpvar-5.L2%8%d.2.1.1!141 (k!123 x!0)))
  (define-fun k!129 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1!144 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000470) true
      false))
  (define-fun k!130 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x20020214) #x20020214
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1!133 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x20020214) (= x!1 #x00000470)) #x20020684
      #x00000004))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%8%d.1.1.1.1!133 (k!130 x!0) (k!129 x!1)))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-5.L2%8%d.2.0.1!144 (k!123 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1!137 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x20020214) (= x!1 #x00000470)) true
      false))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.1.1.0.1!137 (k!130 x!0) (k!129 x!1)))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1!142 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x20020214) (= x!1 #x00000470)) #x20020684
      #x00000007))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.0.1!136 (k!130 x!0)))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1!139 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x20020214) true
      false))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.0.1!139 (k!132 x!0)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-3.L2%8%d.0.1!138 (k!128 x!0)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1!143 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000470) #x20020684
      #x00000008))
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m-0.L2%8%d.1.1.1.1!142 (k!132 x!0) (k!131 x!1)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-3.L2%8%d.1.1!143 (k!128 x!0)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675918/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x207 (ite $x21 $x25 false)))
 (let ((?x214 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x214 (_ bv1 32))))
 (let (($x215 (= ?x214 (_ bv0 32))))
 (let (($x371 (or $x215 $x219)))
 (let ((?x10 (ite $x21 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x10 (_ bv1 32))))
 (let (($x379 (and $x136 $x371)))
 (let (($x172 (= ?x10 (_ bv0 32))))
 (let (($x140 (or $x172 $x379)))
 (let (($x230 (or false $x140)))
 (let (($x396 (= $x230 true)))
 (let (($x397 (= $x396 true)))
 (let (($x351 (forall ((input.ind-%var1999X (_ BitVec 32)) (input.ind-%var2001X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var2001X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x310 (= input.ind-%var1999X input.spec-%var-x-0)))
 (let ((?x346 (ite $x310 ?x190 (_ bv0 32))))
 (let ((?x265 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var1999X input.ind-%var2001X)))
 (let (($x211 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1999X input.ind-%var2001X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1999X)))
 (=> (and $x236 $x211) (= ?x265 ?x346)))))))))))
 ))
 (let (($x269 (forall ((input.ind-%var1999X (_ BitVec 32)) (input.ind-%var2000X (_ BitVec 32)) )(let (($x158 (= input.ind-%var2000X input.spec-%var-y-0)))
 (let (($x310 (= input.ind-%var1999X input.spec-%var-x-0)))
 (let (($x300 (ite $x310 $x158 false)))
 (let (($x211 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1999X input.ind-%var2000X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1999X)))
 (=> $x236 (= $x211 $x300))))))))
 ))
 (let (($x155 (forall ((input.ind-%var1998X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1998X input.spec-%var-x-0)))
 (let (($x146 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1998X)))
 (= $x146 $x257))))
 ))
 (let (($x378 (and (and $x155 $x269) $x351)))
 (let (($x327 (= $x378 true)))
 (let (($x362 (forall ((input.ind-%var1983X (_ BitVec 32)) (input.ind-%var1985X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1985X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x310 (= input.ind-%var1983X input.spec-%var-x-0)))
 (let ((?x346 (ite $x310 ?x190 (_ bv0 32))))
 (let ((?x334 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var1983X input.ind-%var1985X)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var1983X input.ind-%var1985X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1983X)))
 (=> (and $x326 $x290) (= ?x334 ?x346)))))))))))
 ))
 (let (($x316 (forall ((input.ind-%var1983X (_ BitVec 32)) (input.ind-%var1984X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1984X input.spec-%var-y-0)))
 (let (($x310 (= input.ind-%var1983X input.spec-%var-x-0)))
 (let (($x300 (ite $x310 $x158 false)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var1983X input.ind-%var1984X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1983X)))
 (=> $x326 (= $x290 $x300))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1982X input.spec-%var-x-0)))
 (let (($x221 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1982X)))
 (= $x221 $x257))))
 ))
 (let (($x376 (and (and $x289 $x316) $x362)))
 (let (($x377 (= $x376 true)))
 (let (($x241 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1969X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let ((?x209 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var1969X)))
 (let (($x160 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var1969X)))
 (=> $x160 (= ?x209 ?x190))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1968X input.spec-%var-y-0)))
 (let (($x160 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var1968X)))
 (= $x160 $x158))))
 ))
 (let (($x260 (and $x204 $x241)))
 (let (($x268 (= $x260 true)))
 (let (($x144 (forall ((input.ind-%var1960X (_ BitVec 32)) )(let (($x385 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var1960X)))
 (= $x385 false)))
 ))
 (let (($x394 (forall ((input.ind-%var1961X (_ BitVec 32)) )(let (($x385 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var1961X)))
 (=> $x385 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var1961X) (_ bv0 32)))))
 ))
 (let (($x159 (and $x394 $x144)))
 (let (($x154 (= $x159 true)))
 (let (($x368 (forall ((input.ind-%var1953X (_ BitVec 32)) (input.ind-%var1954X (_ BitVec 32)) )(let (($x330 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1953X)))
 (=> $x330 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var1953X input.ind-%var1954X) false))))
 ))
 (let (($x348 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x299 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1952X)))
 (= $x299 false)))
 ))
 (let (($x340 (forall ((input.ind-%var1953X (_ BitVec 32)) (input.ind-%var1955X (_ BitVec 32)) )(let (($x323 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var1953X input.ind-%var1955X)))
 (let (($x330 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1953X)))
 (=> (and $x330 $x323) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var1953X input.ind-%var1955X) (_ bv0 32))))))
 ))
 (let (($x381 (and (and $x340 $x348) $x368)))
 (let (($x373 (= $x381 true)))
 (let (($x284 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1942X input.spec-%var-y-0)))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x165 (ite $x21 $x158 false)))
 (let (($x245 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var1942X)))
 (= $x245 $x165))))))
 ))
 (let (($x272 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1943X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x184 (ite $x21 ?x190 (_ bv0 32))))
 (let ((?x252 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var1943X)))
 (let (($x245 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var1943X)))
 (=> $x245 (= ?x252 ?x184))))))))))
 ))
 (let (($x288 (and $x272 $x284)))
 (let (($x294 (= $x288 true)))
 (let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x25 ?x37 (_ bv0 32))))
 (let ((?x51 (ite $x21 ?x55 (_ bv0 32))))
 (let (($x226 (= input.spec-%tmpvar-6.L2%13%d.2 ?x51)))
 (let (($x218 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x232 (=> $x218 $x226)))
 (let (($x222 (= $x218 $x219)))
 (let (($x7 (= false false)))
 (let (($x203 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x217 (=> $x203 $x7)))
 (let (($x216 (= $x203 $x215)))
 (let (($x237 (and (and (and $x216 $x217) $x222) $x232)))
 (let (($x239 (= $x237 true)))
 (let (($x187 (forall ((input.ind-%var1925X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1925X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x184 (ite $x21 ?x190 (_ bv0 32))))
 (let ((?x177 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var1925X)))
 (let (($x150 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var1925X)))
 (let (($x135 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x135 $x150) (= ?x177 ?x184)))))))))))
 ))
 (let (($x169 (forall ((input.ind-%var1924X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1924X input.spec-%var-y-0)))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x165 (ite $x21 $x158 false)))
 (let (($x150 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var1924X)))
 (let (($x135 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x135 (= $x150 $x165))))))))
 ))
 (let (($x137 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x142 (= $x137 $x172)))
 (let (($x138 (=> $x137 $x7)))
 (let (($x135 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x171 (= $x135 $x136)))
 (let (($x193 (and (and (and (and $x171 $x138) $x142) $x169) $x187)))
 (let (($x194 (= $x193 true)))
 (let (($x129 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x122 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x125 (= $x122 true)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x124 (concat ?x113 (concat ?x110 ?x103)))))
 (let (($x117 (= ?x120 input.dst.llvm-%y)))
 (let (($x118 (= $x117 true)))
 (let (($x116 (= $x118 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x108 (concat ?x96 (concat ?x92 ?x59)))))
 (let (($x105 (= ?x109 input.dst.llvm-%x)))
 (let (($x106 (= $x105 true)))
 (let (($x101 (= $x106 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x53)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x82)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x73 $x6)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x39 $x13)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x11 $x42)))
 (let (($x71 (not $x72)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x49 $x56)))
 (let (($x78 (and (not $x45) $x71)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x70 $x17)))
 (let (($x41 (not $x81)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x40 $x33)))
 (let (($x46 (and (not $x68) $x41)))
 (let (($x26 (and (and (and (and (and (and $x46 $x78) $x80) $x83) $x28) $x66) $x89)))
 (let (($x87 (and $x26 $x18)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x31 (or false (or false (and (and true (or $x12 $x23)) (or $x38 $x15))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x9 (and $x85 $x87)))
 (let (($x75 (= $x9 true)))
 (let (($x88 (= $x75 true)))
 (let (($x90 (= $x88 true)))
 (let (($x102 (and $x90 $x101)))
 (let (($x119 (and $x102 $x116)))
 (let (($x128 (and $x119 $x127)))
 (let (($x133 (and $x128 $x132)))
 (let (($x197 (and $x133 $x194)))
 (let (($x240 (and $x197 $x239)))
 (let (($x295 (and $x240 $x294)))
 (let (($x380 (and $x295 $x373)))
 (let (($x157 (and $x380 $x154)))
 (let (($x264 (and $x157 $x268)))
 (let (($x347 (and $x264 $x377)))
 (let (($x328 (and $x347 $x327)))
 (let (($x48 (= ?x37 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x336 (and $x48 $x328)))
 (let (($x356 (and $x7 $x336)))
 (let (($x29 (= input.spec-%var-m2-0.L2%18%bbentry ?x51)))
 (let (($x364 (and $x29 $x356)))
 (let (($x370 (and $x7 $x364)))
 (let (($x398 (=> $x370 $x397)))
 (not $x398))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x207 (ite $x21 $x25 false)))
 (let ((?x214 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x214 (_ bv1 32))))
 (let (($x215 (= ?x214 (_ bv0 32))))
 (let (($x371 (or $x215 $x219)))
 (let ((?x10 (ite $x21 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x10 (_ bv1 32))))
 (let (($x379 (and $x136 $x371)))
 (let (($x172 (= ?x10 (_ bv0 32))))
 (let (($x140 (or $x172 $x379)))
 (let (($x230 (or false $x140)))
 (let (($x396 (= $x230 true)))
 (let (($x397 (= $x396 true)))
 (let (($x351 (forall ((input.ind-%var1999X (_ BitVec 32)) (input.ind-%var2001X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var2001X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x310 (= input.ind-%var1999X input.spec-%var-x-0)))
 (let ((?x346 (ite $x310 ?x190 (_ bv0 32))))
 (let ((?x265 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var1999X input.ind-%var2001X)))
 (let (($x211 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1999X input.ind-%var2001X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1999X)))
 (=> (and $x236 $x211) (= ?x265 ?x346)))))))))))
 ))
 (let (($x269 (forall ((input.ind-%var1999X (_ BitVec 32)) (input.ind-%var2000X (_ BitVec 32)) )(let (($x158 (= input.ind-%var2000X input.spec-%var-y-0)))
 (let (($x310 (= input.ind-%var1999X input.spec-%var-x-0)))
 (let (($x300 (ite $x310 $x158 false)))
 (let (($x211 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1999X input.ind-%var2000X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1999X)))
 (=> $x236 (= $x211 $x300))))))))
 ))
 (let (($x155 (forall ((input.ind-%var1998X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1998X input.spec-%var-x-0)))
 (let (($x146 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1998X)))
 (= $x146 $x257))))
 ))
 (let (($x378 (and (and $x155 $x269) $x351)))
 (let (($x327 (= $x378 true)))
 (let (($x362 (forall ((input.ind-%var1983X (_ BitVec 32)) (input.ind-%var1985X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1985X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x310 (= input.ind-%var1983X input.spec-%var-x-0)))
 (let ((?x346 (ite $x310 ?x190 (_ bv0 32))))
 (let ((?x334 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var1983X input.ind-%var1985X)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var1983X input.ind-%var1985X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1983X)))
 (=> (and $x326 $x290) (= ?x334 ?x346)))))))))))
 ))
 (let (($x316 (forall ((input.ind-%var1983X (_ BitVec 32)) (input.ind-%var1984X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1984X input.spec-%var-y-0)))
 (let (($x310 (= input.ind-%var1983X input.spec-%var-x-0)))
 (let (($x300 (ite $x310 $x158 false)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var1983X input.ind-%var1984X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1983X)))
 (=> $x326 (= $x290 $x300))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1982X input.spec-%var-x-0)))
 (let (($x221 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1982X)))
 (= $x221 $x257))))
 ))
 (let (($x376 (and (and $x289 $x316) $x362)))
 (let (($x377 (= $x376 true)))
 (let (($x241 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1969X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let ((?x209 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var1969X)))
 (let (($x160 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var1969X)))
 (=> $x160 (= ?x209 ?x190))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1968X input.spec-%var-y-0)))
 (let (($x160 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var1968X)))
 (= $x160 $x158))))
 ))
 (let (($x260 (and $x204 $x241)))
 (let (($x268 (= $x260 true)))
 (let (($x144 (forall ((input.ind-%var1960X (_ BitVec 32)) )(let (($x385 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var1960X)))
 (= $x385 false)))
 ))
 (let (($x394 (forall ((input.ind-%var1961X (_ BitVec 32)) )(let (($x385 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var1961X)))
 (=> $x385 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var1961X) (_ bv0 32)))))
 ))
 (let (($x159 (and $x394 $x144)))
 (let (($x154 (= $x159 true)))
 (let (($x368 (forall ((input.ind-%var1953X (_ BitVec 32)) (input.ind-%var1954X (_ BitVec 32)) )(let (($x330 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1953X)))
 (=> $x330 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var1953X input.ind-%var1954X) false))))
 ))
 (let (($x348 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x299 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1952X)))
 (= $x299 false)))
 ))
 (let (($x340 (forall ((input.ind-%var1953X (_ BitVec 32)) (input.ind-%var1955X (_ BitVec 32)) )(let (($x323 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var1953X input.ind-%var1955X)))
 (let (($x330 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1953X)))
 (=> (and $x330 $x323) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var1953X input.ind-%var1955X) (_ bv0 32))))))
 ))
 (let (($x381 (and (and $x340 $x348) $x368)))
 (let (($x373 (= $x381 true)))
 (let (($x284 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1942X input.spec-%var-y-0)))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x165 (ite $x21 $x158 false)))
 (let (($x245 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var1942X)))
 (= $x245 $x165))))))
 ))
 (let (($x272 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1943X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x184 (ite $x21 ?x190 (_ bv0 32))))
 (let ((?x252 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var1943X)))
 (let (($x245 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var1943X)))
 (=> $x245 (= ?x252 ?x184))))))))))
 ))
 (let (($x288 (and $x272 $x284)))
 (let (($x294 (= $x288 true)))
 (let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x25 ?x37 (_ bv0 32))))
 (let ((?x51 (ite $x21 ?x55 (_ bv0 32))))
 (let (($x226 (= input.spec-%tmpvar-6.L2%13%d.2 ?x51)))
 (let (($x218 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x232 (=> $x218 $x226)))
 (let (($x222 (= $x218 $x219)))
 (let (($x7 (= false false)))
 (let (($x203 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x217 (=> $x203 $x7)))
 (let (($x216 (= $x203 $x215)))
 (let (($x237 (and (and (and $x216 $x217) $x222) $x232)))
 (let (($x239 (= $x237 true)))
 (let (($x187 (forall ((input.ind-%var1925X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1925X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x184 (ite $x21 ?x190 (_ bv0 32))))
 (let ((?x177 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var1925X)))
 (let (($x150 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var1925X)))
 (let (($x135 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x135 $x150) (= ?x177 ?x184)))))))))))
 ))
 (let (($x169 (forall ((input.ind-%var1924X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1924X input.spec-%var-y-0)))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x165 (ite $x21 $x158 false)))
 (let (($x150 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var1924X)))
 (let (($x135 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x135 (= $x150 $x165))))))))
 ))
 (let (($x137 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x142 (= $x137 $x172)))
 (let (($x138 (=> $x137 $x7)))
 (let (($x135 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x171 (= $x135 $x136)))
 (let (($x193 (and (and (and (and $x171 $x138) $x142) $x169) $x187)))
 (let (($x194 (= $x193 true)))
 (let (($x129 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x122 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x125 (= $x122 true)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x124 (concat ?x113 (concat ?x110 ?x103)))))
 (let (($x117 (= ?x120 input.dst.llvm-%y)))
 (let (($x118 (= $x117 true)))
 (let (($x116 (= $x118 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x108 (concat ?x96 (concat ?x92 ?x59)))))
 (let (($x105 (= ?x109 input.dst.llvm-%x)))
 (let (($x106 (= $x105 true)))
 (let (($x101 (= $x106 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x53)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x82)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x73 $x6)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x39 $x13)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x11 $x42)))
 (let (($x71 (not $x72)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x49 $x56)))
 (let (($x78 (and (not $x45) $x71)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x70 $x17)))
 (let (($x41 (not $x81)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x40 $x33)))
 (let (($x46 (and (not $x68) $x41)))
 (let (($x26 (and (and (and (and (and (and $x46 $x78) $x80) $x83) $x28) $x66) $x89)))
 (let (($x87 (and $x26 $x18)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x31 (or false (or false (and (and true (or $x12 $x23)) (or $x38 $x15))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x9 (and $x85 $x87)))
 (let (($x75 (= $x9 true)))
 (let (($x88 (= $x75 true)))
 (let (($x90 (= $x88 true)))
 (let (($x102 (and $x90 $x101)))
 (let (($x119 (and $x102 $x116)))
 (let (($x128 (and $x119 $x127)))
 (let (($x133 (and $x128 $x132)))
 (let (($x197 (and $x133 $x194)))
 (let (($x240 (and $x197 $x239)))
 (let (($x295 (and $x240 $x294)))
 (let (($x380 (and $x295 $x373)))
 (let (($x157 (and $x380 $x154)))
 (let (($x264 (and $x157 $x268)))
 (let (($x347 (and $x264 $x377)))
 (let (($x328 (and $x347 $x327)))
 (let (($x48 (= ?x37 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x336 (and $x48 $x328)))
 (let (($x356 (and $x7 $x336)))
 (let (($x29 (= input.spec-%var-m2-0.L2%18%bbentry ?x51)))
 (let (($x364 (and $x29 $x356)))
 (let (($x370 (and $x7 $x364)))
 (let (($x398 (=> $x370 $x397)))
 (not $x398))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675918/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x21 (ite $x38 ?x34 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x48 (ite $x35 ?x21 (_ bv0 32))))
 (let ((?x355 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x200 (= ?x355 ?x48)))
 (let (($x247 (= $x200 true)))
 (let (($x242 (= $x247 true)))
 (let (($x246 (forall ((input.ind-%var2181X (_ BitVec 32)) (input.ind-%var2183X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x185 (= input.ind-%var2183X input.spec-%var-y-0)))
 (let ((?x222 (ite $x185 ?x34 (_ bv0 32))))
 (let (($x24 (= input.ind-%var2181X input.spec-%var-x-0)))
 (let ((?x329 (ite $x24 ?x222 (_ bv0 32))))
 (let ((?x390 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2181X input.ind-%var2183X)))
 (let (($x201 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2181X input.ind-%var2183X)))
 (let (($x250 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2181X)))
 (=> (and $x250 $x201) (= ?x390 ?x329)))))))))))
 ))
 (let (($x366 (forall ((input.ind-%var2181X (_ BitVec 32)) (input.ind-%var2182X (_ BitVec 32)) )(let (($x185 (= input.ind-%var2182X input.spec-%var-y-0)))
 (let (($x24 (= input.ind-%var2181X input.spec-%var-x-0)))
 (let (($x341 (ite $x24 $x185 false)))
 (let (($x201 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2181X input.ind-%var2182X)))
 (let (($x250 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2181X)))
 (=> $x250 (= $x201 $x341))))))))
 ))
 (let (($x181 (forall ((input.ind-%var2180X (_ BitVec 32)) )(let (($x255 (= input.ind-%var2180X input.spec-%var-x-0)))
 (let (($x292 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2180X)))
 (= $x292 $x255))))
 ))
 (let (($x374 (and (and $x181 $x366) $x246)))
 (let (($x277 (= $x374 true)))
 (let (($x224 (forall ((input.ind-%var2165X (_ BitVec 32)) (input.ind-%var2167X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x185 (= input.ind-%var2167X input.spec-%var-y-0)))
 (let ((?x222 (ite $x185 ?x34 (_ bv0 32))))
 (let (($x24 (= input.ind-%var2165X input.spec-%var-x-0)))
 (let ((?x329 (ite $x24 ?x222 (_ bv0 32))))
 (let ((?x317 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2165X input.ind-%var2167X)))
 (let (($x387 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2165X input.ind-%var2167X)))
 (let (($x321 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2165X)))
 (=> (and $x321 $x387) (= ?x317 ?x329)))))))))))
 ))
 (let (($x196 (forall ((input.ind-%var2165X (_ BitVec 32)) (input.ind-%var2166X (_ BitVec 32)) )(let (($x185 (= input.ind-%var2166X input.spec-%var-y-0)))
 (let (($x24 (= input.ind-%var2165X input.spec-%var-x-0)))
 (let (($x341 (ite $x24 $x185 false)))
 (let (($x387 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2165X input.ind-%var2166X)))
 (let (($x321 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2165X)))
 (=> $x321 (= $x387 $x341))))))))
 ))
 (let (($x256 (forall ((input.ind-%var2164X (_ BitVec 32)) )(let (($x255 (= input.ind-%var2164X input.spec-%var-x-0)))
 (let (($x253 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2164X)))
 (= $x253 $x255))))
 ))
 (let (($x205 (and (and $x256 $x196) $x224)))
 (let (($x213 (= $x205 true)))
 (let (($x176 (forall ((input.ind-%var2151X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x185 (= input.ind-%var2151X input.spec-%var-y-0)))
 (let ((?x222 (ite $x185 ?x34 (_ bv0 32))))
 (let ((?x210 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2151X)))
 (let (($x178 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2151X)))
 (=> $x178 (= ?x210 ?x222))))))))
 ))
 (let (($x324 (forall ((input.ind-%var2150X (_ BitVec 32)) )(let (($x185 (= input.ind-%var2150X input.spec-%var-y-0)))
 (let (($x178 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2150X)))
 (= $x178 $x185))))
 ))
 (let (($x143 (and $x324 $x176)))
 (let (($x152 (= $x143 true)))
 (let (($x399 (forall ((input.ind-%var2143X (_ BitVec 32)) )(let (($x378 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2143X)))
 (=> $x378 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2143X) (_ bv0 32)))))
 ))
 (let (($x356 (forall ((input.ind-%var2142X (_ BitVec 32)) )(let (($x378 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2142X)))
 (= $x378 false)))
 ))
 (let (($x77 (and $x356 $x399)))
 (let (($x36 (= $x77 true)))
 (let (($x269 (forall ((input.ind-%var2135X (_ BitVec 32)) (input.ind-%var2137X (_ BitVec 32)) )(let (($x315 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2135X input.ind-%var2137X)))
 (let (($x346 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2135X)))
 (=> (and $x346 $x315) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2135X input.ind-%var2137X) (_ bv0 32))))))
 ))
 (let (($x361 (forall ((input.ind-%var2135X (_ BitVec 32)) (input.ind-%var2136X (_ BitVec 32)) )(let (($x346 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2135X)))
 (=> $x346 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2135X input.ind-%var2136X) false))))
 ))
 (let (($x258 (forall ((input.ind-%var2134X (_ BitVec 32)) )(let (($x268 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2134X)))
 (= $x268 false)))
 ))
 (let (($x311 (and (and $x258 $x361) $x269)))
 (let (($x265 (= $x311 true)))
 (let (($x204 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x185 (= input.ind-%var2125X input.spec-%var-y-0)))
 (let ((?x222 (ite $x185 ?x34 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x233 (ite $x35 ?x222 (_ bv0 32))))
 (let ((?x393 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2125X)))
 (let (($x384 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2125X)))
 (=> $x384 (= ?x393 ?x233))))))))))
 ))
 (let (($x380 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x185 (= input.ind-%var2124X input.spec-%var-y-0)))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x191 (ite $x35 $x185 false)))
 (let (($x384 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2124X)))
 (= $x384 $x191))))))
 ))
 (let (($x209 (and $x380 $x204)))
 (let (($x227 (= $x209 true)))
 (let (($x323 (= input.spec-%tmpvar-6.L2%13%d.2 ?x48)))
 (let (($x295 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x337 (=> $x295 $x323)))
 (let (($x45 (ite $x35 $x38 false)))
 (let ((?x50 (ite $x45 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x50 (_ bv1 32))))
 (let (($x308 (= $x295 $x86)))
 (let (($x55 (= false false)))
 (let (($x283 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x294 (=> $x283 $x55)))
 (let (($x284 (= ?x50 (_ bv0 32))))
 (let (($x288 (= $x283 $x284)))
 (let (($x338 (and (and (and $x288 $x294) $x308) $x337)))
 (let (($x340 (= $x338 true)))
 (let (($x237 (forall ((input.ind-%var2107X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x185 (= input.ind-%var2107X input.spec-%var-y-0)))
 (let ((?x222 (ite $x185 ?x34 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x233 (ite $x35 ?x222 (_ bv0 32))))
 (let ((?x214 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2107X)))
 (let (($x169 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2107X)))
 (let (($x142 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x142 $x169) (= ?x214 ?x233)))))))))))
 ))
 (let (($x194 (forall ((input.ind-%var2106X (_ BitVec 32)) )(let (($x185 (= input.ind-%var2106X input.spec-%var-y-0)))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x191 (ite $x35 $x185 false)))
 (let (($x169 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2106X)))
 (let (($x142 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x142 (= $x169 $x191))))))))
 ))
 (let ((?x37 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x37 (_ bv0 32))))
 (let (($x149 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x165 (= $x149 $x158)))
 (let (($x150 (=> $x149 $x55)))
 (let (($x29 (bvuge ?x37 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x189 (= $x142 $x29)))
 (let (($x252 (and (and (and (and $x189 $x150) $x165) $x194) $x237)))
 (let (($x267 (= $x252 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x112 (concat ?x102 (concat ?x92 ?x44)))))
 (let (($x137 (= ?x113 input.dst.llvm-%x)))
 (let (($x7 (= $x137 true)))
 (let (($x138 (= $x7 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x122 (concat ?x118 (concat ?x114 ?x103)))))
 (let (($x135 (= ?x125 input.dst.llvm-%y)))
 (let (($x10 (= $x135 true)))
 (let (($x136 (= $x10 true)))
 (let (($x126 (= input.dst.llvm-%y ?x125)))
 (let (($x107 (= input.dst.llvm-%x ?x113)))
 (let (($x127 (and $x107 $x126)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x66)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x59)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x84 $x85)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x46 $x91)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x54 $x56)))
 (let (($x72 (not $x6)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x104 $x52)))
 (let (($x9 (and (not $x13) $x72)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x39 $x93)))
 (let (($x60 (not $x26)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x89 $x80)))
 (let (($x28 (and (not $x94) $x60)))
 (let (($x32 (and (and (and (and (and (and $x28 $x9) $x58) $x49) $x73) $x42) $x65)))
 (let (($x53 (and $x32 $x61)))
 (let (($x8 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x87 (or false (or false (and (and true (or $x19 $x68)) (or $x105 $x5))))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x130 (and (and (and $x108 $x8) $x53) $x127)))
 (let (($x109 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x131 (and $x109 $x130)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x171 (and $x134 $x136)))
 (let (($x188 (and $x171 $x138)))
 (let (($x271 (and $x188 $x267)))
 (let (($x299 (and $x271 $x340)))
 (let (($x228 (and $x299 $x227)))
 (let (($x335 (and $x228 $x265)))
 (let (($x100 (and $x335 $x36)))
 (let (($x179 (and $x100 $x152)))
 (let (($x220 (and $x179 $x213)))
 (let (($x309 (and $x220 $x277)))
 (let (($x23 (and $x29 $x86)))
 (let (($x162 (and $x23 $x309)))
 (let (($x121 (= ?x34 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x235 (and $x121 $x162)))
 (let (($x293 (and $x55 $x235)))
 (let (($x43 (= input.spec-%var-m2-0.L2%18%bbentry ?x48)))
 (let (($x332 (and $x43 $x293)))
 (let (($x349 (and $x55 $x332)))
 (let (($x243 (=> $x349 $x242)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x21 (ite $x38 ?x34 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x48 (ite $x35 ?x21 (_ bv0 32))))
 (let ((?x355 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x200 (= ?x355 ?x48)))
 (let (($x247 (= $x200 true)))
 (let (($x242 (= $x247 true)))
 (let (($x246 (forall ((input.ind-%var2181X (_ BitVec 32)) (input.ind-%var2183X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x185 (= input.ind-%var2183X input.spec-%var-y-0)))
 (let ((?x222 (ite $x185 ?x34 (_ bv0 32))))
 (let (($x24 (= input.ind-%var2181X input.spec-%var-x-0)))
 (let ((?x329 (ite $x24 ?x222 (_ bv0 32))))
 (let ((?x390 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2181X input.ind-%var2183X)))
 (let (($x201 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2181X input.ind-%var2183X)))
 (let (($x250 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2181X)))
 (=> (and $x250 $x201) (= ?x390 ?x329)))))))))))
 ))
 (let (($x366 (forall ((input.ind-%var2181X (_ BitVec 32)) (input.ind-%var2182X (_ BitVec 32)) )(let (($x185 (= input.ind-%var2182X input.spec-%var-y-0)))
 (let (($x24 (= input.ind-%var2181X input.spec-%var-x-0)))
 (let (($x341 (ite $x24 $x185 false)))
 (let (($x201 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2181X input.ind-%var2182X)))
 (let (($x250 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2181X)))
 (=> $x250 (= $x201 $x341))))))))
 ))
 (let (($x181 (forall ((input.ind-%var2180X (_ BitVec 32)) )(let (($x255 (= input.ind-%var2180X input.spec-%var-x-0)))
 (let (($x292 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2180X)))
 (= $x292 $x255))))
 ))
 (let (($x374 (and (and $x181 $x366) $x246)))
 (let (($x277 (= $x374 true)))
 (let (($x224 (forall ((input.ind-%var2165X (_ BitVec 32)) (input.ind-%var2167X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x185 (= input.ind-%var2167X input.spec-%var-y-0)))
 (let ((?x222 (ite $x185 ?x34 (_ bv0 32))))
 (let (($x24 (= input.ind-%var2165X input.spec-%var-x-0)))
 (let ((?x329 (ite $x24 ?x222 (_ bv0 32))))
 (let ((?x317 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2165X input.ind-%var2167X)))
 (let (($x387 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2165X input.ind-%var2167X)))
 (let (($x321 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2165X)))
 (=> (and $x321 $x387) (= ?x317 ?x329)))))))))))
 ))
 (let (($x196 (forall ((input.ind-%var2165X (_ BitVec 32)) (input.ind-%var2166X (_ BitVec 32)) )(let (($x185 (= input.ind-%var2166X input.spec-%var-y-0)))
 (let (($x24 (= input.ind-%var2165X input.spec-%var-x-0)))
 (let (($x341 (ite $x24 $x185 false)))
 (let (($x387 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2165X input.ind-%var2166X)))
 (let (($x321 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2165X)))
 (=> $x321 (= $x387 $x341))))))))
 ))
 (let (($x256 (forall ((input.ind-%var2164X (_ BitVec 32)) )(let (($x255 (= input.ind-%var2164X input.spec-%var-x-0)))
 (let (($x253 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2164X)))
 (= $x253 $x255))))
 ))
 (let (($x205 (and (and $x256 $x196) $x224)))
 (let (($x213 (= $x205 true)))
 (let (($x176 (forall ((input.ind-%var2151X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x185 (= input.ind-%var2151X input.spec-%var-y-0)))
 (let ((?x222 (ite $x185 ?x34 (_ bv0 32))))
 (let ((?x210 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2151X)))
 (let (($x178 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2151X)))
 (=> $x178 (= ?x210 ?x222))))))))
 ))
 (let (($x324 (forall ((input.ind-%var2150X (_ BitVec 32)) )(let (($x185 (= input.ind-%var2150X input.spec-%var-y-0)))
 (let (($x178 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2150X)))
 (= $x178 $x185))))
 ))
 (let (($x143 (and $x324 $x176)))
 (let (($x152 (= $x143 true)))
 (let (($x399 (forall ((input.ind-%var2143X (_ BitVec 32)) )(let (($x378 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2143X)))
 (=> $x378 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2143X) (_ bv0 32)))))
 ))
 (let (($x356 (forall ((input.ind-%var2142X (_ BitVec 32)) )(let (($x378 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2142X)))
 (= $x378 false)))
 ))
 (let (($x77 (and $x356 $x399)))
 (let (($x36 (= $x77 true)))
 (let (($x269 (forall ((input.ind-%var2135X (_ BitVec 32)) (input.ind-%var2137X (_ BitVec 32)) )(let (($x315 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2135X input.ind-%var2137X)))
 (let (($x346 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2135X)))
 (=> (and $x346 $x315) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2135X input.ind-%var2137X) (_ bv0 32))))))
 ))
 (let (($x361 (forall ((input.ind-%var2135X (_ BitVec 32)) (input.ind-%var2136X (_ BitVec 32)) )(let (($x346 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2135X)))
 (=> $x346 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2135X input.ind-%var2136X) false))))
 ))
 (let (($x258 (forall ((input.ind-%var2134X (_ BitVec 32)) )(let (($x268 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2134X)))
 (= $x268 false)))
 ))
 (let (($x311 (and (and $x258 $x361) $x269)))
 (let (($x265 (= $x311 true)))
 (let (($x204 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x185 (= input.ind-%var2125X input.spec-%var-y-0)))
 (let ((?x222 (ite $x185 ?x34 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x233 (ite $x35 ?x222 (_ bv0 32))))
 (let ((?x393 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2125X)))
 (let (($x384 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2125X)))
 (=> $x384 (= ?x393 ?x233))))))))))
 ))
 (let (($x380 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x185 (= input.ind-%var2124X input.spec-%var-y-0)))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x191 (ite $x35 $x185 false)))
 (let (($x384 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2124X)))
 (= $x384 $x191))))))
 ))
 (let (($x209 (and $x380 $x204)))
 (let (($x227 (= $x209 true)))
 (let (($x323 (= input.spec-%tmpvar-6.L2%13%d.2 ?x48)))
 (let (($x295 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x337 (=> $x295 $x323)))
 (let (($x45 (ite $x35 $x38 false)))
 (let ((?x50 (ite $x45 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x50 (_ bv1 32))))
 (let (($x308 (= $x295 $x86)))
 (let (($x55 (= false false)))
 (let (($x283 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x294 (=> $x283 $x55)))
 (let (($x284 (= ?x50 (_ bv0 32))))
 (let (($x288 (= $x283 $x284)))
 (let (($x338 (and (and (and $x288 $x294) $x308) $x337)))
 (let (($x340 (= $x338 true)))
 (let (($x237 (forall ((input.ind-%var2107X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x185 (= input.ind-%var2107X input.spec-%var-y-0)))
 (let ((?x222 (ite $x185 ?x34 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x233 (ite $x35 ?x222 (_ bv0 32))))
 (let ((?x214 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2107X)))
 (let (($x169 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2107X)))
 (let (($x142 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x142 $x169) (= ?x214 ?x233)))))))))))
 ))
 (let (($x194 (forall ((input.ind-%var2106X (_ BitVec 32)) )(let (($x185 (= input.ind-%var2106X input.spec-%var-y-0)))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x191 (ite $x35 $x185 false)))
 (let (($x169 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2106X)))
 (let (($x142 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x142 (= $x169 $x191))))))))
 ))
 (let ((?x37 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x37 (_ bv0 32))))
 (let (($x149 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x165 (= $x149 $x158)))
 (let (($x150 (=> $x149 $x55)))
 (let (($x29 (bvuge ?x37 (_ bv1 32))))
 (let (($x142 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x189 (= $x142 $x29)))
 (let (($x252 (and (and (and (and $x189 $x150) $x165) $x194) $x237)))
 (let (($x267 (= $x252 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x112 (concat ?x102 (concat ?x92 ?x44)))))
 (let (($x137 (= ?x113 input.dst.llvm-%x)))
 (let (($x7 (= $x137 true)))
 (let (($x138 (= $x7 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x122 (concat ?x118 (concat ?x114 ?x103)))))
 (let (($x135 (= ?x125 input.dst.llvm-%y)))
 (let (($x10 (= $x135 true)))
 (let (($x136 (= $x10 true)))
 (let (($x126 (= input.dst.llvm-%y ?x125)))
 (let (($x107 (= input.dst.llvm-%x ?x113)))
 (let (($x127 (and $x107 $x126)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x66)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x59)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x84 $x85)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x46 $x91)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x54 $x56)))
 (let (($x72 (not $x6)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x104 $x52)))
 (let (($x9 (and (not $x13) $x72)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x39 $x93)))
 (let (($x60 (not $x26)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x89 $x80)))
 (let (($x28 (and (not $x94) $x60)))
 (let (($x32 (and (and (and (and (and (and $x28 $x9) $x58) $x49) $x73) $x42) $x65)))
 (let (($x53 (and $x32 $x61)))
 (let (($x8 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x87 (or false (or false (and (and true (or $x19 $x68)) (or $x105 $x5))))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x130 (and (and (and $x108 $x8) $x53) $x127)))
 (let (($x109 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x131 (and $x109 $x130)))
 (let (($x132 (= $x131 true)))
 (let (($x133 (= $x132 true)))
 (let (($x134 (= $x133 true)))
 (let (($x171 (and $x134 $x136)))
 (let (($x188 (and $x171 $x138)))
 (let (($x271 (and $x188 $x267)))
 (let (($x299 (and $x271 $x340)))
 (let (($x228 (and $x299 $x227)))
 (let (($x335 (and $x228 $x265)))
 (let (($x100 (and $x335 $x36)))
 (let (($x179 (and $x100 $x152)))
 (let (($x220 (and $x179 $x213)))
 (let (($x309 (and $x220 $x277)))
 (let (($x23 (and $x29 $x86)))
 (let (($x162 (and $x23 $x309)))
 (let (($x121 (= ?x34 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x235 (and $x121 $x162)))
 (let (($x293 (and $x55 $x235)))
 (let (($x43 (= input.spec-%var-m2-0.L2%18%bbentry ?x48)))
 (let (($x332 (and $x43 $x293)))
 (let (($x349 (and $x55 $x332)))
 (let (($x243 (=> $x349 $x242)))
 (not $x243))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675918/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x262 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x298 (= input.spec-%var-y-0 ?x262)))
 (let (($x358 (= $x298 true)))
 (let (($x391 (= $x358 true)))
 (let (($x301 (forall ((input.ind-%var2357X (_ BitVec 32)) (input.ind-%var2359X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x252 (= input.ind-%var2359X input.spec-%var-y-0)))
 (let ((?x267 (ite $x252 ?x29 (_ bv0 32))))
 (let (($x260 (= input.ind-%var2357X input.spec-%var-x-0)))
 (let ((?x305 (ite $x260 ?x267 (_ bv0 32))))
 (let ((?x376 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2357X input.ind-%var2359X)))
 (let (($x202 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2357X input.ind-%var2359X)))
 (let (($x375 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2357X)))
 (=> (and $x375 $x202) (= ?x376 ?x305)))))))))))
 ))
 (let (($x290 (forall ((input.ind-%var2357X (_ BitVec 32)) (input.ind-%var2358X (_ BitVec 32)) )(let (($x252 (= input.ind-%var2358X input.spec-%var-y-0)))
 (let (($x260 (= input.ind-%var2357X input.spec-%var-x-0)))
 (let (($x347 (ite $x260 $x252 false)))
 (let (($x202 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2357X input.ind-%var2358X)))
 (let (($x375 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2357X)))
 (=> $x375 (= $x202 $x347))))))))
 ))
 (let (($x368 (forall ((input.ind-%var2356X (_ BitVec 32)) )(let (($x144 (= input.ind-%var2356X input.spec-%var-x-0)))
 (let (($x320 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2356X)))
 (= $x320 $x144))))
 ))
 (let (($x395 (and (and $x368 $x290) $x301)))
 (let (($x168 (= $x395 true)))
 (let (($x175 (forall ((input.ind-%var2341X (_ BitVec 32)) (input.ind-%var2343X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x252 (= input.ind-%var2343X input.spec-%var-y-0)))
 (let ((?x267 (ite $x252 ?x29 (_ bv0 32))))
 (let (($x260 (= input.ind-%var2341X input.spec-%var-x-0)))
 (let ((?x305 (ite $x260 ?x267 (_ bv0 32))))
 (let ((?x199 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2341X input.ind-%var2343X)))
 (let (($x161 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2341X input.ind-%var2343X)))
 (let (($x359 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2341X)))
 (=> (and $x359 $x161) (= ?x199 ?x305)))))))))))
 ))
 (let (($x382 (forall ((input.ind-%var2341X (_ BitVec 32)) (input.ind-%var2342X (_ BitVec 32)) )(let (($x252 (= input.ind-%var2342X input.spec-%var-y-0)))
 (let (($x260 (= input.ind-%var2341X input.spec-%var-x-0)))
 (let (($x347 (ite $x260 $x252 false)))
 (let (($x161 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2341X input.ind-%var2342X)))
 (let (($x359 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2341X)))
 (=> $x359 (= $x161 $x347))))))))
 ))
 (let (($x364 (forall ((input.ind-%var2340X (_ BitVec 32)) )(let (($x144 (= input.ind-%var2340X input.spec-%var-x-0)))
 (let (($x345 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2340X)))
 (= $x345 $x144))))
 ))
 (let (($x354 (and (and $x364 $x382) $x175)))
 (let (($x231 (= $x354 true)))
 (let (($x186 (forall ((input.ind-%var2327X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x252 (= input.ind-%var2327X input.spec-%var-y-0)))
 (let ((?x267 (ite $x252 ?x29 (_ bv0 32))))
 (let ((?x206 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2327X)))
 (let (($x394 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2327X)))
 (=> $x394 (= ?x206 ?x267))))))))
 ))
 (let (($x140 (forall ((input.ind-%var2326X (_ BitVec 32)) )(let (($x252 (= input.ind-%var2326X input.spec-%var-y-0)))
 (let (($x394 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2326X)))
 (= $x394 $x252))))
 ))
 (let (($x216 (and $x140 $x186)))
 (let (($x217 (= $x216 true)))
 (let (($x62 (forall ((input.ind-%var2319X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2319X)))
 (=> $x277 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2319X) (_ bv0 32)))))
 ))
 (let (($x293 (forall ((input.ind-%var2318X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2318X)))
 (= $x277 false)))
 ))
 (let (($x110 (and $x293 $x62)))
 (let (($x97 (= $x110 true)))
 (let (($x331 (forall ((input.ind-%var2311X (_ BitVec 32)) (input.ind-%var2313X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2311X input.ind-%var2313X)))
 (let (($x372 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2311X)))
 (=> (and $x372 $x196) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2311X input.ind-%var2313X) (_ bv0 32))))))
 ))
 (let (($x224 (forall ((input.ind-%var2311X (_ BitVec 32)) (input.ind-%var2312X (_ BitVec 32)) )(let (($x372 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2311X)))
 (=> $x372 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2311X input.ind-%var2312X) false))))
 ))
 (let (($x256 (forall ((input.ind-%var2310X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2310X)))
 (= $x179 false)))
 ))
 (let (($x390 (and (and $x256 $x224) $x331)))
 (let (($x234 (= $x390 true)))
 (let (($x210 (forall ((input.ind-%var2301X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x252 (= input.ind-%var2301X input.spec-%var-y-0)))
 (let ((?x267 (ite $x252 ?x29 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x271 (ite $x38 ?x267 (_ bv0 32))))
 (let ((?x397 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2301X)))
 (let (($x211 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2301X)))
 (=> $x211 (= ?x397 ?x271))))))))))
 ))
 (let (($x378 (forall ((input.ind-%var2300X (_ BitVec 32)) )(let (($x252 (= input.ind-%var2300X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x323 (ite $x38 $x252 false)))
 (let (($x211 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2300X)))
 (= $x211 $x323))))))
 ))
 (let (($x270 (and $x378 $x210)))
 (let (($x170 (= $x270 true)))
 (let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x48 (ite $x51 ?x29 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x45 (ite $x38 ?x48 (_ bv0 32))))
 (let (($x304 (= input.spec-%tmpvar-6.L2%13%d.2 ?x45)))
 (let (($x228 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x346 (=> $x228 $x304)))
 (let (($x50 (ite $x38 $x51 false)))
 (let ((?x86 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x86 (_ bv1 32))))
 (let (($x257 (= $x228 $x268)))
 (let (($x15 (= false false)))
 (let (($x204 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x227 (=> $x204 $x15)))
 (let (($x23 (= ?x86 (_ bv0 32))))
 (let (($x209 (= $x204 $x23)))
 (let (($x350 (and (and (and $x209 $x227) $x257) $x346)))
 (let (($x361 (= $x350 true)))
 (let (($x340 (forall ((input.ind-%var2282X (_ BitVec 32)) )(let (($x252 (= input.ind-%var2282X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x323 (ite $x38 $x252 false)))
 (let (($x187 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2282X)))
 (let (($x239 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x239 (= $x187 $x323))))))))
 ))
 (let (($x288 (forall ((input.ind-%var2283X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x252 (= input.ind-%var2283X input.spec-%var-y-0)))
 (let ((?x267 (ite $x252 ?x29 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x271 (ite $x38 ?x267 (_ bv0 32))))
 (let ((?x226 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2283X)))
 (let (($x187 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2283X)))
 (let (($x239 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x239 $x187) (= ?x226 ?x271)))))))))))
 ))
 (let ((?x121 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x121 (_ bv0 32))))
 (let (($x165 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x169 (= $x165 $x167)))
 (let (($x240 (=> $x165 $x15)))
 (let (($x25 (bvuge ?x121 (_ bv1 32))))
 (let (($x239 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x158 (= $x239 $x25)))
 (let (($x380 (and (and (and (and $x158 $x240) $x169) $x288) $x340)))
 (let (($x393 (= $x380 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x107 (concat ?x71 (concat ?x102 ?x64)))))
 (let (($x142 (= ?x119 input.dst.llvm-%x)))
 (let (($x189 (= $x142 true)))
 (let (($x149 (= $x189 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x127 (concat ?x116 (concat ?x114 ?x118)))))
 (let (($x7 (= ?x130 input.dst.llvm-%y)))
 (let (($x138 (= $x7 true)))
 (let (($x188 (= $x138 true)))
 (let (($x131 (= input.dst.llvm-%y ?x130)))
 (let (($x122 (= input.dst.llvm-%x ?x119)))
 (let (($x132 (and $x122 $x131)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x40)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (and $x46 $x78)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x98 $x85)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x56 $x6)))
 (let (($x9 (not $x72)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x13 $x83)))
 (let (($x95 (and (not $x54) $x9)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x93 $x26)))
 (let (($x28 (not $x60)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x94 $x90)))
 (let (($x52 (and (not $x39) $x28)))
 (let (($x129 (and (and (and (and (and (and $x52 $x95) $x75) $x49) $x91) $x47) $x42)))
 (let (($x20 (and $x129 $x59)))
 (let (($x14 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x128 (or false (or false (and (and true (or $x27 $x105)) (or $x79 $x87))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x128)))
 (let (($x135 (and (and (and $x80 $x14) $x20) $x132)))
 (let (($x22 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x10 (and $x22 $x135)))
 (let (($x136 (= $x10 true)))
 (let (($x171 (= $x136 true)))
 (let (($x137 (= $x171 true)))
 (let (($x172 (and $x137 $x188)))
 (let (($x55 (and $x172 $x149)))
 (let (($x160 (and $x55 $x393)))
 (let (($x363 (and $x160 $x361)))
 (let (($x176 (and $x363 $x170)))
 (let (($x195 (and $x176 $x234)))
 (let (($x192 (and $x195 $x97)))
 (let (($x156 (and $x192 $x217)))
 (let (($x274 (and $x156 $x231)))
 (let (($x259 (and $x274 $x168)))
 (let (($x88 (and $x25 $x23)))
 (let (($x383 (and $x88 $x259)))
 (let (($x69 (= ?x29 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x287 (and $x69 $x383)))
 (let (($x266 (and $x15 $x287)))
 (let (($x43 (= input.spec-%var-m2-0.L2%18%bbentry ?x45)))
 (let (($x164 (and $x43 $x266)))
 (let (($x357 (and $x15 $x164)))
 (let (($x282 (=> $x357 $x391)))
 (not $x282))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x262 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x298 (= input.spec-%var-y-0 ?x262)))
 (let (($x358 (= $x298 true)))
 (let (($x391 (= $x358 true)))
 (let (($x301 (forall ((input.ind-%var2357X (_ BitVec 32)) (input.ind-%var2359X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x252 (= input.ind-%var2359X input.spec-%var-y-0)))
 (let ((?x267 (ite $x252 ?x29 (_ bv0 32))))
 (let (($x260 (= input.ind-%var2357X input.spec-%var-x-0)))
 (let ((?x305 (ite $x260 ?x267 (_ bv0 32))))
 (let ((?x376 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2357X input.ind-%var2359X)))
 (let (($x202 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2357X input.ind-%var2359X)))
 (let (($x375 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2357X)))
 (=> (and $x375 $x202) (= ?x376 ?x305)))))))))))
 ))
 (let (($x290 (forall ((input.ind-%var2357X (_ BitVec 32)) (input.ind-%var2358X (_ BitVec 32)) )(let (($x252 (= input.ind-%var2358X input.spec-%var-y-0)))
 (let (($x260 (= input.ind-%var2357X input.spec-%var-x-0)))
 (let (($x347 (ite $x260 $x252 false)))
 (let (($x202 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2357X input.ind-%var2358X)))
 (let (($x375 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2357X)))
 (=> $x375 (= $x202 $x347))))))))
 ))
 (let (($x368 (forall ((input.ind-%var2356X (_ BitVec 32)) )(let (($x144 (= input.ind-%var2356X input.spec-%var-x-0)))
 (let (($x320 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2356X)))
 (= $x320 $x144))))
 ))
 (let (($x395 (and (and $x368 $x290) $x301)))
 (let (($x168 (= $x395 true)))
 (let (($x175 (forall ((input.ind-%var2341X (_ BitVec 32)) (input.ind-%var2343X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x252 (= input.ind-%var2343X input.spec-%var-y-0)))
 (let ((?x267 (ite $x252 ?x29 (_ bv0 32))))
 (let (($x260 (= input.ind-%var2341X input.spec-%var-x-0)))
 (let ((?x305 (ite $x260 ?x267 (_ bv0 32))))
 (let ((?x199 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2341X input.ind-%var2343X)))
 (let (($x161 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2341X input.ind-%var2343X)))
 (let (($x359 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2341X)))
 (=> (and $x359 $x161) (= ?x199 ?x305)))))))))))
 ))
 (let (($x382 (forall ((input.ind-%var2341X (_ BitVec 32)) (input.ind-%var2342X (_ BitVec 32)) )(let (($x252 (= input.ind-%var2342X input.spec-%var-y-0)))
 (let (($x260 (= input.ind-%var2341X input.spec-%var-x-0)))
 (let (($x347 (ite $x260 $x252 false)))
 (let (($x161 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2341X input.ind-%var2342X)))
 (let (($x359 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2341X)))
 (=> $x359 (= $x161 $x347))))))))
 ))
 (let (($x364 (forall ((input.ind-%var2340X (_ BitVec 32)) )(let (($x144 (= input.ind-%var2340X input.spec-%var-x-0)))
 (let (($x345 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2340X)))
 (= $x345 $x144))))
 ))
 (let (($x354 (and (and $x364 $x382) $x175)))
 (let (($x231 (= $x354 true)))
 (let (($x186 (forall ((input.ind-%var2327X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x252 (= input.ind-%var2327X input.spec-%var-y-0)))
 (let ((?x267 (ite $x252 ?x29 (_ bv0 32))))
 (let ((?x206 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2327X)))
 (let (($x394 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2327X)))
 (=> $x394 (= ?x206 ?x267))))))))
 ))
 (let (($x140 (forall ((input.ind-%var2326X (_ BitVec 32)) )(let (($x252 (= input.ind-%var2326X input.spec-%var-y-0)))
 (let (($x394 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2326X)))
 (= $x394 $x252))))
 ))
 (let (($x216 (and $x140 $x186)))
 (let (($x217 (= $x216 true)))
 (let (($x62 (forall ((input.ind-%var2319X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2319X)))
 (=> $x277 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2319X) (_ bv0 32)))))
 ))
 (let (($x293 (forall ((input.ind-%var2318X (_ BitVec 32)) )(let (($x277 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2318X)))
 (= $x277 false)))
 ))
 (let (($x110 (and $x293 $x62)))
 (let (($x97 (= $x110 true)))
 (let (($x331 (forall ((input.ind-%var2311X (_ BitVec 32)) (input.ind-%var2313X (_ BitVec 32)) )(let (($x196 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2311X input.ind-%var2313X)))
 (let (($x372 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2311X)))
 (=> (and $x372 $x196) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2311X input.ind-%var2313X) (_ bv0 32))))))
 ))
 (let (($x224 (forall ((input.ind-%var2311X (_ BitVec 32)) (input.ind-%var2312X (_ BitVec 32)) )(let (($x372 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2311X)))
 (=> $x372 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2311X input.ind-%var2312X) false))))
 ))
 (let (($x256 (forall ((input.ind-%var2310X (_ BitVec 32)) )(let (($x179 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2310X)))
 (= $x179 false)))
 ))
 (let (($x390 (and (and $x256 $x224) $x331)))
 (let (($x234 (= $x390 true)))
 (let (($x210 (forall ((input.ind-%var2301X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x252 (= input.ind-%var2301X input.spec-%var-y-0)))
 (let ((?x267 (ite $x252 ?x29 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x271 (ite $x38 ?x267 (_ bv0 32))))
 (let ((?x397 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2301X)))
 (let (($x211 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2301X)))
 (=> $x211 (= ?x397 ?x271))))))))))
 ))
 (let (($x378 (forall ((input.ind-%var2300X (_ BitVec 32)) )(let (($x252 (= input.ind-%var2300X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x323 (ite $x38 $x252 false)))
 (let (($x211 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2300X)))
 (= $x211 $x323))))))
 ))
 (let (($x270 (and $x378 $x210)))
 (let (($x170 (= $x270 true)))
 (let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x48 (ite $x51 ?x29 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x45 (ite $x38 ?x48 (_ bv0 32))))
 (let (($x304 (= input.spec-%tmpvar-6.L2%13%d.2 ?x45)))
 (let (($x228 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x346 (=> $x228 $x304)))
 (let (($x50 (ite $x38 $x51 false)))
 (let ((?x86 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x86 (_ bv1 32))))
 (let (($x257 (= $x228 $x268)))
 (let (($x15 (= false false)))
 (let (($x204 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x227 (=> $x204 $x15)))
 (let (($x23 (= ?x86 (_ bv0 32))))
 (let (($x209 (= $x204 $x23)))
 (let (($x350 (and (and (and $x209 $x227) $x257) $x346)))
 (let (($x361 (= $x350 true)))
 (let (($x340 (forall ((input.ind-%var2282X (_ BitVec 32)) )(let (($x252 (= input.ind-%var2282X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x323 (ite $x38 $x252 false)))
 (let (($x187 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2282X)))
 (let (($x239 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x239 (= $x187 $x323))))))))
 ))
 (let (($x288 (forall ((input.ind-%var2283X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x252 (= input.ind-%var2283X input.spec-%var-y-0)))
 (let ((?x267 (ite $x252 ?x29 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x271 (ite $x38 ?x267 (_ bv0 32))))
 (let ((?x226 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2283X)))
 (let (($x187 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2283X)))
 (let (($x239 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x239 $x187) (= ?x226 ?x271)))))))))))
 ))
 (let ((?x121 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x121 (_ bv0 32))))
 (let (($x165 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x169 (= $x165 $x167)))
 (let (($x240 (=> $x165 $x15)))
 (let (($x25 (bvuge ?x121 (_ bv1 32))))
 (let (($x239 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x158 (= $x239 $x25)))
 (let (($x380 (and (and (and (and $x158 $x240) $x169) $x288) $x340)))
 (let (($x393 (= $x380 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x107 (concat ?x71 (concat ?x102 ?x64)))))
 (let (($x142 (= ?x119 input.dst.llvm-%x)))
 (let (($x189 (= $x142 true)))
 (let (($x149 (= $x189 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x127 (concat ?x116 (concat ?x114 ?x118)))))
 (let (($x7 (= ?x130 input.dst.llvm-%y)))
 (let (($x138 (= $x7 true)))
 (let (($x188 (= $x138 true)))
 (let (($x131 (= input.dst.llvm-%y ?x130)))
 (let (($x122 (= input.dst.llvm-%x ?x119)))
 (let (($x132 (and $x122 $x131)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x40)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (and $x46 $x78)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x98 $x85)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x56 $x6)))
 (let (($x9 (not $x72)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x13 $x83)))
 (let (($x95 (and (not $x54) $x9)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x93 $x26)))
 (let (($x28 (not $x60)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x94 $x90)))
 (let (($x52 (and (not $x39) $x28)))
 (let (($x129 (and (and (and (and (and (and $x52 $x95) $x75) $x49) $x91) $x47) $x42)))
 (let (($x20 (and $x129 $x59)))
 (let (($x14 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x128 (or false (or false (and (and true (or $x27 $x105)) (or $x79 $x87))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x128)))
 (let (($x135 (and (and (and $x80 $x14) $x20) $x132)))
 (let (($x22 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x10 (and $x22 $x135)))
 (let (($x136 (= $x10 true)))
 (let (($x171 (= $x136 true)))
 (let (($x137 (= $x171 true)))
 (let (($x172 (and $x137 $x188)))
 (let (($x55 (and $x172 $x149)))
 (let (($x160 (and $x55 $x393)))
 (let (($x363 (and $x160 $x361)))
 (let (($x176 (and $x363 $x170)))
 (let (($x195 (and $x176 $x234)))
 (let (($x192 (and $x195 $x97)))
 (let (($x156 (and $x192 $x217)))
 (let (($x274 (and $x156 $x231)))
 (let (($x259 (and $x274 $x168)))
 (let (($x88 (and $x25 $x23)))
 (let (($x383 (and $x88 $x259)))
 (let (($x69 (= ?x29 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x287 (and $x69 $x383)))
 (let (($x266 (and $x15 $x287)))
 (let (($x43 (= input.spec-%var-m2-0.L2%18%bbentry ?x45)))
 (let (($x164 (and $x43 $x266)))
 (let (($x357 (and $x15 $x164)))
 (let (($x282 (=> $x357 $x391)))
 (not $x282))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675918/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x248 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x388 (= input.spec-%var-x-0 ?x248)))
 (let (($x328 (= $x388 true)))
 (let (($x230 (= $x328 true)))
 (let (($x351 (forall ((input.ind-%var2533X (_ BitVec 32)) (input.ind-%var2535X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2535X input.spec-%var-y-0)))
 (let ((?x315 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x143 (= input.ind-%var2533X input.spec-%var-x-0)))
 (let ((?x307 (ite $x143 ?x315 (_ bv0 32))))
 (let ((?x163 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2533X input.ind-%var2535X)))
 (let (($x265 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2533X input.ind-%var2535X)))
 (let (($x178 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2533X)))
 (=> (and $x178 $x265) (= ?x163 ?x307)))))))))))
 ))
 (let (($x250 (forall ((input.ind-%var2533X (_ BitVec 32)) (input.ind-%var2534X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2534X input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var2533X input.spec-%var-x-0)))
 (let (($x152 (ite $x143 $x271 false)))
 (let (($x265 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2533X input.ind-%var2534X)))
 (let (($x178 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2533X)))
 (=> $x178 (= $x265 $x152))))))))
 ))
 (let (($x232 (forall ((input.ind-%var2532X (_ BitVec 32)) )(let (($x321 (= input.ind-%var2532X input.spec-%var-x-0)))
 (let (($x339 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2532X)))
 (= $x339 $x321))))
 ))
 (let (($x371 (and (and $x232 $x250) $x351)))
 (let (($x241 (= $x371 true)))
 (let (($x308 (forall ((input.ind-%var2517X (_ BitVec 32)) (input.ind-%var2519X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2519X input.spec-%var-y-0)))
 (let ((?x315 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x143 (= input.ind-%var2517X input.spec-%var-x-0)))
 (let ((?x307 (ite $x143 ?x315 (_ bv0 32))))
 (let ((?x365 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2517X input.ind-%var2519X)))
 (let (($x249 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2517X input.ind-%var2519X)))
 (let (($x343 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2517X)))
 (=> (and $x343 $x249) (= ?x365 ?x307)))))))))))
 ))
 (let (($x362 (forall ((input.ind-%var2517X (_ BitVec 32)) (input.ind-%var2518X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2518X input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var2517X input.spec-%var-x-0)))
 (let (($x152 (ite $x143 $x271 false)))
 (let (($x249 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2517X input.ind-%var2518X)))
 (let (($x343 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2517X)))
 (=> $x343 (= $x249 $x152))))))))
 ))
 (let (($x387 (forall ((input.ind-%var2516X (_ BitVec 32)) )(let (($x321 (= input.ind-%var2516X input.spec-%var-x-0)))
 (let (($x379 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2516X)))
 (= $x379 $x321))))
 ))
 (let (($x154 (and (and $x387 $x362) $x308)))
 (let (($x392 (= $x154 true)))
 (let (($x294 (forall ((input.ind-%var2503X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2503X input.spec-%var-y-0)))
 (let ((?x315 (ite $x271 ?x25 (_ bv0 32))))
 (let ((?x367 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2503X)))
 (let (($x261 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2503X)))
 (=> $x261 (= ?x367 ?x315))))))))
 ))
 (let (($x309 (forall ((input.ind-%var2502X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2502X input.spec-%var-y-0)))
 (let (($x261 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2502X)))
 (= $x261 $x271))))
 ))
 (let (($x295 (and $x309 $x294)))
 (let (($x222 (= $x295 true)))
 (let (($x74 (forall ((input.ind-%var2495X (_ BitVec 32)) )(let (($x395 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2495X)))
 (=> $x395 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2495X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var2494X (_ BitVec 32)) )(let (($x395 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2494X)))
 (= $x395 false)))
 ))
 (let (($x33 (and $x287 $x74)))
 (let (($x117 (= $x33 true)))
 (let (($x290 (forall ((input.ind-%var2487X (_ BitVec 32)) (input.ind-%var2489X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2487X input.ind-%var2489X)))
 (let (($x305 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2487X)))
 (=> (and $x305 $x352) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2487X input.ind-%var2489X) (_ bv0 32))))))
 ))
 (let (($x177 (forall ((input.ind-%var2487X (_ BitVec 32)) (input.ind-%var2488X (_ BitVec 32)) )(let (($x305 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2487X)))
 (=> $x305 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2487X input.ind-%var2488X) false))))
 ))
 (let (($x326 (forall ((input.ind-%var2486X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2486X)))
 (= $x217 false)))
 ))
 (let (($x212 (and (and $x326 $x177) $x290)))
 (let (($x376 (= $x212 true)))
 (let (($x140 (forall ((input.ind-%var2476X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2476X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x272 (ite $x51 $x271 false)))
 (let (($x286 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2476X)))
 (= $x286 $x272))))))
 ))
 (let (($x76 (forall ((input.ind-%var2477X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2477X input.spec-%var-y-0)))
 (let ((?x315 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x228 (ite $x51 ?x315 (_ bv0 32))))
 (let ((?x331 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2477X)))
 (let (($x286 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2477X)))
 (=> $x286 (= ?x331 ?x228))))))))))
 ))
 (let (($x206 (and $x76 $x140)))
 (let (($x207 (= $x206 true)))
 (let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x38 ?x25 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x50 (ite $x51 ?x45 (_ bv0 32))))
 (let (($x256 (= input.spec-%tmpvar-6.L2%13%d.2 ?x50)))
 (let (($x170 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x353 (=> $x170 $x256)))
 (let (($x397 (ite $x51 $x38 false)))
 (let ((?x313 (ite $x397 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x313 (_ bv1 32))))
 (let (($x179 (= $x170 $x176)))
 (let (($x34 (= false false)))
 (let (($x378 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x270 (=> $x378 $x34)))
 (let (($x324 (= ?x313 (_ bv0 32))))
 (let (($x210 (= $x378 $x324)))
 (let (($x329 (and (and (and $x210 $x270) $x179) $x353)))
 (let (($x312 (= $x329 true)))
 (let (($x258 (forall ((input.ind-%var2459X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2459X input.spec-%var-y-0)))
 (let ((?x315 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x228 (ite $x51 ?x315 (_ bv0 32))))
 (let ((?x380 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2459X)))
 (let (($x191 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2459X)))
 (let (($x158 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x158 $x191) (= ?x380 ?x228)))))))))))
 ))
 (let (($x373 (forall ((input.ind-%var2458X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2458X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x272 (ite $x51 $x271 false)))
 (let (($x191 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2458X)))
 (let (($x158 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x158 (= $x191 $x272))))))))
 ))
 (let ((?x69 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x12 (= ?x69 (_ bv0 32))))
 (let (($x240 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x167 (= $x240 $x12)))
 (let (($x299 (=> $x240 $x34)))
 (let (($x165 (bvuge ?x69 (_ bv1 32))))
 (let (($x158 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x15 (= $x158 $x165)))
 (let (($x361 (and (and (and (and $x15 $x299) $x167) $x373) $x258)))
 (let (($x363 (= $x361 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x64 (concat ?x71 (concat ?x113 ?x134)))))
 (let (($x189 (= ?x63 input.dst.llvm-%x)))
 (let (($x149 (= $x189 true)))
 (let (($x55 (= $x149 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x103 (concat ?x111 (concat ?x127 ?x122)))))
 (let (($x138 (= ?x125 input.dst.llvm-%y)))
 (let (($x188 (= $x138 true)))
 (let (($x172 (= $x188 true)))
 (let (($x130 (= input.dst.llvm-%y ?x125)))
 (let (($x123 (= input.dst.llvm-%x ?x63)))
 (let (($x131 (and $x123 $x130)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x91)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x78)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x32 $x66)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x75 $x98)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x83 $x54)))
 (let (($x56 (not $x81)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x28 $x52)))
 (let (($x72 (and (not $x13) $x56)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x90 $x39)))
 (let (($x93 (not $x104)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x14 $x133)))
 (let (($x60 (and (not $x94) $x93)))
 (let (($x129 (and (and (and (and (and (and $x60 $x72) $x95) $x58) $x46) $x16) $x85)))
 (let (($x40 (and $x129 $x61)))
 (let (($x19 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x27)))
 (let (($x128 (or false (or false (and (and true (or $x18 $x105)) (or $x67 $x87))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x128)))
 (let (($x10 (and (and (and $x96 $x19) $x40) $x131)))
 (let (($x23 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x136 (and $x23 $x10)))
 (let (($x171 (= $x136 true)))
 (let (($x137 (= $x171 true)))
 (let (($x7 (= $x137 true)))
 (let (($x142 (and $x7 $x172)))
 (let (($x150 (and $x142 $x55)))
 (let (($x211 (and $x150 $x363)))
 (let (($x224 (and $x211 $x312)))
 (let (($x166 (and $x224 $x207)))
 (let (($x389 (and $x166 $x376)))
 (let (($x112 (and $x389 $x117)))
 (let (($x233 (and $x112 $x222)))
 (let (($x151 (and $x233 $x392)))
 (let (($x238 (and $x151 $x241)))
 (let (($x221 (and $x12 $x238)))
 (let (($x21 (= ?x25 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x147 (and $x21 $x221)))
 (let (($x273 (and $x34 $x147)))
 (let (($x43 (= input.spec-%var-m2-0.L2%18%bbentry ?x50)))
 (let (($x285 (and $x43 $x273)))
 (let (($x333 (and $x34 $x285)))
 (let (($x275 (=> $x333 $x230)))
 (not $x275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x248 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x388 (= input.spec-%var-x-0 ?x248)))
 (let (($x328 (= $x388 true)))
 (let (($x230 (= $x328 true)))
 (let (($x351 (forall ((input.ind-%var2533X (_ BitVec 32)) (input.ind-%var2535X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2535X input.spec-%var-y-0)))
 (let ((?x315 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x143 (= input.ind-%var2533X input.spec-%var-x-0)))
 (let ((?x307 (ite $x143 ?x315 (_ bv0 32))))
 (let ((?x163 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2533X input.ind-%var2535X)))
 (let (($x265 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2533X input.ind-%var2535X)))
 (let (($x178 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2533X)))
 (=> (and $x178 $x265) (= ?x163 ?x307)))))))))))
 ))
 (let (($x250 (forall ((input.ind-%var2533X (_ BitVec 32)) (input.ind-%var2534X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2534X input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var2533X input.spec-%var-x-0)))
 (let (($x152 (ite $x143 $x271 false)))
 (let (($x265 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2533X input.ind-%var2534X)))
 (let (($x178 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2533X)))
 (=> $x178 (= $x265 $x152))))))))
 ))
 (let (($x232 (forall ((input.ind-%var2532X (_ BitVec 32)) )(let (($x321 (= input.ind-%var2532X input.spec-%var-x-0)))
 (let (($x339 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2532X)))
 (= $x339 $x321))))
 ))
 (let (($x371 (and (and $x232 $x250) $x351)))
 (let (($x241 (= $x371 true)))
 (let (($x308 (forall ((input.ind-%var2517X (_ BitVec 32)) (input.ind-%var2519X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2519X input.spec-%var-y-0)))
 (let ((?x315 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x143 (= input.ind-%var2517X input.spec-%var-x-0)))
 (let ((?x307 (ite $x143 ?x315 (_ bv0 32))))
 (let ((?x365 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2517X input.ind-%var2519X)))
 (let (($x249 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2517X input.ind-%var2519X)))
 (let (($x343 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2517X)))
 (=> (and $x343 $x249) (= ?x365 ?x307)))))))))))
 ))
 (let (($x362 (forall ((input.ind-%var2517X (_ BitVec 32)) (input.ind-%var2518X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2518X input.spec-%var-y-0)))
 (let (($x143 (= input.ind-%var2517X input.spec-%var-x-0)))
 (let (($x152 (ite $x143 $x271 false)))
 (let (($x249 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2517X input.ind-%var2518X)))
 (let (($x343 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2517X)))
 (=> $x343 (= $x249 $x152))))))))
 ))
 (let (($x387 (forall ((input.ind-%var2516X (_ BitVec 32)) )(let (($x321 (= input.ind-%var2516X input.spec-%var-x-0)))
 (let (($x379 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2516X)))
 (= $x379 $x321))))
 ))
 (let (($x154 (and (and $x387 $x362) $x308)))
 (let (($x392 (= $x154 true)))
 (let (($x294 (forall ((input.ind-%var2503X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2503X input.spec-%var-y-0)))
 (let ((?x315 (ite $x271 ?x25 (_ bv0 32))))
 (let ((?x367 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2503X)))
 (let (($x261 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2503X)))
 (=> $x261 (= ?x367 ?x315))))))))
 ))
 (let (($x309 (forall ((input.ind-%var2502X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2502X input.spec-%var-y-0)))
 (let (($x261 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2502X)))
 (= $x261 $x271))))
 ))
 (let (($x295 (and $x309 $x294)))
 (let (($x222 (= $x295 true)))
 (let (($x74 (forall ((input.ind-%var2495X (_ BitVec 32)) )(let (($x395 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2495X)))
 (=> $x395 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2495X) (_ bv0 32)))))
 ))
 (let (($x287 (forall ((input.ind-%var2494X (_ BitVec 32)) )(let (($x395 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2494X)))
 (= $x395 false)))
 ))
 (let (($x33 (and $x287 $x74)))
 (let (($x117 (= $x33 true)))
 (let (($x290 (forall ((input.ind-%var2487X (_ BitVec 32)) (input.ind-%var2489X (_ BitVec 32)) )(let (($x352 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2487X input.ind-%var2489X)))
 (let (($x305 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2487X)))
 (=> (and $x305 $x352) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2487X input.ind-%var2489X) (_ bv0 32))))))
 ))
 (let (($x177 (forall ((input.ind-%var2487X (_ BitVec 32)) (input.ind-%var2488X (_ BitVec 32)) )(let (($x305 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2487X)))
 (=> $x305 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2487X input.ind-%var2488X) false))))
 ))
 (let (($x326 (forall ((input.ind-%var2486X (_ BitVec 32)) )(let (($x217 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2486X)))
 (= $x217 false)))
 ))
 (let (($x212 (and (and $x326 $x177) $x290)))
 (let (($x376 (= $x212 true)))
 (let (($x140 (forall ((input.ind-%var2476X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2476X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x272 (ite $x51 $x271 false)))
 (let (($x286 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2476X)))
 (= $x286 $x272))))))
 ))
 (let (($x76 (forall ((input.ind-%var2477X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2477X input.spec-%var-y-0)))
 (let ((?x315 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x228 (ite $x51 ?x315 (_ bv0 32))))
 (let ((?x331 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2477X)))
 (let (($x286 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2477X)))
 (=> $x286 (= ?x331 ?x228))))))))))
 ))
 (let (($x206 (and $x76 $x140)))
 (let (($x207 (= $x206 true)))
 (let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x38 ?x25 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x50 (ite $x51 ?x45 (_ bv0 32))))
 (let (($x256 (= input.spec-%tmpvar-6.L2%13%d.2 ?x50)))
 (let (($x170 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x353 (=> $x170 $x256)))
 (let (($x397 (ite $x51 $x38 false)))
 (let ((?x313 (ite $x397 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x313 (_ bv1 32))))
 (let (($x179 (= $x170 $x176)))
 (let (($x34 (= false false)))
 (let (($x378 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x270 (=> $x378 $x34)))
 (let (($x324 (= ?x313 (_ bv0 32))))
 (let (($x210 (= $x378 $x324)))
 (let (($x329 (and (and (and $x210 $x270) $x179) $x353)))
 (let (($x312 (= $x329 true)))
 (let (($x258 (forall ((input.ind-%var2459X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x271 (= input.ind-%var2459X input.spec-%var-y-0)))
 (let ((?x315 (ite $x271 ?x25 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x228 (ite $x51 ?x315 (_ bv0 32))))
 (let ((?x380 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2459X)))
 (let (($x191 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2459X)))
 (let (($x158 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x158 $x191) (= ?x380 ?x228)))))))))))
 ))
 (let (($x373 (forall ((input.ind-%var2458X (_ BitVec 32)) )(let (($x271 (= input.ind-%var2458X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x272 (ite $x51 $x271 false)))
 (let (($x191 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2458X)))
 (let (($x158 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x158 (= $x191 $x272))))))))
 ))
 (let ((?x69 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x12 (= ?x69 (_ bv0 32))))
 (let (($x240 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x167 (= $x240 $x12)))
 (let (($x299 (=> $x240 $x34)))
 (let (($x165 (bvuge ?x69 (_ bv1 32))))
 (let (($x158 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x15 (= $x158 $x165)))
 (let (($x361 (and (and (and (and $x15 $x299) $x167) $x373) $x258)))
 (let (($x363 (= $x361 true)))
 (let ((?x134 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x64 (concat ?x71 (concat ?x113 ?x134)))))
 (let (($x189 (= ?x63 input.dst.llvm-%x)))
 (let (($x149 (= $x189 true)))
 (let (($x55 (= $x149 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x103 (concat ?x111 (concat ?x127 ?x122)))))
 (let (($x138 (= ?x125 input.dst.llvm-%y)))
 (let (($x188 (= $x138 true)))
 (let (($x172 (= $x188 true)))
 (let (($x130 (= input.dst.llvm-%y ?x125)))
 (let (($x123 (= input.dst.llvm-%x ?x63)))
 (let (($x131 (and $x123 $x130)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x91)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x78)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x32 $x66)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x75 $x98)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x83 $x54)))
 (let (($x56 (not $x81)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x28 $x52)))
 (let (($x72 (and (not $x13) $x56)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x90 $x39)))
 (let (($x93 (not $x104)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x14 $x133)))
 (let (($x60 (and (not $x94) $x93)))
 (let (($x129 (and (and (and (and (and (and $x60 $x72) $x95) $x58) $x46) $x16) $x85)))
 (let (($x40 (and $x129 $x61)))
 (let (($x19 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x27)))
 (let (($x128 (or false (or false (and (and true (or $x18 $x105)) (or $x67 $x87))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x128)))
 (let (($x10 (and (and (and $x96 $x19) $x40) $x131)))
 (let (($x23 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x136 (and $x23 $x10)))
 (let (($x171 (= $x136 true)))
 (let (($x137 (= $x171 true)))
 (let (($x7 (= $x137 true)))
 (let (($x142 (and $x7 $x172)))
 (let (($x150 (and $x142 $x55)))
 (let (($x211 (and $x150 $x363)))
 (let (($x224 (and $x211 $x312)))
 (let (($x166 (and $x224 $x207)))
 (let (($x389 (and $x166 $x376)))
 (let (($x112 (and $x389 $x117)))
 (let (($x233 (and $x112 $x222)))
 (let (($x151 (and $x233 $x392)))
 (let (($x238 (and $x151 $x241)))
 (let (($x221 (and $x12 $x238)))
 (let (($x21 (= ?x25 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x147 (and $x21 $x221)))
 (let (($x273 (and $x34 $x147)))
 (let (($x43 (= input.spec-%var-m2-0.L2%18%bbentry ?x50)))
 (let (($x285 (and $x43 $x273)))
 (let (($x333 (and $x34 $x285)))
 (let (($x275 (=> $x333 $x230)))
 (not $x275)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675918/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x327 (ite $x38 $x51 false)))
 (let ((?x140 (ite $x327 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x140 (_ bv1 32))))
 (let (($x206 (= ?x140 (_ bv0 32))))
 (let (($x317 (or $x206 $x144)))
 (let ((?x304 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x304 (_ bv1 32))))
 (let (($x162 (and $x12 $x317)))
 (let (($x191 (= ?x304 (_ bv0 32))))
 (let (($x198 (or $x191 $x162)))
 (let (($x360 (or false $x198)))
 (let (($x260 (= $x360 true)))
 (let (($x341 (= $x260 true)))
 (let (($x374 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2707X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x363 (= input.ind-%var2707X input.spec-%var-y-0)))
 (let ((?x211 (ite $x363 ?x23 (_ bv0 32))))
 (let (($x347 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let ((?x194 (ite $x347 ?x211 (_ bv0 32))))
 (let ((?x375 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x227 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x161 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2705X)))
 (=> (and $x161 $x227) (= ?x375 ?x194)))))))))))
 ))
 (let (($x259 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2706X (_ BitVec 32)) )(let (($x363 (= input.ind-%var2706X input.spec-%var-y-0)))
 (let (($x347 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let (($x184 (ite $x347 $x363 false)))
 (let (($x227 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2706X)))
 (let (($x161 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2705X)))
 (=> $x161 (= $x227 $x184))))))))
 ))
 (let (($x242 (forall ((input.ind-%var2704X (_ BitVec 32)) )(let (($x266 (= input.ind-%var2704X input.spec-%var-x-0)))
 (let (($x349 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2704X)))
 (= $x349 $x266))))
 ))
 (let (($x100 (and (and $x242 $x259) $x374)))
 (let (($x243 (= $x100 true)))
 (let (($x336 (forall ((input.ind-%var2689X (_ BitVec 32)) (input.ind-%var2691X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x363 (= input.ind-%var2691X input.spec-%var-y-0)))
 (let ((?x211 (ite $x363 ?x23 (_ bv0 32))))
 (let (($x347 (= input.ind-%var2689X input.spec-%var-x-0)))
 (let ((?x194 (ite $x347 ?x211 (_ bv0 32))))
 (let ((?x173 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2689X input.ind-%var2691X)))
 (let (($x253 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2689X input.ind-%var2691X)))
 (let (($x205 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2689X)))
 (=> (and $x205 $x253) (= ?x173 ?x194)))))))))))
 ))
 (let (($x269 (forall ((input.ind-%var2689X (_ BitVec 32)) (input.ind-%var2690X (_ BitVec 32)) )(let (($x363 (= input.ind-%var2690X input.spec-%var-y-0)))
 (let (($x347 (= input.ind-%var2689X input.spec-%var-x-0)))
 (let (($x184 (ite $x347 $x363 false)))
 (let (($x253 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2689X input.ind-%var2690X)))
 (let (($x205 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2689X)))
 (=> $x205 (= $x253 $x184))))))))
 ))
 (let (($x110 (forall ((input.ind-%var2688X (_ BitVec 32)) )(let (($x266 (= input.ind-%var2688X input.spec-%var-x-0)))
 (let (($x234 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2688X)))
 (= $x234 $x266))))
 ))
 (let (($x355 (and (and $x110 $x269) $x336)))
 (let (($x220 (= $x355 true)))
 (let (($x208 (forall ((input.ind-%var2675X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x363 (= input.ind-%var2675X input.spec-%var-y-0)))
 (let ((?x211 (ite $x363 ?x23 (_ bv0 32))))
 (let ((?x370 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2675X)))
 (let (($x382 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2675X)))
 (=> $x382 (= ?x370 ?x211))))))))
 ))
 (let (($x57 (forall ((input.ind-%var2674X (_ BitVec 32)) )(let (($x363 (= input.ind-%var2674X input.spec-%var-y-0)))
 (let (($x382 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2674X)))
 (= $x382 $x363))))
 ))
 (let (($x281 (and $x57 $x208)))
 (let (($x280 (= $x281 true)))
 (let (($x20 (forall ((input.ind-%var2667X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2667X)))
 (=> $x238 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2667X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var2666X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2666X)))
 (= $x238 false)))
 ))
 (let (($x187 (and $x285 $x20)))
 (let (($x393 (= $x187 true)))
 (let (($x244 (forall ((input.ind-%var2659X (_ BitVec 32)) (input.ind-%var2661X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2659X input.ind-%var2661X)))
 (let (($x219 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2659X)))
 (=> (and $x219 $x159) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2659X input.ind-%var2661X) (_ bv0 32))))))
 ))
 (let (($x154 (forall ((input.ind-%var2659X (_ BitVec 32)) (input.ind-%var2660X (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2659X)))
 (=> $x219 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2659X input.ind-%var2660X) false))))
 ))
 (let (($x343 (forall ((input.ind-%var2658X (_ BitVec 32)) )(let (($x379 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2658X)))
 (= $x379 false)))
 ))
 (let (($x289 (and (and $x343 $x154) $x244)))
 (let (($x197 (= $x289 true)))
 (let (($x185 (forall ((input.ind-%var2649X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x363 (= input.ind-%var2649X input.spec-%var-y-0)))
 (let ((?x211 (ite $x363 ?x23 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x335 (ite $x38 ?x211 (_ bv0 32))))
 (let ((?x310 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2649X)))
 (let (($x155 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2649X)))
 (=> $x155 (= ?x310 ?x335))))))))))
 ))
 (let (($x383 (forall ((input.ind-%var2648X (_ BitVec 32)) )(let (($x363 (= input.ind-%var2648X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x196 (ite $x38 $x363 false)))
 (let (($x155 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2648X)))
 (= $x155 $x196))))))
 ))
 (let (($x245 (and $x383 $x185)))
 (let (($x294 (= $x245 true)))
 (let ((?x23 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x51 ?x23 (_ bv0 32))))
 (let ((?x35 (ite $x38 ?x45 (_ bv0 32))))
 (let (($x305 (= input.spec-%tmpvar-6.L2%13%d.2 ?x35)))
 (let (($x217 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x352 (=> $x217 $x305)))
 (let (($x326 (= $x217 $x144)))
 (let (($x121 (= false false)))
 (let (($x76 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x166 (=> $x76 $x121)))
 (let (($x207 (= $x76 $x206)))
 (let (($x177 (and (and (and $x207 $x166) $x326) $x352)))
 (let (($x297 (= $x177 true)))
 (let (($x353 (forall ((input.ind-%var2630X (_ BitVec 32)) )(let (($x363 (= input.ind-%var2630X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x196 (ite $x38 $x363 false)))
 (let (($x288 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2630X)))
 (let (($x299 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x299 (= $x288 $x196))))))))
 ))
 (let (($x324 (forall ((input.ind-%var2631X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x363 (= input.ind-%var2631X input.spec-%var-y-0)))
 (let ((?x211 (ite $x363 ?x23 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x335 (ite $x38 ?x211 (_ bv0 32))))
 (let ((?x380 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2631X)))
 (let (($x288 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2631X)))
 (let (($x299 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x299 $x288) (= ?x380 ?x335)))))))))))
 ))
 (let (($x346 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x271 (= $x346 $x191)))
 (let (($x384 (=> $x346 $x121)))
 (let (($x299 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x167 (= $x299 $x12)))
 (let (($x286 (and (and (and (and $x167 $x384) $x271) $x324) $x353)))
 (let (($x331 (= $x286 true)))
 (let (($x158 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x69 (= $x158 true)))
 (let (($x165 (= $x69 true)))
 (let (($x15 (= $x165 true)))
 (let (($x189 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x149 (= $x189 true)))
 (let (($x55 (= $x149 true)))
 (let (($x150 (= $x55 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x171 (concat ?x131 (concat ?x114 ?x122)))))
 (let (($x138 (= ?x137 input.dst.llvm-%y)))
 (let (($x188 (= $x138 true)))
 (let (($x172 (= $x188 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x63 (concat ?x134 (concat ?x44 ?x64)))))
 (let (($x103 (= ?x123 input.dst.llvm-%x)))
 (let (($x116 (= $x103 true)))
 (let (($x111 (= $x116 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x98)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x49)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x95 $x58)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x9 $x53)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x28 $x52)))
 (let (($x6 (not $x13)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x104 $x93)))
 (let (($x54 (and (not $x60) $x6)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x14 $x133)))
 (let (($x26 (not $x94)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x82 $x89)))
 (let (($x39 (and (not $x132) $x26)))
 (let (($x85 (and (and (and (and (and (and $x39 $x54) $x56) $x73) $x75) $x31) $x66)))
 (let (($x129 (and $x85 $x46)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x96 (or false (or false (and (and true (or $x105 $x41)) (or $x87 $x108))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x96)))
 (let (($x91 (and $x19 $x129)))
 (let (($x61 (= $x91 true)))
 (let (($x40 (= $x61 true)))
 (let (($x135 (= $x40 true)))
 (let (($x126 (and $x135 $x111)))
 (let (($x142 (and $x126 $x172)))
 (let (($x239 (and $x142 $x150)))
 (let (($x240 (and $x239 $x15)))
 (let (($x200 (and $x240 $x331)))
 (let (($x157 (and $x200 $x297)))
 (let (($x295 (and $x157 $x294)))
 (let (($x351 (and $x295 $x197)))
 (let (($x344 (and $x351 $x393)))
 (let (($x366 (and $x344 $x280)))
 (let (($x252 (and $x366 $x220)))
 (let (($x385 (and $x252 $x243)))
 (let (($x25 (= ?x23 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x99 (and $x25 $x385)))
 (let (($x303 (and $x121 $x99)))
 (let (($x50 (= input.spec-%var-m2-0.L2%18%bbentry ?x35)))
 (let (($x302 (and $x50 $x303)))
 (let (($x255 (and $x121 $x302)))
 (let (($x369 (=> $x255 $x341)))
 (not $x369))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x327 (ite $x38 $x51 false)))
 (let ((?x140 (ite $x327 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x140 (_ bv1 32))))
 (let (($x206 (= ?x140 (_ bv0 32))))
 (let (($x317 (or $x206 $x144)))
 (let ((?x304 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x304 (_ bv1 32))))
 (let (($x162 (and $x12 $x317)))
 (let (($x191 (= ?x304 (_ bv0 32))))
 (let (($x198 (or $x191 $x162)))
 (let (($x360 (or false $x198)))
 (let (($x260 (= $x360 true)))
 (let (($x341 (= $x260 true)))
 (let (($x374 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2707X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x363 (= input.ind-%var2707X input.spec-%var-y-0)))
 (let ((?x211 (ite $x363 ?x23 (_ bv0 32))))
 (let (($x347 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let ((?x194 (ite $x347 ?x211 (_ bv0 32))))
 (let ((?x375 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x227 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x161 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2705X)))
 (=> (and $x161 $x227) (= ?x375 ?x194)))))))))))
 ))
 (let (($x259 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2706X (_ BitVec 32)) )(let (($x363 (= input.ind-%var2706X input.spec-%var-y-0)))
 (let (($x347 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let (($x184 (ite $x347 $x363 false)))
 (let (($x227 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2706X)))
 (let (($x161 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2705X)))
 (=> $x161 (= $x227 $x184))))))))
 ))
 (let (($x242 (forall ((input.ind-%var2704X (_ BitVec 32)) )(let (($x266 (= input.ind-%var2704X input.spec-%var-x-0)))
 (let (($x349 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2704X)))
 (= $x349 $x266))))
 ))
 (let (($x100 (and (and $x242 $x259) $x374)))
 (let (($x243 (= $x100 true)))
 (let (($x336 (forall ((input.ind-%var2689X (_ BitVec 32)) (input.ind-%var2691X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x363 (= input.ind-%var2691X input.spec-%var-y-0)))
 (let ((?x211 (ite $x363 ?x23 (_ bv0 32))))
 (let (($x347 (= input.ind-%var2689X input.spec-%var-x-0)))
 (let ((?x194 (ite $x347 ?x211 (_ bv0 32))))
 (let ((?x173 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2689X input.ind-%var2691X)))
 (let (($x253 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2689X input.ind-%var2691X)))
 (let (($x205 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2689X)))
 (=> (and $x205 $x253) (= ?x173 ?x194)))))))))))
 ))
 (let (($x269 (forall ((input.ind-%var2689X (_ BitVec 32)) (input.ind-%var2690X (_ BitVec 32)) )(let (($x363 (= input.ind-%var2690X input.spec-%var-y-0)))
 (let (($x347 (= input.ind-%var2689X input.spec-%var-x-0)))
 (let (($x184 (ite $x347 $x363 false)))
 (let (($x253 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2689X input.ind-%var2690X)))
 (let (($x205 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2689X)))
 (=> $x205 (= $x253 $x184))))))))
 ))
 (let (($x110 (forall ((input.ind-%var2688X (_ BitVec 32)) )(let (($x266 (= input.ind-%var2688X input.spec-%var-x-0)))
 (let (($x234 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2688X)))
 (= $x234 $x266))))
 ))
 (let (($x355 (and (and $x110 $x269) $x336)))
 (let (($x220 (= $x355 true)))
 (let (($x208 (forall ((input.ind-%var2675X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x363 (= input.ind-%var2675X input.spec-%var-y-0)))
 (let ((?x211 (ite $x363 ?x23 (_ bv0 32))))
 (let ((?x370 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2675X)))
 (let (($x382 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2675X)))
 (=> $x382 (= ?x370 ?x211))))))))
 ))
 (let (($x57 (forall ((input.ind-%var2674X (_ BitVec 32)) )(let (($x363 (= input.ind-%var2674X input.spec-%var-y-0)))
 (let (($x382 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2674X)))
 (= $x382 $x363))))
 ))
 (let (($x281 (and $x57 $x208)))
 (let (($x280 (= $x281 true)))
 (let (($x20 (forall ((input.ind-%var2667X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2667X)))
 (=> $x238 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2667X) (_ bv0 32)))))
 ))
 (let (($x285 (forall ((input.ind-%var2666X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2666X)))
 (= $x238 false)))
 ))
 (let (($x187 (and $x285 $x20)))
 (let (($x393 (= $x187 true)))
 (let (($x244 (forall ((input.ind-%var2659X (_ BitVec 32)) (input.ind-%var2661X (_ BitVec 32)) )(let (($x159 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2659X input.ind-%var2661X)))
 (let (($x219 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2659X)))
 (=> (and $x219 $x159) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2659X input.ind-%var2661X) (_ bv0 32))))))
 ))
 (let (($x154 (forall ((input.ind-%var2659X (_ BitVec 32)) (input.ind-%var2660X (_ BitVec 32)) )(let (($x219 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2659X)))
 (=> $x219 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2659X input.ind-%var2660X) false))))
 ))
 (let (($x343 (forall ((input.ind-%var2658X (_ BitVec 32)) )(let (($x379 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2658X)))
 (= $x379 false)))
 ))
 (let (($x289 (and (and $x343 $x154) $x244)))
 (let (($x197 (= $x289 true)))
 (let (($x185 (forall ((input.ind-%var2649X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x363 (= input.ind-%var2649X input.spec-%var-y-0)))
 (let ((?x211 (ite $x363 ?x23 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x335 (ite $x38 ?x211 (_ bv0 32))))
 (let ((?x310 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2649X)))
 (let (($x155 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2649X)))
 (=> $x155 (= ?x310 ?x335))))))))))
 ))
 (let (($x383 (forall ((input.ind-%var2648X (_ BitVec 32)) )(let (($x363 (= input.ind-%var2648X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x196 (ite $x38 $x363 false)))
 (let (($x155 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2648X)))
 (= $x155 $x196))))))
 ))
 (let (($x245 (and $x383 $x185)))
 (let (($x294 (= $x245 true)))
 (let ((?x23 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x51 ?x23 (_ bv0 32))))
 (let ((?x35 (ite $x38 ?x45 (_ bv0 32))))
 (let (($x305 (= input.spec-%tmpvar-6.L2%13%d.2 ?x35)))
 (let (($x217 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x352 (=> $x217 $x305)))
 (let (($x326 (= $x217 $x144)))
 (let (($x121 (= false false)))
 (let (($x76 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x166 (=> $x76 $x121)))
 (let (($x207 (= $x76 $x206)))
 (let (($x177 (and (and (and $x207 $x166) $x326) $x352)))
 (let (($x297 (= $x177 true)))
 (let (($x353 (forall ((input.ind-%var2630X (_ BitVec 32)) )(let (($x363 (= input.ind-%var2630X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x196 (ite $x38 $x363 false)))
 (let (($x288 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2630X)))
 (let (($x299 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x299 (= $x288 $x196))))))))
 ))
 (let (($x324 (forall ((input.ind-%var2631X (_ BitVec 32)) )(let ((?x23 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x363 (= input.ind-%var2631X input.spec-%var-y-0)))
 (let ((?x211 (ite $x363 ?x23 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x335 (ite $x38 ?x211 (_ bv0 32))))
 (let ((?x380 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2631X)))
 (let (($x288 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2631X)))
 (let (($x299 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x299 $x288) (= ?x380 ?x335)))))))))))
 ))
 (let (($x346 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x271 (= $x346 $x191)))
 (let (($x384 (=> $x346 $x121)))
 (let (($x299 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x167 (= $x299 $x12)))
 (let (($x286 (and (and (and (and $x167 $x384) $x271) $x324) $x353)))
 (let (($x331 (= $x286 true)))
 (let (($x158 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x69 (= $x158 true)))
 (let (($x165 (= $x69 true)))
 (let (($x15 (= $x165 true)))
 (let (($x189 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x149 (= $x189 true)))
 (let (($x55 (= $x149 true)))
 (let (($x150 (= $x55 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x171 (concat ?x131 (concat ?x114 ?x122)))))
 (let (($x138 (= ?x137 input.dst.llvm-%y)))
 (let (($x188 (= $x138 true)))
 (let (($x172 (= $x188 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x63 (concat ?x134 (concat ?x44 ?x64)))))
 (let (($x103 (= ?x123 input.dst.llvm-%x)))
 (let (($x116 (= $x103 true)))
 (let (($x111 (= $x116 true)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x98)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x49)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x95 $x58)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (and $x9 $x53)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x28 $x52)))
 (let (($x6 (not $x13)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x104 $x93)))
 (let (($x54 (and (not $x60) $x6)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x14 $x133)))
 (let (($x26 (not $x94)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x82 $x89)))
 (let (($x39 (and (not $x132) $x26)))
 (let (($x85 (and (and (and (and (and (and $x39 $x54) $x56) $x73) $x75) $x31) $x66)))
 (let (($x129 (and $x85 $x46)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x96 (or false (or false (and (and true (or $x105 $x41)) (or $x87 $x108))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x96)))
 (let (($x91 (and $x19 $x129)))
 (let (($x61 (= $x91 true)))
 (let (($x40 (= $x61 true)))
 (let (($x135 (= $x40 true)))
 (let (($x126 (and $x135 $x111)))
 (let (($x142 (and $x126 $x172)))
 (let (($x239 (and $x142 $x150)))
 (let (($x240 (and $x239 $x15)))
 (let (($x200 (and $x240 $x331)))
 (let (($x157 (and $x200 $x297)))
 (let (($x295 (and $x157 $x294)))
 (let (($x351 (and $x295 $x197)))
 (let (($x344 (and $x351 $x393)))
 (let (($x366 (and $x344 $x280)))
 (let (($x252 (and $x366 $x220)))
 (let (($x385 (and $x252 $x243)))
 (let (($x25 (= ?x23 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x99 (and $x25 $x385)))
 (let (($x303 (and $x121 $x99)))
 (let (($x50 (= input.spec-%var-m2-0.L2%18%bbentry ?x35)))
 (let (($x302 (and $x50 $x303)))
 (let (($x255 (and $x121 $x302)))
 (let (($x369 (=> $x255 $x341)))
 (not $x369))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675918/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x38 ?x80 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x68 (ite $x51 ?x45 (_ bv0 32))))
 (let ((?x141 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x337 (= ?x141 ?x68)))
 (let (($x183 (= $x337 true)))
 (let (($x153 (= $x183 true)))
 (let (($x169 (forall ((input.ind-%var2887X (_ BitVec 32)) (input.ind-%var2889X (_ BitVec 32)) )(let ((?x80 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x196 (= input.ind-%var2889X input.spec-%var-y-0)))
 (let ((?x144 (ite $x196 ?x80 (_ bv0 32))))
 (let (($x241 (= input.ind-%var2887X input.spec-%var-x-0)))
 (let ((?x319 (ite $x241 ?x144 (_ bv0 32))))
 (let ((?x275 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2887X input.ind-%var2889X)))
 (let (($x338 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2887X input.ind-%var2889X)))
 (let (($x262 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2887X)))
 (=> (and $x262 $x338) (= ?x275 ?x319)))))))))))
 ))
 (let (($x365 (forall ((input.ind-%var2887X (_ BitVec 32)) (input.ind-%var2888X (_ BitVec 32)) )(let (($x196 (= input.ind-%var2888X input.spec-%var-y-0)))
 (let (($x241 (= input.ind-%var2887X input.spec-%var-x-0)))
 (let (($x222 (ite $x241 $x196 false)))
 (let (($x338 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2887X input.ind-%var2888X)))
 (let (($x262 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2887X)))
 (=> $x262 (= $x338 $x222))))))))
 ))
 (let (($x334 (forall ((input.ind-%var2886X (_ BitVec 32)) )(let (($x33 (= input.ind-%var2886X input.spec-%var-x-0)))
 (let (($x391 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2886X)))
 (= $x391 $x33))))
 ))
 (let (($x330 (and (and $x334 $x365) $x169)))
 (let (($x145 (= $x330 true)))
 (let (($x235 (forall ((input.ind-%var2871X (_ BitVec 32)) (input.ind-%var2873X (_ BitVec 32)) )(let ((?x80 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x196 (= input.ind-%var2873X input.spec-%var-y-0)))
 (let ((?x144 (ite $x196 ?x80 (_ bv0 32))))
 (let (($x241 (= input.ind-%var2871X input.spec-%var-x-0)))
 (let ((?x319 (ite $x241 ?x144 (_ bv0 32))))
 (let ((?x348 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2871X input.ind-%var2873X)))
 (let (($x388 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2871X input.ind-%var2873X)))
 (let (($x225 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2871X)))
 (=> (and $x225 $x388) (= ?x348 ?x319)))))))))))
 ))
 (let (($x323 (forall ((input.ind-%var2871X (_ BitVec 32)) (input.ind-%var2872X (_ BitVec 32)) )(let (($x196 (= input.ind-%var2872X input.spec-%var-y-0)))
 (let (($x241 (= input.ind-%var2871X input.spec-%var-x-0)))
 (let (($x222 (ite $x241 $x196 false)))
 (let (($x388 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2871X input.ind-%var2872X)))
 (let (($x225 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2871X)))
 (=> $x225 (= $x388 $x222))))))))
 ))
 (let (($x117 (forall ((input.ind-%var2870X (_ BitVec 32)) )(let (($x33 (= input.ind-%var2870X input.spec-%var-x-0)))
 (let (($x287 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2870X)))
 (= $x287 $x33))))
 ))
 (let (($x345 (and (and $x117 $x323) $x235)))
 (let (($x263 (= $x345 true)))
 (let (($x257 (forall ((input.ind-%var2857X (_ BitVec 32)) )(let ((?x80 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x196 (= input.ind-%var2857X input.spec-%var-y-0)))
 (let ((?x144 (ite $x196 ?x80 (_ bv0 32))))
 (let ((?x182 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2857X)))
 (let (($x315 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2857X)))
 (=> $x315 (= ?x182 ?x144))))))))
 ))
 (let (($x178 (forall ((input.ind-%var2856X (_ BitVec 32)) )(let (($x196 (= input.ind-%var2856X input.spec-%var-y-0)))
 (let (($x315 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2856X)))
 (= $x315 $x196))))
 ))
 (let (($x210 (and $x178 $x257)))
 (let (($x372 (= $x210 true)))
 (let (($x369 (forall ((input.ind-%var2849X (_ BitVec 32)) )(let (($x374 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2849X)))
 (=> $x374 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2849X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var2848X (_ BitVec 32)) )(let (($x374 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2848X)))
 (= $x374 false)))
 ))
 (let (($x306 (and $x99 $x369)))
 (let (($x21 (= $x306 true)))
 (let (($x174 (forall ((input.ind-%var2841X (_ BitVec 32)) (input.ind-%var2843X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2841X input.ind-%var2843X)))
 (let (($x173 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2841X)))
 (=> (and $x173 $x332) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2841X input.ind-%var2843X) (_ bv0 32))))))
 ))
 (let (($x226 (forall ((input.ind-%var2841X (_ BitVec 32)) (input.ind-%var2842X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2841X)))
 (=> $x173 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2841X input.ind-%var2842X) false))))
 ))
 (let (($x266 (forall ((input.ind-%var2840X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2840X)))
 (= $x281 false)))
 ))
 (let (($x396 (and (and $x266 $x226) $x174)))
 (let (($x115 (= $x396 true)))
 (let (($x398 (forall ((input.ind-%var2830X (_ BitVec 32)) )(let (($x196 (= input.ind-%var2830X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x296 (ite $x51 $x196 false)))
 (let (($x250 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2830X)))
 (= $x250 $x296))))))
 ))
 (let (($x109 (forall ((input.ind-%var2831X (_ BitVec 32)) )(let ((?x80 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x196 (= input.ind-%var2831X input.spec-%var-y-0)))
 (let ((?x144 (ite $x196 ?x80 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x326 (ite $x51 ?x144 (_ bv0 32))))
 (let ((?x278 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2831X)))
 (let (($x250 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2831X)))
 (=> $x250 (= ?x278 ?x326))))))))))
 ))
 (let (($x57 (and $x109 $x398)))
 (let (($x370 (= $x57 true)))
 (let (($x387 (= input.spec-%tmpvar-6.L2%13%d.2 ?x68)))
 (let (($x294 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x343 (=> $x294 $x387)))
 (let (($x22 (ite $x51 $x38 false)))
 (let ((?x27 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x27 (_ bv1 32))))
 (let (($x295 (= $x294 $x106)))
 (let (($x88 (= false false)))
 (let (($x309 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x245 (=> $x309 $x88)))
 (let (($x367 (= ?x27 (_ bv0 32))))
 (let (($x185 (= $x309 $x367)))
 (let (($x159 (and (and (and $x185 $x245) $x295) $x343)))
 (let (($x342 (= $x159 true)))
 (let (($x352 (forall ((input.ind-%var2813X (_ BitVec 32)) )(let ((?x80 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x196 (= input.ind-%var2813X input.spec-%var-y-0)))
 (let ((?x144 (ite $x196 ?x80 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x326 (ite $x51 ?x144 (_ bv0 32))))
 (let ((?x327 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2813X)))
 (let (($x211 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2813X)))
 (let (($x191 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x191 $x211) (= ?x327 ?x326)))))))))))
 ))
 (let (($x286 (forall ((input.ind-%var2812X (_ BitVec 32)) )(let (($x196 (= input.ind-%var2812X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x296 (ite $x51 $x196 false)))
 (let (($x211 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2812X)))
 (let (($x191 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x191 (= $x211 $x296))))))))
 ))
 (let ((?x30 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (= ?x30 (_ bv0 32))))
 (let (($x312 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x397 (= $x312 $x288)))
 (let (($x284 (=> $x312 $x88)))
 (let (($x25 (bvuge ?x30 (_ bv1 32))))
 (let (($x191 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x271 (= $x191 $x25)))
 (let (($x155 (and (and (and (and $x271 $x284) $x397) $x286) $x352)))
 (let (($x395 (= $x155 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x130 (concat ?x126 (concat ?x118 ?x107)))))
 (let (($x167 (= ?x131 input.dst.llvm-%x)))
 (let (($x346 (= $x167 true)))
 (let (($x121 (= $x346 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x189 (concat ?x142 (concat ?x138 (concat ?x10 ?x122)))))
 (let (($x34 (= ?x189 input.dst.llvm-%y)))
 (let (($x299 (= $x34 true)))
 (let (($x304 (= $x299 true)))
 (let (($x149 (= input.dst.llvm-%y ?x189)))
 (let (($x120 (= input.dst.llvm-%x ?x131)))
 (let (($x55 (and $x120 $x149)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x135)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x61)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x78 $x85)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x31 $x98)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x16 $x9)))
 (let (($x47 (not $x95)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (and $x84 $x72)))
 (let (($x58 (and (not $x73) $x47)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x13 $x6)))
 (let (($x17 (not $x54)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x83 $x28)))
 (let (($x56 (and (not $x52) $x17)))
 (let (($x92 (and (and (and (and (and (and $x56 $x58) $x75) $x32) $x46) $x91) $x40)))
 (let (($x44 (and $x92 $x59)))
 (let (($x87 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x104 (or false (or false (and (and true (or $x96 $x19)) (or $x14 $x133))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x104)))
 (let (($x158 (and (and (and $x60 $x87) $x44) $x55)))
 (let (($x41 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x69 (and $x41 $x158)))
 (let (($x165 (= $x69 true)))
 (let (($x15 (= $x165 true)))
 (let (($x240 (= $x15 true)))
 (let (($x12 (and $x240 $x304)))
 (let (($x384 (and $x12 $x121)))
 (let (($x383 (and $x384 $x395)))
 (let (($x308 (and $x383 $x342)))
 (let (($x283 (and $x308 $x370)))
 (let (($x375 (and $x283 $x115)))
 (let (($x127 (and $x375 $x21)))
 (let (($x228 (and $x127 $x372)))
 (let (($x97 (and $x228 $x263)))
 (let (($x274 (and $x97 $x145)))
 (let (($x105 (and $x25 $x106)))
 (let (($x192 (and $x105 $x274)))
 (let (($x23 (= ?x80 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x293 (and $x23 $x192)))
 (let (($x264 (and $x88 $x293)))
 (let (($x35 (= input.spec-%var-m2-0.L2%18%bbentry ?x68)))
 (let (($x214 (and $x35 $x264)))
 (let (($x215 (and $x88 $x214)))
 (let (($x354 (=> $x215 $x153)))
 (not $x354))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x38 ?x80 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x68 (ite $x51 ?x45 (_ bv0 32))))
 (let ((?x141 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x337 (= ?x141 ?x68)))
 (let (($x183 (= $x337 true)))
 (let (($x153 (= $x183 true)))
 (let (($x169 (forall ((input.ind-%var2887X (_ BitVec 32)) (input.ind-%var2889X (_ BitVec 32)) )(let ((?x80 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x196 (= input.ind-%var2889X input.spec-%var-y-0)))
 (let ((?x144 (ite $x196 ?x80 (_ bv0 32))))
 (let (($x241 (= input.ind-%var2887X input.spec-%var-x-0)))
 (let ((?x319 (ite $x241 ?x144 (_ bv0 32))))
 (let ((?x275 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2887X input.ind-%var2889X)))
 (let (($x338 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2887X input.ind-%var2889X)))
 (let (($x262 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2887X)))
 (=> (and $x262 $x338) (= ?x275 ?x319)))))))))))
 ))
 (let (($x365 (forall ((input.ind-%var2887X (_ BitVec 32)) (input.ind-%var2888X (_ BitVec 32)) )(let (($x196 (= input.ind-%var2888X input.spec-%var-y-0)))
 (let (($x241 (= input.ind-%var2887X input.spec-%var-x-0)))
 (let (($x222 (ite $x241 $x196 false)))
 (let (($x338 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2887X input.ind-%var2888X)))
 (let (($x262 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2887X)))
 (=> $x262 (= $x338 $x222))))))))
 ))
 (let (($x334 (forall ((input.ind-%var2886X (_ BitVec 32)) )(let (($x33 (= input.ind-%var2886X input.spec-%var-x-0)))
 (let (($x391 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2886X)))
 (= $x391 $x33))))
 ))
 (let (($x330 (and (and $x334 $x365) $x169)))
 (let (($x145 (= $x330 true)))
 (let (($x235 (forall ((input.ind-%var2871X (_ BitVec 32)) (input.ind-%var2873X (_ BitVec 32)) )(let ((?x80 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x196 (= input.ind-%var2873X input.spec-%var-y-0)))
 (let ((?x144 (ite $x196 ?x80 (_ bv0 32))))
 (let (($x241 (= input.ind-%var2871X input.spec-%var-x-0)))
 (let ((?x319 (ite $x241 ?x144 (_ bv0 32))))
 (let ((?x348 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2871X input.ind-%var2873X)))
 (let (($x388 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2871X input.ind-%var2873X)))
 (let (($x225 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2871X)))
 (=> (and $x225 $x388) (= ?x348 ?x319)))))))))))
 ))
 (let (($x323 (forall ((input.ind-%var2871X (_ BitVec 32)) (input.ind-%var2872X (_ BitVec 32)) )(let (($x196 (= input.ind-%var2872X input.spec-%var-y-0)))
 (let (($x241 (= input.ind-%var2871X input.spec-%var-x-0)))
 (let (($x222 (ite $x241 $x196 false)))
 (let (($x388 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2871X input.ind-%var2872X)))
 (let (($x225 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2871X)))
 (=> $x225 (= $x388 $x222))))))))
 ))
 (let (($x117 (forall ((input.ind-%var2870X (_ BitVec 32)) )(let (($x33 (= input.ind-%var2870X input.spec-%var-x-0)))
 (let (($x287 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2870X)))
 (= $x287 $x33))))
 ))
 (let (($x345 (and (and $x117 $x323) $x235)))
 (let (($x263 (= $x345 true)))
 (let (($x257 (forall ((input.ind-%var2857X (_ BitVec 32)) )(let ((?x80 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x196 (= input.ind-%var2857X input.spec-%var-y-0)))
 (let ((?x144 (ite $x196 ?x80 (_ bv0 32))))
 (let ((?x182 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2857X)))
 (let (($x315 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2857X)))
 (=> $x315 (= ?x182 ?x144))))))))
 ))
 (let (($x178 (forall ((input.ind-%var2856X (_ BitVec 32)) )(let (($x196 (= input.ind-%var2856X input.spec-%var-y-0)))
 (let (($x315 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2856X)))
 (= $x315 $x196))))
 ))
 (let (($x210 (and $x178 $x257)))
 (let (($x372 (= $x210 true)))
 (let (($x369 (forall ((input.ind-%var2849X (_ BitVec 32)) )(let (($x374 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2849X)))
 (=> $x374 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2849X) (_ bv0 32)))))
 ))
 (let (($x99 (forall ((input.ind-%var2848X (_ BitVec 32)) )(let (($x374 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2848X)))
 (= $x374 false)))
 ))
 (let (($x306 (and $x99 $x369)))
 (let (($x21 (= $x306 true)))
 (let (($x174 (forall ((input.ind-%var2841X (_ BitVec 32)) (input.ind-%var2843X (_ BitVec 32)) )(let (($x332 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2841X input.ind-%var2843X)))
 (let (($x173 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2841X)))
 (=> (and $x173 $x332) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2841X input.ind-%var2843X) (_ bv0 32))))))
 ))
 (let (($x226 (forall ((input.ind-%var2841X (_ BitVec 32)) (input.ind-%var2842X (_ BitVec 32)) )(let (($x173 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2841X)))
 (=> $x173 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2841X input.ind-%var2842X) false))))
 ))
 (let (($x266 (forall ((input.ind-%var2840X (_ BitVec 32)) )(let (($x281 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2840X)))
 (= $x281 false)))
 ))
 (let (($x396 (and (and $x266 $x226) $x174)))
 (let (($x115 (= $x396 true)))
 (let (($x398 (forall ((input.ind-%var2830X (_ BitVec 32)) )(let (($x196 (= input.ind-%var2830X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x296 (ite $x51 $x196 false)))
 (let (($x250 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2830X)))
 (= $x250 $x296))))))
 ))
 (let (($x109 (forall ((input.ind-%var2831X (_ BitVec 32)) )(let ((?x80 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x196 (= input.ind-%var2831X input.spec-%var-y-0)))
 (let ((?x144 (ite $x196 ?x80 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x326 (ite $x51 ?x144 (_ bv0 32))))
 (let ((?x278 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2831X)))
 (let (($x250 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2831X)))
 (=> $x250 (= ?x278 ?x326))))))))))
 ))
 (let (($x57 (and $x109 $x398)))
 (let (($x370 (= $x57 true)))
 (let (($x387 (= input.spec-%tmpvar-6.L2%13%d.2 ?x68)))
 (let (($x294 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x343 (=> $x294 $x387)))
 (let (($x22 (ite $x51 $x38 false)))
 (let ((?x27 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x27 (_ bv1 32))))
 (let (($x295 (= $x294 $x106)))
 (let (($x88 (= false false)))
 (let (($x309 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x245 (=> $x309 $x88)))
 (let (($x367 (= ?x27 (_ bv0 32))))
 (let (($x185 (= $x309 $x367)))
 (let (($x159 (and (and (and $x185 $x245) $x295) $x343)))
 (let (($x342 (= $x159 true)))
 (let (($x352 (forall ((input.ind-%var2813X (_ BitVec 32)) )(let ((?x80 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x196 (= input.ind-%var2813X input.spec-%var-y-0)))
 (let ((?x144 (ite $x196 ?x80 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x326 (ite $x51 ?x144 (_ bv0 32))))
 (let ((?x327 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2813X)))
 (let (($x211 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2813X)))
 (let (($x191 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x191 $x211) (= ?x327 ?x326)))))))))))
 ))
 (let (($x286 (forall ((input.ind-%var2812X (_ BitVec 32)) )(let (($x196 (= input.ind-%var2812X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x296 (ite $x51 $x196 false)))
 (let (($x211 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2812X)))
 (let (($x191 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x191 (= $x211 $x296))))))))
 ))
 (let ((?x30 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (= ?x30 (_ bv0 32))))
 (let (($x312 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x397 (= $x312 $x288)))
 (let (($x284 (=> $x312 $x88)))
 (let (($x25 (bvuge ?x30 (_ bv1 32))))
 (let (($x191 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x271 (= $x191 $x25)))
 (let (($x155 (and (and (and (and $x271 $x284) $x397) $x286) $x352)))
 (let (($x395 (= $x155 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x130 (concat ?x126 (concat ?x118 ?x107)))))
 (let (($x167 (= ?x131 input.dst.llvm-%x)))
 (let (($x346 (= $x167 true)))
 (let (($x121 (= $x346 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x189 (concat ?x142 (concat ?x138 (concat ?x10 ?x122)))))
 (let (($x34 (= ?x189 input.dst.llvm-%y)))
 (let (($x299 (= $x34 true)))
 (let (($x304 (= $x299 true)))
 (let (($x149 (= input.dst.llvm-%y ?x189)))
 (let (($x120 (= input.dst.llvm-%x ?x131)))
 (let (($x55 (and $x120 $x149)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x135)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x61)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x78 $x85)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x31 $x98)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x16 $x9)))
 (let (($x47 (not $x95)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (and $x84 $x72)))
 (let (($x58 (and (not $x73) $x47)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x13 $x6)))
 (let (($x17 (not $x54)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x83 $x28)))
 (let (($x56 (and (not $x52) $x17)))
 (let (($x92 (and (and (and (and (and (and $x56 $x58) $x75) $x32) $x46) $x91) $x40)))
 (let (($x44 (and $x92 $x59)))
 (let (($x87 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x104 (or false (or false (and (and true (or $x96 $x19)) (or $x14 $x133))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x104)))
 (let (($x158 (and (and (and $x60 $x87) $x44) $x55)))
 (let (($x41 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x69 (and $x41 $x158)))
 (let (($x165 (= $x69 true)))
 (let (($x15 (= $x165 true)))
 (let (($x240 (= $x15 true)))
 (let (($x12 (and $x240 $x304)))
 (let (($x384 (and $x12 $x121)))
 (let (($x383 (and $x384 $x395)))
 (let (($x308 (and $x383 $x342)))
 (let (($x283 (and $x308 $x370)))
 (let (($x375 (and $x283 $x115)))
 (let (($x127 (and $x375 $x21)))
 (let (($x228 (and $x127 $x372)))
 (let (($x97 (and $x228 $x263)))
 (let (($x274 (and $x97 $x145)))
 (let (($x105 (and $x25 $x106)))
 (let (($x192 (and $x105 $x274)))
 (let (($x23 (= ?x80 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x293 (and $x23 $x192)))
 (let (($x264 (and $x88 $x293)))
 (let (($x35 (= input.spec-%var-m2-0.L2%18%bbentry ?x68)))
 (let (($x214 (and $x35 $x264)))
 (let (($x215 (and $x88 $x214)))
 (let (($x354 (=> $x215 $x153)))
 (not $x354))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675918/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x261 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x152 (= input.spec-%var-y-0 ?x261)))
 (let (($x307 (= $x152 true)))
 (let (($x325 (= $x307 true)))
 (let (($x190 (forall ((input.ind-%var3063X (_ BitVec 32)) (input.ind-%var3065X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x352 (= input.ind-%var3065X input.spec-%var-y-0)))
 (let ((?x155 (ite $x352 ?x30 (_ bv0 32))))
 (let (($x208 (= input.ind-%var3063X input.spec-%var-x-0)))
 (let ((?x203 (ite $x208 ?x155 (_ bv0 32))))
 (let ((?x336 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3063X input.ind-%var3065X)))
 (let (($x200 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3063X input.ind-%var3065X)))
 (let (($x269 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3063X)))
 (=> (and $x269 $x200) (= ?x336 ?x203)))))))))))
 ))
 (let (($x205 (forall ((input.ind-%var3063X (_ BitVec 32)) (input.ind-%var3064X (_ BitVec 32)) )(let (($x352 (= input.ind-%var3064X input.spec-%var-y-0)))
 (let (($x208 (= input.ind-%var3063X input.spec-%var-x-0)))
 (let (($x220 (ite $x208 $x352 false)))
 (let (($x200 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3063X input.ind-%var3064X)))
 (let (($x269 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3063X)))
 (=> $x269 (= $x200 $x220))))))))
 ))
 (let (($x393 (forall ((input.ind-%var3062X (_ BitVec 32)) )(let (($x197 (= input.ind-%var3062X input.spec-%var-x-0)))
 (let (($x339 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3062X)))
 (= $x339 $x197))))
 ))
 (let (($x371 (and (and $x393 $x205) $x190)))
 (let (($x179 (= $x371 true)))
 (let (($x350 (forall ((input.ind-%var3047X (_ BitVec 32)) (input.ind-%var3049X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x352 (= input.ind-%var3049X input.spec-%var-y-0)))
 (let ((?x155 (ite $x352 ?x30 (_ bv0 32))))
 (let (($x208 (= input.ind-%var3047X input.spec-%var-x-0)))
 (let ((?x203 (ite $x208 ?x155 (_ bv0 32))))
 (let ((?x254 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3047X input.ind-%var3049X)))
 (let (($x218 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3047X input.ind-%var3049X)))
 (let (($x291 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3047X)))
 (=> (and $x291 $x218) (= ?x254 ?x203)))))))))))
 ))
 (let (($x333 (forall ((input.ind-%var3047X (_ BitVec 32)) (input.ind-%var3048X (_ BitVec 32)) )(let (($x352 (= input.ind-%var3048X input.spec-%var-y-0)))
 (let (($x208 (= input.ind-%var3047X input.spec-%var-x-0)))
 (let (($x220 (ite $x208 $x352 false)))
 (let (($x218 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3047X input.ind-%var3048X)))
 (let (($x291 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3047X)))
 (=> $x291 (= $x218 $x220))))))))
 ))
 (let (($x303 (forall ((input.ind-%var3046X (_ BitVec 32)) )(let (($x197 (= input.ind-%var3046X input.spec-%var-x-0)))
 (let (($x119 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3046X)))
 (= $x119 $x197))))
 ))
 (let (($x270 (and (and $x303 $x333) $x350)))
 (let (($x195 (= $x270 true)))
 (let (($x378 (forall ((input.ind-%var3033X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x352 (= input.ind-%var3033X input.spec-%var-y-0)))
 (let ((?x155 (ite $x352 ?x30 (_ bv0 32))))
 (let ((?x229 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3033X)))
 (let (($x244 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3033X)))
 (=> $x244 (= ?x229 ?x155))))))))
 ))
 (let (($x162 (forall ((input.ind-%var3032X (_ BitVec 32)) )(let (($x352 (= input.ind-%var3032X input.spec-%var-y-0)))
 (let (($x244 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3032X)))
 (= $x244 $x352))))
 ))
 (let (($x206 (and $x162 $x378)))
 (let (($x207 (= $x206 true)))
 (let (($x11 (forall ((input.ind-%var3025X (_ BitVec 32)) )(let (($x330 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3025X)))
 (=> $x330 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3025X) (_ bv0 32)))))
 ))
 (let (($x293 (forall ((input.ind-%var3024X (_ BitVec 32)) )(let (($x330 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3024X)))
 (= $x330 false)))
 ))
 (let (($x114 (and $x293 $x11)))
 (let (($x71 (= $x114 true)))
 (let (($x365 (forall ((input.ind-%var3017X (_ BitVec 32)) (input.ind-%var3019X (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3017X input.ind-%var3019X)))
 (let (($x319 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3017X)))
 (=> (and $x319 $x279) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3017X input.ind-%var3019X) (_ bv0 32))))))
 ))
 (let (($x386 (forall ((input.ind-%var3017X (_ BitVec 32)) (input.ind-%var3018X (_ BitVec 32)) )(let (($x319 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3017X)))
 (=> $x319 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3017X input.ind-%var3018X) false))))
 ))
 (let (($x249 (forall ((input.ind-%var3016X (_ BitVec 32)) )(let (($x372 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3016X)))
 (= $x372 false)))
 ))
 (let (($x359 (and (and $x249 $x386) $x365)))
 (let (($x275 (= $x359 true)))
 (let (($x178 (forall ((input.ind-%var3007X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x352 (= input.ind-%var3007X input.spec-%var-y-0)))
 (let ((?x155 (ite $x352 ?x30 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x395 (ite $x38 ?x155 (_ bv0 32))))
 (let ((?x317 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3007X)))
 (let (($x252 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3007X)))
 (=> $x252 (= ?x317 ?x395))))))))))
 ))
 (let (($x375 (forall ((input.ind-%var3006X (_ BitVec 32)) )(let (($x352 (= input.ind-%var3006X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x379 (ite $x38 $x352 false)))
 (let (($x252 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3006X)))
 (= $x252 $x379))))))
 ))
 (let (($x182 (and $x375 $x178)))
 (let (($x164 (= $x182 true)))
 (let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x51 ?x30 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x25 (ite $x38 ?x45 (_ bv0 32))))
 (let (($x266 (= input.spec-%tmpvar-6.L2%13%d.2 ?x25)))
 (let (($x370 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x184 (=> $x370 $x266)))
 (let (($x22 (ite $x38 $x51 false)))
 (let ((?x27 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x27 (_ bv1 32))))
 (let (($x281 (= $x370 $x283)))
 (let (($x37 (= false false)))
 (let (($x382 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x57 (=> $x382 $x37)))
 (let (($x106 (= ?x27 (_ bv0 32))))
 (let (($x398 (= $x382 $x106)))
 (let (($x237 (and (and (and $x398 $x57) $x281) $x184)))
 (let (($x194 (= $x237 true)))
 (let (($x159 (forall ((input.ind-%var2988X (_ BitVec 32)) )(let (($x352 (= input.ind-%var2988X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x379 (ite $x38 $x352 false)))
 (let (($x296 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2988X)))
 (let (($x284 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x284 (= $x296 $x379))))))))
 ))
 (let (($x367 (forall ((input.ind-%var2989X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x352 (= input.ind-%var2989X input.spec-%var-y-0)))
 (let ((?x155 (ite $x352 ?x30 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x395 (ite $x38 ?x155 (_ bv0 32))))
 (let ((?x157 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2989X)))
 (let (($x296 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2989X)))
 (let (($x284 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x284 $x296) (= ?x157 ?x395)))))))))))
 ))
 (let ((?x86 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x86 (_ bv0 32))))
 (let (($x288 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x363 (= $x288 $x297)))
 (let (($x397 (=> $x288 $x37)))
 (let (($x23 (bvuge ?x86 (_ bv1 32))))
 (let (($x284 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x177 (= $x284 $x23)))
 (let (($x278 (and (and (and (and $x177 $x397) $x363) $x367) $x159)))
 (let (($x285 (= $x278 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x131 (concat ?x107 (concat ?x111 ?x130)))))
 (let (($x329 (= ?x120 input.dst.llvm-%x)))
 (let (($x191 (= $x329 true)))
 (let (($x271 (= $x191 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x149 (concat ?x137 (concat ?x125 ?x7)))))
 (let (($x167 (= ?x55 input.dst.llvm-%y)))
 (let (($x346 (= $x167 true)))
 (let (($x121 (= $x346 true)))
 (let (($x158 (= input.dst.llvm-%y ?x55)))
 (let (($x172 (= input.dst.llvm-%x ?x120)))
 (let (($x69 (and $x172 $x158)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x91)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x113)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (and $x124 $x49)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x32 $x66)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x16 $x9)))
 (let (($x47 (not $x95)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x72 $x73)))
 (let (($x101 (and (not $x65) $x47)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x13 $x6)))
 (let (($x17 (not $x54)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x28 $x52)))
 (let (($x84 (and (not $x81) $x17)))
 (let (($x44 (and (and (and (and (and (and $x84 $x101) $x75) $x42) $x85) $x46) $x129)))
 (let (($x239 (and $x44 $x134)))
 (let (($x70 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x87 (or false (or false (and (and true (or $x89 $x132)) (or $x26 $x39))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x240 (and (and (and $x83 $x70) $x239) $x69)))
 (let (($x41 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x34 (and $x41 $x240)))
 (let (($x299 (= $x34 true)))
 (let (($x304 (= $x299 true)))
 (let (($x12 (= $x304 true)))
 (let (($x384 (and $x12 $x121)))
 (let (($x312 (and $x384 $x271)))
 (let (($x328 (and $x312 $x285)))
 (let (($x226 (and $x328 $x194)))
 (let (($x272 (and $x226 $x164)))
 (let (($x340 (and $x272 $x275)))
 (let (($x335 (and $x340 $x71)))
 (let (($x381 (and $x335 $x207)))
 (let (($x202 (and $x381 $x195)))
 (let (($x112 (and $x202 $x179)))
 (let (($x105 (and $x23 $x106)))
 (let (($x248 (and $x105 $x112)))
 (let (($x80 (= ?x30 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x247 (and $x80 $x248)))
 (let (($x62 (and $x37 $x247)))
 (let (($x68 (= input.spec-%var-m2-0.L2%18%bbentry ?x25)))
 (let (($x394 (and $x68 $x62)))
 (let (($x267 (and $x37 $x394)))
 (let (($x358 (=> $x267 $x325)))
 (not $x358))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x261 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x152 (= input.spec-%var-y-0 ?x261)))
 (let (($x307 (= $x152 true)))
 (let (($x325 (= $x307 true)))
 (let (($x190 (forall ((input.ind-%var3063X (_ BitVec 32)) (input.ind-%var3065X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x352 (= input.ind-%var3065X input.spec-%var-y-0)))
 (let ((?x155 (ite $x352 ?x30 (_ bv0 32))))
 (let (($x208 (= input.ind-%var3063X input.spec-%var-x-0)))
 (let ((?x203 (ite $x208 ?x155 (_ bv0 32))))
 (let ((?x336 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3063X input.ind-%var3065X)))
 (let (($x200 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3063X input.ind-%var3065X)))
 (let (($x269 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3063X)))
 (=> (and $x269 $x200) (= ?x336 ?x203)))))))))))
 ))
 (let (($x205 (forall ((input.ind-%var3063X (_ BitVec 32)) (input.ind-%var3064X (_ BitVec 32)) )(let (($x352 (= input.ind-%var3064X input.spec-%var-y-0)))
 (let (($x208 (= input.ind-%var3063X input.spec-%var-x-0)))
 (let (($x220 (ite $x208 $x352 false)))
 (let (($x200 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3063X input.ind-%var3064X)))
 (let (($x269 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3063X)))
 (=> $x269 (= $x200 $x220))))))))
 ))
 (let (($x393 (forall ((input.ind-%var3062X (_ BitVec 32)) )(let (($x197 (= input.ind-%var3062X input.spec-%var-x-0)))
 (let (($x339 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3062X)))
 (= $x339 $x197))))
 ))
 (let (($x371 (and (and $x393 $x205) $x190)))
 (let (($x179 (= $x371 true)))
 (let (($x350 (forall ((input.ind-%var3047X (_ BitVec 32)) (input.ind-%var3049X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x352 (= input.ind-%var3049X input.spec-%var-y-0)))
 (let ((?x155 (ite $x352 ?x30 (_ bv0 32))))
 (let (($x208 (= input.ind-%var3047X input.spec-%var-x-0)))
 (let ((?x203 (ite $x208 ?x155 (_ bv0 32))))
 (let ((?x254 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3047X input.ind-%var3049X)))
 (let (($x218 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3047X input.ind-%var3049X)))
 (let (($x291 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3047X)))
 (=> (and $x291 $x218) (= ?x254 ?x203)))))))))))
 ))
 (let (($x333 (forall ((input.ind-%var3047X (_ BitVec 32)) (input.ind-%var3048X (_ BitVec 32)) )(let (($x352 (= input.ind-%var3048X input.spec-%var-y-0)))
 (let (($x208 (= input.ind-%var3047X input.spec-%var-x-0)))
 (let (($x220 (ite $x208 $x352 false)))
 (let (($x218 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3047X input.ind-%var3048X)))
 (let (($x291 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3047X)))
 (=> $x291 (= $x218 $x220))))))))
 ))
 (let (($x303 (forall ((input.ind-%var3046X (_ BitVec 32)) )(let (($x197 (= input.ind-%var3046X input.spec-%var-x-0)))
 (let (($x119 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3046X)))
 (= $x119 $x197))))
 ))
 (let (($x270 (and (and $x303 $x333) $x350)))
 (let (($x195 (= $x270 true)))
 (let (($x378 (forall ((input.ind-%var3033X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x352 (= input.ind-%var3033X input.spec-%var-y-0)))
 (let ((?x155 (ite $x352 ?x30 (_ bv0 32))))
 (let ((?x229 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3033X)))
 (let (($x244 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3033X)))
 (=> $x244 (= ?x229 ?x155))))))))
 ))
 (let (($x162 (forall ((input.ind-%var3032X (_ BitVec 32)) )(let (($x352 (= input.ind-%var3032X input.spec-%var-y-0)))
 (let (($x244 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3032X)))
 (= $x244 $x352))))
 ))
 (let (($x206 (and $x162 $x378)))
 (let (($x207 (= $x206 true)))
 (let (($x11 (forall ((input.ind-%var3025X (_ BitVec 32)) )(let (($x330 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3025X)))
 (=> $x330 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3025X) (_ bv0 32)))))
 ))
 (let (($x293 (forall ((input.ind-%var3024X (_ BitVec 32)) )(let (($x330 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3024X)))
 (= $x330 false)))
 ))
 (let (($x114 (and $x293 $x11)))
 (let (($x71 (= $x114 true)))
 (let (($x365 (forall ((input.ind-%var3017X (_ BitVec 32)) (input.ind-%var3019X (_ BitVec 32)) )(let (($x279 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3017X input.ind-%var3019X)))
 (let (($x319 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3017X)))
 (=> (and $x319 $x279) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3017X input.ind-%var3019X) (_ bv0 32))))))
 ))
 (let (($x386 (forall ((input.ind-%var3017X (_ BitVec 32)) (input.ind-%var3018X (_ BitVec 32)) )(let (($x319 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3017X)))
 (=> $x319 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3017X input.ind-%var3018X) false))))
 ))
 (let (($x249 (forall ((input.ind-%var3016X (_ BitVec 32)) )(let (($x372 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3016X)))
 (= $x372 false)))
 ))
 (let (($x359 (and (and $x249 $x386) $x365)))
 (let (($x275 (= $x359 true)))
 (let (($x178 (forall ((input.ind-%var3007X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x352 (= input.ind-%var3007X input.spec-%var-y-0)))
 (let ((?x155 (ite $x352 ?x30 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x395 (ite $x38 ?x155 (_ bv0 32))))
 (let ((?x317 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3007X)))
 (let (($x252 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3007X)))
 (=> $x252 (= ?x317 ?x395))))))))))
 ))
 (let (($x375 (forall ((input.ind-%var3006X (_ BitVec 32)) )(let (($x352 (= input.ind-%var3006X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x379 (ite $x38 $x352 false)))
 (let (($x252 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3006X)))
 (= $x252 $x379))))))
 ))
 (let (($x182 (and $x375 $x178)))
 (let (($x164 (= $x182 true)))
 (let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x51 ?x30 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x25 (ite $x38 ?x45 (_ bv0 32))))
 (let (($x266 (= input.spec-%tmpvar-6.L2%13%d.2 ?x25)))
 (let (($x370 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x184 (=> $x370 $x266)))
 (let (($x22 (ite $x38 $x51 false)))
 (let ((?x27 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x27 (_ bv1 32))))
 (let (($x281 (= $x370 $x283)))
 (let (($x37 (= false false)))
 (let (($x382 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x57 (=> $x382 $x37)))
 (let (($x106 (= ?x27 (_ bv0 32))))
 (let (($x398 (= $x382 $x106)))
 (let (($x237 (and (and (and $x398 $x57) $x281) $x184)))
 (let (($x194 (= $x237 true)))
 (let (($x159 (forall ((input.ind-%var2988X (_ BitVec 32)) )(let (($x352 (= input.ind-%var2988X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x379 (ite $x38 $x352 false)))
 (let (($x296 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2988X)))
 (let (($x284 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x284 (= $x296 $x379))))))))
 ))
 (let (($x367 (forall ((input.ind-%var2989X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x352 (= input.ind-%var2989X input.spec-%var-y-0)))
 (let ((?x155 (ite $x352 ?x30 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x395 (ite $x38 ?x155 (_ bv0 32))))
 (let ((?x157 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2989X)))
 (let (($x296 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2989X)))
 (let (($x284 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x284 $x296) (= ?x157 ?x395)))))))))))
 ))
 (let ((?x86 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x86 (_ bv0 32))))
 (let (($x288 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x363 (= $x288 $x297)))
 (let (($x397 (=> $x288 $x37)))
 (let (($x23 (bvuge ?x86 (_ bv1 32))))
 (let (($x284 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x177 (= $x284 $x23)))
 (let (($x278 (and (and (and (and $x177 $x397) $x363) $x367) $x159)))
 (let (($x285 (= $x278 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x131 (concat ?x107 (concat ?x111 ?x130)))))
 (let (($x329 (= ?x120 input.dst.llvm-%x)))
 (let (($x191 (= $x329 true)))
 (let (($x271 (= $x191 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x149 (concat ?x137 (concat ?x125 ?x7)))))
 (let (($x167 (= ?x55 input.dst.llvm-%y)))
 (let (($x346 (= $x167 true)))
 (let (($x121 (= $x346 true)))
 (let (($x158 (= input.dst.llvm-%y ?x55)))
 (let (($x172 (= input.dst.llvm-%x ?x120)))
 (let (($x69 (and $x172 $x158)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x91)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x113)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (and $x124 $x49)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x32 $x66)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x16 $x9)))
 (let (($x47 (not $x95)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x72 $x73)))
 (let (($x101 (and (not $x65) $x47)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x13 $x6)))
 (let (($x17 (not $x54)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x28 $x52)))
 (let (($x84 (and (not $x81) $x17)))
 (let (($x44 (and (and (and (and (and (and $x84 $x101) $x75) $x42) $x85) $x46) $x129)))
 (let (($x239 (and $x44 $x134)))
 (let (($x70 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x132 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x87 (or false (or false (and (and true (or $x89 $x132)) (or $x26 $x39))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x240 (and (and (and $x83 $x70) $x239) $x69)))
 (let (($x41 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x34 (and $x41 $x240)))
 (let (($x299 (= $x34 true)))
 (let (($x304 (= $x299 true)))
 (let (($x12 (= $x304 true)))
 (let (($x384 (and $x12 $x121)))
 (let (($x312 (and $x384 $x271)))
 (let (($x328 (and $x312 $x285)))
 (let (($x226 (and $x328 $x194)))
 (let (($x272 (and $x226 $x164)))
 (let (($x340 (and $x272 $x275)))
 (let (($x335 (and $x340 $x71)))
 (let (($x381 (and $x335 $x207)))
 (let (($x202 (and $x381 $x195)))
 (let (($x112 (and $x202 $x179)))
 (let (($x105 (and $x23 $x106)))
 (let (($x248 (and $x105 $x112)))
 (let (($x80 (= ?x30 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x247 (and $x80 $x248)))
 (let (($x62 (and $x37 $x247)))
 (let (($x68 (= input.spec-%var-m2-0.L2%18%bbentry ?x25)))
 (let (($x394 (and $x68 $x62)))
 (let (($x267 (and $x37 $x394)))
 (let (($x358 (=> $x267 $x325)))
 (not $x358))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675918/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x231 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x163 (= input.spec-%var-x-0 ?x231)))
 (let (($x243 (= $x163 true)))
 (let (($x198 (= $x243 true)))
 (let (($x146 (forall ((input.ind-%var3239X (_ BitVec 32)) (input.ind-%var3241X (_ BitVec 32)) )(let ((?x86 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x155 (= input.ind-%var3241X input.spec-%var-y-0)))
 (let ((?x57 (ite $x155 ?x86 (_ bv0 32))))
 (let (($x257 (= input.ind-%var3239X input.spec-%var-x-0)))
 (let ((?x151 (ite $x257 ?x57 (_ bv0 32))))
 (let ((?x349 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3239X input.ind-%var3241X)))
 (let (($x396 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3239X input.ind-%var3241X)))
 (let (($x127 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3239X)))
 (=> (and $x127 $x396) (= ?x349 ?x151)))))))))))
 ))
 (let (($x334 (forall ((input.ind-%var3239X (_ BitVec 32)) (input.ind-%var3240X (_ BitVec 32)) )(let (($x155 (= input.ind-%var3240X input.spec-%var-y-0)))
 (let (($x257 (= input.ind-%var3239X input.spec-%var-x-0)))
 (let (($x210 (ite $x257 $x155 false)))
 (let (($x396 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3239X input.ind-%var3240X)))
 (let (($x127 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3239X)))
 (=> $x127 (= $x396 $x210))))))))
 ))
 (let (($x314 (forall ((input.ind-%var3238X (_ BitVec 32)) )(let (($x117 (= input.ind-%var3238X input.spec-%var-x-0)))
 (let (($x295 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3238X)))
 (= $x295 $x117))))
 ))
 (let (($x255 (and (and $x314 $x334) $x146)))
 (let (($x160 (= $x255 true)))
 (let (($x294 (forall ((input.ind-%var3223X (_ BitVec 32)) (input.ind-%var3225X (_ BitVec 32)) )(let ((?x86 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x155 (= input.ind-%var3225X input.spec-%var-y-0)))
 (let ((?x57 (ite $x155 ?x86 (_ bv0 32))))
 (let (($x257 (= input.ind-%var3223X input.spec-%var-x-0)))
 (let ((?x151 (ite $x257 ?x57 (_ bv0 32))))
 (let ((?x232 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3223X input.ind-%var3225X)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3223X input.ind-%var3225X)))
 (let (($x222 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3223X)))
 (=> (and $x222 $x290) (= ?x232 ?x151)))))))))))
 ))
 (let (($x36 (forall ((input.ind-%var3223X (_ BitVec 32)) (input.ind-%var3224X (_ BitVec 32)) )(let (($x155 (= input.ind-%var3224X input.spec-%var-y-0)))
 (let (($x257 (= input.ind-%var3223X input.spec-%var-x-0)))
 (let (($x210 (ite $x257 $x155 false)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3223X input.ind-%var3224X)))
 (let (($x222 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3223X)))
 (=> $x222 (= $x290 $x210))))))))
 ))
 (let (($x225 (forall ((input.ind-%var3222X (_ BitVec 32)) )(let (($x117 (= input.ind-%var3222X input.spec-%var-x-0)))
 (let (($x99 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3222X)))
 (= $x99 $x117))))
 ))
 (let (($x238 (and (and $x225 $x36) $x294)))
 (let (($x148 (= $x238 true)))
 (let (($x185 (forall ((input.ind-%var3209X (_ BitVec 32)) )(let ((?x86 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x155 (= input.ind-%var3209X input.spec-%var-y-0)))
 (let ((?x57 (ite $x155 ?x86 (_ bv0 32))))
 (let ((?x187 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3209X)))
 (let (($x161 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3209X)))
 (=> $x161 (= ?x187 ?x57))))))))
 ))
 (let (($x145 (forall ((input.ind-%var3208X (_ BitVec 32)) )(let (($x155 (= input.ind-%var3208X input.spec-%var-y-0)))
 (let (($x161 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3208X)))
 (= $x161 $x155))))
 ))
 (let (($x362 (and $x145 $x185)))
 (let (($x327 (= $x362 true)))
 (let (($x253 (forall ((input.ind-%var3201X (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3201X)))
 (=> $x190 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3201X) (_ bv0 32)))))
 ))
 (let (($x248 (forall ((input.ind-%var3200X (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3200X)))
 (= $x190 false)))
 ))
 (let (($x108 (and $x248 $x253)))
 (let (($x142 (= $x108 true)))
 (let (($x236 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3195X (_ BitVec 32)) )(let (($x347 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3195X)))
 (let (($x254 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3193X)))
 (=> (and $x254 $x347) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3193X input.ind-%var3195X) (_ bv0 32))))))
 ))
 (let (($x186 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3194X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3193X)))
 (=> $x254 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3194X) false))))
 ))
 (let (($x197 (forall ((input.ind-%var3192X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3192X)))
 (= $x206 false)))
 ))
 (let (($x392 (and (and $x197 $x186) $x236)))
 (let (($x277 (= $x392 true)))
 (let (($x100 (forall ((input.ind-%var3182X (_ BitVec 32)) )(let (($x155 (= input.ind-%var3182X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x395 (ite $x51 $x155 false)))
 (let (($x77 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3182X)))
 (= $x77 $x395))))))
 ))
 (let (($x354 (forall ((input.ind-%var3183X (_ BitVec 32)) )(let ((?x86 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x155 (= input.ind-%var3183X input.spec-%var-y-0)))
 (let ((?x57 (ite $x155 ?x86 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x173 (ite $x51 ?x57 (_ bv0 32))))
 (let ((?x181 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3183X)))
 (let (($x77 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3183X)))
 (=> $x77 (= ?x181 ?x173))))))))))
 ))
 (let (($x162 (and $x354 $x100)))
 (let (($x229 (= $x162 true)))
 (let ((?x86 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x38 ?x86 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x23 (ite $x51 ?x45 (_ bv0 32))))
 (let (($x33 (= input.spec-%tmpvar-6.L2%13%d.2 ?x23)))
 (let (($x182 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x249 (=> $x182 $x33)))
 (let (($x375 (ite $x51 $x38 false)))
 (let ((?x317 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x317 (_ bv1 32))))
 (let (($x272 (= $x182 $x164)))
 (let (($x5 (= false false)))
 (let (($x115 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x178 (=> $x115 $x5)))
 (let (($x315 (= ?x317 (_ bv0 32))))
 (let (($x276 (= $x115 $x315)))
 (let (($x279 (and (and (and $x276 $x178) $x272) $x249)))
 (let (($x348 (= $x279 true)))
 (let (($x332 (forall ((input.ind-%var3165X (_ BitVec 32)) )(let ((?x86 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x155 (= input.ind-%var3165X input.spec-%var-y-0)))
 (let ((?x57 (ite $x155 ?x86 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x173 (ite $x51 ?x57 (_ bv0 32))))
 (let ((?x159 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3165X)))
 (let (($x308 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3165X)))
 (let (($x284 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x284 $x308) (= ?x159 ?x173)))))))))))
 ))
 (let (($x367 (forall ((input.ind-%var3164X (_ BitVec 32)) )(let (($x155 (= input.ind-%var3164X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x395 (ite $x51 $x155 false)))
 (let (($x308 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3164X)))
 (let (($x284 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x284 (= $x308 $x395))))))))
 ))
 (let ((?x29 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x29 (_ bv0 32))))
 (let (($x37 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x342 (= $x37 $x80)))
 (let (($x397 (=> $x37 $x5)))
 (let (($x177 (bvuge ?x29 (_ bv1 32))))
 (let (($x284 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x288 (= $x284 $x177)))
 (let (($x237 (and (and (and (and $x288 $x397) $x342) $x367) $x332)))
 (let (($x194 (= $x237 true)))
 (let ((?x239 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x111 (concat ?x118 (concat ?x64 ?x239)))))
 (let (($x329 (= ?x130 input.dst.llvm-%x)))
 (let (($x191 (= $x329 true)))
 (let (($x271 (= $x191 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x10 (concat ?x7 (concat ?x137 (concat ?x189 ?x120)))))
 (let (($x167 (= ?x10 input.dst.llvm-%y)))
 (let (($x346 (= $x167 true)))
 (let (($x121 (= $x346 true)))
 (let (($x188 (= input.dst.llvm-%y ?x10)))
 (let (($x126 (= input.dst.llvm-%x ?x130)))
 (let (($x55 (and $x126 $x188)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x66)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x78)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x63)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (and $x75 $x42)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x53 $x92)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x72 $x73)))
 (let (($x58 (not $x65)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x54 $x17)))
 (let (($x9 (and (not $x84) $x58)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x28 $x52)))
 (let (($x56 (not $x81)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x93 $x70)))
 (let (($x6 (and (not $x165) $x56)))
 (let (($x129 (and (and (and (and (and (and $x6 $x9) $x47) $x61) $x32) $x31) $x49)))
 (let (($x44 (and $x129 $x85)))
 (let (($x41 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x67 (or false (or false (and (and true (or $x89 $x19)) (or $x26 $x94))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x240 (and (and (and $x83 $x41) $x44) $x55)))
 (let (($x27 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x34 (and $x27 $x240)))
 (let (($x299 (= $x34 true)))
 (let (($x304 (= $x299 true)))
 (let (($x12 (= $x304 true)))
 (let (($x384 (and $x12 $x121)))
 (let (($x312 (and $x384 $x271)))
 (let (($x226 (and $x312 $x194)))
 (let (($x201 (and $x226 $x348)))
 (let (($x76 (and $x201 $x229)))
 (let (($x336 (and $x76 $x277)))
 (let (($x171 (and $x336 $x142)))
 (let (($x144 (and $x171 $x327)))
 (let (($x373 (and $x144 $x148)))
 (let (($x166 (and $x373 $x160)))
 (let (($x366 (and $x80 $x166)))
 (let (($x30 (= ?x86 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x204 (and $x30 $x366)))
 (let (($x320 (and $x5 $x204)))
 (let (($x25 (= input.spec-%var-m2-0.L2%18%bbentry ?x23)))
 (let (($x357 (and $x25 $x320)))
 (let (($x316 (and $x5 $x357)))
 (let (($x212 (=> $x316 $x198)))
 (not $x212)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x231 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x163 (= input.spec-%var-x-0 ?x231)))
 (let (($x243 (= $x163 true)))
 (let (($x198 (= $x243 true)))
 (let (($x146 (forall ((input.ind-%var3239X (_ BitVec 32)) (input.ind-%var3241X (_ BitVec 32)) )(let ((?x86 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x155 (= input.ind-%var3241X input.spec-%var-y-0)))
 (let ((?x57 (ite $x155 ?x86 (_ bv0 32))))
 (let (($x257 (= input.ind-%var3239X input.spec-%var-x-0)))
 (let ((?x151 (ite $x257 ?x57 (_ bv0 32))))
 (let ((?x349 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3239X input.ind-%var3241X)))
 (let (($x396 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3239X input.ind-%var3241X)))
 (let (($x127 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3239X)))
 (=> (and $x127 $x396) (= ?x349 ?x151)))))))))))
 ))
 (let (($x334 (forall ((input.ind-%var3239X (_ BitVec 32)) (input.ind-%var3240X (_ BitVec 32)) )(let (($x155 (= input.ind-%var3240X input.spec-%var-y-0)))
 (let (($x257 (= input.ind-%var3239X input.spec-%var-x-0)))
 (let (($x210 (ite $x257 $x155 false)))
 (let (($x396 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3239X input.ind-%var3240X)))
 (let (($x127 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3239X)))
 (=> $x127 (= $x396 $x210))))))))
 ))
 (let (($x314 (forall ((input.ind-%var3238X (_ BitVec 32)) )(let (($x117 (= input.ind-%var3238X input.spec-%var-x-0)))
 (let (($x295 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3238X)))
 (= $x295 $x117))))
 ))
 (let (($x255 (and (and $x314 $x334) $x146)))
 (let (($x160 (= $x255 true)))
 (let (($x294 (forall ((input.ind-%var3223X (_ BitVec 32)) (input.ind-%var3225X (_ BitVec 32)) )(let ((?x86 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x155 (= input.ind-%var3225X input.spec-%var-y-0)))
 (let ((?x57 (ite $x155 ?x86 (_ bv0 32))))
 (let (($x257 (= input.ind-%var3223X input.spec-%var-x-0)))
 (let ((?x151 (ite $x257 ?x57 (_ bv0 32))))
 (let ((?x232 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3223X input.ind-%var3225X)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3223X input.ind-%var3225X)))
 (let (($x222 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3223X)))
 (=> (and $x222 $x290) (= ?x232 ?x151)))))))))))
 ))
 (let (($x36 (forall ((input.ind-%var3223X (_ BitVec 32)) (input.ind-%var3224X (_ BitVec 32)) )(let (($x155 (= input.ind-%var3224X input.spec-%var-y-0)))
 (let (($x257 (= input.ind-%var3223X input.spec-%var-x-0)))
 (let (($x210 (ite $x257 $x155 false)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3223X input.ind-%var3224X)))
 (let (($x222 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3223X)))
 (=> $x222 (= $x290 $x210))))))))
 ))
 (let (($x225 (forall ((input.ind-%var3222X (_ BitVec 32)) )(let (($x117 (= input.ind-%var3222X input.spec-%var-x-0)))
 (let (($x99 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3222X)))
 (= $x99 $x117))))
 ))
 (let (($x238 (and (and $x225 $x36) $x294)))
 (let (($x148 (= $x238 true)))
 (let (($x185 (forall ((input.ind-%var3209X (_ BitVec 32)) )(let ((?x86 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x155 (= input.ind-%var3209X input.spec-%var-y-0)))
 (let ((?x57 (ite $x155 ?x86 (_ bv0 32))))
 (let ((?x187 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3209X)))
 (let (($x161 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3209X)))
 (=> $x161 (= ?x187 ?x57))))))))
 ))
 (let (($x145 (forall ((input.ind-%var3208X (_ BitVec 32)) )(let (($x155 (= input.ind-%var3208X input.spec-%var-y-0)))
 (let (($x161 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3208X)))
 (= $x161 $x155))))
 ))
 (let (($x362 (and $x145 $x185)))
 (let (($x327 (= $x362 true)))
 (let (($x253 (forall ((input.ind-%var3201X (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3201X)))
 (=> $x190 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3201X) (_ bv0 32)))))
 ))
 (let (($x248 (forall ((input.ind-%var3200X (_ BitVec 32)) )(let (($x190 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3200X)))
 (= $x190 false)))
 ))
 (let (($x108 (and $x248 $x253)))
 (let (($x142 (= $x108 true)))
 (let (($x236 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3195X (_ BitVec 32)) )(let (($x347 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3195X)))
 (let (($x254 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3193X)))
 (=> (and $x254 $x347) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3193X input.ind-%var3195X) (_ bv0 32))))))
 ))
 (let (($x186 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3194X (_ BitVec 32)) )(let (($x254 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3193X)))
 (=> $x254 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3194X) false))))
 ))
 (let (($x197 (forall ((input.ind-%var3192X (_ BitVec 32)) )(let (($x206 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3192X)))
 (= $x206 false)))
 ))
 (let (($x392 (and (and $x197 $x186) $x236)))
 (let (($x277 (= $x392 true)))
 (let (($x100 (forall ((input.ind-%var3182X (_ BitVec 32)) )(let (($x155 (= input.ind-%var3182X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x395 (ite $x51 $x155 false)))
 (let (($x77 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3182X)))
 (= $x77 $x395))))))
 ))
 (let (($x354 (forall ((input.ind-%var3183X (_ BitVec 32)) )(let ((?x86 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x155 (= input.ind-%var3183X input.spec-%var-y-0)))
 (let ((?x57 (ite $x155 ?x86 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x173 (ite $x51 ?x57 (_ bv0 32))))
 (let ((?x181 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3183X)))
 (let (($x77 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3183X)))
 (=> $x77 (= ?x181 ?x173))))))))))
 ))
 (let (($x162 (and $x354 $x100)))
 (let (($x229 (= $x162 true)))
 (let ((?x86 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x38 ?x86 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x23 (ite $x51 ?x45 (_ bv0 32))))
 (let (($x33 (= input.spec-%tmpvar-6.L2%13%d.2 ?x23)))
 (let (($x182 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x249 (=> $x182 $x33)))
 (let (($x375 (ite $x51 $x38 false)))
 (let ((?x317 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x317 (_ bv1 32))))
 (let (($x272 (= $x182 $x164)))
 (let (($x5 (= false false)))
 (let (($x115 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x178 (=> $x115 $x5)))
 (let (($x315 (= ?x317 (_ bv0 32))))
 (let (($x276 (= $x115 $x315)))
 (let (($x279 (and (and (and $x276 $x178) $x272) $x249)))
 (let (($x348 (= $x279 true)))
 (let (($x332 (forall ((input.ind-%var3165X (_ BitVec 32)) )(let ((?x86 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x155 (= input.ind-%var3165X input.spec-%var-y-0)))
 (let ((?x57 (ite $x155 ?x86 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x173 (ite $x51 ?x57 (_ bv0 32))))
 (let ((?x159 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3165X)))
 (let (($x308 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3165X)))
 (let (($x284 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x284 $x308) (= ?x159 ?x173)))))))))))
 ))
 (let (($x367 (forall ((input.ind-%var3164X (_ BitVec 32)) )(let (($x155 (= input.ind-%var3164X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x395 (ite $x51 $x155 false)))
 (let (($x308 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3164X)))
 (let (($x284 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x284 (= $x308 $x395))))))))
 ))
 (let ((?x29 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x29 (_ bv0 32))))
 (let (($x37 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x342 (= $x37 $x80)))
 (let (($x397 (=> $x37 $x5)))
 (let (($x177 (bvuge ?x29 (_ bv1 32))))
 (let (($x284 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x288 (= $x284 $x177)))
 (let (($x237 (and (and (and (and $x288 $x397) $x342) $x367) $x332)))
 (let (($x194 (= $x237 true)))
 (let ((?x239 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x111 (concat ?x118 (concat ?x64 ?x239)))))
 (let (($x329 (= ?x130 input.dst.llvm-%x)))
 (let (($x191 (= $x329 true)))
 (let (($x271 (= $x191 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x10 (concat ?x7 (concat ?x137 (concat ?x189 ?x120)))))
 (let (($x167 (= ?x10 input.dst.llvm-%y)))
 (let (($x346 (= $x167 true)))
 (let (($x121 (= $x346 true)))
 (let (($x188 (= input.dst.llvm-%y ?x10)))
 (let (($x126 (= input.dst.llvm-%x ?x130)))
 (let (($x55 (and $x126 $x188)))
 (let ((?x66 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x66)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x78)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x63)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (and $x75 $x42)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x53 $x92)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x72 $x73)))
 (let (($x58 (not $x65)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x54 $x17)))
 (let (($x9 (and (not $x84) $x58)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x28 $x52)))
 (let (($x56 (not $x81)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x93 $x70)))
 (let (($x6 (and (not $x165) $x56)))
 (let (($x129 (and (and (and (and (and (and $x6 $x9) $x47) $x61) $x32) $x31) $x49)))
 (let (($x44 (and $x129 $x85)))
 (let (($x41 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x67 (or false (or false (and (and true (or $x89 $x19)) (or $x26 $x94))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x240 (and (and (and $x83 $x41) $x44) $x55)))
 (let (($x27 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x34 (and $x27 $x240)))
 (let (($x299 (= $x34 true)))
 (let (($x304 (= $x299 true)))
 (let (($x12 (= $x304 true)))
 (let (($x384 (and $x12 $x121)))
 (let (($x312 (and $x384 $x271)))
 (let (($x226 (and $x312 $x194)))
 (let (($x201 (and $x226 $x348)))
 (let (($x76 (and $x201 $x229)))
 (let (($x336 (and $x76 $x277)))
 (let (($x171 (and $x336 $x142)))
 (let (($x144 (and $x171 $x327)))
 (let (($x373 (and $x144 $x148)))
 (let (($x166 (and $x373 $x160)))
 (let (($x366 (and $x80 $x166)))
 (let (($x30 (= ?x86 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x204 (and $x30 $x366)))
 (let (($x320 (and $x5 $x204)))
 (let (($x25 (= input.spec-%var-m2-0.L2%18%bbentry ?x23)))
 (let (($x357 (and $x25 $x320)))
 (let (($x316 (and $x5 $x357)))
 (let (($x212 (=> $x316 $x198)))
 (not $x212)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2675918/query
