==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x10 $x8)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x10 $x8)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171441/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x392 (= true false)))
 (let (($x393 (= $x392 true)))
 (let (($x383 (forall ((input.ind-%var1003X (_ BitVec 32)) (input.ind-%var1005X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var1005X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x320 (= input.ind-%var1003X input.spec-%var-x-0)))
 (let ((?x337 (ite $x320 ?x165 (_ bv0 32))))
 (let ((?x373 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var1003X input.ind-%var1005X)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1003X input.ind-%var1005X)))
 (let (($x366 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1003X)))
 (=> (and $x366 $x358) (= ?x373 ?x337)))))))))))
 ))
 (let (($x368 (forall ((input.ind-%var1003X (_ BitVec 32)) (input.ind-%var1004X (_ BitVec 32)) )(let (($x149 (= input.ind-%var1004X input.spec-%var-y-0)))
 (let (($x320 (= input.ind-%var1003X input.spec-%var-x-0)))
 (let (($x321 (ite $x320 $x149 false)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1003X input.ind-%var1004X)))
 (let (($x366 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1003X)))
 (=> $x366 (= $x358 $x321))))))))
 ))
 (let (($x353 (forall ((input.ind-%var1002X (_ BitVec 32)) )(let (($x306 (= input.ind-%var1002X input.spec-%var-x-0)))
 (let (($x348 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1002X)))
 (= $x348 $x306))))
 ))
 (let (($x385 (and (and $x353 $x368) $x383)))
 (let (($x386 (= $x385 true)))
 (let (($x341 (forall ((input.ind-%var983X (_ BitVec 32)) (input.ind-%var985X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var985X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x320 (= input.ind-%var983X input.spec-%var-x-0)))
 (let ((?x337 (ite $x320 ?x165 (_ bv0 32))))
 (let ((?x330 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var983X input.ind-%var985X)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var983X input.ind-%var985X)))
 (let (($x323 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var983X)))
 (=> (and $x323 $x313) (= ?x330 ?x337)))))))))))
 ))
 (let (($x325 (forall ((input.ind-%var983X (_ BitVec 32)) (input.ind-%var984X (_ BitVec 32)) )(let (($x149 (= input.ind-%var984X input.spec-%var-y-0)))
 (let (($x320 (= input.ind-%var983X input.spec-%var-x-0)))
 (let (($x321 (ite $x320 $x149 false)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var983X input.ind-%var984X)))
 (let (($x323 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var983X)))
 (=> $x323 (= $x313 $x321))))))))
 ))
 (let (($x308 (forall ((input.ind-%var982X (_ BitVec 32)) )(let (($x306 (= input.ind-%var982X input.spec-%var-x-0)))
 (let (($x302 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var982X)))
 (= $x302 $x306))))
 ))
 (let (($x343 (and (and $x308 $x325) $x341)))
 (let (($x344 (= $x343 true)))
 (let (($x296 (forall ((input.ind-%var965X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var965X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let ((?x288 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var965X)))
 (let (($x279 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var965X)))
 (=> $x279 (= ?x288 ?x165))))))))
 ))
 (let (($x284 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x149 (= input.ind-%var964X input.spec-%var-y-0)))
 (let (($x279 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var964X)))
 (= $x279 $x149))))
 ))
 (let (($x297 (and $x284 $x296)))
 (let (($x298 (= $x297 true)))
 (let (($x273 (forall ((input.ind-%var955X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var955X)))
 (=> $x259 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var955X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var954X)))
 (= $x259 false)))
 ))
 (let (($x274 (and $x263 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x252 (forall ((input.ind-%var941X (_ BitVec 32)) (input.ind-%var943X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var941X input.ind-%var943X)))
 (let (($x238 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var941X)))
 (=> (and $x238 $x233) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var941X input.ind-%var943X) (_ bv0 32))))))
 ))
 (let (($x240 (forall ((input.ind-%var941X (_ BitVec 32)) (input.ind-%var942X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var941X)))
 (=> $x238 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var941X input.ind-%var942X) false))))
 ))
 (let (($x226 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var940X)))
 (= $x222 false)))
 ))
 (let (($x254 (and (and $x226 $x240) $x252)))
 (let (($x255 (= $x254 true)))
 (let (($x216 (forall ((input.ind-%var915X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var915X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x166 (ite $x48 ?x165 (_ bv0 32))))
 (let ((?x207 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var915X)))
 (let (($x197 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var915X)))
 (=> $x197 (= ?x207 ?x166))))))))))
 ))
 (let (($x203 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x149 (= input.ind-%var914X input.spec-%var-y-0)))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x150 (ite $x48 $x149 false)))
 (let (($x197 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var914X)))
 (= $x197 $x150))))))
 ))
 (let (($x217 (and $x203 $x216)))
 (let (($x218 (= $x217 true)))
 (let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x43 ?x69 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x29 (ite $x48 ?x55 (_ bv0 32))))
 (let (($x188 (= input.spec-%tmpvar-6.L2%13%d.2 ?x29)))
 (let (($x184 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x189 (=> $x184 $x188)))
 (let (($x179 (ite $x48 $x43 false)))
 (let ((?x180 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x180 (_ bv1 32))))
 (let (($x186 (= $x184 $x185)))
 (let (($x10 (= false false)))
 (let (($x178 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x183 (=> $x178 $x10)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x182 (= $x178 $x181)))
 (let (($x192 (and (and (and $x182 $x183) $x186) $x189)))
 (let (($x193 (= $x192 true)))
 (let (($x170 (forall ((input.ind-%var895X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var895X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x166 (ite $x48 ?x165 (_ bv0 32))))
 (let ((?x158 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var895X)))
 (let (($x143 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var895X)))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x131 $x143) (= ?x158 ?x166)))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var894X (_ BitVec 32)) )(let (($x149 (= input.ind-%var894X input.spec-%var-y-0)))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x150 (ite $x48 $x149 false)))
 (let (($x143 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var894X)))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x131 (= $x143 $x150))))))))
 ))
 (let ((?x132 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (= ?x132 (_ bv0 32))))
 (let (($x135 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x138 (= $x135 $x137)))
 (let (($x136 (=> $x135 $x10)))
 (let (($x133 (bvuge ?x132 (_ bv1 32))))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x134 (= $x131 $x133)))
 (let (($x174 (and (and (and (and $x134 $x136) $x138) $x153) $x170)))
 (let (($x175 (= $x174 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x124 (concat ?x121 (concat ?x118 ?x116)))))
 (let (($x126 (= ?x125 input.dst.llvm-%y)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x106 (concat ?x102 ?x100)))))
 (let (($x111 (= ?x110 input.dst.llvm-%x)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let (($x93 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x9)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x16)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x82)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x65 $x89)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x28 $x53)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x50 $x78)))
 (let (($x80 (not $x62)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x11 $x42)))
 (let (($x32 (and (not $x72) $x80)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x67 $x46)))
 (let (($x56 (not $x49)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x70 $x17)))
 (let (($x45 (and (not $x81) $x56)))
 (let (($x87 (and (and (and (and (and (and $x45 $x32) $x73) $x6) $x18) $x20) $x26)))
 (let (($x88 (and $x87 $x75)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x85 (or false (or false (and (and true (or $x23 $x27)) (or $x15 $x63))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x90 (and $x68 $x88)))
 (let (($x58 (= $x90 true)))
 (let (($x57 (= $x58 true)))
 (let (($x59 (= $x57 true)))
 (let (($x37 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (= $x37 true)))
 (let (($x40 (= $x51 true)))
 (let (($x33 (= $x40 true)))
 (let (($x91 (and $x33 $x59)))
 (let (($x97 (and $x91 $x96)))
 (let (($x114 (and $x97 $x113)))
 (let (($x129 (and $x114 $x128)))
 (let (($x176 (and $x129 $x175)))
 (let (($x194 (and $x176 $x193)))
 (let (($x219 (and $x194 $x218)))
 (let (($x256 (and $x219 $x255)))
 (let (($x276 (and $x256 $x275)))
 (let (($x299 (and $x276 $x298)))
 (let (($x345 (and $x299 $x344)))
 (let (($x387 (and $x345 $x386)))
 (let (($x36 (= ?x69 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x388 (and $x36 $x387)))
 (let (($x389 (and $x10 $x388)))
 (let (($x77 (= input.spec-%var-m2-0.L2%18%bbentry ?x29)))
 (let (($x390 (and $x77 $x389)))
 (let (($x391 (and $x10 $x390)))
 (let (($x394 (=> $x391 $x393)))
 (not $x394))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x392 (= true false)))
 (let (($x393 (= $x392 true)))
 (let (($x383 (forall ((input.ind-%var1003X (_ BitVec 32)) (input.ind-%var1005X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var1005X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x320 (= input.ind-%var1003X input.spec-%var-x-0)))
 (let ((?x337 (ite $x320 ?x165 (_ bv0 32))))
 (let ((?x373 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var1003X input.ind-%var1005X)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1003X input.ind-%var1005X)))
 (let (($x366 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1003X)))
 (=> (and $x366 $x358) (= ?x373 ?x337)))))))))))
 ))
 (let (($x368 (forall ((input.ind-%var1003X (_ BitVec 32)) (input.ind-%var1004X (_ BitVec 32)) )(let (($x149 (= input.ind-%var1004X input.spec-%var-y-0)))
 (let (($x320 (= input.ind-%var1003X input.spec-%var-x-0)))
 (let (($x321 (ite $x320 $x149 false)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1003X input.ind-%var1004X)))
 (let (($x366 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1003X)))
 (=> $x366 (= $x358 $x321))))))))
 ))
 (let (($x353 (forall ((input.ind-%var1002X (_ BitVec 32)) )(let (($x306 (= input.ind-%var1002X input.spec-%var-x-0)))
 (let (($x348 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1002X)))
 (= $x348 $x306))))
 ))
 (let (($x385 (and (and $x353 $x368) $x383)))
 (let (($x386 (= $x385 true)))
 (let (($x341 (forall ((input.ind-%var983X (_ BitVec 32)) (input.ind-%var985X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var985X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x320 (= input.ind-%var983X input.spec-%var-x-0)))
 (let ((?x337 (ite $x320 ?x165 (_ bv0 32))))
 (let ((?x330 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var983X input.ind-%var985X)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var983X input.ind-%var985X)))
 (let (($x323 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var983X)))
 (=> (and $x323 $x313) (= ?x330 ?x337)))))))))))
 ))
 (let (($x325 (forall ((input.ind-%var983X (_ BitVec 32)) (input.ind-%var984X (_ BitVec 32)) )(let (($x149 (= input.ind-%var984X input.spec-%var-y-0)))
 (let (($x320 (= input.ind-%var983X input.spec-%var-x-0)))
 (let (($x321 (ite $x320 $x149 false)))
 (let (($x313 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var983X input.ind-%var984X)))
 (let (($x323 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var983X)))
 (=> $x323 (= $x313 $x321))))))))
 ))
 (let (($x308 (forall ((input.ind-%var982X (_ BitVec 32)) )(let (($x306 (= input.ind-%var982X input.spec-%var-x-0)))
 (let (($x302 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var982X)))
 (= $x302 $x306))))
 ))
 (let (($x343 (and (and $x308 $x325) $x341)))
 (let (($x344 (= $x343 true)))
 (let (($x296 (forall ((input.ind-%var965X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var965X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let ((?x288 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var965X)))
 (let (($x279 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var965X)))
 (=> $x279 (= ?x288 ?x165))))))))
 ))
 (let (($x284 (forall ((input.ind-%var964X (_ BitVec 32)) )(let (($x149 (= input.ind-%var964X input.spec-%var-y-0)))
 (let (($x279 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var964X)))
 (= $x279 $x149))))
 ))
 (let (($x297 (and $x284 $x296)))
 (let (($x298 (= $x297 true)))
 (let (($x273 (forall ((input.ind-%var955X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var955X)))
 (=> $x259 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var955X) (_ bv0 32)))))
 ))
 (let (($x263 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var954X)))
 (= $x259 false)))
 ))
 (let (($x274 (and $x263 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x252 (forall ((input.ind-%var941X (_ BitVec 32)) (input.ind-%var943X (_ BitVec 32)) )(let (($x233 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var941X input.ind-%var943X)))
 (let (($x238 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var941X)))
 (=> (and $x238 $x233) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var941X input.ind-%var943X) (_ bv0 32))))))
 ))
 (let (($x240 (forall ((input.ind-%var941X (_ BitVec 32)) (input.ind-%var942X (_ BitVec 32)) )(let (($x238 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var941X)))
 (=> $x238 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var941X input.ind-%var942X) false))))
 ))
 (let (($x226 (forall ((input.ind-%var940X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var940X)))
 (= $x222 false)))
 ))
 (let (($x254 (and (and $x226 $x240) $x252)))
 (let (($x255 (= $x254 true)))
 (let (($x216 (forall ((input.ind-%var915X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var915X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x166 (ite $x48 ?x165 (_ bv0 32))))
 (let ((?x207 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var915X)))
 (let (($x197 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var915X)))
 (=> $x197 (= ?x207 ?x166))))))))))
 ))
 (let (($x203 (forall ((input.ind-%var914X (_ BitVec 32)) )(let (($x149 (= input.ind-%var914X input.spec-%var-y-0)))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x150 (ite $x48 $x149 false)))
 (let (($x197 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var914X)))
 (= $x197 $x150))))))
 ))
 (let (($x217 (and $x203 $x216)))
 (let (($x218 (= $x217 true)))
 (let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x43 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x43 ?x69 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x29 (ite $x48 ?x55 (_ bv0 32))))
 (let (($x188 (= input.spec-%tmpvar-6.L2%13%d.2 ?x29)))
 (let (($x184 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x189 (=> $x184 $x188)))
 (let (($x179 (ite $x48 $x43 false)))
 (let ((?x180 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x180 (_ bv1 32))))
 (let (($x186 (= $x184 $x185)))
 (let (($x10 (= false false)))
 (let (($x178 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x183 (=> $x178 $x10)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x182 (= $x178 $x181)))
 (let (($x192 (and (and (and $x182 $x183) $x186) $x189)))
 (let (($x193 (= $x192 true)))
 (let (($x170 (forall ((input.ind-%var895X (_ BitVec 32)) )(let ((?x69 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x149 (= input.ind-%var895X input.spec-%var-y-0)))
 (let ((?x165 (ite $x149 ?x69 (_ bv0 32))))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x166 (ite $x48 ?x165 (_ bv0 32))))
 (let ((?x158 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var895X)))
 (let (($x143 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var895X)))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x131 $x143) (= ?x158 ?x166)))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var894X (_ BitVec 32)) )(let (($x149 (= input.ind-%var894X input.spec-%var-y-0)))
 (let (($x48 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x150 (ite $x48 $x149 false)))
 (let (($x143 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var894X)))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x131 (= $x143 $x150))))))))
 ))
 (let ((?x132 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (= ?x132 (_ bv0 32))))
 (let (($x135 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x138 (= $x135 $x137)))
 (let (($x136 (=> $x135 $x10)))
 (let (($x133 (bvuge ?x132 (_ bv1 32))))
 (let (($x131 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x134 (= $x131 $x133)))
 (let (($x174 (and (and (and (and $x134 $x136) $x138) $x153) $x170)))
 (let (($x175 (= $x174 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x124 (concat ?x121 (concat ?x118 ?x116)))))
 (let (($x126 (= ?x125 input.dst.llvm-%y)))
 (let (($x127 (= $x126 true)))
 (let (($x128 (= $x127 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x106 (concat ?x102 ?x100)))))
 (let (($x111 (= ?x110 input.dst.llvm-%x)))
 (let (($x112 (= $x111 true)))
 (let (($x113 (= $x112 true)))
 (let (($x93 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x94 (= $x93 true)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x9)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x16)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x82)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x65 $x89)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x28 $x53)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x50 $x78)))
 (let (($x80 (not $x62)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x11 $x42)))
 (let (($x32 (and (not $x72) $x80)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x67 $x46)))
 (let (($x56 (not $x49)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x70 $x17)))
 (let (($x45 (and (not $x81) $x56)))
 (let (($x87 (and (and (and (and (and (and $x45 $x32) $x73) $x6) $x18) $x20) $x26)))
 (let (($x88 (and $x87 $x75)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x85 (or false (or false (and (and true (or $x23 $x27)) (or $x15 $x63))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x90 (and $x68 $x88)))
 (let (($x58 (= $x90 true)))
 (let (($x57 (= $x58 true)))
 (let (($x59 (= $x57 true)))
 (let (($x37 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x51 (= $x37 true)))
 (let (($x40 (= $x51 true)))
 (let (($x33 (= $x40 true)))
 (let (($x91 (and $x33 $x59)))
 (let (($x97 (and $x91 $x96)))
 (let (($x114 (and $x97 $x113)))
 (let (($x129 (and $x114 $x128)))
 (let (($x176 (and $x129 $x175)))
 (let (($x194 (and $x176 $x193)))
 (let (($x219 (and $x194 $x218)))
 (let (($x256 (and $x219 $x255)))
 (let (($x276 (and $x256 $x275)))
 (let (($x299 (and $x276 $x298)))
 (let (($x345 (and $x299 $x344)))
 (let (($x387 (and $x345 $x386)))
 (let (($x36 (= ?x69 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x388 (and $x36 $x387)))
 (let (($x389 (and $x10 $x388)))
 (let (($x77 (= input.spec-%var-m2-0.L2%18%bbentry ?x29)))
 (let (($x390 (and $x77 $x389)))
 (let (($x391 (and $x10 $x390)))
 (let (($x394 (=> $x391 $x393)))
 (not $x394))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0f41e1fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!122))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd7020838)
  (define-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32)
    #x00020000)
  (define-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32)
    #x20020684)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd702083b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0f41e1ff)
  (define-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32)
    #x20020684)
  (define-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32)
    #x20020684)
  (define-fun input.spec-%var-y-0 () (_ BitVec 32)
    #x00000470)
  (define-fun input.dst.llvm-%y () (_ BitVec 32)
    #x00000470)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0f41e1fc)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x20020214)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x20020214)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd7020838)
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1!136 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x20020214) true
      false))
  (define-fun k!124 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1!135 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000470) #x20020684
      #x00000005))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-0.L2%13%d.1.1!135 (k!124 x!0)))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1!134 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000470) true
      false))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-0.L2%13%d.0.1!134 (k!124 x!0)))
  (define-fun k!128 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!122 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd702083a) #x02
    (ite (= x!0 #x0f41e1fc) #x70
    (ite (= x!0 #x0f41e1ff) #x00
    (ite (= x!0 #x0f41e1fe) #x00
    (ite (= x!0 #xd7020839) #x02
    (ite (= x!0 #xd702083b) #x20
    (ite (= x!0 #xd7020838) #x14
      #x04))))))))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1!141 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000470) #x20020684
      #x00000006))
  (define-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1!138 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000470) true
      false))
  (define-fun k!132 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x20020214) #x20020214
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1!140 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x20020214) (= x!1 #x00000470)) true
      false))
  (define-fun k!131 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.1.1.0.1!140 (k!132 x!0) (k!131 x!1)))
  (define-fun k!123 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%tmpvar-5.L2%8%d.2.1.1!141 (k!123 x!0)))
  (define-fun k!129 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000470) #x00000470
      #x00000000))
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1!144 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000470) true
      false))
  (define-fun k!130 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x20020214) #x20020214
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1!133 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x20020214) (= x!1 #x00000470)) #x20020684
      #x00000004))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%8%d.1.1.1.1!133 (k!130 x!0) (k!129 x!1)))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-5.L2%8%d.2.0.1!144 (k!123 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1!137 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x20020214) (= x!1 #x00000470)) true
      false))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.1.1.0.1!137 (k!130 x!0) (k!129 x!1)))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1!142 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x20020214) (= x!1 #x00000470)) #x20020684
      #x00000007))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.0.1!136 (k!130 x!0)))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1!139 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x20020214) true
      false))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.0.1!139 (k!132 x!0)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-3.L2%8%d.0.1!138 (k!128 x!0)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1!143 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000470) #x20020684
      #x00000008))
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m-0.L2%8%d.1.1.1.1!142 (k!132 x!0) (k!131 x!1)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-3.L2%8%d.1.1!143 (k!128 x!0)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x36022de0)
  (define-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32)
    #x00008000)
  (define-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!122))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00008600)
  (define-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32)
    #x53160500)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x36022de3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00008603)
  (define-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32)
    #x53160500)
  (define-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32)
    #x53160500)
  (define-fun input.spec-%var-y-0 () (_ BitVec 32)
    #x50440000)
  (define-fun input.dst.llvm-%y () (_ BitVec 32)
    #x50440000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00008600)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x02d20500)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x02d20500)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x36022de0)
  (define-fun k!128 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1!133 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (and (= x!0 #x02d20500) (= x!1 #x50440000)))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1!143 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x02d20500) (= x!1 #x50440000)) #x53160500
      #x00000008))
  (define-fun k!130 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x02d20500) #x02d20500
      #x00000000))
  (define-fun k!129 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.1.1.0.1!133 (k!130 x!0) (k!129 x!1)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1!138 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x50440000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1!134 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x02d20500) (= x!1 #x50440000)) #x53160500
      #x00000004))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1!139 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x02d20500))
  (define-fun k!132 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x02d20500) #x02d20500
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.0.1!139 (k!132 x!0)))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1!140 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x50440000) #x53160500
      #x00000007))
  (define-fun k!124 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%var-m1-0.L2%13%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-0.L2%13%d.1.1!140 (k!124 x!0)))
  (define-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-3.L2%8%d.0.1!138 (k!128 x!0)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!131 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1!141 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (and (= x!0 #x02d20500) (= x!1 #x50440000)))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.L2%8%d.1.1.0.1!141 (k!132 x!0) (k!131 x!1)))
  (define-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1!142 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x50440000))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1!144 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x02d20500))
  (define-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m-0.L2%8%d.1.1.1.1!143 (k!132 x!0) (k!131 x!1)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-4.L2%8%d.0.1!144 (k!130 x!0)))
  (define-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!123 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x50440000) #x50440000
      #x00000000))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1!137 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x50440000) #x53160500
      #x00000006))
  (define-fun k!122 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x36022de3) #x02
    (ite (= x!0 #x00008603) #x50
    (ite (= x!0 #x36022de2) #xd2
    (ite (= x!0 #x00008602) #x44
    (ite (= x!0 #x36022de1) #x05
      #x00))))))
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1!136 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x50440000) #x53160500
      #x00000005))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1!135 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x50440000))
  (define-fun input.spec-%var-m1-0.L2%13%d.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-0.L2%13%d.0.1!135 (k!124 x!0)))
  (define-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((x!0 (_ BitVec 32))
   (x!1 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-4.L2%8%d.1.1.1.1!134 (k!130 x!0) (k!129 x!1)))
  (define-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%tmpvar-3.L2%8%d.1.1!136 (k!128 x!0)))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%tmpvar-5.L2%8%d.2.1.1!137 (k!123 x!0)))
  (define-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%tmpvar-5.L2%8%d.2.0.1!142 (k!123 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171441/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x207 (ite $x21 $x25 false)))
 (let ((?x214 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x214 (_ bv1 32))))
 (let (($x215 (= ?x214 (_ bv0 32))))
 (let (($x371 (or $x215 $x219)))
 (let ((?x10 (ite $x21 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x10 (_ bv1 32))))
 (let (($x379 (and $x136 $x371)))
 (let (($x172 (= ?x10 (_ bv0 32))))
 (let (($x140 (or $x172 $x379)))
 (let (($x230 (or false $x140)))
 (let (($x396 (= $x230 true)))
 (let (($x397 (= $x396 true)))
 (let (($x351 (forall ((input.ind-%var1999X (_ BitVec 32)) (input.ind-%var2001X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var2001X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x310 (= input.ind-%var1999X input.spec-%var-x-0)))
 (let ((?x346 (ite $x310 ?x190 (_ bv0 32))))
 (let ((?x265 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var1999X input.ind-%var2001X)))
 (let (($x211 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1999X input.ind-%var2001X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1999X)))
 (=> (and $x236 $x211) (= ?x265 ?x346)))))))))))
 ))
 (let (($x269 (forall ((input.ind-%var1999X (_ BitVec 32)) (input.ind-%var2000X (_ BitVec 32)) )(let (($x158 (= input.ind-%var2000X input.spec-%var-y-0)))
 (let (($x310 (= input.ind-%var1999X input.spec-%var-x-0)))
 (let (($x300 (ite $x310 $x158 false)))
 (let (($x211 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1999X input.ind-%var2000X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1999X)))
 (=> $x236 (= $x211 $x300))))))))
 ))
 (let (($x155 (forall ((input.ind-%var1998X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1998X input.spec-%var-x-0)))
 (let (($x146 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1998X)))
 (= $x146 $x257))))
 ))
 (let (($x378 (and (and $x155 $x269) $x351)))
 (let (($x327 (= $x378 true)))
 (let (($x362 (forall ((input.ind-%var1983X (_ BitVec 32)) (input.ind-%var1985X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1985X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x310 (= input.ind-%var1983X input.spec-%var-x-0)))
 (let ((?x346 (ite $x310 ?x190 (_ bv0 32))))
 (let ((?x334 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var1983X input.ind-%var1985X)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var1983X input.ind-%var1985X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1983X)))
 (=> (and $x326 $x290) (= ?x334 ?x346)))))))))))
 ))
 (let (($x316 (forall ((input.ind-%var1983X (_ BitVec 32)) (input.ind-%var1984X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1984X input.spec-%var-y-0)))
 (let (($x310 (= input.ind-%var1983X input.spec-%var-x-0)))
 (let (($x300 (ite $x310 $x158 false)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var1983X input.ind-%var1984X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1983X)))
 (=> $x326 (= $x290 $x300))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1982X input.spec-%var-x-0)))
 (let (($x221 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1982X)))
 (= $x221 $x257))))
 ))
 (let (($x376 (and (and $x289 $x316) $x362)))
 (let (($x377 (= $x376 true)))
 (let (($x241 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1969X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let ((?x209 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var1969X)))
 (let (($x160 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var1969X)))
 (=> $x160 (= ?x209 ?x190))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1968X input.spec-%var-y-0)))
 (let (($x160 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var1968X)))
 (= $x160 $x158))))
 ))
 (let (($x260 (and $x204 $x241)))
 (let (($x268 (= $x260 true)))
 (let (($x144 (forall ((input.ind-%var1960X (_ BitVec 32)) )(let (($x385 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var1960X)))
 (= $x385 false)))
 ))
 (let (($x394 (forall ((input.ind-%var1961X (_ BitVec 32)) )(let (($x385 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var1961X)))
 (=> $x385 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var1961X) (_ bv0 32)))))
 ))
 (let (($x159 (and $x394 $x144)))
 (let (($x154 (= $x159 true)))
 (let (($x368 (forall ((input.ind-%var1953X (_ BitVec 32)) (input.ind-%var1954X (_ BitVec 32)) )(let (($x330 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1953X)))
 (=> $x330 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var1953X input.ind-%var1954X) false))))
 ))
 (let (($x348 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x299 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1952X)))
 (= $x299 false)))
 ))
 (let (($x340 (forall ((input.ind-%var1953X (_ BitVec 32)) (input.ind-%var1955X (_ BitVec 32)) )(let (($x323 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var1953X input.ind-%var1955X)))
 (let (($x330 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1953X)))
 (=> (and $x330 $x323) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var1953X input.ind-%var1955X) (_ bv0 32))))))
 ))
 (let (($x381 (and (and $x340 $x348) $x368)))
 (let (($x373 (= $x381 true)))
 (let (($x284 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1942X input.spec-%var-y-0)))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x165 (ite $x21 $x158 false)))
 (let (($x245 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var1942X)))
 (= $x245 $x165))))))
 ))
 (let (($x272 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1943X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x184 (ite $x21 ?x190 (_ bv0 32))))
 (let ((?x252 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var1943X)))
 (let (($x245 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var1943X)))
 (=> $x245 (= ?x252 ?x184))))))))))
 ))
 (let (($x288 (and $x272 $x284)))
 (let (($x294 (= $x288 true)))
 (let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x25 ?x37 (_ bv0 32))))
 (let ((?x51 (ite $x21 ?x55 (_ bv0 32))))
 (let (($x226 (= input.spec-%tmpvar-6.L2%13%d.2 ?x51)))
 (let (($x218 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x232 (=> $x218 $x226)))
 (let (($x222 (= $x218 $x219)))
 (let (($x7 (= false false)))
 (let (($x203 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x217 (=> $x203 $x7)))
 (let (($x216 (= $x203 $x215)))
 (let (($x237 (and (and (and $x216 $x217) $x222) $x232)))
 (let (($x239 (= $x237 true)))
 (let (($x187 (forall ((input.ind-%var1925X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1925X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x184 (ite $x21 ?x190 (_ bv0 32))))
 (let ((?x177 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var1925X)))
 (let (($x150 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var1925X)))
 (let (($x135 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x135 $x150) (= ?x177 ?x184)))))))))))
 ))
 (let (($x169 (forall ((input.ind-%var1924X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1924X input.spec-%var-y-0)))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x165 (ite $x21 $x158 false)))
 (let (($x150 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var1924X)))
 (let (($x135 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x135 (= $x150 $x165))))))))
 ))
 (let (($x137 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x142 (= $x137 $x172)))
 (let (($x138 (=> $x137 $x7)))
 (let (($x135 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x171 (= $x135 $x136)))
 (let (($x193 (and (and (and (and $x171 $x138) $x142) $x169) $x187)))
 (let (($x194 (= $x193 true)))
 (let (($x129 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x122 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x125 (= $x122 true)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x124 (concat ?x113 (concat ?x110 ?x103)))))
 (let (($x117 (= ?x120 input.dst.llvm-%y)))
 (let (($x118 (= $x117 true)))
 (let (($x116 (= $x118 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x108 (concat ?x96 (concat ?x92 ?x59)))))
 (let (($x105 (= ?x109 input.dst.llvm-%x)))
 (let (($x106 (= $x105 true)))
 (let (($x101 (= $x106 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x53)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x82)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x73 $x6)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x39 $x13)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x11 $x42)))
 (let (($x71 (not $x72)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x49 $x56)))
 (let (($x78 (and (not $x45) $x71)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x70 $x17)))
 (let (($x41 (not $x81)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x40 $x33)))
 (let (($x46 (and (not $x68) $x41)))
 (let (($x26 (and (and (and (and (and (and $x46 $x78) $x80) $x83) $x28) $x66) $x89)))
 (let (($x87 (and $x26 $x18)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x31 (or false (or false (and (and true (or $x12 $x23)) (or $x38 $x15))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x9 (and $x85 $x87)))
 (let (($x75 (= $x9 true)))
 (let (($x88 (= $x75 true)))
 (let (($x90 (= $x88 true)))
 (let (($x102 (and $x90 $x101)))
 (let (($x119 (and $x102 $x116)))
 (let (($x128 (and $x119 $x127)))
 (let (($x133 (and $x128 $x132)))
 (let (($x197 (and $x133 $x194)))
 (let (($x240 (and $x197 $x239)))
 (let (($x295 (and $x240 $x294)))
 (let (($x380 (and $x295 $x373)))
 (let (($x157 (and $x380 $x154)))
 (let (($x264 (and $x157 $x268)))
 (let (($x347 (and $x264 $x377)))
 (let (($x328 (and $x347 $x327)))
 (let (($x48 (= ?x37 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x336 (and $x48 $x328)))
 (let (($x356 (and $x7 $x336)))
 (let (($x29 (= input.spec-%var-m2-0.L2%18%bbentry ?x51)))
 (let (($x364 (and $x29 $x356)))
 (let (($x370 (and $x7 $x364)))
 (let (($x398 (=> $x370 $x397)))
 (not $x398))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x25 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x207 (ite $x21 $x25 false)))
 (let ((?x214 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x214 (_ bv1 32))))
 (let (($x215 (= ?x214 (_ bv0 32))))
 (let (($x371 (or $x215 $x219)))
 (let ((?x10 (ite $x21 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x10 (_ bv1 32))))
 (let (($x379 (and $x136 $x371)))
 (let (($x172 (= ?x10 (_ bv0 32))))
 (let (($x140 (or $x172 $x379)))
 (let (($x230 (or false $x140)))
 (let (($x396 (= $x230 true)))
 (let (($x397 (= $x396 true)))
 (let (($x351 (forall ((input.ind-%var1999X (_ BitVec 32)) (input.ind-%var2001X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var2001X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x310 (= input.ind-%var1999X input.spec-%var-x-0)))
 (let ((?x346 (ite $x310 ?x190 (_ bv0 32))))
 (let ((?x265 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var1999X input.ind-%var2001X)))
 (let (($x211 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1999X input.ind-%var2001X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1999X)))
 (=> (and $x236 $x211) (= ?x265 ?x346)))))))))))
 ))
 (let (($x269 (forall ((input.ind-%var1999X (_ BitVec 32)) (input.ind-%var2000X (_ BitVec 32)) )(let (($x158 (= input.ind-%var2000X input.spec-%var-y-0)))
 (let (($x310 (= input.ind-%var1999X input.spec-%var-x-0)))
 (let (($x300 (ite $x310 $x158 false)))
 (let (($x211 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var1999X input.ind-%var2000X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1999X)))
 (=> $x236 (= $x211 $x300))))))))
 ))
 (let (($x155 (forall ((input.ind-%var1998X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1998X input.spec-%var-x-0)))
 (let (($x146 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var1998X)))
 (= $x146 $x257))))
 ))
 (let (($x378 (and (and $x155 $x269) $x351)))
 (let (($x327 (= $x378 true)))
 (let (($x362 (forall ((input.ind-%var1983X (_ BitVec 32)) (input.ind-%var1985X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1985X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x310 (= input.ind-%var1983X input.spec-%var-x-0)))
 (let ((?x346 (ite $x310 ?x190 (_ bv0 32))))
 (let ((?x334 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var1983X input.ind-%var1985X)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var1983X input.ind-%var1985X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1983X)))
 (=> (and $x326 $x290) (= ?x334 ?x346)))))))))))
 ))
 (let (($x316 (forall ((input.ind-%var1983X (_ BitVec 32)) (input.ind-%var1984X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1984X input.spec-%var-y-0)))
 (let (($x310 (= input.ind-%var1983X input.spec-%var-x-0)))
 (let (($x300 (ite $x310 $x158 false)))
 (let (($x290 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var1983X input.ind-%var1984X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1983X)))
 (=> $x326 (= $x290 $x300))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1982X (_ BitVec 32)) )(let (($x257 (= input.ind-%var1982X input.spec-%var-x-0)))
 (let (($x221 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var1982X)))
 (= $x221 $x257))))
 ))
 (let (($x376 (and (and $x289 $x316) $x362)))
 (let (($x377 (= $x376 true)))
 (let (($x241 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1969X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let ((?x209 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var1969X)))
 (let (($x160 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var1969X)))
 (=> $x160 (= ?x209 ?x190))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1968X input.spec-%var-y-0)))
 (let (($x160 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var1968X)))
 (= $x160 $x158))))
 ))
 (let (($x260 (and $x204 $x241)))
 (let (($x268 (= $x260 true)))
 (let (($x144 (forall ((input.ind-%var1960X (_ BitVec 32)) )(let (($x385 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var1960X)))
 (= $x385 false)))
 ))
 (let (($x394 (forall ((input.ind-%var1961X (_ BitVec 32)) )(let (($x385 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var1961X)))
 (=> $x385 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var1961X) (_ bv0 32)))))
 ))
 (let (($x159 (and $x394 $x144)))
 (let (($x154 (= $x159 true)))
 (let (($x368 (forall ((input.ind-%var1953X (_ BitVec 32)) (input.ind-%var1954X (_ BitVec 32)) )(let (($x330 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1953X)))
 (=> $x330 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var1953X input.ind-%var1954X) false))))
 ))
 (let (($x348 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let (($x299 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1952X)))
 (= $x299 false)))
 ))
 (let (($x340 (forall ((input.ind-%var1953X (_ BitVec 32)) (input.ind-%var1955X (_ BitVec 32)) )(let (($x323 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var1953X input.ind-%var1955X)))
 (let (($x330 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var1953X)))
 (=> (and $x330 $x323) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var1953X input.ind-%var1955X) (_ bv0 32))))))
 ))
 (let (($x381 (and (and $x340 $x348) $x368)))
 (let (($x373 (= $x381 true)))
 (let (($x284 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1942X input.spec-%var-y-0)))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x165 (ite $x21 $x158 false)))
 (let (($x245 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var1942X)))
 (= $x245 $x165))))))
 ))
 (let (($x272 (forall ((input.ind-%var1943X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1943X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x184 (ite $x21 ?x190 (_ bv0 32))))
 (let ((?x252 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var1943X)))
 (let (($x245 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var1943X)))
 (=> $x245 (= ?x252 ?x184))))))))))
 ))
 (let (($x288 (and $x272 $x284)))
 (let (($x294 (= $x288 true)))
 (let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x55 (ite $x25 ?x37 (_ bv0 32))))
 (let ((?x51 (ite $x21 ?x55 (_ bv0 32))))
 (let (($x226 (= input.spec-%tmpvar-6.L2%13%d.2 ?x51)))
 (let (($x218 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x232 (=> $x218 $x226)))
 (let (($x222 (= $x218 $x219)))
 (let (($x7 (= false false)))
 (let (($x203 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x217 (=> $x203 $x7)))
 (let (($x216 (= $x203 $x215)))
 (let (($x237 (and (and (and $x216 $x217) $x222) $x232)))
 (let (($x239 (= $x237 true)))
 (let (($x187 (forall ((input.ind-%var1925X (_ BitVec 32)) )(let ((?x37 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x158 (= input.ind-%var1925X input.spec-%var-y-0)))
 (let ((?x190 (ite $x158 ?x37 (_ bv0 32))))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x184 (ite $x21 ?x190 (_ bv0 32))))
 (let ((?x177 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var1925X)))
 (let (($x150 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var1925X)))
 (let (($x135 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x135 $x150) (= ?x177 ?x184)))))))))))
 ))
 (let (($x169 (forall ((input.ind-%var1924X (_ BitVec 32)) )(let (($x158 (= input.ind-%var1924X input.spec-%var-y-0)))
 (let (($x21 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x165 (ite $x21 $x158 false)))
 (let (($x150 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var1924X)))
 (let (($x135 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x135 (= $x150 $x165))))))))
 ))
 (let (($x137 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x142 (= $x137 $x172)))
 (let (($x138 (=> $x137 $x7)))
 (let (($x135 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x171 (= $x135 $x136)))
 (let (($x193 (and (and (and (and $x171 $x138) $x142) $x169) $x187)))
 (let (($x194 (= $x193 true)))
 (let (($x129 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x130 (= $x129 true)))
 (let (($x131 (= $x130 true)))
 (let (($x132 (= $x131 true)))
 (let (($x122 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x125 (= $x122 true)))
 (let (($x126 (= $x125 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x124 (concat ?x113 (concat ?x110 ?x103)))))
 (let (($x117 (= ?x120 input.dst.llvm-%y)))
 (let (($x118 (= $x117 true)))
 (let (($x116 (= $x118 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x108 (concat ?x96 (concat ?x92 ?x59)))))
 (let (($x105 (= ?x109 input.dst.llvm-%x)))
 (let (($x106 (= $x105 true)))
 (let (($x101 (= $x106 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x53)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x82)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x73 $x6)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x39 $x13)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x11 $x42)))
 (let (($x71 (not $x72)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x49 $x56)))
 (let (($x78 (and (not $x45) $x71)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x70 $x17)))
 (let (($x41 (not $x81)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x40 $x33)))
 (let (($x46 (and (not $x68) $x41)))
 (let (($x26 (and (and (and (and (and (and $x46 $x78) $x80) $x83) $x28) $x66) $x89)))
 (let (($x87 (and $x26 $x18)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x31 (or false (or false (and (and true (or $x12 $x23)) (or $x38 $x15))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x9 (and $x85 $x87)))
 (let (($x75 (= $x9 true)))
 (let (($x88 (= $x75 true)))
 (let (($x90 (= $x88 true)))
 (let (($x102 (and $x90 $x101)))
 (let (($x119 (and $x102 $x116)))
 (let (($x128 (and $x119 $x127)))
 (let (($x133 (and $x128 $x132)))
 (let (($x197 (and $x133 $x194)))
 (let (($x240 (and $x197 $x239)))
 (let (($x295 (and $x240 $x294)))
 (let (($x380 (and $x295 $x373)))
 (let (($x157 (and $x380 $x154)))
 (let (($x264 (and $x157 $x268)))
 (let (($x347 (and $x264 $x377)))
 (let (($x328 (and $x347 $x327)))
 (let (($x48 (= ?x37 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x336 (and $x48 $x328)))
 (let (($x356 (and $x7 $x336)))
 (let (($x29 (= input.spec-%var-m2-0.L2%18%bbentry ?x51)))
 (let (($x364 (and $x29 $x356)))
 (let (($x370 (and $x7 $x364)))
 (let (($x398 (=> $x370 $x397)))
 (not $x398))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171441/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x21 (ite $x38 ?x34 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x48 (ite $x35 ?x21 (_ bv0 32))))
 (let ((?x405 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x406 (= ?x405 ?x48)))
 (let (($x407 (= $x406 true)))
 (let (($x408 (= $x407 true)))
 (let (($x242 (forall ((input.ind-%var2181X (_ BitVec 32)) (input.ind-%var2183X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2183X input.spec-%var-y-0)))
 (let ((?x283 (ite $x238 ?x34 (_ bv0 32))))
 (let (($x278 (= input.ind-%var2181X input.spec-%var-x-0)))
 (let ((?x305 (ite $x278 ?x283 (_ bv0 32))))
 (let ((?x277 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2181X input.ind-%var2183X)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2181X input.ind-%var2183X)))
 (let (($x391 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2181X)))
 (=> (and $x391 $x358) (= ?x277 ?x305)))))))))))
 ))
 (let (($x280 (forall ((input.ind-%var2181X (_ BitVec 32)) (input.ind-%var2182X (_ BitVec 32)) )(let (($x238 (= input.ind-%var2182X input.spec-%var-y-0)))
 (let (($x278 (= input.ind-%var2181X input.spec-%var-x-0)))
 (let (($x314 (ite $x278 $x238 false)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2181X input.ind-%var2182X)))
 (let (($x391 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2181X)))
 (=> $x391 (= $x358 $x314))))))))
 ))
 (let (($x250 (forall ((input.ind-%var2180X (_ BitVec 32)) )(let (($x395 (= input.ind-%var2180X input.spec-%var-x-0)))
 (let (($x175 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2180X)))
 (= $x175 $x395))))
 ))
 (let (($x318 (and (and $x250 $x280) $x242)))
 (let (($x369 (= $x318 true)))
 (let (($x182 (forall ((input.ind-%var2165X (_ BitVec 32)) (input.ind-%var2167X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2167X input.spec-%var-y-0)))
 (let ((?x283 (ite $x238 ?x34 (_ bv0 32))))
 (let (($x278 (= input.ind-%var2165X input.spec-%var-x-0)))
 (let ((?x305 (ite $x278 ?x283 (_ bv0 32))))
 (let ((?x205 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2165X input.ind-%var2167X)))
 (let (($x285 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2165X input.ind-%var2167X)))
 (let (($x164 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2165X)))
 (=> (and $x164 $x285) (= ?x205 ?x305)))))))))))
 ))
 (let (($x372 (forall ((input.ind-%var2165X (_ BitVec 32)) (input.ind-%var2166X (_ BitVec 32)) )(let (($x238 (= input.ind-%var2166X input.spec-%var-y-0)))
 (let (($x278 (= input.ind-%var2165X input.spec-%var-x-0)))
 (let (($x314 (ite $x278 $x238 false)))
 (let (($x285 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2165X input.ind-%var2166X)))
 (let (($x164 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2165X)))
 (=> $x164 (= $x285 $x314))))))))
 ))
 (let (($x341 (forall ((input.ind-%var2164X (_ BitVec 32)) )(let (($x395 (= input.ind-%var2164X input.spec-%var-x-0)))
 (let (($x199 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2164X)))
 (= $x199 $x395))))
 ))
 (let (($x357 (and (and $x341 $x372) $x182)))
 (let (($x248 (= $x357 true)))
 (let (($x352 (forall ((input.ind-%var2151X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2151X input.spec-%var-y-0)))
 (let ((?x283 (ite $x238 ?x34 (_ bv0 32))))
 (let ((?x354 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2151X)))
 (let (($x147 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2151X)))
 (=> $x147 (= ?x354 ?x283))))))))
 ))
 (let (($x143 (forall ((input.ind-%var2150X (_ BitVec 32)) )(let (($x238 (= input.ind-%var2150X input.spec-%var-y-0)))
 (let (($x147 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2150X)))
 (= $x147 $x238))))
 ))
 (let (($x382 (and $x143 $x352)))
 (let (($x297 (= $x382 true)))
 (let (($x389 (forall ((input.ind-%var2143X (_ BitVec 32)) )(let (($x398 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2143X)))
 (=> $x398 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2143X) (_ bv0 32)))))
 ))
 (let (($x100 (forall ((input.ind-%var2142X (_ BitVec 32)) )(let (($x398 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2142X)))
 (= $x398 false)))
 ))
 (let (($x161 (and $x100 $x389)))
 (let (($x210 (= $x161 true)))
 (let (($x370 (forall ((input.ind-%var2135X (_ BitVec 32)) (input.ind-%var2137X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2135X input.ind-%var2137X)))
 (let (($x261 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2135X)))
 (=> (and $x261 $x163) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2135X input.ind-%var2137X) (_ bv0 32))))))
 ))
 (let (($x363 (forall ((input.ind-%var2135X (_ BitVec 32)) (input.ind-%var2136X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2135X)))
 (=> $x261 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2135X input.ind-%var2136X) false))))
 ))
 (let (($x350 (forall ((input.ind-%var2134X (_ BitVec 32)) )(let (($x375 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2134X)))
 (= $x375 false)))
 ))
 (let (($x379 (and (and $x350 $x363) $x370)))
 (let (($x140 (= $x379 true)))
 (let (($x290 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2125X input.spec-%var-y-0)))
 (let ((?x283 (ite $x238 ?x34 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x284 (ite $x35 ?x283 (_ bv0 32))))
 (let ((?x241 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2125X)))
 (let (($x144 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2125X)))
 (=> $x144 (= ?x241 ?x284))))))))))
 ))
 (let (($x204 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x238 (= input.ind-%var2124X input.spec-%var-y-0)))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x218 (ite $x35 $x238 false)))
 (let (($x144 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2124X)))
 (= $x144 $x218))))))
 ))
 (let (($x310 (and $x204 $x290)))
 (let (($x300 (= $x310 true)))
 (let (($x381 (= input.spec-%tmpvar-6.L2%13%d.2 ?x48)))
 (let (($x365 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x373 (=> $x365 $x381)))
 (let (($x45 (ite $x35 $x38 false)))
 (let ((?x50 (ite $x45 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x50 (_ bv1 32))))
 (let (($x367 (= $x365 $x86)))
 (let (($x55 (= false false)))
 (let (($x299 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x384 (=> $x299 $x55)))
 (let (($x345 (= ?x50 (_ bv0 32))))
 (let (($x348 (= $x299 $x345)))
 (let (($x388 (and (and (and $x348 $x384) $x367) $x373)))
 (let (($x392 (= $x388 true)))
 (let (($x308 (forall ((input.ind-%var2107X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2107X input.spec-%var-y-0)))
 (let ((?x283 (ite $x238 ?x34 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x284 (ite $x35 ?x283 (_ bv0 32))))
 (let ((?x239 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2107X)))
 (let (($x203 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2107X)))
 (let (($x184 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x184 $x203) (= ?x239 ?x284)))))))))))
 ))
 (let (($x233 (forall ((input.ind-%var2106X (_ BitVec 32)) )(let (($x238 (= input.ind-%var2106X input.spec-%var-y-0)))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x218 (ite $x35 $x238 false)))
 (let (($x203 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2106X)))
 (let (($x184 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x184 (= $x203 $x218))))))))
 ))
 (let ((?x37 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x37 (_ bv0 32))))
 (let (($x191 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x194 (= $x191 $x193)))
 (let (($x187 (=> $x191 $x55)))
 (let (($x29 (bvuge ?x37 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x185 (= $x184 $x29)))
 (let (($x322 (and (and (and (and $x185 $x187) $x194) $x233) $x308)))
 (let (($x339 (= $x322 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x103 (concat ?x113 (concat ?x102 ?x64)))))
 (let (($x169 (= ?x111 input.dst.llvm-%x)))
 (let (($x192 (= $x169 true)))
 (let (($x186 (= $x192 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x128 (concat ?x125 (concat ?x116 ?x117)))))
 (let (($x158 (= ?x129 input.dst.llvm-%y)))
 (let (($x165 (= $x158 true)))
 (let (($x166 (= $x165 true)))
 (let (($x63 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x142 (= $x63 true)))
 (let (($x189 (= $x142 true)))
 (let (($x149 (= $x189 true)))
 (let (($x97 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x7 (= $x97 true)))
 (let (($x138 (= $x7 true)))
 (let (($x188 (= $x138 true)))
 (let (($x130 (= input.dst.llvm-%y ?x129)))
 (let (($x114 (= input.dst.llvm-%x ?x111)))
 (let (($x131 (and $x114 $x130)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x91)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (and $x58 $x46)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x95 $x84)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x28 $x104)))
 (let (($x13 (not $x52)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x26 $x60)))
 (let (($x56 (and (not $x90) $x13)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x108 $x89)))
 (let (($x94 (not $x80)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x76 $x62)))
 (let (($x93 (and (not $x33) $x94)))
 (let (($x75 (and (and (and (and (and (and $x93 $x56) $x72) $x9) $x16) $x85) $x73)))
 (let (($x98 (and $x75 $x42)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x96)))
 (let (($x67 (or false (or false (and (and true (or $x82 $x14)) (or $x27 $x41))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x134 (and (and (and $x87 $x63) $x98) $x131)))
 (let (($x135 (and $x97 $x134)))
 (let (($x10 (= $x135 true)))
 (let (($x136 (= $x10 true)))
 (let (($x171 (= $x136 true)))
 (let (($x47 (and $x87 $x98)))
 (let (($x40 (= $x47 true)))
 (let (($x32 (= $x40 true)))
 (let (($x53 (= $x32 true)))
 (let (($x137 (and $x53 $x171)))
 (let (($x172 (and $x137 $x188)))
 (let (($x150 (and $x172 $x149)))
 (let (($x167 (and $x150 $x166)))
 (let (($x177 (and $x167 $x186)))
 (let (($x338 (and $x177 $x339)))
 (let (($x393 (and $x338 $x392)))
 (let (($x304 (and $x393 $x300)))
 (let (($x230 (and $x304 $x140)))
 (let (($x244 (and $x230 $x210)))
 (let (($x274 (and $x244 $x297)))
 (let (($x201 (and $x274 $x248)))
 (let (($x306 (and $x201 $x369)))
 (let (($x23 (and $x29 $x86)))
 (let (($x400 (and $x23 $x306)))
 (let (($x121 (= ?x34 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x401 (and $x121 $x400)))
 (let (($x402 (and $x55 $x401)))
 (let (($x43 (= input.spec-%var-m2-0.L2%18%bbentry ?x48)))
 (let (($x403 (and $x43 $x402)))
 (let (($x404 (and $x55 $x403)))
 (let (($x409 (=> $x404 $x408)))
 (not $x409)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x21 (ite $x38 ?x34 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x48 (ite $x35 ?x21 (_ bv0 32))))
 (let ((?x405 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x406 (= ?x405 ?x48)))
 (let (($x407 (= $x406 true)))
 (let (($x408 (= $x407 true)))
 (let (($x242 (forall ((input.ind-%var2181X (_ BitVec 32)) (input.ind-%var2183X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2183X input.spec-%var-y-0)))
 (let ((?x283 (ite $x238 ?x34 (_ bv0 32))))
 (let (($x278 (= input.ind-%var2181X input.spec-%var-x-0)))
 (let ((?x305 (ite $x278 ?x283 (_ bv0 32))))
 (let ((?x277 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2181X input.ind-%var2183X)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2181X input.ind-%var2183X)))
 (let (($x391 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2181X)))
 (=> (and $x391 $x358) (= ?x277 ?x305)))))))))))
 ))
 (let (($x280 (forall ((input.ind-%var2181X (_ BitVec 32)) (input.ind-%var2182X (_ BitVec 32)) )(let (($x238 (= input.ind-%var2182X input.spec-%var-y-0)))
 (let (($x278 (= input.ind-%var2181X input.spec-%var-x-0)))
 (let (($x314 (ite $x278 $x238 false)))
 (let (($x358 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2181X input.ind-%var2182X)))
 (let (($x391 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2181X)))
 (=> $x391 (= $x358 $x314))))))))
 ))
 (let (($x250 (forall ((input.ind-%var2180X (_ BitVec 32)) )(let (($x395 (= input.ind-%var2180X input.spec-%var-x-0)))
 (let (($x175 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2180X)))
 (= $x175 $x395))))
 ))
 (let (($x318 (and (and $x250 $x280) $x242)))
 (let (($x369 (= $x318 true)))
 (let (($x182 (forall ((input.ind-%var2165X (_ BitVec 32)) (input.ind-%var2167X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2167X input.spec-%var-y-0)))
 (let ((?x283 (ite $x238 ?x34 (_ bv0 32))))
 (let (($x278 (= input.ind-%var2165X input.spec-%var-x-0)))
 (let ((?x305 (ite $x278 ?x283 (_ bv0 32))))
 (let ((?x205 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2165X input.ind-%var2167X)))
 (let (($x285 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2165X input.ind-%var2167X)))
 (let (($x164 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2165X)))
 (=> (and $x164 $x285) (= ?x205 ?x305)))))))))))
 ))
 (let (($x372 (forall ((input.ind-%var2165X (_ BitVec 32)) (input.ind-%var2166X (_ BitVec 32)) )(let (($x238 (= input.ind-%var2166X input.spec-%var-y-0)))
 (let (($x278 (= input.ind-%var2165X input.spec-%var-x-0)))
 (let (($x314 (ite $x278 $x238 false)))
 (let (($x285 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2165X input.ind-%var2166X)))
 (let (($x164 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2165X)))
 (=> $x164 (= $x285 $x314))))))))
 ))
 (let (($x341 (forall ((input.ind-%var2164X (_ BitVec 32)) )(let (($x395 (= input.ind-%var2164X input.spec-%var-x-0)))
 (let (($x199 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2164X)))
 (= $x199 $x395))))
 ))
 (let (($x357 (and (and $x341 $x372) $x182)))
 (let (($x248 (= $x357 true)))
 (let (($x352 (forall ((input.ind-%var2151X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2151X input.spec-%var-y-0)))
 (let ((?x283 (ite $x238 ?x34 (_ bv0 32))))
 (let ((?x354 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2151X)))
 (let (($x147 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2151X)))
 (=> $x147 (= ?x354 ?x283))))))))
 ))
 (let (($x143 (forall ((input.ind-%var2150X (_ BitVec 32)) )(let (($x238 (= input.ind-%var2150X input.spec-%var-y-0)))
 (let (($x147 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2150X)))
 (= $x147 $x238))))
 ))
 (let (($x382 (and $x143 $x352)))
 (let (($x297 (= $x382 true)))
 (let (($x389 (forall ((input.ind-%var2143X (_ BitVec 32)) )(let (($x398 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2143X)))
 (=> $x398 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2143X) (_ bv0 32)))))
 ))
 (let (($x100 (forall ((input.ind-%var2142X (_ BitVec 32)) )(let (($x398 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2142X)))
 (= $x398 false)))
 ))
 (let (($x161 (and $x100 $x389)))
 (let (($x210 (= $x161 true)))
 (let (($x370 (forall ((input.ind-%var2135X (_ BitVec 32)) (input.ind-%var2137X (_ BitVec 32)) )(let (($x163 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2135X input.ind-%var2137X)))
 (let (($x261 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2135X)))
 (=> (and $x261 $x163) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2135X input.ind-%var2137X) (_ bv0 32))))))
 ))
 (let (($x363 (forall ((input.ind-%var2135X (_ BitVec 32)) (input.ind-%var2136X (_ BitVec 32)) )(let (($x261 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2135X)))
 (=> $x261 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2135X input.ind-%var2136X) false))))
 ))
 (let (($x350 (forall ((input.ind-%var2134X (_ BitVec 32)) )(let (($x375 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2134X)))
 (= $x375 false)))
 ))
 (let (($x379 (and (and $x350 $x363) $x370)))
 (let (($x140 (= $x379 true)))
 (let (($x290 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2125X input.spec-%var-y-0)))
 (let ((?x283 (ite $x238 ?x34 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x284 (ite $x35 ?x283 (_ bv0 32))))
 (let ((?x241 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2125X)))
 (let (($x144 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2125X)))
 (=> $x144 (= ?x241 ?x284))))))))))
 ))
 (let (($x204 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x238 (= input.ind-%var2124X input.spec-%var-y-0)))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x218 (ite $x35 $x238 false)))
 (let (($x144 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2124X)))
 (= $x144 $x218))))))
 ))
 (let (($x310 (and $x204 $x290)))
 (let (($x300 (= $x310 true)))
 (let (($x381 (= input.spec-%tmpvar-6.L2%13%d.2 ?x48)))
 (let (($x365 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x373 (=> $x365 $x381)))
 (let (($x45 (ite $x35 $x38 false)))
 (let ((?x50 (ite $x45 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x50 (_ bv1 32))))
 (let (($x367 (= $x365 $x86)))
 (let (($x55 (= false false)))
 (let (($x299 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x384 (=> $x299 $x55)))
 (let (($x345 (= ?x50 (_ bv0 32))))
 (let (($x348 (= $x299 $x345)))
 (let (($x388 (and (and (and $x348 $x384) $x367) $x373)))
 (let (($x392 (= $x388 true)))
 (let (($x308 (forall ((input.ind-%var2107X (_ BitVec 32)) )(let ((?x34 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x238 (= input.ind-%var2107X input.spec-%var-y-0)))
 (let ((?x283 (ite $x238 ?x34 (_ bv0 32))))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x284 (ite $x35 ?x283 (_ bv0 32))))
 (let ((?x239 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2107X)))
 (let (($x203 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2107X)))
 (let (($x184 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x184 $x203) (= ?x239 ?x284)))))))))))
 ))
 (let (($x233 (forall ((input.ind-%var2106X (_ BitVec 32)) )(let (($x238 (= input.ind-%var2106X input.spec-%var-y-0)))
 (let (($x35 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x218 (ite $x35 $x238 false)))
 (let (($x203 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2106X)))
 (let (($x184 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x184 (= $x203 $x218))))))))
 ))
 (let ((?x37 (ite $x35 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x37 (_ bv0 32))))
 (let (($x191 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x194 (= $x191 $x193)))
 (let (($x187 (=> $x191 $x55)))
 (let (($x29 (bvuge ?x37 (_ bv1 32))))
 (let (($x184 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x185 (= $x184 $x29)))
 (let (($x322 (and (and (and (and $x185 $x187) $x194) $x233) $x308)))
 (let (($x339 (= $x322 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x103 (concat ?x113 (concat ?x102 ?x64)))))
 (let (($x169 (= ?x111 input.dst.llvm-%x)))
 (let (($x192 (= $x169 true)))
 (let (($x186 (= $x192 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x128 (concat ?x125 (concat ?x116 ?x117)))))
 (let (($x158 (= ?x129 input.dst.llvm-%y)))
 (let (($x165 (= $x158 true)))
 (let (($x166 (= $x165 true)))
 (let (($x63 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x142 (= $x63 true)))
 (let (($x189 (= $x142 true)))
 (let (($x149 (= $x189 true)))
 (let (($x97 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x7 (= $x97 true)))
 (let (($x138 (= $x7 true)))
 (let (($x188 (= $x138 true)))
 (let (($x130 (= input.dst.llvm-%y ?x129)))
 (let (($x114 (= input.dst.llvm-%x ?x111)))
 (let (($x131 (and $x114 $x130)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x17)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x91)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (and $x58 $x46)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x95 $x84)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x28 $x104)))
 (let (($x13 (not $x52)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x26 $x60)))
 (let (($x56 (and (not $x90) $x13)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x108 $x89)))
 (let (($x94 (not $x80)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x76 $x62)))
 (let (($x93 (and (not $x33) $x94)))
 (let (($x75 (and (and (and (and (and (and $x93 $x56) $x72) $x9) $x16) $x85) $x73)))
 (let (($x98 (and $x75 $x42)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x96)))
 (let (($x67 (or false (or false (and (and true (or $x82 $x14)) (or $x27 $x41))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x134 (and (and (and $x87 $x63) $x98) $x131)))
 (let (($x135 (and $x97 $x134)))
 (let (($x10 (= $x135 true)))
 (let (($x136 (= $x10 true)))
 (let (($x171 (= $x136 true)))
 (let (($x47 (and $x87 $x98)))
 (let (($x40 (= $x47 true)))
 (let (($x32 (= $x40 true)))
 (let (($x53 (= $x32 true)))
 (let (($x137 (and $x53 $x171)))
 (let (($x172 (and $x137 $x188)))
 (let (($x150 (and $x172 $x149)))
 (let (($x167 (and $x150 $x166)))
 (let (($x177 (and $x167 $x186)))
 (let (($x338 (and $x177 $x339)))
 (let (($x393 (and $x338 $x392)))
 (let (($x304 (and $x393 $x300)))
 (let (($x230 (and $x304 $x140)))
 (let (($x244 (and $x230 $x210)))
 (let (($x274 (and $x244 $x297)))
 (let (($x201 (and $x274 $x248)))
 (let (($x306 (and $x201 $x369)))
 (let (($x23 (and $x29 $x86)))
 (let (($x400 (and $x23 $x306)))
 (let (($x121 (= ?x34 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x401 (and $x121 $x400)))
 (let (($x402 (and $x55 $x401)))
 (let (($x43 (= input.spec-%var-m2-0.L2%18%bbentry ?x48)))
 (let (($x403 (and $x43 $x402)))
 (let (($x404 (and $x55 $x403)))
 (let (($x409 (=> $x404 $x408)))
 (not $x409)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171441/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x342 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x246 (= input.spec-%var-y-0 ?x342)))
 (let (($x331 (= $x246 true)))
 (let (($x349 (= $x331 true)))
 (let (($x292 (forall ((input.ind-%var2357X (_ BitVec 32)) (input.ind-%var2359X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x322 (= input.ind-%var2359X input.spec-%var-y-0)))
 (let ((?x339 (ite $x322 ?x29 (_ bv0 32))))
 (let (($x316 (= input.ind-%var2357X input.spec-%var-x-0)))
 (let ((?x259 (ite $x316 ?x339 (_ bv0 32))))
 (let ((?x265 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2357X input.ind-%var2359X)))
 (let (($x226 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2357X input.ind-%var2359X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2357X)))
 (=> (and $x236 $x226) (= ?x265 ?x259)))))))))))
 ))
 (let (($x376 (forall ((input.ind-%var2357X (_ BitVec 32)) (input.ind-%var2358X (_ BitVec 32)) )(let (($x322 (= input.ind-%var2358X input.spec-%var-y-0)))
 (let (($x316 (= input.ind-%var2357X input.spec-%var-x-0)))
 (let (($x319 (ite $x316 $x322 false)))
 (let (($x226 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2357X input.ind-%var2358X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2357X)))
 (=> $x236 (= $x226 $x319))))))))
 ))
 (let (($x157 (forall ((input.ind-%var2356X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2356X input.spec-%var-x-0)))
 (let (($x235 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2356X)))
 (= $x235 $x264))))
 ))
 (let (($x303 (and (and $x157 $x376) $x292)))
 (let (($x262 (= $x303 true)))
 (let (($x198 (forall ((input.ind-%var2341X (_ BitVec 32)) (input.ind-%var2343X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x322 (= input.ind-%var2343X input.spec-%var-y-0)))
 (let ((?x339 (ite $x322 ?x29 (_ bv0 32))))
 (let (($x316 (= input.ind-%var2341X input.spec-%var-x-0)))
 (let ((?x259 (ite $x316 ?x339 (_ bv0 32))))
 (let ((?x266 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2341X input.ind-%var2343X)))
 (let (($x180 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2341X input.ind-%var2343X)))
 (let (($x273 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2341X)))
 (=> (and $x273 $x180) (= ?x266 ?x259)))))))))))
 ))
 (let (($x321 (forall ((input.ind-%var2341X (_ BitVec 32)) (input.ind-%var2342X (_ BitVec 32)) )(let (($x322 (= input.ind-%var2342X input.spec-%var-y-0)))
 (let (($x316 (= input.ind-%var2341X input.spec-%var-x-0)))
 (let (($x319 (ite $x316 $x322 false)))
 (let (($x180 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2341X input.ind-%var2342X)))
 (let (($x273 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2341X)))
 (=> $x273 (= $x180 $x319))))))))
 ))
 (let (($x57 (forall ((input.ind-%var2340X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2340X input.spec-%var-x-0)))
 (let (($x394 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2340X)))
 (= $x394 $x264))))
 ))
 (let (($x206 (and (and $x57 $x321) $x198)))
 (let (($x153 (= $x206 true)))
 (let (($x214 (forall ((input.ind-%var2327X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x322 (= input.ind-%var2327X input.spec-%var-y-0)))
 (let ((?x339 (ite $x322 ?x29 (_ bv0 32))))
 (let ((?x287 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2327X)))
 (let (($x260 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2327X)))
 (=> $x260 (= ?x287 ?x339))))))))
 ))
 (let (($x254 (forall ((input.ind-%var2326X (_ BitVec 32)) )(let (($x322 (= input.ind-%var2326X input.spec-%var-y-0)))
 (let (($x260 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2326X)))
 (= $x260 $x322))))
 ))
 (let (($x245 (and $x254 $x214)))
 (let (($x252 (= $x245 true)))
 (let (($x109 (forall ((input.ind-%var2319X (_ BitVec 32)) )(let (($x369 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2319X)))
 (=> $x369 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2319X) (_ bv0 32)))))
 ))
 (let (($x402 (forall ((input.ind-%var2318X (_ BitVec 32)) )(let (($x369 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2318X)))
 (= $x369 false)))
 ))
 (let (($x120 (and $x402 $x109)))
 (let (($x71 (= $x120 true)))
 (let (($x243 (forall ((input.ind-%var2311X (_ BitVec 32)) (input.ind-%var2313X (_ BitVec 32)) )(let (($x372 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2311X input.ind-%var2313X)))
 (let (($x168 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2311X)))
 (=> (and $x168 $x372) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2311X input.ind-%var2313X) (_ bv0 32))))))
 ))
 (let (($x182 (forall ((input.ind-%var2311X (_ BitVec 32)) (input.ind-%var2312X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2311X)))
 (=> $x168 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2311X input.ind-%var2312X) false))))
 ))
 (let (($x341 (forall ((input.ind-%var2310X (_ BitVec 32)) )(let (($x274 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2310X)))
 (= $x274 false)))
 ))
 (let (($x277 (and (and $x341 $x182) $x243)))
 (let (($x355 (= $x277 true)))
 (let (($x354 (forall ((input.ind-%var2301X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x322 (= input.ind-%var2301X input.spec-%var-y-0)))
 (let ((?x339 (ite $x322 ?x29 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x338 (ite $x38 ?x339 (_ bv0 32))))
 (let ((?x324 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2301X)))
 (let (($x336 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2301X)))
 (=> $x336 (= ?x324 ?x338))))))))))
 ))
 (let (($x398 (forall ((input.ind-%var2300X (_ BitVec 32)) )(let (($x322 (= input.ind-%var2300X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x381 (ite $x38 $x322 false)))
 (let (($x336 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2300X)))
 (= $x336 $x381))))))
 ))
 (let (($x296 (and $x398 $x354)))
 (let (($x256 (= $x296 true)))
 (let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x48 (ite $x51 ?x29 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x45 (ite $x38 ?x48 (_ bv0 32))))
 (let (($x146 (= input.spec-%tmpvar-6.L2%13%d.2 ?x45)))
 (let (($x304 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x261 (=> $x304 $x146)))
 (let (($x50 (ite $x38 $x51 false)))
 (let ((?x86 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x86 (_ bv1 32))))
 (let (($x346 (= $x304 $x375)))
 (let (($x15 (= false false)))
 (let (($x290 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x300 (=> $x290 $x15)))
 (let (($x23 (= ?x86 (_ bv0 32))))
 (let (($x310 (= $x290 $x23)))
 (let (($x269 (and (and (and $x310 $x300) $x346) $x261)))
 (let (($x363 (= $x269 true)))
 (let (($x392 (forall ((input.ind-%var2282X (_ BitVec 32)) )(let (($x322 (= input.ind-%var2282X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x381 (ite $x38 $x322 false)))
 (let (($x219 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2282X)))
 (let (($x330 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x330 (= $x219 $x381))))))))
 ))
 (let (($x348 (forall ((input.ind-%var2283X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x322 (= input.ind-%var2283X input.spec-%var-y-0)))
 (let ((?x339 (ite $x322 ?x29 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x338 (ite $x38 ?x339 (_ bv0 32))))
 (let ((?x294 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2283X)))
 (let (($x219 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2283X)))
 (let (($x330 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x330 $x219) (= ?x294 ?x338)))))))))))
 ))
 (let ((?x121 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x121 (_ bv0 32))))
 (let (($x194 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x203 (= $x194 $x202)))
 (let (($x323 (=> $x194 $x15)))
 (let (($x25 (bvuge ?x121 (_ bv1 32))))
 (let (($x330 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x193 (= $x330 $x25)))
 (let (($x204 (and (and (and (and $x193 $x323) $x203) $x348) $x392)))
 (let (($x241 (= $x204 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x114 (concat ?x123 (concat ?x113 ?x124)))))
 (let (($x184 (= ?x127 input.dst.llvm-%x)))
 (let (($x185 (= $x184 true)))
 (let (($x191 (= $x185 true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x131 (concat ?x126 (concat ?x116 ?x125)))))
 (let (($x192 (= ?x134 input.dst.llvm-%y)))
 (let (($x186 (= $x192 true)))
 (let (($x177 (= $x186 true)))
 (let (($x92 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x165 (= $x92 true)))
 (let (($x166 (= $x165 true)))
 (let (($x167 (= $x166 true)))
 (let (($x132 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x189 (= $x132 true)))
 (let (($x149 (= $x189 true)))
 (let (($x150 (= $x149 true)))
 (let (($x135 (= input.dst.llvm-%y ?x134)))
 (let (($x128 (= input.dst.llvm-%x ?x127)))
 (let (($x10 (and $x128 $x135)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x91)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x85)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (and $x58 $x46)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x95 $x84)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x52 $x13)))
 (let (($x59 (not $x56)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x54 $x28)))
 (let (($x72 (and (not $x104) $x59)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x80 $x94)))
 (let (($x26 (not $x93)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x22 $x96)))
 (let (($x90 (and (not $x89) $x26)))
 (let (($x40 (and (and (and (and (and (and $x90 $x72) $x83) $x66) $x16) $x78) $x81)))
 (let (($x32 (and $x40 $x73)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x33 (or false (or false (and (and true (or $x18 $x27)) (or $x11 $x67))))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x33)))
 (let (($x137 (and (and (and $x108 $x92) $x32) $x10)))
 (let (($x7 (and $x132 $x137)))
 (let (($x138 (= $x7 true)))
 (let (($x188 (= $x138 true)))
 (let (($x172 (= $x188 true)))
 (let (($x53 (and $x108 $x32)))
 (let (($x20 (= $x53 true)))
 (let (($x97 (= $x20 true)))
 (let (($x44 (= $x97 true)))
 (let (($x142 (and $x44 $x172)))
 (let (($x158 (and $x142 $x150)))
 (let (($x169 (and $x158 $x167)))
 (let (($x190 (and $x169 $x177)))
 (let (($x55 (and $x190 $x191)))
 (let (($x289 (and $x55 $x241)))
 (let (($x371 (and $x289 $x363)))
 (let (($x352 (and $x371 $x256)))
 (let (($x247 (and $x352 $x355)))
 (let (($x207 (and $x247 $x71)))
 (let (($x156 (and $x207 $x252)))
 (let (($x196 (and $x156 $x153)))
 (let (($x320 (and $x196 $x262)))
 (let (($x70 (and $x25 $x23)))
 (let (($x332 (and $x70 $x320)))
 (let (($x69 (= ?x29 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x312 (and $x69 $x332)))
 (let (($x224 (and $x15 $x312)))
 (let (($x43 (= input.spec-%var-m2-0.L2%18%bbentry ?x45)))
 (let (($x173 (and $x43 $x224)))
 (let (($x325 (and $x15 $x173)))
 (let (($x282 (=> $x325 $x349)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x342 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x246 (= input.spec-%var-y-0 ?x342)))
 (let (($x331 (= $x246 true)))
 (let (($x349 (= $x331 true)))
 (let (($x292 (forall ((input.ind-%var2357X (_ BitVec 32)) (input.ind-%var2359X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x322 (= input.ind-%var2359X input.spec-%var-y-0)))
 (let ((?x339 (ite $x322 ?x29 (_ bv0 32))))
 (let (($x316 (= input.ind-%var2357X input.spec-%var-x-0)))
 (let ((?x259 (ite $x316 ?x339 (_ bv0 32))))
 (let ((?x265 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2357X input.ind-%var2359X)))
 (let (($x226 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2357X input.ind-%var2359X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2357X)))
 (=> (and $x236 $x226) (= ?x265 ?x259)))))))))))
 ))
 (let (($x376 (forall ((input.ind-%var2357X (_ BitVec 32)) (input.ind-%var2358X (_ BitVec 32)) )(let (($x322 (= input.ind-%var2358X input.spec-%var-y-0)))
 (let (($x316 (= input.ind-%var2357X input.spec-%var-x-0)))
 (let (($x319 (ite $x316 $x322 false)))
 (let (($x226 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2357X input.ind-%var2358X)))
 (let (($x236 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2357X)))
 (=> $x236 (= $x226 $x319))))))))
 ))
 (let (($x157 (forall ((input.ind-%var2356X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2356X input.spec-%var-x-0)))
 (let (($x235 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2356X)))
 (= $x235 $x264))))
 ))
 (let (($x303 (and (and $x157 $x376) $x292)))
 (let (($x262 (= $x303 true)))
 (let (($x198 (forall ((input.ind-%var2341X (_ BitVec 32)) (input.ind-%var2343X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x322 (= input.ind-%var2343X input.spec-%var-y-0)))
 (let ((?x339 (ite $x322 ?x29 (_ bv0 32))))
 (let (($x316 (= input.ind-%var2341X input.spec-%var-x-0)))
 (let ((?x259 (ite $x316 ?x339 (_ bv0 32))))
 (let ((?x266 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2341X input.ind-%var2343X)))
 (let (($x180 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2341X input.ind-%var2343X)))
 (let (($x273 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2341X)))
 (=> (and $x273 $x180) (= ?x266 ?x259)))))))))))
 ))
 (let (($x321 (forall ((input.ind-%var2341X (_ BitVec 32)) (input.ind-%var2342X (_ BitVec 32)) )(let (($x322 (= input.ind-%var2342X input.spec-%var-y-0)))
 (let (($x316 (= input.ind-%var2341X input.spec-%var-x-0)))
 (let (($x319 (ite $x316 $x322 false)))
 (let (($x180 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2341X input.ind-%var2342X)))
 (let (($x273 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2341X)))
 (=> $x273 (= $x180 $x319))))))))
 ))
 (let (($x57 (forall ((input.ind-%var2340X (_ BitVec 32)) )(let (($x264 (= input.ind-%var2340X input.spec-%var-x-0)))
 (let (($x394 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2340X)))
 (= $x394 $x264))))
 ))
 (let (($x206 (and (and $x57 $x321) $x198)))
 (let (($x153 (= $x206 true)))
 (let (($x214 (forall ((input.ind-%var2327X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x322 (= input.ind-%var2327X input.spec-%var-y-0)))
 (let ((?x339 (ite $x322 ?x29 (_ bv0 32))))
 (let ((?x287 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2327X)))
 (let (($x260 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2327X)))
 (=> $x260 (= ?x287 ?x339))))))))
 ))
 (let (($x254 (forall ((input.ind-%var2326X (_ BitVec 32)) )(let (($x322 (= input.ind-%var2326X input.spec-%var-y-0)))
 (let (($x260 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2326X)))
 (= $x260 $x322))))
 ))
 (let (($x245 (and $x254 $x214)))
 (let (($x252 (= $x245 true)))
 (let (($x109 (forall ((input.ind-%var2319X (_ BitVec 32)) )(let (($x369 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2319X)))
 (=> $x369 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2319X) (_ bv0 32)))))
 ))
 (let (($x402 (forall ((input.ind-%var2318X (_ BitVec 32)) )(let (($x369 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2318X)))
 (= $x369 false)))
 ))
 (let (($x120 (and $x402 $x109)))
 (let (($x71 (= $x120 true)))
 (let (($x243 (forall ((input.ind-%var2311X (_ BitVec 32)) (input.ind-%var2313X (_ BitVec 32)) )(let (($x372 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2311X input.ind-%var2313X)))
 (let (($x168 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2311X)))
 (=> (and $x168 $x372) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2311X input.ind-%var2313X) (_ bv0 32))))))
 ))
 (let (($x182 (forall ((input.ind-%var2311X (_ BitVec 32)) (input.ind-%var2312X (_ BitVec 32)) )(let (($x168 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2311X)))
 (=> $x168 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2311X input.ind-%var2312X) false))))
 ))
 (let (($x341 (forall ((input.ind-%var2310X (_ BitVec 32)) )(let (($x274 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2310X)))
 (= $x274 false)))
 ))
 (let (($x277 (and (and $x341 $x182) $x243)))
 (let (($x355 (= $x277 true)))
 (let (($x354 (forall ((input.ind-%var2301X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x322 (= input.ind-%var2301X input.spec-%var-y-0)))
 (let ((?x339 (ite $x322 ?x29 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x338 (ite $x38 ?x339 (_ bv0 32))))
 (let ((?x324 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2301X)))
 (let (($x336 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2301X)))
 (=> $x336 (= ?x324 ?x338))))))))))
 ))
 (let (($x398 (forall ((input.ind-%var2300X (_ BitVec 32)) )(let (($x322 (= input.ind-%var2300X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x381 (ite $x38 $x322 false)))
 (let (($x336 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2300X)))
 (= $x336 $x381))))))
 ))
 (let (($x296 (and $x398 $x354)))
 (let (($x256 (= $x296 true)))
 (let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x48 (ite $x51 ?x29 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x45 (ite $x38 ?x48 (_ bv0 32))))
 (let (($x146 (= input.spec-%tmpvar-6.L2%13%d.2 ?x45)))
 (let (($x304 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x261 (=> $x304 $x146)))
 (let (($x50 (ite $x38 $x51 false)))
 (let ((?x86 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x86 (_ bv1 32))))
 (let (($x346 (= $x304 $x375)))
 (let (($x15 (= false false)))
 (let (($x290 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x300 (=> $x290 $x15)))
 (let (($x23 (= ?x86 (_ bv0 32))))
 (let (($x310 (= $x290 $x23)))
 (let (($x269 (and (and (and $x310 $x300) $x346) $x261)))
 (let (($x363 (= $x269 true)))
 (let (($x392 (forall ((input.ind-%var2282X (_ BitVec 32)) )(let (($x322 (= input.ind-%var2282X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x381 (ite $x38 $x322 false)))
 (let (($x219 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2282X)))
 (let (($x330 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x330 (= $x219 $x381))))))))
 ))
 (let (($x348 (forall ((input.ind-%var2283X (_ BitVec 32)) )(let ((?x29 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x322 (= input.ind-%var2283X input.spec-%var-y-0)))
 (let ((?x339 (ite $x322 ?x29 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x338 (ite $x38 ?x339 (_ bv0 32))))
 (let ((?x294 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2283X)))
 (let (($x219 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2283X)))
 (let (($x330 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x330 $x219) (= ?x294 ?x338)))))))))))
 ))
 (let ((?x121 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x121 (_ bv0 32))))
 (let (($x194 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x203 (= $x194 $x202)))
 (let (($x323 (=> $x194 $x15)))
 (let (($x25 (bvuge ?x121 (_ bv1 32))))
 (let (($x330 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x193 (= $x330 $x25)))
 (let (($x204 (and (and (and (and $x193 $x323) $x203) $x348) $x392)))
 (let (($x241 (= $x204 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x114 (concat ?x123 (concat ?x113 ?x124)))))
 (let (($x184 (= ?x127 input.dst.llvm-%x)))
 (let (($x185 (= $x184 true)))
 (let (($x191 (= $x185 true)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x131 (concat ?x126 (concat ?x116 ?x125)))))
 (let (($x192 (= ?x134 input.dst.llvm-%y)))
 (let (($x186 (= $x192 true)))
 (let (($x177 (= $x186 true)))
 (let (($x92 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x165 (= $x92 true)))
 (let (($x166 (= $x165 true)))
 (let (($x167 (= $x166 true)))
 (let (($x132 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x189 (= $x132 true)))
 (let (($x149 (= $x189 true)))
 (let (($x150 (= $x149 true)))
 (let (($x135 (= input.dst.llvm-%y ?x134)))
 (let (($x128 (= input.dst.llvm-%x ?x127)))
 (let (($x10 (and $x128 $x135)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x91)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x85)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (and $x58 $x46)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x95 $x84)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x52 $x13)))
 (let (($x59 (not $x56)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x54 $x28)))
 (let (($x72 (and (not $x104) $x59)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x80 $x94)))
 (let (($x26 (not $x93)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x22 $x96)))
 (let (($x90 (and (not $x89) $x26)))
 (let (($x40 (and (and (and (and (and (and $x90 $x72) $x83) $x66) $x16) $x78) $x81)))
 (let (($x32 (and $x40 $x73)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x33 (or false (or false (and (and true (or $x18 $x27)) (or $x11 $x67))))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x33)))
 (let (($x137 (and (and (and $x108 $x92) $x32) $x10)))
 (let (($x7 (and $x132 $x137)))
 (let (($x138 (= $x7 true)))
 (let (($x188 (= $x138 true)))
 (let (($x172 (= $x188 true)))
 (let (($x53 (and $x108 $x32)))
 (let (($x20 (= $x53 true)))
 (let (($x97 (= $x20 true)))
 (let (($x44 (= $x97 true)))
 (let (($x142 (and $x44 $x172)))
 (let (($x158 (and $x142 $x150)))
 (let (($x169 (and $x158 $x167)))
 (let (($x190 (and $x169 $x177)))
 (let (($x55 (and $x190 $x191)))
 (let (($x289 (and $x55 $x241)))
 (let (($x371 (and $x289 $x363)))
 (let (($x352 (and $x371 $x256)))
 (let (($x247 (and $x352 $x355)))
 (let (($x207 (and $x247 $x71)))
 (let (($x156 (and $x207 $x252)))
 (let (($x196 (and $x156 $x153)))
 (let (($x320 (and $x196 $x262)))
 (let (($x70 (and $x25 $x23)))
 (let (($x332 (and $x70 $x320)))
 (let (($x69 (= ?x29 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x312 (and $x69 $x332)))
 (let (($x224 (and $x15 $x312)))
 (let (($x43 (= input.spec-%var-m2-0.L2%18%bbentry ?x45)))
 (let (($x173 (and $x43 $x224)))
 (let (($x325 (and $x15 $x173)))
 (let (($x282 (=> $x325 $x349)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171441/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x298 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x227 (= input.spec-%var-x-0 ?x298)))
 (let (($x77 (= $x227 true)))
 (let (($x302 (= $x77 true)))
 (let (($x397 (forall ((input.ind-%var2533X (_ BitVec 32)) (input.ind-%var2535X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x338 (= input.ind-%var2535X input.spec-%var-y-0)))
 (let ((?x163 (ite $x338 ?x25 (_ bv0 32))))
 (let (($x382 (= input.ind-%var2533X input.spec-%var-x-0)))
 (let ((?x162 (ite $x382 ?x163 (_ bv0 32))))
 (let ((?x378 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2533X input.ind-%var2535X)))
 (let (($x140 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2533X input.ind-%var2535X)))
 (let (($x147 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2533X)))
 (=> (and $x147 $x140) (= ?x378 ?x162)))))))))))
 ))
 (let (($x391 (forall ((input.ind-%var2533X (_ BitVec 32)) (input.ind-%var2534X (_ BitVec 32)) )(let (($x338 (= input.ind-%var2534X input.spec-%var-y-0)))
 (let (($x382 (= input.ind-%var2533X input.spec-%var-x-0)))
 (let (($x297 (ite $x382 $x338 false)))
 (let (($x140 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2533X input.ind-%var2534X)))
 (let (($x147 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2533X)))
 (=> $x147 (= $x140 $x297))))))))
 ))
 (let (($x295 (forall ((input.ind-%var2532X (_ BitVec 32)) )(let (($x164 (= input.ind-%var2532X input.spec-%var-x-0)))
 (let (($x385 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2532X)))
 (= $x385 $x164))))
 ))
 (let (($x178 (and (and $x295 $x391) $x397)))
 (let (($x315 (= $x178 true)))
 (let (($x367 (forall ((input.ind-%var2517X (_ BitVec 32)) (input.ind-%var2519X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x338 (= input.ind-%var2519X input.spec-%var-y-0)))
 (let ((?x163 (ite $x338 ?x25 (_ bv0 32))))
 (let (($x382 (= input.ind-%var2517X input.spec-%var-x-0)))
 (let ((?x162 (ite $x382 ?x163 (_ bv0 32))))
 (let ((?x159 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2517X input.ind-%var2519X)))
 (let (($x212 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2517X input.ind-%var2519X)))
 (let (($x301 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2517X)))
 (=> (and $x301 $x212) (= ?x159 ?x162)))))))))))
 ))
 (let (($x311 (forall ((input.ind-%var2517X (_ BitVec 32)) (input.ind-%var2518X (_ BitVec 32)) )(let (($x338 (= input.ind-%var2518X input.spec-%var-y-0)))
 (let (($x382 (= input.ind-%var2517X input.spec-%var-x-0)))
 (let (($x297 (ite $x382 $x338 false)))
 (let (($x212 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2517X input.ind-%var2518X)))
 (let (($x301 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2517X)))
 (=> $x301 (= $x212 $x297))))))))
 ))
 (let (($x285 (forall ((input.ind-%var2516X (_ BitVec 32)) )(let (($x164 (= input.ind-%var2516X input.spec-%var-x-0)))
 (let (($x249 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2516X)))
 (= $x249 $x164))))
 ))
 (let (($x257 (and (and $x285 $x311) $x367)))
 (let (($x228 (= $x257 true)))
 (let (($x384 (forall ((input.ind-%var2503X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x338 (= input.ind-%var2503X input.spec-%var-y-0)))
 (let ((?x163 (ite $x338 ?x25 (_ bv0 32))))
 (let ((?x154 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2503X)))
 (let (($x364 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2503X)))
 (=> $x364 (= ?x154 ?x163))))))))
 ))
 (let (($x306 (forall ((input.ind-%var2502X (_ BitVec 32)) )(let (($x338 (= input.ind-%var2502X input.spec-%var-y-0)))
 (let (($x364 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2502X)))
 (= $x364 $x338))))
 ))
 (let (($x365 (and $x306 $x384)))
 (let (($x283 (= $x365 true)))
 (let (($x8 (forall ((input.ind-%var2495X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2495X)))
 (=> $x303 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2495X) (_ bv0 32)))))
 ))
 (let (($x312 (forall ((input.ind-%var2494X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2494X)))
 (= $x303 false)))
 ))
 (let (($x79 (and $x312 $x8)))
 (let (($x122 (= $x79 true)))
 (let (($x376 (forall ((input.ind-%var2487X (_ BitVec 32)) (input.ind-%var2489X (_ BitVec 32)) )(let (($x343 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2487X input.ind-%var2489X)))
 (let (($x259 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2487X)))
 (=> (and $x259 $x343) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2487X input.ind-%var2489X) (_ bv0 32))))))
 ))
 (let (($x215 (forall ((input.ind-%var2487X (_ BitVec 32)) (input.ind-%var2488X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2487X)))
 (=> $x259 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2487X input.ind-%var2488X) false))))
 ))
 (let (($x362 (forall ((input.ind-%var2486X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2486X)))
 (= $x252 false)))
 ))
 (let (($x255 (and (and $x362 $x215) $x376)))
 (let (($x265 (= $x255 true)))
 (let (($x254 (forall ((input.ind-%var2476X (_ BitVec 32)) )(let (($x338 (= input.ind-%var2476X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x340 (ite $x51 $x338 false)))
 (let (($x344 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2476X)))
 (= $x344 $x340))))))
 ))
 (let (($x88 (forall ((input.ind-%var2477X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x338 (= input.ind-%var2477X input.spec-%var-y-0)))
 (let ((?x163 (ite $x338 ?x25 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x304 (ite $x51 ?x163 (_ bv0 32))))
 (let ((?x243 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2477X)))
 (let (($x344 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2477X)))
 (=> $x344 (= ?x243 ?x304))))))))))
 ))
 (let (($x287 (and $x88 $x254)))
 (let (($x237 (= $x287 true)))
 (let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x38 ?x25 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x50 (ite $x51 ?x45 (_ bv0 32))))
 (let (($x341 (= input.spec-%tmpvar-6.L2%13%d.2 ?x50)))
 (let (($x256 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x329 (=> $x256 $x341)))
 (let (($x324 (ite $x51 $x38 false)))
 (let ((?x176 (ite $x324 (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x176 (_ bv1 32))))
 (let (($x274 (= $x256 $x352)))
 (let (($x34 (= false false)))
 (let (($x398 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x296 (=> $x398 $x34)))
 (let (($x143 (= ?x176 (_ bv0 32))))
 (let (($x354 (= $x398 $x143)))
 (let (($x305 (and (and (and $x354 $x296) $x274) $x329)))
 (let (($x181 (= $x305 true)))
 (let (($x350 (forall ((input.ind-%var2459X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x338 (= input.ind-%var2459X input.spec-%var-y-0)))
 (let ((?x163 (ite $x338 ?x25 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x304 (ite $x51 ?x163 (_ bv0 32))))
 (let ((?x204 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2459X)))
 (let (($x218 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2459X)))
 (let (($x193 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x193 $x218) (= ?x204 ?x304)))))))))))
 ))
 (let (($x208 (forall ((input.ind-%var2458X (_ BitVec 32)) )(let (($x338 (= input.ind-%var2458X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x340 (ite $x51 $x338 false)))
 (let (($x218 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2458X)))
 (let (($x193 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x193 (= $x218 $x340))))))))
 ))
 (let ((?x69 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x12 (= ?x69 (_ bv0 32))))
 (let (($x323 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x202 (= $x323 $x12)))
 (let (($x393 (=> $x323 $x34)))
 (let (($x194 (bvuge ?x69 (_ bv1 32))))
 (let (($x193 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x15 (= $x193 $x194)))
 (let (($x363 (and (and (and (and $x15 $x393) $x202) $x208) $x350)))
 (let (($x371 (= $x363 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x124 (concat ?x123 (concat ?x111 ?x171)))))
 (let (($x185 (= ?x101 input.dst.llvm-%x)))
 (let (($x191 (= $x185 true)))
 (let (($x55 (= $x191 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x117 (concat ?x118 (concat ?x131 ?x128)))))
 (let (($x186 (= ?x129 input.dst.llvm-%y)))
 (let (($x177 (= $x186 true)))
 (let (($x190 (= $x177 true)))
 (let (($x133 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x166 (= $x133 true)))
 (let (($x167 (= $x166 true)))
 (let (($x169 (= $x167 true)))
 (let (($x63 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x149 (= $x63 true)))
 (let (($x150 (= $x149 true)))
 (let (($x158 (= $x150 true)))
 (let (($x134 (= input.dst.llvm-%y ?x129)))
 (let (($x107 (= input.dst.llvm-%x ?x101)))
 (let (($x135 (and $x107 $x134)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x98)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x84)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (and $x9 $x95)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x17 $x58)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x104 $x6)))
 (let (($x13 (not $x52)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x90 $x54)))
 (let (($x59 (and (not $x28) $x13)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x89 $x60)))
 (let (($x94 (not $x80)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x70 $x82)))
 (let (($x26 (and (not $x96) $x94)))
 (let (($x91 (and (and (and (and (and (and $x26 $x59) $x75) $x83) $x31) $x46) $x16)))
 (let (($x73 (and $x91 $x61)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x33 (or false (or false (and (and true (or $x19 $x27)) (or $x5 $x67))))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x33)))
 (let (($x7 (and (and (and $x22 $x133) $x73) $x135)))
 (let (($x138 (and $x63 $x7)))
 (let (($x188 (= $x138 true)))
 (let (($x172 (= $x188 true)))
 (let (($x142 (= $x172 true)))
 (let (($x32 (and $x22 $x73)))
 (let (($x53 (= $x32 true)))
 (let (($x20 (= $x53 true)))
 (let (($x97 (= $x20 true)))
 (let (($x189 (and $x97 $x142)))
 (let (($x165 (and $x189 $x158)))
 (let (($x192 (and $x165 $x169)))
 (let (($x184 (and $x192 $x190)))
 (let (($x187 (and $x184 $x55)))
 (let (($x336 (and $x187 $x371)))
 (let (($x182 (and $x336 $x181)))
 (let (($x197 (and $x182 $x237)))
 (let (($x179 (and $x197 $x265)))
 (let (($x103 (and $x179 $x122)))
 (let (($x284 (and $x103 $x283)))
 (let (($x359 (and $x284 $x228)))
 (let (($x267 (and $x359 $x315)))
 (let (($x334 (and $x12 $x267)))
 (let (($x21 (= ?x25 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x275 (and $x21 $x334)))
 (let (($x141 (and $x34 $x275)))
 (let (($x43 (= input.spec-%var-m2-0.L2%18%bbentry ?x50)))
 (let (($x148 (and $x43 $x141)))
 (let (($x279 (and $x34 $x148)))
 (let (($x223 (=> $x279 $x302)))
 (not $x223))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x298 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x227 (= input.spec-%var-x-0 ?x298)))
 (let (($x77 (= $x227 true)))
 (let (($x302 (= $x77 true)))
 (let (($x397 (forall ((input.ind-%var2533X (_ BitVec 32)) (input.ind-%var2535X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x338 (= input.ind-%var2535X input.spec-%var-y-0)))
 (let ((?x163 (ite $x338 ?x25 (_ bv0 32))))
 (let (($x382 (= input.ind-%var2533X input.spec-%var-x-0)))
 (let ((?x162 (ite $x382 ?x163 (_ bv0 32))))
 (let ((?x378 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2533X input.ind-%var2535X)))
 (let (($x140 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2533X input.ind-%var2535X)))
 (let (($x147 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2533X)))
 (=> (and $x147 $x140) (= ?x378 ?x162)))))))))))
 ))
 (let (($x391 (forall ((input.ind-%var2533X (_ BitVec 32)) (input.ind-%var2534X (_ BitVec 32)) )(let (($x338 (= input.ind-%var2534X input.spec-%var-y-0)))
 (let (($x382 (= input.ind-%var2533X input.spec-%var-x-0)))
 (let (($x297 (ite $x382 $x338 false)))
 (let (($x140 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2533X input.ind-%var2534X)))
 (let (($x147 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2533X)))
 (=> $x147 (= $x140 $x297))))))))
 ))
 (let (($x295 (forall ((input.ind-%var2532X (_ BitVec 32)) )(let (($x164 (= input.ind-%var2532X input.spec-%var-x-0)))
 (let (($x385 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2532X)))
 (= $x385 $x164))))
 ))
 (let (($x178 (and (and $x295 $x391) $x397)))
 (let (($x315 (= $x178 true)))
 (let (($x367 (forall ((input.ind-%var2517X (_ BitVec 32)) (input.ind-%var2519X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x338 (= input.ind-%var2519X input.spec-%var-y-0)))
 (let ((?x163 (ite $x338 ?x25 (_ bv0 32))))
 (let (($x382 (= input.ind-%var2517X input.spec-%var-x-0)))
 (let ((?x162 (ite $x382 ?x163 (_ bv0 32))))
 (let ((?x159 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2517X input.ind-%var2519X)))
 (let (($x212 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2517X input.ind-%var2519X)))
 (let (($x301 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2517X)))
 (=> (and $x301 $x212) (= ?x159 ?x162)))))))))))
 ))
 (let (($x311 (forall ((input.ind-%var2517X (_ BitVec 32)) (input.ind-%var2518X (_ BitVec 32)) )(let (($x338 (= input.ind-%var2518X input.spec-%var-y-0)))
 (let (($x382 (= input.ind-%var2517X input.spec-%var-x-0)))
 (let (($x297 (ite $x382 $x338 false)))
 (let (($x212 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2517X input.ind-%var2518X)))
 (let (($x301 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2517X)))
 (=> $x301 (= $x212 $x297))))))))
 ))
 (let (($x285 (forall ((input.ind-%var2516X (_ BitVec 32)) )(let (($x164 (= input.ind-%var2516X input.spec-%var-x-0)))
 (let (($x249 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2516X)))
 (= $x249 $x164))))
 ))
 (let (($x257 (and (and $x285 $x311) $x367)))
 (let (($x228 (= $x257 true)))
 (let (($x384 (forall ((input.ind-%var2503X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x338 (= input.ind-%var2503X input.spec-%var-y-0)))
 (let ((?x163 (ite $x338 ?x25 (_ bv0 32))))
 (let ((?x154 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2503X)))
 (let (($x364 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2503X)))
 (=> $x364 (= ?x154 ?x163))))))))
 ))
 (let (($x306 (forall ((input.ind-%var2502X (_ BitVec 32)) )(let (($x338 (= input.ind-%var2502X input.spec-%var-y-0)))
 (let (($x364 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2502X)))
 (= $x364 $x338))))
 ))
 (let (($x365 (and $x306 $x384)))
 (let (($x283 (= $x365 true)))
 (let (($x8 (forall ((input.ind-%var2495X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2495X)))
 (=> $x303 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2495X) (_ bv0 32)))))
 ))
 (let (($x312 (forall ((input.ind-%var2494X (_ BitVec 32)) )(let (($x303 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2494X)))
 (= $x303 false)))
 ))
 (let (($x79 (and $x312 $x8)))
 (let (($x122 (= $x79 true)))
 (let (($x376 (forall ((input.ind-%var2487X (_ BitVec 32)) (input.ind-%var2489X (_ BitVec 32)) )(let (($x343 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2487X input.ind-%var2489X)))
 (let (($x259 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2487X)))
 (=> (and $x259 $x343) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2487X input.ind-%var2489X) (_ bv0 32))))))
 ))
 (let (($x215 (forall ((input.ind-%var2487X (_ BitVec 32)) (input.ind-%var2488X (_ BitVec 32)) )(let (($x259 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2487X)))
 (=> $x259 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2487X input.ind-%var2488X) false))))
 ))
 (let (($x362 (forall ((input.ind-%var2486X (_ BitVec 32)) )(let (($x252 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2486X)))
 (= $x252 false)))
 ))
 (let (($x255 (and (and $x362 $x215) $x376)))
 (let (($x265 (= $x255 true)))
 (let (($x254 (forall ((input.ind-%var2476X (_ BitVec 32)) )(let (($x338 (= input.ind-%var2476X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x340 (ite $x51 $x338 false)))
 (let (($x344 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2476X)))
 (= $x344 $x340))))))
 ))
 (let (($x88 (forall ((input.ind-%var2477X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x338 (= input.ind-%var2477X input.spec-%var-y-0)))
 (let ((?x163 (ite $x338 ?x25 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x304 (ite $x51 ?x163 (_ bv0 32))))
 (let ((?x243 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2477X)))
 (let (($x344 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2477X)))
 (=> $x344 (= ?x243 ?x304))))))))))
 ))
 (let (($x287 (and $x88 $x254)))
 (let (($x237 (= $x287 true)))
 (let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x38 ?x25 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x50 (ite $x51 ?x45 (_ bv0 32))))
 (let (($x341 (= input.spec-%tmpvar-6.L2%13%d.2 ?x50)))
 (let (($x256 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x329 (=> $x256 $x341)))
 (let (($x324 (ite $x51 $x38 false)))
 (let ((?x176 (ite $x324 (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x176 (_ bv1 32))))
 (let (($x274 (= $x256 $x352)))
 (let (($x34 (= false false)))
 (let (($x398 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x296 (=> $x398 $x34)))
 (let (($x143 (= ?x176 (_ bv0 32))))
 (let (($x354 (= $x398 $x143)))
 (let (($x305 (and (and (and $x354 $x296) $x274) $x329)))
 (let (($x181 (= $x305 true)))
 (let (($x350 (forall ((input.ind-%var2459X (_ BitVec 32)) )(let ((?x25 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x338 (= input.ind-%var2459X input.spec-%var-y-0)))
 (let ((?x163 (ite $x338 ?x25 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x304 (ite $x51 ?x163 (_ bv0 32))))
 (let ((?x204 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2459X)))
 (let (($x218 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2459X)))
 (let (($x193 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x193 $x218) (= ?x204 ?x304)))))))))))
 ))
 (let (($x208 (forall ((input.ind-%var2458X (_ BitVec 32)) )(let (($x338 (= input.ind-%var2458X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x340 (ite $x51 $x338 false)))
 (let (($x218 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2458X)))
 (let (($x193 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x193 (= $x218 $x340))))))))
 ))
 (let ((?x69 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x12 (= ?x69 (_ bv0 32))))
 (let (($x323 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x202 (= $x323 $x12)))
 (let (($x393 (=> $x323 $x34)))
 (let (($x194 (bvuge ?x69 (_ bv1 32))))
 (let (($x193 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x15 (= $x193 $x194)))
 (let (($x363 (and (and (and (and $x15 $x393) $x202) $x208) $x350)))
 (let (($x371 (= $x363 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x124 (concat ?x123 (concat ?x111 ?x171)))))
 (let (($x185 (= ?x101 input.dst.llvm-%x)))
 (let (($x191 (= $x185 true)))
 (let (($x55 (= $x191 true)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x117 (concat ?x118 (concat ?x131 ?x128)))))
 (let (($x186 (= ?x129 input.dst.llvm-%y)))
 (let (($x177 (= $x186 true)))
 (let (($x190 (= $x177 true)))
 (let (($x133 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x166 (= $x133 true)))
 (let (($x167 (= $x166 true)))
 (let (($x169 (= $x167 true)))
 (let (($x63 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x149 (= $x63 true)))
 (let (($x150 (= $x149 true)))
 (let (($x158 (= $x150 true)))
 (let (($x134 (= input.dst.llvm-%y ?x129)))
 (let (($x107 (= input.dst.llvm-%x ?x101)))
 (let (($x135 (and $x107 $x134)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x98)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x84)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (and $x9 $x95)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x17 $x58)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x104 $x6)))
 (let (($x13 (not $x52)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x90 $x54)))
 (let (($x59 (and (not $x28) $x13)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x89 $x60)))
 (let (($x94 (not $x80)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x70 $x82)))
 (let (($x26 (and (not $x96) $x94)))
 (let (($x91 (and (and (and (and (and (and $x26 $x59) $x75) $x83) $x31) $x46) $x16)))
 (let (($x73 (and $x91 $x61)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x33 (or false (or false (and (and true (or $x19 $x27)) (or $x5 $x67))))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x33)))
 (let (($x7 (and (and (and $x22 $x133) $x73) $x135)))
 (let (($x138 (and $x63 $x7)))
 (let (($x188 (= $x138 true)))
 (let (($x172 (= $x188 true)))
 (let (($x142 (= $x172 true)))
 (let (($x32 (and $x22 $x73)))
 (let (($x53 (= $x32 true)))
 (let (($x20 (= $x53 true)))
 (let (($x97 (= $x20 true)))
 (let (($x189 (and $x97 $x142)))
 (let (($x165 (and $x189 $x158)))
 (let (($x192 (and $x165 $x169)))
 (let (($x184 (and $x192 $x190)))
 (let (($x187 (and $x184 $x55)))
 (let (($x336 (and $x187 $x371)))
 (let (($x182 (and $x336 $x181)))
 (let (($x197 (and $x182 $x237)))
 (let (($x179 (and $x197 $x265)))
 (let (($x103 (and $x179 $x122)))
 (let (($x284 (and $x103 $x283)))
 (let (($x359 (and $x284 $x228)))
 (let (($x267 (and $x359 $x315)))
 (let (($x334 (and $x12 $x267)))
 (let (($x21 (= ?x25 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x275 (and $x21 $x334)))
 (let (($x141 (and $x34 $x275)))
 (let (($x43 (= input.spec-%var-m2-0.L2%18%bbentry ?x50)))
 (let (($x148 (and $x43 $x141)))
 (let (($x279 (and $x34 $x148)))
 (let (($x223 (=> $x279 $x302)))
 (not $x223))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171441/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x274 (ite $x38 $x51 false)))
 (let ((?x372 (ite $x274 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x372 (_ bv1 32))))
 (let (($x24 (= ?x372 (_ bv0 32))))
 (let (($x335 (or $x24 $x181)))
 (let ((?x184 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x184 (_ bv1 32))))
 (let (($x242 (and $x185 $x335)))
 (let (($x330 (= ?x184 (_ bv0 32))))
 (let (($x374 (or $x330 $x242)))
 (let (($x351 (or false $x374)))
 (let (($x318 (= $x351 true)))
 (let (($x313 (= $x318 true)))
 (let (($x276 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2707X (_ BitVec 32)) )(let ((?x74 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x340 (= input.ind-%var2707X input.spec-%var-y-0)))
 (let ((?x345 (ite $x340 ?x74 (_ bv0 32))))
 (let (($x198 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let ((?x380 (ite $x198 ?x345 (_ bv0 32))))
 (let ((?x401 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x322 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x408 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2705X)))
 (=> (and $x408 $x322) (= ?x401 ?x380)))))))))))
 ))
 (let (($x260 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2706X (_ BitVec 32)) )(let (($x340 (= input.ind-%var2706X input.spec-%var-y-0)))
 (let (($x198 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let (($x120 (ite $x198 $x340 false)))
 (let (($x322 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2706X)))
 (let (($x408 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2705X)))
 (=> $x408 (= $x322 $x120))))))))
 ))
 (let (($x210 (forall ((input.ind-%var2704X (_ BitVec 32)) )(let (($x203 (= input.ind-%var2704X input.spec-%var-x-0)))
 (let (($x368 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2704X)))
 (= $x368 $x203))))
 ))
 (let (($x153 (and (and $x210 $x260) $x276)))
 (let (($x236 (= $x153 true)))
 (let (($x240 (forall ((input.ind-%var2689X (_ BitVec 32)) (input.ind-%var2691X (_ BitVec 32)) )(let ((?x74 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x340 (= input.ind-%var2691X input.spec-%var-y-0)))
 (let ((?x345 (ite $x340 ?x74 (_ bv0 32))))
 (let (($x198 (= input.ind-%var2689X input.spec-%var-x-0)))
 (let ((?x380 (ite $x198 ?x345 (_ bv0 32))))
 (let ((?x214 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2689X input.ind-%var2691X)))
 (let (($x109 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2689X input.ind-%var2691X)))
 (let (($x407 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2689X)))
 (=> (and $x407 $x109) (= ?x214 ?x380)))))))))))
 ))
 (let (($x222 (forall ((input.ind-%var2689X (_ BitVec 32)) (input.ind-%var2690X (_ BitVec 32)) )(let (($x340 (= input.ind-%var2690X input.spec-%var-y-0)))
 (let (($x198 (= input.ind-%var2689X input.spec-%var-x-0)))
 (let (($x120 (ite $x198 $x340 false)))
 (let (($x109 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2689X input.ind-%var2690X)))
 (let (($x407 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2689X)))
 (=> $x407 (= $x109 $x120))))))))
 ))
 (let (($x289 (forall ((input.ind-%var2688X (_ BitVec 32)) )(let (($x203 (= input.ind-%var2688X input.spec-%var-x-0)))
 (let (($x263 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2688X)))
 (= $x263 $x203))))
 ))
 (let (($x183 (and (and $x289 $x222) $x240)))
 (let (($x251 (= $x183 true)))
 (let (($x386 (forall ((input.ind-%var2675X (_ BitVec 32)) )(let ((?x74 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x340 (= input.ind-%var2675X input.spec-%var-y-0)))
 (let ((?x345 (ite $x340 ?x74 (_ bv0 32))))
 (let ((?x241 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2675X)))
 (let (($x227 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2675X)))
 (=> $x227 (= ?x241 ?x345))))))))
 ))
 (let (($x23 (forall ((input.ind-%var2674X (_ BitVec 32)) )(let (($x340 (= input.ind-%var2674X input.spec-%var-y-0)))
 (let (($x227 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2674X)))
 (= $x227 $x340))))
 ))
 (let (($x291 (and $x23 $x386)))
 (let (($x356 (= $x291 true)))
 (let (($x334 (forall ((input.ind-%var2667X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2667X)))
 (=> $x147 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2667X) (_ bv0 32)))))
 ))
 (let (($x391 (forall ((input.ind-%var2666X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2666X)))
 (= $x147 false)))
 ))
 (let (($x275 (and $x391 $x334)))
 (let (($x141 (= $x275 true)))
 (let (($x367 (forall ((input.ind-%var2659X (_ BitVec 32)) (input.ind-%var2661X (_ BitVec 32)) )(let (($x283 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2659X input.ind-%var2661X)))
 (let (($x285 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2659X)))
 (=> (and $x285 $x283) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2659X input.ind-%var2661X) (_ bv0 32))))))
 ))
 (let (($x212 (forall ((input.ind-%var2659X (_ BitVec 32)) (input.ind-%var2660X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2659X)))
 (=> $x285 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2659X input.ind-%var2660X) false))))
 ))
 (let (($x250 (forall ((input.ind-%var2658X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2658X)))
 (= $x79 false)))
 ))
 (let (($x228 (and (and $x250 $x212) $x367)))
 (let (($x359 (= $x228 true)))
 (let (($x332 (forall ((input.ind-%var2649X (_ BitVec 32)) )(let ((?x74 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x340 (= input.ind-%var2649X input.spec-%var-y-0)))
 (let ((?x345 (ite $x340 ?x74 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x348 (ite $x38 ?x345 (_ bv0 32))))
 (let ((?x258 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2649X)))
 (let (($x252 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2649X)))
 (=> $x252 (= ?x258 ?x348))))))))))
 ))
 (let (($x266 (forall ((input.ind-%var2648X (_ BitVec 32)) )(let (($x340 (= input.ind-%var2648X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x371 (ite $x38 $x340 false)))
 (let (($x252 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2648X)))
 (= $x252 $x371))))))
 ))
 (let (($x312 (and $x266 $x332)))
 (let (($x342 (= $x312 true)))
 (let ((?x74 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x51 ?x74 (_ bv0 32))))
 (let ((?x39 (ite $x38 ?x45 (_ bv0 32))))
 (let (($x243 (= input.spec-%tmpvar-6.L2%13%d.2 ?x39)))
 (let (($x305 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x406 (=> $x305 $x243)))
 (let (($x182 (= $x305 $x181)))
 (let (($x121 (= false false)))
 (let (($x352 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x329 (=> $x352 $x121)))
 (let (($x341 (= $x352 $x24)))
 (let (($x399 (and (and (and $x341 $x329) $x182) $x406)))
 (let (($x254 (= $x399 true)))
 (let (($x398 (forall ((input.ind-%var2630X (_ BitVec 32)) )(let (($x340 (= input.ind-%var2630X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x371 (ite $x38 $x340 false)))
 (let (($x15 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2630X)))
 (let (($x190 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x190 (= $x15 $x371))))))))
 ))
 (let (($x204 (forall ((input.ind-%var2631X (_ BitVec 32)) )(let ((?x74 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x340 (= input.ind-%var2631X input.spec-%var-y-0)))
 (let ((?x345 (ite $x340 ?x74 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x348 (ite $x38 ?x345 (_ bv0 32))))
 (let ((?x146 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2631X)))
 (let (($x15 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2631X)))
 (let (($x190 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x190 $x15) (= ?x146 ?x348)))))))))))
 ))
 (let (($x55 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x193 (= $x55 $x330)))
 (let (($x187 (=> $x55 $x121)))
 (let (($x190 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x191 (= $x190 $x185)))
 (let (($x354 (and (and (and (and $x191 $x187) $x193) $x204) $x398)))
 (let (($x296 (= $x354 true)))
 (let (($x166 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x167 (= $x166 true)))
 (let (($x169 (= $x167 true)))
 (let (($x192 (= $x169 true)))
 (let (($x189 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x149 (= $x189 true)))
 (let (($x150 (= $x149 true)))
 (let (($x158 (= $x150 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x134 (concat ?x119 (concat ?x130 ?x126)))))
 (let (($x138 (= ?x135 input.dst.llvm-%y)))
 (let (($x188 (= $x138 true)))
 (let (($x172 (= $x188 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x111 (concat ?x64 (concat ?x92 ?x10)))))
 (let (($x112 (= ?x171 input.dst.llvm-%x)))
 (let (($x101 (= $x112 true)))
 (let (($x107 (= $x101 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x40)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x49)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x17 $x42)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x85 $x95)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x6 $x52)))
 (let (($x59 (not $x13)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x28 $x56)))
 (let (($x72 (and (not $x104) $x59)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x60 $x80)))
 (let (($x26 (not $x94)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x108 $x14)))
 (let (($x54 (and (not $x89) $x26)))
 (let (($x32 (and (and (and (and (and (and $x54 $x72) $x47) $x83) $x58) $x81) $x46)))
 (let (($x53 (and $x32 $x84)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x82 (or false (or false (and (and true (or $x41 $x105)) (or $x76 $x62))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x20 (and $x93 $x53)))
 (let (($x97 (= $x20 true)))
 (let (($x44 (= $x97 true)))
 (let (($x63 (= $x44 true)))
 (let (($x125 (and $x63 $x107)))
 (let (($x142 (and $x125 $x172)))
 (let (($x165 (and $x142 $x158)))
 (let (($x186 (and $x165 $x192)))
 (let (($x168 (and $x186 $x296)))
 (let (($x287 (and $x168 $x254)))
 (let (($x282 (and $x287 $x342)))
 (let (($x385 (and $x282 $x359)))
 (let (($x148 (and $x385 $x141)))
 (let (($x139 (and $x148 $x356)))
 (let (($x216 (and $x139 $x251)))
 (let (($x173 (and $x216 $x236)))
 (let (($x25 (= ?x74 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x349 (and $x25 $x173)))
 (let (($x232 (and $x121 $x349)))
 (let (($x50 (= input.spec-%var-m2-0.L2%18%bbentry ?x39)))
 (let (($x389 (and $x50 $x232)))
 (let (($x360 (and $x121 $x389)))
 (let (($x244 (=> $x360 $x313)))
 (not $x244))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x51 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x274 (ite $x38 $x51 false)))
 (let ((?x372 (ite $x274 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x372 (_ bv1 32))))
 (let (($x24 (= ?x372 (_ bv0 32))))
 (let (($x335 (or $x24 $x181)))
 (let ((?x184 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x184 (_ bv1 32))))
 (let (($x242 (and $x185 $x335)))
 (let (($x330 (= ?x184 (_ bv0 32))))
 (let (($x374 (or $x330 $x242)))
 (let (($x351 (or false $x374)))
 (let (($x318 (= $x351 true)))
 (let (($x313 (= $x318 true)))
 (let (($x276 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2707X (_ BitVec 32)) )(let ((?x74 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x340 (= input.ind-%var2707X input.spec-%var-y-0)))
 (let ((?x345 (ite $x340 ?x74 (_ bv0 32))))
 (let (($x198 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let ((?x380 (ite $x198 ?x345 (_ bv0 32))))
 (let ((?x401 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x322 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2707X)))
 (let (($x408 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2705X)))
 (=> (and $x408 $x322) (= ?x401 ?x380)))))))))))
 ))
 (let (($x260 (forall ((input.ind-%var2705X (_ BitVec 32)) (input.ind-%var2706X (_ BitVec 32)) )(let (($x340 (= input.ind-%var2706X input.spec-%var-y-0)))
 (let (($x198 (= input.ind-%var2705X input.spec-%var-x-0)))
 (let (($x120 (ite $x198 $x340 false)))
 (let (($x322 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2705X input.ind-%var2706X)))
 (let (($x408 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2705X)))
 (=> $x408 (= $x322 $x120))))))))
 ))
 (let (($x210 (forall ((input.ind-%var2704X (_ BitVec 32)) )(let (($x203 (= input.ind-%var2704X input.spec-%var-x-0)))
 (let (($x368 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2704X)))
 (= $x368 $x203))))
 ))
 (let (($x153 (and (and $x210 $x260) $x276)))
 (let (($x236 (= $x153 true)))
 (let (($x240 (forall ((input.ind-%var2689X (_ BitVec 32)) (input.ind-%var2691X (_ BitVec 32)) )(let ((?x74 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x340 (= input.ind-%var2691X input.spec-%var-y-0)))
 (let ((?x345 (ite $x340 ?x74 (_ bv0 32))))
 (let (($x198 (= input.ind-%var2689X input.spec-%var-x-0)))
 (let ((?x380 (ite $x198 ?x345 (_ bv0 32))))
 (let ((?x214 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2689X input.ind-%var2691X)))
 (let (($x109 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2689X input.ind-%var2691X)))
 (let (($x407 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2689X)))
 (=> (and $x407 $x109) (= ?x214 ?x380)))))))))))
 ))
 (let (($x222 (forall ((input.ind-%var2689X (_ BitVec 32)) (input.ind-%var2690X (_ BitVec 32)) )(let (($x340 (= input.ind-%var2690X input.spec-%var-y-0)))
 (let (($x198 (= input.ind-%var2689X input.spec-%var-x-0)))
 (let (($x120 (ite $x198 $x340 false)))
 (let (($x109 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2689X input.ind-%var2690X)))
 (let (($x407 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2689X)))
 (=> $x407 (= $x109 $x120))))))))
 ))
 (let (($x289 (forall ((input.ind-%var2688X (_ BitVec 32)) )(let (($x203 (= input.ind-%var2688X input.spec-%var-x-0)))
 (let (($x263 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2688X)))
 (= $x263 $x203))))
 ))
 (let (($x183 (and (and $x289 $x222) $x240)))
 (let (($x251 (= $x183 true)))
 (let (($x386 (forall ((input.ind-%var2675X (_ BitVec 32)) )(let ((?x74 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x340 (= input.ind-%var2675X input.spec-%var-y-0)))
 (let ((?x345 (ite $x340 ?x74 (_ bv0 32))))
 (let ((?x241 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2675X)))
 (let (($x227 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2675X)))
 (=> $x227 (= ?x241 ?x345))))))))
 ))
 (let (($x23 (forall ((input.ind-%var2674X (_ BitVec 32)) )(let (($x340 (= input.ind-%var2674X input.spec-%var-y-0)))
 (let (($x227 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2674X)))
 (= $x227 $x340))))
 ))
 (let (($x291 (and $x23 $x386)))
 (let (($x356 (= $x291 true)))
 (let (($x334 (forall ((input.ind-%var2667X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2667X)))
 (=> $x147 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2667X) (_ bv0 32)))))
 ))
 (let (($x391 (forall ((input.ind-%var2666X (_ BitVec 32)) )(let (($x147 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2666X)))
 (= $x147 false)))
 ))
 (let (($x275 (and $x391 $x334)))
 (let (($x141 (= $x275 true)))
 (let (($x367 (forall ((input.ind-%var2659X (_ BitVec 32)) (input.ind-%var2661X (_ BitVec 32)) )(let (($x283 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2659X input.ind-%var2661X)))
 (let (($x285 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2659X)))
 (=> (and $x285 $x283) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2659X input.ind-%var2661X) (_ bv0 32))))))
 ))
 (let (($x212 (forall ((input.ind-%var2659X (_ BitVec 32)) (input.ind-%var2660X (_ BitVec 32)) )(let (($x285 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2659X)))
 (=> $x285 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2659X input.ind-%var2660X) false))))
 ))
 (let (($x250 (forall ((input.ind-%var2658X (_ BitVec 32)) )(let (($x79 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2658X)))
 (= $x79 false)))
 ))
 (let (($x228 (and (and $x250 $x212) $x367)))
 (let (($x359 (= $x228 true)))
 (let (($x332 (forall ((input.ind-%var2649X (_ BitVec 32)) )(let ((?x74 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x340 (= input.ind-%var2649X input.spec-%var-y-0)))
 (let ((?x345 (ite $x340 ?x74 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x348 (ite $x38 ?x345 (_ bv0 32))))
 (let ((?x258 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2649X)))
 (let (($x252 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2649X)))
 (=> $x252 (= ?x258 ?x348))))))))))
 ))
 (let (($x266 (forall ((input.ind-%var2648X (_ BitVec 32)) )(let (($x340 (= input.ind-%var2648X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x371 (ite $x38 $x340 false)))
 (let (($x252 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2648X)))
 (= $x252 $x371))))))
 ))
 (let (($x312 (and $x266 $x332)))
 (let (($x342 (= $x312 true)))
 (let ((?x74 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x51 ?x74 (_ bv0 32))))
 (let ((?x39 (ite $x38 ?x45 (_ bv0 32))))
 (let (($x243 (= input.spec-%tmpvar-6.L2%13%d.2 ?x39)))
 (let (($x305 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x406 (=> $x305 $x243)))
 (let (($x182 (= $x305 $x181)))
 (let (($x121 (= false false)))
 (let (($x352 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x329 (=> $x352 $x121)))
 (let (($x341 (= $x352 $x24)))
 (let (($x399 (and (and (and $x341 $x329) $x182) $x406)))
 (let (($x254 (= $x399 true)))
 (let (($x398 (forall ((input.ind-%var2630X (_ BitVec 32)) )(let (($x340 (= input.ind-%var2630X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x371 (ite $x38 $x340 false)))
 (let (($x15 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2630X)))
 (let (($x190 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x190 (= $x15 $x371))))))))
 ))
 (let (($x204 (forall ((input.ind-%var2631X (_ BitVec 32)) )(let ((?x74 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x340 (= input.ind-%var2631X input.spec-%var-y-0)))
 (let ((?x345 (ite $x340 ?x74 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x348 (ite $x38 ?x345 (_ bv0 32))))
 (let ((?x146 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2631X)))
 (let (($x15 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2631X)))
 (let (($x190 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x190 $x15) (= ?x146 ?x348)))))))))))
 ))
 (let (($x55 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x193 (= $x55 $x330)))
 (let (($x187 (=> $x55 $x121)))
 (let (($x190 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x191 (= $x190 $x185)))
 (let (($x354 (and (and (and (and $x191 $x187) $x193) $x204) $x398)))
 (let (($x296 (= $x354 true)))
 (let (($x166 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x167 (= $x166 true)))
 (let (($x169 (= $x167 true)))
 (let (($x192 (= $x169 true)))
 (let (($x189 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x149 (= $x189 true)))
 (let (($x150 (= $x149 true)))
 (let (($x158 (= $x150 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x135 (concat ?x134 (concat ?x119 (concat ?x130 ?x126)))))
 (let (($x138 (= ?x135 input.dst.llvm-%y)))
 (let (($x188 (= $x138 true)))
 (let (($x172 (= $x188 true)))
 (let ((?x10 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x111 (concat ?x64 (concat ?x92 ?x10)))))
 (let (($x112 (= ?x171 input.dst.llvm-%x)))
 (let (($x101 (= $x112 true)))
 (let (($x107 (= $x101 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x40)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x49)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x17 $x42)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x85 $x95)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x6 $x52)))
 (let (($x59 (not $x13)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x28 $x56)))
 (let (($x72 (and (not $x104) $x59)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x60 $x80)))
 (let (($x26 (not $x94)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x108 $x14)))
 (let (($x54 (and (not $x89) $x26)))
 (let (($x32 (and (and (and (and (and (and $x54 $x72) $x47) $x83) $x58) $x81) $x46)))
 (let (($x53 (and $x32 $x84)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x82 (or false (or false (and (and true (or $x41 $x105)) (or $x76 $x62))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x20 (and $x93 $x53)))
 (let (($x97 (= $x20 true)))
 (let (($x44 (= $x97 true)))
 (let (($x63 (= $x44 true)))
 (let (($x125 (and $x63 $x107)))
 (let (($x142 (and $x125 $x172)))
 (let (($x165 (and $x142 $x158)))
 (let (($x186 (and $x165 $x192)))
 (let (($x168 (and $x186 $x296)))
 (let (($x287 (and $x168 $x254)))
 (let (($x282 (and $x287 $x342)))
 (let (($x385 (and $x282 $x359)))
 (let (($x148 (and $x385 $x141)))
 (let (($x139 (and $x148 $x356)))
 (let (($x216 (and $x139 $x251)))
 (let (($x173 (and $x216 $x236)))
 (let (($x25 (= ?x74 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x349 (and $x25 $x173)))
 (let (($x232 (and $x121 $x349)))
 (let (($x50 (= input.spec-%var-m2-0.L2%18%bbentry ?x39)))
 (let (($x389 (and $x50 $x232)))
 (let (($x360 (and $x121 $x389)))
 (let (($x244 (=> $x360 $x313)))
 (not $x244))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171441/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x18 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x38 ?x18 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x19 (ite $x51 ?x45 (_ bv0 32))))
 (let ((?x205 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x400 (= ?x205 ?x19)))
 (let (($x309 (= $x400 true)))
 (let (($x211 (= $x309 true)))
 (let (($x388 (forall ((input.ind-%var2887X (_ BitVec 32)) (input.ind-%var2889X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2889X input.spec-%var-y-0)))
 (let ((?x179 (ite $x329 ?x18 (_ bv0 32))))
 (let (($x57 (= input.ind-%var2887X input.spec-%var-x-0)))
 (let ((?x402 (ite $x57 ?x179 (_ bv0 32))))
 (let ((?x200 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2887X input.ind-%var2889X)))
 (let (($x164 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2887X input.ind-%var2889X)))
 (let (($x178 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2887X)))
 (=> (and $x178 $x164) (= ?x200 ?x402)))))))))))
 ))
 (let (($x392 (forall ((input.ind-%var2887X (_ BitVec 32)) (input.ind-%var2888X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2888X input.spec-%var-y-0)))
 (let (($x57 (= input.ind-%var2887X input.spec-%var-x-0)))
 (let (($x247 (ite $x57 $x329 false)))
 (let (($x164 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2887X input.ind-%var2888X)))
 (let (($x178 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2887X)))
 (=> $x178 (= $x164 $x247))))))))
 ))
 (let (($x215 (forall ((input.ind-%var2886X (_ BitVec 32)) )(let (($x288 (= input.ind-%var2886X input.spec-%var-x-0)))
 (let (($x34 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2886X)))
 (= $x34 $x288))))
 ))
 (let (($x180 (and (and $x215 $x392) $x388)))
 (let (($x278 (= $x180 true)))
 (let (($x218 (forall ((input.ind-%var2871X (_ BitVec 32)) (input.ind-%var2873X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2873X input.spec-%var-y-0)))
 (let ((?x179 (ite $x329 ?x18 (_ bv0 32))))
 (let (($x57 (= input.ind-%var2871X input.spec-%var-x-0)))
 (let ((?x402 (ite $x57 ?x179 (_ bv0 32))))
 (let ((?x404 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2871X input.ind-%var2873X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2871X input.ind-%var2873X)))
 (let (($x387 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2871X)))
 (=> (and $x387 $x326) (= ?x404 ?x402)))))))))))
 ))
 (let (($x396 (forall ((input.ind-%var2871X (_ BitVec 32)) (input.ind-%var2872X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2872X input.spec-%var-y-0)))
 (let (($x57 (= input.ind-%var2871X input.spec-%var-x-0)))
 (let (($x247 (ite $x57 $x329 false)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2871X input.ind-%var2872X)))
 (let (($x387 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2871X)))
 (=> $x387 (= $x326 $x247))))))))
 ))
 (let (($x377 (forall ((input.ind-%var2870X (_ BitVec 32)) )(let (($x288 (= input.ind-%var2870X input.spec-%var-x-0)))
 (let (($x219 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2870X)))
 (= $x219 $x288))))
 ))
 (let (($x152 (and (and $x377 $x396) $x218)))
 (let (($x369 (= $x152 true)))
 (let (($x154 (forall ((input.ind-%var2857X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2857X input.spec-%var-y-0)))
 (let ((?x179 (ite $x329 ?x18 (_ bv0 32))))
 (let ((?x304 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2857X)))
 (let (($x317 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2857X)))
 (=> $x317 (= ?x304 ?x179))))))))
 ))
 (let (($x163 (forall ((input.ind-%var2856X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2856X input.spec-%var-y-0)))
 (let (($x317 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2856X)))
 (= $x317 $x329))))
 ))
 (let (($x333 (and $x163 $x154)))
 (let (($x382 (= $x333 true)))
 (let (($x225 (forall ((input.ind-%var2849X (_ BitVec 32)) )(let (($x313 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2849X)))
 (=> $x313 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2849X) (_ bv0 32)))))
 ))
 (let (($x117 (forall ((input.ind-%var2848X (_ BitVec 32)) )(let (($x313 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2848X)))
 (= $x313 false)))
 ))
 (let (($x77 (and $x117 $x225)))
 (let (($x383 (= $x77 true)))
 (let (($x389 (forall ((input.ind-%var2841X (_ BitVec 32)) (input.ind-%var2843X (_ BitVec 32)) )(let (($x368 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2841X input.ind-%var2843X)))
 (let (($x328 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2841X)))
 (=> (and $x328 $x368) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2841X input.ind-%var2843X) (_ bv0 32))))))
 ))
 (let (($x260 (forall ((input.ind-%var2841X (_ BitVec 32)) (input.ind-%var2842X (_ BitVec 32)) )(let (($x328 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2841X)))
 (=> $x328 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2841X input.ind-%var2842X) false))))
 ))
 (let (($x380 (forall ((input.ind-%var2840X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2840X)))
 (= $x222 false)))
 ))
 (let (($x335 (and (and $x380 $x260) $x389)))
 (let (($x242 (= $x335 true)))
 (let (($x407 (forall ((input.ind-%var2830X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2830X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x410 (ite $x51 $x329 false)))
 (let (($x267 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2830X)))
 (= $x267 $x410))))))
 ))
 (let (($x291 (forall ((input.ind-%var2831X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2831X input.spec-%var-y-0)))
 (let ((?x179 (ite $x329 ?x18 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x303 (ite $x51 ?x179 (_ bv0 32))))
 (let ((?x141 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2831X)))
 (let (($x267 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2831X)))
 (=> $x267 (= ?x141 ?x303))))))))))
 ))
 (let (($x109 (and $x291 $x407)))
 (let (($x198 (= $x109 true)))
 (let (($x367 (= input.spec-%tmpvar-6.L2%13%d.2 ?x19)))
 (let (($x311 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x228 (=> $x311 $x367)))
 (let (($x96 (ite $x51 $x38 false)))
 (let ((?x68 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x68 (_ bv1 32))))
 (let (($x162 (= $x311 $x106)))
 (let (($x86 (= false false)))
 (let (($x301 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x293 (=> $x301 $x86)))
 (let (($x212 (= ?x68 (_ bv0 32))))
 (let (($x257 (= $x301 $x212)))
 (let (($x147 (and (and (and $x257 $x293) $x162) $x228)))
 (let (($x286 (= $x147 true)))
 (let (($x282 (forall ((input.ind-%var2813X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2813X input.spec-%var-y-0)))
 (let ((?x179 (ite $x329 ?x18 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x303 (ite $x51 ?x179 (_ bv0 32))))
 (let ((?x399 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2813X)))
 (let (($x256 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2813X)))
 (let (($x143 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x143 $x256) (= ?x399 ?x303)))))))))))
 ))
 (let (($x182 (forall ((input.ind-%var2812X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2812X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x410 (ite $x51 $x329 false)))
 (let (($x256 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2812X)))
 (let (($x143 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x143 (= $x256 $x410))))))))
 ))
 (let ((?x30 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x398 (= ?x30 (_ bv0 32))))
 (let (($x336 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x354 (= $x336 $x398)))
 (let (($x230 (=> $x336 $x86)))
 (let (($x25 (bvuge ?x30 (_ bv1 32))))
 (let (($x143 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x371 (= $x143 $x25)))
 (let (($x365 (and (and (and (and $x371 $x230) $x354) $x182) $x282)))
 (let (($x285 (= $x365 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x126 (concat ?x119 (concat ?x125 ?x101)))))
 (let (($x345 (= ?x131 input.dst.llvm-%x)))
 (let (($x348 (= $x345 true)))
 (let (($x208 (= $x348 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x165 (concat ?x158 (concat ?x189 (concat ?x188 ?x7)))))
 (let (($x15 (= ?x165 input.dst.llvm-%y)))
 (let (($x269 (= $x15 true)))
 (let (($x146 (= $x269 true)))
 (let (($x171 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x330 (= $x171 true)))
 (let (($x193 (= $x330 true)))
 (let (($x176 (= $x193 true)))
 (let (($x113 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x55 (= $x113 true)))
 (let (($x121 (= $x55 true)))
 (let (($x187 (= $x121 true)))
 (let (($x166 (= input.dst.llvm-%y ?x165)))
 (let (($x116 (= input.dst.llvm-%x ?x131)))
 (let (($x167 (and $x116 $x166)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x53)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x40)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x58 $x81)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x95 $x73)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x47 $x91)))
 (let (($x83 (not $x65)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x72 $x16)))
 (let (($x85 (and (not $x75) $x83)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x104 $x78)))
 (let (($x52 (not $x6)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x5 $x11)))
 (let (($x59 (and (not $x56) $x52)))
 (let (($x111 (and (and (and (and (and (and $x59 $x85) $x9) $x42) $x49) $x32) $x84)))
 (let (($x124 (and $x111 $x20)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x26 (or false (or false (and (and true (or $x22 $x70)) (or $x89 $x90))))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x26)))
 (let (($x186 (and (and (and $x28 $x171) $x124) $x167)))
 (let (($x177 (and $x113 $x186)))
 (let (($x190 (= $x177 true)))
 (let (($x184 (= $x190 true)))
 (let (($x185 (= $x184 true)))
 (let (($x102 (and $x28 $x124)))
 (let (($x64 (= $x102 true)))
 (let (($x137 (= $x64 true)))
 (let (($x92 (= $x137 true)))
 (let (($x191 (and $x92 $x185)))
 (let (($x324 (and $x191 $x187)))
 (let (($x194 (and $x324 $x176)))
 (let (($x340 (and $x194 $x146)))
 (let (($x346 (and $x340 $x208)))
 (let (($x283 (and $x346 $x285)))
 (let (($x391 (and $x283 $x286)))
 (let (($x120 (and $x391 $x198)))
 (let (($x374 (and $x120 $x242)))
 (let (($x248 (and $x374 $x383)))
 (let (($x197 (and $x248 $x382)))
 (let (($x201 (and $x197 $x369)))
 (let (($x337 (and $x201 $x278)))
 (let (($x41 (and $x25 $x106)))
 (let (($x209 (and $x41 $x337)))
 (let (($x74 (= ?x18 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x268 (and $x74 $x209)))
 (let (($x220 (and $x86 $x268)))
 (let (($x39 (= input.spec-%var-m2-0.L2%18%bbentry ?x19)))
 (let (($x170 (and $x39 $x220)))
 (let (($x395 (and $x86 $x170)))
 (let (($x316 (=> $x395 $x211)))
 (not $x316)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x18 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x38 ?x18 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x19 (ite $x51 ?x45 (_ bv0 32))))
 (let ((?x205 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x400 (= ?x205 ?x19)))
 (let (($x309 (= $x400 true)))
 (let (($x211 (= $x309 true)))
 (let (($x388 (forall ((input.ind-%var2887X (_ BitVec 32)) (input.ind-%var2889X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2889X input.spec-%var-y-0)))
 (let ((?x179 (ite $x329 ?x18 (_ bv0 32))))
 (let (($x57 (= input.ind-%var2887X input.spec-%var-x-0)))
 (let ((?x402 (ite $x57 ?x179 (_ bv0 32))))
 (let ((?x200 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var2887X input.ind-%var2889X)))
 (let (($x164 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2887X input.ind-%var2889X)))
 (let (($x178 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2887X)))
 (=> (and $x178 $x164) (= ?x200 ?x402)))))))))))
 ))
 (let (($x392 (forall ((input.ind-%var2887X (_ BitVec 32)) (input.ind-%var2888X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2888X input.spec-%var-y-0)))
 (let (($x57 (= input.ind-%var2887X input.spec-%var-x-0)))
 (let (($x247 (ite $x57 $x329 false)))
 (let (($x164 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var2887X input.ind-%var2888X)))
 (let (($x178 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2887X)))
 (=> $x178 (= $x164 $x247))))))))
 ))
 (let (($x215 (forall ((input.ind-%var2886X (_ BitVec 32)) )(let (($x288 (= input.ind-%var2886X input.spec-%var-x-0)))
 (let (($x34 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var2886X)))
 (= $x34 $x288))))
 ))
 (let (($x180 (and (and $x215 $x392) $x388)))
 (let (($x278 (= $x180 true)))
 (let (($x218 (forall ((input.ind-%var2871X (_ BitVec 32)) (input.ind-%var2873X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2873X input.spec-%var-y-0)))
 (let ((?x179 (ite $x329 ?x18 (_ bv0 32))))
 (let (($x57 (= input.ind-%var2871X input.spec-%var-x-0)))
 (let ((?x402 (ite $x57 ?x179 (_ bv0 32))))
 (let ((?x404 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var2871X input.ind-%var2873X)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2871X input.ind-%var2873X)))
 (let (($x387 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2871X)))
 (=> (and $x387 $x326) (= ?x404 ?x402)))))))))))
 ))
 (let (($x396 (forall ((input.ind-%var2871X (_ BitVec 32)) (input.ind-%var2872X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2872X input.spec-%var-y-0)))
 (let (($x57 (= input.ind-%var2871X input.spec-%var-x-0)))
 (let (($x247 (ite $x57 $x329 false)))
 (let (($x326 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var2871X input.ind-%var2872X)))
 (let (($x387 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2871X)))
 (=> $x387 (= $x326 $x247))))))))
 ))
 (let (($x377 (forall ((input.ind-%var2870X (_ BitVec 32)) )(let (($x288 (= input.ind-%var2870X input.spec-%var-x-0)))
 (let (($x219 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var2870X)))
 (= $x219 $x288))))
 ))
 (let (($x152 (and (and $x377 $x396) $x218)))
 (let (($x369 (= $x152 true)))
 (let (($x154 (forall ((input.ind-%var2857X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2857X input.spec-%var-y-0)))
 (let ((?x179 (ite $x329 ?x18 (_ bv0 32))))
 (let ((?x304 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var2857X)))
 (let (($x317 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2857X)))
 (=> $x317 (= ?x304 ?x179))))))))
 ))
 (let (($x163 (forall ((input.ind-%var2856X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2856X input.spec-%var-y-0)))
 (let (($x317 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var2856X)))
 (= $x317 $x329))))
 ))
 (let (($x333 (and $x163 $x154)))
 (let (($x382 (= $x333 true)))
 (let (($x225 (forall ((input.ind-%var2849X (_ BitVec 32)) )(let (($x313 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2849X)))
 (=> $x313 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var2849X) (_ bv0 32)))))
 ))
 (let (($x117 (forall ((input.ind-%var2848X (_ BitVec 32)) )(let (($x313 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var2848X)))
 (= $x313 false)))
 ))
 (let (($x77 (and $x117 $x225)))
 (let (($x383 (= $x77 true)))
 (let (($x389 (forall ((input.ind-%var2841X (_ BitVec 32)) (input.ind-%var2843X (_ BitVec 32)) )(let (($x368 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2841X input.ind-%var2843X)))
 (let (($x328 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2841X)))
 (=> (and $x328 $x368) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var2841X input.ind-%var2843X) (_ bv0 32))))))
 ))
 (let (($x260 (forall ((input.ind-%var2841X (_ BitVec 32)) (input.ind-%var2842X (_ BitVec 32)) )(let (($x328 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2841X)))
 (=> $x328 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var2841X input.ind-%var2842X) false))))
 ))
 (let (($x380 (forall ((input.ind-%var2840X (_ BitVec 32)) )(let (($x222 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var2840X)))
 (= $x222 false)))
 ))
 (let (($x335 (and (and $x380 $x260) $x389)))
 (let (($x242 (= $x335 true)))
 (let (($x407 (forall ((input.ind-%var2830X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2830X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x410 (ite $x51 $x329 false)))
 (let (($x267 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2830X)))
 (= $x267 $x410))))))
 ))
 (let (($x291 (forall ((input.ind-%var2831X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2831X input.spec-%var-y-0)))
 (let ((?x179 (ite $x329 ?x18 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x303 (ite $x51 ?x179 (_ bv0 32))))
 (let ((?x141 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var2831X)))
 (let (($x267 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var2831X)))
 (=> $x267 (= ?x141 ?x303))))))))))
 ))
 (let (($x109 (and $x291 $x407)))
 (let (($x198 (= $x109 true)))
 (let (($x367 (= input.spec-%tmpvar-6.L2%13%d.2 ?x19)))
 (let (($x311 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x228 (=> $x311 $x367)))
 (let (($x96 (ite $x51 $x38 false)))
 (let ((?x68 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x68 (_ bv1 32))))
 (let (($x162 (= $x311 $x106)))
 (let (($x86 (= false false)))
 (let (($x301 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x293 (=> $x301 $x86)))
 (let (($x212 (= ?x68 (_ bv0 32))))
 (let (($x257 (= $x301 $x212)))
 (let (($x147 (and (and (and $x257 $x293) $x162) $x228)))
 (let (($x286 (= $x147 true)))
 (let (($x282 (forall ((input.ind-%var2813X (_ BitVec 32)) )(let ((?x18 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x329 (= input.ind-%var2813X input.spec-%var-y-0)))
 (let ((?x179 (ite $x329 ?x18 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x303 (ite $x51 ?x179 (_ bv0 32))))
 (let ((?x399 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2813X)))
 (let (($x256 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2813X)))
 (let (($x143 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x143 $x256) (= ?x399 ?x303)))))))))))
 ))
 (let (($x182 (forall ((input.ind-%var2812X (_ BitVec 32)) )(let (($x329 (= input.ind-%var2812X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x410 (ite $x51 $x329 false)))
 (let (($x256 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2812X)))
 (let (($x143 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x143 (= $x256 $x410))))))))
 ))
 (let ((?x30 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x398 (= ?x30 (_ bv0 32))))
 (let (($x336 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x354 (= $x336 $x398)))
 (let (($x230 (=> $x336 $x86)))
 (let (($x25 (bvuge ?x30 (_ bv1 32))))
 (let (($x143 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x371 (= $x143 $x25)))
 (let (($x365 (and (and (and (and $x371 $x230) $x354) $x182) $x282)))
 (let (($x285 (= $x365 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x126 (concat ?x119 (concat ?x125 ?x101)))))
 (let (($x345 (= ?x131 input.dst.llvm-%x)))
 (let (($x348 (= $x345 true)))
 (let (($x208 (= $x348 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x165 (concat ?x158 (concat ?x189 (concat ?x188 ?x7)))))
 (let (($x15 (= ?x165 input.dst.llvm-%y)))
 (let (($x269 (= $x15 true)))
 (let (($x146 (= $x269 true)))
 (let (($x171 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x330 (= $x171 true)))
 (let (($x193 (= $x330 true)))
 (let (($x176 (= $x193 true)))
 (let (($x113 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x55 (= $x113 true)))
 (let (($x121 (= $x55 true)))
 (let (($x187 (= $x121 true)))
 (let (($x166 (= input.dst.llvm-%y ?x165)))
 (let (($x116 (= input.dst.llvm-%x ?x131)))
 (let (($x167 (and $x116 $x166)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x53)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x40)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x81 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (and $x58 $x81)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x95 $x73)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x47 $x91)))
 (let (($x83 (not $x65)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x72 $x16)))
 (let (($x85 (and (not $x75) $x83)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x104 $x78)))
 (let (($x52 (not $x6)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x5 $x11)))
 (let (($x59 (and (not $x56) $x52)))
 (let (($x111 (and (and (and (and (and (and $x59 $x85) $x9) $x42) $x49) $x32) $x84)))
 (let (($x124 (and $x111 $x20)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x26 (or false (or false (and (and true (or $x22 $x70)) (or $x89 $x90))))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x26)))
 (let (($x186 (and (and (and $x28 $x171) $x124) $x167)))
 (let (($x177 (and $x113 $x186)))
 (let (($x190 (= $x177 true)))
 (let (($x184 (= $x190 true)))
 (let (($x185 (= $x184 true)))
 (let (($x102 (and $x28 $x124)))
 (let (($x64 (= $x102 true)))
 (let (($x137 (= $x64 true)))
 (let (($x92 (= $x137 true)))
 (let (($x191 (and $x92 $x185)))
 (let (($x324 (and $x191 $x187)))
 (let (($x194 (and $x324 $x176)))
 (let (($x340 (and $x194 $x146)))
 (let (($x346 (and $x340 $x208)))
 (let (($x283 (and $x346 $x285)))
 (let (($x391 (and $x283 $x286)))
 (let (($x120 (and $x391 $x198)))
 (let (($x374 (and $x120 $x242)))
 (let (($x248 (and $x374 $x383)))
 (let (($x197 (and $x248 $x382)))
 (let (($x201 (and $x197 $x369)))
 (let (($x337 (and $x201 $x278)))
 (let (($x41 (and $x25 $x106)))
 (let (($x209 (and $x41 $x337)))
 (let (($x74 (= ?x18 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x268 (and $x74 $x209)))
 (let (($x220 (and $x86 $x268)))
 (let (($x39 (= input.spec-%var-m2-0.L2%18%bbentry ?x19)))
 (let (($x170 (and $x39 $x220)))
 (let (($x395 (and $x86 $x170)))
 (let (($x316 (=> $x395 $x211)))
 (not $x316)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171441/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x159 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x271 (= input.spec-%var-y-0 ?x159)))
 (let (($x273 (= $x271 true)))
 (let (($x145 (= $x273 true)))
 (let (($x234 (forall ((input.ind-%var3063X (_ BitVec 32)) (input.ind-%var3065X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x282 (= input.ind-%var3065X input.spec-%var-y-0)))
 (let ((?x365 (ite $x282 ?x30 (_ bv0 32))))
 (let (($x213 (= input.ind-%var3063X input.spec-%var-x-0)))
 (let ((?x376 (ite $x213 ?x365 (_ bv0 32))))
 (let ((?x320 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3063X input.ind-%var3065X)))
 (let (($x344 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3063X input.ind-%var3065X)))
 (let (($x210 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3063X)))
 (=> (and $x210 $x344) (= ?x320 ?x376)))))))))))
 ))
 (let (($x240 (forall ((input.ind-%var3063X (_ BitVec 32)) (input.ind-%var3064X (_ BitVec 32)) )(let (($x282 (= input.ind-%var3064X input.spec-%var-y-0)))
 (let (($x213 (= input.ind-%var3063X input.spec-%var-x-0)))
 (let (($x390 (ite $x213 $x282 false)))
 (let (($x344 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3063X input.ind-%var3064X)))
 (let (($x210 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3063X)))
 (=> $x210 (= $x344 $x390))))))))
 ))
 (let (($x203 (forall ((input.ind-%var3062X (_ BitVec 32)) )(let (($x195 (= input.ind-%var3062X input.spec-%var-x-0)))
 (let (($x310 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3062X)))
 (= $x310 $x195))))
 ))
 (let (($x355 (and (and $x203 $x240) $x234)))
 (let (($x255 (= $x355 true)))
 (let (($x223 (forall ((input.ind-%var3047X (_ BitVec 32)) (input.ind-%var3049X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x282 (= input.ind-%var3049X input.spec-%var-y-0)))
 (let ((?x365 (ite $x282 ?x30 (_ bv0 32))))
 (let (($x213 (= input.ind-%var3047X input.spec-%var-x-0)))
 (let ((?x376 (ite $x213 ?x365 (_ bv0 32))))
 (let ((?x270 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3047X input.ind-%var3049X)))
 (let (($x261 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3047X input.ind-%var3049X)))
 (let (($x237 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3047X)))
 (=> (and $x237 $x261) (= ?x270 ?x376)))))))))))
 ))
 (let (($x115 (forall ((input.ind-%var3047X (_ BitVec 32)) (input.ind-%var3048X (_ BitVec 32)) )(let (($x282 (= input.ind-%var3048X input.spec-%var-y-0)))
 (let (($x213 (= input.ind-%var3047X input.spec-%var-x-0)))
 (let (($x390 (ite $x213 $x282 false)))
 (let (($x261 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3047X input.ind-%var3048X)))
 (let (($x237 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3047X)))
 (=> $x237 (= $x261 $x390))))))))
 ))
 (let (($x133 (forall ((input.ind-%var3046X (_ BitVec 32)) )(let (($x195 (= input.ind-%var3046X input.spec-%var-x-0)))
 (let (($x356 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3046X)))
 (= $x356 $x195))))
 ))
 (let (($x127 (and (and $x133 $x115) $x223)))
 (let (($x229 (= $x127 true)))
 (let (($x274 (forall ((input.ind-%var3033X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x282 (= input.ind-%var3033X input.spec-%var-y-0)))
 (let ((?x365 (ite $x282 ?x30 (_ bv0 32))))
 (let ((?x174 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3033X)))
 (let (($x148 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3033X)))
 (=> $x148 (= ?x174 ?x365))))))))
 ))
 (let (($x235 (forall ((input.ind-%var3032X (_ BitVec 32)) )(let (($x282 (= input.ind-%var3032X input.spec-%var-y-0)))
 (let (($x148 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3032X)))
 (= $x148 $x282))))
 ))
 (let (($x287 (and $x235 $x274)))
 (let (($x252 (= $x287 true)))
 (let (($x105 (forall ((input.ind-%var3025X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3025X)))
 (=> $x180 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3025X) (_ bv0 32)))))
 ))
 (let (($x268 (forall ((input.ind-%var3024X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3024X)))
 (= $x180 false)))
 ))
 (let (($x135 (and $x268 $x105)))
 (let (($x112 (= $x135 true)))
 (let (($x392 (forall ((input.ind-%var3017X (_ BitVec 32)) (input.ind-%var3019X (_ BitVec 32)) )(let (($x319 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3017X input.ind-%var3019X)))
 (let (($x402 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3017X)))
 (=> (and $x402 $x319) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3017X input.ind-%var3019X) (_ bv0 32))))))
 ))
 (let (($x144 (forall ((input.ind-%var3017X (_ BitVec 32)) (input.ind-%var3018X (_ BitVec 32)) )(let (($x402 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3017X)))
 (=> $x402 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3017X input.ind-%var3018X) false))))
 ))
 (let (($x295 (forall ((input.ind-%var3016X (_ BitVec 32)) )(let (($x382 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3016X)))
 (= $x382 false)))
 ))
 (let (($x405 (and (and $x295 $x144) $x392)))
 (let (($x200 (= $x405 true)))
 (let (($x163 (forall ((input.ind-%var3007X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x282 (= input.ind-%var3007X input.spec-%var-y-0)))
 (let ((?x365 (ite $x282 ?x30 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x285 (ite $x38 ?x365 (_ bv0 32))))
 (let ((?x264 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3007X)))
 (let (($x331 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3007X)))
 (=> $x331 (= ?x264 ?x285))))))))))
 ))
 (let (($x374 (forall ((input.ind-%var3006X (_ BitVec 32)) )(let (($x282 (= input.ind-%var3006X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x272 (ite $x38 $x282 false)))
 (let (($x331 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3006X)))
 (= $x331 $x272))))))
 ))
 (let (($x304 (and $x374 $x163)))
 (let (($x306 (= $x304 true)))
 (let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x51 ?x30 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x25 (ite $x38 ?x45 (_ bv0 32))))
 (let (($x380 (= input.spec-%tmpvar-6.L2%13%d.2 ?x25)))
 (let (($x198 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x216 (=> $x198 $x380)))
 (let (($x96 (ite $x38 $x51 false)))
 (let ((?x68 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x68 (_ bv1 32))))
 (let (($x222 (= $x198 $x120)))
 (let (($x37 (= false false)))
 (let (($x289 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x109 (=> $x289 $x37)))
 (let (($x106 (= ?x68 (_ bv0 32))))
 (let (($x407 (= $x289 $x106)))
 (let (($x322 (and (and (and $x407 $x109) $x222) $x216)))
 (let (($x160 (= $x322 true)))
 (let (($x147 (forall ((input.ind-%var2988X (_ BitVec 32)) )(let (($x282 (= input.ind-%var2988X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x272 (ite $x38 $x282 false)))
 (let (($x410 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2988X)))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x230 (= $x410 $x272))))))))
 ))
 (let (($x212 (forall ((input.ind-%var2989X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x282 (= input.ind-%var2989X input.spec-%var-y-0)))
 (let ((?x365 (ite $x282 ?x30 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x285 (ite $x38 ?x365 (_ bv0 32))))
 (let ((?x250 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2989X)))
 (let (($x410 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2989X)))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x230 $x410) (= ?x250 ?x285)))))))))))
 ))
 (let ((?x35 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x35 (_ bv0 32))))
 (let (($x398 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x168 (= $x398 $x364)))
 (let (($x354 (=> $x398 $x37)))
 (let (($x74 (bvuge ?x35 (_ bv1 32))))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x79 (= $x230 $x74)))
 (let (($x141 (and (and (and (and $x79 $x354) $x168) $x212) $x147)))
 (let (($x246 (= $x141 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x131 (concat ?x101 (concat ?x128 ?x126)))))
 (let (($x204 (= ?x116 input.dst.llvm-%x)))
 (let (($x143 (= $x204 true)))
 (let (($x371 (= $x143 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x167 (concat ?x166 (concat ?x172 (concat ?x138 ?x142)))))
 (let (($x345 (= ?x167 input.dst.llvm-%y)))
 (let (($x348 (= $x345 true)))
 (let (($x208 (= $x348 true)))
 (let (($x192 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x15 (= $x192 true)))
 (let (($x269 (= $x15 true)))
 (let (($x146 (= $x269 true)))
 (let (($x171 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x330 (= $x171 true)))
 (let (($x193 (= $x330 true)))
 (let (($x176 (= $x193 true)))
 (let (($x186 (= input.dst.llvm-%y ?x167)))
 (let (($x150 (= input.dst.llvm-%x ?x116)))
 (let (($x177 (and $x150 $x186)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x110)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x46)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x61)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x95 $x31)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x63 $x81)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x91 $x65)))
 (let (($x85 (not $x83)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x75 $x98)))
 (let (($x17 (and (not $x47) $x85)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x78 $x6)))
 (let (($x59 (not $x52)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x54 $x87)))
 (let (($x16 (and (not $x104) $x59)))
 (let (($x102 (and (and (and (and (and (and $x16 $x17) $x44) $x42) $x73) $x132) $x32)))
 (let (($x64 (and $x102 $x40)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x11 (or false (or false (and (and true (or $x93 $x108)) (or $x80 $x94))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x11)))
 (let (($x185 (and (and (and $x13 $x192) $x64) $x177)))
 (let (($x191 (and $x171 $x185)))
 (let (($x55 (= $x191 true)))
 (let (($x121 (= $x55 true)))
 (let (($x187 (= $x121 true)))
 (let (($x137 (and $x13 $x64)))
 (let (($x92 (= $x137 true)))
 (let (($x10 (= $x92 true)))
 (let (($x113 (= $x10 true)))
 (let (($x324 (and $x113 $x187)))
 (let (($x194 (and $x324 $x176)))
 (let (($x340 (and $x194 $x146)))
 (let (($x346 (and $x340 $x208)))
 (let (($x336 (and $x346 $x371)))
 (let (($x386 (and $x336 $x246)))
 (let (($x260 (and $x386 $x160)))
 (let (($x327 (and $x260 $x306)))
 (let (($x357 (and $x327 $x200)))
 (let (($x352 (and $x357 $x112)))
 (let (($x36 (and $x352 $x252)))
 (let (($x156 (and $x36 $x229)))
 (let (($x175 (and $x156 $x255)))
 (let (($x41 (and $x74 $x106)))
 (let (($x231 (and $x41 $x175)))
 (let (($x18 (= ?x30 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x217 (and $x18 $x231)))
 (let (($x339 (and $x37 $x217)))
 (let (($x19 (= input.spec-%var-m2-0.L2%18%bbentry ?x25)))
 (let (($x350 (and $x19 $x339)))
 (let (($x366 (and $x37 $x350)))
 (let (($x373 (=> $x366 $x145)))
 (not $x373)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x159 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x271 (= input.spec-%var-y-0 ?x159)))
 (let (($x273 (= $x271 true)))
 (let (($x145 (= $x273 true)))
 (let (($x234 (forall ((input.ind-%var3063X (_ BitVec 32)) (input.ind-%var3065X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x282 (= input.ind-%var3065X input.spec-%var-y-0)))
 (let ((?x365 (ite $x282 ?x30 (_ bv0 32))))
 (let (($x213 (= input.ind-%var3063X input.spec-%var-x-0)))
 (let ((?x376 (ite $x213 ?x365 (_ bv0 32))))
 (let ((?x320 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3063X input.ind-%var3065X)))
 (let (($x344 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3063X input.ind-%var3065X)))
 (let (($x210 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3063X)))
 (=> (and $x210 $x344) (= ?x320 ?x376)))))))))))
 ))
 (let (($x240 (forall ((input.ind-%var3063X (_ BitVec 32)) (input.ind-%var3064X (_ BitVec 32)) )(let (($x282 (= input.ind-%var3064X input.spec-%var-y-0)))
 (let (($x213 (= input.ind-%var3063X input.spec-%var-x-0)))
 (let (($x390 (ite $x213 $x282 false)))
 (let (($x344 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3063X input.ind-%var3064X)))
 (let (($x210 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3063X)))
 (=> $x210 (= $x344 $x390))))))))
 ))
 (let (($x203 (forall ((input.ind-%var3062X (_ BitVec 32)) )(let (($x195 (= input.ind-%var3062X input.spec-%var-x-0)))
 (let (($x310 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3062X)))
 (= $x310 $x195))))
 ))
 (let (($x355 (and (and $x203 $x240) $x234)))
 (let (($x255 (= $x355 true)))
 (let (($x223 (forall ((input.ind-%var3047X (_ BitVec 32)) (input.ind-%var3049X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x282 (= input.ind-%var3049X input.spec-%var-y-0)))
 (let ((?x365 (ite $x282 ?x30 (_ bv0 32))))
 (let (($x213 (= input.ind-%var3047X input.spec-%var-x-0)))
 (let ((?x376 (ite $x213 ?x365 (_ bv0 32))))
 (let ((?x270 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3047X input.ind-%var3049X)))
 (let (($x261 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3047X input.ind-%var3049X)))
 (let (($x237 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3047X)))
 (=> (and $x237 $x261) (= ?x270 ?x376)))))))))))
 ))
 (let (($x115 (forall ((input.ind-%var3047X (_ BitVec 32)) (input.ind-%var3048X (_ BitVec 32)) )(let (($x282 (= input.ind-%var3048X input.spec-%var-y-0)))
 (let (($x213 (= input.ind-%var3047X input.spec-%var-x-0)))
 (let (($x390 (ite $x213 $x282 false)))
 (let (($x261 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3047X input.ind-%var3048X)))
 (let (($x237 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3047X)))
 (=> $x237 (= $x261 $x390))))))))
 ))
 (let (($x133 (forall ((input.ind-%var3046X (_ BitVec 32)) )(let (($x195 (= input.ind-%var3046X input.spec-%var-x-0)))
 (let (($x356 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3046X)))
 (= $x356 $x195))))
 ))
 (let (($x127 (and (and $x133 $x115) $x223)))
 (let (($x229 (= $x127 true)))
 (let (($x274 (forall ((input.ind-%var3033X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x282 (= input.ind-%var3033X input.spec-%var-y-0)))
 (let ((?x365 (ite $x282 ?x30 (_ bv0 32))))
 (let ((?x174 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3033X)))
 (let (($x148 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3033X)))
 (=> $x148 (= ?x174 ?x365))))))))
 ))
 (let (($x235 (forall ((input.ind-%var3032X (_ BitVec 32)) )(let (($x282 (= input.ind-%var3032X input.spec-%var-y-0)))
 (let (($x148 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3032X)))
 (= $x148 $x282))))
 ))
 (let (($x287 (and $x235 $x274)))
 (let (($x252 (= $x287 true)))
 (let (($x105 (forall ((input.ind-%var3025X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3025X)))
 (=> $x180 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3025X) (_ bv0 32)))))
 ))
 (let (($x268 (forall ((input.ind-%var3024X (_ BitVec 32)) )(let (($x180 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3024X)))
 (= $x180 false)))
 ))
 (let (($x135 (and $x268 $x105)))
 (let (($x112 (= $x135 true)))
 (let (($x392 (forall ((input.ind-%var3017X (_ BitVec 32)) (input.ind-%var3019X (_ BitVec 32)) )(let (($x319 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3017X input.ind-%var3019X)))
 (let (($x402 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3017X)))
 (=> (and $x402 $x319) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3017X input.ind-%var3019X) (_ bv0 32))))))
 ))
 (let (($x144 (forall ((input.ind-%var3017X (_ BitVec 32)) (input.ind-%var3018X (_ BitVec 32)) )(let (($x402 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3017X)))
 (=> $x402 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3017X input.ind-%var3018X) false))))
 ))
 (let (($x295 (forall ((input.ind-%var3016X (_ BitVec 32)) )(let (($x382 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3016X)))
 (= $x382 false)))
 ))
 (let (($x405 (and (and $x295 $x144) $x392)))
 (let (($x200 (= $x405 true)))
 (let (($x163 (forall ((input.ind-%var3007X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x282 (= input.ind-%var3007X input.spec-%var-y-0)))
 (let ((?x365 (ite $x282 ?x30 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x285 (ite $x38 ?x365 (_ bv0 32))))
 (let ((?x264 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3007X)))
 (let (($x331 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3007X)))
 (=> $x331 (= ?x264 ?x285))))))))))
 ))
 (let (($x374 (forall ((input.ind-%var3006X (_ BitVec 32)) )(let (($x282 (= input.ind-%var3006X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x272 (ite $x38 $x282 false)))
 (let (($x331 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3006X)))
 (= $x331 $x272))))))
 ))
 (let (($x304 (and $x374 $x163)))
 (let (($x306 (= $x304 true)))
 (let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x51 ?x30 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x25 (ite $x38 ?x45 (_ bv0 32))))
 (let (($x380 (= input.spec-%tmpvar-6.L2%13%d.2 ?x25)))
 (let (($x198 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x216 (=> $x198 $x380)))
 (let (($x96 (ite $x38 $x51 false)))
 (let ((?x68 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x68 (_ bv1 32))))
 (let (($x222 (= $x198 $x120)))
 (let (($x37 (= false false)))
 (let (($x289 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x109 (=> $x289 $x37)))
 (let (($x106 (= ?x68 (_ bv0 32))))
 (let (($x407 (= $x289 $x106)))
 (let (($x322 (and (and (and $x407 $x109) $x222) $x216)))
 (let (($x160 (= $x322 true)))
 (let (($x147 (forall ((input.ind-%var2988X (_ BitVec 32)) )(let (($x282 (= input.ind-%var2988X input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x272 (ite $x38 $x282 false)))
 (let (($x410 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2988X)))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x230 (= $x410 $x272))))))))
 ))
 (let (($x212 (forall ((input.ind-%var2989X (_ BitVec 32)) )(let ((?x30 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x282 (= input.ind-%var2989X input.spec-%var-y-0)))
 (let ((?x365 (ite $x282 ?x30 (_ bv0 32))))
 (let (($x38 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x285 (ite $x38 ?x365 (_ bv0 32))))
 (let ((?x250 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var2989X)))
 (let (($x410 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var2989X)))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x230 $x410) (= ?x250 ?x285)))))))))))
 ))
 (let ((?x35 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x35 (_ bv0 32))))
 (let (($x398 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x168 (= $x398 $x364)))
 (let (($x354 (=> $x398 $x37)))
 (let (($x74 (bvuge ?x35 (_ bv1 32))))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x79 (= $x230 $x74)))
 (let (($x141 (and (and (and (and $x79 $x354) $x168) $x212) $x147)))
 (let (($x246 (= $x141 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x131 (concat ?x101 (concat ?x128 ?x126)))))
 (let (($x204 (= ?x116 input.dst.llvm-%x)))
 (let (($x143 (= $x204 true)))
 (let (($x371 (= $x143 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x167 (concat ?x166 (concat ?x172 (concat ?x138 ?x142)))))
 (let (($x345 (= ?x167 input.dst.llvm-%y)))
 (let (($x348 (= $x345 true)))
 (let (($x208 (= $x348 true)))
 (let (($x192 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x15 (= $x192 true)))
 (let (($x269 (= $x15 true)))
 (let (($x146 (= $x269 true)))
 (let (($x171 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x330 (= $x171 true)))
 (let (($x193 (= $x330 true)))
 (let (($x176 (= $x193 true)))
 (let (($x186 (= input.dst.llvm-%y ?x167)))
 (let (($x150 (= input.dst.llvm-%x ?x116)))
 (let (($x177 (and $x150 $x186)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x110)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x46)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x61)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x95 $x31)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (and $x63 $x81)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x91 $x65)))
 (let (($x85 (not $x83)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x75 $x98)))
 (let (($x17 (and (not $x47) $x85)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x78 $x6)))
 (let (($x59 (not $x52)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x54 $x87)))
 (let (($x16 (and (not $x104) $x59)))
 (let (($x102 (and (and (and (and (and (and $x16 $x17) $x44) $x42) $x73) $x132) $x32)))
 (let (($x64 (and $x102 $x40)))
 (let (($x94 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x11 (or false (or false (and (and true (or $x93 $x108)) (or $x80 $x94))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x11)))
 (let (($x185 (and (and (and $x13 $x192) $x64) $x177)))
 (let (($x191 (and $x171 $x185)))
 (let (($x55 (= $x191 true)))
 (let (($x121 (= $x55 true)))
 (let (($x187 (= $x121 true)))
 (let (($x137 (and $x13 $x64)))
 (let (($x92 (= $x137 true)))
 (let (($x10 (= $x92 true)))
 (let (($x113 (= $x10 true)))
 (let (($x324 (and $x113 $x187)))
 (let (($x194 (and $x324 $x176)))
 (let (($x340 (and $x194 $x146)))
 (let (($x346 (and $x340 $x208)))
 (let (($x336 (and $x346 $x371)))
 (let (($x386 (and $x336 $x246)))
 (let (($x260 (and $x386 $x160)))
 (let (($x327 (and $x260 $x306)))
 (let (($x357 (and $x327 $x200)))
 (let (($x352 (and $x357 $x112)))
 (let (($x36 (and $x352 $x252)))
 (let (($x156 (and $x36 $x229)))
 (let (($x175 (and $x156 $x255)))
 (let (($x41 (and $x74 $x106)))
 (let (($x231 (and $x41 $x175)))
 (let (($x18 (= ?x30 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x217 (and $x18 $x231)))
 (let (($x339 (and $x37 $x217)))
 (let (($x19 (= input.spec-%var-m2-0.L2%18%bbentry ?x25)))
 (let (($x350 (and $x19 $x339)))
 (let (($x366 (and $x37 $x350)))
 (let (($x373 (=> $x366 $x145)))
 (not $x373)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171441/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x315 (= input.spec-%var-x-0 ?x238)))
 (let (($x409 (= $x315 true)))
 (let (($x122 (= $x409 true)))
 (let (($x318 (forall ((input.ind-%var3239X (_ BitVec 32)) (input.ind-%var3241X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x365 (= input.ind-%var3241X input.spec-%var-y-0)))
 (let ((?x109 (ite $x365 ?x35 (_ bv0 32))))
 (let (($x154 (= input.ind-%var3239X input.spec-%var-x-0)))
 (let ((?x294 (ite $x154 ?x109 (_ bv0 32))))
 (let ((?x276 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3239X input.ind-%var3241X)))
 (let (($x335 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3239X input.ind-%var3241X)))
 (let (($x248 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3239X)))
 (=> (and $x248 $x335) (= ?x276 ?x294)))))))))))
 ))
 (let (($x215 (forall ((input.ind-%var3239X (_ BitVec 32)) (input.ind-%var3240X (_ BitVec 32)) )(let (($x365 (= input.ind-%var3240X input.spec-%var-y-0)))
 (let (($x154 (= input.ind-%var3239X input.spec-%var-x-0)))
 (let (($x333 (ite $x154 $x365 false)))
 (let (($x335 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3239X input.ind-%var3240X)))
 (let (($x248 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3239X)))
 (=> $x248 (= $x335 $x333))))))))
 ))
 (let (($x332 (forall ((input.ind-%var3238X (_ BitVec 32)) )(let (($x377 (= input.ind-%var3238X input.spec-%var-x-0)))
 (let (($x162 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3238X)))
 (= $x162 $x377))))
 ))
 (let (($x12 (and (and $x332 $x215) $x318)))
 (let (($x325 (= $x12 true)))
 (let (($x311 (forall ((input.ind-%var3223X (_ BitVec 32)) (input.ind-%var3225X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x365 (= input.ind-%var3225X input.spec-%var-y-0)))
 (let ((?x109 (ite $x365 ?x35 (_ bv0 32))))
 (let (($x154 (= input.ind-%var3223X input.spec-%var-x-0)))
 (let ((?x294 (ite $x154 ?x109 (_ bv0 32))))
 (let ((?x334 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3223X input.ind-%var3225X)))
 (let (($x358 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3223X input.ind-%var3225X)))
 (let (($x247 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3223X)))
 (=> (and $x247 $x358) (= ?x334 ?x294)))))))))))
 ))
 (let (($x206 (forall ((input.ind-%var3223X (_ BitVec 32)) (input.ind-%var3224X (_ BitVec 32)) )(let (($x365 (= input.ind-%var3224X input.spec-%var-y-0)))
 (let (($x154 (= input.ind-%var3223X input.spec-%var-x-0)))
 (let (($x333 (ite $x154 $x365 false)))
 (let (($x358 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3223X input.ind-%var3224X)))
 (let (($x247 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3223X)))
 (=> $x247 (= $x358 $x333))))))))
 ))
 (let (($x387 (forall ((input.ind-%var3222X (_ BitVec 32)) )(let (($x377 (= input.ind-%var3222X input.spec-%var-x-0)))
 (let (($x117 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3222X)))
 (= $x117 $x377))))
 ))
 (let (($x241 (and (and $x387 $x206) $x311)))
 (let (($x275 (= $x241 true)))
 (let (($x257 (forall ((input.ind-%var3209X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x365 (= input.ind-%var3209X input.spec-%var-y-0)))
 (let ((?x109 (ite $x365 ?x35 (_ bv0 32))))
 (let ((?x263 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3209X)))
 (let (($x173 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3209X)))
 (=> $x173 (= ?x263 ?x109))))))))
 ))
 (let (($x278 (forall ((input.ind-%var3208X (_ BitVec 32)) )(let (($x365 (= input.ind-%var3208X input.spec-%var-y-0)))
 (let (($x173 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3208X)))
 (= $x173 $x365))))
 ))
 (let (($x359 (and $x278 $x257)))
 (let (($x399 (= $x359 true)))
 (let (($x183 (forall ((input.ind-%var3201X (_ BitVec 32)) )(let (($x234 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3201X)))
 (=> $x234 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3201X) (_ bv0 32)))))
 ))
 (let (($x231 (forall ((input.ind-%var3200X (_ BitVec 32)) )(let (($x234 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3200X)))
 (= $x234 false)))
 ))
 (let (($x76 (and $x231 $x183)))
 (let (($x158 (= $x76 true)))
 (let (($x153 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3195X (_ BitVec 32)) )(let (($x251 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3195X)))
 (let (($x270 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3193X)))
 (=> (and $x270 $x251) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3193X input.ind-%var3195X) (_ bv0 32))))))
 ))
 (let (($x280 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3194X (_ BitVec 32)) )(let (($x270 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3193X)))
 (=> $x270 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3194X) false))))
 ))
 (let (($x195 (forall ((input.ind-%var3192X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3192X)))
 (= $x287 false)))
 ))
 (let (($x384 (and (and $x195 $x280) $x153)))
 (let (($x226 (= $x384 true)))
 (let (($x244 (forall ((input.ind-%var3182X (_ BitVec 32)) )(let (($x365 (= input.ind-%var3182X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x285 (ite $x51 $x365 false)))
 (let (($x253 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3182X)))
 (= $x253 $x285))))))
 ))
 (let (($x316 (forall ((input.ind-%var3183X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x365 (= input.ind-%var3183X input.spec-%var-y-0)))
 (let ((?x109 (ite $x365 ?x35 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x328 (ite $x51 ?x109 (_ bv0 32))))
 (let ((?x321 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3183X)))
 (let (($x253 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3183X)))
 (=> $x253 (= ?x321 ?x328))))))))))
 ))
 (let (($x235 (and $x316 $x244)))
 (let (($x174 (= $x235 true)))
 (let ((?x35 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x38 ?x35 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x74 (ite $x51 ?x45 (_ bv0 32))))
 (let (($x288 (= input.spec-%tmpvar-6.L2%13%d.2 ?x74)))
 (let (($x304 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x295 (=> $x304 $x288)))
 (let (($x374 (ite $x51 $x38 false)))
 (let ((?x264 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x264 (_ bv1 32))))
 (let (($x327 (= $x304 $x306)))
 (let (($x27 (= false false)))
 (let (($x242 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x163 (=> $x242 $x27)))
 (let (($x317 (= ?x264 (_ bv0 32))))
 (let (($x393 (= $x242 $x317)))
 (let (($x319 (and (and (and $x393 $x163) $x327) $x295)))
 (let (($x404 (= $x319 true)))
 (let (($x368 (forall ((input.ind-%var3165X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x365 (= input.ind-%var3165X input.spec-%var-y-0)))
 (let ((?x109 (ite $x365 ?x35 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x328 (ite $x51 ?x109 (_ bv0 32))))
 (let ((?x147 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3165X)))
 (let (($x391 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3165X)))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x230 $x391) (= ?x147 ?x328)))))))))))
 ))
 (let (($x212 (forall ((input.ind-%var3164X (_ BitVec 32)) )(let (($x365 (= input.ind-%var3164X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x285 (ite $x51 $x365 false)))
 (let (($x391 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3164X)))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x230 (= $x391 $x285))))))))
 ))
 (let ((?x29 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x29 (_ bv0 32))))
 (let (($x37 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x286 (= $x37 $x18)))
 (let (($x354 (=> $x37 $x27)))
 (let (($x79 (bvuge ?x29 (_ bv1 32))))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x398 (= $x230 $x79)))
 (let (($x322 (and (and (and (and $x398 $x354) $x286) $x212) $x368)))
 (let (($x160 (= $x322 true)))
 (let ((?x190 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x128 (concat ?x125 (concat ?x114 ?x190)))))
 (let (($x204 (= ?x126 input.dst.llvm-%x)))
 (let (($x143 (= $x204 true)))
 (let (($x371 (= $x143 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x188 (concat ?x142 (concat ?x172 (concat ?x165 ?x116)))))
 (let (($x345 (= ?x188 input.dst.llvm-%y)))
 (let (($x348 (= $x345 true)))
 (let (($x208 (= $x348 true)))
 (let (($x171 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x15 (= $x171 true)))
 (let (($x269 (= $x15 true)))
 (let (($x146 (= $x269 true)))
 (let (($x113 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x330 (= $x113 true)))
 (let (($x193 (= $x330 true)))
 (let (($x176 (= $x193 true)))
 (let (($x149 (= input.dst.llvm-%y ?x188)))
 (let (($x119 (= input.dst.llvm-%x ?x126)))
 (let (($x167 (and $x119 $x149)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x73)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x31)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (and $x111 $x53)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x44 $x63)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x98 $x47)))
 (let (($x91 (not $x97)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x59 $x16)))
 (let (($x83 (and (not $x75) $x91)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x87 $x104)))
 (let (($x78 (not $x72)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x106 $x41)))
 (let (($x52 (and (not $x54) $x78)))
 (let (($x102 (and (and (and (and (and (and $x52 $x83) $x17) $x9) $x95) $x61) $x81)))
 (let (($x110 (and $x102 $x20)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x5 (or false (or false (and (and true (or $x93 $x70)) (or $x80 $x60))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x5)))
 (let (($x185 (and (and (and $x13 $x171) $x110) $x167)))
 (let (($x191 (and $x113 $x185)))
 (let (($x55 (= $x191 true)))
 (let (($x121 (= $x55 true)))
 (let (($x187 (= $x121 true)))
 (let (($x40 (and $x13 $x110)))
 (let (($x64 (= $x40 true)))
 (let (($x137 (= $x64 true)))
 (let (($x92 (= $x137 true)))
 (let (($x324 (and $x92 $x187)))
 (let (($x194 (and $x324 $x176)))
 (let (($x340 (and $x194 $x146)))
 (let (($x346 (and $x340 $x208)))
 (let (($x336 (and $x346 $x371)))
 (let (($x260 (and $x336 $x160)))
 (let (($x363 (and $x260 $x404)))
 (let (($x406 (and $x363 $x174)))
 (let (($x320 (and $x406 $x226)))
 (let (($x130 (and $x320 $x158)))
 (let (($x179 (and $x130 $x399)))
 (let (($x245 (and $x179 $x275)))
 (let (($x343 (and $x245 $x325)))
 (let (($x99 (and $x18 $x343)))
 (let (($x30 (= ?x35 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x362 (and $x30 $x99)))
 (let (($x302 (and $x27 $x362)))
 (let (($x25 (= input.spec-%var-m2-0.L2%18%bbentry ?x74)))
 (let (($x233 (and $x25 $x302)))
 (let (($x259 (and $x27 $x233)))
 (let (($x277 (=> $x259 $x122)))
 (not $x277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%y () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.spec-%var-y-0 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-3.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L2%8%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.1.1 ((_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%8%d.1.1.0.1 ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-0.L2%8%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-0.L2%13%d.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%13%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%8%d.2.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-5.L2%8%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%8%d () (_ BitVec 32))
(declare-fun input.spec-%var-m2-0.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (bvadd input.dst.llvm-%y input.dst.llvm-%x)))
 (let (($x315 (= input.spec-%var-x-0 ?x238)))
 (let (($x409 (= $x315 true)))
 (let (($x122 (= $x409 true)))
 (let (($x318 (forall ((input.ind-%var3239X (_ BitVec 32)) (input.ind-%var3241X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x365 (= input.ind-%var3241X input.spec-%var-y-0)))
 (let ((?x109 (ite $x365 ?x35 (_ bv0 32))))
 (let (($x154 (= input.ind-%var3239X input.spec-%var-x-0)))
 (let ((?x294 (ite $x154 ?x109 (_ bv0 32))))
 (let ((?x276 (input.spec-%var-m-0.L2%8%d.1.1.1.1 input.ind-%var3239X input.ind-%var3241X)))
 (let (($x335 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3239X input.ind-%var3241X)))
 (let (($x248 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3239X)))
 (=> (and $x248 $x335) (= ?x276 ?x294)))))))))))
 ))
 (let (($x215 (forall ((input.ind-%var3239X (_ BitVec 32)) (input.ind-%var3240X (_ BitVec 32)) )(let (($x365 (= input.ind-%var3240X input.spec-%var-y-0)))
 (let (($x154 (= input.ind-%var3239X input.spec-%var-x-0)))
 (let (($x333 (ite $x154 $x365 false)))
 (let (($x335 (input.spec-%var-m-0.L2%8%d.1.1.0.1 input.ind-%var3239X input.ind-%var3240X)))
 (let (($x248 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3239X)))
 (=> $x248 (= $x335 $x333))))))))
 ))
 (let (($x332 (forall ((input.ind-%var3238X (_ BitVec 32)) )(let (($x377 (= input.ind-%var3238X input.spec-%var-x-0)))
 (let (($x162 (input.spec-%var-m-0.L2%8%d.0.1 input.ind-%var3238X)))
 (= $x162 $x377))))
 ))
 (let (($x12 (and (and $x332 $x215) $x318)))
 (let (($x325 (= $x12 true)))
 (let (($x311 (forall ((input.ind-%var3223X (_ BitVec 32)) (input.ind-%var3225X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x365 (= input.ind-%var3225X input.spec-%var-y-0)))
 (let ((?x109 (ite $x365 ?x35 (_ bv0 32))))
 (let (($x154 (= input.ind-%var3223X input.spec-%var-x-0)))
 (let ((?x294 (ite $x154 ?x109 (_ bv0 32))))
 (let ((?x334 (input.spec-%tmpvar-4.L2%8%d.1.1.1.1 input.ind-%var3223X input.ind-%var3225X)))
 (let (($x358 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3223X input.ind-%var3225X)))
 (let (($x247 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3223X)))
 (=> (and $x247 $x358) (= ?x334 ?x294)))))))))))
 ))
 (let (($x206 (forall ((input.ind-%var3223X (_ BitVec 32)) (input.ind-%var3224X (_ BitVec 32)) )(let (($x365 (= input.ind-%var3224X input.spec-%var-y-0)))
 (let (($x154 (= input.ind-%var3223X input.spec-%var-x-0)))
 (let (($x333 (ite $x154 $x365 false)))
 (let (($x358 (input.spec-%tmpvar-4.L2%8%d.1.1.0.1 input.ind-%var3223X input.ind-%var3224X)))
 (let (($x247 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3223X)))
 (=> $x247 (= $x358 $x333))))))))
 ))
 (let (($x387 (forall ((input.ind-%var3222X (_ BitVec 32)) )(let (($x377 (= input.ind-%var3222X input.spec-%var-x-0)))
 (let (($x117 (input.spec-%tmpvar-4.L2%8%d.0.1 input.ind-%var3222X)))
 (= $x117 $x377))))
 ))
 (let (($x241 (and (and $x387 $x206) $x311)))
 (let (($x275 (= $x241 true)))
 (let (($x257 (forall ((input.ind-%var3209X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x365 (= input.ind-%var3209X input.spec-%var-y-0)))
 (let ((?x109 (ite $x365 ?x35 (_ bv0 32))))
 (let ((?x263 (input.spec-%tmpvar-3.L2%8%d.1.1 input.ind-%var3209X)))
 (let (($x173 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3209X)))
 (=> $x173 (= ?x263 ?x109))))))))
 ))
 (let (($x278 (forall ((input.ind-%var3208X (_ BitVec 32)) )(let (($x365 (= input.ind-%var3208X input.spec-%var-y-0)))
 (let (($x173 (input.spec-%tmpvar-3.L2%8%d.0.1 input.ind-%var3208X)))
 (= $x173 $x365))))
 ))
 (let (($x359 (and $x278 $x257)))
 (let (($x399 (= $x359 true)))
 (let (($x183 (forall ((input.ind-%var3201X (_ BitVec 32)) )(let (($x234 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3201X)))
 (=> $x234 (= (input.spec-%tmpvar-1.L2%8%d.1.1 input.ind-%var3201X) (_ bv0 32)))))
 ))
 (let (($x231 (forall ((input.ind-%var3200X (_ BitVec 32)) )(let (($x234 (input.spec-%tmpvar-1.L2%8%d.0.1 input.ind-%var3200X)))
 (= $x234 false)))
 ))
 (let (($x76 (and $x231 $x183)))
 (let (($x158 (= $x76 true)))
 (let (($x153 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3195X (_ BitVec 32)) )(let (($x251 (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3195X)))
 (let (($x270 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3193X)))
 (=> (and $x270 $x251) (= (input.spec-%tmpvar-0.L2%8%d.1.1.1.1 input.ind-%var3193X input.ind-%var3195X) (_ bv0 32))))))
 ))
 (let (($x280 (forall ((input.ind-%var3193X (_ BitVec 32)) (input.ind-%var3194X (_ BitVec 32)) )(let (($x270 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3193X)))
 (=> $x270 (= (input.spec-%tmpvar-0.L2%8%d.1.1.0.1 input.ind-%var3193X input.ind-%var3194X) false))))
 ))
 (let (($x195 (forall ((input.ind-%var3192X (_ BitVec 32)) )(let (($x287 (input.spec-%tmpvar-0.L2%8%d.0.1 input.ind-%var3192X)))
 (= $x287 false)))
 ))
 (let (($x384 (and (and $x195 $x280) $x153)))
 (let (($x226 (= $x384 true)))
 (let (($x244 (forall ((input.ind-%var3182X (_ BitVec 32)) )(let (($x365 (= input.ind-%var3182X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x285 (ite $x51 $x365 false)))
 (let (($x253 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3182X)))
 (= $x253 $x285))))))
 ))
 (let (($x316 (forall ((input.ind-%var3183X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x365 (= input.ind-%var3183X input.spec-%var-y-0)))
 (let ((?x109 (ite $x365 ?x35 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x328 (ite $x51 ?x109 (_ bv0 32))))
 (let ((?x321 (input.spec-%var-m1-0.L2%13%d.1.1 input.ind-%var3183X)))
 (let (($x253 (input.spec-%var-m1-0.L2%13%d.0.1 input.ind-%var3183X)))
 (=> $x253 (= ?x321 ?x328))))))))))
 ))
 (let (($x235 (and $x316 $x244)))
 (let (($x174 (= $x235 true)))
 (let ((?x35 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x38 (= input.spec-%var-y-0 input.spec-%var-y-0)))
 (let ((?x45 (ite $x38 ?x35 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x74 (ite $x51 ?x45 (_ bv0 32))))
 (let (($x288 (= input.spec-%tmpvar-6.L2%13%d.2 ?x74)))
 (let (($x304 (bvuge input.spec-%tmpvar-6.L2%13%d.0 (_ bv1 32))))
 (let (($x295 (=> $x304 $x288)))
 (let (($x374 (ite $x51 $x38 false)))
 (let ((?x264 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x264 (_ bv1 32))))
 (let (($x327 (= $x304 $x306)))
 (let (($x27 (= false false)))
 (let (($x242 (= input.spec-%tmpvar-6.L2%13%d.0 (_ bv0 32))))
 (let (($x163 (=> $x242 $x27)))
 (let (($x317 (= ?x264 (_ bv0 32))))
 (let (($x393 (= $x242 $x317)))
 (let (($x319 (and (and (and $x393 $x163) $x327) $x295)))
 (let (($x404 (= $x319 true)))
 (let (($x368 (forall ((input.ind-%var3165X (_ BitVec 32)) )(let ((?x35 (bvadd input.spec-%var-x-0 input.spec-%var-y-0)))
 (let (($x365 (= input.ind-%var3165X input.spec-%var-y-0)))
 (let ((?x109 (ite $x365 ?x35 (_ bv0 32))))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let ((?x328 (ite $x51 ?x109 (_ bv0 32))))
 (let ((?x147 (input.spec-%tmpvar-5.L2%8%d.2.1.1 input.ind-%var3165X)))
 (let (($x391 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3165X)))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> (and $x230 $x391) (= ?x147 ?x328)))))))))))
 ))
 (let (($x212 (forall ((input.ind-%var3164X (_ BitVec 32)) )(let (($x365 (= input.ind-%var3164X input.spec-%var-y-0)))
 (let (($x51 (= input.spec-%var-x-0 input.spec-%var-x-0)))
 (let (($x285 (ite $x51 $x365 false)))
 (let (($x391 (input.spec-%tmpvar-5.L2%8%d.2.0.1 input.ind-%var3164X)))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (=> $x230 (= $x391 $x285))))))))
 ))
 (let ((?x29 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x29 (_ bv0 32))))
 (let (($x37 (= input.spec-%tmpvar-5.L2%8%d.0 (_ bv0 32))))
 (let (($x286 (= $x37 $x18)))
 (let (($x354 (=> $x37 $x27)))
 (let (($x79 (bvuge ?x29 (_ bv1 32))))
 (let (($x230 (bvuge input.spec-%tmpvar-5.L2%8%d.0 (_ bv1 32))))
 (let (($x398 (= $x230 $x79)))
 (let (($x322 (and (and (and (and $x398 $x354) $x286) $x212) $x368)))
 (let (($x160 (= $x322 true)))
 (let ((?x190 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x128 (concat ?x125 (concat ?x114 ?x190)))))
 (let (($x204 (= ?x126 input.dst.llvm-%x)))
 (let (($x143 (= $x204 true)))
 (let (($x371 (= $x143 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x188 (concat ?x142 (concat ?x172 (concat ?x165 ?x116)))))
 (let (($x345 (= ?x188 input.dst.llvm-%y)))
 (let (($x348 (= $x345 true)))
 (let (($x208 (= $x348 true)))
 (let (($x171 (= input.spec-%var-y-0 input.dst.llvm-%y)))
 (let (($x15 (= $x171 true)))
 (let (($x269 (= $x15 true)))
 (let (($x146 (= $x269 true)))
 (let (($x113 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x330 (= $x113 true)))
 (let (($x193 (= $x330 true)))
 (let (($x176 (= $x193 true)))
 (let (($x149 (= input.dst.llvm-%y ?x188)))
 (let (($x119 (= input.dst.llvm-%x ?x126)))
 (let (($x167 (and $x119 $x149)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x73)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x31)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (and $x111 $x53)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x44 $x63)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x98 $x47)))
 (let (($x91 (not $x97)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x59 $x16)))
 (let (($x83 (and (not $x75) $x91)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x87 $x104)))
 (let (($x78 (not $x72)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x106 $x41)))
 (let (($x52 (and (not $x54) $x78)))
 (let (($x102 (and (and (and (and (and (and $x52 $x83) $x17) $x9) $x95) $x61) $x81)))
 (let (($x110 (and $x102 $x20)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x5 (or false (or false (and (and true (or $x93 $x70)) (or $x80 $x60))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x5)))
 (let (($x185 (and (and (and $x13 $x171) $x110) $x167)))
 (let (($x191 (and $x113 $x185)))
 (let (($x55 (= $x191 true)))
 (let (($x121 (= $x55 true)))
 (let (($x187 (= $x121 true)))
 (let (($x40 (and $x13 $x110)))
 (let (($x64 (= $x40 true)))
 (let (($x137 (= $x64 true)))
 (let (($x92 (= $x137 true)))
 (let (($x324 (and $x92 $x187)))
 (let (($x194 (and $x324 $x176)))
 (let (($x340 (and $x194 $x146)))
 (let (($x346 (and $x340 $x208)))
 (let (($x336 (and $x346 $x371)))
 (let (($x260 (and $x336 $x160)))
 (let (($x363 (and $x260 $x404)))
 (let (($x406 (and $x363 $x174)))
 (let (($x320 (and $x406 $x226)))
 (let (($x130 (and $x320 $x158)))
 (let (($x179 (and $x130 $x399)))
 (let (($x245 (and $x179 $x275)))
 (let (($x343 (and $x245 $x325)))
 (let (($x99 (and $x18 $x343)))
 (let (($x30 (= ?x35 input.spec-%tmpvar-2.L2%8%d)))
 (let (($x362 (and $x30 $x99)))
 (let (($x302 (and $x27 $x362)))
 (let (($x25 (= input.spec-%var-m2-0.L2%18%bbentry ?x74)))
 (let (($x233 (and $x25 $x302)))
 (let (($x259 (and $x27 $x233)))
 (let (($x277 (=> $x259 $x122)))
 (not $x277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171441/query
