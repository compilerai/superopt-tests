argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --enable-src-epsilon-paths
argv[2] = --disable-dst-to-src-submap
argv[3] = --disable-assumed-eqclasses
argv[4] = --disable-houdini-axiom-based-timeout-dumps
argv[5] = --smt-query-timeout=5
argv[6] = --dyn-debug=invariants_dump
argv[7] = --tmpdir-path=par_tmpdir
argv[8] = --proof=couple8.proof
argv[9] = --spec-iospecs=couple8.iospecs
argv[10] = couple8.spec
argv[11] = couple8.c
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
Query dir: /tmp/smt-solver-tmp-files/indrajit.128619
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/couple8.c
argv[10] = -o
argv[11] = par_tmpdir/couple8.c.bc.tmp
argv[12] = -m32

argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --dyn-debug=invariants_dump
argv[2] = --xml-output-format
argv[3] = text-color
argv[4] = -f
argv[5] = ALL
argv[6] = --call-context-depth
argv[7] = 0
argv[8] = --always-use-call-context-any
argv[9] = --src-etfg
argv[10] = par_tmpdir/couple8.spec.etfg
argv[11] = par_tmpdir/couple8.c.bc
argv[12] = -o
argv[13] = par_tmpdir/couple8.c.dst.etfg
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function foo</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 78 time spent: 0:0:0 [0.000140s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 101 time spent: 0:0:0 [0.000191s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 935 time spent: 0:0:0 [0.005408s total; 0.000006 per start]
expr_simplify_solver: num_starts 86 time spent: 0:0:0 [0.009836s total; 0.000114 per start]
expr_simplify_syntactic: num_starts 86 time spent: 0:0:0 [0.014591s total; 0.000170 per start]
expr_simplify_select_on_store: num_starts 4 time spent: 0:0:0 [0.011445s total; 0.002861 per start]
expr_simplify_using_lhs_set_helper: num_starts 74 time spent: 0:0:0 [0.028684s total; 0.000388 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 241 time spent: 0:0:0 [0.028466s total; 0.000118 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 88 time spent: 0:0:0 [0.000392s total; 0.000004 per start]
expr_simplify_eq: num_starts 6 time spent: 0:0:0 [0.000076s total; 0.000013 per start]
expr_simplify_not: num_starts 1 time spent: 0:0:0 [0.000003s total; 0.000003 per start]
expr_simplify_ite: num_starts 2 time spent: 0:0:0 [0.000296s total; 0.000148 per start]
canonicalize_expr_tree: num_starts 50 time spent: 0:0:0 [0.000976s total; 0.000020 per start]
expr_simplify_memalloc_using_memlabel: num_starts 3 time spent: 0:0:0 [0.000010s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 4 time spent: 0:0:0 [0.011303s total; 0.002826 per start]
get_arithmetic_addsub_atoms: num_starts 77 time spent: 0:0:0 [0.000064s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 102 time spent: 0:0:0 [0.001350s total; 0.000013 per start]
expr_is_consts_struct_constant: num_starts 614 time spent: 0:0:0 [0.000405s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 2108 time spent: 0:0:0 [0.030693s total; 0.000015 per start]
expr_do_simplify_helper_cache: num_starts 2108 time spent: 0:0:0 [0.001429s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 18 time spent: 0:0:0 [0.000003s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 18 time spent: 0:0:0 [0.000112s total; 0.000006 per start]
array_constant_equals: num_starts 11 time spent: 0:0:0 [0.000030s total; 0.000003 per start]
sort_dfa_canonical: num_starts 143237 time spent: 0:0:1 [1.239776s total; 0.000009 per start]
expr_convert_to_iexpr: num_starts 5 time spent: 0:0:0 [0.001302s total; 0.000260 per start]
combo_dfa_xfer_and_meet: num_starts 80 time spent: 0:0:0 [0.095968s total; 0.001200 per start]
alias_val_xfer_and_meet: num_starts 80 time spent: 0:0:0 [0.031909s total; 0.000399 per start]
get_sprel_map_from_avail_exprs: num_starts 106 time spent: 0:0:0 [0.009511s total; 0.000090 per start]
update_memlabels_for_memslot_locs: num_starts 25 time spent: 0:0:0 [0.000129s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 160 time spent: 0:0:0 [0.009112s total; 0.000057 per start]
compute_simplified_loc_exprs_for_edge: num_starts 457 time spent: 0:0:0 [0.035770s total; 0.000078 per start]
compute_locs_definitely_written_on_edge: num_starts 160 time spent: 0:0:0 [0.000086s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 50 time spent: 0:0:0 [0.006857s total; 0.000137 per start]
edge_update_memlabel_map_for_mlvars: num_starts 80 time spent: 0:0:0 [0.001173s total; 0.000015 per start]
add_new_locs_based_on_edge: num_starts 80 time spent: 0:0:0 [0.022132s total; 0.000277 per start]
expand_locset_to_include_slots_for_memmask: num_starts 67 time spent: 0:0:0 [0.000213s total; 0.000003 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
alias_val_t::constructor_with_map_arg.: 0s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.foo.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.foo.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.foo.: 3e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 4e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.foo.: 7e-06s (num_starts 1; 0.0000s/start)
get_lr_status_for_loc_ids.: 1.2e-05s (num_starts 3; 0.0000s/start)
get_intersected_lr_status.: 2.1e-05s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 2.8e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 2.9e-05s (num_starts 1; 0.0000s/start)
lr_status_meet.: 3.3e-05s (num_starts 46; 0.0000s/start)
context_constructor.solver.: 3.7e-05s (num_starts 1; 0.0000s/start)
expr_is_hidden_reg.: 4.3e-05s (num_starts 47; 0.0000s/start)
context_constructor.: 4.4e-05s (num_starts 1; 0.0000s/start)
expr_is_callee_save_const.: 5.1e-05s (num_starts 51; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 8.5e-05s (num_starts 2; 0.0000s/start)
compute_sprel_relations.: 0.00011s (num_starts 1; 0.0001s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000113s (num_starts 5; 0.0000s/start)
graph_locs_add_all_indvars.: 0.000117s (num_starts 1; 0.0001s/start)
graph_locs_add_all_specvars.: 0.000119s (num_starts 1; 0.0001s/start)
propagate_sprels.: 0.000119s (num_starts 1; 0.0001s/start)
main.3.: 0.000123s (num_starts 1; 0.0001s/start)
determinize_value_expr_map.: 0.000137s (num_starts 154; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.000144s (num_starts 38; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000166s (num_starts 17; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000169s (num_starts 1; 0.0002s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.000175s (num_starts 3; 0.0001s/start)
graph_locs_add_local_vars_for_edge.: 0.00019s (num_starts 38; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.000218s (num_starts 1; 0.0002s/start)
populate_locid2expr_map.: 0.000232s (num_starts 2; 0.0001s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000257s (num_starts 2; 0.0001s/start)
expr_represents_llvm_undef.: 0.000312s (num_starts 53; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000499s (num_starts 80; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000509s (num_starts 1; 0.0005s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.00058s (num_starts 1; 0.0006s/start)
def_analysis::xfer_and_meet.: 0.000615s (num_starts 76; 0.0000s/start)
sp_version_relations_val_t::meet.: 0.000642s (num_starts 1170; 0.0000s/start)
canonicalize_llvm_nextpcs.: 0.000649s (num_starts 1; 0.0006s/start)
compute_z3_expr.: 0.000679s (num_starts 48; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000708s (num_starts 1; 0.0007s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000713s (num_starts 1; 0.0007s/start)
graph_with_aliasing_constructor.src.spec.foo.: 0.000834s (num_starts 1; 0.0008s/start)
populate_simplified_to_state.: 0.00085s (num_starts 3; 0.0003s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000957s (num_starts 80; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.000984s (num_starts 64; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.001058s (num_starts 53; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.001066s (num_starts 80; 0.0000s/start)
populate_exit_return_values_for_llvm_method.: 0.001156s (num_starts 1; 0.0012s/start)
populate_transitive_closure.: 0.001174s (num_starts 1; 0.0012s/start)
graph_with_locs_constructor.src.spec.foo.: 0.001222s (num_starts 1; 0.0012s/start)
tfg::collect_assumes_around_edge.: 0.00136s (num_starts 101; 0.0000s/start)
graph_with_edge_structures_constructor.src.spec.foo.: 0.001389s (num_starts 1; 0.0014s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.00223s (num_starts 61; 0.0000s/start)
query:convert_from_z3.: 0.00226s (num_starts 48; 0.0000s/start)
query:convert_to_z3.: 0.00247s (num_starts 48; 0.0001s/start)
create_closure_matrix.: 0.002472s (num_starts 105; 0.0000s/start)
graph_visit_exprs.: 0.00251s (num_starts 4; 0.0006s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.002521s (num_starts 991; 0.0000s/start)
graph_with_simplified_assets_constructor.src.spec.foo.: 0.002546s (num_starts 1; 0.0025s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.002789s (num_starts 1; 0.0028s/start)
compute_lr_status_for_expr.: 0.002868s (num_starts 54; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.002899s (num_starts 46; 0.0001s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.002989s (num_starts 46; 0.0001s/start)
populate_dominator_and_postdominator_relations.: 0.003105s (num_starts 2; 0.0016s/start)
graph_with_predicates_constructor.src.spec.foo.: 0.003635s (num_starts 1; 0.0036s/start)
populate_simplified_assets.: 0.005211s (num_starts 6; 0.0009s/start)
tfg::populate_loc_definedness.before_solve.: 0.005632s (num_starts 2; 0.0028s/start)
tfg_constructor.src.spec.foo.after_transitive_closure.: 0.005688s (num_starts 1; 0.0057s/start)
tfg_constructor.src.spec.foo.post_parsing.: 0.005694s (num_starts 1; 0.0057s/start)
tfg_constructor.src.spec.foo.after_string_contents.: 0.005699s (num_starts 1; 0.0057s/start)
tfg_constructor.src.spec.foo.after_compute_max_memlabel_varnum.: 0.005703s (num_starts 1; 0.0057s/start)
tfg_constructor.src.spec.foo.: 0.005706s (num_starts 1; 0.0057s/start)
graph_identify_back_edges.: 0.005837s (num_starts 6; 0.0010s/start)
tfg::populate_loc_definedness.before_initialize.: 0.006046s (num_starts 2; 0.0030s/start)
graph_identify_natural_loops.: 0.006154s (num_starts 6; 0.0010s/start)
tfg::populate_loc_definedness.: 0.006323s (num_starts 2; 0.0032s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.006404s (num_starts 1; 0.0064s/start)
query:simplify-z3.: 0.006495s (num_starts 98; 0.0001s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.006592s (num_starts 1; 0.0066s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.00681s (num_starts 1; 0.0068s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.007575s (num_starts 80; 0.0001s/start)
populate_branch_affecting_locs.: 0.007679s (num_starts 2; 0.0038s/start)
compute_new_lr_status_on_locs.: 0.007754s (num_starts 80; 0.0001s/start)
find_dominators.: 0.008276s (num_starts 10; 0.0008s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.00838s (num_starts 935; 0.0000s/start)
graph_to_stream.: 0.008705s (num_starts 1; 0.0087s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.009228s (num_starts 80; 0.0001s/start)
compute_regions.: 0.010145s (num_starts 6; 0.0017s/start)
populate_locs_potentially_modified_on_edge.: 0.011503s (num_starts 3; 0.0038s/start)
create_sp_version_relations_lattice_at_pc.: 0.014215s (num_starts 105; 0.0001s/start)
tfg_preprocess.dst.llvm.foo.: 0.015655s (num_starts 1; 0.0157s/start)
tfg::tfg_preprocess.: 0.015657s (num_starts 1; 0.0157s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.015804s (num_starts 80; 0.0002s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.016729s (num_starts 3; 0.0056s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.016838s (num_starts 116; 0.0001s/start)
get_tfg.: 0.021018s (num_starts 1; 0.0210s/start)
get_function_tfg_map.foo.: 0.02105s (num_starts 1; 0.0210s/start)
get_function_tfg_map.: 0.021054s (num_starts 1; 0.0211s/start)
avail_exprs_create_submap.: 0.022535s (num_starts 240; 0.0001s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.028772s (num_starts 74; 0.0004s/start)
populate_loc_liveness.: 0.029537s (num_starts 2; 0.0148s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.030636s (num_starts 80; 0.0004s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.032055s (num_starts 80; 0.0004s/start)
main.2.: 0.033037s (num_starts 1; 0.0330s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.036033s (num_starts 935; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.037446s (num_starts 935; 0.0000s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.044214s (num_starts 935; 0.0000s/start)
tfg_postprocess_after_pointsto_analysis.: 0.06486s (num_starts 1; 0.0649s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.07786s (num_starts 1; 0.0779s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.09611s (num_starts 80; 0.0012s/start)
ftmap_run_pointsto_analysis.: 0.189666s (num_starts 1; 0.1897s/start)
parse_consts_db.: 7.22415s (num_starts 1; 7.2242s/start)
main.: 7.49455s (num_starts 1; 7.4946s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:15 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:22 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:22 : Reading in SPEC-LLVM I/O specification from file couple8.iospecs...</MSG>
<MSG>0:22 : Computing equivalence for function: foo...</MSG>
<MSG>0:22 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:22 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:22 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:22 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:23 : product-TFG foo: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG foo: Found 3 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG foo created 3 possibilities in group foo.A...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L0%0%d --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Adding node L3%6%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:23 : foo.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Adding edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : foo.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : foo.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : foo.A2: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : foo.A2: Added the 2 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : foo.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : foo.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : foo.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG foo.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%n
      3.: 0                     ==  input.dst.llvm-%x
      4.: 0                     ==  input.spec-%var-ret-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    10 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      2.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      3.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      4.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      5.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      6.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      7.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      8.: eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      9.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : Added correlation to the product-TFG foo.A2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG foo.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    6 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%n
      3.: 0                     ==  input.dst.llvm-%x
      4.: 0                     ==  input.spec-%var-ret-0.L3%6%bbentry
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    10 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      2.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      3.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      4.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      5.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      6.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      7.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      8.: eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      9.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:23 : foo.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : foo.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : foo.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:23 : foo.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:23 : foo.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht11-prove_trivial4-prove7...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : foo.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:24 : foo.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 9 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht10-prove_trivial0-prove10...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      3.: 0                     ==  input.spec-%var-ret-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:26 : foo.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:26 : foo.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      3.: 0                     ==  input.spec-%var-ret-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:26 : foo.A2 (d:2, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:26 : foo.A2 (d:2, s:0, sp: 8): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:26 : Chosen product-TFG foo.A2 will be explored later...</MSG>
<MSG>0:26 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:26 : Chose (for CE propagation) product-TFG foo.A3 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:26 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A3...</MSG>
<MSG>0:26 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A3...</MSG>
<MSG>0:26 : Creating ssa-path for the src-tfg path L0%0%d --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:26 : Adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:26 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:26 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:26 : Adding new edge to the product-TFG foo.A3 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A3: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A3: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A3: Adding node L3%10%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:26 : foo.A3: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A3: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A3: Adding edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:26 : foo.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:26 : foo.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:26 : foo.A3: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
157453 : not(140275) : BOOL                        : false
140273 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda32, ite(and(bvule(0, Lambda32), bvule(Lambda32, 4294967295)), false, false)), lambda(Lambda33, ite(and(bvule(0, Lambda33), bvule(Lambda33, 4294967295)), 0, 0))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140453 : map_get(140273, 140276) : SUM[UNIT,BV:32] : ( sum(0, unit, 0) )
140283 : 1 { 0x1 +1.0e1025 } : INT                 : 1
157451 : sum_is(140453, 140283) : BOOL             : false
157454 : or(157453, 157451) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4 9fe8c6808bbafb4a5596905b21a8951d
=input.spec-%var-x-1
1 : Lambda32 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda33 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda36 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda37 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 209927 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 209928; 209931 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 209932; 435219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 435220; 435223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 435224; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 209928 { 0x33408 +1.2502536e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 435220 { 0x6a414 +1.5188226e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 435220 { 0x6a414 +1.5188226e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 435223 { 0x6a417 +1.5188262e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 209928 { 0x33408 +1.2502536e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 209931 { 0x3340b +1.2502572e129 } : BV:32
=counter_example.random_seed
3747455381
=counter_example_end


failcond-expr = or(not(true), sum_is(map_get(input.spec-%var-x-1, 0), 1)):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32]
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
6 : 1 { 0x1 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : or(2, 7) : BOOL
</MSG>
<MSG>0:26 : foo.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:26 : foo.A3: Finished executing CG's add edge function...</MSG>
<MSG>0:26 : foo.A3: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A3: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : Done adding new edge to the product-TFG foo.A3 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : Done adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:26 : Failed correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
157453 : not(140275) : BOOL                        : false
140273 : input.spec-%var-x-1 : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda32, ite(and(bvule(0, Lambda32), bvule(Lambda32, 4294967295)), false, false)), lambda(Lambda33, ite(and(bvule(0, Lambda33), bvule(Lambda33, 4294967295)), 0, 0))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140453 : map_get(140273, 140276) : SUM[UNIT,BV:32] : ( sum(0, unit, 0) )
140283 : 1 { 0x1 +1.0e1025 } : INT                 : 1
157451 : sum_is(140453, 140283) : BOOL             : false
157454 : or(157453, 157451) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce4 9fe8c6808bbafb4a5596905b21a8951d
=input.spec-%var-x-1
1 : Lambda32 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda33 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-x-0.L3%6%bbentry
1 : Lambda36 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda37 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 209927 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 209928; 209931 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 209932; 435219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 435220; 435223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 435224; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 209928 { 0x33408 +1.2502536e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 435220 { 0x6a414 +1.5188226e129 } : BV:32
=input.spec-%tmpvar-7.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 435220 { 0x6a414 +1.5188226e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 435223 { 0x6a417 +1.5188262e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 209928 { 0x33408 +1.2502536e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 209931 { 0x3340b +1.2502572e129 } : BV:32
=counter_example.random_seed
3747455381
=counter_example_end


</MSG>
<MSG>0:26 : Discovered that the correlation was useless for the product-TFG foo.A3 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:26 : Chose (for CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:26 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1...</MSG>
<MSG>0:26 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1...</MSG>
<MSG>0:26 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:26 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:26 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:26 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:26 : Adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A1: Adding node L0%0%d_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:26 : foo.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A1: Adding edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:26 : foo.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:26 : foo.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:26 : foo.A1: Propagated 2 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:26 : foo.A1: Added the 2 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:26 : foo.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:26 : foo.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:26 : foo.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : Done adding new edge to the product-TFG foo.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%x ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%n
      3.: 0                     ==  input.dst.llvm-%x
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [4]: 14-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 15-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    5 preds:
      0.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      2.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      3.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      4.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:26 : Added correlation to the product-TFG foo.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:26 : Chose (after CE propagation) product-TFG foo.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 3 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 1 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%x ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%n
      3.: 0                     ==  input.dst.llvm-%x
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n, 0)  ==  true
      1.: bvsle(input.dst.llvm-%n, 0)  ==  true
      2.: bvsge(input.dst.llvm-%n, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    4 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
      2.: bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
      3.: bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [4]: 14-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 15-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    5 preds:
      0.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      2.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      3.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      4.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:26 : foo.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:26 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:26 : foo.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:26 : foo.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:26 : foo.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:26 : foo.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:26 : foo.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:26 : foo.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:26 : foo.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : foo.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht9-prove_trivial2-prove7...</MSG>
<MSG>0:28 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:28 : foo.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : foo.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:28 : foo.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : foo.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:28 : foo.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 4 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%x ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce3      1.:z3.ce348      2.:z3v487.ce349      3.:z3.ce364      4.:z3.ce380      5.:z3.ce396      6.:z3v487.ce397      7.:z3.ce412      8.:z3.ce428
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce444      2.:z3.ce348      3.:z3.ce364
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce348      2.:z3.ce364
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [4]: 14-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 15-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    1 preds:
      0.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:29 : foo.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:29 : foo.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%x ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce3      1.:z3.ce348      2.:z3v487.ce349      3.:z3.ce364      4.:z3.ce380      5.:z3.ce396      6.:z3v487.ce397      7.:z3.ce412      8.:z3.ce428
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce444      2.:z3.ce348      3.:z3.ce364
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce348      2.:z3.ce364
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [4]: 14-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 15-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    1 preds:
      0.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:29 : foo.A1 (d:2, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:29 : foo.A1 (d:2, s:0, sp: 4): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:29 : product-TFG foo.A1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : product-TFG foo.A1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : product-TFG foo.A1 created 1 possibilities in group foo.A1.B...</MSG>
<MSG>0:29 : Chose (for CE propagation) product-TFG foo.A1.B1 (d:2, s:0, sp: 4) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 3 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:29 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:29 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A1.B1...</MSG>
<MSG>0:29 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:29 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:29 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:29 : Adding new edge to the product-TFG foo.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A1.B1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A1.B1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A1.B1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:29 : foo.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:29 : foo.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:29 : foo.A1.B1: Propagated 11 out of 12 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:29 : foo.A1.B1: Added the 11 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:29 : foo.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:29 : foo.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:29 : foo.A1.B1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A1.B1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : Done adding new edge to the product-TFG foo.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:4, s:0, sp: 4)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%x ; 3-->input.dst.llvm-%n ; 4-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce3      1.:z3.ce348      2.:z3v487.ce349      3.:z3.ce364      4.:z3.ce380      5.:z3.ce396      6.:z3v487.ce397      7.:z3.ce412      8.:z3.ce428      9.:z3.ce535      10.:z3.ce588      11.:z3.ce618
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce444      2.:z3.ce348      3.:z3.ce364
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce588
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 9-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 10-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 13-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce348      2.:z3.ce364
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [4]: 14-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 15-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    1 preds:
      0.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:29 : Added correlation to the product-TFG foo.A1.B1 (d:4, s:0, sp: 4) and created a correlation entry...</MSG>
<MSG>0:29 : Chose (after CE propagation) product-TFG foo.A2 (d:2, s:0, sp: 8) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 10 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      3.: 0                     ==  input.spec-%var-ret-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:29 : foo.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:29 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:29 : foo.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:29 : foo.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:29 : foo.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:29 : foo.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:29 : foo.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:29 : foo.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 9 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht5-prove_trivial4-prove1...</MSG>
<MSG>0:29 : foo.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:29 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:29 : foo.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:29 : foo.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:29 : foo.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:29 : foo.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 9 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:30 : foo.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      3.: 0                     ==  input.spec-%var-ret-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:30 : foo.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:30 : foo.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
      3.: 0                     ==  input.spec-%var-ret-0.L3%6%bbentry
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:30 : foo.A2 (d:2, s:0, sp: 8): checked newly added edge and inferred invariants...</MSG>
<MSG>0:30 : foo.A2 (d:2, s:0, sp: 8): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:30 : product-TFG foo.A2: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Considering 2 paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Found 2 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : product-TFG foo.A2: Found 2 correlations for Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : product-TFG foo.A2 created 2 possibilities in group foo.A2.B...</MSG>
<MSG>0:30 : Chose (for CE propagation) product-TFG foo.A2.B2 (d:2, s:0, sp: 8) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:30 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:30 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2...</MSG>
<MSG>0:30 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:30 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:30 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
<MSG>0:30 : Adding new edge to the product-TFG foo.A2.B2 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:30 : foo.A2.B2: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:30 : foo.A2.B2: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:30 : foo.A2.B2: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:30 : foo.A2.B2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:30 : foo.A2.B2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:30 : foo.A2.B2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:30 : foo.A2.B2: Propagated 11 out of 12 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:30 : foo.A2.B2: Added the 11 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:30 : foo.A2.B2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:30 : foo.A2.B2: Finished executing CG's add edge function...</MSG>
<MSG>0:30 : foo.A2.B2: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:30 : foo.A2.B2: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:30 : Done adding new edge to the product-TFG foo.A2.B2 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:30 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-ret-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123      9.:z3v487.ce733      10.:z3.ce840      11.:z3.ce897
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce840
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce840
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:30 : Added correlation to the product-TFG foo.A2.B2 (d:2, s:0, sp: 8) and created a correlation entry...</MSG>
<MSG>0:30 : Chose (after CE propagation) product-TFG foo.A2.B2 (d:2, s:0, sp: 8) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 27 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-ret-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123      9.:z3v487.ce733      10.:z3.ce840      11.:z3.ce897
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce840
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce3      1.:z3.ce840
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:30 : foo.A2.B2: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:30 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:30 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:30 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:30 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:30 : foo.A2.B2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:30 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:30 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:30 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 12 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:30 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:30 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>0:31 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:31 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:31 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:31 : foo.A2.B2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 9 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A2.B2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>0:31 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:31 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 12 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:31 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:31 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:31 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:31 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:32 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:32 : foo.A2.B2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 9 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-ret-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123      9.:z3v487.ce733      10.:z3.ce840      11.:z3.ce897
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:32 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>0:32 : foo.A2.B2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:32 : foo.A2.B2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:32 : foo.A2.B2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:32 : foo.A2.B2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:32 : foo.A2.B2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 12 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>0:32 : foo.A2.B2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:32 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:32 : foo.A2.B2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:32 : foo.A2.B2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:32 : foo.A2.B2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 9 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-ret-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123      9.:z3v487.ce733      10.:z3.ce840      11.:z3.ce897
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:32 : foo.A2.B2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:32 : foo.A2.B2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A2.B2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-ret-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123      9.:z3v487.ce733      10.:z3.ce840      11.:z3.ce897
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3


<MSG>0:32 : foo.A2.B2 (d:2, s:0, sp: 8): checked newly added edge and inferred invariants...</MSG>
<MSG>0:32 : foo.A2.B2 (d:2, s:0, sp: 8): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:33 : product-TFG foo.A2.B2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Attempting correlation of src pathset L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : product-TFG foo.A2.B2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:33 : product-TFG foo.A2.B2 created 1 possibilities in group foo.A2.B2.C...</MSG>
<MSG>0:33 : Chose (for CE propagation) product-TFG foo.A2.B2.C1 (d:2, s:0, sp: 8) from a frontier of size 3...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 3 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 32 counterexamples (for correlating 6 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:33 : Finished adding lsprel-assumes for allocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:33 : Finished adding lsprel-assumes for deallocation to the product-TFG foo.A2.B2.C1...</MSG>
<MSG>0:33 : Creating ssa-path for the src-tfg path L3%6%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:33 : Adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:33 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:33 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:33 : Adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:33 : foo.A2.B2.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:33 : foo.A2.B2.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Propagated 5 out of 32 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:33 : foo.A2.B2.C1: Added the 5 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:33 : foo.A2.B2.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:33 : Done adding new edge to the product-TFG foo.A2.B2.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:33 : Done adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-ret-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123      9.:z3v487.ce733      10.:z3.ce840      11.:z3.ce897
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:33 : Added correlation to the product-TFG foo.A2.B2.C1 (d:2, s:0, sp: 8) and created a correlation entry...</MSG>
<MSG>0:33 : Chose (after CE propagation) product-TFG foo.A2.B2.C1 (d:2, s:0, sp: 8) from a frontier of size 3...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 32 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-ret-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123      9.:z3v487.ce733      10.:z3.ce840      11.:z3.ce897
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:33 : foo.A2.B2.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:33 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:33 : foo.A2.B2.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:33 : foo.A2.B2.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4863:
foo.A2.B2.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-ret-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123      9.:z3v487.ce733      10.:z3.ce840      11.:z3.ce897
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:33 : foo.A2.B2.C1 (d:2, s:0, sp: 8): checked newly added edge and inferred invariants...</MSG>
<MSG>0:33 : foo.A2.B2.C1 (d:2, s:0, sp: 8): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:33 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>0:33 : Checking equivalence proof...</MSG>
<MSG>0:34 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.spec-%var-ret-0.L3%6%bbentry ; 4-->input.dst.llvm-%x ; 5-->input.dst.llvm-%n ; 6-->input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ; 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      1.: bvneg(bvmul(input.spec-%var-ret-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%x, 1, 0)
     is_assumed_eqclass : 0
    12 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3v487.ce24      3.:z3.ce43      4.:z3.ce63      5.:z3.ce83      6.:z3v487.ce84      7.:z3.ce103      8.:z3.ce123      9.:z3v487.ce733      10.:z3.ce840      11.:z3.ce897
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43      3.:z3.ce143
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 7-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce3      1.:z3.ce840      2.:z3v487.ce1068      3.:z3.ce1119
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 8-->bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 11-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 12-->bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 15-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce3      1.:z3.ce23      2.:z3.ce43
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [9]: 16-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 17-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 18-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 19-->eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 20-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 21-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%x))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 22-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%ret.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 23-->eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 24-->eq(spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false)))) ; 
    2 preds:
      0.: eq(input.spec-%var-x-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
      1.: eq(input.spec-%var-x-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n))), lambda(Lambda1, select(input.dst.llvm-mem, input.dst.llvm-mem.alloc, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%x), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce3

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A (line 3 at column 26) => A (line 3 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 3 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 3 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 32 counterexamples (for correlating 6 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function foo. 12.29s, query:smt.: 4.79867s (num_starts 88; 0.0545s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 10.6877s (num_starts 135; 0.0792s/start)ftmap_run_pointsto_analysis.: 0.132424s (num_starts 2; 0.0662s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 3e-06s (num_starts 4; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 6e-06s (num_starts 5; 0.0000s/start)
compute_tfg_pred_eqclass.: 8e-06s (num_starts 3; 0.0000s/start)
prune_dst_memslots.: 9e-06s (num_starts 3; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1e-05s (num_starts 6; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 1.5e-05s (num_starts 6; 0.0000s/start)
get_paths_with_matching_to_pc.: 1.8e-05s (num_starts 6; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 2.1e-05s (num_starts 24; 0.0000s/start)
graph_edge_contains_unknown_function_call.: 3.3e-05s (num_starts 35; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 3.3e-05s (num_starts 3; 0.0000s/start)
get_intersected_lr_status.: 3.4e-05s (num_starts 2; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 4.5e-05s (num_starts 2; 0.0000s/start)
determinize_value_expr_map.: 4.5e-05s (num_starts 18; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry.: 4.6e-05s (num_starts 1; 0.0000s/start)
remove_complex_bv_exprs.: 4.8e-05s (num_starts 3; 0.0000s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 4.9e-05s (num_starts 3; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes.: 5e-05s (num_starts 2; 0.0000s/start)
ce_perform_memory_fuzzing.: 6.3e-05s (num_starts 64; 0.0000s/start)
prove_trivial.: 6.4e-05s (num_starts 48; 0.0000s/start)
get_lr_status_for_loc_ids.: 6.6e-05s (num_starts 19; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 8.2e-05s (num_starts 3; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 9.2e-05s (num_starts 3; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000111s (num_starts 1; 0.0001s/start)
sp_version_relations_val_t::meet.: 0.000116s (num_starts 261; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000141s (num_starts 3; 0.0000s/start)
lr_status_meet.: 0.000143s (num_starts 172; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000151s (num_starts 8; 0.0000s/start)
expr_is_hidden_reg.: 0.000155s (num_starts 196; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000173s (num_starts 46; 0.0000s/start)
compute_sprel_relations.: 0.00018s (num_starts 2; 0.0001s/start)
graph_locs_add_all_indvars.: 0.000185s (num_starts 2; 0.0001s/start)
populate_locid2expr_map.: 0.000188s (num_starts 2; 0.0001s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000189s (num_starts 7; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.00019s (num_starts 12; 0.0000s/start)
expr_is_callee_save_const.: 0.000192s (num_starts 208; 0.0000s/start)
propagate_sprels.: 0.000192s (num_starts 2; 0.0001s/start)
graph_locs_add_all_exvregs.: 0.000201s (num_starts 2; 0.0001s/start)
def_analysis::xfer_and_meet.: 0.000221s (num_starts 18; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.000248s (num_starts 3; 0.0001s/start)
graph_locs_add_local_vars_for_edge.: 0.000259s (num_starts 12; 0.0000s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000262s (num_starts 135; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.cond%1%bbentry.inductive-invariants.: 0.000263s (num_starts 2; 0.0001s/start)
graph_locs_add_all_local_vars.: 0.00027s (num_starts 2; 0.0001s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000272s (num_starts 26; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.000287s (num_starts 2; 0.0001s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.000322s (num_starts 1; 0.0003s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000326s (num_starts 80; 0.0000s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000326s (num_starts 3; 0.0001s/start)
compute_bv_bool_eqclass.: 0.000351s (num_starts 3; 0.0001s/start)
collect_dst_to_src_submap_preds.: 0.000355s (num_starts 135; 0.0000s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.000358s (num_starts 43; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.000366s (num_starts 9; 0.0000s/start)
get_sprel_map_pair.: 0.000397s (num_starts 30; 0.0000s/start)
tfg::collect_assumes_around_edge.: 0.000411s (num_starts 30; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000462s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000462s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000463s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-trivial.: 0.000464s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000467s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00047s (num_starts 1; 0.0005s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.000471s (num_starts 1; 0.0005s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000489s (num_starts 1; 0.0005s/start)
tfg_suffixpath_get_expr_helper.: 0.000523s (num_starts 12; 0.0000s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.000529s (num_starts 58; 0.0000s/start)
proof_query_is_trivial_helper.: 0.000541s (num_starts 147; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.00057s (num_starts 1; 0.0006s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.000589s (num_starts 87; 0.0000s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.000593s (num_starts 24; 0.0000s/start)
populate_simplified_to_state.: 0.000615s (num_starts 3; 0.0002s/start)
create_closure_matrix.: 0.00064s (num_starts 58; 0.0000s/start)
graph_locs_add_all_llvmvars.: 0.000648s (num_starts 2; 0.0003s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.000653s (num_starts 245; 0.0000s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.000683s (num_starts 87; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.000729s (num_starts 1; 0.0007s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.000733s (num_starts 3; 0.0002s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000736s (num_starts 46; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.000753s (num_starts 6; 0.0001s/start)
graph_locs_add_all_specvars.: 0.000768s (num_starts 2; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.000793s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed;-trivial.: 0.000795s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.000796s (num_starts 1; 0.0008s/start)
graph_ec_apply_trans_funs_helper.1.: 0.000799s (num_starts 6; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.000801s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;lb-signed.: 0.000806s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.000813s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.000822s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed;-trivial.: 0.000825s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.000827s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.000831s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-signed.: 0.000835s (num_starts 1; 0.0008s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.000835s (num_starts 1; 0.0008s/start)
tfg::populate_loc_definedness.before_solve.: 0.000842s (num_starts 3; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.000843s (num_starts 1; 0.0008s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.00087s (num_starts 1; 0.0009s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.000892s (num_starts 47; 0.0000s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.000903s (num_starts 4; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.000928s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-trivial.: 0.000934s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.000936s (num_starts 1; 0.0009s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.000949s (num_starts 6; 0.0002s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.00096s (num_starts 18; 0.0001s/start)
interesting_wp_exprs_apply_trans_funs.: 0.000978s (num_starts 6; 0.0002s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.001037s (num_starts 10; 0.0001s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.00104s (num_starts 170; 0.0000s/start)
removeMostPromising.: 0.001045s (num_starts 17; 0.0001s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.001061s (num_starts 170; 0.0000s/start)
identify_address_taken_local_variables.: 0.0011s (num_starts 1; 0.0011s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.001153s (num_starts 5; 0.0002s/start)
expr_represents_llvm_undef.: 0.001167s (num_starts 212; 0.0000s/start)
tfg::populate_loc_definedness.before_initialize.: 0.001174s (num_starts 3; 0.0004s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.001183s (num_starts 3; 0.0004s/start)
tfg::populate_loc_definedness.: 0.001246s (num_starts 3; 0.0004s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.001268s (num_starts 2; 0.0006s/start)
pth_collect_preds_using_atom_func.: 0.001316s (num_starts 51; 0.0000s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.001511s (num_starts 18; 0.0001s/start)
parse_yices_model.: 0.001665s (num_starts 1; 0.0017s/start)
corr_graph_enumerate_correlations.: 0.001689s (num_starts 6; 0.0003s/start)
tfg_edge_composition_get_assumes.: 0.0017s (num_starts 51; 0.0000s/start)
set_result_and_counter_example.: 0.001735s (num_starts 88; 0.0000s/start)
collect_assumes_around_edge.: 0.001747s (num_starts 6; 0.0003s/start)
compute_ssa_vars_renaming_map.: 0.00181s (num_starts 2; 0.0009s/start)
find_dominators.: 0.001816s (num_starts 31; 0.0001s/start)
populate_simplified_assets.: 0.001856s (num_starts 6; 0.0003s/start)
proof_query_is_trivial.: 0.001943s (num_starts 135; 0.0000s/start)
graph_identify_back_edges.: 0.002002s (num_starts 27; 0.0001s/start)
graph_visit_exprs.: 0.002027s (num_starts 3; 0.0007s/start)
populate_branch_affecting_locs.: 0.002053s (num_starts 3; 0.0007s/start)
graph_with_guessing_sync_preds.: 0.002121s (num_starts 135; 0.0000s/start)
compute_vars_reaching_definitions.: 0.002163s (num_starts 2; 0.0011s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.002183s (num_starts 28; 0.0001s/start)
graph_identify_natural_loops.: 0.002229s (num_starts 27; 0.0001s/start)
aliasing_constraints.convert_to_expr.: 0.002371s (num_starts 87; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.002391s (num_starts 24; 0.0001s/start)
graph_visit_exprs_and_keys.: 0.002482s (num_starts 2; 0.0012s/start)
get_unrolled_loop_paths_from.: 0.002538s (num_starts 3; 0.0008s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.002647s (num_starts 24; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.002688s (num_starts 2; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-trivial.: 0.002702s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.002707s (num_starts 2; 0.0014s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.002731s (num_starts 87; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.002965s (num_starts 24; 0.0001s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.003032s (num_starts 65; 0.0000s/start)
parse_cvc4_model.: 0.003072s (num_starts 1; 0.0031s/start)
populate_locs_potentially_modified_on_edge.: 0.003246s (num_starts 3; 0.0011s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.003396s (num_starts 58; 0.0001s/start)
populate_transitive_closure.: 0.003652s (num_starts 37; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;lb-signed;-trivial.: 0.003789s (num_starts 2; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.003799s (num_starts 2; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.003814s (num_starts 2; 0.0019s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.003854s (num_starts 86; 0.0000s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.003907s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed;-trivial.: 0.003971s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.003979s (num_starts 4; 0.0010s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.003995s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.003995s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;lb-signed.: 0.004011s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.004011s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed;-trivial.: 0.004022s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.004029s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.004043s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-signed.: 0.004055s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.004081s (num_starts 4; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;ub-unsigned;-trivial.: 0.004143s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.004149s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.004163s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.00425s (num_starts 2; 0.0021s/start)
expr_linear_relation_holds::visit.var.: 0.004341s (num_starts 212; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.004401s (num_starts 1; 0.0044s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.004537s (num_starts 58; 0.0001s/start)
construct_linear_combination_exprs.: 0.004716s (num_starts 160; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.004839s (num_starts 5; 0.0010s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 0.004905s (num_starts 5; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned;-trivial.: 0.004942s (num_starts 4; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.004948s (num_starts 4; 0.0012s/start)
generate_aliasing_constraints_from_expr.: 0.004973s (num_starts 566; 0.0000s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.005114s (num_starts 3; 0.0017s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-trivial.: 0.005215s (num_starts 5; 0.0010s/start)
expr_substitute_using_available_exprs_submap.: 0.005388s (num_starts 180; 0.0000s/start)
compute_regions.: 0.005603s (num_starts 27; 0.0002s/start)
ldr_decomposition.: 0.006061s (num_starts 80; 0.0001s/start)
get_next_potential_correlations.: 0.006087s (num_starts 4; 0.0015s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.006384s (num_starts 86; 0.0001s/start)
bv_const_ref_map2expr_map.: 0.006486s (num_starts 160; 0.0000s/start)
create_sp_version_relations_lattice_at_pc.: 0.00654s (num_starts 58; 0.0001s/start)
get_sprel_map_pair_at_pc.: 0.007283s (num_starts 87; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007394s (num_starts 1; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.007394s (num_starts 1; 0.0074s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.007405s (num_starts 1; 0.0074s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.007723s (num_starts 46; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.00773s (num_starts 6; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.007898s (num_starts 6; 0.0013s/start)
do_ssa_transformation.: 0.008417s (num_starts 2; 0.0042s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.008537s (num_starts 7; 0.0012s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.008612s (num_starts 3; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-trivial.: 0.008635s (num_starts 3; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.00906s (num_starts 6; 0.0015s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.00979s (num_starts 2; 0.0049s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.009816s (num_starts 46; 0.0002s/start)
gen_pred_from_coeff_row.simplify.: 0.009922s (num_starts 160; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.010004s (num_starts 7; 0.0014s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.010626s (num_starts 46; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown;-trivial.: 0.010778s (num_starts 2; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.010781s (num_starts 2; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.010799s (num_starts 2; 0.0054s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-trivial.: 0.011026s (num_starts 3; 0.0037s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.011039s (num_starts 3; 0.0037s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.01234s (num_starts 46; 0.0003s/start)
tfg::get_aliasing_constraints_for_edge.: 0.012668s (num_starts 129; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-trivial.: 0.012722s (num_starts 8; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.012744s (num_starts 8; 0.0016s/start)
avail_exprs_create_submap.: 0.013213s (num_starts 138; 0.0001s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.014405s (num_starts 172; 0.0001s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.014483s (num_starts 5; 0.0029s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.014701s (num_starts 172; 0.0001s/start)
predicate_canonicalized.: 0.014749s (num_starts 160; 0.0001s/start)
compute_lr_status_for_expr.: 0.015303s (num_starts 208; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.01539s (num_starts 4; 0.0038s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.015587s (num_starts 141; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.015672s (num_starts 3; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01568s (num_starts 3; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.015701s (num_starts 3; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;abstract-memlabel-asserts-houdini-guess.: 0.015718s (num_starts 3; 0.0052s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.016929s (num_starts 10; 0.0017s/start)
compute_expr_eqclasses_at_pc.: 0.017741s (num_starts 3; 0.0059s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.017926s (num_starts 87; 0.0002s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.01815s (num_starts 3; 0.0060s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.018628s (num_starts 23; 0.0008s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.018747s (num_starts 5; 0.0037s/start)
cg_add_node.: 0.018985s (num_starts 5; 0.0038s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.019606s (num_starts 87; 0.0002s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.020497s (num_starts 256; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;pred-type-unknown;-trivial.: 0.021541s (num_starts 6; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.021554s (num_starts 6; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.021586s (num_starts 6; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;pred-type-unknown.: 0.021611s (num_starts 6; 0.0036s/start)
graph_to_stream.: 0.022148s (num_starts 4; 0.0055s/start)
pth_collect_simplified_preds_using_atom_func.: 0.022659s (num_starts 139; 0.0002s/start)
create_new_corr_graph_edge.new_node.: 0.022885s (num_starts 4; 0.0057s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.02292s (num_starts 190; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.023035s (num_starts 4; 0.0058s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.023048s (num_starts 4; 0.0058s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.023189s (num_starts 4; 0.0058s/start)
create_new_corr_graph_edge.: 0.02322s (num_starts 6; 0.0039s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.023911s (num_starts 3; 0.0080s/start)
populate_loc_liveness.: 0.024256s (num_starts 3; 0.0081s/start)
get_unrolled_paths_from.: 0.024377s (num_starts 20; 0.0012s/start)
compute_new_lr_status_on_locs.: 0.025072s (num_starts 46; 0.0005s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.02558s (num_starts 22; 0.0012s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.025679s (num_starts 22; 0.0012s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.02693s (num_starts 6; 0.0045s/start)
ldr_decompose_and_linear_solve.: 0.027189s (num_starts 80; 0.0003s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.028255s (num_starts 21; 0.0013s/start)
collect_assumes_around_path_helper.: 0.029185s (num_starts 170; 0.0002s/start)
collect_aliasing_constraints_around_path_helper.: 0.029296s (num_starts 120; 0.0002s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.029636s (num_starts 446; 0.0001s/start)
graph_with_paths::collect_assumes_around_path.: 0.030014s (num_starts 170; 0.0002s/start)
collect_aliasing_constraints_around_path.: 0.03013s (num_starts 76; 0.0004s/start)
bv_linear_solve.: 0.030196s (num_starts 80; 0.0004s/start)
query:bv_solve.: 0.030749s (num_starts 80; 0.0004s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.031655s (num_starts 46; 0.0007s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.032289s (num_starts 8; 0.0040s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.032299s (num_starts 8; 0.0040s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.03252s (num_starts 8; 0.0041s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.033572s (num_starts 1; 0.0336s/start)
tfg_postprocess_after_pointsto_analysis.: 0.034633s (num_starts 2; 0.0173s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.035034s (num_starts 16; 0.0022s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.037657s (num_starts 26; 0.0014s/start)
bv_solve_returning_intermediate_structures.: 0.040078s (num_starts 80; 0.0005s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.041152s (num_starts 1050; 0.0000s/start)
gen_pred_from_coeff_row.: 0.041498s (num_starts 160; 0.0003s/start)
compute_preds_for_bv_points.: 0.04235s (num_starts 36; 0.0012s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.042592s (num_starts 42; 0.0010s/start)
counter_example_satisfies_preds.: 0.044526s (num_starts 665; 0.0001s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.046013s (num_starts 904; 0.0001s/start)
bvsolve_cache_query.miss1.: 0.04649s (num_starts 80; 0.0006s/start)
bvsolve_cache_query.: 0.0485s (num_starts 80; 0.0006s/start)
tfg_relax_pointsto_vals_on_edge.: 0.048619s (num_starts 22; 0.0022s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.050053s (num_starts 69; 0.0007s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.051036s (num_starts 115; 0.0004s/start)
lhs_set_sort.: 0.055748s (num_starts 87; 0.0006s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.056922s (num_starts 1; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.056936s (num_starts 1; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.056944s (num_starts 1; 0.0569s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.056955s (num_starts 1; 0.0570s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;abstract-memlabel-asserts-houdini-guess.: 0.05696s (num_starts 1; 0.0570s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.056969s (num_starts 1; 0.0570s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.059906s (num_starts 164; 0.0004s/start)
solve_for_bv_points.: 0.060295s (num_starts 80; 0.0008s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.061369s (num_starts 24; 0.0026s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 0.062729s (num_starts 8; 0.0078s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068478s (num_starts 1; 0.0685s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068497s (num_starts 1; 0.0685s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.068505s (num_starts 1; 0.0685s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.068516s (num_starts 1; 0.0685s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst-ineq-houdini-guess.: 0.068523s (num_starts 1; 0.0685s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.068533s (num_starts 1; 0.0685s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.069248s (num_starts 164; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070466s (num_starts 1; 0.0705s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.070466s (num_starts 1050; 0.0001s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070476s (num_starts 1; 0.0705s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070489s (num_starts 1; 0.0705s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.070496s (num_starts 1; 0.0705s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.070507s (num_starts 1; 0.0705s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.070524s (num_starts 1; 0.0705s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.070663s (num_starts 16; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;outgoing_edges_cover_all_possibilities..: 0.07099s (num_starts 2; 0.0355s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.071003s (num_starts 2; 0.0355s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.071989s (num_starts 1108; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073116s (num_starts 1; 0.0731s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.073118s (num_starts 1; 0.0731s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.073128s (num_starts 1; 0.0731s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074241s (num_starts 1; 0.0742s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.074689s (num_starts 1; 0.0747s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.074699s (num_starts 1; 0.0747s/start)
collect_inductive_preds_around_path.: 0.076487s (num_starts 135; 0.0006s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.077221s (num_starts 80; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.078516s (num_starts 3; 0.0262s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;abstract-memlabel-asserts-houdini-guess.: 0.080561s (num_starts 2; 0.0403s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.08437s (num_starts 1; 0.0844s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.084384s (num_starts 1; 0.0844s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.088238s (num_starts 1050; 0.0001s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.088806s (num_starts 24; 0.0037s/start)
propagate_nodece_across_edge.: 0.095968s (num_starts 28; 0.0034s/start)
query:convert_to_z3.: 0.101283s (num_starts 2133; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.101406s (num_starts 2; 0.0507s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.10142s (num_starts 2; 0.0507s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.101435s (num_starts 2; 0.0507s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst-ineq-houdini-guess.: 0.101442s (num_starts 2; 0.0507s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.109711s (num_starts 526; 0.0002s/start)
put_smtlib_string_in_file.: 0.112026s (num_starts 176; 0.0006s/start)
query:convert_from_z3.: 0.112942s (num_starts 2133; 0.0001s/start)
decide_hoare_triple_helper;-trivial.: 0.117524s (num_starts 48; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.124033s (num_starts 1; 0.1240s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.124035s (num_starts 1; 0.1240s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.124038s (num_starts 1; 0.1240s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.124046s (num_starts 1; 0.1240s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;false-predicate.: 0.12405s (num_starts 1; 0.1240s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 0.12406s (num_starts 1; 0.1241s/start)
graph_ec_apply_trans_funs_helper.0.: 0.127698s (num_starts 406; 0.0003s/start)
graph_ec_apply_trans_funs_helper.: 0.1305s (num_starts 412; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.131302s (num_starts 2; 0.0657s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13132s (num_starts 2; 0.0657s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.131338s (num_starts 2; 0.0657s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;abstract-memlabel-asserts-houdini-guess.: 0.131345s (num_starts 2; 0.0657s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.132s (num_starts 412; 0.0003s/start)
ftmap_run_pointsto_analysis.: 0.132424s (num_starts 2; 0.0662s/start)
tfg_run_pointsto_analysis.: 0.132704s (num_starts 2; 0.0664s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.133232s (num_starts 406; 0.0003s/start)
computeWP_for_pred_across_ec.: 0.135039s (num_starts 406; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.135174s (num_starts 1; 0.1352s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.135175s (num_starts 1; 0.1352s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.13518s (num_starts 1; 0.1352s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.135182s (num_starts 1; 0.1352s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.13519s (num_starts 1; 0.1352s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;dst_edge_composition_proves_false.: 0.135194s (num_starts 1; 0.1352s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.135202s (num_starts 1; 0.1352s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon).: 0.135206s (num_starts 1; 0.1352s/start)
tfg_populate_structs_after_ssa_construction.: 0.138514s (num_starts 2; 0.0693s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144036s (num_starts 1; 0.1440s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144037s (num_starts 1; 0.1440s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.144039s (num_starts 1; 0.1440s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 0.144047s (num_starts 1; 0.1440s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;false-predicate.: 0.144053s (num_starts 1; 0.1441s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 0.144065s (num_starts 1; 0.1441s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.145586s (num_starts 1; 0.1456s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.145588s (num_starts 1; 0.1456s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.145592s (num_starts 1; 0.1456s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.145594s (num_starts 1; 0.1456s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.145601s (num_starts 1; 0.1456s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo;dst_edge_composition_proves_false.: 0.145604s (num_starts 1; 0.1456s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.145609s (num_starts 1; 0.1456s/start)
compute_z3_expr.: 0.145615s (num_starts 2221; 0.0001s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.146108s (num_starts 2; 0.0731s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 0.146458s (num_starts 176; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.14737s (num_starts 2; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.147383s (num_starts 2; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.147408s (num_starts 2; 0.0737s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;-dst-edgecond-implies-src-edgecond.: 0.147419s (num_starts 2; 0.0737s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 0.148618s (num_starts 2; 0.0743s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152295s (num_starts 2; 0.0761s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152303s (num_starts 2; 0.0762s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.152335s (num_starts 2; 0.0762s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.152359s (num_starts 2; 0.0762s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.15241s (num_starts 2; 0.0762s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.152429s (num_starts 2; 0.0762s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.15904s (num_starts 2; 0.0795s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;dst-ineq-houdini-guess.: 0.159104s (num_starts 2; 0.0796s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159848s (num_starts 1; 0.1598s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.159849s (num_starts 1; 0.1598s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.159862s (num_starts 1; 0.1599s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;dst_edge_composition_proves_false.: 0.159867s (num_starts 1; 0.1599s/start)
check_node_stability_after_CE_addition.: 0.16148s (num_starts 118; 0.0014s/start)
edge_composition_apply_trans_funs_on_pred.: 0.162842s (num_starts 135; 0.0012s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.164938s (num_starts 164; 0.0010s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.170475s (num_starts 3; 0.0568s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.171216s (num_starts 2; 0.0856s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.171238s (num_starts 2; 0.0856s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.17189s (num_starts 1; 0.1719s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.171892s (num_starts 1; 0.1719s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.171907s (num_starts 1; 0.1719s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst_edge_composition_proves_false.: 0.171915s (num_starts 1; 0.1719s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.176056s (num_starts 3; 0.0587s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.176189s (num_starts 3; 0.0587s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.179423s (num_starts 2; 0.0897s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183787s (num_starts 2; 0.0919s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.183803s (num_starts 2; 0.0919s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.183834s (num_starts 2; 0.0919s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.183862s (num_starts 3; 0.0613s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.184679s (num_starts 2; 0.0923s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.184693s (num_starts 2; 0.0923s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.184722s (num_starts 2; 0.0924s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;lb-signed.: 0.187682s (num_starts 4; 0.0469s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;ub-unsigned.: 0.188924s (num_starts 4; 0.0472s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 0.189594s (num_starts 3; 0.0632s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 0.195021s (num_starts 87; 0.0022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.195566s (num_starts 1; 0.1956s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.195573s (num_starts 1; 0.1956s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.195576s (num_starts 1; 0.1956s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.200551s (num_starts 5; 0.0401s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;ub-unsigned.: 0.20057s (num_starts 5; 0.0401s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.204373s (num_starts 3; 0.0681s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.204521s (num_starts 3; 0.0682s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.204811s (num_starts 7; 0.0293s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 0.209631s (num_starts 87; 0.0024s/start)
counter_example_translate_on_edge_composition_helper.: 0.217103s (num_starts 671; 0.0003s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.233842s (num_starts 3; 0.0779s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.235366s (num_starts 1; 0.2354s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.235369s (num_starts 1; 0.2354s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.235371s (num_starts 1; 0.2354s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.236325s (num_starts 2; 0.1182s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;ub-unsigned.: 0.236336s (num_starts 2; 0.1182s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.236355s (num_starts 2; 0.1182s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.24293s (num_starts 54; 0.0045s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.252431s (num_starts 3; 0.0841s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.25245s (num_starts 3; 0.0842s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.252484s (num_starts 3; 0.0842s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;dst-ineq-houdini-guess.: 0.252506s (num_starts 3; 0.0842s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.253451s (num_starts 3; 0.0845s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.253634s (num_starts 3; 0.0845s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 0.257783s (num_starts 160; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.259989s (num_starts 3; 0.0867s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.260007s (num_starts 3; 0.0867s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.260044s (num_starts 3; 0.0867s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;-dst-edgecond-implies-src-edgecond.: 0.260066s (num_starts 3; 0.0867s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.261323s (num_starts 4; 0.0653s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;linear.: 0.262422s (num_starts 6; 0.0437s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.268071s (num_starts 2; 0.1340s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 0.268116s (num_starts 2; 0.1341s/start)
counter_example_falsifies_preds.: 0.268946s (num_starts 99; 0.0027s/start)
apply_mask_and_overlay_array_constant.: 0.274019s (num_starts 160; 0.0017s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 0.284632s (num_starts 8; 0.0356s/start)
add_fresh_counterexample_at_pc_and_propagate.: 0.306401s (num_starts 64; 0.0048s/start)
decide_hoare_triple_with_alias_cons.ce.: 0.307461s (num_starts 104; 0.0030s/start)
counter_example_evaluate_preds.: 0.311448s (num_starts 764; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.323523s (num_starts 4; 0.0809s/start)
query:simplify-z3.: 0.330753s (num_starts 4283; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.331727s (num_starts 2; 0.1659s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.331802s (num_starts 2; 0.1659s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2.C1;pred-type-unknown.: 0.334454s (num_starts 6; 0.0557s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.336743s (num_starts 4; 0.0842s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.336952s (num_starts 4; 0.0842s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.344336s (num_starts 2; 0.1722s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.4073s (num_starts 5; 0.0815s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.407324s (num_starts 5; 0.0815s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 0.407517s (num_starts 5; 0.0815s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.40755s (num_starts 5; 0.0815s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.: 0.448073s (num_starts 3; 0.1494s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.47484s (num_starts 6; 0.0791s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.474904s (num_starts 6; 0.0792s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.486036s (num_starts 9; 0.0540s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;linear.: 0.486079s (num_starts 9; 0.0540s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.488329s (num_starts 3; 0.1628s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.523236s (num_starts 6; 0.0872s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.523276s (num_starts 6; 0.0872s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.523348s (num_starts 6; 0.0872s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;lb-signed.: 0.523387s (num_starts 6; 0.0872s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.551348s (num_starts 3; 0.1838s/start)
corr_graph::add_edge().: 0.554246s (num_starts 6; 0.0924s/start)
check_wfconds_on_edge.: 0.578639s (num_starts 9; 0.0643s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 0.579266s (num_starts 6; 0.0965s/start)
corr_graph_add_correlation.: 0.579524s (num_starts 6; 0.0966s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.581325s (num_starts 8; 0.0727s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 0.581631s (num_starts 8; 0.0727s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 0.594125s (num_starts 6; 0.0990s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.612502s (num_starts 4; 0.1531s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 0.612601s (num_starts 4; 0.1532s/start)
dst_edge_composition_proves_false.: 0.651138s (num_starts 4; 0.1628s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.654164s (num_starts 8; 0.0818s/start)
get_next_dst_edge_composition_to_correlate.: 0.667115s (num_starts 5; 0.1334s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.670088s (num_starts 12; 0.0558s/start)
decide_hoare_triple.: 0.698604s (num_starts 6; 0.1164s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.706915s (num_starts 8; 0.0884s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.706963s (num_starts 8; 0.0884s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.70734s (num_starts 8; 0.0884s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 0.715971s (num_starts 15; 0.0477s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.809441s (num_starts 8; 0.1012s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon).: 0.80993s (num_starts 8; 0.1012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.824549s (num_starts 4; 0.2061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.824579s (num_starts 4; 0.2061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.824593s (num_starts 4; 0.2061s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 0.824639s (num_starts 4; 0.2062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;pred-type-unknown.: 0.824657s (num_starts 4; 0.2062s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 0.824696s (num_starts 4; 0.2062s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.876197s (num_starts 8; 0.1095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.876232s (num_starts 8; 0.1095s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2.B2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.876325s (num_starts 8; 0.1095s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2.B2;ub-unsigned.: 0.876374s (num_starts 8; 0.1095s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.906537s (num_starts 3; 0.3022s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.06078s (num_starts 10; 0.1061s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.06123s (num_starts 10; 0.1061s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.12968s (num_starts 8; 0.1412s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.12971s (num_starts 8; 0.1412s/start)
ce_reconcile_sorts_and_values.: 1.13454s (num_starts 67; 0.0169s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 1.14256s (num_starts 16; 0.0714s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;linear.: 1.14262s (num_starts 16; 0.0714s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.20383s (num_starts 9; 0.1338s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 1.22132s (num_starts 19; 0.0643s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.22532s (num_starts 7; 0.1750s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.22537s (num_starts 7; 0.1751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.2254s (num_starts 7; 0.1751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 1.22821s (num_starts 9; 0.1365s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A1;linear.: 1.22825s (num_starts 9; 0.1365s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 1.22832s (num_starts 9; 0.1365s/start)
parse_z3_model.: 1.27302s (num_starts 65; 0.0196s/start)
read_counter_examples_from_channel.: 1.28753s (num_starts 33; 0.0390s/start)
check_equivalence_proof.: 1.42421s (num_starts 1; 1.4242s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.49177s (num_starts 12; 0.1243s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 1.5023s (num_starts 19; 0.0791s/start)
guarded_predicate_set_and.: 1.54983s (num_starts 87; 0.0178s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 1.62999s (num_starts 29; 0.0562s/start)
check_preds_on_edge_compositions.: 1.66007s (num_starts 12; 0.1383s/start)
expr_do_simplify_using_lhs_set_and_precond.: 1.7874s (num_starts 492; 0.0036s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.9264s (num_starts 11; 0.1751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.92644s (num_starts 11; 0.1751s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;foo.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 1.92656s (num_starts 11; 0.1751s/start)
decide_hoare_triple_helper;per-graph-per-query-type;foo.A2;pred-type-unknown.: 1.9266s (num_starts 11; 0.1751s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.09749s (num_starts 13; 0.1613s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 2.09796s (num_starts 13; 0.1614s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 2.50895s (num_starts 3; 0.8363s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.5546s (num_starts 15; 0.1703s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry).: 2.56071s (num_starts 20; 0.1280s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.75842s (num_starts 30; 0.0919s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.cond%1%bbentry).: 2.83162s (num_starts 46; 0.0616s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.07442s (num_starts 19; 0.1618s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.08341s (num_starts 24; 0.1285s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 3.10746s (num_starts 27; 0.1151s/start)
decide_hoare_triple_helper;per-query-type;linear.: 3.11955s (num_starts 40; 0.0780s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 3.1296s (num_starts 3; 1.0432s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.0012s (num_starts 30; 0.1334s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry).: 4.04109s (num_starts 56; 0.0722s/start)
query:smt.: 4.79867s (num_starts 88; 0.0545s/start)
spawn_smt_query.: 6.08738s (num_starts 88; 0.0692s/start)
solver_provable.: 7.7231s (num_starts 87; 0.0888s/start)
expr_is_provable.: 7.76273s (num_starts 87; 0.0892s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 7.76489s (num_starts 87; 0.0893s/start)
solver_satisfiable-cache-miss.: 7.76761s (num_starts 88; 0.0883s/start)
solver_satisfiable.: 7.76831s (num_starts 88; 0.0883s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 7.7707s (num_starts 87; 0.0893s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 7.77588s (num_starts 87; 0.0894s/start)
update_invariant_state_for_edges.: 9.0856s (num_starts 5; 1.8171s/start)
cg_check_new_cg_ec.: 9.10362s (num_starts 5; 1.8207s/start)
correl_entry_apply.: 9.10394s (num_starts 5; 1.8208s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 9.33508s (num_starts 87; 0.1073s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 9.35014s (num_starts 87; 0.1075s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 9.35208s (num_starts 87; 0.1075s/start)
expandProductCFG.: 9.77784s (num_starts 6; 1.6296s/start)
is_expr_equal_using_lhs_set_and_precond.: 9.94075s (num_starts 87; 0.1143s/start)
prove.: 9.94175s (num_starts 87; 0.1143s/start)
prove_spawn_and_join_helper.: 9.94245s (num_starts 87; 0.1143s/start)
prove_spawn_and_join.: 10.3238s (num_starts 87; 0.1187s/start)
prove_wrapper.proof_query_not_trivial.: 10.3398s (num_starts 87; 0.1188s/start)
prove_wrapper.: 10.3737s (num_starts 135; 0.0768s/start)
bestFirstSearch.: 10.4473s (num_starts 1; 10.4473s/start)
decide_hoare_triple_check_ub.: 10.5502s (num_starts 135; 0.0781s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 10.5624s (num_starts 87; 0.1214s/start)
decide_hoare_triple_helper.: 10.6877s (num_starts 135; 0.0792s/start)
decide_hoare_triple_with_alias_cons.: 10.9968s (num_starts 135; 0.0815s/start)
Time taken for equivalence check.: 11.8804s (num_starts 1; 11.8804s/start)

counters:
# of Paths Prunned through CE propagation.: 1
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 1
# of paths enumerated.: 16
# of paths expanded.: 5
# of queries to linear solver.: 80
# of smt-solver-queries.: 88
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 3
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 3
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_ecs.: 2
Lfor.cond%1%bbentry=>Lfor.cond%1%bbentry-src_to_pcs.: 1
num-backtrackings.: 2
removed-siblings.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 15
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 15
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 6
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 15
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 17
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 3
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 5
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 8
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 65
total-correlation-possibilities.: 8
total-correlation-possibilities-mod-lsprels.: 8
total-correlations-explored.: 6

flags:
dst-aloc.: 0
dst-edges.: 6
dst-nodes.: 6
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 12
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 32
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 3
final-CG-edges.: 3
final-CG-nodes.: 3
final-CG-num-invariants.: 11
final-CG-super-edges.: 0
src-edges.: 6
src-nodes.: 6
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 6.88
final-CG-time-to-total-time-ratio.: 0.66
query-time-to-total-time-ratio.: 0.40

Context stats:
exprs: count: 178820
sorts: count: 154
num_proof_queries: 87
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	7719
	        hit ratio:	0.958803
m_simplify_solver:
	----------- total:	5035
	        hit ratio:	0.572989
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	28
	        hit ratio:	0.285714
m_z3_solver_substitution:
	----------- total:	2150
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	2150
	        hit ratio:	0
m_expr_size:
	----------- total:	11778
	        hit ratio:	0.79657
m_contains_only_constants_or_sp_versions:
	----------- total:	6
	        hit ratio:	0.666667
m_expr_evaluates_to_constant_visitor:
	----------- total:	72877
	        hit ratio:	0.501379
m_sort_dfa_canonicalize:
	----------- total:	201251
	        hit ratio:	0.999906
m_expr_convert_to_iexpr:
	----------- total:	1058
	        hit ratio:	0.825142

z3_solver expr_query_cache entry size: 88
	----------- total:	88
	             hits:	0
	        hit ratio:	0
histogram (time taken by solver in ms):
[ 23.1990,  27.3777) (avg.  23.1990)     : 1
[ 27.3777,  32.3090) (avg.  30.5876)     : 14
[ 32.3090,  38.1286) (avg.  35.5213)     : 15
[ 38.1286,  44.9964) (avg.  40.2282)     : 13
[ 44.9964,  53.1013) (avg.  48.4370)     : 16
[ 53.1013,  62.6660) (avg.  59.2482)     : 4
[ 62.6660,  73.9536) (avg.  68.7269)     : 8
[ 73.9536,  87.2743) (avg.  78.5720)     : 2
[ 87.2743, 102.9944) (avg.  93.1413)     : 7
[102.9944, 121.5460) (avg. 114.9199)     : 8
histogram (number of quantifiers in query)
[0, 2) (avg. 0)                          : 1
[2, 4) (avg. 0)                          : 0
[4, 5) (avg. 4)                          : 30
[5, 7) (avg. 6)                          : 57
[7, 8) (avg. 0)                          : 0
[8, 10) (avg. 0)                         : 0
[10, 12) (avg. 0)                        : 0
[12, 13) (avg. 0)                        : 0
[13, 15) (avg. 0)                        : 0
[15, 16) (avg. 0)                        : 0
histogram (number of nodes in z3 ast)
[ 85, 101) (avg.  85)                    : 1
[101, 116) (avg.   0)                    : 0
[116, 132) (avg.   0)                    : 0
[132, 147) (avg. 146)                    : 3
[147, 162) (avg. 150)                    : 43
[162, 178) (avg. 170)                    : 3
[178, 193) (avg. 188)                    : 7
[193, 209) (avg. 193)                    : 1
[209, 224) (avg. 213)                    : 26
[224, 239) (avg. 226)                    : 4
Top 10 highest time taking queries:
1. [0.121s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.11
2. [0.119s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.8
3. [0.119s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.5
4. [0.115s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.4
5. [0.113s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.9
6. [0.113s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.10
7. [0.112s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.1
8. [0.107s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-branches-const-ineq.input.dst.llvm-%n.ub-unsigned.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.1
9. [0.098s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.6
10. [0.098s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.dst-branches-const-ineq.input.dst.llvm-%n.ub-unsigned.from_pcL0%0%d_L0%0%d.cond_apply_set_elem0_of_1.0

<MSG>0:35 : Successfully computed equivalence for function: foo.</MSG>

tfg_edge_expr_wp_fn: num_starts 104 time spent: 0:0:0 [0.002363s total; 0.000023 per start]
tfg_computeWP: num_starts 504 time spent: 0:0:0 [0.112299s total; 0.000223 per start]
tfg_get_simplified_to_state_for_edge: num_starts 1480 time spent: 0:0:0 [0.003938s total; 0.000003 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 1304 time spent: 0:0:0 [0.003233s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 536 time spent: 0:0:0 [0.001377s total; 0.000003 per start]
add_nodeces_at_pc_and_propagate: num_starts 69 time spent: 0:0:0 [0.568581s total; 0.008240 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 12 time spent: 0:0:0 [0.544626s total; 0.045386 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 498 time spent: 0:0:0 [0.180151s total; 0.000362 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 196 time spent: 0:0:0 [0.304641s total; 0.001554 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 437 time spent: 0:0:0 [0.116825s total; 0.000267 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 2863 time spent: 0:0:0 [0.391151s total; 0.000137 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 437 time spent: 0:0:0 [0.036687s total; 0.000084 per start]
tfg_graph_get_vars_written_on_edge: num_starts 437 time spent: 0:0:0 [0.017167s total; 0.000039 per start]
cg_with_rank_add_CE_at_pc: num_starts 118 time spent: 0:0:0 [0.471536s total; 0.003996 per start]
graph_with_ce_add_CE_at_pc: num_starts 63 time spent: 0:0:0 [0.002100s total; 0.000033 per start]
graph_with_guessing_add_CE_at_pc: num_starts 118 time spent: 0:0:0 [0.469041s total; 0.003975 per start]
point_set_add_point_using_CE: num_starts 446 time spent: 0:0:0 [0.140964s total; 0.000316 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 446 time spent: 0:0:0 [0.142285s total; 0.000319 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 83 time spent: 0:0:0 [0.304614s total; 0.003670 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 83 time spent: 0:0:0 [0.159921s total; 0.001927 per start]
expr_label_memlabels_using_memlabel_map: num_starts 4056 time spent: 0:0:0 [0.128714s total; 0.000032 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 1132 time spent: 0:0:0 [0.083604s total; 0.000074 per start]
expr_simplify_solver: num_starts 5097 time spent: 0:0:0 [0.680438s total; 0.000133 per start]
expr_simplify_syntactic: num_starts 5147 time spent: 0:0:0 [0.939267s total; 0.000182 per start]
expr_simplify_select_on_store: num_starts 265 time spent: 0:0:0 [0.855517s total; 0.003228 per start]
expr_simplify_using_lhs_set_helper: num_starts 544 time spent: 0:0:1 [1.807685s total; 0.003323 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 8365 time spent: 0:0:1 [1.796282s total; 0.000215 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 7853 time spent: 0:0:0 [0.035471s total; 0.000005 per start]
expr_simplify_eq: num_starts 731 time spent: 0:0:0 [0.011505s total; 0.000016 per start]
expr_simplify_or: num_starts 10 time spent: 0:0:0 [0.000028s total; 0.000003 per start]
expr_simplify_and: num_starts 871 time spent: 0:0:0 [0.006461s total; 0.000007 per start]
expr_simplify_andnot1: num_starts 104 time spent: 0:0:0 [0.001623s total; 0.000016 per start]
expr_simplify_not: num_starts 114 time spent: 0:0:0 [0.000451s total; 0.000004 per start]
expr_simplify_implies: num_starts 130 time spent: 0:0:0 [0.001565s total; 0.000012 per start]
expr_simplify_ite: num_starts 6 time spent: 0:0:0 [0.000735s total; 0.000122 per start]
canonicalize_expr_tree: num_starts 2186 time spent: 0:0:0 [0.118271s total; 0.000054 per start]
expr_simplify_memalloc_using_memlabel: num_starts 166 time spent: 0:0:0 [0.000595s total; 0.000004 per start]
expr_simplify_select_on_store_visit_function: num_starts 265 time spent: 0:0:0 [0.848163s total; 0.003201 per start]
get_arithmetic_addsub_atoms: num_starts 5880 time spent: 0:0:0 [0.003887s total; 0.000001 per start]
expr_linear_relation_holds_visit: num_starts 545 time spent: 0:0:0 [0.005955s total; 0.000011 per start]
expr_is_consts_struct_constant: num_starts 364 time spent: 0:0:0 [0.000267s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 8007 time spent: 0:0:1 [1.709990s total; 0.000214 per start]
expr_do_simplify_helper_cache: num_starts 8007 time spent: 0:0:0 [0.010071s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 36 time spent: 0:0:0 [0.000012s total; 0.000000 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 36 time spent: 0:0:0 [0.000252s total; 0.000007 per start]
evaluate_expr_and_check_bounds: num_starts 2622 time spent: 0:0:0 [0.474150s total; 0.000181 per start]
array_constant_equals: num_starts 8536 time spent: 0:0:0 [0.011873s total; 0.000001 per start]
sort_dfa_canonical: num_starts 343906 time spent: 0:0:1 [1.367021s total; 0.000004 per start]
expr_convert_to_iexpr: num_starts 1063 time spent: 0:0:0 [0.428731s total; 0.000403 per start]
combo_dfa_xfer_and_meet: num_starts 24 time spent: 0:0:0 [0.088758s total; 0.003698 per start]
alias_val_xfer_and_meet: num_starts 24 time spent: 0:0:0 [0.061308s total; 0.002554 per start]
get_sprel_map_from_avail_exprs: num_starts 38 time spent: 0:0:0 [0.002602s total; 0.000068 per start]
update_memlabels_for_memslot_locs: num_starts 12 time spent: 0:0:0 [0.000048s total; 0.000004 per start]
populate_gen_and_kill_sets_for_edge: num_starts 92 time spent: 0:0:0 [0.020620s total; 0.000224 per start]
compute_simplified_loc_exprs_for_edge: num_starts 242 time spent: 0:0:0 [0.066507s total; 0.000275 per start]
compute_locs_definitely_written_on_edge: num_starts 92 time spent: 0:0:0 [0.000194s total; 0.000002 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 31 time spent: 0:0:0 [0.006407s total; 0.000207 per start]
edge_update_memlabel_map_for_mlvars: num_starts 46 time spent: 0:0:0 [0.007807s total; 0.000170 per start]
add_new_locs_based_on_edge: num_starts 24 time spent: 0:0:0 [0.047922s total; 0.001997 per start]
expand_locset_to_include_slots_for_memmask: num_starts 53 time spent: 0:0:0 [0.000182s total; 0.000003 per start]
total: num_starts 1 time spent: 0:0:42 [42.133883s total; 42.133883 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 12.30s.
ftmap_run_pointsto_analysis.: 0.132424s (num_starts 2; 0.0662s/start)s.
EQ Time after pointsto analysis: 12.1692s.
EQ Time after pointsto analysis and smt_query: 1.79554s.
EQ Time after pointsto analysis and smt_query and bv-solve: 1.74704s.
Equivalence proof found. The programs are equivalent.
