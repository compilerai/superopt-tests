==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x10 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x6)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x10 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x6)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1500147/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x206 (= true false)))
 (let (($x207 (= $x206 true)))
 (let ((?x44 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x190 (= ?x44 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x179 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x180 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x180 (_ bv1 32))))
 (let (($x191 (=> $x186 $x190)))
 (let (($x187 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x188 (= $x186 $x187)))
 (let (($x8 (= false false)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x185 (=> $x181 $x8)))
 (let (($x183 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x184 (= $x181 $x183)))
 (let (($x194 (and (and (and $x184 $x185) $x188) $x191)))
 (let (($x195 (= $x194 true)))
 (let ((?x39 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x172 (= ?x39 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x161 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x162 (ite $x161 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x162 (_ bv1 32))))
 (let (($x173 (=> $x168 $x172)))
 (let (($x169 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x170 (= $x168 $x169)))
 (let (($x163 (= ?x162 (_ bv0 32))))
 (let (($x167 (=> $x163 $x8)))
 (let (($x165 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x166 (= $x163 $x165)))
 (let (($x176 (and (and (and $x166 $x167) $x170) $x173)))
 (let (($x177 (= $x176 true)))
 (let (($x157 (forall ((input.ind-%var73X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var73X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x148))))
 (let ((?x24 (input.spec-%var-x-0.1.1 input.ind-%var73X)))
 (let (($x114 (input.spec-%var-x-0.0.1 input.ind-%var73X)))
 (=> $x114 (= ?x24 ?x154))))))))
 ))
 (let (($x125 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-0.0.1 input.ind-%var72X)))
 (= $x114 (and (bvsle (_ bv0 32) input.ind-%var72X) (bvslt input.ind-%var72X (_ bv10 32))))))
 ))
 (let (($x158 (and $x125 $x157)))
 (let (($x159 (= $x158 true)))
 (let (($x103 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x109 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x103)))))))
 (let (($x97 (= $x109 true)))
 (let (($x98 (= $x97 true)))
 (let (($x110 (= $x98 true)))
 (let ((?x80 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x88 (bvugt ?x80 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x80 (_ bv3 32)))))
 (let (($x94 (=> (bvule ?x80 (bvsub (bvadd ?x80 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x88)))))))
 (let (($x82 (= $x94 true)))
 (let (($x83 (= $x82 true)))
 (let (($x95 (= $x83 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x70)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x53 $x68)))
 (let (($x72 (and $x69 $x71)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x52 $x72)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x74 (and $x66 $x73)))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x42 (concat ?x40 (concat ?x37 ?x15)))))
 (let (($x29 (= ?x6 input.dst.llvm-%x)))
 (let (($x22 (= $x29 true)))
 (let (($x50 (= $x22 true)))
 (let (($x78 (and $x50 $x77)))
 (let (($x96 (and $x78 $x95)))
 (let (($x111 (and $x96 $x110)))
 (let (($x160 (and $x111 $x159)))
 (let (($x178 (and $x160 $x177)))
 (let (($x196 (and $x178 $x195)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x197 (and $x10 $x196)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x198 (and $x7 $x197)))
 (let (($x35 (= ?x39 input.spec-%var-x0-0.L2%10%d)))
 (let (($x199 (and $x35 $x198)))
 (let (($x5 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x200 (and $x5 $x199)))
 (let (($x201 (and $x8 $x200)))
 (let ((?x46 (bvadd ?x39 ?x44)))
 (let (($x41 (= ?x46 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x202 (and $x41 $x201)))
 (let (($x47 (= ?x44 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x203 (and $x47 $x202)))
 (let (($x20 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x204 (and $x20 $x203)))
 (let (($x205 (and $x8 $x204)))
 (let (($x208 (=> $x205 $x207)))
 (not $x208))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x206 (= true false)))
 (let (($x207 (= $x206 true)))
 (let ((?x44 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x190 (= ?x44 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x179 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x180 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x180 (_ bv1 32))))
 (let (($x191 (=> $x186 $x190)))
 (let (($x187 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x188 (= $x186 $x187)))
 (let (($x8 (= false false)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x185 (=> $x181 $x8)))
 (let (($x183 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x184 (= $x181 $x183)))
 (let (($x194 (and (and (and $x184 $x185) $x188) $x191)))
 (let (($x195 (= $x194 true)))
 (let ((?x39 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x172 (= ?x39 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x161 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x162 (ite $x161 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x162 (_ bv1 32))))
 (let (($x173 (=> $x168 $x172)))
 (let (($x169 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x170 (= $x168 $x169)))
 (let (($x163 (= ?x162 (_ bv0 32))))
 (let (($x167 (=> $x163 $x8)))
 (let (($x165 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x166 (= $x163 $x165)))
 (let (($x176 (and (and (and $x166 $x167) $x170) $x173)))
 (let (($x177 (= $x176 true)))
 (let (($x157 (forall ((input.ind-%var73X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var73X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x148))))
 (let ((?x24 (input.spec-%var-x-0.1.1 input.ind-%var73X)))
 (let (($x114 (input.spec-%var-x-0.0.1 input.ind-%var73X)))
 (=> $x114 (= ?x24 ?x154))))))))
 ))
 (let (($x125 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-0.0.1 input.ind-%var72X)))
 (= $x114 (and (bvsle (_ bv0 32) input.ind-%var72X) (bvslt input.ind-%var72X (_ bv10 32))))))
 ))
 (let (($x158 (and $x125 $x157)))
 (let (($x159 (= $x158 true)))
 (let (($x103 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x109 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x103)))))))
 (let (($x97 (= $x109 true)))
 (let (($x98 (= $x97 true)))
 (let (($x110 (= $x98 true)))
 (let ((?x80 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x88 (bvugt ?x80 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x80 (_ bv3 32)))))
 (let (($x94 (=> (bvule ?x80 (bvsub (bvadd ?x80 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x88)))))))
 (let (($x82 (= $x94 true)))
 (let (($x83 (= $x82 true)))
 (let (($x95 (= $x83 true)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x70)))
 (let ((?x67 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x67)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x53 $x68)))
 (let (($x72 (and $x69 $x71)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x52 $x72)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x74 (and $x66 $x73)))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x42 (concat ?x40 (concat ?x37 ?x15)))))
 (let (($x29 (= ?x6 input.dst.llvm-%x)))
 (let (($x22 (= $x29 true)))
 (let (($x50 (= $x22 true)))
 (let (($x78 (and $x50 $x77)))
 (let (($x96 (and $x78 $x95)))
 (let (($x111 (and $x96 $x110)))
 (let (($x160 (and $x111 $x159)))
 (let (($x178 (and $x160 $x177)))
 (let (($x196 (and $x178 $x195)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x197 (and $x10 $x196)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x198 (and $x7 $x197)))
 (let (($x35 (= ?x39 input.spec-%var-x0-0.L2%10%d)))
 (let (($x199 (and $x35 $x198)))
 (let (($x5 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x200 (and $x5 $x199)))
 (let (($x201 (and $x8 $x200)))
 (let ((?x46 (bvadd ?x39 ?x44)))
 (let (($x41 (= ?x46 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x202 (and $x41 $x201)))
 (let (($x47 (= ?x44 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x203 (and $x47 $x202)))
 (let (($x20 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x204 (and $x20 $x203)))
 (let (($x205 (and $x8 $x204)))
 (let (($x208 (=> $x205 $x207)))
 (not $x208))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5fffaaa4)
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5fffaaa7)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x5ffffffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5fffaaa4)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32)
    #x0000002d)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x5fffaaa4) #xfc
    (ite (= x!0 #x5fffaaa6) #xff
    (ite (= x!0 #x5fffaaa5) #xff
    (ite (= x!0 #x5fffaaa7) #x5f
      #x00)))))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x0000000a x!0)
              (ite (bvule #x0000000b x!0) #x0000000b #x0000000a)
              #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x5fffaaa7)
                                     (k!2 #x5fffaaa6)
                                     (k!2 #x5fffaaa5)
                                     (k!2 #x5fffaaa4)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x5fffaaa7)
                                     (k!2 #x5fffaaa6)
                                     (k!2 #x5fffaaa5)
                                     (k!2 #x5fffaaa4)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x5fffaaa7)
                                     (k!2 #x5fffaaa6)
                                     (k!2 #x5fffaaa5)
                                     (k!2 #x5fffaaa4)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x5fffaaa7)
                                     (k!2 #x5fffaaa6)
                                     (k!2 #x5fffaaa5)
                                     (k!2 #x5fffaaa4))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-%var-x-0.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun input.spec-%var-x-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.0.1!4 (k!3 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000078)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000007b)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xfffffffe)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000078)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32)
    #x0000002d)
  (define-fun input.spec-%var-x-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      (not (or (not (bvsle #x00000000 x!0)) (bvsle #x0000000a x!0))))))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000007b) #xff
    (ite (= x!0 #x00000078) #xfe
    (ite (= x!0 #x0000007a) #xff
    (ite (= x!0 #x00000079) #xff
      #x00)))))
  (define-fun input.spec-%var-x-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000007b)
                                     (k!2 #x0000007a)
                                     (k!2 #x00000079)
                                     (k!2 #x00000078)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000007b)
                                     (k!2 #x0000007a)
                                     (k!2 #x00000079)
                                     (k!2 #x00000078)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000007b)
                                     (k!2 #x0000007a)
                                     (k!2 #x00000079)
                                     (k!2 #x00000078)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000007b)
                                     (k!2 #x0000007a)
                                     (k!2 #x00000079)
                                     (k!2 #x00000078))))))
        (concat a!1 a!2 a!3 a!4)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1500147/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x131 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x131 (_ bv1 32))))
 (let (($x134 (= ?x131 (_ bv0 32))))
 (let (($x226 (or $x134 $x120)))
 (let (($x209 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x26 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x26 (_ bv1 32))))
 (let (($x227 (and $x128 $x226)))
 (let (($x81 (= ?x26 (_ bv0 32))))
 (let (($x228 (or $x81 $x227)))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x31 (and true $x111)))
 (let ((?x34 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x107 (= (bvand ?x34 (_ bv4294967292 32)) ?x34)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x34 (bvsub ?x34 (_ bv4 32))) (bvult ?x34 (bvsub ?x34 (_ bv4 32))))))
 (let (($x105 (and true $x104)))
 (let (($x100 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x117 (and (and (and $x100 $x105) $x107) $x31)))
 (let (($x121 (and $x100 $x117)))
 (let (($x229 (=> $x121 $x228)))
 (let (($x230 (= $x229 true)))
 (let (($x231 (= $x230 true)))
 (let ((?x29 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x18 (= ?x29 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x210 (=> $x120 $x18)))
 (let (($x141 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x127 (= $x120 $x141)))
 (let (($x10 (= false false)))
 (let (($x119 (=> $x134 $x10)))
 (let (($x140 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x113 (= $x134 $x140)))
 (let (($x213 (and (and (and $x113 $x119) $x127) $x210)))
 (let (($x214 (= $x213 true)))
 (let ((?x58 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x129 (= ?x58 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x130 (=> $x128 $x129)))
 (let (($x112 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x116 (= $x128 $x112)))
 (let (($x139 (and (and (= $x81 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x81 $x10)) $x116)))
 (let (($x135 (and $x139 $x130)))
 (let (($x136 (= $x135 true)))
 (let (($x205 (forall ((input.ind-%var122X (_ BitVec 32)) )(let (($x163 (input.spec-%var-x-0.0.1 input.ind-%var122X)))
 (= $x163 (and (bvsle (_ bv0 32) input.ind-%var122X) (bvslt input.ind-%var122X (_ bv10 32))))))
 ))
 (let (($x191 (forall ((input.ind-%var123X (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul input.ind-%var123X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x184))))
 (let ((?x50 (input.spec-%var-x-0.1.1 input.ind-%var123X)))
 (let (($x163 (input.spec-%var-x-0.0.1 input.ind-%var123X)))
 (=> $x163 (= ?x50 ?x193))))))))
 ))
 (let (($x206 (and $x191 $x205)))
 (let (($x207 (= $x206 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x155 (concat ?x148 (concat ?x150 ?x153)))))
 (let (($x157 (= ?x156 input.dst.llvm-%x)))
 (let (($x158 (= $x157 true)))
 (let (($x159 (= $x158 true)))
 (let (($x123 (= $x121 true)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x89)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x93 $x87)))
 (let (($x91 (and $x88 $x90)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x71 $x91)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x76)))))))
 (let (($x94 (and $x85 $x92)))
 (let (($x82 (= $x94 true)))
 (let (($x83 (= $x82 true)))
 (let (($x95 (= $x83 true)))
 (let (($x24 (and $x95 $x125)))
 (let (($x143 (and $x24 $x125)))
 (let (($x160 (and $x143 $x159)))
 (let (($x208 (and $x160 $x207)))
 (let (($x132 (and $x208 $x136)))
 (let (($x215 (and $x132 $x214)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x216 (and $x68 $x215)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x217 (and $x53 $x216)))
 (let (($x66 (= ?x58 input.spec-%var-x0-0.L2%10%d)))
 (let (($x218 (and $x66 $x217)))
 (let (($x63 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x219 (and $x63 $x218)))
 (let (($x220 (and $x10 $x219)))
 (let ((?x59 (bvadd ?x58 ?x29)))
 (let (($x60 (= ?x59 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x221 (and $x60 $x220)))
 (let (($x65 (= ?x29 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x222 (and $x65 $x221)))
 (let (($x6 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x223 (and $x6 $x222)))
 (let (($x224 (and $x10 $x223)))
 (let (($x42 (bvugt ?x34 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x34 (_ bv3 32)))))
 (let (($x15 (=> (bvule ?x34 (bvsub (bvadd ?x34 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x42)))))))
 (let (($x48 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x48)))))))
 (let (($x21 (and $x36 $x15)))
 (let (($x225 (and $x21 $x224)))
 (let (($x232 (=> $x225 $x231)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x131 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x131 (_ bv1 32))))
 (let (($x134 (= ?x131 (_ bv0 32))))
 (let (($x226 (or $x134 $x120)))
 (let (($x209 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x26 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x26 (_ bv1 32))))
 (let (($x227 (and $x128 $x226)))
 (let (($x81 (= ?x26 (_ bv0 32))))
 (let (($x228 (or $x81 $x227)))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x31 (and true $x111)))
 (let ((?x34 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x107 (= (bvand ?x34 (_ bv4294967292 32)) ?x34)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x34 (bvsub ?x34 (_ bv4 32))) (bvult ?x34 (bvsub ?x34 (_ bv4 32))))))
 (let (($x105 (and true $x104)))
 (let (($x100 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x117 (and (and (and $x100 $x105) $x107) $x31)))
 (let (($x121 (and $x100 $x117)))
 (let (($x229 (=> $x121 $x228)))
 (let (($x230 (= $x229 true)))
 (let (($x231 (= $x230 true)))
 (let ((?x29 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x18 (= ?x29 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x210 (=> $x120 $x18)))
 (let (($x141 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x127 (= $x120 $x141)))
 (let (($x10 (= false false)))
 (let (($x119 (=> $x134 $x10)))
 (let (($x140 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x113 (= $x134 $x140)))
 (let (($x213 (and (and (and $x113 $x119) $x127) $x210)))
 (let (($x214 (= $x213 true)))
 (let ((?x58 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x129 (= ?x58 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x130 (=> $x128 $x129)))
 (let (($x112 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x116 (= $x128 $x112)))
 (let (($x139 (and (and (= $x81 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x81 $x10)) $x116)))
 (let (($x135 (and $x139 $x130)))
 (let (($x136 (= $x135 true)))
 (let (($x205 (forall ((input.ind-%var122X (_ BitVec 32)) )(let (($x163 (input.spec-%var-x-0.0.1 input.ind-%var122X)))
 (= $x163 (and (bvsle (_ bv0 32) input.ind-%var122X) (bvslt input.ind-%var122X (_ bv10 32))))))
 ))
 (let (($x191 (forall ((input.ind-%var123X (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul input.ind-%var123X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x184))))
 (let ((?x50 (input.spec-%var-x-0.1.1 input.ind-%var123X)))
 (let (($x163 (input.spec-%var-x-0.0.1 input.ind-%var123X)))
 (=> $x163 (= ?x50 ?x193))))))))
 ))
 (let (($x206 (and $x191 $x205)))
 (let (($x207 (= $x206 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x155 (concat ?x148 (concat ?x150 ?x153)))))
 (let (($x157 (= ?x156 input.dst.llvm-%x)))
 (let (($x158 (= $x157 true)))
 (let (($x159 (= $x158 true)))
 (let (($x123 (= $x121 true)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x89)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x93 $x87)))
 (let (($x91 (and $x88 $x90)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x71 $x91)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x75 $x76)))))))
 (let (($x94 (and $x85 $x92)))
 (let (($x82 (= $x94 true)))
 (let (($x83 (= $x82 true)))
 (let (($x95 (= $x83 true)))
 (let (($x24 (and $x95 $x125)))
 (let (($x143 (and $x24 $x125)))
 (let (($x160 (and $x143 $x159)))
 (let (($x208 (and $x160 $x207)))
 (let (($x132 (and $x208 $x136)))
 (let (($x215 (and $x132 $x214)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x216 (and $x68 $x215)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x217 (and $x53 $x216)))
 (let (($x66 (= ?x58 input.spec-%var-x0-0.L2%10%d)))
 (let (($x218 (and $x66 $x217)))
 (let (($x63 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x219 (and $x63 $x218)))
 (let (($x220 (and $x10 $x219)))
 (let ((?x59 (bvadd ?x58 ?x29)))
 (let (($x60 (= ?x59 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x221 (and $x60 $x220)))
 (let (($x65 (= ?x29 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x222 (and $x65 $x221)))
 (let (($x6 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x223 (and $x6 $x222)))
 (let (($x224 (and $x10 $x223)))
 (let (($x42 (bvugt ?x34 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x34 (_ bv3 32)))))
 (let (($x15 (=> (bvule ?x34 (bvsub (bvadd ?x34 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x42)))))))
 (let (($x48 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x48)))))))
 (let (($x21 (and $x36 $x15)))
 (let (($x225 (and $x21 $x224)))
 (let (($x232 (=> $x225 $x231)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1500147/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x240)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x243)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x162 (concat ?x177 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x115 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x42 (bvadd ?x115 (_ bv3 32))))
 (let ((?x236 (concat (select input.dst.llvm-mem ?x42) (concat ?x30 ?x162))))
 (let ((?x246 (bvadd ?x236 ?x245)))
 (let ((?x56 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x63 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x64 (bvadd ?x63 ?x56)))
 (let (($x247 (= ?x64 ?x246)))
 (let (($x248 (= $x247 true)))
 (let (($x249 (= $x248 true)))
 (let (($x161 (= ?x56 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x70 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x71 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x71 (_ bv1 32))))
 (let (($x165 (=> $x93 $x161)))
 (let (($x41 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x69 (= $x93 $x41)))
 (let (($x37 (= false false)))
 (let (($x231 (= ?x71 (_ bv0 32))))
 (let (($x49 (=> $x231 $x37)))
 (let (($x233 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x54 (= $x231 $x233)))
 (let (($x198 (and (and (and $x54 $x49) $x69) $x165)))
 (let (($x166 (= $x198 true)))
 (let (($x224 (= ?x63 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x77 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x80 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x80 (_ bv1 32))))
 (let (($x225 (=> $x85 $x224)))
 (let (($x221 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x222 (= $x85 $x221)))
 (let (($x216 (= ?x80 (_ bv0 32))))
 (let (($x220 (=> $x216 $x37)))
 (let (($x218 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x219 (= $x216 $x218)))
 (let (($x228 (and (and (and $x219 $x220) $x222) $x225)))
 (let (($x229 (= $x228 true)))
 (let (($x210 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x131 (bvadd (bvmul input.ind-%var145X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x113))))
 (let ((?x59 (input.spec-%var-x-0.1.1 input.ind-%var145X)))
 (let (($x78 (input.spec-%var-x-0.0.1 input.ind-%var145X)))
 (=> $x78 (= ?x59 ?x212))))))))
 ))
 (let (($x26 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x78 (input.spec-%var-x-0.0.1 input.ind-%var144X)))
 (= $x78 (and (bvsle (_ bv0 32) input.ind-%var144X) (bvslt input.ind-%var144X (_ bv10 32))))))
 ))
 (let (($x213 (and $x26 $x210)))
 (let (($x214 (= $x213 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x184 (concat ?x181 (concat ?x192 (concat ?x180 ?x50)))))
 (let (($x186 (= ?x184 input.dst.llvm-%x)))
 (let (($x193 (= $x186 true)))
 (let (($x189 (= $x193 true)))
 (let (($x148 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x149 (and true $x148)))
 (let (($x144 (= (bvand ?x115 (_ bv4294967292 32)) ?x115)))
 (let (($x125 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x115 (bvsub ?x115 (_ bv4 32))) (bvult ?x115 (bvsub ?x115 (_ bv4 32))))))
 (let (($x24 (and true $x125)))
 (let (($x31 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x146 (and (and (and $x31 $x24) $x144) $x149)))
 (let (($x151 (and $x31 $x146)))
 (let (($x156 (= $x151 true)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x105)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x108 $x103)))
 (let (($x106 (and $x104 $x114)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x89 $x106)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x82)))))))
 (let (($x122 (and $x101 $x107)))
 (let (($x97 (= $x122 true)))
 (let (($x109 (= $x97 true)))
 (let (($x98 (= $x109 true)))
 (let (($x159 (and $x98 $x158)))
 (let (($x160 (and $x159 $x158)))
 (let (($x190 (and $x160 $x189)))
 (let (($x215 (and $x190 $x214)))
 (let (($x230 (and $x215 $x229)))
 (let (($x8 (and $x230 $x166)))
 (let (($x86 (and $x85 $x93)))
 (let (($x172 (and $x86 $x8)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x173 (and $x76 $x172)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x170 (and $x74 $x173)))
 (let (($x73 (= ?x63 input.spec-%var-x0-0.L2%10%d)))
 (let (($x175 (and $x73 $x170)))
 (let (($x68 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x174 (and $x68 $x175)))
 (let (($x168 (and $x37 $x174)))
 (let (($x52 (= ?x64 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x167 (and $x52 $x168)))
 (let (($x61 (= ?x56 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x169 (and $x61 $x167)))
 (let (($x55 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x171 (and $x55 $x169)))
 (let (($x176 (and $x37 $x171)))
 (let (($x32 (bvugt ?x115 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x43 (=> (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x32)))))))
 (let (($x25 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x14 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x25)))))))
 (let (($x39 (and $x14 $x43)))
 (let (($x195 (and $x39 $x176)))
 (let (($x250 (=> $x195 $x249)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x240)))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x243)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x162 (concat ?x177 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x115 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x42 (bvadd ?x115 (_ bv3 32))))
 (let ((?x236 (concat (select input.dst.llvm-mem ?x42) (concat ?x30 ?x162))))
 (let ((?x246 (bvadd ?x236 ?x245)))
 (let ((?x56 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x63 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x64 (bvadd ?x63 ?x56)))
 (let (($x247 (= ?x64 ?x246)))
 (let (($x248 (= $x247 true)))
 (let (($x249 (= $x248 true)))
 (let (($x161 (= ?x56 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x70 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x71 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x71 (_ bv1 32))))
 (let (($x165 (=> $x93 $x161)))
 (let (($x41 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x69 (= $x93 $x41)))
 (let (($x37 (= false false)))
 (let (($x231 (= ?x71 (_ bv0 32))))
 (let (($x49 (=> $x231 $x37)))
 (let (($x233 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x54 (= $x231 $x233)))
 (let (($x198 (and (and (and $x54 $x49) $x69) $x165)))
 (let (($x166 (= $x198 true)))
 (let (($x224 (= ?x63 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x77 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x80 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x80 (_ bv1 32))))
 (let (($x225 (=> $x85 $x224)))
 (let (($x221 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x222 (= $x85 $x221)))
 (let (($x216 (= ?x80 (_ bv0 32))))
 (let (($x220 (=> $x216 $x37)))
 (let (($x218 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x219 (= $x216 $x218)))
 (let (($x228 (and (and (and $x219 $x220) $x222) $x225)))
 (let (($x229 (= $x228 true)))
 (let (($x210 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x131 (bvadd (bvmul input.ind-%var145X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x113))))
 (let ((?x59 (input.spec-%var-x-0.1.1 input.ind-%var145X)))
 (let (($x78 (input.spec-%var-x-0.0.1 input.ind-%var145X)))
 (=> $x78 (= ?x59 ?x212))))))))
 ))
 (let (($x26 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x78 (input.spec-%var-x-0.0.1 input.ind-%var144X)))
 (= $x78 (and (bvsle (_ bv0 32) input.ind-%var144X) (bvslt input.ind-%var144X (_ bv10 32))))))
 ))
 (let (($x213 (and $x26 $x210)))
 (let (($x214 (= $x213 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x184 (concat ?x181 (concat ?x192 (concat ?x180 ?x50)))))
 (let (($x186 (= ?x184 input.dst.llvm-%x)))
 (let (($x193 (= $x186 true)))
 (let (($x189 (= $x193 true)))
 (let (($x148 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x149 (and true $x148)))
 (let (($x144 (= (bvand ?x115 (_ bv4294967292 32)) ?x115)))
 (let (($x125 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x115 (bvsub ?x115 (_ bv4 32))) (bvult ?x115 (bvsub ?x115 (_ bv4 32))))))
 (let (($x24 (and true $x125)))
 (let (($x31 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x146 (and (and (and $x31 $x24) $x144) $x149)))
 (let (($x151 (and $x31 $x146)))
 (let (($x156 (= $x151 true)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x105)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x108 $x103)))
 (let (($x106 (and $x104 $x114)))
 (let (($x89 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x89 $x106)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x82)))))))
 (let (($x122 (and $x101 $x107)))
 (let (($x97 (= $x122 true)))
 (let (($x109 (= $x97 true)))
 (let (($x98 (= $x109 true)))
 (let (($x159 (and $x98 $x158)))
 (let (($x160 (and $x159 $x158)))
 (let (($x190 (and $x160 $x189)))
 (let (($x215 (and $x190 $x214)))
 (let (($x230 (and $x215 $x229)))
 (let (($x8 (and $x230 $x166)))
 (let (($x86 (and $x85 $x93)))
 (let (($x172 (and $x86 $x8)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x173 (and $x76 $x172)))
 (let (($x74 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x170 (and $x74 $x173)))
 (let (($x73 (= ?x63 input.spec-%var-x0-0.L2%10%d)))
 (let (($x175 (and $x73 $x170)))
 (let (($x68 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x174 (and $x68 $x175)))
 (let (($x168 (and $x37 $x174)))
 (let (($x52 (= ?x64 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x167 (and $x52 $x168)))
 (let (($x61 (= ?x56 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x169 (and $x61 $x167)))
 (let (($x55 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x171 (and $x55 $x169)))
 (let (($x176 (and $x37 $x171)))
 (let (($x32 (bvugt ?x115 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x43 (=> (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x32)))))))
 (let (($x25 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x14 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x25)))))))
 (let (($x39 (and $x14 $x43)))
 (let (($x195 (and $x39 $x176)))
 (let (($x250 (=> $x195 $x249)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 149 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1500147/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x128)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x118)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x197 (concat ?x191 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x53 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x32 (bvadd ?x53 (_ bv3 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem ?x32) (concat ?x28 ?x197))))
 (let ((?x204 (bvadd ?x130 ?x202)))
 (let (($x205 (= (_ bv12 32) ?x204)))
 (let (($x136 (= $x205 true)))
 (let (($x17 (= $x136 true)))
 (let ((?x61 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x242 (= ?x61 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x94 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x82 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x82 (_ bv1 32))))
 (let (($x238 (=> $x234 $x242)))
 (let (($x236 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x244 (= $x234 $x236)))
 (let (($x33 (= false false)))
 (let (($x83 (= ?x82 (_ bv0 32))))
 (let (($x162 (=> $x83 $x33)))
 (let (($x177 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x199 (= $x83 $x177)))
 (let (($x240 (and (and (and $x199 $x162) $x244) $x238)))
 (let (($x243 (= $x240 true)))
 (let ((?x68 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x169 (= ?x68 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x86 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x100 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x92 (bvuge ?x100 (_ bv1 32))))
 (let (($x171 (=> $x92 $x169)))
 (let (($x174 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x168 (= $x92 $x174)))
 (let (($x8 (= ?x100 (_ bv0 32))))
 (let (($x175 (=> $x8 $x33)))
 (let (($x173 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x170 (= $x8 $x173)))
 (let (($x235 (and (and (and $x170 $x175) $x168) $x171)))
 (let (($x178 (= $x235 true)))
 (let (($x161 (forall ((input.ind-%var165X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var165X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x232))))
 (let ((?x63 (input.spec-%var-x-0.1.1 input.ind-%var165X)))
 (let (($x90 (input.spec-%var-x-0.0.1 input.ind-%var165X)))
 (=> $x90 (= ?x63 ?x69))))))))
 ))
 (let (($x142 (forall ((input.ind-%var164X (_ BitVec 32)) )(let (($x90 (input.spec-%var-x-0.0.1 input.ind-%var164X)))
 (= $x90 (and (bvsle (_ bv0 32) input.ind-%var164X) (bvslt input.ind-%var164X (_ bv10 32))))))
 ))
 (let (($x165 (and $x142 $x161)))
 (let (($x198 (= $x165 true)))
 (let ((?x184 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x208 (concat ?x206 (concat ?x78 (concat ?x193 ?x184)))))
 (let (($x209 (= ?x208 input.dst.llvm-%x)))
 (let (($x26 (= $x209 true)))
 (let (($x59 (= $x26 true)))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x160 (and true $x159)))
 (let (($x146 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x145 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x53 (bvsub ?x53 (_ bv4 32))) (bvult ?x53 (bvsub ?x53 (_ bv4 32))))))
 (let (($x148 (and true $x145)))
 (let (($x144 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x181 (and (and (and $x144 $x148) $x146) $x160)))
 (let (($x188 (and $x144 $x181)))
 (let (($x185 (= $x188 true)))
 (let (($x192 (= $x185 true)))
 (let (($x179 (= $x192 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x111)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x97 $x98)))
 (let (($x121 (and $x110 $x31)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x101 $x121)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x103)))))))
 (let (($x123 (and $x122 $x117)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x24 (= $x125 true)))
 (let (($x180 (and $x24 $x179)))
 (let (($x50 (and $x180 $x179)))
 (let (($x133 (and $x50 $x59)))
 (let (($x166 (and $x133 $x198)))
 (let (($x30 (and $x166 $x178)))
 (let (($x245 (and $x30 $x243)))
 (let (($x95 (and $x92 $x83)))
 (let (($x246 (and $x95 $x245)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x247 (and $x93 $x246)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x248 (and $x70 $x247)))
 (let (($x80 (= ?x68 input.spec-%var-x0-0.L2%10%d)))
 (let (($x249 (and $x80 $x248)))
 (let (($x76 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x250 (and $x76 $x249)))
 (let (($x251 (and $x33 $x250)))
 (let ((?x72 (bvadd ?x68 ?x61)))
 (let (($x84 (= ?x72 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x79 (and $x84 $x251)))
 (let (($x52 (= ?x61 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x57 (and $x52 $x79)))
 (let (($x60 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x44 (and $x60 $x57)))
 (let (($x164 (and $x33 $x44)))
 (let (($x9 (bvugt ?x53 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x29 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x9)))))))
 (let (($x11 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x27 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x11)))))))
 (let (($x7 (and $x27 $x29)))
 (let (($x87 (and $x7 $x164)))
 (let (($x132 (=> $x87 $x17)))
 (not $x132))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x128)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x118)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x197 (concat ?x191 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x53 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x32 (bvadd ?x53 (_ bv3 32))))
 (let ((?x130 (concat (select input.dst.llvm-mem ?x32) (concat ?x28 ?x197))))
 (let ((?x204 (bvadd ?x130 ?x202)))
 (let (($x205 (= (_ bv12 32) ?x204)))
 (let (($x136 (= $x205 true)))
 (let (($x17 (= $x136 true)))
 (let ((?x61 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x242 (= ?x61 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x94 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x82 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x82 (_ bv1 32))))
 (let (($x238 (=> $x234 $x242)))
 (let (($x236 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x244 (= $x234 $x236)))
 (let (($x33 (= false false)))
 (let (($x83 (= ?x82 (_ bv0 32))))
 (let (($x162 (=> $x83 $x33)))
 (let (($x177 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x199 (= $x83 $x177)))
 (let (($x240 (and (and (and $x199 $x162) $x244) $x238)))
 (let (($x243 (= $x240 true)))
 (let ((?x68 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x169 (= ?x68 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x86 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x100 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x92 (bvuge ?x100 (_ bv1 32))))
 (let (($x171 (=> $x92 $x169)))
 (let (($x174 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x168 (= $x92 $x174)))
 (let (($x8 (= ?x100 (_ bv0 32))))
 (let (($x175 (=> $x8 $x33)))
 (let (($x173 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x170 (= $x8 $x173)))
 (let (($x235 (and (and (and $x170 $x175) $x168) $x171)))
 (let (($x178 (= $x235 true)))
 (let (($x161 (forall ((input.ind-%var165X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var165X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x232))))
 (let ((?x63 (input.spec-%var-x-0.1.1 input.ind-%var165X)))
 (let (($x90 (input.spec-%var-x-0.0.1 input.ind-%var165X)))
 (=> $x90 (= ?x63 ?x69))))))))
 ))
 (let (($x142 (forall ((input.ind-%var164X (_ BitVec 32)) )(let (($x90 (input.spec-%var-x-0.0.1 input.ind-%var164X)))
 (= $x90 (and (bvsle (_ bv0 32) input.ind-%var164X) (bvslt input.ind-%var164X (_ bv10 32))))))
 ))
 (let (($x165 (and $x142 $x161)))
 (let (($x198 (= $x165 true)))
 (let ((?x184 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x208 (concat ?x206 (concat ?x78 (concat ?x193 ?x184)))))
 (let (($x209 (= ?x208 input.dst.llvm-%x)))
 (let (($x26 (= $x209 true)))
 (let (($x59 (= $x26 true)))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x160 (and true $x159)))
 (let (($x146 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x145 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x53 (bvsub ?x53 (_ bv4 32))) (bvult ?x53 (bvsub ?x53 (_ bv4 32))))))
 (let (($x148 (and true $x145)))
 (let (($x144 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x181 (and (and (and $x144 $x148) $x146) $x160)))
 (let (($x188 (and $x144 $x181)))
 (let (($x185 (= $x188 true)))
 (let (($x192 (= $x185 true)))
 (let (($x179 (= $x192 true)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x111)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (and $x97 $x98)))
 (let (($x121 (and $x110 $x31)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x101 $x121)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x122 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x103)))))))
 (let (($x123 (and $x122 $x117)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x24 (= $x125 true)))
 (let (($x180 (and $x24 $x179)))
 (let (($x50 (and $x180 $x179)))
 (let (($x133 (and $x50 $x59)))
 (let (($x166 (and $x133 $x198)))
 (let (($x30 (and $x166 $x178)))
 (let (($x245 (and $x30 $x243)))
 (let (($x95 (and $x92 $x83)))
 (let (($x246 (and $x95 $x245)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x247 (and $x93 $x246)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x248 (and $x70 $x247)))
 (let (($x80 (= ?x68 input.spec-%var-x0-0.L2%10%d)))
 (let (($x249 (and $x80 $x248)))
 (let (($x76 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x250 (and $x76 $x249)))
 (let (($x251 (and $x33 $x250)))
 (let ((?x72 (bvadd ?x68 ?x61)))
 (let (($x84 (= ?x72 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x79 (and $x84 $x251)))
 (let (($x52 (= ?x61 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x57 (and $x52 $x79)))
 (let (($x60 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x44 (and $x60 $x57)))
 (let (($x164 (and $x33 $x44)))
 (let (($x9 (bvugt ?x53 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x29 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x9)))))))
 (let (($x11 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x25 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x25)))
 (let (($x27 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x35 $x11)))))))
 (let (($x7 (and $x27 $x29)))
 (let (($x87 (and $x7 $x164)))
 (let (($x132 (=> $x87 $x17)))
 (not $x132))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 149 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1500147/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x217)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x219)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x131 (concat ?x213 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x48 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x9 (bvadd ?x48 (_ bv3 32))))
 (let ((?x221 (concat (select input.dst.llvm-mem ?x9) (concat ?x211 ?x131))))
 (let ((?x141 (bvadd ?x221 ?x227)))
 (let (($x137 (= (_ bv45 32) ?x141)))
 (let (($x140 (= $x137 true)))
 (let (($x223 (= $x140 true)))
 (let ((?x67 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x126 (= ?x67 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x87 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x129 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x129 (_ bv1 32))))
 (let (($x112 (=> $x197 $x126)))
 (let (($x10 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x130 (= $x197 $x10)))
 (let (($x6 (= false false)))
 (let (($x203 (= ?x129 (_ bv0 32))))
 (let (($x163 (=> $x203 $x6)))
 (let (($x51 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x191 (= $x203 $x51)))
 (let (($x116 (and (and (and $x191 $x163) $x130) $x112)))
 (let (($x128 (= $x116 true)))
 (let ((?x76 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x249 (= ?x76 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x95 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x107 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x107 (_ bv1 32))))
 (let (($x250 (=> $x245 $x249)))
 (let (($x246 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x247 (= $x245 $x246)))
 (let (($x108 (= ?x107 (_ bv0 32))))
 (let (($x243 (=> $x108 $x6)))
 (let (($x238 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x240 (= $x108 $x238)))
 (let (($x57 (and (and (and $x240 $x243) $x247) $x250)))
 (let (($x44 (= $x57 true)))
 (let (($x236 (forall ((input.ind-%var185X (_ BitVec 32)) )(let ((?x195 (bvadd (bvmul input.ind-%var185X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem ?x195))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv2 32))) ?x235))))
 (let ((?x72 (input.spec-%var-x-0.1.1 input.ind-%var185X)))
 (let (($x88 (input.spec-%var-x-0.0.1 input.ind-%var185X)))
 (=> $x88 (= ?x72 ?x162))))))))
 ))
 (let (($x229 (forall ((input.ind-%var184X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-0.0.1 input.ind-%var184X)))
 (= $x88 (and (bvsle (_ bv0 32) input.ind-%var184X) (bvslt input.ind-%var184X (_ bv10 32))))))
 ))
 (let (($x244 (and $x229 $x236)))
 (let (($x237 (= $x244 true)))
 (let ((?x193 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x62 (concat ?x26 (concat ?x189 ?x193)))))
 (let (($x113 (= ?x90 input.dst.llvm-%x)))
 (let (($x119 (= $x113 true)))
 (let (($x134 (= $x119 true)))
 (let (($x188 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x185 (and true $x188)))
 (let (($x157 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x183 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x48 (bvsub ?x48 (_ bv4 32))) (bvult ?x48 (bvsub ?x48 (_ bv4 32))))))
 (let (($x156 (and true $x183)))
 (let (($x145 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x180 (and (and (and $x145 $x156) $x157) $x185)))
 (let (($x50 (and $x145 $x180)))
 (let (($x187 (= $x50 true)))
 (let (($x201 (= $x187 true)))
 (let (($x206 (= $x201 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x124)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x31 $x117)))
 (let (($x24 (and $x123 $x125)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x104 $x24)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x99)))))))
 (let (($x143 (and $x111 $x150)))
 (let (($x144 (= $x143 true)))
 (let (($x155 (= $x144 true)))
 (let (($x153 (= $x155 true)))
 (let (($x190 (and $x153 $x206)))
 (let (($x58 (and $x190 $x206)))
 (let (($x120 (and $x58 $x134)))
 (let (($x241 (and $x120 $x237)))
 (let (($x164 (and $x241 $x44)))
 (let (($x118 (and $x164 $x128)))
 (let (($x202 (and $x108 $x118)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x204 (and $x83 $x202)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x205 (and $x94 $x204)))
 (let (($x100 (= ?x76 input.spec-%var-x0-0.L2%10%d)))
 (let (($x136 (and $x100 $x205)))
 (let (($x93 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x17 (and $x93 $x136)))
 (let (($x132 (and $x6 $x17)))
 (let ((?x77 (bvadd ?x76 ?x67)))
 (let (($x85 (= ?x77 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x65 (and $x85 $x132)))
 (let (($x74 (= ?x67 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x91 (and $x74 $x65)))
 (let (($x52 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x64 (and $x52 $x91)))
 (let (($x20 (and $x6 $x64)))
 (let (($x21 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x60 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x21)))))))
 (let (($x34 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x12 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x34)))))))
 (let (($x55 (and $x12 $x60)))
 (let (($x47 (and $x55 $x20)))
 (let (($x210 (=> $x47 $x223)))
 (not $x210)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x217)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x219)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x131 (concat ?x213 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x48 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x9 (bvadd ?x48 (_ bv3 32))))
 (let ((?x221 (concat (select input.dst.llvm-mem ?x9) (concat ?x211 ?x131))))
 (let ((?x141 (bvadd ?x221 ?x227)))
 (let (($x137 (= (_ bv45 32) ?x141)))
 (let (($x140 (= $x137 true)))
 (let (($x223 (= $x140 true)))
 (let ((?x67 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x126 (= ?x67 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x87 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x129 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x129 (_ bv1 32))))
 (let (($x112 (=> $x197 $x126)))
 (let (($x10 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x130 (= $x197 $x10)))
 (let (($x6 (= false false)))
 (let (($x203 (= ?x129 (_ bv0 32))))
 (let (($x163 (=> $x203 $x6)))
 (let (($x51 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x191 (= $x203 $x51)))
 (let (($x116 (and (and (and $x191 $x163) $x130) $x112)))
 (let (($x128 (= $x116 true)))
 (let ((?x76 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x249 (= ?x76 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x95 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x107 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x107 (_ bv1 32))))
 (let (($x250 (=> $x245 $x249)))
 (let (($x246 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x247 (= $x245 $x246)))
 (let (($x108 (= ?x107 (_ bv0 32))))
 (let (($x243 (=> $x108 $x6)))
 (let (($x238 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x240 (= $x108 $x238)))
 (let (($x57 (and (and (and $x240 $x243) $x247) $x250)))
 (let (($x44 (= $x57 true)))
 (let (($x236 (forall ((input.ind-%var185X (_ BitVec 32)) )(let ((?x195 (bvadd (bvmul input.ind-%var185X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem ?x195))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv2 32))) ?x235))))
 (let ((?x72 (input.spec-%var-x-0.1.1 input.ind-%var185X)))
 (let (($x88 (input.spec-%var-x-0.0.1 input.ind-%var185X)))
 (=> $x88 (= ?x72 ?x162))))))))
 ))
 (let (($x229 (forall ((input.ind-%var184X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-0.0.1 input.ind-%var184X)))
 (= $x88 (and (bvsle (_ bv0 32) input.ind-%var184X) (bvslt input.ind-%var184X (_ bv10 32))))))
 ))
 (let (($x244 (and $x229 $x236)))
 (let (($x237 (= $x244 true)))
 (let ((?x193 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x62 (concat ?x26 (concat ?x189 ?x193)))))
 (let (($x113 (= ?x90 input.dst.llvm-%x)))
 (let (($x119 (= $x113 true)))
 (let (($x134 (= $x119 true)))
 (let (($x188 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x185 (and true $x188)))
 (let (($x157 (= (bvand ?x48 (_ bv4294967292 32)) ?x48)))
 (let (($x183 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x48 (bvsub ?x48 (_ bv4 32))) (bvult ?x48 (bvsub ?x48 (_ bv4 32))))))
 (let (($x156 (and true $x183)))
 (let (($x145 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x180 (and (and (and $x145 $x156) $x157) $x185)))
 (let (($x50 (and $x145 $x180)))
 (let (($x187 (= $x50 true)))
 (let (($x201 (= $x187 true)))
 (let (($x206 (= $x201 true)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x124)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x31 $x117)))
 (let (($x24 (and $x123 $x125)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x104 $x24)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x99)))))))
 (let (($x143 (and $x111 $x150)))
 (let (($x144 (= $x143 true)))
 (let (($x155 (= $x144 true)))
 (let (($x153 (= $x155 true)))
 (let (($x190 (and $x153 $x206)))
 (let (($x58 (and $x190 $x206)))
 (let (($x120 (and $x58 $x134)))
 (let (($x241 (and $x120 $x237)))
 (let (($x164 (and $x241 $x44)))
 (let (($x118 (and $x164 $x128)))
 (let (($x202 (and $x108 $x118)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x204 (and $x83 $x202)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x205 (and $x94 $x204)))
 (let (($x100 (= ?x76 input.spec-%var-x0-0.L2%10%d)))
 (let (($x136 (and $x100 $x205)))
 (let (($x93 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x17 (and $x93 $x136)))
 (let (($x132 (and $x6 $x17)))
 (let ((?x77 (bvadd ?x76 ?x67)))
 (let (($x85 (= ?x77 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x65 (and $x85 $x132)))
 (let (($x74 (= ?x67 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x91 (and $x74 $x65)))
 (let (($x52 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x64 (and $x52 $x91)))
 (let (($x20 (and $x6 $x64)))
 (let (($x21 (bvugt ?x48 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x60 (=> (bvule ?x48 (bvsub (bvadd ?x48 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x21)))))))
 (let (($x34 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x12 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x34)))))))
 (let (($x55 (and $x12 $x60)))
 (let (($x47 (and $x55 $x20)))
 (let (($x210 (=> $x47 $x223)))
 (not $x210)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1500147/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x215 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x127 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x127 (_ bv1 32))))
 (let (($x211 (= ?x127 (_ bv0 32))))
 (let (($x186 (or $x211 $x214)))
 (let (($x138 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x135 (ite $x138 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x135 (_ bv1 32))))
 (let (($x232 (and $x202 $x186)))
 (let (($x126 (= ?x135 (_ bv0 32))))
 (let (($x69 (or $x126 $x232)))
 (let (($x201 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x206 (and true $x201)))
 (let ((?x89 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x188 (= (bvand ?x89 (_ bv4294967292 32)) ?x89)))
 (let (($x158 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x89 (bvsub ?x89 (_ bv4 32))) (bvult ?x89 (bvsub ?x89 (_ bv4 32))))))
 (let (($x160 (and true $x158)))
 (let (($x192 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x78 (and (and (and $x192 $x160) $x188) $x206)))
 (let (($x133 (and $x192 $x78)))
 (let (($x212 (=> $x133 $x69)))
 (let (($x63 (= $x212 true)))
 (let (($x228 (= $x63 true)))
 (let ((?x75 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x216 (= ?x75 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x37 (=> $x214 $x216)))
 (let (($x221 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x226 (= $x214 $x221)))
 (let (($x56 (= false false)))
 (let (($x131 (=> $x211 $x56)))
 (let (($x213 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x96 (= $x211 $x213)))
 (let (($x217 (and (and (and $x96 $x131) $x226) $x37)))
 (let (($x219 (= $x217 true)))
 (let ((?x93 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x17 (= ?x93 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x132 (=> $x202 $x17)))
 (let (($x204 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x205 (= $x202 $x204)))
 (let (($x91 (and (and (= $x126 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x126 $x56)) $x205)))
 (let (($x64 (and $x91 $x132)))
 (let (($x20 (= $x64 true)))
 (let (($x139 (forall ((input.ind-%var204X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var204X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x44))))
 (let ((?x77 (input.spec-%var-x-0.1.1 input.ind-%var204X)))
 (let (($x195 (input.spec-%var-x-0.0.1 input.ind-%var204X)))
 (=> $x195 (= ?x77 ?x51))))))))
 ))
 (let (($x239 (forall ((input.ind-%var203X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-0.0.1 input.ind-%var203X)))
 (= $x195 (and (bvsle (_ bv0 32) input.ind-%var203X) (bvslt input.ind-%var203X (_ bv10 32))))))
 ))
 (let (($x197 (and $x239 $x139)))
 (let (($x10 (= $x197 true)))
 (let ((?x207 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x225 (concat ?x54 (concat ?x120 (concat ?x90 ?x207)))))
 (let (($x233 (= ?x225 input.dst.llvm-%x)))
 (let (($x230 (= $x233 true)))
 (let (($x231 (= $x230 true)))
 (let (($x62 (= $x133 true)))
 (let (($x208 (= $x62 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x153)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x143)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x150 $x144)))
 (let (($x147 (and $x155 $x154)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x109 $x147)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x31)))))))
 (let (($x22 (and $x24 $x145)))
 (let (($x148 (= $x22 true)))
 (let (($x149 (= $x148 true)))
 (let (($x146 (= $x149 true)))
 (let (($x26 (and $x146 $x209)))
 (let (($x184 (and $x26 $x209)))
 (let (($x229 (and $x184 $x231)))
 (let (($x130 (and $x229 $x10)))
 (let (($x47 (and $x130 $x20)))
 (let (($x227 (and $x47 $x219)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x141 (and $x99 $x227)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x137 (and $x106 $x141)))
 (let (($x114 (= ?x93 input.spec-%var-x0-0.L2%10%d)))
 (let (($x140 (and $x114 $x137)))
 (let (($x83 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x223 (and $x83 $x140)))
 (let (($x210 (and $x56 $x223)))
 (let ((?x86 (bvadd ?x93 ?x75)))
 (let (($x92 (= ?x86 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x224 (and $x92 $x210)))
 (let (($x70 (= ?x75 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x73 (and $x70 $x224)))
 (let (($x84 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x19 (and $x84 $x73)))
 (let (($x13 (and $x56 $x19)))
 (let (($x39 (bvugt ?x89 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x89 (_ bv3 32)))))
 (let (($x66 (=> (bvule ?x89 (bvsub (bvadd ?x89 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x39)))))))
 (let (($x115 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x40 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x115)))))))
 (let (($x23 (and $x40 $x66)))
 (let (($x102 (and $x23 $x13)))
 (let (($x196 (=> $x102 $x228)))
 (not $x196)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x215 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x127 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x127 (_ bv1 32))))
 (let (($x211 (= ?x127 (_ bv0 32))))
 (let (($x186 (or $x211 $x214)))
 (let (($x138 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x135 (ite $x138 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x135 (_ bv1 32))))
 (let (($x232 (and $x202 $x186)))
 (let (($x126 (= ?x135 (_ bv0 32))))
 (let (($x69 (or $x126 $x232)))
 (let (($x201 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x206 (and true $x201)))
 (let ((?x89 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x188 (= (bvand ?x89 (_ bv4294967292 32)) ?x89)))
 (let (($x158 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x89 (bvsub ?x89 (_ bv4 32))) (bvult ?x89 (bvsub ?x89 (_ bv4 32))))))
 (let (($x160 (and true $x158)))
 (let (($x192 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x78 (and (and (and $x192 $x160) $x188) $x206)))
 (let (($x133 (and $x192 $x78)))
 (let (($x212 (=> $x133 $x69)))
 (let (($x63 (= $x212 true)))
 (let (($x228 (= $x63 true)))
 (let ((?x75 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x216 (= ?x75 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x37 (=> $x214 $x216)))
 (let (($x221 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x226 (= $x214 $x221)))
 (let (($x56 (= false false)))
 (let (($x131 (=> $x211 $x56)))
 (let (($x213 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x96 (= $x211 $x213)))
 (let (($x217 (and (and (and $x96 $x131) $x226) $x37)))
 (let (($x219 (= $x217 true)))
 (let ((?x93 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x17 (= ?x93 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x132 (=> $x202 $x17)))
 (let (($x204 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x205 (= $x202 $x204)))
 (let (($x91 (and (and (= $x126 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x126 $x56)) $x205)))
 (let (($x64 (and $x91 $x132)))
 (let (($x20 (= $x64 true)))
 (let (($x139 (forall ((input.ind-%var204X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var204X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x44))))
 (let ((?x77 (input.spec-%var-x-0.1.1 input.ind-%var204X)))
 (let (($x195 (input.spec-%var-x-0.0.1 input.ind-%var204X)))
 (=> $x195 (= ?x77 ?x51))))))))
 ))
 (let (($x239 (forall ((input.ind-%var203X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-0.0.1 input.ind-%var203X)))
 (= $x195 (and (bvsle (_ bv0 32) input.ind-%var203X) (bvslt input.ind-%var203X (_ bv10 32))))))
 ))
 (let (($x197 (and $x239 $x139)))
 (let (($x10 (= $x197 true)))
 (let ((?x207 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x225 (concat ?x54 (concat ?x120 (concat ?x90 ?x207)))))
 (let (($x233 (= ?x225 input.dst.llvm-%x)))
 (let (($x230 (= $x233 true)))
 (let (($x231 (= $x230 true)))
 (let (($x62 (= $x133 true)))
 (let (($x208 (= $x62 true)))
 (let (($x209 (= $x208 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x153)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x143)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x150 $x144)))
 (let (($x147 (and $x155 $x154)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x109 $x147)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x31)))))))
 (let (($x22 (and $x24 $x145)))
 (let (($x148 (= $x22 true)))
 (let (($x149 (= $x148 true)))
 (let (($x146 (= $x149 true)))
 (let (($x26 (and $x146 $x209)))
 (let (($x184 (and $x26 $x209)))
 (let (($x229 (and $x184 $x231)))
 (let (($x130 (and $x229 $x10)))
 (let (($x47 (and $x130 $x20)))
 (let (($x227 (and $x47 $x219)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x141 (and $x99 $x227)))
 (let (($x106 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x137 (and $x106 $x141)))
 (let (($x114 (= ?x93 input.spec-%var-x0-0.L2%10%d)))
 (let (($x140 (and $x114 $x137)))
 (let (($x83 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x223 (and $x83 $x140)))
 (let (($x210 (and $x56 $x223)))
 (let ((?x86 (bvadd ?x93 ?x75)))
 (let (($x92 (= ?x86 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x224 (and $x92 $x210)))
 (let (($x70 (= ?x75 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x73 (and $x70 $x224)))
 (let (($x84 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x19 (and $x84 $x73)))
 (let (($x13 (and $x56 $x19)))
 (let (($x39 (bvugt ?x89 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x89 (_ bv3 32)))))
 (let (($x66 (=> (bvule ?x89 (bvsub (bvadd ?x89 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x39)))))))
 (let (($x115 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x40 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x14 $x115)))))))
 (let (($x23 (and $x40 $x66)))
 (let (($x102 (and $x23 $x13)))
 (let (($x196 (=> $x102 $x228)))
 (not $x196)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 138 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1500147/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x161)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x175)))
 (let ((?x246 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x236 (concat ?x246 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x177 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x39 (bvadd ?x177 (_ bv3 32))))
 (let ((?x8 (concat (select input.dst.llvm-mem ?x39) (concat ?x74 ?x236))))
 (let ((?x41 (bvadd ?x8 ?x194)))
 (let ((?x71 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x83 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x105 (bvadd ?x83 ?x71)))
 (let (($x176 (= ?x105 ?x41)))
 (let (($x49 (= $x176 true)))
 (let (($x174 (= $x49 true)))
 (let (($x234 (= ?x71 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x97 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x109 (ite $x97 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x109 (_ bv1 32))))
 (let (($x244 (=> $x150 $x234)))
 (let (($x25 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x101 (= $x150 $x25)))
 (let (($x61 (= false false)))
 (let (($x228 (= ?x109 (_ bv0 32))))
 (let (($x42 (=> $x228 $x61)))
 (let (($x152 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x80 (= $x228 $x152)))
 (let (($x30 (and (and (and $x80 $x42) $x101) $x244)))
 (let (($x237 (= $x30 true)))
 (let (($x13 (= ?x83 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x121 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x124 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x124 (_ bv1 32))))
 (let (($x102 (=> $x24 $x13)))
 (let (($x224 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x73 (= $x24 $x224)))
 (let (($x141 (= ?x124 (_ bv0 32))))
 (let (($x210 (=> $x141 $x61)))
 (let (($x140 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x223 (= $x141 $x140)))
 (let (($x69 (and (and (and $x223 $x210) $x73) $x102)))
 (let (($x212 (= $x69 true)))
 (let (($x37 (forall ((input.ind-%var226X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var226X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x96))))
 (let ((?x86 (input.spec-%var-x-0.1.1 input.ind-%var226X)))
 (let (($x117 (input.spec-%var-x-0.0.1 input.ind-%var226X)))
 (=> $x117 (= ?x86 ?x222))))))))
 ))
 (let (($x135 (forall ((input.ind-%var225X (_ BitVec 32)) )(let (($x117 (input.spec-%var-x-0.0.1 input.ind-%var225X)))
 (= $x117 (and (bvsle (_ bv0 32) input.ind-%var225X) (bvslt input.ind-%var225X (_ bv10 32))))))
 ))
 (let (($x217 (and $x135 $x37)))
 (let (($x219 (= $x217 true)))
 (let ((?x235 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x203 (concat ?x77 (concat ?x167 ?x235)))))
 (let (($x164 (= ?x28 input.dst.llvm-%x)))
 (let (($x87 (= $x164 true)))
 (let (($x250 (= $x87 true)))
 (let (($x120 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x59 (and true $x120)))
 (let (($x189 (= (bvand ?x177 (_ bv4294967292 32)) ?x177)))
 (let (($x209 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x177 (bvsub ?x177 (_ bv4 32))) (bvult ?x177 (bvsub ?x177 (_ bv4 32))))))
 (let (($x26 (and true $x209)))
 (let (($x206 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x113 (and (and (and $x206 $x26) $x189) $x59)))
 (let (($x68 (and $x206 $x113)))
 (let (($x225 (= $x68 true)))
 (let (($x233 (= $x225 true)))
 (let (($x230 (= $x233 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x160)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x151 $x159)))
 (let (($x181 (and $x158 $x190)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x153 $x181)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x148)))))))
 (let (($x58 (and $x157 $x188)))
 (let (($x180 (= $x58 true)))
 (let (($x185 (= $x180 true)))
 (let (($x50 (= $x185 true)))
 (let (($x231 (and $x50 $x230)))
 (let (($x229 (and $x231 $x230)))
 (let (($x57 (and $x229 $x250)))
 (let (($x227 (and $x57 $x219)))
 (let (($x63 (and $x227 $x212)))
 (let (($x241 (and $x63 $x237)))
 (let (($x143 (and $x24 $x150)))
 (let (($x243 (and $x143 $x241)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x251 (and $x31 $x243)))
 (let (($x103 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x238 (and $x103 $x251)))
 (let (($x111 (= ?x83 input.spec-%var-x0-0.L2%10%d)))
 (let (($x240 (and $x111 $x238)))
 (let (($x99 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x107 (and $x99 $x240)))
 (let (($x108 (and $x61 $x107)))
 (let (($x110 (= ?x105 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x95 (and $x110 $x108)))
 (let (($x94 (= ?x71 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x242 (and $x94 $x95)))
 (let (($x85 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x6 (and $x85 $x242)))
 (let (($x245 (and $x61 $x6)))
 (let (($x7 (bvugt ?x177 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x67 (=> (bvule ?x177 (bvsub (bvadd ?x177 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x7)))))))
 (let (($x53 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x15 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x53)))))))
 (let (($x5 (and $x15 $x67)))
 (let (($x168 (and $x5 $x245)))
 (let (($x18 (=> $x168 $x174)))
 (not $x18))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x161)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x175)))
 (let ((?x246 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x236 (concat ?x246 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x177 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x39 (bvadd ?x177 (_ bv3 32))))
 (let ((?x8 (concat (select input.dst.llvm-mem ?x39) (concat ?x74 ?x236))))
 (let ((?x41 (bvadd ?x8 ?x194)))
 (let ((?x71 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x83 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x105 (bvadd ?x83 ?x71)))
 (let (($x176 (= ?x105 ?x41)))
 (let (($x49 (= $x176 true)))
 (let (($x174 (= $x49 true)))
 (let (($x234 (= ?x71 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x97 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x109 (ite $x97 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x109 (_ bv1 32))))
 (let (($x244 (=> $x150 $x234)))
 (let (($x25 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x101 (= $x150 $x25)))
 (let (($x61 (= false false)))
 (let (($x228 (= ?x109 (_ bv0 32))))
 (let (($x42 (=> $x228 $x61)))
 (let (($x152 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x80 (= $x228 $x152)))
 (let (($x30 (and (and (and $x80 $x42) $x101) $x244)))
 (let (($x237 (= $x30 true)))
 (let (($x13 (= ?x83 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x121 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x124 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x124 (_ bv1 32))))
 (let (($x102 (=> $x24 $x13)))
 (let (($x224 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x73 (= $x24 $x224)))
 (let (($x141 (= ?x124 (_ bv0 32))))
 (let (($x210 (=> $x141 $x61)))
 (let (($x140 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x223 (= $x141 $x140)))
 (let (($x69 (and (and (and $x223 $x210) $x73) $x102)))
 (let (($x212 (= $x69 true)))
 (let (($x37 (forall ((input.ind-%var226X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var226X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x96))))
 (let ((?x86 (input.spec-%var-x-0.1.1 input.ind-%var226X)))
 (let (($x117 (input.spec-%var-x-0.0.1 input.ind-%var226X)))
 (=> $x117 (= ?x86 ?x222))))))))
 ))
 (let (($x135 (forall ((input.ind-%var225X (_ BitVec 32)) )(let (($x117 (input.spec-%var-x-0.0.1 input.ind-%var225X)))
 (= $x117 (and (bvsle (_ bv0 32) input.ind-%var225X) (bvslt input.ind-%var225X (_ bv10 32))))))
 ))
 (let (($x217 (and $x135 $x37)))
 (let (($x219 (= $x217 true)))
 (let ((?x235 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x203 (concat ?x77 (concat ?x167 ?x235)))))
 (let (($x164 (= ?x28 input.dst.llvm-%x)))
 (let (($x87 (= $x164 true)))
 (let (($x250 (= $x87 true)))
 (let (($x120 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x59 (and true $x120)))
 (let (($x189 (= (bvand ?x177 (_ bv4294967292 32)) ?x177)))
 (let (($x209 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x177 (bvsub ?x177 (_ bv4 32))) (bvult ?x177 (bvsub ?x177 (_ bv4 32))))))
 (let (($x26 (and true $x209)))
 (let (($x206 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x113 (and (and (and $x206 $x26) $x189) $x59)))
 (let (($x68 (and $x206 $x113)))
 (let (($x225 (= $x68 true)))
 (let (($x233 (= $x225 true)))
 (let (($x230 (= $x233 true)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x160)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x151 $x159)))
 (let (($x181 (and $x158 $x190)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x153 $x181)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x148)))))))
 (let (($x58 (and $x157 $x188)))
 (let (($x180 (= $x58 true)))
 (let (($x185 (= $x180 true)))
 (let (($x50 (= $x185 true)))
 (let (($x231 (and $x50 $x230)))
 (let (($x229 (and $x231 $x230)))
 (let (($x57 (and $x229 $x250)))
 (let (($x227 (and $x57 $x219)))
 (let (($x63 (and $x227 $x212)))
 (let (($x241 (and $x63 $x237)))
 (let (($x143 (and $x24 $x150)))
 (let (($x243 (and $x143 $x241)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x251 (and $x31 $x243)))
 (let (($x103 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x238 (and $x103 $x251)))
 (let (($x111 (= ?x83 input.spec-%var-x0-0.L2%10%d)))
 (let (($x240 (and $x111 $x238)))
 (let (($x99 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x107 (and $x99 $x240)))
 (let (($x108 (and $x61 $x107)))
 (let (($x110 (= ?x105 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x95 (and $x110 $x108)))
 (let (($x94 (= ?x71 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x242 (and $x94 $x95)))
 (let (($x85 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x6 (and $x85 $x242)))
 (let (($x245 (and $x61 $x6)))
 (let (($x7 (bvugt ?x177 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x67 (=> (bvule ?x177 (bvsub (bvadd ?x177 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x7)))))))
 (let (($x53 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x15 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x53)))))))
 (let (($x5 (and $x15 $x67)))
 (let (($x168 (and $x5 $x245)))
 (let (($x18 (=> $x168 $x174)))
 (not $x18))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1500147/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x202)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x136)))
 (let ((?x249 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x129 (concat ?x249 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x123 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x7 (bvadd ?x123 (_ bv3 32))))
 (let ((?x132 (concat (select input.dst.llvm-mem ?x7) (concat ?x128 ?x129))))
 (let ((?x163 (bvadd ?x132 ?x44)))
 (let (($x139 (= (_ bv12 32) ?x163)))
 (let (($x20 (= $x139 true)))
 (let (($x112 (= $x20 true)))
 (let ((?x94 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x166 (= ?x94 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x145 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x22 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x22 (_ bv1 32))))
 (let (($x173 (=> $x236 $x166)))
 (let (($x170 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x8 (= $x236 $x170)))
 (let (($x52 (= false false)))
 (let (($x148 (= ?x22 (_ bv0 32))))
 (let (($x169 (=> $x148 $x52)))
 (let (($x171 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x246 (= $x148 $x171)))
 (let (($x172 (and (and (and $x246 $x169) $x8) $x173)))
 (let (($x161 (= $x172 true)))
 (let ((?x122 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x95 (= ?x122 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x150 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x147 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x147 (_ bv1 32))))
 (let (($x242 (=> $x192 $x95)))
 (let (($x240 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x107 (= $x192 $x240)))
 (let (($x237 (= ?x147 (_ bv0 32))))
 (let (($x238 (=> $x237 $x52)))
 (let (($x243 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x251 (= $x237 $x243)))
 (let (($x168 (and (and (and $x251 $x238) $x107) $x242)))
 (let (($x33 (= $x168 true)))
 (let (($x193 (forall ((input.ind-%var246X (_ BitVec 32)) )(let ((?x102 (bvadd (bvmul input.ind-%var246X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x228))))
 (let ((?x83 (input.spec-%var-x-0.1.1 input.ind-%var246X)))
 (let (($x143 (input.spec-%var-x-0.0.1 input.ind-%var246X)))
 (=> $x143 (= ?x83 ?x25))))))))
 ))
 (let (($x222 (forall ((input.ind-%var245X (_ BitVec 32)) )(let (($x143 (input.spec-%var-x-0.0.1 input.ind-%var245X)))
 (= $x143 (and (bvsle (_ bv0 32) input.ind-%var245X) (bvslt input.ind-%var245X (_ bv10 32))))))
 ))
 (let (($x234 (and $x222 $x193)))
 (let (($x244 (= $x234 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x197 (concat ?x51 (concat ?x93 (concat ?x164 ?x79)))))
 (let (($x130 (= ?x197 input.dst.llvm-%x)))
 (let (($x138 (= $x130 true)))
 (let (($x135 (= $x138 true)))
 (let (($x230 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x231 (and true $x230)))
 (let (($x59 (= (bvand ?x123 (_ bv4294967292 32)) ?x123)))
 (let (($x119 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x123 (bvsub ?x123 (_ bv4 32))) (bvult ?x123 (bvsub ?x123 (_ bv4 32))))))
 (let (($x134 (and true $x119)))
 (let (($x184 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x248 (and (and (and $x184 $x134) $x59) $x231)))
 (let (($x203 (and $x184 $x248)))
 (let (($x162 (= $x203 true)))
 (let (($x239 (= $x162 true)))
 (let (($x77 (= $x239 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x187)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x180)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x58 $x185)))
 (let (($x206 (and $x50 $x201)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x156 $x206)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x151 $x179)))))))
 (let (($x78 (and $x188 $x133)))
 (let (($x62 (= $x78 true)))
 (let (($x208 (= $x62 true)))
 (let (($x209 (= $x208 true)))
 (let (($x178 (and $x209 $x77)))
 (let (($x167 (and $x178 $x77)))
 (let (($x86 (and $x167 $x135)))
 (let (($x30 (and $x86 $x244)))
 (let (($x247 (and $x30 $x33)))
 (let (($x175 (and $x247 $x161)))
 (let (($x149 (and $x192 $x148)))
 (let (($x194 (and $x149 $x175)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x41 (and $x109 $x194)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x176 (and $x24 $x41)))
 (let (($x121 (= ?x122 input.spec-%var-x0-0.L2%10%d)))
 (let (($x49 (and $x121 $x176)))
 (let (($x104 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x174 (and $x104 $x49)))
 (let (($x18 (and $x52 $x174)))
 (let ((?x99 (bvadd ?x122 ?x94)))
 (let (($x111 (= ?x99 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x81 (and $x111 $x18)))
 (let (($x110 (= ?x94 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x100 (and $x110 $x81)))
 (let (($x92 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x32 (and $x92 $x100)))
 (let (($x45 (and $x52 $x32)))
 (let (($x55 (bvugt ?x123 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x75 (=> (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x55)))))))
 (let (($x48 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x43 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x48)))))))
 (let (($x38 (and $x43 $x75)))
 (let (($x144 (and $x38 $x45)))
 (let (($x47 (=> $x144 $x112)))
 (not $x47))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x202)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x136)))
 (let ((?x249 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x129 (concat ?x249 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x123 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x7 (bvadd ?x123 (_ bv3 32))))
 (let ((?x132 (concat (select input.dst.llvm-mem ?x7) (concat ?x128 ?x129))))
 (let ((?x163 (bvadd ?x132 ?x44)))
 (let (($x139 (= (_ bv12 32) ?x163)))
 (let (($x20 (= $x139 true)))
 (let (($x112 (= $x20 true)))
 (let ((?x94 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x166 (= ?x94 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x145 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x22 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x22 (_ bv1 32))))
 (let (($x173 (=> $x236 $x166)))
 (let (($x170 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x8 (= $x236 $x170)))
 (let (($x52 (= false false)))
 (let (($x148 (= ?x22 (_ bv0 32))))
 (let (($x169 (=> $x148 $x52)))
 (let (($x171 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x246 (= $x148 $x171)))
 (let (($x172 (and (and (and $x246 $x169) $x8) $x173)))
 (let (($x161 (= $x172 true)))
 (let ((?x122 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x95 (= ?x122 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x150 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x147 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x147 (_ bv1 32))))
 (let (($x242 (=> $x192 $x95)))
 (let (($x240 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x107 (= $x192 $x240)))
 (let (($x237 (= ?x147 (_ bv0 32))))
 (let (($x238 (=> $x237 $x52)))
 (let (($x243 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x251 (= $x237 $x243)))
 (let (($x168 (and (and (and $x251 $x238) $x107) $x242)))
 (let (($x33 (= $x168 true)))
 (let (($x193 (forall ((input.ind-%var246X (_ BitVec 32)) )(let ((?x102 (bvadd (bvmul input.ind-%var246X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x228))))
 (let ((?x83 (input.spec-%var-x-0.1.1 input.ind-%var246X)))
 (let (($x143 (input.spec-%var-x-0.0.1 input.ind-%var246X)))
 (=> $x143 (= ?x83 ?x25))))))))
 ))
 (let (($x222 (forall ((input.ind-%var245X (_ BitVec 32)) )(let (($x143 (input.spec-%var-x-0.0.1 input.ind-%var245X)))
 (= $x143 (and (bvsle (_ bv0 32) input.ind-%var245X) (bvslt input.ind-%var245X (_ bv10 32))))))
 ))
 (let (($x234 (and $x222 $x193)))
 (let (($x244 (= $x234 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x197 (concat ?x51 (concat ?x93 (concat ?x164 ?x79)))))
 (let (($x130 (= ?x197 input.dst.llvm-%x)))
 (let (($x138 (= $x130 true)))
 (let (($x135 (= $x138 true)))
 (let (($x230 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x231 (and true $x230)))
 (let (($x59 (= (bvand ?x123 (_ bv4294967292 32)) ?x123)))
 (let (($x119 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x123 (bvsub ?x123 (_ bv4 32))) (bvult ?x123 (bvsub ?x123 (_ bv4 32))))))
 (let (($x134 (and true $x119)))
 (let (($x184 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x248 (and (and (and $x184 $x134) $x59) $x231)))
 (let (($x203 (and $x184 $x248)))
 (let (($x162 (= $x203 true)))
 (let (($x239 (= $x162 true)))
 (let (($x77 (= $x239 true)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x201 (= (_ bv0 32) ?x187)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x180)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x58 $x185)))
 (let (($x206 (and $x50 $x201)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x156 $x206)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x151 $x179)))))))
 (let (($x78 (and $x188 $x133)))
 (let (($x62 (= $x78 true)))
 (let (($x208 (= $x62 true)))
 (let (($x209 (= $x208 true)))
 (let (($x178 (and $x209 $x77)))
 (let (($x167 (and $x178 $x77)))
 (let (($x86 (and $x167 $x135)))
 (let (($x30 (and $x86 $x244)))
 (let (($x247 (and $x30 $x33)))
 (let (($x175 (and $x247 $x161)))
 (let (($x149 (and $x192 $x148)))
 (let (($x194 (and $x149 $x175)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x41 (and $x109 $x194)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x176 (and $x24 $x41)))
 (let (($x121 (= ?x122 input.spec-%var-x0-0.L2%10%d)))
 (let (($x49 (and $x121 $x176)))
 (let (($x104 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x174 (and $x104 $x49)))
 (let (($x18 (and $x52 $x174)))
 (let ((?x99 (bvadd ?x122 ?x94)))
 (let (($x111 (= ?x99 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x81 (and $x111 $x18)))
 (let (($x110 (= ?x94 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x100 (and $x110 $x81)))
 (let (($x92 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x32 (and $x92 $x100)))
 (let (($x45 (and $x52 $x32)))
 (let (($x55 (bvugt ?x123 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x75 (=> (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x55)))))))
 (let (($x48 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x43 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x12 $x48)))))))
 (let (($x38 (and $x43 $x75)))
 (let (($x144 (and $x38 $x45)))
 (let (($x47 (=> $x144 $x112)))
 (not $x47))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1500147/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x141)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x140)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x215 (concat ?x37 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x154 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x55 (bvadd ?x154 (_ bv3 32))))
 (let ((?x186 (concat (select input.dst.llvm-mem ?x55) (concat ?x131 ?x215))))
 (let ((?x127 (bvadd ?x186 ?x73)))
 (let (($x220 (= (_ bv45 32) ?x127)))
 (let (($x182 (= $x220 true)))
 (let (($x232 (= $x182 true)))
 (let ((?x110 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x64 (= ?x110 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x45 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x144 (ite $x45 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x144 (_ bv1 32))))
 (let (($x118 (=> $x195 $x64)))
 (let (($x129 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x56 (= $x195 $x129)))
 (let (($x84 (= false false)))
 (let (($x17 (= ?x144 (_ bv0 32))))
 (let (($x249 (=> $x17 $x84)))
 (let (($x128 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x116 (= $x17 $x128)))
 (let (($x65 (and (and (and $x116 $x249) $x56) $x118)))
 (let (($x205 (= $x65 true)))
 (let ((?x103 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x176 (= ?x103 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x148 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x155 (ite $x148 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x155 (_ bv1 32))))
 (let (($x49 (=> $x161 $x176)))
 (let (($x175 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x194 (= $x161 $x175)))
 (let (($x181 (= ?x155 (_ bv0 32))))
 (let (($x172 (=> $x181 $x84)))
 (let (($x166 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x173 (= $x181 $x166)))
 (let (($x81 (and (and (and $x173 $x172) $x194) $x49)))
 (let (($x100 (= $x81 true)))
 (let (($x236 (forall ((input.ind-%var266X (_ BitVec 32)) )(let ((?x107 (bvadd (bvmul input.ind-%var266X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x242))))
 (let ((?x122 (input.spec-%var-x-0.1.1 input.ind-%var266X)))
 (let (($x149 (input.spec-%var-x-0.0.1 input.ind-%var266X)))
 (=> $x149 (= ?x122 ?x246))))))))
 ))
 (let (($x63 (forall ((input.ind-%var265X (_ BitVec 32)) )(let (($x149 (input.spec-%var-x-0.0.1 input.ind-%var265X)))
 (= $x149 (and (bvsle (_ bv0 32) input.ind-%var265X) (bvslt input.ind-%var265X (_ bv10 32))))))
 ))
 (let (($x170 (and $x63 $x236)))
 (let (($x8 (= $x170 true)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x86 (concat ?x130 (concat ?x79 ?x28)))))
 (let (($x143 (= ?x82 input.dst.llvm-%x)))
 (let (($x211 (= $x143 true)))
 (let (($x226 (= $x211 true)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x203 (and true $x248)))
 (let (($x113 (= (bvand ?x154 (_ bv4294967292 32)) ?x154)))
 (let (($x59 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x154 (bvsub ?x154 (_ bv4 32))) (bvult ?x154 (bvsub ?x154 (_ bv4 32))))))
 (let (($x76 (and true $x59)))
 (let (($x88 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x77 (and (and (and $x88 $x76) $x113) $x203)))
 (let (($x178 (and $x88 $x77)))
 (let (($x167 (= $x178 true)))
 (let (($x235 (= $x167 true)))
 (let (($x10 (= $x235 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x78)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x187 $x206)))
 (let (($x208 (and $x133 $x62)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x179 $x208)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x190 $x188)))))))
 (let (($x26 (and $x50 $x209)))
 (let (($x90 (= $x26 true)))
 (let (($x184 (= $x90 true)))
 (let (($x207 (= $x184 true)))
 (let (($x51 (and $x207 $x10)))
 (let (($x250 (and $x51 $x10)))
 (let (($x213 (and $x250 $x226)))
 (let (($x198 (and $x213 $x8)))
 (let (($x32 (and $x198 $x100)))
 (let (($x202 (and $x32 $x205)))
 (let (($x136 (and $x181 $x202)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x44 (and $x22 $x136)))
 (let (($x192 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x163 (and $x192 $x44)))
 (let (($x150 (= ?x103 input.spec-%var-x0-0.L2%10%d)))
 (let (($x139 (and $x150 $x163)))
 (let (($x97 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x20 (and $x97 $x139)))
 (let (($x112 (and $x84 $x20)))
 (let ((?x104 (bvadd ?x103 ?x110)))
 (let (($x121 (= ?x104 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x47 (and $x121 $x112)))
 (let (($x111 (= ?x110 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x70 (and $x111 $x47)))
 (let (($x114 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x105 (and $x114 $x70)))
 (let (($x16 (and $x84 $x105)))
 (let (($x23 (bvugt ?x154 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x71 (=> (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x23)))))))
 (let (($x89 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x29 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x89)))))))
 (let (($x35 (and $x29 $x71)))
 (let (($x11 (and $x35 $x16)))
 (let (($x216 (=> $x11 $x232)))
 (not $x216)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x141)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x140)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x215 (concat ?x37 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x154 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x55 (bvadd ?x154 (_ bv3 32))))
 (let ((?x186 (concat (select input.dst.llvm-mem ?x55) (concat ?x131 ?x215))))
 (let ((?x127 (bvadd ?x186 ?x73)))
 (let (($x220 (= (_ bv45 32) ?x127)))
 (let (($x182 (= $x220 true)))
 (let (($x232 (= $x182 true)))
 (let ((?x110 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x64 (= ?x110 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x45 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x144 (ite $x45 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x144 (_ bv1 32))))
 (let (($x118 (=> $x195 $x64)))
 (let (($x129 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x56 (= $x195 $x129)))
 (let (($x84 (= false false)))
 (let (($x17 (= ?x144 (_ bv0 32))))
 (let (($x249 (=> $x17 $x84)))
 (let (($x128 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x116 (= $x17 $x128)))
 (let (($x65 (and (and (and $x116 $x249) $x56) $x118)))
 (let (($x205 (= $x65 true)))
 (let ((?x103 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x176 (= ?x103 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x148 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x155 (ite $x148 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x155 (_ bv1 32))))
 (let (($x49 (=> $x161 $x176)))
 (let (($x175 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x194 (= $x161 $x175)))
 (let (($x181 (= ?x155 (_ bv0 32))))
 (let (($x172 (=> $x181 $x84)))
 (let (($x166 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x173 (= $x181 $x166)))
 (let (($x81 (and (and (and $x173 $x172) $x194) $x49)))
 (let (($x100 (= $x81 true)))
 (let (($x236 (forall ((input.ind-%var266X (_ BitVec 32)) )(let ((?x107 (bvadd (bvmul input.ind-%var266X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x242))))
 (let ((?x122 (input.spec-%var-x-0.1.1 input.ind-%var266X)))
 (let (($x149 (input.spec-%var-x-0.0.1 input.ind-%var266X)))
 (=> $x149 (= ?x122 ?x246))))))))
 ))
 (let (($x63 (forall ((input.ind-%var265X (_ BitVec 32)) )(let (($x149 (input.spec-%var-x-0.0.1 input.ind-%var265X)))
 (= $x149 (and (bvsle (_ bv0 32) input.ind-%var265X) (bvslt input.ind-%var265X (_ bv10 32))))))
 ))
 (let (($x170 (and $x63 $x236)))
 (let (($x8 (= $x170 true)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x86 (concat ?x130 (concat ?x79 ?x28)))))
 (let (($x143 (= ?x82 input.dst.llvm-%x)))
 (let (($x211 (= $x143 true)))
 (let (($x226 (= $x211 true)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x203 (and true $x248)))
 (let (($x113 (= (bvand ?x154 (_ bv4294967292 32)) ?x154)))
 (let (($x59 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x154 (bvsub ?x154 (_ bv4 32))) (bvult ?x154 (bvsub ?x154 (_ bv4 32))))))
 (let (($x76 (and true $x59)))
 (let (($x88 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x77 (and (and (and $x88 $x76) $x113) $x203)))
 (let (($x178 (and $x88 $x77)))
 (let (($x167 (= $x178 true)))
 (let (($x235 (= $x167 true)))
 (let (($x10 (= $x235 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x78)))
 (let ((?x201 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x187 $x206)))
 (let (($x208 (and $x133 $x62)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x179 $x208)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x190 $x188)))))))
 (let (($x26 (and $x50 $x209)))
 (let (($x90 (= $x26 true)))
 (let (($x184 (= $x90 true)))
 (let (($x207 (= $x184 true)))
 (let (($x51 (and $x207 $x10)))
 (let (($x250 (and $x51 $x10)))
 (let (($x213 (and $x250 $x226)))
 (let (($x198 (and $x213 $x8)))
 (let (($x32 (and $x198 $x100)))
 (let (($x202 (and $x32 $x205)))
 (let (($x136 (and $x181 $x202)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x44 (and $x22 $x136)))
 (let (($x192 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x163 (and $x192 $x44)))
 (let (($x150 (= ?x103 input.spec-%var-x0-0.L2%10%d)))
 (let (($x139 (and $x150 $x163)))
 (let (($x97 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x20 (and $x97 $x139)))
 (let (($x112 (and $x84 $x20)))
 (let ((?x104 (bvadd ?x103 ?x110)))
 (let (($x121 (= ?x104 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x47 (and $x121 $x112)))
 (let (($x111 (= ?x110 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x70 (and $x111 $x47)))
 (let (($x114 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x105 (and $x114 $x70)))
 (let (($x16 (and $x84 $x105)))
 (let (($x23 (bvugt ?x154 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x71 (=> (bvule ?x154 (bvsub (bvadd ?x154 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x66 $x23)))))))
 (let (($x89 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x29 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x89)))))))
 (let (($x35 (and $x29 $x71)))
 (let (($x11 (and $x35 $x16)))
 (let (($x216 (=> $x11 $x232)))
 (not $x216)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 148 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1500147/query
