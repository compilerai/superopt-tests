==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x10 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x6)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x10 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x6)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171579/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x206 (= true false)))
 (let (($x207 (= $x206 true)))
 (let ((?x44 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x190 (= ?x44 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x179 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x180 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x180 (_ bv1 32))))
 (let (($x191 (=> $x186 $x190)))
 (let (($x187 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x188 (= $x186 $x187)))
 (let (($x13 (= false false)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x185 (=> $x181 $x13)))
 (let (($x183 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x184 (= $x181 $x183)))
 (let (($x194 (and (and (and $x184 $x185) $x188) $x191)))
 (let (($x195 (= $x194 true)))
 (let ((?x39 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x172 (= ?x39 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x161 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x162 (ite $x161 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x162 (_ bv1 32))))
 (let (($x173 (=> $x168 $x172)))
 (let (($x169 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x170 (= $x168 $x169)))
 (let (($x163 (= ?x162 (_ bv0 32))))
 (let (($x167 (=> $x163 $x13)))
 (let (($x165 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x166 (= $x163 $x165)))
 (let (($x176 (and (and (and $x166 $x167) $x170) $x173)))
 (let (($x177 (= $x176 true)))
 (let (($x157 (forall ((input.ind-%var73X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var73X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x148))))
 (let ((?x23 (input.spec-%var-x-0.1.1 input.ind-%var73X)))
 (let (($x114 (input.spec-%var-x-0.0.1 input.ind-%var73X)))
 (=> $x114 (= ?x23 ?x154))))))))
 ))
 (let (($x125 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-0.0.1 input.ind-%var72X)))
 (= $x114 (and (bvsle (_ bv0 32) input.ind-%var72X) (bvslt input.ind-%var72X (_ bv10 32))))))
 ))
 (let (($x158 (and $x125 $x157)))
 (let (($x159 (= $x158 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x103 (concat ?x99 ?x97)))))
 (let (($x108 (= ?x107 input.dst.llvm-%x)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let (($x86 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x92 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x86)))))))
 (let (($x80 (= $x92 true)))
 (let (($x81 (= $x80 true)))
 (let (($x93 (= $x81 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x71)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x67 $x69)))
 (let (($x73 (and $x70 $x72)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x55 $x73)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x75 (and $x66 $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x42 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x22 (_ bv3 32)))))
 (let (($x51 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x42)))))))
 (let (($x9 (= $x51 true)))
 (let (($x37 (= $x9 true)))
 (let (($x52 (= $x37 true)))
 (let (($x79 (and $x52 $x78)))
 (let (($x94 (and $x79 $x93)))
 (let (($x111 (and $x94 $x110)))
 (let (($x160 (and $x111 $x159)))
 (let (($x178 (and $x160 $x177)))
 (let (($x196 (and $x178 $x195)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x197 (and $x10 $x196)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x198 (and $x7 $x197)))
 (let (($x35 (= ?x39 input.spec-%var-x0-0.L2%10%d)))
 (let (($x199 (and $x35 $x198)))
 (let (($x5 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x200 (and $x5 $x199)))
 (let (($x201 (and $x13 $x200)))
 (let ((?x46 (bvadd ?x39 ?x44)))
 (let (($x41 (= ?x46 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x202 (and $x41 $x201)))
 (let (($x47 (= ?x44 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x203 (and $x47 $x202)))
 (let (($x20 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x204 (and $x20 $x203)))
 (let (($x205 (and $x13 $x204)))
 (let (($x208 (=> $x205 $x207)))
 (not $x208))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x206 (= true false)))
 (let (($x207 (= $x206 true)))
 (let ((?x44 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x190 (= ?x44 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x179 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x180 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x180 (_ bv1 32))))
 (let (($x191 (=> $x186 $x190)))
 (let (($x187 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x188 (= $x186 $x187)))
 (let (($x13 (= false false)))
 (let (($x181 (= ?x180 (_ bv0 32))))
 (let (($x185 (=> $x181 $x13)))
 (let (($x183 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x184 (= $x181 $x183)))
 (let (($x194 (and (and (and $x184 $x185) $x188) $x191)))
 (let (($x195 (= $x194 true)))
 (let ((?x39 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x172 (= ?x39 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x161 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x162 (ite $x161 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x162 (_ bv1 32))))
 (let (($x173 (=> $x168 $x172)))
 (let (($x169 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x170 (= $x168 $x169)))
 (let (($x163 (= ?x162 (_ bv0 32))))
 (let (($x167 (=> $x163 $x13)))
 (let (($x165 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x166 (= $x163 $x165)))
 (let (($x176 (and (and (and $x166 $x167) $x170) $x173)))
 (let (($x177 (= $x176 true)))
 (let (($x157 (forall ((input.ind-%var73X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var73X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x148))))
 (let ((?x23 (input.spec-%var-x-0.1.1 input.ind-%var73X)))
 (let (($x114 (input.spec-%var-x-0.0.1 input.ind-%var73X)))
 (=> $x114 (= ?x23 ?x154))))))))
 ))
 (let (($x125 (forall ((input.ind-%var72X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-0.0.1 input.ind-%var72X)))
 (= $x114 (and (bvsle (_ bv0 32) input.ind-%var72X) (bvslt input.ind-%var72X (_ bv10 32))))))
 ))
 (let (($x158 (and $x125 $x157)))
 (let (($x159 (= $x158 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x106 (concat ?x103 (concat ?x99 ?x97)))))
 (let (($x108 (= ?x107 input.dst.llvm-%x)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let (($x86 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x92 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x86)))))))
 (let (($x80 (= $x92 true)))
 (let (($x81 (= $x80 true)))
 (let (($x93 (= $x81 true)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x71)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x67 $x69)))
 (let (($x73 (and $x70 $x72)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x55 $x73)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x75 (and $x66 $x74)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x78 (= $x77 true)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x42 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x22 (_ bv3 32)))))
 (let (($x51 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x42)))))))
 (let (($x9 (= $x51 true)))
 (let (($x37 (= $x9 true)))
 (let (($x52 (= $x37 true)))
 (let (($x79 (and $x52 $x78)))
 (let (($x94 (and $x79 $x93)))
 (let (($x111 (and $x94 $x110)))
 (let (($x160 (and $x111 $x159)))
 (let (($x178 (and $x160 $x177)))
 (let (($x196 (and $x178 $x195)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x197 (and $x10 $x196)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x198 (and $x7 $x197)))
 (let (($x35 (= ?x39 input.spec-%var-x0-0.L2%10%d)))
 (let (($x199 (and $x35 $x198)))
 (let (($x5 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x200 (and $x5 $x199)))
 (let (($x201 (and $x13 $x200)))
 (let ((?x46 (bvadd ?x39 ?x44)))
 (let (($x41 (= ?x46 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x202 (and $x41 $x201)))
 (let (($x47 (= ?x44 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x203 (and $x47 $x202)))
 (let (($x20 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x204 (and $x20 $x203)))
 (let (($x205 (and $x13 $x204)))
 (let (($x208 (=> $x205 $x207)))
 (not $x208))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32)
    #x0000002d)
  (define-fun input.spec-%var-x-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      (not (or (not (bvsle #x00000000 x!0)) (bvsle #x0000000a x!0))))))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008))))))
        (concat a!1 a!2 a!3 a!4)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xc0000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x60000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60000000)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32)
    #x0000002d)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x60000003) #xc0
      #x00))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x0000000a x!0)
              (ite (bvule #x0000000b x!0) #x0000000b #x0000000a)
              #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x60000003)
                                     (k!2 #x60000002)
                                     (k!2 #x60000001)
                                     (k!2 #x60000000)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x60000003)
                                     (k!2 #x60000002)
                                     (k!2 #x60000001)
                                     (k!2 #x60000000)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x60000003)
                                     (k!2 #x60000002)
                                     (k!2 #x60000001)
                                     (k!2 #x60000000)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x60000003)
                                     (k!2 #x60000002)
                                     (k!2 #x60000001)
                                     (k!2 #x60000000))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-%var-x-0.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      false)))
  (define-fun input.spec-%var-x-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.0.1!4 (k!3 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171579/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x131 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x131 (_ bv1 32))))
 (let (($x134 (= ?x131 (_ bv0 32))))
 (let (($x226 (or $x134 $x120)))
 (let (($x209 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x26 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x26 (_ bv1 32))))
 (let (($x227 (and $x128 $x226)))
 (let (($x15 (= ?x26 (_ bv0 32))))
 (let (($x228 (or $x15 $x227)))
 (let (($x229 (or false $x228)))
 (let (($x230 (= $x229 true)))
 (let (($x231 (= $x230 true)))
 (let ((?x14 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x18 (= ?x14 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x210 (=> $x120 $x18)))
 (let (($x141 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x127 (= $x120 $x141)))
 (let (($x10 (= false false)))
 (let (($x119 (=> $x134 $x10)))
 (let (($x140 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x113 (= $x134 $x140)))
 (let (($x213 (and (and (and $x113 $x119) $x127) $x210)))
 (let (($x214 (= $x213 true)))
 (let ((?x65 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x129 (= ?x65 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x130 (=> $x128 $x129)))
 (let (($x112 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x116 (= $x128 $x112)))
 (let (($x139 (and (and (= $x15 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x15 $x10)) $x116)))
 (let (($x135 (and $x139 $x130)))
 (let (($x136 (= $x135 true)))
 (let (($x205 (forall ((input.ind-%var123X (_ BitVec 32)) )(let ((?x190 (bvadd (bvmul input.ind-%var123X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem ?x190))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv2 32))) ?x196))))
 (let ((?x9 (input.spec-%var-x-0.1.1 input.ind-%var123X)))
 (let (($x163 (input.spec-%var-x-0.0.1 input.ind-%var123X)))
 (=> $x163 (= ?x9 ?x202))))))))
 ))
 (let (($x171 (forall ((input.ind-%var122X (_ BitVec 32)) )(let (($x163 (input.spec-%var-x-0.0.1 input.ind-%var122X)))
 (= $x163 (and (bvsle (_ bv0 32) input.ind-%var122X) (bvslt input.ind-%var122X (_ bv10 32))))))
 ))
 (let (($x206 (and $x171 $x205)))
 (let (($x207 (= $x206 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x155 (concat ?x148 (concat ?x150 ?x153)))))
 (let (($x157 (= ?x156 input.dst.llvm-%x)))
 (let (($x158 (= $x157 true)))
 (let (($x159 (= $x158 true)))
 (let (($x85 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x86 (and true $x85)))
 (let ((?x21 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x79 (= (bvand ?x21 (_ bv4294967292 32)) ?x21)))
 (let (($x76 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x21 (bvsub ?x21 (_ bv4 32))) (bvult ?x21 (bvsub ?x21 (_ bv4 32))))))
 (let (($x77 (and true $x76)))
 (let (($x71 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x89 (and (and (and $x71 $x77) $x79) $x86)))
 (let (($x90 (and $x71 $x89)))
 (let (($x92 (= $x90 true)))
 (let (($x80 (= $x92 true)))
 (let (($x81 (= $x80 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x31)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x108 $x110)))
 (let (($x122 (and $x111 $x114)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x95 $x122)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x103)))))))
 (let (($x121 (and $x107 $x117)))
 (let (($x123 (= $x121 true)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x23 (and $x81 $x125)))
 (let (($x143 (and $x23 $x81)))
 (let (($x160 (and $x143 $x159)))
 (let (($x208 (and $x160 $x207)))
 (let (($x132 (and $x208 $x136)))
 (let (($x215 (and $x132 $x214)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x216 (and $x68 $x215)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x217 (and $x55 $x216)))
 (let (($x66 (= ?x65 input.spec-%var-x0-0.L2%10%d)))
 (let (($x218 (and $x66 $x217)))
 (let (($x63 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x219 (and $x63 $x218)))
 (let (($x220 (and $x10 $x219)))
 (let ((?x58 (bvadd ?x65 ?x14)))
 (let (($x60 (= ?x58 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x221 (and $x60 $x220)))
 (let (($x56 (= ?x14 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x222 (and $x56 $x221)))
 (let (($x30 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x223 (and $x30 $x222)))
 (let (($x224 (and $x10 $x223)))
 (let (($x12 (bvugt ?x21 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x21 (_ bv3 32)))))
 (let (($x40 (=> (bvule ?x21 (bvsub (bvadd ?x21 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x12)))))))
 (let (($x48 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x48)))))))
 (let (($x24 (and $x36 $x40)))
 (let (($x225 (and $x24 $x224)))
 (let (($x232 (=> $x225 $x231)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x133 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x131 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x131 (_ bv1 32))))
 (let (($x134 (= ?x131 (_ bv0 32))))
 (let (($x226 (or $x134 $x120)))
 (let (($x209 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x26 (ite $x209 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x26 (_ bv1 32))))
 (let (($x227 (and $x128 $x226)))
 (let (($x15 (= ?x26 (_ bv0 32))))
 (let (($x228 (or $x15 $x227)))
 (let (($x229 (or false $x228)))
 (let (($x230 (= $x229 true)))
 (let (($x231 (= $x230 true)))
 (let ((?x14 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x18 (= ?x14 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x210 (=> $x120 $x18)))
 (let (($x141 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x127 (= $x120 $x141)))
 (let (($x10 (= false false)))
 (let (($x119 (=> $x134 $x10)))
 (let (($x140 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x113 (= $x134 $x140)))
 (let (($x213 (and (and (and $x113 $x119) $x127) $x210)))
 (let (($x214 (= $x213 true)))
 (let ((?x65 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x129 (= ?x65 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x130 (=> $x128 $x129)))
 (let (($x112 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x116 (= $x128 $x112)))
 (let (($x139 (and (and (= $x15 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x15 $x10)) $x116)))
 (let (($x135 (and $x139 $x130)))
 (let (($x136 (= $x135 true)))
 (let (($x205 (forall ((input.ind-%var123X (_ BitVec 32)) )(let ((?x190 (bvadd (bvmul input.ind-%var123X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem ?x190))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv2 32))) ?x196))))
 (let ((?x9 (input.spec-%var-x-0.1.1 input.ind-%var123X)))
 (let (($x163 (input.spec-%var-x-0.0.1 input.ind-%var123X)))
 (=> $x163 (= ?x9 ?x202))))))))
 ))
 (let (($x171 (forall ((input.ind-%var122X (_ BitVec 32)) )(let (($x163 (input.spec-%var-x-0.0.1 input.ind-%var122X)))
 (= $x163 (and (bvsle (_ bv0 32) input.ind-%var122X) (bvslt input.ind-%var122X (_ bv10 32))))))
 ))
 (let (($x206 (and $x171 $x205)))
 (let (($x207 (= $x206 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x155 (concat ?x148 (concat ?x150 ?x153)))))
 (let (($x157 (= ?x156 input.dst.llvm-%x)))
 (let (($x158 (= $x157 true)))
 (let (($x159 (= $x158 true)))
 (let (($x85 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x86 (and true $x85)))
 (let ((?x21 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x79 (= (bvand ?x21 (_ bv4294967292 32)) ?x21)))
 (let (($x76 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x21 (bvsub ?x21 (_ bv4 32))) (bvult ?x21 (bvsub ?x21 (_ bv4 32))))))
 (let (($x77 (and true $x76)))
 (let (($x71 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x89 (and (and (and $x71 $x77) $x79) $x86)))
 (let (($x90 (and $x71 $x89)))
 (let (($x92 (= $x90 true)))
 (let (($x80 (= $x92 true)))
 (let (($x81 (= $x80 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x31)))
 (let ((?x109 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x110 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x109)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x108 $x110)))
 (let (($x122 (and $x111 $x114)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x95 $x122)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x102 $x103)))))))
 (let (($x121 (and $x107 $x117)))
 (let (($x123 (= $x121 true)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x23 (and $x81 $x125)))
 (let (($x143 (and $x23 $x81)))
 (let (($x160 (and $x143 $x159)))
 (let (($x208 (and $x160 $x207)))
 (let (($x132 (and $x208 $x136)))
 (let (($x215 (and $x132 $x214)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x216 (and $x68 $x215)))
 (let (($x55 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x217 (and $x55 $x216)))
 (let (($x66 (= ?x65 input.spec-%var-x0-0.L2%10%d)))
 (let (($x218 (and $x66 $x217)))
 (let (($x63 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x219 (and $x63 $x218)))
 (let (($x220 (and $x10 $x219)))
 (let ((?x58 (bvadd ?x65 ?x14)))
 (let (($x60 (= ?x58 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x221 (and $x60 $x220)))
 (let (($x56 (= ?x14 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x222 (and $x56 $x221)))
 (let (($x30 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x223 (and $x30 $x222)))
 (let (($x224 (and $x10 $x223)))
 (let (($x12 (bvugt ?x21 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x21 (_ bv3 32)))))
 (let (($x40 (=> (bvule ?x21 (bvsub (bvadd ?x21 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x33 $x12)))))))
 (let (($x48 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x48)))))))
 (let (($x24 (and $x36 $x40)))
 (let (($x225 (and $x24 $x224)))
 (let (($x232 (=> $x225 $x231)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 138 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171579/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x277)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x280)))
 (let ((?x267 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x268 (concat ?x267 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x14 (bvadd ?x75 (_ bv3 32))))
 (let ((?x273 (concat (select input.dst.llvm-mem ?x14) (concat ?x270 ?x268))))
 (let ((?x283 (bvadd ?x273 ?x282)))
 (let ((?x43 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x74 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x68 (bvadd ?x74 ?x43)))
 (let (($x284 (= ?x68 ?x283)))
 (let (($x285 (= $x284 true)))
 (let (($x286 (= $x285 true)))
 (let (($x247 (= ?x43 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x79 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x88 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x88 (_ bv1 32))))
 (let (($x248 (=> $x83 $x247)))
 (let (($x244 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x245 (= $x83 $x244)))
 (let (($x78 (= false false)))
 (let (($x239 (= ?x88 (_ bv0 32))))
 (let (($x243 (=> $x239 $x78)))
 (let (($x241 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x242 (= $x239 $x241)))
 (let (($x251 (and (and (and $x242 $x243) $x245) $x248)))
 (let (($x252 (= $x251 true)))
 (let (($x193 (= ?x74 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x64 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x27 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x27 (_ bv1 32))))
 (let (($x29 (=> $x73 $x193)))
 (let (($x174 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x188 (= $x73 $x174)))
 (let (($x182 (= ?x27 (_ bv0 32))))
 (let (($x167 (=> $x182 $x78)))
 (let (($x187 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x162 (= $x182 $x187)))
 (let (($x236 (and (and (and $x162 $x167) $x188) $x29)))
 (let (($x237 (= $x236 true)))
 (let (($x184 (forall ((input.ind-%var151X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var151X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x210))))
 (let ((?x16 (input.spec-%var-x-0.1.1 input.ind-%var151X)))
 (let (($x66 (input.spec-%var-x-0.0.1 input.ind-%var151X)))
 (=> $x66 (= ?x16 ?x218))))))))
 ))
 (let (($x231 (forall ((input.ind-%var150X (_ BitVec 32)) )(let (($x66 (input.spec-%var-x-0.0.1 input.ind-%var150X)))
 (= $x66 (and (bvsle (_ bv0 32) input.ind-%var150X) (bvslt input.ind-%var150X (_ bv10 32))))))
 ))
 (let (($x180 (and $x231 $x184)))
 (let (($x181 (= $x180 true)))
 (let (($x221 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var145X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x210))))
 (let ((?x16 (input.spec-%var-x-0.1.1 input.ind-%var145X)))
 (let (($x66 (input.spec-%var-x-0.0.1 input.ind-%var145X)))
 (=> $x66 (= ?x16 ?x218))))))))
 ))
 (let (($x112 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x66 (input.spec-%var-x-0.0.1 input.ind-%var144X)))
 (= $x66 (and (bvsle (_ bv0 32) input.ind-%var144X) (bvslt input.ind-%var144X (_ bv10 32))))))
 ))
 (let (($x222 (and $x112 $x221)))
 (let (($x223 (= $x222 true)))
 (let ((?x169 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x201 (concat ?x200 (concat ?x9 (concat ?x168 ?x169)))))
 (let (($x204 (= ?x201 input.dst.llvm-%x)))
 (let (($x205 (= $x204 true)))
 (let (($x206 (= $x205 true)))
 (let (($x197 (= input.dst.llvm-%x ?x201)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x100)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x103 $x99)))
 (let (($x94 (and $x97 $x107)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x85 $x94)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x80)))))))
 (let (($x148 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x149 (and true $x148)))
 (let (($x144 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x125 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv4 32))) (bvult ?x75 (bvsub ?x75 (_ bv4 32))))))
 (let (($x23 (and true $x125)))
 (let (($x122 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x146 (and (and (and $x122 $x23) $x144) $x149)))
 (let (($x151 (and $x122 $x146)))
 (let (($x191 (and (and (and (and $x151 $x102) true) $x95) $x197)))
 (let (($x196 (= $x191 true)))
 (let (($x199 (= $x196 true)))
 (let (($x202 (= $x199 true)))
 (let (($x156 (= $x151 true)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x108 (and $x102 $x95)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x159 (and $x111 $x158)))
 (let (($x160 (and $x159 $x158)))
 (let (($x203 (and $x160 $x202)))
 (let (($x207 (and $x203 $x206)))
 (let (($x224 (and $x207 $x223)))
 (let (($x179 (and $x224 $x181)))
 (let (($x238 (and $x179 $x237)))
 (let (($x253 (and $x238 $x252)))
 (let (($x82 (and $x73 $x83)))
 (let (($x254 (and $x82 $x253)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x255 (and $x17 $x254)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x256 (and $x42 $x255)))
 (let (($x12 (= ?x74 input.spec-%var-x0-0.L2%10%d)))
 (let (($x257 (and $x12 $x256)))
 (let (($x54 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x258 (and $x54 $x257)))
 (let (($x259 (and $x78 $x258)))
 (let (($x63 (= ?x68 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x260 (and $x63 $x259)))
 (let (($x52 (= ?x43 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x261 (and $x52 $x260)))
 (let (($x48 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x262 (and $x48 $x261)))
 (let (($x263 (and $x78 $x262)))
 (let (($x58 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x87 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x58)))))))
 (let (($x49 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x49)))))))
 (let (($x44 (and $x36 $x87)))
 (let (($x264 (and $x44 $x263)))
 (let (($x287 (=> $x264 $x286)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x277)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x280)))
 (let ((?x267 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x268 (concat ?x267 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x75 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x14 (bvadd ?x75 (_ bv3 32))))
 (let ((?x273 (concat (select input.dst.llvm-mem ?x14) (concat ?x270 ?x268))))
 (let ((?x283 (bvadd ?x273 ?x282)))
 (let ((?x43 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x74 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x68 (bvadd ?x74 ?x43)))
 (let (($x284 (= ?x68 ?x283)))
 (let (($x285 (= $x284 true)))
 (let (($x286 (= $x285 true)))
 (let (($x247 (= ?x43 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x79 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x88 (ite $x79 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x88 (_ bv1 32))))
 (let (($x248 (=> $x83 $x247)))
 (let (($x244 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x245 (= $x83 $x244)))
 (let (($x78 (= false false)))
 (let (($x239 (= ?x88 (_ bv0 32))))
 (let (($x243 (=> $x239 $x78)))
 (let (($x241 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x242 (= $x239 $x241)))
 (let (($x251 (and (and (and $x242 $x243) $x245) $x248)))
 (let (($x252 (= $x251 true)))
 (let (($x193 (= ?x74 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x64 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x27 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x27 (_ bv1 32))))
 (let (($x29 (=> $x73 $x193)))
 (let (($x174 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x188 (= $x73 $x174)))
 (let (($x182 (= ?x27 (_ bv0 32))))
 (let (($x167 (=> $x182 $x78)))
 (let (($x187 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x162 (= $x182 $x187)))
 (let (($x236 (and (and (and $x162 $x167) $x188) $x29)))
 (let (($x237 (= $x236 true)))
 (let (($x184 (forall ((input.ind-%var151X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var151X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x210))))
 (let ((?x16 (input.spec-%var-x-0.1.1 input.ind-%var151X)))
 (let (($x66 (input.spec-%var-x-0.0.1 input.ind-%var151X)))
 (=> $x66 (= ?x16 ?x218))))))))
 ))
 (let (($x231 (forall ((input.ind-%var150X (_ BitVec 32)) )(let (($x66 (input.spec-%var-x-0.0.1 input.ind-%var150X)))
 (= $x66 (and (bvsle (_ bv0 32) input.ind-%var150X) (bvslt input.ind-%var150X (_ bv10 32))))))
 ))
 (let (($x180 (and $x231 $x184)))
 (let (($x181 (= $x180 true)))
 (let (($x221 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var145X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x210))))
 (let ((?x16 (input.spec-%var-x-0.1.1 input.ind-%var145X)))
 (let (($x66 (input.spec-%var-x-0.0.1 input.ind-%var145X)))
 (=> $x66 (= ?x16 ?x218))))))))
 ))
 (let (($x112 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x66 (input.spec-%var-x-0.0.1 input.ind-%var144X)))
 (= $x66 (and (bvsle (_ bv0 32) input.ind-%var144X) (bvslt input.ind-%var144X (_ bv10 32))))))
 ))
 (let (($x222 (and $x112 $x221)))
 (let (($x223 (= $x222 true)))
 (let ((?x169 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x201 (concat ?x200 (concat ?x9 (concat ?x168 ?x169)))))
 (let (($x204 (= ?x201 input.dst.llvm-%x)))
 (let (($x205 (= $x204 true)))
 (let (($x206 (= $x205 true)))
 (let (($x197 (= input.dst.llvm-%x ?x201)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x100)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x103 $x99)))
 (let (($x94 (and $x97 $x107)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x85 $x94)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x102 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x92 $x80)))))))
 (let (($x148 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x149 (and true $x148)))
 (let (($x144 (= (bvand ?x75 (_ bv4294967292 32)) ?x75)))
 (let (($x125 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x75 (bvsub ?x75 (_ bv4 32))) (bvult ?x75 (bvsub ?x75 (_ bv4 32))))))
 (let (($x23 (and true $x125)))
 (let (($x122 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x146 (and (and (and $x122 $x23) $x144) $x149)))
 (let (($x151 (and $x122 $x146)))
 (let (($x191 (and (and (and (and $x151 $x102) true) $x95) $x197)))
 (let (($x196 (= $x191 true)))
 (let (($x199 (= $x196 true)))
 (let (($x202 (= $x199 true)))
 (let (($x156 (= $x151 true)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x108 (and $x102 $x95)))
 (let (($x109 (= $x108 true)))
 (let (($x110 (= $x109 true)))
 (let (($x111 (= $x110 true)))
 (let (($x159 (and $x111 $x158)))
 (let (($x160 (and $x159 $x158)))
 (let (($x203 (and $x160 $x202)))
 (let (($x207 (and $x203 $x206)))
 (let (($x224 (and $x207 $x223)))
 (let (($x179 (and $x224 $x181)))
 (let (($x238 (and $x179 $x237)))
 (let (($x253 (and $x238 $x252)))
 (let (($x82 (and $x73 $x83)))
 (let (($x254 (and $x82 $x253)))
 (let (($x17 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x255 (and $x17 $x254)))
 (let (($x42 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x256 (and $x42 $x255)))
 (let (($x12 (= ?x74 input.spec-%var-x0-0.L2%10%d)))
 (let (($x257 (and $x12 $x256)))
 (let (($x54 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x258 (and $x54 $x257)))
 (let (($x259 (and $x78 $x258)))
 (let (($x63 (= ?x68 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x260 (and $x63 $x259)))
 (let (($x52 (= ?x43 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x261 (and $x52 $x260)))
 (let (($x48 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x262 (and $x48 $x261)))
 (let (($x263 (and $x78 $x262)))
 (let (($x58 (bvugt ?x75 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x87 (=> (bvule ?x75 (bvsub (bvadd ?x75 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x58)))))))
 (let (($x49 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x36 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x49)))))))
 (let (($x44 (and $x36 $x87)))
 (let (($x264 (and $x44 $x263)))
 (let (($x287 (=> $x264 $x286)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171579/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x192)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x96)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x177 (concat ?x20 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x57 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x58 (bvadd ?x57 (_ bv3 32))))
 (let ((?x172 (concat (select input.dst.llvm-mem ?x58) (concat ?x161 ?x177))))
 (let ((?x139 (bvadd ?x172 ?x230)))
 (let (($x120 (= (_ bv12 32) ?x139)))
 (let (($x186 (= $x120 true)))
 (let (($x233 (= $x186 true)))
 (let ((?x52 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x38 (= ?x52 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x92 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x80 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x80 (_ bv1 32))))
 (let (($x129 (=> $x116 $x38)))
 (let (($x118 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x208 (= $x116 $x118)))
 (let (($x40 (= false false)))
 (let (($x81 (= ?x80 (_ bv0 32))))
 (let (($x163 (=> $x81 $x40)))
 (let (($x35 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x91 (= $x81 $x35)))
 (let (($x113 (and (and (and $x91 $x163) $x208) $x129)))
 (let (($x131 (= $x113 true)))
 (let ((?x54 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x284 (= ?x54 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x82 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x101 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x101 (_ bv1 32))))
 (let (($x285 (=> $x90 $x284)))
 (let (($x280 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x282 (= $x90 $x280)))
 (let (($x279 (= ?x101 (_ bv0 32))))
 (let (($x277 (=> $x279 $x40)))
 (let (($x276 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x274 (= $x279 $x276)))
 (let (($x288 (and (and (and $x274 $x277) $x282) $x285)))
 (let (($x28 (= $x288 true)))
 (let (($x271 (forall ((input.ind-%var177X (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul input.ind-%var177X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x29))))
 (let ((?x74 (input.spec-%var-x-0.1.1 input.ind-%var177X)))
 (let (($x86 (input.spec-%var-x-0.0.1 input.ind-%var177X)))
 (=> $x86 (= ?x74 ?x241))))))))
 ))
 (let (($x254 (forall ((input.ind-%var176X (_ BitVec 32)) )(let (($x86 (input.spec-%var-x-0.0.1 input.ind-%var176X)))
 (= $x86 (and (bvsle (_ bv0 32) input.ind-%var176X) (bvslt input.ind-%var176X (_ bv10 32))))))
 ))
 (let (($x273 (and $x254 $x271)))
 (let (($x281 (= $x273 true)))
 (let (($x249 (forall ((input.ind-%var171X (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul input.ind-%var171X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x29))))
 (let ((?x74 (input.spec-%var-x-0.1.1 input.ind-%var171X)))
 (let (($x86 (input.spec-%var-x-0.0.1 input.ind-%var171X)))
 (=> $x86 (= ?x74 ?x241))))))))
 ))
 (let (($x219 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x86 (input.spec-%var-x-0.0.1 input.ind-%var170X)))
 (= $x86 (and (bvsle (_ bv0 32) input.ind-%var170X) (bvslt input.ind-%var170X (_ bv10 32))))))
 ))
 (let (($x244 (and $x219 $x249)))
 (let (($x245 (= $x244 true)))
 (let ((?x169 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x204 (concat ?x203 (concat ?x196 (concat ?x189 ?x169)))))
 (let (($x128 (= ?x204 input.dst.llvm-%x)))
 (let (($x112 (= $x128 true)))
 (let (($x16 (= $x112 true)))
 (let (($x205 (= input.dst.llvm-%x ?x204)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x109 $x111)))
 (let (($x121 (and $x31 $x122)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x102 $x121)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x99)))))))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x160 (and true $x159)))
 (let (($x146 (= (bvand ?x57 (_ bv4294967292 32)) ?x57)))
 (let (($x145 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x57 (bvsub ?x57 (_ bv4 32))) (bvult ?x57 (bvsub ?x57 (_ bv4 32))))))
 (let (($x148 (and true $x145)))
 (let (($x144 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x195 (and (and (and $x144 $x148) $x146) $x160)))
 (let (($x51 (and $x144 $x195)))
 (let (($x66 (and (and (and (and $x51 $x108) true) $x117) $x205)))
 (let (($x126 (= $x66 true)))
 (let (($x15 (= $x126 true)))
 (let (($x10 (= $x15 true)))
 (let (($x190 (= $x51 true)))
 (let (($x200 (= $x190 true)))
 (let (($x175 (= $x200 true)))
 (let (($x123 (and $x108 $x117)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x23 (= $x125 true)))
 (let (($x171 (and $x23 $x175)))
 (let (($x9 (and $x171 $x175)))
 (let (($x138 (and $x9 $x10)))
 (let (($x141 (and $x138 $x16)))
 (let (($x250 (and $x141 $x245)))
 (let (($x278 (and $x250 $x281)))
 (let (($x47 (and $x278 $x28)))
 (let (($x134 (and $x47 $x131)))
 (let (($x105 (and $x90 $x81)))
 (let (($x136 (and $x105 $x134)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x132 (and $x83 $x136)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x135 (and $x79 $x132)))
 (let (($x27 (= ?x54 input.spec-%var-x0-0.L2%10%d)))
 (let (($x133 (and $x27 $x135)))
 (let (($x17 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x137 (and $x17 $x133)))
 (let (($x119 (and $x40 $x137)))
 (let ((?x60 (bvadd ?x54 ?x52)))
 (let (($x62 (= ?x60 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x37 (and $x62 $x119)))
 (let (($x63 (= ?x52 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x209 (and $x63 $x37)))
 (let (($x59 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x53 (and $x59 $x209)))
 (let (($x225 (and $x40 $x53)))
 (let (($x32 (bvugt ?x57 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x164 (=> (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x32)))))))
 (let (($x6 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x30 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x6)))))))
 (let (($x33 (and $x30 $x164)))
 (let (($x227 (and $x33 $x225)))
 (let (($x183 (=> $x227 $x233)))
 (not $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x192)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x96)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x177 (concat ?x20 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x57 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x58 (bvadd ?x57 (_ bv3 32))))
 (let ((?x172 (concat (select input.dst.llvm-mem ?x58) (concat ?x161 ?x177))))
 (let ((?x139 (bvadd ?x172 ?x230)))
 (let (($x120 (= (_ bv12 32) ?x139)))
 (let (($x186 (= $x120 true)))
 (let (($x233 (= $x186 true)))
 (let ((?x52 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x38 (= ?x52 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x92 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x80 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x80 (_ bv1 32))))
 (let (($x129 (=> $x116 $x38)))
 (let (($x118 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x208 (= $x116 $x118)))
 (let (($x40 (= false false)))
 (let (($x81 (= ?x80 (_ bv0 32))))
 (let (($x163 (=> $x81 $x40)))
 (let (($x35 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x91 (= $x81 $x35)))
 (let (($x113 (and (and (and $x91 $x163) $x208) $x129)))
 (let (($x131 (= $x113 true)))
 (let ((?x54 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x284 (= ?x54 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x82 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x101 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x101 (_ bv1 32))))
 (let (($x285 (=> $x90 $x284)))
 (let (($x280 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x282 (= $x90 $x280)))
 (let (($x279 (= ?x101 (_ bv0 32))))
 (let (($x277 (=> $x279 $x40)))
 (let (($x276 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x274 (= $x279 $x276)))
 (let (($x288 (and (and (and $x274 $x277) $x282) $x285)))
 (let (($x28 (= $x288 true)))
 (let (($x271 (forall ((input.ind-%var177X (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul input.ind-%var177X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x29))))
 (let ((?x74 (input.spec-%var-x-0.1.1 input.ind-%var177X)))
 (let (($x86 (input.spec-%var-x-0.0.1 input.ind-%var177X)))
 (=> $x86 (= ?x74 ?x241))))))))
 ))
 (let (($x254 (forall ((input.ind-%var176X (_ BitVec 32)) )(let (($x86 (input.spec-%var-x-0.0.1 input.ind-%var176X)))
 (= $x86 (and (bvsle (_ bv0 32) input.ind-%var176X) (bvslt input.ind-%var176X (_ bv10 32))))))
 ))
 (let (($x273 (and $x254 $x271)))
 (let (($x281 (= $x273 true)))
 (let (($x249 (forall ((input.ind-%var171X (_ BitVec 32)) )(let ((?x188 (bvadd (bvmul input.ind-%var171X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x29))))
 (let ((?x74 (input.spec-%var-x-0.1.1 input.ind-%var171X)))
 (let (($x86 (input.spec-%var-x-0.0.1 input.ind-%var171X)))
 (=> $x86 (= ?x74 ?x241))))))))
 ))
 (let (($x219 (forall ((input.ind-%var170X (_ BitVec 32)) )(let (($x86 (input.spec-%var-x-0.0.1 input.ind-%var170X)))
 (= $x86 (and (bvsle (_ bv0 32) input.ind-%var170X) (bvslt input.ind-%var170X (_ bv10 32))))))
 ))
 (let (($x244 (and $x219 $x249)))
 (let (($x245 (= $x244 true)))
 (let ((?x169 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x204 (concat ?x203 (concat ?x196 (concat ?x189 ?x169)))))
 (let (($x128 (= ?x204 input.dst.llvm-%x)))
 (let (($x112 (= $x128 true)))
 (let (($x16 (= $x112 true)))
 (let (($x205 (= input.dst.llvm-%x ?x204)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x114)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x110)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x109 $x111)))
 (let (($x121 (and $x31 $x122)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x102 $x121)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x108 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x99)))))))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x160 (and true $x159)))
 (let (($x146 (= (bvand ?x57 (_ bv4294967292 32)) ?x57)))
 (let (($x145 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x57 (bvsub ?x57 (_ bv4 32))) (bvult ?x57 (bvsub ?x57 (_ bv4 32))))))
 (let (($x148 (and true $x145)))
 (let (($x144 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x195 (and (and (and $x144 $x148) $x146) $x160)))
 (let (($x51 (and $x144 $x195)))
 (let (($x66 (and (and (and (and $x51 $x108) true) $x117) $x205)))
 (let (($x126 (= $x66 true)))
 (let (($x15 (= $x126 true)))
 (let (($x10 (= $x15 true)))
 (let (($x190 (= $x51 true)))
 (let (($x200 (= $x190 true)))
 (let (($x175 (= $x200 true)))
 (let (($x123 (and $x108 $x117)))
 (let (($x124 (= $x123 true)))
 (let (($x125 (= $x124 true)))
 (let (($x23 (= $x125 true)))
 (let (($x171 (and $x23 $x175)))
 (let (($x9 (and $x171 $x175)))
 (let (($x138 (and $x9 $x10)))
 (let (($x141 (and $x138 $x16)))
 (let (($x250 (and $x141 $x245)))
 (let (($x278 (and $x250 $x281)))
 (let (($x47 (and $x278 $x28)))
 (let (($x134 (and $x47 $x131)))
 (let (($x105 (and $x90 $x81)))
 (let (($x136 (and $x105 $x134)))
 (let (($x83 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x132 (and $x83 $x136)))
 (let (($x79 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x135 (and $x79 $x132)))
 (let (($x27 (= ?x54 input.spec-%var-x0-0.L2%10%d)))
 (let (($x133 (and $x27 $x135)))
 (let (($x17 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x137 (and $x17 $x133)))
 (let (($x119 (and $x40 $x137)))
 (let ((?x60 (bvadd ?x54 ?x52)))
 (let (($x62 (= ?x60 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x37 (and $x62 $x119)))
 (let (($x63 (= ?x52 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x209 (and $x63 $x37)))
 (let (($x59 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x53 (and $x59 $x209)))
 (let (($x225 (and $x40 $x53)))
 (let (($x32 (bvugt ?x57 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x164 (=> (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x32)))))))
 (let (($x6 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x30 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x71 $x6)))))))
 (let (($x33 (and $x30 $x164)))
 (let (($x227 (and $x33 $x225)))
 (let (($x183 (=> $x227 $x233)))
 (not $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 168 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171579/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x269)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x252)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x259 (concat ?x142 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x32 (bvadd ?x67 (_ bv3 32))))
 (let ((?x261 (concat (select input.dst.llvm-mem ?x32) (concat ?x266 ?x259))))
 (let ((?x253 (bvadd ?x261 ?x167)))
 (let (($x221 (= (_ bv45 32) ?x253)))
 (let (($x234 (= $x221 true)))
 (let (($x265 (= $x234 true)))
 (let ((?x61 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x217 (= ?x61 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x183 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x5 (ite $x183 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x5 (_ bv1 32))))
 (let (($x214 (=> $x168 $x217)))
 (let (($x220 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x222 (= $x168 $x220)))
 (let (($x24 (= false false)))
 (let (($x89 (= ?x5 (_ bv0 32))))
 (let (($x106 (=> $x89 $x24)))
 (let (($x76 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x21 (= $x89 $x76)))
 (let (($x187 (and (and (and $x21 $x106) $x222) $x214)))
 (let (($x162 (= $x187 true)))
 (let ((?x17 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x192 (= ?x17 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x105 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x95 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x95 (_ bv1 32))))
 (let (($x96 (=> $x229 $x192)))
 (let (($x176 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x13 (= $x229 $x176)))
 (let (($x103 (= ?x95 (_ bv0 32))))
 (let (($x226 (=> $x103 $x24)))
 (let (($x172 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x211 (= $x103 $x172)))
 (let (($x120 (and (and (and $x211 $x226) $x13) $x96)))
 (let (($x186 (= $x120 true)))
 (let (($x34 (forall ((input.ind-%var203X (_ BitVec 32)) )(let ((?x40 (bvadd (bvmul input.ind-%var203X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv1 32))) (select input.dst.llvm-mem ?x40))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv2 32))) ?x282))))
 (let ((?x60 (input.spec-%var-x-0.1.1 input.ind-%var203X)))
 (let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var203X)))
 (=> $x84 (= ?x60 ?x28))))))))
 ))
 (let (($x129 (forall ((input.ind-%var202X (_ BitVec 32)) )(let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var202X)))
 (= $x84 (and (bvsle (_ bv0 32) input.ind-%var202X) (bvslt input.ind-%var202X (_ bv10 32))))))
 ))
 (let (($x20 (and $x129 $x34)))
 (let (($x228 (= $x20 true)))
 (let (($x35 (forall ((input.ind-%var197X (_ BitVec 32)) )(let ((?x40 (bvadd (bvmul input.ind-%var197X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv1 32))) (select input.dst.llvm-mem ?x40))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv2 32))) ?x282))))
 (let ((?x60 (input.spec-%var-x-0.1.1 input.ind-%var197X)))
 (let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var197X)))
 (=> $x84 (= ?x60 ?x28))))))))
 ))
 (let (($x235 (forall ((input.ind-%var196X (_ BitVec 32)) )(let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var196X)))
 (= $x84 (and (bvsle (_ bv0 32) input.ind-%var196X) (bvslt input.ind-%var196X (_ bv10 32))))))
 ))
 (let (($x91 (and $x235 $x35)))
 (let (($x163 (= $x91 true)))
 (let ((?x191 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x66 (concat ?x199 (concat ?x170 ?x191)))))
 (let (($x210 (= ?x126 input.dst.llvm-%x)))
 (let (($x213 (= $x210 true)))
 (let (($x212 (= $x213 true)))
 (let (($x15 (= input.dst.llvm-%x ?x126)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x124)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x122 $x117)))
 (let (($x23 (and $x123 $x125)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x97 $x23)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x104)))))))
 (let (($x51 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x190 (and true $x51)))
 (let (($x157 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x194 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x156 (and true $x194)))
 (let (($x145 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x171 (and (and (and $x145 $x156) $x157) $x190)))
 (let (($x9 (and $x145 $x171)))
 (let (($x112 (and (and (and (and $x9 $x114) true) $x150) $x15)))
 (let (($x16 (= $x112 true)))
 (let (($x141 (= $x16 true)))
 (let (($x69 (= $x141 true)))
 (let (($x206 (= $x9 true)))
 (let (($x207 (= $x206 true)))
 (let (($x77 (= $x207 true)))
 (let (($x143 (and $x114 $x150)))
 (let (($x144 (= $x143 true)))
 (let (($x155 (= $x144 true)))
 (let (($x153 (= $x155 true)))
 (let (($x166 (and $x153 $x77)))
 (let (($x202 (and $x166 $x77)))
 (let (($x86 (and $x202 $x69)))
 (let (($x215 (and $x86 $x212)))
 (let (($x130 (and $x215 $x163)))
 (let (($x177 (and $x130 $x228)))
 (let (($x233 (and $x177 $x186)))
 (let (($x179 (and $x233 $x162)))
 (let (($x182 (and $x103 $x179)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x184 (and $x81 $x182)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x180 (and $x92 $x184)))
 (let (($x101 (= ?x17 input.spec-%var-x0-0.L2%10%d)))
 (let (($x231 (and $x101 $x180)))
 (let (($x83 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x181 (and $x83 $x231)))
 (let (($x185 (and $x24 $x181)))
 (let ((?x64 (bvadd ?x17 ?x61)))
 (let (($x73 (= ?x64 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x78 (and $x73 $x185)))
 (let (($x42 (= ?x61 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x257 (and $x42 $x78)))
 (let (($x63 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x246 (and $x63 $x257)))
 (let (($x248 (and $x24 $x246)))
 (let (($x46 (bvugt ?x67 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x59 (=> (bvule ?x67 (bvsub (bvadd ?x67 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x46)))))))
 (let (($x8 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x11 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x8)))))))
 (let (($x19 (and $x11 $x59)))
 (let (($x251 (and $x19 $x248)))
 (let (($x256 (=> $x251 $x265)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x269)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x252)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x259 (concat ?x142 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x67 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x32 (bvadd ?x67 (_ bv3 32))))
 (let ((?x261 (concat (select input.dst.llvm-mem ?x32) (concat ?x266 ?x259))))
 (let ((?x253 (bvadd ?x261 ?x167)))
 (let (($x221 (= (_ bv45 32) ?x253)))
 (let (($x234 (= $x221 true)))
 (let (($x265 (= $x234 true)))
 (let ((?x61 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x217 (= ?x61 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x183 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x5 (ite $x183 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x5 (_ bv1 32))))
 (let (($x214 (=> $x168 $x217)))
 (let (($x220 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x222 (= $x168 $x220)))
 (let (($x24 (= false false)))
 (let (($x89 (= ?x5 (_ bv0 32))))
 (let (($x106 (=> $x89 $x24)))
 (let (($x76 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x21 (= $x89 $x76)))
 (let (($x187 (and (and (and $x21 $x106) $x222) $x214)))
 (let (($x162 (= $x187 true)))
 (let ((?x17 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x192 (= ?x17 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x105 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x95 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x95 (_ bv1 32))))
 (let (($x96 (=> $x229 $x192)))
 (let (($x176 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x13 (= $x229 $x176)))
 (let (($x103 (= ?x95 (_ bv0 32))))
 (let (($x226 (=> $x103 $x24)))
 (let (($x172 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x211 (= $x103 $x172)))
 (let (($x120 (and (and (and $x211 $x226) $x13) $x96)))
 (let (($x186 (= $x120 true)))
 (let (($x34 (forall ((input.ind-%var203X (_ BitVec 32)) )(let ((?x40 (bvadd (bvmul input.ind-%var203X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv1 32))) (select input.dst.llvm-mem ?x40))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv2 32))) ?x282))))
 (let ((?x60 (input.spec-%var-x-0.1.1 input.ind-%var203X)))
 (let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var203X)))
 (=> $x84 (= ?x60 ?x28))))))))
 ))
 (let (($x129 (forall ((input.ind-%var202X (_ BitVec 32)) )(let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var202X)))
 (= $x84 (and (bvsle (_ bv0 32) input.ind-%var202X) (bvslt input.ind-%var202X (_ bv10 32))))))
 ))
 (let (($x20 (and $x129 $x34)))
 (let (($x228 (= $x20 true)))
 (let (($x35 (forall ((input.ind-%var197X (_ BitVec 32)) )(let ((?x40 (bvadd (bvmul input.ind-%var197X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv1 32))) (select input.dst.llvm-mem ?x40))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv2 32))) ?x282))))
 (let ((?x60 (input.spec-%var-x-0.1.1 input.ind-%var197X)))
 (let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var197X)))
 (=> $x84 (= ?x60 ?x28))))))))
 ))
 (let (($x235 (forall ((input.ind-%var196X (_ BitVec 32)) )(let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var196X)))
 (= $x84 (and (bvsle (_ bv0 32) input.ind-%var196X) (bvslt input.ind-%var196X (_ bv10 32))))))
 ))
 (let (($x91 (and $x235 $x35)))
 (let (($x163 (= $x91 true)))
 (let ((?x191 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x66 (concat ?x199 (concat ?x170 ?x191)))))
 (let (($x210 (= ?x126 input.dst.llvm-%x)))
 (let (($x213 (= $x210 true)))
 (let (($x212 (= $x213 true)))
 (let (($x15 (= input.dst.llvm-%x ?x126)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x124)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x122 $x117)))
 (let (($x23 (and $x123 $x125)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x97 $x23)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x114 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x104)))))))
 (let (($x51 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x190 (and true $x51)))
 (let (($x157 (= (bvand ?x67 (_ bv4294967292 32)) ?x67)))
 (let (($x194 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x67 (bvsub ?x67 (_ bv4 32))) (bvult ?x67 (bvsub ?x67 (_ bv4 32))))))
 (let (($x156 (and true $x194)))
 (let (($x145 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x171 (and (and (and $x145 $x156) $x157) $x190)))
 (let (($x9 (and $x145 $x171)))
 (let (($x112 (and (and (and (and $x9 $x114) true) $x150) $x15)))
 (let (($x16 (= $x112 true)))
 (let (($x141 (= $x16 true)))
 (let (($x69 (= $x141 true)))
 (let (($x206 (= $x9 true)))
 (let (($x207 (= $x206 true)))
 (let (($x77 (= $x207 true)))
 (let (($x143 (and $x114 $x150)))
 (let (($x144 (= $x143 true)))
 (let (($x155 (= $x144 true)))
 (let (($x153 (= $x155 true)))
 (let (($x166 (and $x153 $x77)))
 (let (($x202 (and $x166 $x77)))
 (let (($x86 (and $x202 $x69)))
 (let (($x215 (and $x86 $x212)))
 (let (($x130 (and $x215 $x163)))
 (let (($x177 (and $x130 $x228)))
 (let (($x233 (and $x177 $x186)))
 (let (($x179 (and $x233 $x162)))
 (let (($x182 (and $x103 $x179)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x184 (and $x81 $x182)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x180 (and $x92 $x184)))
 (let (($x101 (= ?x17 input.spec-%var-x0-0.L2%10%d)))
 (let (($x231 (and $x101 $x180)))
 (let (($x83 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x181 (and $x83 $x231)))
 (let (($x185 (and $x24 $x181)))
 (let ((?x64 (bvadd ?x17 ?x61)))
 (let (($x73 (= ?x64 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x78 (and $x73 $x185)))
 (let (($x42 (= ?x61 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x257 (and $x42 $x78)))
 (let (($x63 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x246 (and $x63 $x257)))
 (let (($x248 (and $x24 $x246)))
 (let (($x46 (bvugt ?x67 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x59 (=> (bvule ?x67 (bvsub (bvadd ?x67 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x46)))))))
 (let (($x8 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x6 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x11 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x8)))))))
 (let (($x19 (and $x11 $x59)))
 (let (($x251 (and $x19 $x248)))
 (let (($x256 (=> $x251 $x265)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 167 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171579/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x187 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x162 (ite $x187 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x162 (_ bv1 32))))
 (let (($x179 (= ?x162 (_ bv0 32))))
 (let (($x262 (or $x179 $x181)))
 (let (($x120 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x186 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x186 (_ bv1 32))))
 (let (($x269 (and $x76 $x262)))
 (let (($x233 (= ?x186 (_ bv0 32))))
 (let (($x252 (or $x233 $x269)))
 (let (($x167 (or false $x252)))
 (let (($x253 (= $x167 true)))
 (let (($x221 (= $x253 true)))
 (let ((?x70 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x246 (= ?x70 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x248 (=> $x181 $x246)))
 (let (($x185 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x78 (= $x181 $x185)))
 (let (($x43 (= false false)))
 (let (($x231 (=> $x179 $x43)))
 (let (($x184 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x180 (= $x179 $x184)))
 (let (($x270 (and (and (and $x180 $x231) $x78) $x248)))
 (let (($x266 (= $x270 true)))
 (let ((?x83 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x168 (= ?x83 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x220 (=> $x76 $x168)))
 (let (($x21 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x106 (= $x76 $x21)))
 (let (($x224 (and (and (= $x233 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x233 $x43)) $x106)))
 (let (($x127 (and $x224 $x220)))
 (let (($x217 (= $x127 true)))
 (let (($x139 (forall ((input.ind-%var222X (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul input.ind-%var222X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x165))))
 (let ((?x64 (input.spec-%var-x-0.1.1 input.ind-%var222X)))
 (let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var222X)))
 (=> $x84 (= ?x64 ?x229))))))))
 ))
 (let (($x288 (forall ((input.ind-%var221X (_ BitVec 32)) )(let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var221X)))
 (= $x84 (and (bvsle (_ bv0 32) input.ind-%var221X) (bvslt input.ind-%var221X (_ bv10 32))))))
 ))
 (let (($x93 (and $x288 $x139)))
 (let (($x192 (= $x93 true)))
 (let ((?x196 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x141 (concat ?x15 (concat ?x191 ?x196)))))
 (let (($x86 (= ?x69 input.dst.llvm-%x)))
 (let (($x210 (= $x86 true)))
 (let (($x213 (= $x210 true)))
 (let (($x143 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x144 (and true $x143)))
 (let ((?x85 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x123 (= (bvand ?x85 (_ bv4294967292 32)) ?x85)))
 (let (($x122 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x85 (bvsub ?x85 (_ bv4 32))) (bvult ?x85 (bvsub ?x85 (_ bv4 32))))))
 (let (($x121 (and true $x122)))
 (let (($x110 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x154 (and (and (and $x110 $x121) $x123) $x144)))
 (let (($x147 (and $x110 $x154)))
 (let (($x145 (= $x147 true)))
 (let (($x198 (= $x145 true)))
 (let (($x148 (= $x198 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x77)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x171 $x206)))
 (let (($x202 (and $x207 $x166)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x194 $x202)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x157 $x175)))))))
 (let (($x138 (and $x190 $x10)))
 (let (($x128 (= $x138 true)))
 (let (($x203 (= $x128 true)))
 (let (($x205 (= $x203 true)))
 (let (($x66 (and $x148 $x205)))
 (let (($x169 (and $x66 $x148)))
 (let (($x212 (and $x169 $x213)))
 (let (($x96 (and $x212 $x192)))
 (let (($x214 (and $x96 $x217)))
 (let (($x216 (and $x214 $x266)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x142 (and $x104 $x216)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x258 (and $x94 $x142)))
 (let (($x107 (= ?x83 input.spec-%var-x0-0.L2%10%d)))
 (let (($x259 (and $x107 $x258)))
 (let (($x81 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x264 (and $x81 $x259)))
 (let (($x261 (and $x43 $x264)))
 (let ((?x82 (bvadd ?x83 ?x70)))
 (let (($x90 (= ?x82 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x18 (and $x90 $x261)))
 (let (($x79 (= ?x70 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x267 (and $x79 $x18)))
 (let (($x62 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x247 (and $x62 $x267)))
 (let (($x260 (and $x43 $x247)))
 (let (($x44 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x85 (_ bv3 32)))))
 (let (($x72 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x44)))))))
 (let (($x75 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x50 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x75)))))))
 (let (($x65 (and $x50 $x72)))
 (let (($x263 (and $x65 $x260)))
 (let (($x234 (=> $x263 $x221)))
 (not $x234)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let (($x187 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x162 (ite $x187 (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x162 (_ bv1 32))))
 (let (($x179 (= ?x162 (_ bv0 32))))
 (let (($x262 (or $x179 $x181)))
 (let (($x120 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x186 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x186 (_ bv1 32))))
 (let (($x269 (and $x76 $x262)))
 (let (($x233 (= ?x186 (_ bv0 32))))
 (let (($x252 (or $x233 $x269)))
 (let (($x167 (or false $x252)))
 (let (($x253 (= $x167 true)))
 (let (($x221 (= $x253 true)))
 (let ((?x70 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x246 (= ?x70 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x248 (=> $x181 $x246)))
 (let (($x185 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x78 (= $x181 $x185)))
 (let (($x43 (= false false)))
 (let (($x231 (=> $x179 $x43)))
 (let (($x184 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x180 (= $x179 $x184)))
 (let (($x270 (and (and (and $x180 $x231) $x78) $x248)))
 (let (($x266 (= $x270 true)))
 (let ((?x83 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x168 (= ?x83 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x220 (=> $x76 $x168)))
 (let (($x21 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x106 (= $x76 $x21)))
 (let (($x224 (and (and (= $x233 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x233 $x43)) $x106)))
 (let (($x127 (and $x224 $x220)))
 (let (($x217 (= $x127 true)))
 (let (($x139 (forall ((input.ind-%var222X (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul input.ind-%var222X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x165))))
 (let ((?x64 (input.spec-%var-x-0.1.1 input.ind-%var222X)))
 (let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var222X)))
 (=> $x84 (= ?x64 ?x229))))))))
 ))
 (let (($x288 (forall ((input.ind-%var221X (_ BitVec 32)) )(let (($x84 (input.spec-%var-x-0.0.1 input.ind-%var221X)))
 (= $x84 (and (bvsle (_ bv0 32) input.ind-%var221X) (bvslt input.ind-%var221X (_ bv10 32))))))
 ))
 (let (($x93 (and $x288 $x139)))
 (let (($x192 (= $x93 true)))
 (let ((?x196 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x141 (concat ?x15 (concat ?x191 ?x196)))))
 (let (($x86 (= ?x69 input.dst.llvm-%x)))
 (let (($x210 (= $x86 true)))
 (let (($x213 (= $x210 true)))
 (let (($x143 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x144 (and true $x143)))
 (let ((?x85 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let (($x123 (= (bvand ?x85 (_ bv4294967292 32)) ?x85)))
 (let (($x122 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x85 (bvsub ?x85 (_ bv4 32))) (bvult ?x85 (bvsub ?x85 (_ bv4 32))))))
 (let (($x121 (and true $x122)))
 (let (($x110 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x154 (and (and (and $x110 $x121) $x123) $x144)))
 (let (($x147 (and $x110 $x154)))
 (let (($x145 (= $x147 true)))
 (let (($x198 (= $x145 true)))
 (let (($x148 (= $x198 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x77)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x171 $x206)))
 (let (($x202 (and $x207 $x166)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x194 $x202)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x157 $x175)))))))
 (let (($x138 (and $x190 $x10)))
 (let (($x128 (= $x138 true)))
 (let (($x203 (= $x128 true)))
 (let (($x205 (= $x203 true)))
 (let (($x66 (and $x148 $x205)))
 (let (($x169 (and $x66 $x148)))
 (let (($x212 (and $x169 $x213)))
 (let (($x96 (and $x212 $x192)))
 (let (($x214 (and $x96 $x217)))
 (let (($x216 (and $x214 $x266)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x142 (and $x104 $x216)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x258 (and $x94 $x142)))
 (let (($x107 (= ?x83 input.spec-%var-x0-0.L2%10%d)))
 (let (($x259 (and $x107 $x258)))
 (let (($x81 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x264 (and $x81 $x259)))
 (let (($x261 (and $x43 $x264)))
 (let ((?x82 (bvadd ?x83 ?x70)))
 (let (($x90 (= ?x82 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x18 (and $x90 $x261)))
 (let (($x79 (= ?x70 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x267 (and $x79 $x18)))
 (let (($x62 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x247 (and $x62 $x267)))
 (let (($x260 (and $x43 $x247)))
 (let (($x44 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x85 (_ bv3 32)))))
 (let (($x72 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x87 $x44)))))))
 (let (($x75 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%x (_ bv3 32)))))
 (let (($x50 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x75)))))))
 (let (($x65 (and $x50 $x72)))
 (let (($x263 (and $x65 $x260)))
 (let (($x234 (=> $x263 $x221)))
 (not $x234)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171579/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x118)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x275)))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x227 (concat ?x225 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x44 (bvadd ?x58 (_ bv3 32))))
 (let ((?x135 (concat (select input.dst.llvm-mem ?x44) (concat ?x209 ?x227))))
 (let ((?x276 (bvadd ?x135 ?x238)))
 (let ((?x88 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x81 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x100 (bvadd ?x81 ?x88)))
 (let (($x178 (= ?x100 ?x276)))
 (let (($x131 (= $x178 true)))
 (let (($x161 (= $x131 true)))
 (let (($x243 (= ?x88 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x123 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x153 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x153 (_ bv1 32))))
 (let (($x281 (=> $x125 $x243)))
 (let (($x74 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x188 (= $x125 $x74)))
 (let (($x52 (= false false)))
 (let (($x98 (= ?x153 (_ bv0 32))))
 (let (($x218 (=> $x98 $x52)))
 (let (($x29 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x241 (= $x98 $x29)))
 (let (($x271 (and (and (and $x241 $x218) $x188) $x281)))
 (let (($x244 (= $x271 true)))
 (let (($x20 (= ?x81 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x97 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x155 (ite $x97 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x155 (_ bv1 32))))
 (let (($x42 (=> $x117 $x20)))
 (let (($x235 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x34 (= $x117 $x235)))
 (let (($x47 (= ?x155 (_ bv0 32))))
 (let (($x193 (=> $x47 $x52)))
 (let (($x129 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x54 (= $x47 $x129)))
 (let (($x12 (and (and (and $x54 $x193) $x34) $x42)))
 (let (($x48 (= $x12 true)))
 (let (($x35 (forall ((input.ind-%var250X (_ BitVec 32)) )(let ((?x78 (bvadd (bvmul input.ind-%var250X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x248))))
 (let ((?x82 (input.spec-%var-x-0.1.1 input.ind-%var250X)))
 (let (($x122 (input.spec-%var-x-0.0.1 input.ind-%var250X)))
 (=> $x122 (= ?x82 ?x259))))))))
 ))
 (let (($x221 (forall ((input.ind-%var249X (_ BitVec 32)) )(let (($x122 (input.spec-%var-x-0.0.1 input.ind-%var249X)))
 (= $x122 (and (bvsle (_ bv0 32) input.ind-%var249X) (bvslt input.ind-%var249X (_ bv10 32))))))
 ))
 (let (($x284 (and $x221 $x35)))
 (let (($x28 (= $x284 true)))
 (let (($x18 (forall ((input.ind-%var244X (_ BitVec 32)) )(let ((?x78 (bvadd (bvmul input.ind-%var244X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x248))))
 (let ((?x82 (input.spec-%var-x-0.1.1 input.ind-%var244X)))
 (let (($x122 (input.spec-%var-x-0.0.1 input.ind-%var244X)))
 (=> $x122 (= ?x82 ?x259))))))))
 ))
 (let (($x21 (forall ((input.ind-%var243X (_ BitVec 32)) )(let (($x122 (input.spec-%var-x-0.0.1 input.ind-%var243X)))
 (= $x122 (and (bvsle (_ bv0 32) input.ind-%var243X) (bvslt input.ind-%var243X (_ bv10 32))))))
 ))
 (let (($x267 (and $x21 $x18)))
 (let (($x247 (= $x267 true)))
 (let ((?x274 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x230 (concat ?x226 (concat ?x64 (concat ?x60 ?x274)))))
 (let (($x13 (= ?x230 input.dst.llvm-%x)))
 (let (($x139 (= $x13 true)))
 (let (($x93 (= $x139 true)))
 (let (($x172 (= input.dst.llvm-%x ?x230)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x195)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x175 $x158)))
 (let (($x146 (and $x160 $x190)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x143 $x146)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x198)))))))
 (let (($x15 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x170 (and true $x15)))
 (let (($x201 (= (bvand ?x58 (_ bv4294967292 32)) ?x58)))
 (let (($x205 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x58 (bvsub ?x58 (_ bv4 32))) (bvult ?x58 (bvsub ?x58 (_ bv4 32))))))
 (let (($x66 (and true $x205)))
 (let (($x202 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x189 (and (and (and $x202 $x66) $x201) $x170)))
 (let (($x112 (and $x202 $x189)))
 (let (($x105 (and (and (and (and $x112 $x157) true) $x194) $x172)))
 (let (($x165 (= $x105 true)))
 (let (($x24 (= $x165 true)))
 (let (($x229 (= $x24 true)))
 (let (($x69 (= $x112 true)))
 (let (($x86 (= $x69 true)))
 (let (($x210 (= $x86 true)))
 (let (($x171 (and $x157 $x194)))
 (let (($x9 (= $x171 true)))
 (let (($x206 (= $x9 true)))
 (let (($x207 (= $x206 true)))
 (let (($x213 (and $x207 $x210)))
 (let (($x212 (and $x213 $x210)))
 (let (($x176 (and $x212 $x229)))
 (let (($x192 (and $x176 $x93)))
 (let (($x260 (and $x192 $x247)))
 (let (($x282 (and $x260 $x28)))
 (let (($x56 (and $x282 $x48)))
 (let (($x245 (and $x56 $x244)))
 (let (($x124 (and $x117 $x125)))
 (let (($x249 (and $x124 $x245)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x250 (and $x99 $x249)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x273 (and $x114 $x250)))
 (let (($x109 (= ?x81 input.spec-%var-x0-0.L2%10%d)))
 (let (($x279 (and $x109 $x273)))
 (let (($x104 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x113 (and $x104 $x279)))
 (let (($x134 (and $x52 $x113)))
 (let (($x31 (= ?x100 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x116 (and $x31 $x134)))
 (let (($x92 (= ?x88 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x208 (and $x92 $x116)))
 (let (($x73 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x140 (and $x73 $x208)))
 (let (($x136 (and $x52 $x140)))
 (let (($x33 (bvugt ?x58 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x61 (=> (bvule ?x58 (bvsub (bvadd ?x58 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x164 $x33)))))))
 (let (($x57 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x39 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x57)))))))
 (let (($x22 (and $x39 $x61)))
 (let (($x219 (and $x22 $x136)))
 (let (($x255 (=> $x219 $x161)))
 (not $x255)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x118)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x275)))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x227 (concat ?x225 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x58 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x44 (bvadd ?x58 (_ bv3 32))))
 (let ((?x135 (concat (select input.dst.llvm-mem ?x44) (concat ?x209 ?x227))))
 (let ((?x276 (bvadd ?x135 ?x238)))
 (let ((?x88 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let ((?x81 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let ((?x100 (bvadd ?x81 ?x88)))
 (let (($x178 (= ?x100 ?x276)))
 (let (($x131 (= $x178 true)))
 (let (($x161 (= $x131 true)))
 (let (($x243 (= ?x88 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x123 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x153 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x153 (_ bv1 32))))
 (let (($x281 (=> $x125 $x243)))
 (let (($x74 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x188 (= $x125 $x74)))
 (let (($x52 (= false false)))
 (let (($x98 (= ?x153 (_ bv0 32))))
 (let (($x218 (=> $x98 $x52)))
 (let (($x29 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x241 (= $x98 $x29)))
 (let (($x271 (and (and (and $x241 $x218) $x188) $x281)))
 (let (($x244 (= $x271 true)))
 (let (($x20 (= ?x81 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x97 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x155 (ite $x97 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x155 (_ bv1 32))))
 (let (($x42 (=> $x117 $x20)))
 (let (($x235 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x34 (= $x117 $x235)))
 (let (($x47 (= ?x155 (_ bv0 32))))
 (let (($x193 (=> $x47 $x52)))
 (let (($x129 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x54 (= $x47 $x129)))
 (let (($x12 (and (and (and $x54 $x193) $x34) $x42)))
 (let (($x48 (= $x12 true)))
 (let (($x35 (forall ((input.ind-%var250X (_ BitVec 32)) )(let ((?x78 (bvadd (bvmul input.ind-%var250X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x248))))
 (let ((?x82 (input.spec-%var-x-0.1.1 input.ind-%var250X)))
 (let (($x122 (input.spec-%var-x-0.0.1 input.ind-%var250X)))
 (=> $x122 (= ?x82 ?x259))))))))
 ))
 (let (($x221 (forall ((input.ind-%var249X (_ BitVec 32)) )(let (($x122 (input.spec-%var-x-0.0.1 input.ind-%var249X)))
 (= $x122 (and (bvsle (_ bv0 32) input.ind-%var249X) (bvslt input.ind-%var249X (_ bv10 32))))))
 ))
 (let (($x284 (and $x221 $x35)))
 (let (($x28 (= $x284 true)))
 (let (($x18 (forall ((input.ind-%var244X (_ BitVec 32)) )(let ((?x78 (bvadd (bvmul input.ind-%var244X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x248))))
 (let ((?x82 (input.spec-%var-x-0.1.1 input.ind-%var244X)))
 (let (($x122 (input.spec-%var-x-0.0.1 input.ind-%var244X)))
 (=> $x122 (= ?x82 ?x259))))))))
 ))
 (let (($x21 (forall ((input.ind-%var243X (_ BitVec 32)) )(let (($x122 (input.spec-%var-x-0.0.1 input.ind-%var243X)))
 (= $x122 (and (bvsle (_ bv0 32) input.ind-%var243X) (bvslt input.ind-%var243X (_ bv10 32))))))
 ))
 (let (($x267 (and $x21 $x18)))
 (let (($x247 (= $x267 true)))
 (let ((?x274 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x230 (concat ?x226 (concat ?x64 (concat ?x60 ?x274)))))
 (let (($x13 (= ?x230 input.dst.llvm-%x)))
 (let (($x139 (= $x13 true)))
 (let (($x93 (= $x139 true)))
 (let (($x172 (= input.dst.llvm-%x ?x230)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x195)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x175 $x158)))
 (let (($x146 (and $x160 $x190)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x143 $x146)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x198)))))))
 (let (($x15 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x170 (and true $x15)))
 (let (($x201 (= (bvand ?x58 (_ bv4294967292 32)) ?x58)))
 (let (($x205 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x58 (bvsub ?x58 (_ bv4 32))) (bvult ?x58 (bvsub ?x58 (_ bv4 32))))))
 (let (($x66 (and true $x205)))
 (let (($x202 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x189 (and (and (and $x202 $x66) $x201) $x170)))
 (let (($x112 (and $x202 $x189)))
 (let (($x105 (and (and (and (and $x112 $x157) true) $x194) $x172)))
 (let (($x165 (= $x105 true)))
 (let (($x24 (= $x165 true)))
 (let (($x229 (= $x24 true)))
 (let (($x69 (= $x112 true)))
 (let (($x86 (= $x69 true)))
 (let (($x210 (= $x86 true)))
 (let (($x171 (and $x157 $x194)))
 (let (($x9 (= $x171 true)))
 (let (($x206 (= $x9 true)))
 (let (($x207 (= $x206 true)))
 (let (($x213 (and $x207 $x210)))
 (let (($x212 (and $x213 $x210)))
 (let (($x176 (and $x212 $x229)))
 (let (($x192 (and $x176 $x93)))
 (let (($x260 (and $x192 $x247)))
 (let (($x282 (and $x260 $x28)))
 (let (($x56 (and $x282 $x48)))
 (let (($x245 (and $x56 $x244)))
 (let (($x124 (and $x117 $x125)))
 (let (($x249 (and $x124 $x245)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x250 (and $x99 $x249)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x273 (and $x114 $x250)))
 (let (($x109 (= ?x81 input.spec-%var-x0-0.L2%10%d)))
 (let (($x279 (and $x109 $x273)))
 (let (($x104 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x113 (and $x104 $x279)))
 (let (($x134 (and $x52 $x113)))
 (let (($x31 (= ?x100 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x116 (and $x31 $x134)))
 (let (($x92 (= ?x88 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x208 (and $x92 $x116)))
 (let (($x73 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x140 (and $x73 $x208)))
 (let (($x136 (and $x52 $x140)))
 (let (($x33 (bvugt ?x58 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x61 (=> (bvule ?x58 (bvsub (bvadd ?x58 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x164 $x33)))))))
 (let (($x57 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x39 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x57)))))))
 (let (($x22 (and $x39 $x61)))
 (let (($x219 (and $x22 $x136)))
 (let (($x255 (=> $x219 $x161)))
 (not $x255)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171579/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x163)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x89)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x280 (concat ?x49 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x115 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x33 (bvadd ?x115 (_ bv3 32))))
 (let ((?x287 (concat (select input.dst.llvm-mem ?x33) (concat ?x215 ?x280))))
 (let ((?x224 (bvadd ?x287 ?x253)))
 (let (($x181 (= (_ bv12 32) ?x224)))
 (let (($x130 (= $x181 true)))
 (let (($x265 (= $x130 true)))
 (let ((?x92 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x183 (= ?x92 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x147 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x145 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x145 (_ bv1 32))))
 (let (($x168 (=> $x106 $x183)))
 (let (($x223 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x96 (= $x106 $x223)))
 (let (($x63 (= false false)))
 (let (($x198 (= ?x145 (_ bv0 32))))
 (let (($x84 (=> $x198 $x63)))
 (let (($x25 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x23 (= $x198 $x25)))
 (let (($x180 (and (and (and $x23 $x84) $x96) $x168)))
 (let (($x162 (= $x180 true)))
 (let ((?x108 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x276 (= ?x108 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x125 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x154 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x154 (_ bv1 32))))
 (let (($x178 (=> $x151 $x276)))
 (let (($x118 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x275 (= $x151 $x118)))
 (let (($x26 (= ?x154 (_ bv0 32))))
 (let (($x119 (=> $x26 $x63)))
 (let (($x53 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x152 (= $x26 $x53)))
 (let (($x255 (and (and (and $x152 $x119) $x275) $x178)))
 (let (($x232 (= $x255 true)))
 (let (($x227 (forall ((input.ind-%var276X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var276X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x20))))
 (let ((?x81 (input.spec-%var-x-0.1.1 input.ind-%var276X)))
 (let (($x124 (input.spec-%var-x-0.0.1 input.ind-%var276X)))
 (=> $x124 (= ?x81 ?x197))))))))
 ))
 (let (($x245 (forall ((input.ind-%var275X (_ BitVec 32)) )(let (($x124 (input.spec-%var-x-0.0.1 input.ind-%var275X)))
 (= $x124 (and (bvsle (_ bv0 32) input.ind-%var275X) (bvslt input.ind-%var275X (_ bv10 32))))))
 ))
 (let (($x133 (and $x245 $x227)))
 (let (($x135 (= $x133 true)))
 (let (($x218 (forall ((input.ind-%var270X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var270X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x20))))
 (let ((?x81 (input.spec-%var-x-0.1.1 input.ind-%var270X)))
 (let (($x124 (input.spec-%var-x-0.0.1 input.ind-%var270X)))
 (=> $x124 (= ?x81 ?x197))))))))
 ))
 (let (($x259 (forall ((input.ind-%var269X (_ BitVec 32)) )(let (($x124 (input.spec-%var-x-0.0.1 input.ind-%var269X)))
 (= $x124 (and (bvsle (_ bv0 32) input.ind-%var269X) (bvslt input.ind-%var269X (_ bv10 32))))))
 ))
 (let (($x278 (and $x259 $x218)))
 (let (($x74 (= $x278 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x176 (concat ?x229 (concat ?x105 (concat ?x40 ?x60)))))
 (let (($x222 (= ?x176 input.dst.llvm-%x)))
 (let (($x76 (= $x222 true)))
 (let (($x21 (= $x76 true)))
 (let (($x13 (= input.dst.llvm-%x ?x176)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x77)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x171 $x206)))
 (let (($x202 (and $x207 $x166)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x51 $x202)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x159)))))))
 (let (($x210 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x213 (and true $x210)))
 (let (($x170 (= (bvand ?x115 (_ bv4294967292 32)) ?x115)))
 (let (($x204 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x115 (bvsub ?x115 (_ bv4 32))) (bvult ?x115 (bvsub ?x115 (_ bv4 32))))))
 (let (($x126 (and true $x204)))
 (let (($x169 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x95 (and (and (and $x169 $x126) $x170) $x213)))
 (let (($x103 (and $x169 $x95)))
 (let (($x83 (and (and (and (and $x103 $x194) true) $x138) $x13)))
 (let (($x122 (= $x83 true)))
 (let (($x68 (= $x122 true)))
 (let (($x233 (= $x68 true)))
 (let (($x17 (= $x103 true)))
 (let (($x177 (= $x17 true)))
 (let (($x226 (= $x177 true)))
 (let (($x10 (and $x194 $x138)))
 (let (($x128 (= $x10 true)))
 (let (($x203 (= $x128 true)))
 (let (($x205 (= $x203 true)))
 (let (($x285 (and $x205 $x226)))
 (let (($x288 (and $x285 $x226)))
 (let (($x43 (and $x288 $x233)))
 (let (($x82 (and $x43 $x21)))
 (let (($x188 (and $x82 $x74)))
 (let (($x38 (and $x188 $x135)))
 (let (($x101 (and $x38 $x232)))
 (let (($x179 (and $x101 $x162)))
 (let (($x148 (and $x151 $x198)))
 (let (($x217 (and $x148 $x179)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x214 (and $x153 $x217)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x127 (and $x117 $x214)))
 (let (($x97 (= ?x108 input.spec-%var-x0-0.L2%10%d)))
 (let (($x187 (and $x97 $x127)))
 (let (($x111 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x182 (and $x111 $x187)))
 (let (($x231 (and $x63 $x182)))
 (let ((?x104 (bvadd ?x108 ?x92)))
 (let (($x109 (= ?x104 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x27 (and $x109 $x231)))
 (let (($x31 (= ?x92 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x263 (and $x31 $x27)))
 (let (($x90 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x269 (and $x90 $x263)))
 (let (($x252 (and $x63 $x269)))
 (let (($x19 (bvugt ?x115 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x70 (=> (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x19)))))))
 (let (($x67 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x87 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x67)))))))
 (let (($x45 (and $x87 $x70)))
 (let (($x14 (and $x45 $x252)))
 (let (($x41 (=> $x14 $x265)))
 (not $x41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x163)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x89)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x280 (concat ?x49 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x115 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x33 (bvadd ?x115 (_ bv3 32))))
 (let ((?x287 (concat (select input.dst.llvm-mem ?x33) (concat ?x215 ?x280))))
 (let ((?x224 (bvadd ?x287 ?x253)))
 (let (($x181 (= (_ bv12 32) ?x224)))
 (let (($x130 (= $x181 true)))
 (let (($x265 (= $x130 true)))
 (let ((?x92 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x183 (= ?x92 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x147 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x145 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x145 (_ bv1 32))))
 (let (($x168 (=> $x106 $x183)))
 (let (($x223 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x96 (= $x106 $x223)))
 (let (($x63 (= false false)))
 (let (($x198 (= ?x145 (_ bv0 32))))
 (let (($x84 (=> $x198 $x63)))
 (let (($x25 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x23 (= $x198 $x25)))
 (let (($x180 (and (and (and $x23 $x84) $x96) $x168)))
 (let (($x162 (= $x180 true)))
 (let ((?x108 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x276 (= ?x108 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x125 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x154 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x154 (_ bv1 32))))
 (let (($x178 (=> $x151 $x276)))
 (let (($x118 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x275 (= $x151 $x118)))
 (let (($x26 (= ?x154 (_ bv0 32))))
 (let (($x119 (=> $x26 $x63)))
 (let (($x53 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x152 (= $x26 $x53)))
 (let (($x255 (and (and (and $x152 $x119) $x275) $x178)))
 (let (($x232 (= $x255 true)))
 (let (($x227 (forall ((input.ind-%var276X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var276X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x20))))
 (let ((?x81 (input.spec-%var-x-0.1.1 input.ind-%var276X)))
 (let (($x124 (input.spec-%var-x-0.0.1 input.ind-%var276X)))
 (=> $x124 (= ?x81 ?x197))))))))
 ))
 (let (($x245 (forall ((input.ind-%var275X (_ BitVec 32)) )(let (($x124 (input.spec-%var-x-0.0.1 input.ind-%var275X)))
 (= $x124 (and (bvsle (_ bv0 32) input.ind-%var275X) (bvslt input.ind-%var275X (_ bv10 32))))))
 ))
 (let (($x133 (and $x245 $x227)))
 (let (($x135 (= $x133 true)))
 (let (($x218 (forall ((input.ind-%var270X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var270X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x20))))
 (let ((?x81 (input.spec-%var-x-0.1.1 input.ind-%var270X)))
 (let (($x124 (input.spec-%var-x-0.0.1 input.ind-%var270X)))
 (=> $x124 (= ?x81 ?x197))))))))
 ))
 (let (($x259 (forall ((input.ind-%var269X (_ BitVec 32)) )(let (($x124 (input.spec-%var-x-0.0.1 input.ind-%var269X)))
 (= $x124 (and (bvsle (_ bv0 32) input.ind-%var269X) (bvslt input.ind-%var269X (_ bv10 32))))))
 ))
 (let (($x278 (and $x259 $x218)))
 (let (($x74 (= $x278 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x176 (concat ?x229 (concat ?x105 (concat ?x40 ?x60)))))
 (let (($x222 (= ?x176 input.dst.llvm-%x)))
 (let (($x76 (= $x222 true)))
 (let (($x21 (= $x76 true)))
 (let (($x13 (= input.dst.llvm-%x ?x176)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x77)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x171 $x206)))
 (let (($x202 (and $x207 $x166)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x51 $x202)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x159)))))))
 (let (($x210 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x213 (and true $x210)))
 (let (($x170 (= (bvand ?x115 (_ bv4294967292 32)) ?x115)))
 (let (($x204 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x115 (bvsub ?x115 (_ bv4 32))) (bvult ?x115 (bvsub ?x115 (_ bv4 32))))))
 (let (($x126 (and true $x204)))
 (let (($x169 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x95 (and (and (and $x169 $x126) $x170) $x213)))
 (let (($x103 (and $x169 $x95)))
 (let (($x83 (and (and (and (and $x103 $x194) true) $x138) $x13)))
 (let (($x122 (= $x83 true)))
 (let (($x68 (= $x122 true)))
 (let (($x233 (= $x68 true)))
 (let (($x17 (= $x103 true)))
 (let (($x177 (= $x17 true)))
 (let (($x226 (= $x177 true)))
 (let (($x10 (and $x194 $x138)))
 (let (($x128 (= $x10 true)))
 (let (($x203 (= $x128 true)))
 (let (($x205 (= $x203 true)))
 (let (($x285 (and $x205 $x226)))
 (let (($x288 (and $x285 $x226)))
 (let (($x43 (and $x288 $x233)))
 (let (($x82 (and $x43 $x21)))
 (let (($x188 (and $x82 $x74)))
 (let (($x38 (and $x188 $x135)))
 (let (($x101 (and $x38 $x232)))
 (let (($x179 (and $x101 $x162)))
 (let (($x148 (and $x151 $x198)))
 (let (($x217 (and $x148 $x179)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x214 (and $x153 $x217)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x127 (and $x117 $x214)))
 (let (($x97 (= ?x108 input.spec-%var-x0-0.L2%10%d)))
 (let (($x187 (and $x97 $x127)))
 (let (($x111 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x182 (and $x111 $x187)))
 (let (($x231 (and $x63 $x182)))
 (let ((?x104 (bvadd ?x108 ?x92)))
 (let (($x109 (= ?x104 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x27 (and $x109 $x231)))
 (let (($x31 (= ?x92 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x263 (and $x31 $x27)))
 (let (($x90 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x269 (and $x90 $x263)))
 (let (($x252 (and $x63 $x269)))
 (let (($x19 (bvugt ?x115 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x70 (=> (bvule ?x115 (bvsub (bvadd ?x115 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x19)))))))
 (let (($x67 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x87 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x67)))))))
 (let (($x45 (and $x87 $x70)))
 (let (($x14 (and $x45 $x252)))
 (let (($x41 (=> $x14 $x265)))
 (not $x41)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 168 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171579/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x137)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x271)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x113 (concat ?x266 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x55 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x19 (bvadd ?x55 (_ bv3 32))))
 (let ((?x116 (concat (select input.dst.llvm-mem ?x19) (concat ?x209 ?x113))))
 (let ((?x244 (bvadd ?x116 ?x52)))
 (let (($x261 (= (_ bv45 32) ?x244)))
 (let (($x193 (= $x261 true)))
 (let (($x225 (= $x193 true)))
 (let ((?x31 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x142 (= ?x31 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x265 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x41 (ite $x265 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x41 (_ bv1 32))))
 (let (($x270 (=> $x236 $x142)))
 (let (($x264 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x18 (= $x236 $x264)))
 (let (($x62 (= false false)))
 (let (($x79 (= ?x41 (_ bv0 32))))
 (let (($x156 (=> $x79 $x62)))
 (let (($x237 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x71 (= $x79 $x237)))
 (let (($x91 (and (and (and $x71 $x156) $x18) $x270)))
 (let (($x129 (= $x91 true)))
 (let ((?x114 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x149 (= ?x114 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x198 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x150 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x150 (_ bv1 32))))
 (let (($x163 (=> $x262 $x149)))
 (let (($x167 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x286 (= $x262 $x167)))
 (let (($x146 (= ?x150 (_ bv0 32))))
 (let (($x251 (=> $x146 $x62)))
 (let (($x174 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x287 (= $x146 $x174)))
 (let (($x224 (and (and (and $x287 $x251) $x286) $x163)))
 (let (($x181 (= $x224 true)))
 (let (($x215 (forall ((input.ind-%var302X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var302X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x118))))
 (let ((?x108 (input.spec-%var-x-0.1.1 input.ind-%var302X)))
 (let (($x148 (input.spec-%var-x-0.0.1 input.ind-%var302X)))
 (=> $x148 (= ?x108 ?x255))))))))
 ))
 (let (($x183 (forall ((input.ind-%var301X (_ BitVec 32)) )(let (($x148 (input.spec-%var-x-0.0.1 input.ind-%var301X)))
 (= $x148 (and (bvsle (_ bv0 32) input.ind-%var301X) (bvslt input.ind-%var301X (_ bv10 32))))))
 ))
 (let (($x5 (and $x183 $x215)))
 (let (($x49 (= $x5 true)))
 (let (($x7 (forall ((input.ind-%var296X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var296X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x118))))
 (let ((?x108 (input.spec-%var-x-0.1.1 input.ind-%var296X)))
 (let (($x148 (input.spec-%var-x-0.0.1 input.ind-%var296X)))
 (=> $x148 (= ?x108 ?x255))))))))
 ))
 (let (($x283 (forall ((input.ind-%var295X (_ BitVec 32)) )(let (($x148 (input.spec-%var-x-0.0.1 input.ind-%var295X)))
 (= $x148 (and (bvsle (_ bv0 32) input.ind-%var295X) (bvslt input.ind-%var295X (_ bv10 32))))))
 ))
 (let (($x25 (and $x283 $x7)))
 (let (($x23 (= $x25 true)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x13 (concat ?x228 (concat ?x105 ?x230)))))
 (let (($x124 (= ?x83 input.dst.llvm-%x)))
 (let (($x272 (= $x124 true)))
 (let (($x258 (= $x272 true)))
 (let (($x122 (= input.dst.llvm-%x ?x83)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x10)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x77 $x202)))
 (let (($x203 (and $x138 $x128)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (and $x159 $x203)))
 (let (($x194 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x207 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x190 $x194)))))))
 (let (($x95 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x103 (and true $x95)))
 (let (($x189 (= (bvand ?x55 (_ bv4294967292 32)) ?x55)))
 (let (($x170 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x55 (bvsub ?x55 (_ bv4 32))) (bvult ?x55 (bvsub ?x55 (_ bv4 32))))))
 (let (($x211 (and true $x170)))
 (let (($x16 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x226 (and (and (and $x16 $x211) $x189) $x103)))
 (let (($x285 (and $x16 $x226)))
 (let (($x222 (and (and (and (and $x285 $x207) true) $x205) $x122)))
 (let (($x76 (= $x222 true)))
 (let (($x21 (= $x76 true)))
 (let (($x82 (= $x21 true)))
 (let (($x288 (= $x285 true)))
 (let (($x139 (= $x288 true)))
 (let (($x93 (= $x139 true)))
 (let (($x66 (and $x207 $x205)))
 (let (($x191 (= $x66 true)))
 (let (($x169 (= $x191 true)))
 (let (($x196 (= $x169 true)))
 (let (($x192 (and $x196 $x93)))
 (let (($x64 (and $x192 $x93)))
 (let (($x80 (and $x64 $x82)))
 (let (($x246 (and $x80 $x258)))
 (let (($x84 (and $x246 $x23)))
 (let (($x120 (and $x84 $x49)))
 (let (($x130 (and $x120 $x181)))
 (let (($x28 (and $x130 $x129)))
 (let (($x282 (and $x146 $x28)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x221 (and $x145 $x282)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x35 (and $x151 $x221)))
 (let (($x125 (= ?x114 input.spec-%var-x0-0.L2%10%d)))
 (let (($x260 (and $x125 $x35)))
 (let (($x123 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x284 (and $x123 $x260)))
 (let (($x47 (and $x62 $x284)))
 (let ((?x111 (bvadd ?x114 ?x31)))
 (let (($x97 (= ?x111 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x54 (and $x97 $x47)))
 (let (($x109 (= ?x31 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x273 (and $x109 $x54)))
 (let (($x107 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x254 (and $x107 $x273)))
 (let (($x243 (and $x62 $x254)))
 (let (($x65 (bvugt ?x55 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x88 (=> (bvule ?x55 (bvsub (bvadd ?x55 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x65)))))))
 (let (($x85 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x164 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x85)))))))
 (let (($x6 (and $x164 $x88)))
 (let (($x281 (and $x6 $x243)))
 (let (($x250 (=> $x281 $x225)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-4.L2%10%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-4.L2%10%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%var-x0-0.L2%10%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x1-0.L2%17%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%18%bbentry () (_ BitVec 32))
(assert
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%x))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv2 32))) ?x137)))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%x (_ bv3 32))) ?x271)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv1 32)))))
 (let ((?x113 (concat ?x266 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%x)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%x) (_ bv2 32)))))
 (let ((?x55 (bvadd (_ bv4 32) input.dst.llvm-%x)))
 (let ((?x19 (bvadd ?x55 (_ bv3 32))))
 (let ((?x116 (concat (select input.dst.llvm-mem ?x19) (concat ?x209 ?x113))))
 (let ((?x244 (bvadd ?x116 ?x52)))
 (let (($x261 (= (_ bv45 32) ?x244)))
 (let (($x193 (= $x261 true)))
 (let (($x225 (= $x193 true)))
 (let ((?x31 (input.spec-%var-x-0.1.1 (_ bv1 32))))
 (let (($x142 (= ?x31 input.spec-%tmpvar-4.L2%10%d.2)))
 (let (($x265 (input.spec-%var-x-0.0.1 (_ bv1 32))))
 (let ((?x41 (ite $x265 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x41 (_ bv1 32))))
 (let (($x270 (=> $x236 $x142)))
 (let (($x264 (bvuge input.spec-%tmpvar-4.L2%10%d.0 (_ bv1 32))))
 (let (($x18 (= $x236 $x264)))
 (let (($x62 (= false false)))
 (let (($x79 (= ?x41 (_ bv0 32))))
 (let (($x156 (=> $x79 $x62)))
 (let (($x237 (= input.spec-%tmpvar-4.L2%10%d.0 (_ bv0 32))))
 (let (($x71 (= $x79 $x237)))
 (let (($x91 (and (and (and $x71 $x156) $x18) $x270)))
 (let (($x129 (= $x91 true)))
 (let ((?x114 (input.spec-%var-x-0.1.1 (_ bv0 32))))
 (let (($x149 (= ?x114 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x198 (input.spec-%var-x-0.0.1 (_ bv0 32))))
 (let ((?x150 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x150 (_ bv1 32))))
 (let (($x163 (=> $x262 $x149)))
 (let (($x167 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x286 (= $x262 $x167)))
 (let (($x146 (= ?x150 (_ bv0 32))))
 (let (($x251 (=> $x146 $x62)))
 (let (($x174 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x287 (= $x146 $x174)))
 (let (($x224 (and (and (and $x287 $x251) $x286) $x163)))
 (let (($x181 (= $x224 true)))
 (let (($x215 (forall ((input.ind-%var302X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var302X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x118))))
 (let ((?x108 (input.spec-%var-x-0.1.1 input.ind-%var302X)))
 (let (($x148 (input.spec-%var-x-0.0.1 input.ind-%var302X)))
 (=> $x148 (= ?x108 ?x255))))))))
 ))
 (let (($x183 (forall ((input.ind-%var301X (_ BitVec 32)) )(let (($x148 (input.spec-%var-x-0.0.1 input.ind-%var301X)))
 (= $x148 (and (bvsle (_ bv0 32) input.ind-%var301X) (bvslt input.ind-%var301X (_ bv10 32))))))
 ))
 (let (($x5 (and $x183 $x215)))
 (let (($x49 (= $x5 true)))
 (let (($x7 (forall ((input.ind-%var296X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var296X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x118))))
 (let ((?x108 (input.spec-%var-x-0.1.1 input.ind-%var296X)))
 (let (($x148 (input.spec-%var-x-0.0.1 input.ind-%var296X)))
 (=> $x148 (= ?x108 ?x255))))))))
 ))
 (let (($x283 (forall ((input.ind-%var295X (_ BitVec 32)) )(let (($x148 (input.spec-%var-x-0.0.1 input.ind-%var295X)))
 (= $x148 (and (bvsle (_ bv0 32) input.ind-%var295X) (bvslt input.ind-%var295X (_ bv10 32))))))
 ))
 (let (($x25 (and $x283 $x7)))
 (let (($x23 (= $x25 true)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x13 (concat ?x228 (concat ?x105 ?x230)))))
 (let (($x124 (= ?x83 input.dst.llvm-%x)))
 (let (($x272 (= $x124 true)))
 (let (($x258 (= $x272 true)))
 (let (($x122 (= input.dst.llvm-%x ?x83)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x10)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x77 $x202)))
 (let (($x203 (and $x138 $x128)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (and $x159 $x203)))
 (let (($x194 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x207 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x190 $x194)))))))
 (let (($x95 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))) (bvult input.dst.llvm-%x (bvsub input.dst.llvm-%x (_ bv0 32))))))
 (let (($x103 (and true $x95)))
 (let (($x189 (= (bvand ?x55 (_ bv4294967292 32)) ?x55)))
 (let (($x170 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x55 (bvsub ?x55 (_ bv4 32))) (bvult ?x55 (bvsub ?x55 (_ bv4 32))))))
 (let (($x211 (and true $x170)))
 (let (($x16 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x226 (and (and (and $x16 $x211) $x189) $x103)))
 (let (($x285 (and $x16 $x226)))
 (let (($x222 (and (and (and (and $x285 $x207) true) $x205) $x122)))
 (let (($x76 (= $x222 true)))
 (let (($x21 (= $x76 true)))
 (let (($x82 (= $x21 true)))
 (let (($x288 (= $x285 true)))
 (let (($x139 (= $x288 true)))
 (let (($x93 (= $x139 true)))
 (let (($x66 (and $x207 $x205)))
 (let (($x191 (= $x66 true)))
 (let (($x169 (= $x191 true)))
 (let (($x196 (= $x169 true)))
 (let (($x192 (and $x196 $x93)))
 (let (($x64 (and $x192 $x93)))
 (let (($x80 (and $x64 $x82)))
 (let (($x246 (and $x80 $x258)))
 (let (($x84 (and $x246 $x23)))
 (let (($x120 (and $x84 $x49)))
 (let (($x130 (and $x120 $x181)))
 (let (($x28 (and $x130 $x129)))
 (let (($x282 (and $x146 $x28)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x221 (and $x145 $x282)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%d)))
 (let (($x35 (and $x151 $x221)))
 (let (($x125 (= ?x114 input.spec-%var-x0-0.L2%10%d)))
 (let (($x260 (and $x125 $x35)))
 (let (($x123 (= (_ bv12 32) input.spec-%tmpvar-5.L2%17%bbentry)))
 (let (($x284 (and $x123 $x260)))
 (let (($x47 (and $x62 $x284)))
 (let ((?x111 (bvadd ?x114 ?x31)))
 (let (($x97 (= ?x111 input.spec-%tmpvar-6.L2%17%bbentry)))
 (let (($x54 (and $x97 $x47)))
 (let (($x109 (= ?x31 input.spec-%var-x1-0.L2%17%bbentry)))
 (let (($x273 (and $x109 $x54)))
 (let (($x107 (= (_ bv45 32) input.spec-%tmpvar-2.L2%18%bbentry)))
 (let (($x254 (and $x107 $x273)))
 (let (($x243 (and $x62 $x254)))
 (let (($x65 (bvugt ?x55 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x88 (=> (bvule ?x55 (bvsub (bvadd ?x55 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x65)))))))
 (let (($x85 (bvugt input.dst.llvm-%x input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd input.dst.llvm-%x (_ bv3 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x164 (=> (bvule input.dst.llvm-%x (bvsub (bvadd input.dst.llvm-%x (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x50 $x85)))))))
 (let (($x6 (and $x164 $x88)))
 (let (($x281 (and $x6 $x243)))
 (let (($x250 (=> $x281 $x225)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 167 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2171579/query
